// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999913479957395	WITHOUT_CLASSIFICATION	8.652004260463103E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9998909192935752	WITHOUT_CLASSIFICATION	1.0908070642473469E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999623783734611	WITHOUT_CLASSIFICATION	3.762162653889421E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999623783734611	WITHOUT_CLASSIFICATION	3.762162653889421E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9997860634329917	WITHOUT_CLASSIFICATION	2.1393656700827797E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9997860634329917	WITHOUT_CLASSIFICATION	2.1393656700827797E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997691856017747	WITHOUT_CLASSIFICATION	2.308143982253744E-4	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999869978957452	WITHOUT_CLASSIFICATION	1.300210425481889E-5	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9998893375835343	WITHOUT_CLASSIFICATION	1.1066241646576428E-4	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9998991705107368	WITHOUT_CLASSIFICATION	1.0082948926322494E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9995403479515558	WITHOUT_CLASSIFICATION	4.5965204844427903E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9995403479515558	WITHOUT_CLASSIFICATION	4.5965204844427903E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9998919496441451	WITHOUT_CLASSIFICATION	1.0805035585492292E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9996181615883604	WITHOUT_CLASSIFICATION	3.8183841163955123E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9996181615883604	WITHOUT_CLASSIFICATION	3.8183841163955123E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9991789926509743	WITHOUT_CLASSIFICATION	8.210073490257235E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9991833848664802	WITHOUT_CLASSIFICATION	8.166151335198422E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999584776451546	WITHOUT_CLASSIFICATION	4.15223548453948E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999584776451546	WITHOUT_CLASSIFICATION	4.15223548453948E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999584776451546	WITHOUT_CLASSIFICATION	4.15223548453948E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999584776451546	WITHOUT_CLASSIFICATION	4.15223548453948E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999584776451546	WITHOUT_CLASSIFICATION	4.15223548453948E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999584776451546	WITHOUT_CLASSIFICATION	4.15223548453948E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999584776451546	WITHOUT_CLASSIFICATION	4.15223548453948E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998141818910521	WITHOUT_CLASSIFICATION	1.8581810894781624E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998141818910521	WITHOUT_CLASSIFICATION	1.8581810894781624E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998141818910521	WITHOUT_CLASSIFICATION	1.8581810894781624E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998141818910521	WITHOUT_CLASSIFICATION	1.8581810894781624E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998141818910521	WITHOUT_CLASSIFICATION	1.8581810894781624E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998141818910521	WITHOUT_CLASSIFICATION	1.8581810894781624E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998141818910521	WITHOUT_CLASSIFICATION	1.8581810894781624E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997423608390955	WITHOUT_CLASSIFICATION	2.576391609044555E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997423608390955	WITHOUT_CLASSIFICATION	2.576391609044555E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997423608390955	WITHOUT_CLASSIFICATION	2.576391609044555E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997423608390955	WITHOUT_CLASSIFICATION	2.576391609044555E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997423608390955	WITHOUT_CLASSIFICATION	2.576391609044555E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997423608390955	WITHOUT_CLASSIFICATION	2.576391609044555E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9996007487888428	WITHOUT_CLASSIFICATION	3.992512111572033E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9996007487888428	WITHOUT_CLASSIFICATION	3.992512111572033E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9996007487888428	WITHOUT_CLASSIFICATION	3.992512111572033E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9996007487888428	WITHOUT_CLASSIFICATION	3.992512111572033E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9996007487888428	WITHOUT_CLASSIFICATION	3.992512111572033E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9996007487888428	WITHOUT_CLASSIFICATION	3.992512111572033E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9996683406735359	WITHOUT_CLASSIFICATION	3.3165932646402594E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9996683406735359	WITHOUT_CLASSIFICATION	3.3165932646402594E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9996683406735359	WITHOUT_CLASSIFICATION	3.3165932646402594E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9996683406735359	WITHOUT_CLASSIFICATION	3.3165932646402594E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9996683406735359	WITHOUT_CLASSIFICATION	3.3165932646402594E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9996683406735359	WITHOUT_CLASSIFICATION	3.3165932646402594E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9996683406735359	WITHOUT_CLASSIFICATION	3.3165932646402594E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9995697247281587	WITHOUT_CLASSIFICATION	4.302752718412766E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9995697247281587	WITHOUT_CLASSIFICATION	4.302752718412766E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9995697247281587	WITHOUT_CLASSIFICATION	4.302752718412766E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9995697247281587	WITHOUT_CLASSIFICATION	4.302752718412766E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9998472342112061	WITHOUT_CLASSIFICATION	1.5276578879389171E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9998472342112061	WITHOUT_CLASSIFICATION	1.5276578879389171E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999768970861951	WITHOUT_CLASSIFICATION	2.310291380495033E-5	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999399534545947	WITHOUT_CLASSIFICATION	6.004654540528495E-5	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999839586452561	WITHOUT_CLASSIFICATION	1.604135474383357E-5	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999792159813223	WITHOUT_CLASSIFICATION	2.0784018677670094E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999517539598916	WITHOUT_CLASSIFICATION	4.824604010859358E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999517539598916	WITHOUT_CLASSIFICATION	4.824604010859358E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999517539598916	WITHOUT_CLASSIFICATION	4.824604010859358E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999517539598916	WITHOUT_CLASSIFICATION	4.824604010859358E-5	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9999979364793492	WITHOUT_CLASSIFICATION	2.0635206507504326E-6	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999559895462328	WITHOUT_CLASSIFICATION	4.40104537672192E-5	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999964512300112	WITHOUT_CLASSIFICATION	3.548769988625775E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999454688233279	WITHOUT_CLASSIFICATION	5.4531176671995505E-5	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9998356781416956	WITHOUT_CLASSIFICATION	1.643218583044069E-4	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999941769926188	WITHOUT_CLASSIFICATION	5.823007381154803E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999601140371992	WITHOUT_CLASSIFICATION	3.9885962800821655E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999501425388774	WITHOUT_CLASSIFICATION	4.985746112251672E-5	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999997516072958	WITHOUT_CLASSIFICATION	2.4839270422976375E-7	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9997955803423476	WITHOUT_CLASSIFICATION	2.0441965765230372E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999691087368602	WITHOUT_CLASSIFICATION	3.089126313980504E-5	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999701163634394	WITHOUT_CLASSIFICATION	2.9883636560661985E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9998932259520551	WITHOUT_CLASSIFICATION	1.0677404794484E-4	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999984123825388	WITHOUT_CLASSIFICATION	1.5876174612198863E-6	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999889470940581	WITHOUT_CLASSIFICATION	1.105290594202989E-5	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999962372843022	WITHOUT_CLASSIFICATION	3.762715697773558E-6	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999991428272302	WITHOUT_CLASSIFICATION	8.571727699107529E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999517539598916	WITHOUT_CLASSIFICATION	4.824604010859358E-5	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999923969076423	WITHOUT_CLASSIFICATION	7.603092357723258E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999932500313287	WITHOUT_CLASSIFICATION	6.749968671336291E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999826091707149	WITHOUT_CLASSIFICATION	1.7390829285062266E-5	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999426388124049	WITHOUT_CLASSIFICATION	5.736118759503611E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999785215177895	WITHOUT_CLASSIFICATION	2.1478482210481557E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999811402880995	WITHOUT_CLASSIFICATION	1.8859711900464584E-5	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999994583225158	WITHOUT_CLASSIFICATION	5.416774842986475E-7	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999980800867512	WITHOUT_CLASSIFICATION	1.9199132487912717E-6	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999960122880786	WITHOUT_CLASSIFICATION	3.98771192138682E-6	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9999998717096504	WITHOUT_CLASSIFICATION	1.2829034951261678E-7	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9999771689027417	WITHOUT_CLASSIFICATION	2.283109725826475E-5	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999266957726094	WITHOUT_CLASSIFICATION	7.330422739057789E-5	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999972971904444	WITHOUT_CLASSIFICATION	2.7028095556239594E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.99996698643363	WITHOUT_CLASSIFICATION	3.30135663700014E-5	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9997288005463142	WITHOUT_CLASSIFICATION	2.711994536858132E-4	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9998204166871013	WITHOUT_CLASSIFICATION	1.79583312898649E-4	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999672376450055	WITHOUT_CLASSIFICATION	3.27623549945395E-5	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999933699272082	WITHOUT_CLASSIFICATION	6.630072791799564E-6	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999946768764496	WITHOUT_CLASSIFICATION	5.323123550393133E-6	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999937138478051	WITHOUT_CLASSIFICATION	6.286152194891226E-6	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9999782155934278	WITHOUT_CLASSIFICATION	2.17844065722463E-5	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999029729371658	WITHOUT_CLASSIFICATION	9.702706283419071E-5	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999209164885413	WITHOUT_CLASSIFICATION	7.908351145868739E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9996119678389053	WITHOUT_CLASSIFICATION	3.8803216109484614E-4	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999775100123863	WITHOUT_CLASSIFICATION	2.2489987613591715E-5	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9998631663424552	WITHOUT_CLASSIFICATION	1.3683365754491923E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999701564575283	WITHOUT_CLASSIFICATION	2.984354247166182E-5	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999364879732735	WITHOUT_CLASSIFICATION	6.351202672652949E-5	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999733717059689	WITHOUT_CLASSIFICATION	2.6628294031012208E-5	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999869534743753	WITHOUT_CLASSIFICATION	1.3046525624724188E-5	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999918080626076	WITHOUT_CLASSIFICATION	8.191937392374148E-6	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999803027416136	WITHOUT_CLASSIFICATION	1.9697258386350173E-5	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999168327402171	WITHOUT_CLASSIFICATION	8.316725978292609E-5	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999959494153134	WITHOUT_CLASSIFICATION	4.050584686563366E-6	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999979401534824	WITHOUT_CLASSIFICATION	2.059846517632002E-6	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999721793119936	WITHOUT_CLASSIFICATION	2.7820688006452273E-5	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999434796511087	WITHOUT_CLASSIFICATION	5.6520348891309554E-5	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999549724667811	WITHOUT_CLASSIFICATION	4.50275332188779E-5	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.999998860689609	WITHOUT_CLASSIFICATION	1.1393103910552415E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999082870167778	WITHOUT_CLASSIFICATION	9.171298322218422E-5	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9998400709834465	WITHOUT_CLASSIFICATION	1.599290165534222E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999571908067167	WITHOUT_CLASSIFICATION	4.2809193283283214E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999821815842622	WITHOUT_CLASSIFICATION	1.78184157378476E-5	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999739031305718	WITHOUT_CLASSIFICATION	2.6096869428171424E-5	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999739031305718	WITHOUT_CLASSIFICATION	2.6096869428171424E-5	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999456882151153	WITHOUT_CLASSIFICATION	5.431178488454784E-5	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999954945150792	WITHOUT_CLASSIFICATION	4.505484920721776E-6	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.999891696222896	WITHOUT_CLASSIFICATION	1.0830377710408854E-4	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999807185239517	WITHOUT_CLASSIFICATION	1.9281476048261826E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999641147344978	WITHOUT_CLASSIFICATION	3.5885265502337956E-5	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9999593283847032	WITHOUT_CLASSIFICATION	4.0671615296791915E-5	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9989242285432764	WITHOUT_CLASSIFICATION	0.00107577145672355	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9998493048169531	WITHOUT_CLASSIFICATION	1.5069518304684532E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999571908067167	WITHOUT_CLASSIFICATION	4.2809193283283214E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9998965839475988	WITHOUT_CLASSIFICATION	1.0341605240123423E-4	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999573428578833	WITHOUT_CLASSIFICATION	4.265714211683614E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999407720398991	WITHOUT_CLASSIFICATION	5.922796010083928E-5	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999812296338175	WITHOUT_CLASSIFICATION	1.8770366182501888E-5	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999229600960884	WITHOUT_CLASSIFICATION	7.70399039116445E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999638039032639	WITHOUT_CLASSIFICATION	3.6196096736161E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999638039032639	WITHOUT_CLASSIFICATION	3.6196096736161E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999638039032639	WITHOUT_CLASSIFICATION	3.6196096736161E-5	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.999986049686946	WITHOUT_CLASSIFICATION	1.395031305402905E-5	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999895921226042	WITHOUT_CLASSIFICATION	1.0407877395781506E-5	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999945631193717	WITHOUT_CLASSIFICATION	5.436880628201865E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9999931843041646	WITHOUT_CLASSIFICATION	6.815695835427296E-6	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999985096830295	WITHOUT_CLASSIFICATION	1.4903169705750804E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999851690000994	WITHOUT_CLASSIFICATION	1.4830999900594316E-5	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9999801878464084	WITHOUT_CLASSIFICATION	1.9812153591583434E-5	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999666415374174	WITHOUT_CLASSIFICATION	3.335846258257229E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999314987370408	WITHOUT_CLASSIFICATION	6.850126295914227E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999314987370408	WITHOUT_CLASSIFICATION	6.850126295914227E-5	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9998669414022971	WITHOUT_CLASSIFICATION	1.330585977027335E-4	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999988340154843	WITHOUT_CLASSIFICATION	1.165984515746202E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999561656160383	WITHOUT_CLASSIFICATION	4.38343839617321E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999561656160383	WITHOUT_CLASSIFICATION	4.38343839617321E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999983810559383	WITHOUT_CLASSIFICATION	1.6189440617013856E-6	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999989854503499	WITHOUT_CLASSIFICATION	1.0145496500043378E-6	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9994609945496993	WITHOUT_CLASSIFICATION	5.390054503008462E-4	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999959011256271	WITHOUT_CLASSIFICATION	4.098874372901629E-6	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999875458441077	WITHOUT_CLASSIFICATION	1.2454155892389326E-5	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999686280155228	WITHOUT_CLASSIFICATION	3.137198447722952E-5	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9998801497776348	WITHOUT_CLASSIFICATION	1.1985022236505452E-4	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999693136306554	WITHOUT_CLASSIFICATION	3.0686369344487256E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999791910234864	WITHOUT_CLASSIFICATION	2.0808976513573763E-5	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999868392337238	WITHOUT_CLASSIFICATION	1.316076627611219E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999571908067167	WITHOUT_CLASSIFICATION	4.2809193283283214E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999903654773477	WITHOUT_CLASSIFICATION	9.634522652430061E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999662162469539	WITHOUT_CLASSIFICATION	3.37837530460572E-5	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999004571783482	WITHOUT_CLASSIFICATION	9.95428216518461E-5	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9997760413342374	WITHOUT_CLASSIFICATION	2.2395866576264983E-4	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999904955850306	WITHOUT_CLASSIFICATION	9.504414969424104E-6	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999680411946443	WITHOUT_CLASSIFICATION	3.195880535560649E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9994293153958858	WITHOUT_CLASSIFICATION	5.706846041141957E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.998602417056362	WITHOUT_CLASSIFICATION	0.0013975829436379697	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999810081240257	WITHOUT_CLASSIFICATION	1.8991875974327354E-5	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.999983878061805	WITHOUT_CLASSIFICATION	1.612193819501385E-5	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999907627838995	WITHOUT_CLASSIFICATION	9.237216100526938E-6	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999933947478538	WITHOUT_CLASSIFICATION	6.605252146251827E-6	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.99913573699297	WITHOUT_CLASSIFICATION	8.642630070301653E-4	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999855081650254	WITHOUT_CLASSIFICATION	1.4491834974562177E-5	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999631324654255	WITHOUT_CLASSIFICATION	3.6867534574489456E-5	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999901601098656	WITHOUT_CLASSIFICATION	9.83989013432936E-6	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999985142313572	WITHOUT_CLASSIFICATION	1.4857686426828682E-6	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999889945883378	WITHOUT_CLASSIFICATION	1.1005411662175655E-5	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.999981587443439	WITHOUT_CLASSIFICATION	1.841255656099591E-5	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999987998037294	WITHOUT_CLASSIFICATION	1.2001962705769093E-6	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999942646603472	WITHOUT_CLASSIFICATION	5.735339652786108E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999972571701394	WITHOUT_CLASSIFICATION	2.742829860579371E-6	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999196796905858	WITHOUT_CLASSIFICATION	8.032030941416369E-5	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.999980483642475	WITHOUT_CLASSIFICATION	1.951635752486694E-5	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999998309563468	WITHOUT_CLASSIFICATION	1.6904365320116114E-7	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999899278628008	WITHOUT_CLASSIFICATION	1.0072137199175846E-5	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999647603174889	WITHOUT_CLASSIFICATION	3.523968251112255E-5	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9998876389426138	WITHOUT_CLASSIFICATION	1.1236105738626946E-4	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999745141728257	WITHOUT_CLASSIFICATION	2.5485827174349037E-5	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999844515273908	WITHOUT_CLASSIFICATION	1.5548472609233203E-5	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999967290720043	WITHOUT_CLASSIFICATION	3.2709279956731975E-6	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999938713389795	WITHOUT_CLASSIFICATION	6.128661020535004E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999226775522488	WITHOUT_CLASSIFICATION	7.732244775111479E-5	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999992354802909	WITHOUT_CLASSIFICATION	7.64519708973261E-7	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999672440913219	WITHOUT_CLASSIFICATION	3.275590867822566E-5	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999579148049643	WITHOUT_CLASSIFICATION	4.2085195035646604E-5	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999909005896188	WITHOUT_CLASSIFICATION	9.09941038106991E-6	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999913726668934	WITHOUT_CLASSIFICATION	8.627333106624783E-6	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999744043370148	WITHOUT_CLASSIFICATION	2.559566298517665E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999738833767192	WITHOUT_CLASSIFICATION	2.611662328070676E-5	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999984047284726	WITHOUT_CLASSIFICATION	1.5952715273746276E-6	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999696058446615	WITHOUT_CLASSIFICATION	3.0394155338376355E-5	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999955777423158	WITHOUT_CLASSIFICATION	4.4222576842379165E-6	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999981846275163	WITHOUT_CLASSIFICATION	1.8153724837786037E-6	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999773779353581	WITHOUT_CLASSIFICATION	2.262206464183588E-5	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999751294275909	WITHOUT_CLASSIFICATION	2.4870572409154446E-5	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999761549723325	WITHOUT_CLASSIFICATION	2.384502766747567E-5	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999954904570932	WITHOUT_CLASSIFICATION	4.509542906725727E-6	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999953130172569	WITHOUT_CLASSIFICATION	4.686982743078211E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999901596592672	WITHOUT_CLASSIFICATION	9.840340732802583E-6	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999603515540775	WITHOUT_CLASSIFICATION	3.964844592246733E-5	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999970761933722	WITHOUT_CLASSIFICATION	2.923806627719008E-6	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999944484764163	WITHOUT_CLASSIFICATION	5.551523583663771E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999922322098251	WITHOUT_CLASSIFICATION	7.76779017497392E-6	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999852825294074	WITHOUT_CLASSIFICATION	1.4717470592571543E-5	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999990716889026	WITHOUT_CLASSIFICATION	9.283110974409499E-7	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9998881174352928	WITHOUT_CLASSIFICATION	1.1188256470709778E-4	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999715423590901	WITHOUT_CLASSIFICATION	2.8457640909934928E-5	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999965017172864	WITHOUT_CLASSIFICATION	3.498282713704066E-6	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999893536350042	WITHOUT_CLASSIFICATION	1.0646364995742773E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.999724867126955	WITHOUT_CLASSIFICATION	2.751328730449316E-4	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.999724867126955	WITHOUT_CLASSIFICATION	2.751328730449316E-4	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9998234658648781	WITHOUT_CLASSIFICATION	1.7653413512179822E-4	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9998234658648781	WITHOUT_CLASSIFICATION	1.7653413512179822E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9996989617802927	WITHOUT_CLASSIFICATION	3.010382197072306E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9996989617802927	WITHOUT_CLASSIFICATION	3.010382197072306E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.999872824670156	WITHOUT_CLASSIFICATION	1.271753298439276E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.999872824670156	WITHOUT_CLASSIFICATION	1.271753298439276E-4	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999880992819776	WITHOUT_CLASSIFICATION	1.1900718022395143E-5	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999791717860224	WITHOUT_CLASSIFICATION	2.0828213977633675E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998455860081096	WITHOUT_CLASSIFICATION	1.5441399189044643E-4	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999854431562984	WITHOUT_CLASSIFICATION	1.4556843701577526E-5	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999938166308947	WITHOUT_CLASSIFICATION	6.183369105246775E-6	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999921390613804	WITHOUT_CLASSIFICATION	7.860938619584833E-6	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9995719900239409	WITHOUT_CLASSIFICATION	4.280099760590485E-4	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999838931112044	WITHOUT_CLASSIFICATION	1.6106888795621053E-5	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999681039914952	WITHOUT_CLASSIFICATION	3.189600850482301E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999639607881308	WITHOUT_CLASSIFICATION	3.603921186927956E-5	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999951974816885	WITHOUT_CLASSIFICATION	4.802518311506558E-6	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999690073791377	WITHOUT_CLASSIFICATION	3.0992620862247766E-5	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9997065840806554	WITHOUT_CLASSIFICATION	2.934159193445613E-4	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999968492911091	WITHOUT_CLASSIFICATION	3.150708890903764E-6	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999819058265551	WITHOUT_CLASSIFICATION	1.809417344489083E-5	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9997792441696544	WITHOUT_CLASSIFICATION	2.207558303457278E-4	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999619272293948	WITHOUT_CLASSIFICATION	3.807277060522844E-5	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999379470799593	WITHOUT_CLASSIFICATION	6.205292004068384E-5	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999889915228206	WITHOUT_CLASSIFICATION	1.1008477179387223E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9999556544441814	WITHOUT_CLASSIFICATION	4.434555581850592E-5	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999647800228555	WITHOUT_CLASSIFICATION	3.521997714451031E-5	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999757828214502	WITHOUT_CLASSIFICATION	2.421717854985508E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999699488447846	WITHOUT_CLASSIFICATION	3.0051155215317708E-5	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.999857595519507	WITHOUT_CLASSIFICATION	1.4240448049300777E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999117551824156	WITHOUT_CLASSIFICATION	8.824481758443325E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.999959678327923	WITHOUT_CLASSIFICATION	4.0321672076958134E-5	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9998315072675144	WITHOUT_CLASSIFICATION	1.6849273248572926E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999803872685585	WITHOUT_CLASSIFICATION	1.9612731441509958E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999803872685585	WITHOUT_CLASSIFICATION	1.9612731441509958E-5	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999579596857958	WITHOUT_CLASSIFICATION	4.204031420419847E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999738137671474	WITHOUT_CLASSIFICATION	2.6186232852499912E-5	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999694042074575	WITHOUT_CLASSIFICATION	3.059579254250113E-5	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999993157204656	WITHOUT_CLASSIFICATION	6.842795343351908E-7	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9997062709327275	WITHOUT_CLASSIFICATION	2.937290672726026E-4	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9995658781200956	WITHOUT_CLASSIFICATION	4.341218799043848E-4	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999498347896341	WITHOUT_CLASSIFICATION	5.0165210365920916E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999498347896341	WITHOUT_CLASSIFICATION	5.0165210365920916E-5	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.999918091702226	WITHOUT_CLASSIFICATION	8.190829777398497E-5	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9999479998856745	WITHOUT_CLASSIFICATION	5.200011432549314E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999207406269086	WITHOUT_CLASSIFICATION	7.92593730914038E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999207406269086	WITHOUT_CLASSIFICATION	7.92593730914038E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9999980266172432	WITHOUT_CLASSIFICATION	1.9733827567166265E-6	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.999934490695428	WITHOUT_CLASSIFICATION	6.55093045719974E-5	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.999934490695428	WITHOUT_CLASSIFICATION	6.55093045719974E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999471279685997	WITHOUT_CLASSIFICATION	5.287203140027112E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999471279685997	WITHOUT_CLASSIFICATION	5.287203140027112E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9997847873571483	WITHOUT_CLASSIFICATION	2.1521264285173923E-4	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9997847873571483	WITHOUT_CLASSIFICATION	2.1521264285173923E-4	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9997845681897032	WITHOUT_CLASSIFICATION	2.1543181029679383E-4	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.999951263217309	WITHOUT_CLASSIFICATION	4.8736782691013674E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.999996438458001	WITHOUT_CLASSIFICATION	3.5615419990737737E-6	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9998423949401021	WITHOUT_CLASSIFICATION	1.576050598980277E-4	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999979073722566	WITHOUT_CLASSIFICATION	2.092627743444457E-6	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999977152113138	WITHOUT_CLASSIFICATION	2.284788686171738E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999757685475439	WITHOUT_CLASSIFICATION	2.4231452456090822E-5	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.999980223995024	WITHOUT_CLASSIFICATION	1.9776004976135598E-5	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999757685475439	WITHOUT_CLASSIFICATION	2.4231452456090822E-5	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9996079632430129	WITHOUT_CLASSIFICATION	3.920367569870554E-4	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999889942842725	WITHOUT_CLASSIFICATION	1.1005715727469796E-5	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999728447140982	WITHOUT_CLASSIFICATION	2.7155285901770327E-5	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999876138489786	WITHOUT_CLASSIFICATION	1.2386151021398911E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999785433735626	WITHOUT_CLASSIFICATION	2.1456626437406352E-5	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999826414571741	WITHOUT_CLASSIFICATION	1.7358542825872656E-5	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999918291694898	WITHOUT_CLASSIFICATION	8.170830510202366E-6	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999718439527845	WITHOUT_CLASSIFICATION	2.8156047215503188E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999691549297252	WITHOUT_CLASSIFICATION	3.084507027484566E-5	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999900244504819	WITHOUT_CLASSIFICATION	9.975549518084895E-6	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999719197169287	WITHOUT_CLASSIFICATION	2.8080283071331975E-5	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999551327943973	WITHOUT_CLASSIFICATION	4.486720560265572E-5	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999568297147442	WITHOUT_CLASSIFICATION	4.317028525587294E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999858364655199	WITHOUT_CLASSIFICATION	1.4163534480108226E-5	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999384714443236	WITHOUT_CLASSIFICATION	6.152855567648323E-5	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999658823414581	WITHOUT_CLASSIFICATION	3.4117658541886264E-5	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9998984151806932	WITHOUT_CLASSIFICATION	1.0158481930666954E-4	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999790786521051	WITHOUT_CLASSIFICATION	2.092134789489616E-5	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999754274346925	WITHOUT_CLASSIFICATION	2.4572565307531693E-5	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999012291652879	WITHOUT_CLASSIFICATION	9.877083471213949E-5	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999566735660818	WITHOUT_CLASSIFICATION	4.3326433918302885E-5	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999721871736628	WITHOUT_CLASSIFICATION	2.7812826337224965E-5	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999910561123777	WITHOUT_CLASSIFICATION	8.943887622375639E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999825034117031	WITHOUT_CLASSIFICATION	1.7496588296945972E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999665960988616	WITHOUT_CLASSIFICATION	3.340390113836944E-5	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999087219153344	WITHOUT_CLASSIFICATION	9.127808466563857E-5	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999654568746879	WITHOUT_CLASSIFICATION	3.454312531210385E-5	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999895293122544	WITHOUT_CLASSIFICATION	1.0470687745612215E-5	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9998299212578814	WITHOUT_CLASSIFICATION	1.7007874211854573E-4	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999172840143629	WITHOUT_CLASSIFICATION	8.271598563716872E-5	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9997425779424635	WITHOUT_CLASSIFICATION	2.57422057536447E-4	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999814298811225	WITHOUT_CLASSIFICATION	1.8570118877480186E-5	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999204696048033	WITHOUT_CLASSIFICATION	7.953039519679238E-5	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999873077408817	WITHOUT_CLASSIFICATION	1.2692259118258762E-5	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999549184612194	WITHOUT_CLASSIFICATION	4.508153878061129E-5	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999351207912546	WITHOUT_CLASSIFICATION	6.487920874546662E-5	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9997260405614592	WITHOUT_CLASSIFICATION	2.739594385408615E-4	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999744991371499	WITHOUT_CLASSIFICATION	2.5500862850062057E-5	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999893584642617	WITHOUT_CLASSIFICATION	1.0641535738306841E-5	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9997363687927451	WITHOUT_CLASSIFICATION	2.636312072549327E-4	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999640236191465	WITHOUT_CLASSIFICATION	3.5976380853444196E-5	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999131631873626	WITHOUT_CLASSIFICATION	8.683681263746091E-5	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999351772424926	WITHOUT_CLASSIFICATION	6.482275750745254E-5	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9998750183261995	WITHOUT_CLASSIFICATION	1.249816738005046E-4	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999781705190774	WITHOUT_CLASSIFICATION	2.1829480922505857E-5	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999832549522505	WITHOUT_CLASSIFICATION	1.6745047749490004E-5	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999278562894041	WITHOUT_CLASSIFICATION	7.214371059595415E-5	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999798689769056	WITHOUT_CLASSIFICATION	2.0131023094460546E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999878832428158	WITHOUT_CLASSIFICATION	1.2116757184176694E-5	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9996740203056875	WITHOUT_CLASSIFICATION	3.259796943124311E-4	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9983815333946285	WITHOUT_CLASSIFICATION	0.0016184666053714037	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999882963302543	WITHOUT_CLASSIFICATION	1.170366974562354E-5	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999597642614584	WITHOUT_CLASSIFICATION	4.023573854150358E-5	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999852741568144	WITHOUT_CLASSIFICATION	1.4725843185747937E-5	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999903318285694	WITHOUT_CLASSIFICATION	9.668171430525724E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999903318285694	WITHOUT_CLASSIFICATION	9.668171430525724E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999992142235887	WITHOUT_CLASSIFICATION	7.857764111899067E-7	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999989298426362	WITHOUT_CLASSIFICATION	1.0701573637478394E-6	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999987012056024	WITHOUT_CLASSIFICATION	1.2987943974962625E-6	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999936164769779	WITHOUT_CLASSIFICATION	6.383523022083604E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999980142756155	WITHOUT_CLASSIFICATION	1.9857243844341186E-6	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999954670825062	WITHOUT_CLASSIFICATION	4.532917493838303E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999776615031756	WITHOUT_CLASSIFICATION	2.2338496824443516E-5	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999952254408369	WITHOUT_CLASSIFICATION	4.77455916320368E-6	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999953462496867	WITHOUT_CLASSIFICATION	4.653750313264457E-6	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999724807734622	WITHOUT_CLASSIFICATION	2.751922653780392E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999969791444463	WITHOUT_CLASSIFICATION	3.0208555537334486E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999969791444463	WITHOUT_CLASSIFICATION	3.0208555537334486E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.999998866515519	WITHOUT_CLASSIFICATION	1.1334844810325235E-6	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999924473686299	WITHOUT_CLASSIFICATION	7.552631370025658E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999919522003038	WITHOUT_CLASSIFICATION	8.047799696234211E-6	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999930378258262	WITHOUT_CLASSIFICATION	6.962174173828614E-6	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999972741260031	WITHOUT_CLASSIFICATION	2.725873996736977E-6	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999893983653447	WITHOUT_CLASSIFICATION	1.0601634655300434E-5	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999934943831947	WITHOUT_CLASSIFICATION	6.505616805288557E-6	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999671113560595	WITHOUT_CLASSIFICATION	3.2888643940402744E-5	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999787325065967	WITHOUT_CLASSIFICATION	2.1267493403322395E-5	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999985278113348	WITHOUT_CLASSIFICATION	1.4721886651132455E-6	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999290658242332	WITHOUT_CLASSIFICATION	7.093417576677765E-5	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999932791895083	WITHOUT_CLASSIFICATION	6.720810491785633E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999913393308706	WITHOUT_CLASSIFICATION	8.660669129477285E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999913393308706	WITHOUT_CLASSIFICATION	8.660669129477285E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999748857221011	WITHOUT_CLASSIFICATION	2.511427789884059E-5	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9998552466508397	WITHOUT_CLASSIFICATION	1.44753349160374E-4	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.999932339564447	WITHOUT_CLASSIFICATION	6.766043555301528E-5	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999986342023345	WITHOUT_CLASSIFICATION	1.365797665567942E-6	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.999998754733198	WITHOUT_CLASSIFICATION	1.245266802085712E-6	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999711751569484	WITHOUT_CLASSIFICATION	2.8824843051560952E-5	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999782510383901	WITHOUT_CLASSIFICATION	2.1748961609884757E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999753719246661	WITHOUT_CLASSIFICATION	2.4628075333941032E-5	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9996859926553481	WITHOUT_CLASSIFICATION	3.140073446519016E-4	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999736610623319	WITHOUT_CLASSIFICATION	2.6338937668177425E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999919522003038	WITHOUT_CLASSIFICATION	8.047799696234211E-6	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999968256491445	WITHOUT_CLASSIFICATION	3.1743508555343556E-6	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999752117883198	WITHOUT_CLASSIFICATION	2.47882116801368E-5	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999958118954675	WITHOUT_CLASSIFICATION	4.188104532548307E-6	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999977547635187	WITHOUT_CLASSIFICATION	2.2452364812483507E-6	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.999969799747423	WITHOUT_CLASSIFICATION	3.0200252576986706E-5	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999995641150672	WITHOUT_CLASSIFICATION	4.3588493277260623E-7	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.99999476968654	WITHOUT_CLASSIFICATION	5.230313460091102E-6	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999829016638537	WITHOUT_CLASSIFICATION	1.7098336146313548E-5	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999929885431134	WITHOUT_CLASSIFICATION	7.011456886653818E-6	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999820892380048	WITHOUT_CLASSIFICATION	1.7910761995117083E-5	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999587236022814	WITHOUT_CLASSIFICATION	4.127639771860727E-5	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999976667740484	WITHOUT_CLASSIFICATION	2.3332259514180834E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999799835754136	WITHOUT_CLASSIFICATION	2.0016424586377266E-5	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9999939071719012	WITHOUT_CLASSIFICATION	6.092828098919064E-6	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999891589650743	WITHOUT_CLASSIFICATION	1.0841034925705764E-5	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999941326810405	WITHOUT_CLASSIFICATION	5.867318959397937E-6	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999937920035384	WITHOUT_CLASSIFICATION	6.207996461490229E-6	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999185809213186	WITHOUT_CLASSIFICATION	8.141907868139011E-5	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9998600096609147	WITHOUT_CLASSIFICATION	1.3999033908527605E-4	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999648565381425	WITHOUT_CLASSIFICATION	3.514346185760491E-5	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9999986447619575	WITHOUT_CLASSIFICATION	1.3552380423900412E-6	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999822823673264	WITHOUT_CLASSIFICATION	1.7717632673556536E-5	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999507277574681	WITHOUT_CLASSIFICATION	4.9272242531917427E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9998817742022127	WITHOUT_CLASSIFICATION	1.1822579778740698E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999841212920619	WITHOUT_CLASSIFICATION	1.5878707937999194E-5	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999919787955243	WITHOUT_CLASSIFICATION	8.021204475734018E-6	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9995284456267169	WITHOUT_CLASSIFICATION	4.7155437328297875E-4	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999924933921749	WITHOUT_CLASSIFICATION	7.506607825201389E-6	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999255084937226	WITHOUT_CLASSIFICATION	7.449150627737656E-5	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999992967500657	WITHOUT_CLASSIFICATION	7.032499342688056E-7	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.999854269928179	WITHOUT_CLASSIFICATION	1.4573007182086602E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.999854269928179	WITHOUT_CLASSIFICATION	1.4573007182086602E-4	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999824571628022	WITHOUT_CLASSIFICATION	1.7542837197755283E-5	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999839564102418	WITHOUT_CLASSIFICATION	1.6043589758130348E-5	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999921710181876	WITHOUT_CLASSIFICATION	7.828981812421142E-6	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999931029359643	WITHOUT_CLASSIFICATION	6.8970640356156325E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.99999746420941	WITHOUT_CLASSIFICATION	2.5357905899228335E-6	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999445722148268	WITHOUT_CLASSIFICATION	5.5427785173259556E-5	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999571908067167	WITHOUT_CLASSIFICATION	4.2809193283283214E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999819529988164	WITHOUT_CLASSIFICATION	1.8047001183650832E-5	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999924911816569	WITHOUT_CLASSIFICATION	7.508818343185034E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999895074372007	WITHOUT_CLASSIFICATION	1.0492562799343118E-5	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999964702576676	WITHOUT_CLASSIFICATION	3.529742332308354E-6	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9997862040917046	WITHOUT_CLASSIFICATION	2.1379590829533022E-4	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999828089839579	WITHOUT_CLASSIFICATION	1.719101604207872E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999738833767192	WITHOUT_CLASSIFICATION	2.611662328070676E-5	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999986108197472	WITHOUT_CLASSIFICATION	1.389180252772805E-6	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999916067928714	WITHOUT_CLASSIFICATION	8.39320712861557E-6	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999978917195871	WITHOUT_CLASSIFICATION	2.1082804129029302E-6	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999603382615813	WITHOUT_CLASSIFICATION	3.966173841876672E-5	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999355946519785	WITHOUT_CLASSIFICATION	6.44053480214782E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999645254242044	WITHOUT_CLASSIFICATION	3.547457579556609E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999674812408365	WITHOUT_CLASSIFICATION	3.25187591635043E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999674812408365	WITHOUT_CLASSIFICATION	3.25187591635043E-5	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999807557103788	WITHOUT_CLASSIFICATION	1.9244289621245607E-5	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999909125197607	WITHOUT_CLASSIFICATION	9.087480239378481E-6	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999776939514748	WITHOUT_CLASSIFICATION	2.230604852520886E-5	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.999975172539536	WITHOUT_CLASSIFICATION	2.4827460463988737E-5	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999953235162388	WITHOUT_CLASSIFICATION	4.67648376126151E-6	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999896169347205	WITHOUT_CLASSIFICATION	1.0383065279489581E-5	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999956688080635	WITHOUT_CLASSIFICATION	4.331191936586826E-6	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999926846869208	WITHOUT_CLASSIFICATION	7.3153130791022485E-6	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999904306071146	WITHOUT_CLASSIFICATION	9.569392885384551E-6	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.999997789029485	WITHOUT_CLASSIFICATION	2.210970514922746E-6	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999632548122768	WITHOUT_CLASSIFICATION	3.67451877232214E-5	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999977174787343	WITHOUT_CLASSIFICATION	2.2825212656895705E-6	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999863314136408	WITHOUT_CLASSIFICATION	1.3668586359184877E-5	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999963536919118	WITHOUT_CLASSIFICATION	3.6463080882738917E-6	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999805740685294	WITHOUT_CLASSIFICATION	1.9425931470619466E-5	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999540678587595	WITHOUT_CLASSIFICATION	4.593214124062666E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999904339150665	WITHOUT_CLASSIFICATION	9.566084933528079E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999887688959695	WITHOUT_CLASSIFICATION	1.1231104030404531E-5	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.999998527060556	WITHOUT_CLASSIFICATION	1.472939443939078E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999890952679593	WITHOUT_CLASSIFICATION	1.0904732040748968E-5	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9999593509918989	WITHOUT_CLASSIFICATION	4.0649008101128394E-5	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.999977728038109	WITHOUT_CLASSIFICATION	2.2271961890981705E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9998965040766764	WITHOUT_CLASSIFICATION	1.0349592332360526E-4	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9999424502986874	WITHOUT_CLASSIFICATION	5.7549701312639595E-5	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999796388991099	WITHOUT_CLASSIFICATION	2.0361100890172725E-5	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999115327797777	WITHOUT_CLASSIFICATION	8.846722022217918E-5	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9998853232996033	WITHOUT_CLASSIFICATION	1.1467670039663465E-4	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999651873945177	WITHOUT_CLASSIFICATION	3.481260548226316E-5	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999771091312419	WITHOUT_CLASSIFICATION	2.2890868758064195E-5	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999062749243214	WITHOUT_CLASSIFICATION	9.372507567867696E-5	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999331427326199	WITHOUT_CLASSIFICATION	6.685726738012278E-5	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999933394661774	WITHOUT_CLASSIFICATION	6.660533822573224E-6	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9997758430044213	WITHOUT_CLASSIFICATION	2.2415699557862587E-4	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9997896035886937	WITHOUT_CLASSIFICATION	2.1039641130633335E-4	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9999883891788822	WITHOUT_CLASSIFICATION	1.16108211178351E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9999927154152463	WITHOUT_CLASSIFICATION	7.284584753769125E-6	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.999990579826543	WITHOUT_CLASSIFICATION	9.42017345696247E-6	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999843837669963	WITHOUT_CLASSIFICATION	1.5616233003718E-5	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9998513829251523	WITHOUT_CLASSIFICATION	1.4861707484765154E-4	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999988095467383	WITHOUT_CLASSIFICATION	1.1904532618094332E-6	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999720773399129	WITHOUT_CLASSIFICATION	2.7922660087141073E-5	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9998534006967013	WITHOUT_CLASSIFICATION	1.4659930329874156E-4	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.999904280432394	WITHOUT_CLASSIFICATION	9.571956760607227E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9998093119015887	WITHOUT_CLASSIFICATION	1.9068809841131453E-4	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9998283234644951	WITHOUT_CLASSIFICATION	1.7167653550494692E-4	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9998093119015887	WITHOUT_CLASSIFICATION	1.9068809841131453E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9999120213767605	WITHOUT_CLASSIFICATION	8.797862323948669E-5	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9999874620063367	WITHOUT_CLASSIFICATION	1.2537993663352304E-5	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.999994546979601	WITHOUT_CLASSIFICATION	5.453020399015707E-6	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9991955433164239	WITHOUT_CLASSIFICATION	8.044566835761183E-4	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999505430427571	WITHOUT_CLASSIFICATION	4.94569572429746E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999870987902668	WITHOUT_CLASSIFICATION	1.2901209733150144E-5	DEFECT
// write	WITHOUT_CLASSIFICATION	0.999928327418911	WITHOUT_CLASSIFICATION	7.167258108896837E-5	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.999977522567769	WITHOUT_CLASSIFICATION	2.247743223103263E-5	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999953617829058	WITHOUT_CLASSIFICATION	4.6382170942006344E-6	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9999851884049558	WITHOUT_CLASSIFICATION	1.4811595044317918E-5	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9999932390440603	WITHOUT_CLASSIFICATION	6.76095593958621E-6	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999781852701205	WITHOUT_CLASSIFICATION	2.181472987947647E-5	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999939468305856	WITHOUT_CLASSIFICATION	6.053169414350027E-6	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999911034257033	WITHOUT_CLASSIFICATION	8.896574296715034E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999370723809341	WITHOUT_CLASSIFICATION	6.292761906588906E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9998519744238555	WITHOUT_CLASSIFICATION	1.4802557614441528E-4	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999986022536276	WITHOUT_CLASSIFICATION	1.397746372524325E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9998828082881349	WITHOUT_CLASSIFICATION	1.1719171186507876E-4	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999604860456568	WITHOUT_CLASSIFICATION	3.9513954343225254E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999056277305296	WITHOUT_CLASSIFICATION	9.437226947041229E-5	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999837934167147	WITHOUT_CLASSIFICATION	1.6206583285249775E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999816177026944	WITHOUT_CLASSIFICATION	1.8382297305596237E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.999784497017762	WITHOUT_CLASSIFICATION	2.1550298223806314E-4	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.999974348008067	WITHOUT_CLASSIFICATION	2.565199193305116E-5	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999939623350398	WITHOUT_CLASSIFICATION	6.0376649602613255E-6	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999919801409086	WITHOUT_CLASSIFICATION	8.019859091501937E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999795331206807	WITHOUT_CLASSIFICATION	2.0466879319404308E-5	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999732297626428	WITHOUT_CLASSIFICATION	2.67702373572683E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999691087368602	WITHOUT_CLASSIFICATION	3.089126313980504E-5	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9985889568906036	WITHOUT_CLASSIFICATION	0.001411043109396476	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998677018415563	WITHOUT_CLASSIFICATION	1.322981584437987E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998717810434786	WITHOUT_CLASSIFICATION	1.282189565214135E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999023893857175	WITHOUT_CLASSIFICATION	9.761061428258328E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999669350992281	WITHOUT_CLASSIFICATION	3.306490077190423E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999971612629815	WITHOUT_CLASSIFICATION	2.8387370184410723E-6	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.999967601619554	WITHOUT_CLASSIFICATION	3.239838044589472E-5	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999281483628357	WITHOUT_CLASSIFICATION	7.185163716425884E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999985436918543	WITHOUT_CLASSIFICATION	1.4563081457301353E-6	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.99999912311284	WITHOUT_CLASSIFICATION	8.768871599559813E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9996939838018701	WITHOUT_CLASSIFICATION	3.0601619812985946E-4	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999996524483505	WITHOUT_CLASSIFICATION	3.475516494953758E-7	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999806409847617	WITHOUT_CLASSIFICATION	1.9359015238390528E-5	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999925627741638	WITHOUT_CLASSIFICATION	7.43722583617884E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9998762635509337	WITHOUT_CLASSIFICATION	1.2373644906626093E-4	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9998762635509337	WITHOUT_CLASSIFICATION	1.2373644906626093E-4	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999410113256428	WITHOUT_CLASSIFICATION	5.898867435719581E-5	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999866713792868	WITHOUT_CLASSIFICATION	1.3328620713173806E-5	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9999885687548308	WITHOUT_CLASSIFICATION	1.1431245169165256E-5	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999918656195486	WITHOUT_CLASSIFICATION	8.134380451497453E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999992217649963	WITHOUT_CLASSIFICATION	7.782350035325932E-7	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999959728542283	WITHOUT_CLASSIFICATION	4.0271457717890096E-6	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999684011726702	WITHOUT_CLASSIFICATION	3.159882732977889E-5	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.99997966878301	WITHOUT_CLASSIFICATION	2.0331216989941507E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999991894805217	WITHOUT_CLASSIFICATION	8.105194782651052E-7	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999799990901344	WITHOUT_CLASSIFICATION	2.000090986558237E-5	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999938265967256	WITHOUT_CLASSIFICATION	6.173403274366551E-6	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999968143312473	WITHOUT_CLASSIFICATION	3.1856687526255266E-6	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999210113572465	WITHOUT_CLASSIFICATION	7.898864275337321E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999296020023815	WITHOUT_CLASSIFICATION	7.039799761847792E-5	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999980114697284	WITHOUT_CLASSIFICATION	1.9885302715775065E-6	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999967954642548	WITHOUT_CLASSIFICATION	3.2045357451880802E-6	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999716796773225	WITHOUT_CLASSIFICATION	2.832032267760566E-5	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999863738781307	WITHOUT_CLASSIFICATION	1.3626121869250151E-5	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999900688414374	WITHOUT_CLASSIFICATION	9.931158562721837E-6	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999799596631034	WITHOUT_CLASSIFICATION	2.0040336896555244E-5	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9998246210546341	WITHOUT_CLASSIFICATION	1.753789453657888E-4	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9999652549807903	WITHOUT_CLASSIFICATION	3.47450192096678E-5	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999979114297696	WITHOUT_CLASSIFICATION	2.0885702303617453E-6	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.999997984110774	WITHOUT_CLASSIFICATION	2.0158892260052018E-6	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9999881048988418	WITHOUT_CLASSIFICATION	1.1895101158135718E-5	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999985663855916	WITHOUT_CLASSIFICATION	1.4336144084303335E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999948643888326	WITHOUT_CLASSIFICATION	5.135611167392584E-6	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9999287357388076	WITHOUT_CLASSIFICATION	7.126426119246166E-5	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999949730153901	WITHOUT_CLASSIFICATION	5.02698460995846E-6	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999158727153169	WITHOUT_CLASSIFICATION	8.412728468309795E-5	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999994063186781	WITHOUT_CLASSIFICATION	5.936813218875332E-7	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.999832356653093	WITHOUT_CLASSIFICATION	1.6764334690709429E-4	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999950034219145	WITHOUT_CLASSIFICATION	4.99657808549276E-6	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.999946406404426	WITHOUT_CLASSIFICATION	5.359359557404234E-5	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999822218628025	WITHOUT_CLASSIFICATION	1.7778137197434723E-5	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999788697127793	WITHOUT_CLASSIFICATION	2.1130287220683546E-5	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998766778955493	WITHOUT_CLASSIFICATION	1.2332210445066915E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998960663305081	WITHOUT_CLASSIFICATION	1.0393366949189844E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9999070774815171	WITHOUT_CLASSIFICATION	9.292251848286854E-5	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998887174508777	WITHOUT_CLASSIFICATION	1.1128254912231263E-4	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999597150082706	WITHOUT_CLASSIFICATION	4.0284991729333084E-5	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9999979003572272	WITHOUT_CLASSIFICATION	2.0996427727458035E-6	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999907269672442	WITHOUT_CLASSIFICATION	9.273032755800645E-6	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999946743196373	WITHOUT_CLASSIFICATION	5.325680362700227E-6	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999950279426232	WITHOUT_CLASSIFICATION	4.972057376776312E-6	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999981124585678	WITHOUT_CLASSIFICATION	1.8875414321018816E-6	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999958762889284	WITHOUT_CLASSIFICATION	4.123711071618073E-6	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.999944441536481	WITHOUT_CLASSIFICATION	5.55584635190682E-5	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9997799921832745	WITHOUT_CLASSIFICATION	2.2000781672556571E-4	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999677488946808	WITHOUT_CLASSIFICATION	3.225110531924999E-5	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999982415652428	WITHOUT_CLASSIFICATION	1.7584347573272647E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.999994706505914	WITHOUT_CLASSIFICATION	5.293494085968464E-6	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999945273400132	WITHOUT_CLASSIFICATION	5.472659986798688E-6	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999873650808789	WITHOUT_CLASSIFICATION	1.2634919120960415E-5	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9998919882912354	WITHOUT_CLASSIFICATION	1.080117087645733E-4	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.999614545050275	WITHOUT_CLASSIFICATION	3.85454949724894E-4	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999943938319147	WITHOUT_CLASSIFICATION	5.606168085303229E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998288861943884	WITHOUT_CLASSIFICATION	1.711138056116153E-4	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999990444267388	WITHOUT_CLASSIFICATION	9.555732611171884E-7	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999864976275259	WITHOUT_CLASSIFICATION	1.3502372474140612E-5	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999953194225771	WITHOUT_CLASSIFICATION	4.680577422810114E-6	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999682499176386	WITHOUT_CLASSIFICATION	3.175008236147334E-5	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.999962614828278	WITHOUT_CLASSIFICATION	3.738517172199856E-5	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999459347522067	WITHOUT_CLASSIFICATION	5.4065247793380214E-5	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9989278860249435	WITHOUT_CLASSIFICATION	0.0010721139750564598	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998917239319951	WITHOUT_CLASSIFICATION	1.0827606800491299E-4	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999155496281488	WITHOUT_CLASSIFICATION	8.44503718512001E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999943781739339	WITHOUT_CLASSIFICATION	5.621826066090161E-6	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9998880366788958	WITHOUT_CLASSIFICATION	1.1196332110423364E-4	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999646181362617	WITHOUT_CLASSIFICATION	3.538186373834233E-5	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9997765730027567	WITHOUT_CLASSIFICATION	2.234269972432096E-4	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999970996429334	WITHOUT_CLASSIFICATION	2.900357066645806E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999972255285176	WITHOUT_CLASSIFICATION	2.7744714824376344E-6	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9991838121695026	WITHOUT_CLASSIFICATION	8.161878304973814E-4	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.999398086293257	WITHOUT_CLASSIFICATION	6.019137067429297E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.999194034242516	WITHOUT_CLASSIFICATION	8.05965757483942E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9993607477701963	WITHOUT_CLASSIFICATION	6.392522298036948E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9993397492920291	WITHOUT_CLASSIFICATION	6.60250707970858E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9992138304697457	WITHOUT_CLASSIFICATION	7.861695302544037E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9993211207884178	WITHOUT_CLASSIFICATION	6.788792115822311E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9992698789699097	WITHOUT_CLASSIFICATION	7.301210300902357E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9993342769660707	WITHOUT_CLASSIFICATION	6.65723033929243E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.999332070651837	WITHOUT_CLASSIFICATION	6.679293481629046E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9993242264599232	WITHOUT_CLASSIFICATION	6.75773540076711E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9990952817255083	WITHOUT_CLASSIFICATION	9.047182744916591E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9990228675604239	WITHOUT_CLASSIFICATION	9.771324395759927E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9991181413813168	WITHOUT_CLASSIFICATION	8.818586186831138E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9991155123433257	WITHOUT_CLASSIFICATION	8.84487656674253E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9990562213765474	WITHOUT_CLASSIFICATION	9.437786234526926E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9991314323105754	WITHOUT_CLASSIFICATION	8.685676894245059E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9991397176033118	WITHOUT_CLASSIFICATION	8.602823966882872E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9993771635401759	WITHOUT_CLASSIFICATION	6.228364598241685E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9992838865480175	WITHOUT_CLASSIFICATION	7.161134519825037E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999668984263738	WITHOUT_CLASSIFICATION	3.310157362629616E-5	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999993519024608	WITHOUT_CLASSIFICATION	6.480975392249045E-7	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999875929017262	WITHOUT_CLASSIFICATION	1.2407098273862496E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999905384469802	WITHOUT_CLASSIFICATION	9.461553019792821E-6	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9999692340759341	WITHOUT_CLASSIFICATION	3.076592406582712E-5	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999845038514593	WITHOUT_CLASSIFICATION	1.5496148540680558E-5	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999856658201808	WITHOUT_CLASSIFICATION	1.4334179819210258E-5	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9999993572325011	WITHOUT_CLASSIFICATION	6.42767498838938E-7	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999981361285112	WITHOUT_CLASSIFICATION	1.863871488731318E-6	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999918038361122	WITHOUT_CLASSIFICATION	8.196163887856025E-6	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.9997489454095916	WITHOUT_CLASSIFICATION	2.510545904084589E-4	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.999964802810083	WITHOUT_CLASSIFICATION	3.519718991707659E-5	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.999989109264764	WITHOUT_CLASSIFICATION	1.089073523595022E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999779718166816	WITHOUT_CLASSIFICATION	2.2028183318410754E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999779718166816	WITHOUT_CLASSIFICATION	2.2028183318410754E-5	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999866417065268	WITHOUT_CLASSIFICATION	1.335829347315416E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999927813197417	WITHOUT_CLASSIFICATION	7.218680258305227E-6	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999998009409622	WITHOUT_CLASSIFICATION	1.9905903784428688E-7	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999684316565473	WITHOUT_CLASSIFICATION	3.1568343452705824E-5	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999992908651323	WITHOUT_CLASSIFICATION	7.091348677361668E-7	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.999918520674496	WITHOUT_CLASSIFICATION	8.147932550393626E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.99993460340019	WITHOUT_CLASSIFICATION	6.539659980997202E-5	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999755773409309	WITHOUT_CLASSIFICATION	2.442265906920717E-5	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999017877161204	WITHOUT_CLASSIFICATION	9.821228387962307E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.999910512042412	WITHOUT_CLASSIFICATION	8.948795758798386E-5	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999878406651844	WITHOUT_CLASSIFICATION	1.2159334815575164E-5	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999255781280182	WITHOUT_CLASSIFICATION	7.442187198176384E-5	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9997047894080969	WITHOUT_CLASSIFICATION	2.952105919030363E-4	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9999949395970901	WITHOUT_CLASSIFICATION	5.060402909907446E-6	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999960893783613	WITHOUT_CLASSIFICATION	3.910621638795938E-6	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999935411868264	WITHOUT_CLASSIFICATION	6.458813173652695E-6	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999811402880995	WITHOUT_CLASSIFICATION	1.8859711900464584E-5	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.999993714684701	WITHOUT_CLASSIFICATION	6.285315298943216E-6	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9999732404970554	WITHOUT_CLASSIFICATION	2.6759502944601624E-5	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999983691518354	WITHOUT_CLASSIFICATION	1.6308481647255681E-6	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999889366138005	WITHOUT_CLASSIFICATION	1.1063386199464644E-5	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.999999327667582	WITHOUT_CLASSIFICATION	6.723324179203823E-7	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999380465084847	WITHOUT_CLASSIFICATION	6.195349151524762E-5	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.999948705887104	WITHOUT_CLASSIFICATION	5.129411289604097E-5	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999983574653789	WITHOUT_CLASSIFICATION	1.6425346210666808E-6	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999894716829824	WITHOUT_CLASSIFICATION	1.0528317017676922E-5	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999834432296929	WITHOUT_CLASSIFICATION	1.655677030700511E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999981561904737	WITHOUT_CLASSIFICATION	1.8438095262864937E-6	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999991061920266	WITHOUT_CLASSIFICATION	8.938079734370045E-7	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999175807342054	WITHOUT_CLASSIFICATION	8.241926579448492E-5	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9998958573498479	WITHOUT_CLASSIFICATION	1.0414265015213853E-4	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9998939780435854	WITHOUT_CLASSIFICATION	1.060219564146149E-4	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999311230198101	WITHOUT_CLASSIFICATION	6.887698018987602E-5	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999233046987334	WITHOUT_CLASSIFICATION	7.669530126667098E-5	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999778570317572	WITHOUT_CLASSIFICATION	2.2142968242768595E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999565504896307	WITHOUT_CLASSIFICATION	4.3449510369294105E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998841460969414	WITHOUT_CLASSIFICATION	1.1585390305854678E-4	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999709416667794	WITHOUT_CLASSIFICATION	2.9058333220629463E-5	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999896099995215	WITHOUT_CLASSIFICATION	1.0390000478516609E-5	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999963562771979	WITHOUT_CLASSIFICATION	3.6437228021188543E-6	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999800293244366	WITHOUT_CLASSIFICATION	1.9970675563279658E-5	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999983988749506	WITHOUT_CLASSIFICATION	1.6011250494487213E-6	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.999984845531238	WITHOUT_CLASSIFICATION	1.5154468762037373E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.99987265983635	WITHOUT_CLASSIFICATION	1.2734016364999458E-4	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.99987265983635	WITHOUT_CLASSIFICATION	1.2734016364999458E-4	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999970815938001	WITHOUT_CLASSIFICATION	2.9184061999835493E-6	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999929663988867	WITHOUT_CLASSIFICATION	7.033601113333273E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999913279768072	WITHOUT_CLASSIFICATION	8.67202319271498E-6	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.999843795540061	WITHOUT_CLASSIFICATION	1.5620445993895783E-4	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999934420555157	WITHOUT_CLASSIFICATION	6.557944484462936E-6	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999639072430517	WITHOUT_CLASSIFICATION	3.609275694822196E-5	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.999997623887462	WITHOUT_CLASSIFICATION	2.3761125380250793E-6	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999769840720051	WITHOUT_CLASSIFICATION	2.301592799496849E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999845023612062	WITHOUT_CLASSIFICATION	1.549763879376279E-5	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999786770014009	WITHOUT_CLASSIFICATION	2.1322998599174404E-5	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999822845972626	WITHOUT_CLASSIFICATION	1.771540273747789E-5	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999839012533057	WITHOUT_CLASSIFICATION	1.609874669435074E-5	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9999882001345323	WITHOUT_CLASSIFICATION	1.1799865467635904E-5	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999725214517976	WITHOUT_CLASSIFICATION	2.747854820239576E-5	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9998842121992882	WITHOUT_CLASSIFICATION	1.1578780071169861E-4	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999779758977138	WITHOUT_CLASSIFICATION	2.202410228624472E-5	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999945207384056	WITHOUT_CLASSIFICATION	5.479261594448609E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999308649402708	WITHOUT_CLASSIFICATION	6.91350597291882E-5	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.999999453969268	WITHOUT_CLASSIFICATION	5.460307319064942E-7	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999913726668934	WITHOUT_CLASSIFICATION	8.627333106624783E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999895660876206	WITHOUT_CLASSIFICATION	1.0433912379470121E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999895660876206	WITHOUT_CLASSIFICATION	1.0433912379470121E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999875683313723	WITHOUT_CLASSIFICATION	1.2431668627764273E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999875683313723	WITHOUT_CLASSIFICATION	1.2431668627764273E-5	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999934407038097	WITHOUT_CLASSIFICATION	6.559296190287827E-6	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999218214807647	WITHOUT_CLASSIFICATION	7.817851923525197E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999968135724948	WITHOUT_CLASSIFICATION	3.1864275052339884E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999869670319746	WITHOUT_CLASSIFICATION	1.3032968025351658E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.999996438458001	WITHOUT_CLASSIFICATION	3.5615419990737737E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999987083394454	WITHOUT_CLASSIFICATION	1.2916605545745722E-6	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.999940587350336	WITHOUT_CLASSIFICATION	5.941264966410794E-5	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999325420431775	WITHOUT_CLASSIFICATION	6.74579568225146E-5	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999600621970498	WITHOUT_CLASSIFICATION	3.993780295019904E-5	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999894692939919	WITHOUT_CLASSIFICATION	1.053070600812708E-5	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9998774128104881	WITHOUT_CLASSIFICATION	1.225871895119181E-4	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.999993053684686	WITHOUT_CLASSIFICATION	6.946315313861441E-6	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999970037160939	WITHOUT_CLASSIFICATION	2.99628390602444E-6	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9999525948336726	WITHOUT_CLASSIFICATION	4.7405166327521035E-5	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999210747659976	WITHOUT_CLASSIFICATION	7.89252340024514E-5	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999845394407312	WITHOUT_CLASSIFICATION	1.5460559268804354E-5	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999923734762917	WITHOUT_CLASSIFICATION	7.626523708353539E-6	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999582673326822	WITHOUT_CLASSIFICATION	4.173266731783256E-5	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9995716790877766	WITHOUT_CLASSIFICATION	4.2832091222343713E-4	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999888970068888	WITHOUT_CLASSIFICATION	1.1102993111245805E-5	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9998911665146005	WITHOUT_CLASSIFICATION	1.0883348539946446E-4	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999892237560233	WITHOUT_CLASSIFICATION	1.0776243976771384E-5	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999065510582555	WITHOUT_CLASSIFICATION	9.344894174444546E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999795331206807	WITHOUT_CLASSIFICATION	2.0466879319404308E-5	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999959728542283	WITHOUT_CLASSIFICATION	4.0271457717890096E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999794568824929	WITHOUT_CLASSIFICATION	2.0543117507090148E-5	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999967528209074	WITHOUT_CLASSIFICATION	3.2471790926922516E-6	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999902621544966	WITHOUT_CLASSIFICATION	9.737845503411415E-6	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999693834325728	WITHOUT_CLASSIFICATION	3.0616567427160874E-5	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.999984903147562	WITHOUT_CLASSIFICATION	1.509685243794336E-5	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.999984903147562	WITHOUT_CLASSIFICATION	1.509685243794336E-5	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999974512580682	WITHOUT_CLASSIFICATION	2.548741931730076E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999983520482528	WITHOUT_CLASSIFICATION	1.647951747101364E-6	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999973978191311	WITHOUT_CLASSIFICATION	2.6021808688978447E-6	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999865915439755	WITHOUT_CLASSIFICATION	1.3408456024434961E-5	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999841474390049	WITHOUT_CLASSIFICATION	1.5852560995078604E-5	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999824387023046	WITHOUT_CLASSIFICATION	1.7561297695365036E-5	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999895987653162	WITHOUT_CLASSIFICATION	1.0401234683771036E-5	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999985104323409	WITHOUT_CLASSIFICATION	1.4895676590966865E-6	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999756209975286	WITHOUT_CLASSIFICATION	2.4379002471495497E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999828115498793	WITHOUT_CLASSIFICATION	1.7188450120642167E-5	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999848675360552	WITHOUT_CLASSIFICATION	1.5132463944717977E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999779038940767	WITHOUT_CLASSIFICATION	2.2096105923267045E-5	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9998326205043098	WITHOUT_CLASSIFICATION	1.6737949569014613E-4	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999928960171411	WITHOUT_CLASSIFICATION	7.103982858756808E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999883496362358	WITHOUT_CLASSIFICATION	1.165036376417235E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998455860081096	WITHOUT_CLASSIFICATION	1.5441399189044643E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999972072663366	WITHOUT_CLASSIFICATION	2.7927336635108195E-6	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999851677962427	WITHOUT_CLASSIFICATION	1.4832203757249108E-5	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999738064622781	WITHOUT_CLASSIFICATION	2.6193537722019297E-5	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9999991155272125	WITHOUT_CLASSIFICATION	8.844727873452878E-7	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999972160178515	WITHOUT_CLASSIFICATION	2.7839821484809313E-6	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999956852415585	WITHOUT_CLASSIFICATION	4.314758441487348E-6	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9997784681763864	WITHOUT_CLASSIFICATION	2.2153182361367402E-4	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999595129035733	WITHOUT_CLASSIFICATION	4.048709642675369E-5	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999758094321829	WITHOUT_CLASSIFICATION	2.4190567817090822E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999958786637922	WITHOUT_CLASSIFICATION	4.121336207733978E-6	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999554379321192	WITHOUT_CLASSIFICATION	4.4562067880720296E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9999027413895779	WITHOUT_CLASSIFICATION	9.725861042219472E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999904884846049	WITHOUT_CLASSIFICATION	9.511515395178657E-6	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999724271105538	WITHOUT_CLASSIFICATION	2.7572889446261502E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999994908549873	WITHOUT_CLASSIFICATION	5.091450127895487E-7	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999520263177701	WITHOUT_CLASSIFICATION	4.797368222982941E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999694818184252	WITHOUT_CLASSIFICATION	3.051818157480253E-5	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999348654756066	WITHOUT_CLASSIFICATION	6.513452439343908E-5	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999924719869815	WITHOUT_CLASSIFICATION	7.52801301845653E-6	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999948674754158	WITHOUT_CLASSIFICATION	5.132524584209028E-6	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999618227137482	WITHOUT_CLASSIFICATION	3.81772862518145E-5	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9993144449156672	WITHOUT_CLASSIFICATION	6.855550843328088E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999971393393956	WITHOUT_CLASSIFICATION	2.860660604403709E-6	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999610369511446	WITHOUT_CLASSIFICATION	3.896304885540953E-5	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999991350237347	WITHOUT_CLASSIFICATION	8.649762652117336E-7	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999976435916174	WITHOUT_CLASSIFICATION	2.3564083825754197E-6	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999414662493289	WITHOUT_CLASSIFICATION	5.853375067109915E-5	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9998819360440492	WITHOUT_CLASSIFICATION	1.180639559508205E-4	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9989990832635192	WITHOUT_CLASSIFICATION	0.0010009167364807984	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999988296835429	WITHOUT_CLASSIFICATION	1.1703164570706797E-6	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999689608625125	WITHOUT_CLASSIFICATION	3.103913748755766E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999956732264716	WITHOUT_CLASSIFICATION	4.3267735282740934E-6	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999921495882933	WITHOUT_CLASSIFICATION	7.850411706650466E-6	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999348213114156	WITHOUT_CLASSIFICATION	6.517868858430533E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9991295083341929	WITHOUT_CLASSIFICATION	8.704916658070235E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.999284974859282	WITHOUT_CLASSIFICATION	7.150251407180339E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9994882666381876	WITHOUT_CLASSIFICATION	5.117333618124677E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9995979323270393	WITHOUT_CLASSIFICATION	4.0206767296072896E-4	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9995958668094372	WITHOUT_CLASSIFICATION	4.041331905627225E-4	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9998463311025231	WITHOUT_CLASSIFICATION	1.5366889747698488E-4	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.99983261765399	WITHOUT_CLASSIFICATION	1.6738234601005743E-4	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9998906339290612	WITHOUT_CLASSIFICATION	1.0936607093885216E-4	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9998334749681107	WITHOUT_CLASSIFICATION	1.6652503188929854E-4	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999971750756325	WITHOUT_CLASSIFICATION	2.824924367562845E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9993115757047257	WITHOUT_CLASSIFICATION	6.884242952742797E-4	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9991295083341929	WITHOUT_CLASSIFICATION	8.704916658070235E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9994882666381876	WITHOUT_CLASSIFICATION	5.117333618124677E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.999284974859282	WITHOUT_CLASSIFICATION	7.150251407180339E-4	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.999527894359847	WITHOUT_CLASSIFICATION	4.721056401530554E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9993422165404586	WITHOUT_CLASSIFICATION	6.577834595414751E-4	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9998475019349868	WITHOUT_CLASSIFICATION	1.5249806501327473E-4	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999189612435928	WITHOUT_CLASSIFICATION	8.103875640710422E-5	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999898848416906	WITHOUT_CLASSIFICATION	1.0115158309344211E-5	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999485066385511	WITHOUT_CLASSIFICATION	5.149336144895453E-5	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999614617419943	WITHOUT_CLASSIFICATION	3.853825800579849E-5	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999748429785652	WITHOUT_CLASSIFICATION	2.5157021434834098E-5	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9997466031503516	WITHOUT_CLASSIFICATION	2.533968496483828E-4	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999589495833	WITHOUT_CLASSIFICATION	4.1050416700009826E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999770936061815	WITHOUT_CLASSIFICATION	2.2906393818580466E-5	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9999967398387053	WITHOUT_CLASSIFICATION	3.260161294782001E-6	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999521160389612	WITHOUT_CLASSIFICATION	4.788396103885556E-5	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999702926938346	WITHOUT_CLASSIFICATION	2.9707306165410595E-5	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999551025152612	WITHOUT_CLASSIFICATION	4.489748473876676E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999703361372428	WITHOUT_CLASSIFICATION	2.9663862757046798E-5	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.999895236092803	WITHOUT_CLASSIFICATION	1.0476390719706137E-4	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999859302319211	WITHOUT_CLASSIFICATION	1.4069768078908215E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999859302319211	WITHOUT_CLASSIFICATION	1.4069768078908215E-5	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999950202084836	WITHOUT_CLASSIFICATION	4.979791516379081E-6	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999791992434226	WITHOUT_CLASSIFICATION	2.080075657746712E-5	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999954278526312	WITHOUT_CLASSIFICATION	4.572147368809311E-6	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9997228292909206	WITHOUT_CLASSIFICATION	2.771707090794985E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999815723426474	WITHOUT_CLASSIFICATION	1.84276573525934E-5	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999978399524444	WITHOUT_CLASSIFICATION	2.160047555562722E-6	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999936855379241	WITHOUT_CLASSIFICATION	6.314462075969761E-6	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.999978546096888	WITHOUT_CLASSIFICATION	2.1453903112023326E-5	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999988880838852	WITHOUT_CLASSIFICATION	1.111916114747929E-6	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999923654430126	WITHOUT_CLASSIFICATION	7.634556987387282E-6	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999976322386951	WITHOUT_CLASSIFICATION	2.3677613049272582E-6	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9998639645044922	WITHOUT_CLASSIFICATION	1.3603549550767952E-4	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999975555029562	WITHOUT_CLASSIFICATION	2.4444970437433625E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999904332609957	WITHOUT_CLASSIFICATION	9.566739004373303E-6	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999949182450384	WITHOUT_CLASSIFICATION	5.081754961572433E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999784410517405	WITHOUT_CLASSIFICATION	2.155894825952325E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999831222220597	WITHOUT_CLASSIFICATION	1.6877777940360393E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999968802124828	WITHOUT_CLASSIFICATION	3.1197875171941117E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999968802124828	WITHOUT_CLASSIFICATION	3.1197875171941117E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.999945903721152	WITHOUT_CLASSIFICATION	5.409627884792599E-5	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999448648570726	WITHOUT_CLASSIFICATION	5.51351429273408E-5	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999965770282553	WITHOUT_CLASSIFICATION	3.422971744763073E-6	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999463886436674	WITHOUT_CLASSIFICATION	5.3611356332658434E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999807772939142	WITHOUT_CLASSIFICATION	1.9222706085840197E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999968802124828	WITHOUT_CLASSIFICATION	3.1197875171941117E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999968802124828	WITHOUT_CLASSIFICATION	3.1197875171941117E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999939275774439	WITHOUT_CLASSIFICATION	6.072422556231561E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999939275774439	WITHOUT_CLASSIFICATION	6.072422556231561E-6	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999908793424199	WITHOUT_CLASSIFICATION	9.120657580015646E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999609167677883	WITHOUT_CLASSIFICATION	3.9083232211782556E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999591364999388	WITHOUT_CLASSIFICATION	4.086350006118733E-5	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9999974458284486	WITHOUT_CLASSIFICATION	2.554171551274484E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999973901581017	WITHOUT_CLASSIFICATION	2.609841898181209E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999973901581017	WITHOUT_CLASSIFICATION	2.609841898181209E-6	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999956573505044	WITHOUT_CLASSIFICATION	4.342649495589785E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999819324368456	WITHOUT_CLASSIFICATION	1.806756315430379E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999950479968214	WITHOUT_CLASSIFICATION	4.952003178616882E-6	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999838659574543	WITHOUT_CLASSIFICATION	1.6134042545703914E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999938185757311	WITHOUT_CLASSIFICATION	6.181424268856492E-6	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999778663567787	WITHOUT_CLASSIFICATION	2.213364322134574E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999771322229396	WITHOUT_CLASSIFICATION	2.2867777060386092E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999261806307087	WITHOUT_CLASSIFICATION	7.381936929131837E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999945990818796	WITHOUT_CLASSIFICATION	5.400918120384656E-6	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.999995513111392	WITHOUT_CLASSIFICATION	4.486888607941357E-6	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999870374282246	WITHOUT_CLASSIFICATION	1.2962571775369258E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999920160911042	WITHOUT_CLASSIFICATION	7.983908895749958E-6	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999836847007566	WITHOUT_CLASSIFICATION	1.6315299243356645E-5	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999268666132455	WITHOUT_CLASSIFICATION	7.313338675456683E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999784410517405	WITHOUT_CLASSIFICATION	2.155894825952325E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999968802124828	WITHOUT_CLASSIFICATION	3.1197875171941117E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999939275774439	WITHOUT_CLASSIFICATION	6.072422556231561E-6	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999778663567787	WITHOUT_CLASSIFICATION	2.213364322134574E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999139645801682	WITHOUT_CLASSIFICATION	8.603541983184621E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999139645801682	WITHOUT_CLASSIFICATION	8.603541983184621E-5	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999969805437229	WITHOUT_CLASSIFICATION	3.019456277233971E-6	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999950840754733	WITHOUT_CLASSIFICATION	4.915924526690898E-6	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999976225145962	WITHOUT_CLASSIFICATION	2.3774854038111003E-6	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999844967611133	WITHOUT_CLASSIFICATION	1.5503238886634328E-5	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999956340331765	WITHOUT_CLASSIFICATION	4.365966823564421E-6	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999993916673992	WITHOUT_CLASSIFICATION	6.083326009278278E-7	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9999501074031774	WITHOUT_CLASSIFICATION	4.9892596822748716E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999322272300318	WITHOUT_CLASSIFICATION	6.777276996812883E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999987938212601	WITHOUT_CLASSIFICATION	1.2061787398035952E-6	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.999953639549751	WITHOUT_CLASSIFICATION	4.636045024887063E-5	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999783606592685	WITHOUT_CLASSIFICATION	2.1639340731572376E-5	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999993390624061	WITHOUT_CLASSIFICATION	6.609375939812899E-7	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999801938591738	WITHOUT_CLASSIFICATION	1.9806140826214696E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999831222220597	WITHOUT_CLASSIFICATION	1.6877777940360393E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999939275774439	WITHOUT_CLASSIFICATION	6.072422556231561E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999819324368456	WITHOUT_CLASSIFICATION	1.806756315430379E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999950479968214	WITHOUT_CLASSIFICATION	4.952003178616882E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999950479968214	WITHOUT_CLASSIFICATION	4.952003178616882E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999938185757311	WITHOUT_CLASSIFICATION	6.181424268856492E-6	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999778663567787	WITHOUT_CLASSIFICATION	2.213364322134574E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999778663567787	WITHOUT_CLASSIFICATION	2.213364322134574E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999139645801682	WITHOUT_CLASSIFICATION	8.603541983184621E-5	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999988484930781	WITHOUT_CLASSIFICATION	1.1515069219058832E-6	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999115300550483	WITHOUT_CLASSIFICATION	8.846994495181437E-5	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999921093635663	WITHOUT_CLASSIFICATION	7.890636433685282E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999946744231667	WITHOUT_CLASSIFICATION	5.325576833266166E-6	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.999986356176939	WITHOUT_CLASSIFICATION	1.3643823061079479E-5	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9999566783658129	WITHOUT_CLASSIFICATION	4.332163418697988E-5	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999345096893167	WITHOUT_CLASSIFICATION	6.549031068328934E-5	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999914046486239	WITHOUT_CLASSIFICATION	8.59535137602584E-6	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999122958538073	WITHOUT_CLASSIFICATION	8.770414619274083E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999819324368456	WITHOUT_CLASSIFICATION	1.806756315430379E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999950479968214	WITHOUT_CLASSIFICATION	4.952003178616882E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999950479968214	WITHOUT_CLASSIFICATION	4.952003178616882E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999938185757311	WITHOUT_CLASSIFICATION	6.181424268856492E-6	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999322272300318	WITHOUT_CLASSIFICATION	6.777276996812883E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.999953639549751	WITHOUT_CLASSIFICATION	4.636045024887063E-5	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999880929816761	WITHOUT_CLASSIFICATION	1.1907018323843319E-5	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999886309315555	WITHOUT_CLASSIFICATION	1.1369068444347843E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999547501628078	WITHOUT_CLASSIFICATION	4.5249837192264386E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999547501628078	WITHOUT_CLASSIFICATION	4.5249837192264386E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999555124865355	WITHOUT_CLASSIFICATION	4.448751346462267E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999606650397533	WITHOUT_CLASSIFICATION	3.933496024668441E-5	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999770967387164	WITHOUT_CLASSIFICATION	2.2903261283634537E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999845819441385	WITHOUT_CLASSIFICATION	1.541805586149418E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999177463609734	WITHOUT_CLASSIFICATION	8.225363902659257E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999177463609734	WITHOUT_CLASSIFICATION	8.225363902659257E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999941588160016	WITHOUT_CLASSIFICATION	5.841183998354236E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999941588160016	WITHOUT_CLASSIFICATION	5.841183998354236E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999690528336115	WITHOUT_CLASSIFICATION	3.094716638854741E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999690528336115	WITHOUT_CLASSIFICATION	3.094716638854741E-5	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999437666785922	WITHOUT_CLASSIFICATION	5.6233321407773926E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999469272544496	WITHOUT_CLASSIFICATION	5.307274555053059E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9993674964099254	WITHOUT_CLASSIFICATION	6.325035900745214E-4	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.999974553842404	WITHOUT_CLASSIFICATION	2.5446157596038047E-5	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.999987567489525	WITHOUT_CLASSIFICATION	1.2432510474958501E-5	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999577553590929	WITHOUT_CLASSIFICATION	4.2244640906944904E-5	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999953919588025	WITHOUT_CLASSIFICATION	4.608041197589583E-6	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999802675903602	WITHOUT_CLASSIFICATION	1.9732409639816175E-5	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999989462548249	WITHOUT_CLASSIFICATION	1.053745175142237E-6	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999991687990353	WITHOUT_CLASSIFICATION	8.312009646602401E-7	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999969630291975	WITHOUT_CLASSIFICATION	3.0369708025004746E-6	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999936811388462	WITHOUT_CLASSIFICATION	6.318861153669675E-6	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999929236453365	WITHOUT_CLASSIFICATION	7.076354663482592E-6	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999569179201204	WITHOUT_CLASSIFICATION	4.308207987947572E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999569179201204	WITHOUT_CLASSIFICATION	4.308207987947572E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999964938904335	WITHOUT_CLASSIFICATION	3.506109566404873E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999987083394454	WITHOUT_CLASSIFICATION	1.2916605545745722E-6	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9999705283604585	WITHOUT_CLASSIFICATION	2.9471639541408573E-5	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999969521947596	WITHOUT_CLASSIFICATION	3.0478052403438338E-6	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999329496067461	WITHOUT_CLASSIFICATION	6.705039325396022E-5	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999424412440048	WITHOUT_CLASSIFICATION	5.7558755995226056E-5	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999718530798646	WITHOUT_CLASSIFICATION	2.814692013546697E-5	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999981489254701	WITHOUT_CLASSIFICATION	1.8510745298086062E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.999982384856003	WITHOUT_CLASSIFICATION	1.7615143997034484E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999640719607061	WITHOUT_CLASSIFICATION	3.5928039293890115E-5	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999501309685577	WITHOUT_CLASSIFICATION	4.986903144219556E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9999977436839425	WITHOUT_CLASSIFICATION	2.256316057650709E-6	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999447721024322	WITHOUT_CLASSIFICATION	5.522789756790871E-5	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.999991918119807	WITHOUT_CLASSIFICATION	8.081880192950688E-6	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999625192496184	WITHOUT_CLASSIFICATION	3.748075038153315E-5	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9998623587277339	WITHOUT_CLASSIFICATION	1.3764127226613952E-4	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999656245989696	WITHOUT_CLASSIFICATION	3.437540103029819E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999277914287503	WITHOUT_CLASSIFICATION	7.220857124964798E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998559123661933	WITHOUT_CLASSIFICATION	1.4408763380660262E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998559123661933	WITHOUT_CLASSIFICATION	1.4408763380660262E-4	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999978645952319	WITHOUT_CLASSIFICATION	2.1354047681832876E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9998811056260046	WITHOUT_CLASSIFICATION	1.1889437399536394E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9985893352988814	WITHOUT_CLASSIFICATION	0.0014106647011186745	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9985893352988814	WITHOUT_CLASSIFICATION	0.0014106647011186745	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999973439525565	WITHOUT_CLASSIFICATION	2.6560474435678355E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999106649071472	WITHOUT_CLASSIFICATION	8.933509285284069E-5	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9997342878947386	WITHOUT_CLASSIFICATION	2.657121052613477E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9998527888933856	WITHOUT_CLASSIFICATION	1.4721110661445062E-4	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9998701595939194	WITHOUT_CLASSIFICATION	1.298404060805751E-4	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.999907225355398	WITHOUT_CLASSIFICATION	9.277464460203721E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.999907225355398	WITHOUT_CLASSIFICATION	9.277464460203721E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999914655027119	WITHOUT_CLASSIFICATION	8.534497288082825E-6	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999061759706511	WITHOUT_CLASSIFICATION	9.382402934892873E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999600169028978	WITHOUT_CLASSIFICATION	3.9983097102056295E-5	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9998975315635699	WITHOUT_CLASSIFICATION	1.0246843643007593E-4	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9998811056260046	WITHOUT_CLASSIFICATION	1.1889437399536394E-4	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9998624367559538	WITHOUT_CLASSIFICATION	1.3756324404618907E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999062080740951	WITHOUT_CLASSIFICATION	9.379192590489652E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999062080740951	WITHOUT_CLASSIFICATION	9.379192590489652E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.999989378762847	WITHOUT_CLASSIFICATION	1.062123715302318E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999932699303377	WITHOUT_CLASSIFICATION	6.73006966244602E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999932699303377	WITHOUT_CLASSIFICATION	6.73006966244602E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9998815956300187	WITHOUT_CLASSIFICATION	1.1840436998132922E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9998815956300187	WITHOUT_CLASSIFICATION	1.1840436998132922E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9998815956300187	WITHOUT_CLASSIFICATION	1.1840436998132922E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999932699303377	WITHOUT_CLASSIFICATION	6.73006966244602E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999932699303377	WITHOUT_CLASSIFICATION	6.73006966244602E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.999989378762847	WITHOUT_CLASSIFICATION	1.062123715302318E-5	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999987976174985	WITHOUT_CLASSIFICATION	1.2023825014185684E-6	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999641630845084	WITHOUT_CLASSIFICATION	3.5836915491451264E-5	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999884725229236	WITHOUT_CLASSIFICATION	1.1527477076389327E-5	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999236359051475	WITHOUT_CLASSIFICATION	7.636409485248484E-5	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999665992521817	WITHOUT_CLASSIFICATION	3.340074781831772E-5	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999960766918768	WITHOUT_CLASSIFICATION	3.923308123189995E-6	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999797235941638	WITHOUT_CLASSIFICATION	2.027640583615388E-5	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999595321052163	WITHOUT_CLASSIFICATION	4.046789478377949E-5	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999501309685577	WITHOUT_CLASSIFICATION	4.986903144219556E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999932699303377	WITHOUT_CLASSIFICATION	6.73006966244602E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999932699303377	WITHOUT_CLASSIFICATION	6.73006966244602E-6	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999916070317337	WITHOUT_CLASSIFICATION	8.39296826628877E-6	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999840880596805	WITHOUT_CLASSIFICATION	1.5911940319541257E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999382196769988	WITHOUT_CLASSIFICATION	6.178032300113296E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999647215552325	WITHOUT_CLASSIFICATION	3.5278444767412776E-5	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.999958002432054	WITHOUT_CLASSIFICATION	4.199756794602334E-5	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999650413022089	WITHOUT_CLASSIFICATION	3.495869779104853E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999956819483775	WITHOUT_CLASSIFICATION	4.318051622440484E-6	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999988984723914	WITHOUT_CLASSIFICATION	1.101527608617533E-6	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999972546514	WITHOUT_CLASSIFICATION	2.7453485998928617E-6	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999905758713772	WITHOUT_CLASSIFICATION	9.424128622778522E-6	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999418884846799	WITHOUT_CLASSIFICATION	5.81115153200691E-5	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999880621690762	WITHOUT_CLASSIFICATION	1.1937830923821829E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999932187464734	WITHOUT_CLASSIFICATION	6.781253526545978E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.999992737228899	WITHOUT_CLASSIFICATION	7.262771100994682E-6	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999284225987034	WITHOUT_CLASSIFICATION	7.157740129669171E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999372402594905	WITHOUT_CLASSIFICATION	6.275974050954046E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999372402594905	WITHOUT_CLASSIFICATION	6.275974050954046E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999372402594905	WITHOUT_CLASSIFICATION	6.275974050954046E-5	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9998758515134306	WITHOUT_CLASSIFICATION	1.241484865695102E-4	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999877137612151	WITHOUT_CLASSIFICATION	1.2286238784975853E-5	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999537700817203	WITHOUT_CLASSIFICATION	4.6229918279759795E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9993745642876508	WITHOUT_CLASSIFICATION	6.254357123492834E-4	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999977911626305	WITHOUT_CLASSIFICATION	2.208837369377927E-6	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999987354751778	WITHOUT_CLASSIFICATION	1.2645248222052026E-6	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.99999710812603	WITHOUT_CLASSIFICATION	2.891873969924978E-6	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999949142534389	WITHOUT_CLASSIFICATION	5.085746561167428E-6	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999886761778853	WITHOUT_CLASSIFICATION	1.1323822114595645E-5	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.999866864482508	WITHOUT_CLASSIFICATION	1.3313551749189587E-4	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999854563072021	WITHOUT_CLASSIFICATION	1.4543692797859551E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9998998765662195	WITHOUT_CLASSIFICATION	1.0012343378055189E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999914655027119	WITHOUT_CLASSIFICATION	8.534497288082825E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999932699303377	WITHOUT_CLASSIFICATION	6.73006966244602E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999932699303377	WITHOUT_CLASSIFICATION	6.73006966244602E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.999989378762847	WITHOUT_CLASSIFICATION	1.062123715302318E-5	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999960766918768	WITHOUT_CLASSIFICATION	3.923308123189995E-6	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999840880596805	WITHOUT_CLASSIFICATION	1.5911940319541257E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999647215552325	WITHOUT_CLASSIFICATION	3.5278444767412776E-5	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999650413022089	WITHOUT_CLASSIFICATION	3.495869779104853E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999382196769988	WITHOUT_CLASSIFICATION	6.178032300113296E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999956819483775	WITHOUT_CLASSIFICATION	4.318051622440484E-6	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999905758713772	WITHOUT_CLASSIFICATION	9.424128622778522E-6	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999972546514	WITHOUT_CLASSIFICATION	2.7453485998928617E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999880621690762	WITHOUT_CLASSIFICATION	1.1937830923821829E-5	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999956892377212	WITHOUT_CLASSIFICATION	4.310762278888161E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999946335810349	WITHOUT_CLASSIFICATION	5.366418964990244E-6	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999939950627525	WITHOUT_CLASSIFICATION	6.004937247497142E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999856569449955	WITHOUT_CLASSIFICATION	1.4343055004425644E-5	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.999991249082954	WITHOUT_CLASSIFICATION	8.750917046024055E-6	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999546627382562	WITHOUT_CLASSIFICATION	4.533726174384056E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999683478210124	WITHOUT_CLASSIFICATION	3.1652178987681855E-5	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9999949111484363	WITHOUT_CLASSIFICATION	5.088851563676364E-6	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999875415786176	WITHOUT_CLASSIFICATION	1.2458421382449455E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999985592564085	WITHOUT_CLASSIFICATION	1.440743591483657E-6	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999544144927847	WITHOUT_CLASSIFICATION	4.558550721523458E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999972334519502	WITHOUT_CLASSIFICATION	2.7665480497920214E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999950595593943	WITHOUT_CLASSIFICATION	4.94044060574006E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999818418998669	WITHOUT_CLASSIFICATION	1.815810013301261E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999935050442559	WITHOUT_CLASSIFICATION	6.494955744213811E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999836231494594	WITHOUT_CLASSIFICATION	1.6376850540592977E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999776099391646	WITHOUT_CLASSIFICATION	2.2390060835383613E-5	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999421139812781	WITHOUT_CLASSIFICATION	5.7886018721883664E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999913241402918	WITHOUT_CLASSIFICATION	8.675859708206247E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.99998544219384	WITHOUT_CLASSIFICATION	1.4557806160057143E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999946231477396	WITHOUT_CLASSIFICATION	5.376852260478358E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9993068348274223	WITHOUT_CLASSIFICATION	6.931651725776636E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9993068348274223	WITHOUT_CLASSIFICATION	6.931651725776636E-4	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999703703921532	WITHOUT_CLASSIFICATION	2.962960784686377E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.999998098766127	WITHOUT_CLASSIFICATION	1.9012338729944564E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9990133661543134	WITHOUT_CLASSIFICATION	9.866338456867342E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9990133661543134	WITHOUT_CLASSIFICATION	9.866338456867342E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9990133661543134	WITHOUT_CLASSIFICATION	9.866338456867342E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9988845291632075	WITHOUT_CLASSIFICATION	0.0011154708367925375	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9988845291632075	WITHOUT_CLASSIFICATION	0.0011154708367925375	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9989483039172206	WITHOUT_CLASSIFICATION	0.0010516960827793554	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.998996157585856	WITHOUT_CLASSIFICATION	0.0010038424141440676	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.999998098766127	WITHOUT_CLASSIFICATION	1.9012338729944564E-6	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999969001713332	WITHOUT_CLASSIFICATION	3.0998286668212768E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9990133661543134	WITHOUT_CLASSIFICATION	9.866338456867342E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9990133661543134	WITHOUT_CLASSIFICATION	9.866338456867342E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9988845291632075	WITHOUT_CLASSIFICATION	0.0011154708367925375	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.998996157585856	WITHOUT_CLASSIFICATION	0.0010038424141440676	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999917411478628	WITHOUT_CLASSIFICATION	8.258852137218367E-6	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999917411478628	WITHOUT_CLASSIFICATION	8.258852137218367E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999878863601345	WITHOUT_CLASSIFICATION	1.2113639865575854E-5	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999878863601345	WITHOUT_CLASSIFICATION	1.2113639865575854E-5	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9998385723635409	WITHOUT_CLASSIFICATION	1.6142763645918815E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9998385723635409	WITHOUT_CLASSIFICATION	1.6142763645918815E-4	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999748597861897	WITHOUT_CLASSIFICATION	2.5140213810349857E-5	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999804664950347	WITHOUT_CLASSIFICATION	1.9533504965318553E-5	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999804664950347	WITHOUT_CLASSIFICATION	1.9533504965318553E-5	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999918323349899	WITHOUT_CLASSIFICATION	8.167665010070406E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999918323349899	WITHOUT_CLASSIFICATION	8.167665010070406E-6	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999884908040428	WITHOUT_CLASSIFICATION	1.1509195957205145E-5	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999818112051599	WITHOUT_CLASSIFICATION	1.8188794840094478E-5	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999818112051599	WITHOUT_CLASSIFICATION	1.8188794840094478E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999949568889374	WITHOUT_CLASSIFICATION	5.04311106261426E-6	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999763758776545	WITHOUT_CLASSIFICATION	2.3624122345512664E-5	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9998891425015727	WITHOUT_CLASSIFICATION	1.1085749842730857E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999949568889374	WITHOUT_CLASSIFICATION	5.04311106261426E-6	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999849110816758	WITHOUT_CLASSIFICATION	1.5088918324179529E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999629238942624	WITHOUT_CLASSIFICATION	3.707610573753186E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999629238942624	WITHOUT_CLASSIFICATION	3.707610573753186E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999629238942624	WITHOUT_CLASSIFICATION	3.707610573753186E-5	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999981355971265	WITHOUT_CLASSIFICATION	1.8644028734838992E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9998744022857211	WITHOUT_CLASSIFICATION	1.255977142788743E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999240033451137	WITHOUT_CLASSIFICATION	7.59966548862208E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999240033451137	WITHOUT_CLASSIFICATION	7.59966548862208E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999774382597973	WITHOUT_CLASSIFICATION	2.25617402026122E-5	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999364947249262	WITHOUT_CLASSIFICATION	6.350527507384468E-5	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999400283142259	WITHOUT_CLASSIFICATION	5.997168577402824E-5	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9998957479916164	WITHOUT_CLASSIFICATION	1.0425200838356803E-4	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999825829726804	WITHOUT_CLASSIFICATION	1.7417027319561994E-5	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999633428230613	WITHOUT_CLASSIFICATION	3.665717693872462E-5	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999633428230613	WITHOUT_CLASSIFICATION	3.665717693872462E-5	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999978005424403	WITHOUT_CLASSIFICATION	2.1994575596827816E-6	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9988620551930594	WITHOUT_CLASSIFICATION	0.0011379448069406331	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9988620551930594	WITHOUT_CLASSIFICATION	0.0011379448069406331	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999629238942624	WITHOUT_CLASSIFICATION	3.707610573753186E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9998744022857211	WITHOUT_CLASSIFICATION	1.255977142788743E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999240033451137	WITHOUT_CLASSIFICATION	7.59966548862208E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999774382597973	WITHOUT_CLASSIFICATION	2.25617402026122E-5	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999364947249262	WITHOUT_CLASSIFICATION	6.350527507384468E-5	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999400283142259	WITHOUT_CLASSIFICATION	5.997168577402824E-5	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9998957479916164	WITHOUT_CLASSIFICATION	1.0425200838356803E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9988620551930594	WITHOUT_CLASSIFICATION	0.0011379448069406331	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999833087331705	WITHOUT_CLASSIFICATION	1.6691266829458688E-5	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999914176199998	WITHOUT_CLASSIFICATION	8.582380000188756E-6	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999865896068363	WITHOUT_CLASSIFICATION	1.3410393163829076E-5	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999914544156894	WITHOUT_CLASSIFICATION	8.545584310593717E-6	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999575183558392	WITHOUT_CLASSIFICATION	4.2481644160748385E-5	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999943842865723	WITHOUT_CLASSIFICATION	5.61571342761477E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999883110041536	WITHOUT_CLASSIFICATION	1.1688995846227836E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999883110041536	WITHOUT_CLASSIFICATION	1.1688995846227836E-5	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999969095330542	WITHOUT_CLASSIFICATION	3.090466945871461E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999965686965241	WITHOUT_CLASSIFICATION	3.4313034759598786E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999891421955345	WITHOUT_CLASSIFICATION	1.0857804465570295E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999936635871479	WITHOUT_CLASSIFICATION	6.336412852131445E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999963300061534	WITHOUT_CLASSIFICATION	3.669993846645132E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999963300061534	WITHOUT_CLASSIFICATION	3.669993846645132E-6	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999969621693083	WITHOUT_CLASSIFICATION	3.0378306917658614E-6	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999948961518754	WITHOUT_CLASSIFICATION	5.103848124583574E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999964768562118	WITHOUT_CLASSIFICATION	3.5231437881415157E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999964768562118	WITHOUT_CLASSIFICATION	3.5231437881415157E-6	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.999994458429421	WITHOUT_CLASSIFICATION	5.54157057895447E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999974781469286	WITHOUT_CLASSIFICATION	2.521853071447333E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999825829726804	WITHOUT_CLASSIFICATION	1.7417027319561994E-5	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999609377397701	WITHOUT_CLASSIFICATION	3.906226022977622E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999653500177873	WITHOUT_CLASSIFICATION	3.464998221275118E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999958776004087	WITHOUT_CLASSIFICATION	4.1223995913007676E-5	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999985252415005	WITHOUT_CLASSIFICATION	1.474758499530666E-6	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999140923042193	WITHOUT_CLASSIFICATION	8.590769578063565E-5	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999938745532153	WITHOUT_CLASSIFICATION	6.125446784677535E-6	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999653730099295	WITHOUT_CLASSIFICATION	3.462699007056524E-5	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9995447644444091	WITHOUT_CLASSIFICATION	4.5523555559098464E-4	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999808814064666	WITHOUT_CLASSIFICATION	1.9118593533461324E-5	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999808814064666	WITHOUT_CLASSIFICATION	1.9118593533461324E-5	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999654713089595	WITHOUT_CLASSIFICATION	3.4528691040397755E-5	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999654713089595	WITHOUT_CLASSIFICATION	3.4528691040397755E-5	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999981453607472	WITHOUT_CLASSIFICATION	1.8546392528624181E-6	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999036652448453	WITHOUT_CLASSIFICATION	9.633475515473246E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999036652448453	WITHOUT_CLASSIFICATION	9.633475515473246E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999036652448453	WITHOUT_CLASSIFICATION	9.633475515473246E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999400463507533	WITHOUT_CLASSIFICATION	5.995364924666453E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999993160043359	WITHOUT_CLASSIFICATION	6.839956640461776E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999993160043359	WITHOUT_CLASSIFICATION	6.839956640461776E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999949639777883	WITHOUT_CLASSIFICATION	5.036022211741383E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999756376744396	WITHOUT_CLASSIFICATION	2.4362325560327416E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999668168703219	WITHOUT_CLASSIFICATION	3.31831296781468E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.99998966560047	WITHOUT_CLASSIFICATION	1.0334399530091697E-5	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.99999745263605	WITHOUT_CLASSIFICATION	2.5473639500585806E-6	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999563723444176	WITHOUT_CLASSIFICATION	4.362765558240425E-5	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999762508079241	WITHOUT_CLASSIFICATION	2.374919207594259E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999950595593943	WITHOUT_CLASSIFICATION	4.94044060574006E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999950595593943	WITHOUT_CLASSIFICATION	4.94044060574006E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999400463507533	WITHOUT_CLASSIFICATION	5.995364924666453E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999949639777883	WITHOUT_CLASSIFICATION	5.036022211741383E-6	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999861733847311	WITHOUT_CLASSIFICATION	1.3826615268945744E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999756376744396	WITHOUT_CLASSIFICATION	2.4362325560327416E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999668168703219	WITHOUT_CLASSIFICATION	3.31831296781468E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999971751747269	WITHOUT_CLASSIFICATION	2.8248252732538673E-6	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999607048306679	WITHOUT_CLASSIFICATION	3.929516933207239E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999544233026089	WITHOUT_CLASSIFICATION	4.557669739100897E-5	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9993447040377841	WITHOUT_CLASSIFICATION	6.552959622159507E-4	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999887563989608	WITHOUT_CLASSIFICATION	1.1243601039258488E-5	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999711270246617	WITHOUT_CLASSIFICATION	2.887297533828759E-5	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.999990126124735	WITHOUT_CLASSIFICATION	9.873875264995108E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999971751747269	WITHOUT_CLASSIFICATION	2.8248252732538673E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999996695019571	WITHOUT_CLASSIFICATION	3.304980428944734E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999996695019571	WITHOUT_CLASSIFICATION	3.304980428944734E-6	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999050895751651	WITHOUT_CLASSIFICATION	9.491042483491232E-5	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999886062747045	WITHOUT_CLASSIFICATION	1.1393725295407972E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999787877928707	WITHOUT_CLASSIFICATION	2.12122071293285E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.999990133283736	WITHOUT_CLASSIFICATION	9.866716264019779E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999956950745648	WITHOUT_CLASSIFICATION	4.304925435247746E-6	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999953968800598	WITHOUT_CLASSIFICATION	4.6031199402436905E-6	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999903523910642	WITHOUT_CLASSIFICATION	9.647608935823456E-6	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999928091245127	WITHOUT_CLASSIFICATION	7.190875487276355E-6	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.999974456595919	WITHOUT_CLASSIFICATION	2.5543404080944746E-5	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.999970230100404	WITHOUT_CLASSIFICATION	2.976989959593911E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999630885720252	WITHOUT_CLASSIFICATION	3.691142797483451E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.999990133283736	WITHOUT_CLASSIFICATION	9.866716264019779E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999956950745648	WITHOUT_CLASSIFICATION	4.304925435247746E-6	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999893253296821	WITHOUT_CLASSIFICATION	1.0674670317958532E-5	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999668694013263	WITHOUT_CLASSIFICATION	3.313059867379125E-5	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999981401679323	WITHOUT_CLASSIFICATION	1.8598320676134631E-6	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999005820060297	WITHOUT_CLASSIFICATION	9.941799397036344E-5	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999674111804294	WITHOUT_CLASSIFICATION	3.258881957050479E-5	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9997670154752607	WITHOUT_CLASSIFICATION	2.3298452473914592E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.998738482342489	WITHOUT_CLASSIFICATION	0.0012615176575110289	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999423262326306	WITHOUT_CLASSIFICATION	5.7673767369304705E-5	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9998822017876414	WITHOUT_CLASSIFICATION	1.1779821235861396E-4	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9996896907447724	WITHOUT_CLASSIFICATION	3.103092552275385E-4	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9998680124791556	WITHOUT_CLASSIFICATION	1.3198752084439986E-4	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9997875731179449	WITHOUT_CLASSIFICATION	2.1242688205517582E-4	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999968583234924	WITHOUT_CLASSIFICATION	3.141676507557206E-6	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999924186947438	WITHOUT_CLASSIFICATION	7.581305256354071E-6	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.999997881314614	WITHOUT_CLASSIFICATION	2.1186853858968245E-6	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999883041979013	WITHOUT_CLASSIFICATION	1.1695802098669633E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9997459313113308	WITHOUT_CLASSIFICATION	2.54068688669147E-4	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.99998947661464	WITHOUT_CLASSIFICATION	1.0523385360003457E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999977637922278	WITHOUT_CLASSIFICATION	2.2362077722925445E-6	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999864254820635	WITHOUT_CLASSIFICATION	1.3574517936513125E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9997459313113308	WITHOUT_CLASSIFICATION	2.54068688669147E-4	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.99998947661464	WITHOUT_CLASSIFICATION	1.0523385360003457E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999977637922278	WITHOUT_CLASSIFICATION	2.2362077722925445E-6	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999466065785791	WITHOUT_CLASSIFICATION	5.339342142090261E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999963798012178	WITHOUT_CLASSIFICATION	3.620198782269475E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999951723069544	WITHOUT_CLASSIFICATION	4.827693045484309E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999611466358667	WITHOUT_CLASSIFICATION	3.885336413323801E-5	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9999747439247928	WITHOUT_CLASSIFICATION	2.5256075207191095E-5	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999974132563039	WITHOUT_CLASSIFICATION	2.5867436960084397E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999650268023849	WITHOUT_CLASSIFICATION	3.497319761513513E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999986144542897	WITHOUT_CLASSIFICATION	1.3855457102936086E-6	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999739839912861	WITHOUT_CLASSIFICATION	2.601600871389651E-5	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999393596649256	WITHOUT_CLASSIFICATION	6.064033507432653E-5	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.998864366709511	WITHOUT_CLASSIFICATION	0.0011356332904889968	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999237763619001	WITHOUT_CLASSIFICATION	7.622363809984832E-5	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999966788328875	WITHOUT_CLASSIFICATION	3.3211671124983296E-6	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999994382601434	WITHOUT_CLASSIFICATION	5.617398567347326E-7	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999949543994168	WITHOUT_CLASSIFICATION	5.045600583229535E-6	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999947748622103	WITHOUT_CLASSIFICATION	5.225137789702504E-6	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999958580957792	WITHOUT_CLASSIFICATION	4.141904220892586E-6	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999938304890351	WITHOUT_CLASSIFICATION	6.169510964839093E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999841978105067	WITHOUT_CLASSIFICATION	1.5802189493313763E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.99997427999539	WITHOUT_CLASSIFICATION	2.572000460990827E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999080772799197	WITHOUT_CLASSIFICATION	9.192272008021519E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.99986749217695	WITHOUT_CLASSIFICATION	1.325078230499285E-4	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.99986749217695	WITHOUT_CLASSIFICATION	1.325078230499285E-4	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999936454379413	WITHOUT_CLASSIFICATION	6.354562058673348E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999936454379413	WITHOUT_CLASSIFICATION	6.354562058673348E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999965559193178	WITHOUT_CLASSIFICATION	3.4440806821986773E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999965559193178	WITHOUT_CLASSIFICATION	3.4440806821986773E-6	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999965597080118	WITHOUT_CLASSIFICATION	3.440291988280708E-6	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999966142139373	WITHOUT_CLASSIFICATION	3.385786062737541E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999932692858265	WITHOUT_CLASSIFICATION	6.730714173520424E-6	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.99996477527283	WITHOUT_CLASSIFICATION	3.522472716998782E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999852264599574	WITHOUT_CLASSIFICATION	1.4773540042771255E-5	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999876955156883	WITHOUT_CLASSIFICATION	1.2304484311585783E-5	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999843808706678	WITHOUT_CLASSIFICATION	1.5619129332214853E-5	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.999965371390111	WITHOUT_CLASSIFICATION	3.4628609889018406E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999950595593943	WITHOUT_CLASSIFICATION	4.94044060574006E-6	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999965597080118	WITHOUT_CLASSIFICATION	3.440291988280708E-6	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999966142139373	WITHOUT_CLASSIFICATION	3.385786062737541E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999932692858265	WITHOUT_CLASSIFICATION	6.730714173520424E-6	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999852264599574	WITHOUT_CLASSIFICATION	1.4773540042771255E-5	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999876955156883	WITHOUT_CLASSIFICATION	1.2304484311585783E-5	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999455988490317	WITHOUT_CLASSIFICATION	5.4401150968450573E-5	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999530896311469	WITHOUT_CLASSIFICATION	4.691036885302349E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999366704903953	WITHOUT_CLASSIFICATION	6.332950960478676E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999366704903953	WITHOUT_CLASSIFICATION	6.332950960478676E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999940127239033	WITHOUT_CLASSIFICATION	5.9872760967161875E-6	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9998683950432181	WITHOUT_CLASSIFICATION	1.3160495678182397E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999917717137929	WITHOUT_CLASSIFICATION	8.228286207074577E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999834759040622	WITHOUT_CLASSIFICATION	1.6524095937831057E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999834759040622	WITHOUT_CLASSIFICATION	1.6524095937831057E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999977513588171	WITHOUT_CLASSIFICATION	2.2486411829884252E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999978488145586	WITHOUT_CLASSIFICATION	2.151185441393814E-6	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999902951537019	WITHOUT_CLASSIFICATION	9.704846298143783E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.999993268454488	WITHOUT_CLASSIFICATION	6.731545511998311E-6	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9998487775076788	WITHOUT_CLASSIFICATION	1.512224923213093E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999818418998669	WITHOUT_CLASSIFICATION	1.815810013301261E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999935050442559	WITHOUT_CLASSIFICATION	6.494955744213811E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999836231494594	WITHOUT_CLASSIFICATION	1.6376850540592977E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999776099391646	WITHOUT_CLASSIFICATION	2.2390060835383613E-5	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.99998544219384	WITHOUT_CLASSIFICATION	1.4557806160057143E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999946231477396	WITHOUT_CLASSIFICATION	5.376852260478358E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999977513588171	WITHOUT_CLASSIFICATION	2.2486411829884252E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999978488145586	WITHOUT_CLASSIFICATION	2.151185441393814E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.999993268454488	WITHOUT_CLASSIFICATION	6.731545511998311E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.999997415941605	WITHOUT_CLASSIFICATION	2.5840583949329916E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999917717137929	WITHOUT_CLASSIFICATION	8.228286207074577E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999917717137929	WITHOUT_CLASSIFICATION	8.228286207074577E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999630885720252	WITHOUT_CLASSIFICATION	3.691142797483451E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999630885720252	WITHOUT_CLASSIFICATION	3.691142797483451E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9997985151224229	WITHOUT_CLASSIFICATION	2.0148487757712434E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9997985151224229	WITHOUT_CLASSIFICATION	2.0148487757712434E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999857143456157	WITHOUT_CLASSIFICATION	1.4285654384374197E-5	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999872731237124	WITHOUT_CLASSIFICATION	1.2726876287563599E-5	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.999987495412841	WITHOUT_CLASSIFICATION	1.250458715897875E-5	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999838457605656	WITHOUT_CLASSIFICATION	1.6154239434372426E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.999999138232851	WITHOUT_CLASSIFICATION	8.617671489322804E-7	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999925014732715	WITHOUT_CLASSIFICATION	7.498526728611478E-6	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9988775774231061	WITHOUT_CLASSIFICATION	0.0011224225768938878	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.999998688687902	WITHOUT_CLASSIFICATION	1.311312098053488E-6	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999980842476657	WITHOUT_CLASSIFICATION	1.9157523342914713E-6	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999963826997847	WITHOUT_CLASSIFICATION	3.6173002153125337E-6	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999808393416255	WITHOUT_CLASSIFICATION	1.9160658374490027E-5	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999917346530736	WITHOUT_CLASSIFICATION	8.265346926412666E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999961491128698	WITHOUT_CLASSIFICATION	3.850887130179447E-6	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999981021655759	WITHOUT_CLASSIFICATION	1.89783442399261E-6	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999994038727309	WITHOUT_CLASSIFICATION	5.961272692073341E-7	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999877161574118	WITHOUT_CLASSIFICATION	1.2283842588150236E-5	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999283511647715	WITHOUT_CLASSIFICATION	7.164883522848649E-5	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999793036337855	WITHOUT_CLASSIFICATION	2.0696366214441763E-5	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999970589027373	WITHOUT_CLASSIFICATION	2.9410972627904208E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999935050442559	WITHOUT_CLASSIFICATION	6.494955744213811E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999776099391646	WITHOUT_CLASSIFICATION	2.2390060835383613E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9993068348274223	WITHOUT_CLASSIFICATION	6.931651725776636E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999240033451137	WITHOUT_CLASSIFICATION	7.59966548862208E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999240033451137	WITHOUT_CLASSIFICATION	7.59966548862208E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.999997415941605	WITHOUT_CLASSIFICATION	2.5840583949329916E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999917717137929	WITHOUT_CLASSIFICATION	8.228286207074577E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999630885720252	WITHOUT_CLASSIFICATION	3.691142797483451E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9997985151224229	WITHOUT_CLASSIFICATION	2.0148487757712434E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999697589923547	WITHOUT_CLASSIFICATION	3.0241007645270878E-5	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999606710478589	WITHOUT_CLASSIFICATION	3.932895214107551E-5	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.999996621168658	WITHOUT_CLASSIFICATION	3.3788313420592276E-6	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9999996372728281	WITHOUT_CLASSIFICATION	3.627271718335181E-7	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999855692522642	WITHOUT_CLASSIFICATION	1.4430747735792914E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999855692522642	WITHOUT_CLASSIFICATION	1.4430747735792914E-5	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.999997471916025	WITHOUT_CLASSIFICATION	2.528083975019369E-6	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9998856924297731	WITHOUT_CLASSIFICATION	1.1430757022688707E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999424050038264	WITHOUT_CLASSIFICATION	5.759499617375995E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9997436329485865	WITHOUT_CLASSIFICATION	2.563670514134921E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999636192327609	WITHOUT_CLASSIFICATION	3.638076723908567E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999636192327609	WITHOUT_CLASSIFICATION	3.638076723908567E-5	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999989538908106	WITHOUT_CLASSIFICATION	1.046109189296015E-6	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999727803352495	WITHOUT_CLASSIFICATION	2.721966475049963E-5	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999914165768538	WITHOUT_CLASSIFICATION	8.583423146276552E-6	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999980464873074	WITHOUT_CLASSIFICATION	1.9535126925886205E-6	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999971763175611	WITHOUT_CLASSIFICATION	2.8236824388108975E-6	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999914081288416	WITHOUT_CLASSIFICATION	8.59187115845082E-6	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999706442908197	WITHOUT_CLASSIFICATION	2.935570918023753E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999735704122165	WITHOUT_CLASSIFICATION	2.6429587783499492E-5	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9999931212990293	WITHOUT_CLASSIFICATION	6.87870097080122E-6	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9999883273571608	WITHOUT_CLASSIFICATION	1.167264283927182E-5	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9999941789964578	WITHOUT_CLASSIFICATION	5.821003542201132E-6	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999933062890767	WITHOUT_CLASSIFICATION	6.6937109234101646E-6	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999992591027198	WITHOUT_CLASSIFICATION	7.408972801349213E-7	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999884573674177	WITHOUT_CLASSIFICATION	1.1542632582407487E-5	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999852501509375	WITHOUT_CLASSIFICATION	1.4749849062479425E-5	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999996045058159	WITHOUT_CLASSIFICATION	3.954941840591151E-7	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999809679710809	WITHOUT_CLASSIFICATION	1.9032028919129868E-5	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.999994332174103	WITHOUT_CLASSIFICATION	5.6678258969228594E-6	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999983148067761	WITHOUT_CLASSIFICATION	1.6851932237633883E-6	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999596640717714	WITHOUT_CLASSIFICATION	4.03359282286561E-5	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999675025441266	WITHOUT_CLASSIFICATION	3.249745587338271E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999524279152531	WITHOUT_CLASSIFICATION	4.757208474688766E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999524279152531	WITHOUT_CLASSIFICATION	4.757208474688766E-5	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.999994286032257	WITHOUT_CLASSIFICATION	5.713967742969587E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999643222677511	WITHOUT_CLASSIFICATION	3.5677732248935434E-5	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999981489254701	WITHOUT_CLASSIFICATION	1.8510745298086062E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999981489254701	WITHOUT_CLASSIFICATION	1.8510745298086062E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9994888680496639	WITHOUT_CLASSIFICATION	5.111319503361072E-4	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999884211579285	WITHOUT_CLASSIFICATION	1.1578842071519559E-5	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999447821194528	WITHOUT_CLASSIFICATION	5.521788054721684E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999740189892862	WITHOUT_CLASSIFICATION	2.598101071389013E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999740189892862	WITHOUT_CLASSIFICATION	2.598101071389013E-5	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999788763846076	WITHOUT_CLASSIFICATION	2.1123615392392678E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999904021759404	WITHOUT_CLASSIFICATION	9.597824059736554E-6	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999824871200155	WITHOUT_CLASSIFICATION	1.7512879984567976E-5	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999817880089246	WITHOUT_CLASSIFICATION	1.8211991075383496E-5	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999885048425844	WITHOUT_CLASSIFICATION	1.1495157415615427E-5	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999747228322495	WITHOUT_CLASSIFICATION	2.5277167750417383E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999598883199201	WITHOUT_CLASSIFICATION	4.011168007999896E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999785005584003	WITHOUT_CLASSIFICATION	2.1499441599666182E-5	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999732068064802	WITHOUT_CLASSIFICATION	2.6793193519738844E-5	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.99999089640715	WITHOUT_CLASSIFICATION	9.10359285000046E-6	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9998710090336898	WITHOUT_CLASSIFICATION	1.2899096631022582E-4	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999632990308507	WITHOUT_CLASSIFICATION	3.670096914926059E-5	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999794604737028	WITHOUT_CLASSIFICATION	2.0539526297213002E-5	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999860622018129	WITHOUT_CLASSIFICATION	1.3937798187202638E-5	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999829492978684	WITHOUT_CLASSIFICATION	1.7050702131687936E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9999947748801973	WITHOUT_CLASSIFICATION	5.2251198027959406E-6	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999967444641701	WITHOUT_CLASSIFICATION	3.2555358298633306E-6	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999625595460547	WITHOUT_CLASSIFICATION	3.744045394532529E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999578928184161	WITHOUT_CLASSIFICATION	4.210718158398176E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999049631810495	WITHOUT_CLASSIFICATION	9.503681895058229E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999926353598826	WITHOUT_CLASSIFICATION	7.364640117369868E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999870710302999	WITHOUT_CLASSIFICATION	1.2928969699947895E-5	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9994156690863256	WITHOUT_CLASSIFICATION	5.843309136742495E-4	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999762642047094	WITHOUT_CLASSIFICATION	2.373579529059725E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999803930840904	WITHOUT_CLASSIFICATION	1.9606915909685746E-5	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.999955909061383	WITHOUT_CLASSIFICATION	4.409093861696832E-5	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9991260311474239	WITHOUT_CLASSIFICATION	8.739688525760622E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999946013683119	WITHOUT_CLASSIFICATION	5.3986316881721375E-6	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9998847517997667	WITHOUT_CLASSIFICATION	1.1524820023340118E-4	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999674174128763	WITHOUT_CLASSIFICATION	3.258258712376966E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999971409888588	WITHOUT_CLASSIFICATION	2.8590111410807232E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999860622018129	WITHOUT_CLASSIFICATION	1.3937798187202638E-5	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999946013683119	WITHOUT_CLASSIFICATION	5.3986316881721375E-6	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9998847517997667	WITHOUT_CLASSIFICATION	1.1524820023340118E-4	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999971409888588	WITHOUT_CLASSIFICATION	2.8590111410807232E-6	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999882749193683	WITHOUT_CLASSIFICATION	1.1725080631756292E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999454370488282	WITHOUT_CLASSIFICATION	5.456295117175937E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999025883912007	WITHOUT_CLASSIFICATION	9.741160879927954E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999941088353536	WITHOUT_CLASSIFICATION	5.891164646411069E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999687318391485	WITHOUT_CLASSIFICATION	3.126816085148428E-5	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999977777018839	WITHOUT_CLASSIFICATION	2.2222981161821263E-6	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999281429270723	WITHOUT_CLASSIFICATION	7.185707292766098E-5	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999897451057516	WITHOUT_CLASSIFICATION	1.025489424841935E-5	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999435438171136	WITHOUT_CLASSIFICATION	5.6456182886323845E-5	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999953198306435	WITHOUT_CLASSIFICATION	4.680169356515091E-6	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999610152079667	WITHOUT_CLASSIFICATION	3.8984792033385713E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999610152079667	WITHOUT_CLASSIFICATION	3.8984792033385713E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9998515568894344	WITHOUT_CLASSIFICATION	1.48443110565725E-4	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.999972542006429	WITHOUT_CLASSIFICATION	2.7457993571013788E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999940011485682	WITHOUT_CLASSIFICATION	5.998851431856744E-6	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999900444438228	WITHOUT_CLASSIFICATION	9.955556177220888E-6	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999806432718693	WITHOUT_CLASSIFICATION	1.9356728130743073E-5	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999812121500525	WITHOUT_CLASSIFICATION	1.878784994745606E-5	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999746355947544	WITHOUT_CLASSIFICATION	2.5364405245619772E-5	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999903386223054	WITHOUT_CLASSIFICATION	9.661377694631167E-6	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999921004859385	WITHOUT_CLASSIFICATION	7.899514061550582E-6	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999991711782683	WITHOUT_CLASSIFICATION	8.288217317148028E-7	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999988541813599	WITHOUT_CLASSIFICATION	1.1458186401124836E-6	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999993648133997	WITHOUT_CLASSIFICATION	6.351866002702718E-7	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999899780989949	WITHOUT_CLASSIFICATION	1.0021901005108994E-5	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.999993609878214	WITHOUT_CLASSIFICATION	6.39012178602607E-6	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999859876947398	WITHOUT_CLASSIFICATION	1.4012305260150388E-5	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999907711141972	WITHOUT_CLASSIFICATION	9.228885802777071E-6	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999717615127044	WITHOUT_CLASSIFICATION	2.8238487295572735E-5	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999847937149703	WITHOUT_CLASSIFICATION	1.5206285029776104E-5	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999833830886186	WITHOUT_CLASSIFICATION	1.661691138152529E-5	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999201370743366	WITHOUT_CLASSIFICATION	7.986292566343772E-5	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999348609284673	WITHOUT_CLASSIFICATION	6.513907153271401E-5	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999525566138651	WITHOUT_CLASSIFICATION	4.744338613496484E-5	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999742839406217	WITHOUT_CLASSIFICATION	2.5716059378266673E-5	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999417554945171	WITHOUT_CLASSIFICATION	5.82445054827416E-5	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999271653654768	WITHOUT_CLASSIFICATION	7.283463452324673E-5	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999663395953444	WITHOUT_CLASSIFICATION	3.366040465565275E-5	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9999965840596082	WITHOUT_CLASSIFICATION	3.41594039184057E-6	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9999978968809989	WITHOUT_CLASSIFICATION	2.10311900102687E-6	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999596550056357	WITHOUT_CLASSIFICATION	4.034499436428553E-5	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999706980678071	WITHOUT_CLASSIFICATION	2.9301932192929273E-5	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999963599448022	WITHOUT_CLASSIFICATION	3.640055197821841E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999501575674195	WITHOUT_CLASSIFICATION	4.9842432580555274E-5	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.999996252806157	WITHOUT_CLASSIFICATION	3.747193843059784E-6	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999980262800937	WITHOUT_CLASSIFICATION	1.9737199063622555E-6	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999888674073205	WITHOUT_CLASSIFICATION	1.1132592679484725E-5	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999961406586422	WITHOUT_CLASSIFICATION	3.859341357885759E-6	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999985167115782	WITHOUT_CLASSIFICATION	1.483288421740599E-6	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999668685775595	WITHOUT_CLASSIFICATION	3.3131422440563465E-5	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999952018289539	WITHOUT_CLASSIFICATION	4.798171046116507E-6	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999979647789641	WITHOUT_CLASSIFICATION	2.035221035966724E-6	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999418516054811	WITHOUT_CLASSIFICATION	5.81483945190034E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999737585857335	WITHOUT_CLASSIFICATION	2.624141426657788E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999703691718644	WITHOUT_CLASSIFICATION	2.9630828135506878E-5	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999880046181862	WITHOUT_CLASSIFICATION	1.1995381813856854E-5	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999988971395494	WITHOUT_CLASSIFICATION	1.1028604506530552E-6	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999972110146953	WITHOUT_CLASSIFICATION	2.7889853046340376E-6	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999934725324572	WITHOUT_CLASSIFICATION	6.527467542837632E-6	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999973410522359	WITHOUT_CLASSIFICATION	2.658947764102985E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999991177768677	WITHOUT_CLASSIFICATION	8.822231323243085E-7	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999563226143918	WITHOUT_CLASSIFICATION	4.3677385608270536E-5	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999683472051689	WITHOUT_CLASSIFICATION	3.165279483108207E-5	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999994810025016	WITHOUT_CLASSIFICATION	5.189974983568622E-7	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999995451056397	WITHOUT_CLASSIFICATION	4.548943601754046E-7	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999269598649041	WITHOUT_CLASSIFICATION	7.304013509583238E-5	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.999989708573782	WITHOUT_CLASSIFICATION	1.0291426218040394E-5	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9996908812755937	WITHOUT_CLASSIFICATION	3.091187244062975E-4	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999930677738789	WITHOUT_CLASSIFICATION	6.932226121196504E-6	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999914677184258	WITHOUT_CLASSIFICATION	8.532281574163742E-6	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9999795801375425	WITHOUT_CLASSIFICATION	2.0419862457497152E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9997217669878466	WITHOUT_CLASSIFICATION	2.7823301215338774E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9997217669878466	WITHOUT_CLASSIFICATION	2.7823301215338774E-4	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999547374953671	WITHOUT_CLASSIFICATION	4.526250463283163E-5	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999949920113534	WITHOUT_CLASSIFICATION	5.007988646586648E-6	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9998360842256417	WITHOUT_CLASSIFICATION	1.639157743582763E-4	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9998192022004597	WITHOUT_CLASSIFICATION	1.8079779954040655E-4	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999960541025542	WITHOUT_CLASSIFICATION	3.945897445807355E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9999399747391469	WITHOUT_CLASSIFICATION	6.0025260853093475E-5	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9996433397296999	WITHOUT_CLASSIFICATION	3.566602703001326E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999880588235313	WITHOUT_CLASSIFICATION	1.194117646882754E-5	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999658996623794	WITHOUT_CLASSIFICATION	3.410033762057943E-5	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999778580489126	WITHOUT_CLASSIFICATION	2.214195108741277E-5	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999800990294171	WITHOUT_CLASSIFICATION	1.9900970582906732E-5	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999890611102537	WITHOUT_CLASSIFICATION	1.0938889746338141E-5	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9998448916365242	WITHOUT_CLASSIFICATION	1.5510836347571244E-4	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999792150018101	WITHOUT_CLASSIFICATION	2.078499818988038E-5	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999848807697375	WITHOUT_CLASSIFICATION	1.5119230262539723E-5	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9998775172015782	WITHOUT_CLASSIFICATION	1.2248279842180213E-4	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999862036693504	WITHOUT_CLASSIFICATION	1.3796330649562729E-5	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999919582588501	WITHOUT_CLASSIFICATION	8.041741149859473E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9999925698030497	WITHOUT_CLASSIFICATION	7.430196950352476E-6	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999871458446788	WITHOUT_CLASSIFICATION	1.2854155321158585E-5	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.999943464878449	WITHOUT_CLASSIFICATION	5.653512155099822E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999385321166855	WITHOUT_CLASSIFICATION	6.146788331456545E-5	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999943833109384	WITHOUT_CLASSIFICATION	5.616689061588211E-6	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999840432675635	WITHOUT_CLASSIFICATION	1.595673243644544E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.999984469144174	WITHOUT_CLASSIFICATION	1.553085582593641E-5	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9995995574645408	WITHOUT_CLASSIFICATION	4.00442535459161E-4	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9998629499139473	WITHOUT_CLASSIFICATION	1.3705008605270126E-4	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999982587170135	WITHOUT_CLASSIFICATION	1.741282986442419E-6	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999965512316761	WITHOUT_CLASSIFICATION	3.448768323840121E-6	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999992104966114	WITHOUT_CLASSIFICATION	7.895033885321025E-7	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999876172032975	WITHOUT_CLASSIFICATION	1.2382796702431057E-5	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999730386386626	WITHOUT_CLASSIFICATION	2.6961361337467734E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999904517262187	WITHOUT_CLASSIFICATION	9.54827378132643E-6	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999778418242908	WITHOUT_CLASSIFICATION	2.2158175709101986E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999904517262187	WITHOUT_CLASSIFICATION	9.54827378132643E-6	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.999994678953822	WITHOUT_CLASSIFICATION	5.321046178049026E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999847628063145	WITHOUT_CLASSIFICATION	1.5237193685557852E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999847628063145	WITHOUT_CLASSIFICATION	1.5237193685557852E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999847628063145	WITHOUT_CLASSIFICATION	1.5237193685557852E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999942040269275	WITHOUT_CLASSIFICATION	5.7959730724573375E-6	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999942040269275	WITHOUT_CLASSIFICATION	5.7959730724573375E-6	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999621294154186	WITHOUT_CLASSIFICATION	3.7870584581384874E-5	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999810109835132	WITHOUT_CLASSIFICATION	1.8989016486811716E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999903348922264	WITHOUT_CLASSIFICATION	9.665107773606838E-6	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999998866745836	WITHOUT_CLASSIFICATION	1.1332541637083135E-7	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999184820181957	WITHOUT_CLASSIFICATION	8.151798180427227E-5	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999871745645542	WITHOUT_CLASSIFICATION	1.2825435445671964E-5	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999962606392021	WITHOUT_CLASSIFICATION	3.7393607980083988E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999137018422339	WITHOUT_CLASSIFICATION	8.629815776607923E-5	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999971299482466	WITHOUT_CLASSIFICATION	2.8700517533392257E-6	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999794588865638	WITHOUT_CLASSIFICATION	2.054111343611089E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999800467754763	WITHOUT_CLASSIFICATION	1.9953224523735897E-5	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9999241554166018	WITHOUT_CLASSIFICATION	7.584458339813606E-5	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.999992217089957	WITHOUT_CLASSIFICATION	7.782910042999558E-6	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999865187706709	WITHOUT_CLASSIFICATION	1.34812293291755E-5	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.999965990872123	WITHOUT_CLASSIFICATION	3.4009127876931686E-5	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999892308535491	WITHOUT_CLASSIFICATION	1.0769146450910474E-5	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999961090830449	WITHOUT_CLASSIFICATION	3.890916955097257E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999814405126084	WITHOUT_CLASSIFICATION	1.8559487391578587E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999814405126084	WITHOUT_CLASSIFICATION	1.8559487391578587E-5	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999562805040352	WITHOUT_CLASSIFICATION	4.3719495964790104E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999807458914277	WITHOUT_CLASSIFICATION	1.9254108572283666E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999807458914277	WITHOUT_CLASSIFICATION	1.9254108572283666E-5	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999628518036022	WITHOUT_CLASSIFICATION	3.714819639776091E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9998762948046237	WITHOUT_CLASSIFICATION	1.237051953762316E-4	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999684387183778	WITHOUT_CLASSIFICATION	3.156128162219983E-5	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9998293002480297	WITHOUT_CLASSIFICATION	1.7069975197037118E-4	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9998810072987285	WITHOUT_CLASSIFICATION	1.1899270127140174E-4	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999834478934312	WITHOUT_CLASSIFICATION	1.6552106568794943E-5	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9997759611981064	WITHOUT_CLASSIFICATION	2.240388018935816E-4	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999887984607477	WITHOUT_CLASSIFICATION	1.1201539252199111E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999891051188238	WITHOUT_CLASSIFICATION	1.0894881176240476E-5	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999855731913947	WITHOUT_CLASSIFICATION	1.442680860519708E-5	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999898458135347	WITHOUT_CLASSIFICATION	1.0154186465364467E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9998527088413927	WITHOUT_CLASSIFICATION	1.4729115860730223E-4	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999794568824929	WITHOUT_CLASSIFICATION	2.0543117507090148E-5	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999947335441793	WITHOUT_CLASSIFICATION	5.266455820731E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999137018422339	WITHOUT_CLASSIFICATION	8.629815776607923E-5	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9990405422720431	WITHOUT_CLASSIFICATION	9.594577279569264E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999602627406394	WITHOUT_CLASSIFICATION	3.973725936059747E-5	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999922722992592	WITHOUT_CLASSIFICATION	7.727700740712E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999922722992592	WITHOUT_CLASSIFICATION	7.727700740712E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999948562513613	WITHOUT_CLASSIFICATION	5.1437486387206014E-6	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999317493609706	WITHOUT_CLASSIFICATION	6.825063902942892E-5	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999887668523022	WITHOUT_CLASSIFICATION	1.1233147697835454E-5	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999919329385241	WITHOUT_CLASSIFICATION	8.067061476021655E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999975113012383	WITHOUT_CLASSIFICATION	2.488698761747691E-6	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999957686276416	WITHOUT_CLASSIFICATION	4.231372358364511E-6	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999978721330544	WITHOUT_CLASSIFICATION	2.127866945710768E-6	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9999798925130589	WITHOUT_CLASSIFICATION	2.0107486941164107E-5	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999837860898755	WITHOUT_CLASSIFICATION	1.6213910124486387E-5	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999993591076292	WITHOUT_CLASSIFICATION	6.408923709306081E-7	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999753862611389	WITHOUT_CLASSIFICATION	2.4613738861124935E-5	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999856273357662	WITHOUT_CLASSIFICATION	1.4372664233863102E-5	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9998889301557202	WITHOUT_CLASSIFICATION	1.1106984427973811E-4	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999932781582528	WITHOUT_CLASSIFICATION	6.721841747190032E-6	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999853063718145	WITHOUT_CLASSIFICATION	1.4693628185610334E-5	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999963998727989	WITHOUT_CLASSIFICATION	3.6001272012357762E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999593807724372	WITHOUT_CLASSIFICATION	4.0619227562693656E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999873713310083	WITHOUT_CLASSIFICATION	1.2628668991689717E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999732485347934	WITHOUT_CLASSIFICATION	2.6751465206522578E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.999991076923872	WITHOUT_CLASSIFICATION	8.923076127917595E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999502083280506	WITHOUT_CLASSIFICATION	4.979167194946403E-5	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999908115192788	WITHOUT_CLASSIFICATION	9.188480721193774E-6	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999026155799065	WITHOUT_CLASSIFICATION	9.738442009356405E-5	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999987247628143	WITHOUT_CLASSIFICATION	1.2752371857312895E-6	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999995291919801	WITHOUT_CLASSIFICATION	4.7080801987167036E-7	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999131313916659	WITHOUT_CLASSIFICATION	8.686860833400652E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9999300326575177	WITHOUT_CLASSIFICATION	6.99673424823711E-5	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9997709129607993	WITHOUT_CLASSIFICATION	2.2908703920074212E-4	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999795784649769	WITHOUT_CLASSIFICATION	2.0421535023085053E-5	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999953719311121	WITHOUT_CLASSIFICATION	4.628068887865192E-6	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999452606379514	WITHOUT_CLASSIFICATION	5.473936204863458E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999963405109067	WITHOUT_CLASSIFICATION	3.659489093458169E-6	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9998321936595981	WITHOUT_CLASSIFICATION	1.6780634040190602E-4	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9999321141968165	WITHOUT_CLASSIFICATION	6.788580318345584E-5	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999715498867352	WITHOUT_CLASSIFICATION	2.8450113264802834E-5	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9998880778561566	WITHOUT_CLASSIFICATION	1.1192214384335467E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9997709129607993	WITHOUT_CLASSIFICATION	2.2908703920074212E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999991282475048	WITHOUT_CLASSIFICATION	8.717524953336152E-7	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999715498867352	WITHOUT_CLASSIFICATION	2.8450113264802834E-5	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999997176098027	WITHOUT_CLASSIFICATION	2.8239019736876326E-7	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999909587051963	WITHOUT_CLASSIFICATION	9.041294803667272E-6	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999958749691638	WITHOUT_CLASSIFICATION	4.125030836234044E-6	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999817117548464	WITHOUT_CLASSIFICATION	1.8288245153700405E-5	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999378320890498	WITHOUT_CLASSIFICATION	6.216791095007613E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999972891077511	WITHOUT_CLASSIFICATION	2.7108922489721583E-6	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999972891077511	WITHOUT_CLASSIFICATION	2.7108922489721583E-6	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999888347542305	WITHOUT_CLASSIFICATION	1.1165245769523745E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999996288638636	WITHOUT_CLASSIFICATION	3.711361364327681E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999854908773909	WITHOUT_CLASSIFICATION	1.4509122609262215E-5	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999854908773909	WITHOUT_CLASSIFICATION	1.4509122609262215E-5	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999986511198049	WITHOUT_CLASSIFICATION	1.348880195204029E-6	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9980530592770995	WITHOUT_CLASSIFICATION	0.001946940722900492	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9987265178333284	WITHOUT_CLASSIFICATION	0.0012734821666715369	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9987265178333284	WITHOUT_CLASSIFICATION	0.0012734821666715369	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999417791203673	WITHOUT_CLASSIFICATION	5.8220879632714915E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9998968710464422	WITHOUT_CLASSIFICATION	1.0312895355778557E-4	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999986569109237	WITHOUT_CLASSIFICATION	1.3430890763351918E-6	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999991095884889	WITHOUT_CLASSIFICATION	8.904115110126332E-7	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999936259604821	WITHOUT_CLASSIFICATION	6.3740395179262055E-6	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999334216317778	WITHOUT_CLASSIFICATION	6.657836822219343E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999991083181178	WITHOUT_CLASSIFICATION	8.916818820765444E-7	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999890828448459	WITHOUT_CLASSIFICATION	1.0917155154208899E-5	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999761654193068	WITHOUT_CLASSIFICATION	2.383458069320968E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999661400407316	WITHOUT_CLASSIFICATION	3.385995926830147E-5	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999669430552887	WITHOUT_CLASSIFICATION	3.305694471144911E-5	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999705903435832	WITHOUT_CLASSIFICATION	2.9409656416927625E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999980556887439	WITHOUT_CLASSIFICATION	1.9443112560551773E-6	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999869360273044	WITHOUT_CLASSIFICATION	1.3063972695532435E-5	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999486054387692	WITHOUT_CLASSIFICATION	5.1394561230794236E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999422116391817	WITHOUT_CLASSIFICATION	5.77883608183417E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999747021937981	WITHOUT_CLASSIFICATION	2.5297806201921884E-5	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999805607478413	WITHOUT_CLASSIFICATION	1.9439252158712918E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999912665776974	WITHOUT_CLASSIFICATION	8.733422302506745E-6	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999949718588375	WITHOUT_CLASSIFICATION	5.028141162553325E-6	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999786672150802	WITHOUT_CLASSIFICATION	2.133278491977111E-5	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999942630107734	WITHOUT_CLASSIFICATION	5.736989226585215E-6	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999857338119502	WITHOUT_CLASSIFICATION	1.4266188049695216E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9998461225892485	WITHOUT_CLASSIFICATION	1.538774107515488E-4	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9998812185469067	WITHOUT_CLASSIFICATION	1.1878145309327904E-4	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9998877009865995	WITHOUT_CLASSIFICATION	1.1229901340041266E-4	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999987648068736	WITHOUT_CLASSIFICATION	1.235193126447355E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9998949062565621	WITHOUT_CLASSIFICATION	1.0509374343793357E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999864976275259	WITHOUT_CLASSIFICATION	1.3502372474140612E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999864976275259	WITHOUT_CLASSIFICATION	1.3502372474140612E-5	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999889597979176	WITHOUT_CLASSIFICATION	1.1040202082384364E-5	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999926363471969	WITHOUT_CLASSIFICATION	7.363652803085536E-6	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9996968739455189	WITHOUT_CLASSIFICATION	3.0312605448111604E-4	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9999863687651237	WITHOUT_CLASSIFICATION	1.3631234876393378E-5	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999690373900268	WITHOUT_CLASSIFICATION	3.096260997317214E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999653861943713	WITHOUT_CLASSIFICATION	3.461380562866917E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999948748407926	WITHOUT_CLASSIFICATION	5.125159207373113E-6	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999919253936432	WITHOUT_CLASSIFICATION	8.074606356809871E-6	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999928621061749	WITHOUT_CLASSIFICATION	7.137893825094226E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999967264625138	WITHOUT_CLASSIFICATION	3.2735374862016107E-6	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.999992675598386	WITHOUT_CLASSIFICATION	7.324401614020578E-6	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999407266709173	WITHOUT_CLASSIFICATION	5.927332908284435E-5	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999816677387124	WITHOUT_CLASSIFICATION	1.8332261287542773E-5	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999990813801801	WITHOUT_CLASSIFICATION	9.186198199387833E-7	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999936802985663	WITHOUT_CLASSIFICATION	6.31970143370847E-6	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999885195025165	WITHOUT_CLASSIFICATION	1.1480497483329615E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.999996660225242	WITHOUT_CLASSIFICATION	3.339774758002433E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999967759217065	WITHOUT_CLASSIFICATION	3.2240782934624966E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999270754893259	WITHOUT_CLASSIFICATION	7.292451067409128E-5	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999771810389643	WITHOUT_CLASSIFICATION	2.2818961035732992E-5	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999757074572335	WITHOUT_CLASSIFICATION	2.429254276636134E-5	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999510540442222	WITHOUT_CLASSIFICATION	4.8945955777824344E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999920656321445	WITHOUT_CLASSIFICATION	7.934367855552028E-6	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999979465894127	WITHOUT_CLASSIFICATION	2.053410587406074E-6	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.999993550977096	WITHOUT_CLASSIFICATION	6.449022904038598E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999699947473919	WITHOUT_CLASSIFICATION	3.0005252607992675E-5	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999965710146373	WITHOUT_CLASSIFICATION	3.4289853626744633E-6	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.999960309521138	WITHOUT_CLASSIFICATION	3.9690478861890985E-5	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.999945222988838	WITHOUT_CLASSIFICATION	5.477701116191484E-5	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.999983437240786	WITHOUT_CLASSIFICATION	1.6562759213968388E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999139310905643	WITHOUT_CLASSIFICATION	8.606890943577596E-5	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999897064340502	WITHOUT_CLASSIFICATION	1.029356594994154E-5	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999874790116092	WITHOUT_CLASSIFICATION	1.2520988390779343E-5	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999888669831047	WITHOUT_CLASSIFICATION	1.1133016895290075E-5	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999012113022544	WITHOUT_CLASSIFICATION	9.878869774562915E-5	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.999740226225167	WITHOUT_CLASSIFICATION	2.597737748330582E-4	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999494149817607	WITHOUT_CLASSIFICATION	5.058501823926871E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999845917484638	WITHOUT_CLASSIFICATION	1.5408251536174097E-5	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999991477239363	WITHOUT_CLASSIFICATION	8.522760638653963E-7	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999884075564442	WITHOUT_CLASSIFICATION	1.1592443555732383E-5	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9998903323266362	WITHOUT_CLASSIFICATION	1.0966767336384308E-4	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999927275544722	WITHOUT_CLASSIFICATION	7.272445527827467E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999993684138446	WITHOUT_CLASSIFICATION	6.315861552937871E-7	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999993684138446	WITHOUT_CLASSIFICATION	6.315861552937871E-7	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999506288114645	WITHOUT_CLASSIFICATION	4.937118853550381E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999958390396083	WITHOUT_CLASSIFICATION	4.16096039167039E-6	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999921609034402	WITHOUT_CLASSIFICATION	7.839096559781825E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999581596384514	WITHOUT_CLASSIFICATION	4.184036154873572E-5	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999841978105067	WITHOUT_CLASSIFICATION	1.5802189493313763E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.99997427999539	WITHOUT_CLASSIFICATION	2.572000460990827E-5	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999885875025896	WITHOUT_CLASSIFICATION	1.141249741039682E-5	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.999989383210241	WITHOUT_CLASSIFICATION	1.06167897590601E-5	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9996696651054184	WITHOUT_CLASSIFICATION	3.303348945816672E-4	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9998842046926228	WITHOUT_CLASSIFICATION	1.1579530737709758E-4	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999807078972465	WITHOUT_CLASSIFICATION	1.92921027535078E-5	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.999945602318824	WITHOUT_CLASSIFICATION	5.439768117586698E-5	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999438186787996	WITHOUT_CLASSIFICATION	5.6181321200559487E-5	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999903104532263	WITHOUT_CLASSIFICATION	9.689546773715544E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999807682874778	WITHOUT_CLASSIFICATION	1.9231712522246096E-5	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999062240776323	WITHOUT_CLASSIFICATION	9.377592236766193E-5	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999827113215085	WITHOUT_CLASSIFICATION	1.728867849142656E-5	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.999884202609699	WITHOUT_CLASSIFICATION	1.1579739030096242E-4	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999840603310777	WITHOUT_CLASSIFICATION	1.593966892226153E-5	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999250986513157	WITHOUT_CLASSIFICATION	7.490134868423384E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999887574224774	WITHOUT_CLASSIFICATION	1.1242577522648687E-5	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999630316198448	WITHOUT_CLASSIFICATION	3.6968380155198705E-5	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999742160097003	WITHOUT_CLASSIFICATION	2.578399029971239E-5	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999779316155314	WITHOUT_CLASSIFICATION	2.2068384468625206E-5	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999915930076227	WITHOUT_CLASSIFICATION	8.406992377209163E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999902668229763	WITHOUT_CLASSIFICATION	9.73317702369826E-6	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.999994389840995	WITHOUT_CLASSIFICATION	5.610159005060139E-6	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999810921025225	WITHOUT_CLASSIFICATION	1.890789747751648E-5	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999985335705709	WITHOUT_CLASSIFICATION	1.4664294290618075E-6	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999818855686556	WITHOUT_CLASSIFICATION	1.81144313443254E-5	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999737988075154	WITHOUT_CLASSIFICATION	2.620119248456006E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999984418746237	WITHOUT_CLASSIFICATION	1.5581253762264874E-6	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.99986555701441	WITHOUT_CLASSIFICATION	1.344429855898972E-4	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999897622796489	WITHOUT_CLASSIFICATION	1.0237720351078528E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999845917484638	WITHOUT_CLASSIFICATION	1.5408251536174097E-5	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999971143781876	WITHOUT_CLASSIFICATION	2.8856218123917268E-6	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999938784647675	WITHOUT_CLASSIFICATION	6.1215352324804715E-6	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999938784647675	WITHOUT_CLASSIFICATION	6.1215352324804715E-6	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999944028627924	WITHOUT_CLASSIFICATION	5.597137207594691E-6	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999962472928481	WITHOUT_CLASSIFICATION	3.752707151864346E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999902179106269	WITHOUT_CLASSIFICATION	9.782089373056597E-6	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999892270068196	WITHOUT_CLASSIFICATION	1.0772993180481917E-5	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999889655194586	WITHOUT_CLASSIFICATION	1.1034480541279269E-5	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999895758853202	WITHOUT_CLASSIFICATION	1.0424114679842513E-5	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999863863028382	WITHOUT_CLASSIFICATION	1.3613697161879384E-5	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999899685761544	WITHOUT_CLASSIFICATION	1.0031423845704354E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999862441280374	WITHOUT_CLASSIFICATION	1.3755871962596794E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999826124148463	WITHOUT_CLASSIFICATION	1.7387585153636288E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999867623291203	WITHOUT_CLASSIFICATION	1.3237670879674997E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999845658086486	WITHOUT_CLASSIFICATION	1.5434191351471443E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999871893957082	WITHOUT_CLASSIFICATION	1.281060429176607E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999948954959819	WITHOUT_CLASSIFICATION	5.104504018090985E-6	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999865316289116	WITHOUT_CLASSIFICATION	1.346837108846756E-5	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999982851945539	WITHOUT_CLASSIFICATION	1.714805445977271E-6	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.999992553090769	WITHOUT_CLASSIFICATION	7.44690923107117E-6	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999905492675963	WITHOUT_CLASSIFICATION	9.45073240363985E-6	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999918548670969	WITHOUT_CLASSIFICATION	8.145132903177654E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999897044402478	WITHOUT_CLASSIFICATION	1.0295559752090655E-5	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.999992262365201	WITHOUT_CLASSIFICATION	7.737634798998991E-6	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999858913697034	WITHOUT_CLASSIFICATION	1.410863029671933E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999965690702013	WITHOUT_CLASSIFICATION	3.4309297986975083E-6	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999702744187502	WITHOUT_CLASSIFICATION	2.9725581249743467E-5	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999852663746329	WITHOUT_CLASSIFICATION	1.4733625367013127E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999986548035543	WITHOUT_CLASSIFICATION	1.345196445623722E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999899165009287	WITHOUT_CLASSIFICATION	1.0083499071311494E-5	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999835656183054	WITHOUT_CLASSIFICATION	1.6434381694673534E-5	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999861543021495	WITHOUT_CLASSIFICATION	1.384569785049362E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999654670048671	WITHOUT_CLASSIFICATION	3.4532995132956955E-5	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999816386229456	WITHOUT_CLASSIFICATION	1.836137705435601E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999849980011427	WITHOUT_CLASSIFICATION	1.5001998857191746E-5	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999529980038292	WITHOUT_CLASSIFICATION	4.7001996170705054E-5	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999923525131648	WITHOUT_CLASSIFICATION	7.647486835146723E-6	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999960874287389	WITHOUT_CLASSIFICATION	3.91257126112256E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999737215648185	WITHOUT_CLASSIFICATION	2.6278435181520683E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999831759589867	WITHOUT_CLASSIFICATION	1.6824041013364712E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999986548035543	WITHOUT_CLASSIFICATION	1.345196445623722E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999899165009287	WITHOUT_CLASSIFICATION	1.0083499071311494E-5	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999835656183054	WITHOUT_CLASSIFICATION	1.6434381694673534E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999654670048671	WITHOUT_CLASSIFICATION	3.4532995132956955E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999984240966318	WITHOUT_CLASSIFICATION	1.5759033682546486E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.999992938985956	WITHOUT_CLASSIFICATION	7.0610140440237054E-6	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999512984383214	WITHOUT_CLASSIFICATION	4.870156167857004E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999962327668863	WITHOUT_CLASSIFICATION	3.7672331137117416E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999358517784418	WITHOUT_CLASSIFICATION	6.414822155817178E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999370555505929	WITHOUT_CLASSIFICATION	6.294444940709595E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.999979731442298	WITHOUT_CLASSIFICATION	2.0268557701966402E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999726777695115	WITHOUT_CLASSIFICATION	2.73222304884851E-5	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999935358168148	WITHOUT_CLASSIFICATION	6.4641831850839835E-6	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999816169379003	WITHOUT_CLASSIFICATION	1.838306209968536E-5	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999863730051336	WITHOUT_CLASSIFICATION	1.362699486636236E-5	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999993577139893	WITHOUT_CLASSIFICATION	6.422860107763553E-7	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999757790190255	WITHOUT_CLASSIFICATION	2.4220980974522623E-5	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999791528307005	WITHOUT_CLASSIFICATION	2.0847169299475916E-5	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999662388183906	WITHOUT_CLASSIFICATION	3.3761181609342525E-5	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999642007573903	WITHOUT_CLASSIFICATION	3.579924260957203E-5	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999925056125228	WITHOUT_CLASSIFICATION	7.494387477176326E-6	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999965389806058	WITHOUT_CLASSIFICATION	3.4610193942681412E-6	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.999999130599489	WITHOUT_CLASSIFICATION	8.694005110991772E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999831759589867	WITHOUT_CLASSIFICATION	1.6824041013364712E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.999992938985956	WITHOUT_CLASSIFICATION	7.0610140440237054E-6	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999512984383214	WITHOUT_CLASSIFICATION	4.870156167857004E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999358517784418	WITHOUT_CLASSIFICATION	6.414822155817178E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999370555505929	WITHOUT_CLASSIFICATION	6.294444940709595E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.999979731442298	WITHOUT_CLASSIFICATION	2.0268557701966402E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999726777695115	WITHOUT_CLASSIFICATION	2.73222304884851E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999942913588189	WITHOUT_CLASSIFICATION	5.70864118112204E-6	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999915798544771	WITHOUT_CLASSIFICATION	8.420145522917844E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999874936494406	WITHOUT_CLASSIFICATION	1.2506350559457812E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999994687620924	WITHOUT_CLASSIFICATION	5.312379074465154E-7	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999951750511098	WITHOUT_CLASSIFICATION	4.824948890242411E-6	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999951750511098	WITHOUT_CLASSIFICATION	4.824948890242411E-6	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999937584516242	WITHOUT_CLASSIFICATION	6.2415483758041995E-6	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999941679306295	WITHOUT_CLASSIFICATION	5.832069370557052E-6	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999900475257415	WITHOUT_CLASSIFICATION	9.952474258512674E-6	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999698582603936	WITHOUT_CLASSIFICATION	3.0141739606354193E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999823543423674	WITHOUT_CLASSIFICATION	1.7645657632636144E-5	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999773703505119	WITHOUT_CLASSIFICATION	2.2629649488046474E-5	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999833132942052	WITHOUT_CLASSIFICATION	1.668670579478089E-5	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9998917966740755	WITHOUT_CLASSIFICATION	1.0820332592457973E-4	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999344417535879	WITHOUT_CLASSIFICATION	6.55582464120578E-5	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999797425034177	WITHOUT_CLASSIFICATION	2.0257496582355178E-5	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999987488929577	WITHOUT_CLASSIFICATION	1.2511070422146766E-6	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.999984929915253	WITHOUT_CLASSIFICATION	1.5070084747037378E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999577321719727	WITHOUT_CLASSIFICATION	4.2267828027299945E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999740726376312	WITHOUT_CLASSIFICATION	2.5927362368811492E-5	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999906860128455	WITHOUT_CLASSIFICATION	9.313987154479252E-6	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999952170736313	WITHOUT_CLASSIFICATION	4.782926368752414E-6	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999817104610663	WITHOUT_CLASSIFICATION	1.8289538933688337E-5	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999121894544661	WITHOUT_CLASSIFICATION	8.781054553395769E-5	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999970862703081	WITHOUT_CLASSIFICATION	2.913729691763872E-6	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999976498954809	WITHOUT_CLASSIFICATION	2.35010451913324E-6	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9999985250835349	WITHOUT_CLASSIFICATION	1.4749164650398654E-6	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999875634144884	WITHOUT_CLASSIFICATION	1.2436585511640832E-5	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999884272095976	WITHOUT_CLASSIFICATION	1.1572790402385082E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9996481380003386	WITHOUT_CLASSIFICATION	3.5186199966142484E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999921526399154	WITHOUT_CLASSIFICATION	7.847360084705456E-6	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999956935979365	WITHOUT_CLASSIFICATION	4.306402063510367E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999956280249563	WITHOUT_CLASSIFICATION	4.371975043717522E-6	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999961874947487	WITHOUT_CLASSIFICATION	3.812505251171542E-6	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9998907355336593	WITHOUT_CLASSIFICATION	1.0926446634082293E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999921526399154	WITHOUT_CLASSIFICATION	7.847360084705456E-6	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999956935979365	WITHOUT_CLASSIFICATION	4.306402063510367E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999740726376312	WITHOUT_CLASSIFICATION	2.5927362368811492E-5	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999887314577739	WITHOUT_CLASSIFICATION	1.126854222603292E-5	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999692044438409	WITHOUT_CLASSIFICATION	3.079555615919629E-5	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999483095236191	WITHOUT_CLASSIFICATION	5.169047638087883E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999912067151143	WITHOUT_CLASSIFICATION	8.793284885577368E-6	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999843353190725	WITHOUT_CLASSIFICATION	1.566468092759407E-5	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999937097317757	WITHOUT_CLASSIFICATION	6.290268224342279E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9996189848301908	WITHOUT_CLASSIFICATION	3.810151698091629E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999522263217507	WITHOUT_CLASSIFICATION	4.77736782491974E-5	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.999999492959472	WITHOUT_CLASSIFICATION	5.070405280263573E-7	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999513129366565	WITHOUT_CLASSIFICATION	4.86870633433912E-5	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9999971047755778	WITHOUT_CLASSIFICATION	2.895224422197368E-6	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999935916175617	WITHOUT_CLASSIFICATION	6.4083824382320256E-6	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999965374570626	WITHOUT_CLASSIFICATION	3.462542937457039E-6	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.999998697763587	WITHOUT_CLASSIFICATION	1.3022364130919127E-6	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999944613680821	WITHOUT_CLASSIFICATION	5.538631917905789E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999897718461986	WITHOUT_CLASSIFICATION	1.0228153801269205E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.999993687185057	WITHOUT_CLASSIFICATION	6.312814943034989E-6	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999756009249382	WITHOUT_CLASSIFICATION	2.439907506179124E-5	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999995443274142	WITHOUT_CLASSIFICATION	4.556725857648492E-7	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.999995728092442	WITHOUT_CLASSIFICATION	4.271907558025015E-6	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999956227904384	WITHOUT_CLASSIFICATION	4.377209561638141E-6	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999720850661816	WITHOUT_CLASSIFICATION	2.7914933818308013E-5	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999970061763548	WITHOUT_CLASSIFICATION	2.9938236452869173E-6	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.999998397687882	WITHOUT_CLASSIFICATION	1.6023121180164267E-6	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999986014140567	WITHOUT_CLASSIFICATION	1.3985859432412932E-6	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999987173253013	WITHOUT_CLASSIFICATION	1.2826746986667347E-6	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999620701194868	WITHOUT_CLASSIFICATION	3.79298805132064E-5	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999661617967621	WITHOUT_CLASSIFICATION	3.383820323780888E-5	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999961335748228	WITHOUT_CLASSIFICATION	3.866425177157379E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9999880275432599	WITHOUT_CLASSIFICATION	1.197245674008305E-5	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999948794239838	WITHOUT_CLASSIFICATION	5.12057601626116E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999727339286058	WITHOUT_CLASSIFICATION	2.7266071394163594E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999727339286058	WITHOUT_CLASSIFICATION	2.7266071394163594E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999577321719727	WITHOUT_CLASSIFICATION	4.2267828027299945E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999985255505934	WITHOUT_CLASSIFICATION	1.474449406625014E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999352734235006	WITHOUT_CLASSIFICATION	6.472657649933775E-5	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999887359424976	WITHOUT_CLASSIFICATION	1.1264057502470216E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999933373737289	WITHOUT_CLASSIFICATION	6.662626271203233E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999933373737289	WITHOUT_CLASSIFICATION	6.662626271203233E-6	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999912546244906	WITHOUT_CLASSIFICATION	8.745375509370945E-6	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999584918181147	WITHOUT_CLASSIFICATION	4.150818188527275E-5	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999966889755145	WITHOUT_CLASSIFICATION	3.311024485418092E-6	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999962786491509	WITHOUT_CLASSIFICATION	3.7213508490812232E-6	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999986966627431	WITHOUT_CLASSIFICATION	1.3033372568115369E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.999999909859463	WITHOUT_CLASSIFICATION	9.014053694490395E-8	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999896059006209	WITHOUT_CLASSIFICATION	1.0394099378986888E-5	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.999998006331233	WITHOUT_CLASSIFICATION	1.993668766948369E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999802891275893	WITHOUT_CLASSIFICATION	1.971087241069779E-5	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.999996169098116	WITHOUT_CLASSIFICATION	3.830901884082537E-6	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999889982597941	WITHOUT_CLASSIFICATION	1.1001740205912076E-5	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.999965771156681	WITHOUT_CLASSIFICATION	3.422884331903305E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.999769701213467	WITHOUT_CLASSIFICATION	2.3029878653307425E-4	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999867154479021	WITHOUT_CLASSIFICATION	1.3284552097964065E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9996456105473102	WITHOUT_CLASSIFICATION	3.5438945268987407E-4	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999101479419513	WITHOUT_CLASSIFICATION	8.985205804867313E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999963095975529	WITHOUT_CLASSIFICATION	3.690402447139708E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999963095975529	WITHOUT_CLASSIFICATION	3.690402447139708E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999991121170493	WITHOUT_CLASSIFICATION	8.878829507325968E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999991121170493	WITHOUT_CLASSIFICATION	8.878829507325968E-7	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999914895946828	WITHOUT_CLASSIFICATION	8.510405317255517E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.999953901709287	WITHOUT_CLASSIFICATION	4.6098290712959224E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999988061715673	WITHOUT_CLASSIFICATION	1.1938284326877468E-6	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999951324107821	WITHOUT_CLASSIFICATION	4.867589217956901E-6	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.999999326944579	WITHOUT_CLASSIFICATION	6.730554209571923E-7	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999801877148141	WITHOUT_CLASSIFICATION	1.9812285185911693E-5	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999978097203944	WITHOUT_CLASSIFICATION	2.190279605554103E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.999965771156681	WITHOUT_CLASSIFICATION	3.422884331903305E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.999769701213467	WITHOUT_CLASSIFICATION	2.3029878653307425E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9996456105473102	WITHOUT_CLASSIFICATION	3.5438945268987407E-4	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999988554914959	WITHOUT_CLASSIFICATION	1.1445085041097072E-6	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999985238342747	WITHOUT_CLASSIFICATION	1.4761657252919359E-6	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9999988708242632	WITHOUT_CLASSIFICATION	1.1291757368136937E-6	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999953574970692	WITHOUT_CLASSIFICATION	4.642502930790401E-6	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999987445765073	WITHOUT_CLASSIFICATION	1.2554234927463696E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999977568217092	WITHOUT_CLASSIFICATION	2.2431782908124793E-6	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999657018742966	WITHOUT_CLASSIFICATION	3.429812570339662E-5	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.999971509928561	WITHOUT_CLASSIFICATION	2.8490071439036835E-5	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9998280368702557	WITHOUT_CLASSIFICATION	1.7196312974425922E-4	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999987375012765	WITHOUT_CLASSIFICATION	1.2624987234265858E-6	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999950447658236	WITHOUT_CLASSIFICATION	4.95523417642118E-6	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9999773163660073	WITHOUT_CLASSIFICATION	2.2683633992705532E-5	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999715078460205	WITHOUT_CLASSIFICATION	2.849215397940996E-5	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9999865170459453	WITHOUT_CLASSIFICATION	1.3482954054727661E-5	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9998205716203311	WITHOUT_CLASSIFICATION	1.7942837966899183E-4	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.999996005183786	WITHOUT_CLASSIFICATION	3.99481621406484E-6	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999692152358473	WITHOUT_CLASSIFICATION	3.078476415269066E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999993943569923	WITHOUT_CLASSIFICATION	6.056430076862282E-7	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999841311231487	WITHOUT_CLASSIFICATION	1.5868876851261706E-5	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.999997478430624	WITHOUT_CLASSIFICATION	2.5215693759011796E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999980012836498	WITHOUT_CLASSIFICATION	1.9987163501989962E-6	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.999994164604357	WITHOUT_CLASSIFICATION	5.835395642967458E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999800095965573	WITHOUT_CLASSIFICATION	1.9990403442676517E-5	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999981127367009	WITHOUT_CLASSIFICATION	1.88726329914845E-6	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.999998912856439	WITHOUT_CLASSIFICATION	1.0871435608922941E-6	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999977237011812	WITHOUT_CLASSIFICATION	2.276298818746353E-6	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999919226603552	WITHOUT_CLASSIFICATION	8.077339644782948E-6	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999910546972073	WITHOUT_CLASSIFICATION	8.945302792699297E-6	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999961985387409	WITHOUT_CLASSIFICATION	3.801461259190243E-6	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999861316886626	WITHOUT_CLASSIFICATION	1.3868311337349563E-5	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9998836027463056	WITHOUT_CLASSIFICATION	1.1639725369442478E-4	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999773921826236	WITHOUT_CLASSIFICATION	2.2607817376492366E-5	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999977722335316	WITHOUT_CLASSIFICATION	2.2277664683525787E-6	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999948934466074	WITHOUT_CLASSIFICATION	5.106553392534127E-6	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9999960023431893	WITHOUT_CLASSIFICATION	3.997656810637501E-6	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999877189927591	WITHOUT_CLASSIFICATION	1.2281007241033099E-5	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999783530451141	WITHOUT_CLASSIFICATION	2.164695488595571E-5	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.999998153886126	WITHOUT_CLASSIFICATION	1.8461138740935094E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9998980465123786	WITHOUT_CLASSIFICATION	1.0195348762150328E-4	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999833256826797	WITHOUT_CLASSIFICATION	1.6674317320359526E-5	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.999998512655872	WITHOUT_CLASSIFICATION	1.487344127963192E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999352734235006	WITHOUT_CLASSIFICATION	6.472657649933775E-5	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999783530451141	WITHOUT_CLASSIFICATION	2.164695488595571E-5	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999830157827864	WITHOUT_CLASSIFICATION	1.698421721365363E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999972055021	WITHOUT_CLASSIFICATION	2.7944979000082138E-6	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999960302606591	WITHOUT_CLASSIFICATION	3.969739340974605E-6	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999827583137727	WITHOUT_CLASSIFICATION	1.7241686227393658E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999827583137727	WITHOUT_CLASSIFICATION	1.7241686227393658E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999976706661811	WITHOUT_CLASSIFICATION	2.3293338189144E-6	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999972524713898	WITHOUT_CLASSIFICATION	2.747528610164319E-6	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999954090402577	WITHOUT_CLASSIFICATION	4.5909597422799686E-6	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999920130469033	WITHOUT_CLASSIFICATION	7.986953096695185E-6	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999978237106207	WITHOUT_CLASSIFICATION	2.1762893792998547E-6	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999729990285519	WITHOUT_CLASSIFICATION	2.7000971448157345E-5	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.999999775606865	WITHOUT_CLASSIFICATION	2.2439313495020249E-7	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999955158361715	WITHOUT_CLASSIFICATION	4.484163828466522E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999916539072922	WITHOUT_CLASSIFICATION	8.34609270776963E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999916539072922	WITHOUT_CLASSIFICATION	8.34609270776963E-6	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999843722455399	WITHOUT_CLASSIFICATION	1.562775446003325E-5	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999779763573422	WITHOUT_CLASSIFICATION	2.2023642657769736E-5	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999964406270322	WITHOUT_CLASSIFICATION	3.5593729677003455E-6	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9998571013939155	WITHOUT_CLASSIFICATION	1.4289860608450355E-4	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9998250500674131	WITHOUT_CLASSIFICATION	1.7494993258689427E-4	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999922851178861	WITHOUT_CLASSIFICATION	7.714882113868186E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999997263902428	WITHOUT_CLASSIFICATION	2.736097571715749E-7	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999958996350413	WITHOUT_CLASSIFICATION	4.100364958747209E-6	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999873907499491	WITHOUT_CLASSIFICATION	1.260925005080583E-5	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999617423554039	WITHOUT_CLASSIFICATION	3.825764459615403E-5	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999906875752652	WITHOUT_CLASSIFICATION	9.312424734831756E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999737314001894	WITHOUT_CLASSIFICATION	2.626859981053076E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999910642297698	WITHOUT_CLASSIFICATION	8.935770230305883E-6	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999166021559265	WITHOUT_CLASSIFICATION	8.339784407352828E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999166021559265	WITHOUT_CLASSIFICATION	8.339784407352828E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999606650397533	WITHOUT_CLASSIFICATION	3.933496024668441E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999726777695115	WITHOUT_CLASSIFICATION	2.73222304884851E-5	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.999983793003086	WITHOUT_CLASSIFICATION	1.620699691397905E-5	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999950637912225	WITHOUT_CLASSIFICATION	4.936208777515282E-6	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999572034671297	WITHOUT_CLASSIFICATION	4.279653287031706E-5	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999970216832156	WITHOUT_CLASSIFICATION	2.978316784416454E-6	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999727673867147	WITHOUT_CLASSIFICATION	2.723261328529184E-5	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999818492974436	WITHOUT_CLASSIFICATION	1.815070255646727E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999973005125568	WITHOUT_CLASSIFICATION	2.6994874431820588E-6	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999568489486721	WITHOUT_CLASSIFICATION	4.315105132782984E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9998992057127055	WITHOUT_CLASSIFICATION	1.0079428729438916E-4	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.999986142494962	WITHOUT_CLASSIFICATION	1.385750503804497E-5	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999989695507758	WITHOUT_CLASSIFICATION	1.0304492241992215E-6	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999962864515998	WITHOUT_CLASSIFICATION	3.7135484001562E-6	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999889192007332	WITHOUT_CLASSIFICATION	1.1080799266783563E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999619181336555	WITHOUT_CLASSIFICATION	3.808186634436292E-5	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999993086732019	WITHOUT_CLASSIFICATION	6.913267981635673E-7	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999920115627084	WITHOUT_CLASSIFICATION	7.988437291563237E-6	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.999935185857028	WITHOUT_CLASSIFICATION	6.481414297194135E-5	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.999994548477228	WITHOUT_CLASSIFICATION	5.451522772041636E-6	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999777385917017	WITHOUT_CLASSIFICATION	2.2261408298326405E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999799517742759	WITHOUT_CLASSIFICATION	2.0048225724157022E-5	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999888875010752	WITHOUT_CLASSIFICATION	1.1112498924854276E-5	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9999952739734376	WITHOUT_CLASSIFICATION	4.726026562374018E-6	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.999998230251821	WITHOUT_CLASSIFICATION	1.76974817904895E-6	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9999878659965372	WITHOUT_CLASSIFICATION	1.2134003462745042E-5	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999971710204304	WITHOUT_CLASSIFICATION	2.828979569572509E-6	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999849275274821	WITHOUT_CLASSIFICATION	1.507247251790695E-5	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999500397908758	WITHOUT_CLASSIFICATION	4.996020912420703E-5	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.999857803351282	WITHOUT_CLASSIFICATION	1.4219664871786779E-4	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999976692465763	WITHOUT_CLASSIFICATION	2.3307534236915227E-6	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.999988242805632	WITHOUT_CLASSIFICATION	1.1757194368037288E-5	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999840154580958	WITHOUT_CLASSIFICATION	1.598454190413316E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999977640162945	WITHOUT_CLASSIFICATION	2.235983705559924E-6	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999956162660746	WITHOUT_CLASSIFICATION	4.38373392540191E-6	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999926967850107	WITHOUT_CLASSIFICATION	7.303214989403422E-6	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999921896622634	WITHOUT_CLASSIFICATION	7.810337736536405E-6	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999578655238597	WITHOUT_CLASSIFICATION	4.213447614029574E-5	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999565378625865	WITHOUT_CLASSIFICATION	4.34621374134277E-5	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.999953176871823	WITHOUT_CLASSIFICATION	4.682312817700535E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999690229082074	WITHOUT_CLASSIFICATION	3.0977091792632006E-5	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999911012527696	WITHOUT_CLASSIFICATION	8.898747230341564E-6	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.999997374533174	WITHOUT_CLASSIFICATION	2.6254668260249555E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999961050701079	WITHOUT_CLASSIFICATION	3.894929892053735E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9993625338672703	WITHOUT_CLASSIFICATION	6.374661327296462E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999968135724948	WITHOUT_CLASSIFICATION	3.1864275052339884E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999869670319746	WITHOUT_CLASSIFICATION	1.3032968025351658E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999987938212601	WITHOUT_CLASSIFICATION	1.2061787398035952E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999946744231667	WITHOUT_CLASSIFICATION	5.325576833266166E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999921526399154	WITHOUT_CLASSIFICATION	7.847360084705456E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999921526399154	WITHOUT_CLASSIFICATION	7.847360084705456E-6	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999991159327116	WITHOUT_CLASSIFICATION	8.840672882977762E-7	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9998578359072043	WITHOUT_CLASSIFICATION	1.42164092795647E-4	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999974010678179	WITHOUT_CLASSIFICATION	2.5989321821250562E-6	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9999947638378539	WITHOUT_CLASSIFICATION	5.2361621461378415E-6	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999993103752033	WITHOUT_CLASSIFICATION	6.896247966718518E-7	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999988640282009	WITHOUT_CLASSIFICATION	1.1359717990791363E-6	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999871802213253	WITHOUT_CLASSIFICATION	1.2819778674786783E-5	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.999996863270832	WITHOUT_CLASSIFICATION	3.136729167994538E-6	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999940359067642	WITHOUT_CLASSIFICATION	5.964093235915799E-6	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999915837107414	WITHOUT_CLASSIFICATION	8.416289258657273E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999572465359254	WITHOUT_CLASSIFICATION	4.275346407461817E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999572465359254	WITHOUT_CLASSIFICATION	4.275346407461817E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999572465359254	WITHOUT_CLASSIFICATION	4.275346407461817E-5	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999980389400119	WITHOUT_CLASSIFICATION	1.961059988155111E-6	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999927656271818	WITHOUT_CLASSIFICATION	7.2343728181512394E-6	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999406070923951	WITHOUT_CLASSIFICATION	5.9392907604983224E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.99998429666981	WITHOUT_CLASSIFICATION	1.5703330190007743E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.99998429666981	WITHOUT_CLASSIFICATION	1.5703330190007743E-5	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.999996981559028	WITHOUT_CLASSIFICATION	3.0184409718804995E-6	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999799729595182	WITHOUT_CLASSIFICATION	2.0027040481731594E-5	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.999975940955479	WITHOUT_CLASSIFICATION	2.4059044520968212E-5	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999940842943016	WITHOUT_CLASSIFICATION	5.915705698341471E-6	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999474710732931	WITHOUT_CLASSIFICATION	5.252892670693786E-5	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999914569029604	WITHOUT_CLASSIFICATION	8.543097039449277E-6	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999581022970996	WITHOUT_CLASSIFICATION	4.189770290035636E-5	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999848150366415	WITHOUT_CLASSIFICATION	1.5184963358451822E-5	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999884235450516	WITHOUT_CLASSIFICATION	1.1576454948498862E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999870951084345	WITHOUT_CLASSIFICATION	1.2904891565492119E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999870951084345	WITHOUT_CLASSIFICATION	1.2904891565492119E-5	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999677281520918	WITHOUT_CLASSIFICATION	3.227184790822949E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999807969243494	WITHOUT_CLASSIFICATION	1.9203075650561142E-5	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999879891675405	WITHOUT_CLASSIFICATION	1.2010832459438739E-5	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.999950854422601	WITHOUT_CLASSIFICATION	4.9145577399003546E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999523096031251	WITHOUT_CLASSIFICATION	4.76903968750005E-5	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9998425903829267	WITHOUT_CLASSIFICATION	1.5740961707335664E-4	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999068648855369	WITHOUT_CLASSIFICATION	9.313511446312766E-5	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9998796560339983	WITHOUT_CLASSIFICATION	1.2034396600159463E-4	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9998787268594186	WITHOUT_CLASSIFICATION	1.2127314058151853E-4	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9998033007334077	WITHOUT_CLASSIFICATION	1.966992665923465E-4	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.999999066237657	WITHOUT_CLASSIFICATION	9.337623430543329E-7	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9998163904510942	WITHOUT_CLASSIFICATION	1.8360954890593725E-4	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9997709417066655	WITHOUT_CLASSIFICATION	2.290582933344231E-4	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999948372936744	WITHOUT_CLASSIFICATION	5.162706325573137E-6	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999655148490749	WITHOUT_CLASSIFICATION	3.448515092504891E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999978532951191	WITHOUT_CLASSIFICATION	2.1467048808669433E-6	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999939224047657	WITHOUT_CLASSIFICATION	6.077595234343035E-6	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999891593999959	WITHOUT_CLASSIFICATION	1.0840600004046276E-5	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999875147347093	WITHOUT_CLASSIFICATION	1.2485265290756373E-5	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999987892696396	WITHOUT_CLASSIFICATION	1.2107303604191622E-6	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.999992591078592	WITHOUT_CLASSIFICATION	7.408921407986205E-6	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999937920488443	WITHOUT_CLASSIFICATION	6.2079511556781E-6	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999803631988707	WITHOUT_CLASSIFICATION	1.9636801129295243E-5	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999983345916664	WITHOUT_CLASSIFICATION	1.6654083336109765E-6	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999255249422596	WITHOUT_CLASSIFICATION	7.447505774040903E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999945294532182	WITHOUT_CLASSIFICATION	5.4705467817588455E-6	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999802428027621	WITHOUT_CLASSIFICATION	1.9757197237937467E-5	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9997823447693043	WITHOUT_CLASSIFICATION	2.1765523069570668E-4	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9999692554574651	WITHOUT_CLASSIFICATION	3.074454253505299E-5	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.999921699150201	WITHOUT_CLASSIFICATION	7.830084979899256E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9993745112119153	WITHOUT_CLASSIFICATION	6.254887880847821E-4	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.999930668551303	WITHOUT_CLASSIFICATION	6.933144869701927E-5	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999452260370829	WITHOUT_CLASSIFICATION	5.477396291703792E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9993745112119153	WITHOUT_CLASSIFICATION	6.254887880847821E-4	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9996510255878173	WITHOUT_CLASSIFICATION	3.4897441218272924E-4	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999933816258767	WITHOUT_CLASSIFICATION	6.61837412319944E-6	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999790737617085	WITHOUT_CLASSIFICATION	2.092623829152712E-5	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9998425780192369	WITHOUT_CLASSIFICATION	1.5742198076301625E-4	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999862793575978	WITHOUT_CLASSIFICATION	1.3720642402150368E-5	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9999913420734696	WITHOUT_CLASSIFICATION	8.657926530444503E-6	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9998728746224029	WITHOUT_CLASSIFICATION	1.2712537759713928E-4	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999425860431477	WITHOUT_CLASSIFICATION	5.741395685226664E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9998872606375072	WITHOUT_CLASSIFICATION	1.1273936249280646E-4	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9995515470686787	WITHOUT_CLASSIFICATION	4.4845293132133435E-4	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9997090600656138	WITHOUT_CLASSIFICATION	2.9093993438622387E-4	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9996627459135428	WITHOUT_CLASSIFICATION	3.3725408645733467E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9969887219705983	WITHOUT_CLASSIFICATION	0.0030112780294017476	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9975534258488716	WITHOUT_CLASSIFICATION	0.0024465741511283646	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.999978191883534	WITHOUT_CLASSIFICATION	2.1808116465966935E-5	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999121790304759	WITHOUT_CLASSIFICATION	8.782096952407453E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.999923156026196	WITHOUT_CLASSIFICATION	7.68439738040532E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.999966793341578	WITHOUT_CLASSIFICATION	3.3206658422083416E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999627176953672	WITHOUT_CLASSIFICATION	3.728230463285793E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999005775833092	WITHOUT_CLASSIFICATION	9.942241669089545E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9998180237368829	WITHOUT_CLASSIFICATION	1.8197626311713873E-4	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999129064807133	WITHOUT_CLASSIFICATION	8.709351928674021E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999019610023648	WITHOUT_CLASSIFICATION	9.803899763513261E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999766545218655	WITHOUT_CLASSIFICATION	2.3345478134495393E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999571931460632	WITHOUT_CLASSIFICATION	4.280685393679298E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999813639028234	WITHOUT_CLASSIFICATION	1.8636097176478686E-5	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.999842947225455	WITHOUT_CLASSIFICATION	1.5705277454496132E-4	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999705877671382	WITHOUT_CLASSIFICATION	2.9412232861708346E-5	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999885961968789	WITHOUT_CLASSIFICATION	1.1403803121229448E-5	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999803971005709	WITHOUT_CLASSIFICATION	1.9602899429073212E-5	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9998911166766811	WITHOUT_CLASSIFICATION	1.0888332331892481E-4	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9999477900183605	WITHOUT_CLASSIFICATION	5.220998163936071E-5	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9999905048488511	WITHOUT_CLASSIFICATION	9.49515114888895E-6	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999965200206027	WITHOUT_CLASSIFICATION	3.479979397243643E-6	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999709784652686	WITHOUT_CLASSIFICATION	2.9021534731414264E-5	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.999895744633967	WITHOUT_CLASSIFICATION	1.0425536603297872E-4	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999672101661768	WITHOUT_CLASSIFICATION	3.278983382323942E-5	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9995927356231686	WITHOUT_CLASSIFICATION	4.0726437683136007E-4	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999518952588458	WITHOUT_CLASSIFICATION	4.8104741154228754E-5	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999468582006863	WITHOUT_CLASSIFICATION	5.31417993137631E-5	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999324979014764	WITHOUT_CLASSIFICATION	6.750209852358631E-5	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999643769022974	WITHOUT_CLASSIFICATION	3.562309770260876E-5	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999544566126956	WITHOUT_CLASSIFICATION	4.554338730438012E-5	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999753022802296	WITHOUT_CLASSIFICATION	2.4697719770362518E-5	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999458865545363	WITHOUT_CLASSIFICATION	5.411344546382955E-5	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999636095189512	WITHOUT_CLASSIFICATION	3.639048104883798E-5	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999697621269398	WITHOUT_CLASSIFICATION	3.0237873060126132E-5	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999005040589106	WITHOUT_CLASSIFICATION	9.949594108946045E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999990033271976	WITHOUT_CLASSIFICATION	9.966728023926794E-6	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999680354577124	WITHOUT_CLASSIFICATION	3.196454228759814E-5	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999465450608068	WITHOUT_CLASSIFICATION	5.345493919305705E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9995523457445726	WITHOUT_CLASSIFICATION	4.4765425542739307E-4	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999976958979085	WITHOUT_CLASSIFICATION	2.3041020914418375E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999990033271976	WITHOUT_CLASSIFICATION	9.966728023926794E-6	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9999814587634442	WITHOUT_CLASSIFICATION	1.8541236555785818E-5	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9999814587634442	WITHOUT_CLASSIFICATION	1.8541236555785818E-5	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999867171843904	WITHOUT_CLASSIFICATION	1.3282815609625842E-5	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999199001930608	WITHOUT_CLASSIFICATION	8.009980693921728E-5	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999424803226626	WITHOUT_CLASSIFICATION	5.751967733748614E-5	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999976870837105	WITHOUT_CLASSIFICATION	2.3129162894711934E-6	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999916387672524	WITHOUT_CLASSIFICATION	8.361232747730628E-6	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999743701462752	WITHOUT_CLASSIFICATION	2.5629853724862195E-5	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999676496431319	WITHOUT_CLASSIFICATION	3.2350356868062736E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.9996002858842075	WITHOUT_CLASSIFICATION	3.997141157925221E-4	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999995362681734	WITHOUT_CLASSIFICATION	4.6373182664153454E-7	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.999924066007822	WITHOUT_CLASSIFICATION	7.593399217795136E-5	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999998397320414	WITHOUT_CLASSIFICATION	1.6026795859945826E-7	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999997213047042	WITHOUT_CLASSIFICATION	2.786952957639367E-7	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9998324948421334	WITHOUT_CLASSIFICATION	1.6750515786659269E-4	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999804936723232	WITHOUT_CLASSIFICATION	1.9506327676770154E-5	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9985778116590533	WITHOUT_CLASSIFICATION	0.0014221883409466422	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9986183084682696	WITHOUT_CLASSIFICATION	0.0013816915317304557	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999936064566145	WITHOUT_CLASSIFICATION	6.393543385542192E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9994751085132205	WITHOUT_CLASSIFICATION	5.248914867794046E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9994751085132205	WITHOUT_CLASSIFICATION	5.248914867794046E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9994751085132205	WITHOUT_CLASSIFICATION	5.248914867794046E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9994751085132205	WITHOUT_CLASSIFICATION	5.248914867794046E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9994751085132205	WITHOUT_CLASSIFICATION	5.248914867794046E-4	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999013880884867	WITHOUT_CLASSIFICATION	9.861191151323307E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999821419449383	WITHOUT_CLASSIFICATION	1.7858055061680676E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996145170121087	WITHOUT_CLASSIFICATION	3.854829878913351E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999844423935831	WITHOUT_CLASSIFICATION	1.5557606416933277E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999885097593086	WITHOUT_CLASSIFICATION	1.1490240691333712E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999930674900478	WITHOUT_CLASSIFICATION	6.932509952200732E-6	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999517186979398	WITHOUT_CLASSIFICATION	4.8281302060358206E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.999985415885655	WITHOUT_CLASSIFICATION	1.4584114345011818E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999888591773263	WITHOUT_CLASSIFICATION	1.1140822673641099E-5	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9998963813647894	WITHOUT_CLASSIFICATION	1.0361863521068139E-4	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9998828312824065	WITHOUT_CLASSIFICATION	1.1716871759340158E-4	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9998957985925625	WITHOUT_CLASSIFICATION	1.04201407437569E-4	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9998891256773447	WITHOUT_CLASSIFICATION	1.1087432265529951E-4	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.999875748717147	WITHOUT_CLASSIFICATION	1.2425128285292562E-4	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9998947780812641	WITHOUT_CLASSIFICATION	1.0522191873585527E-4	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.999896450589352	WITHOUT_CLASSIFICATION	1.0354941064808885E-4	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9998928338580859	WITHOUT_CLASSIFICATION	1.0716614191404503E-4	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9998742658302585	WITHOUT_CLASSIFICATION	1.2573416974154586E-4	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9998723371595567	WITHOUT_CLASSIFICATION	1.2766284044326968E-4	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9998904658361756	WITHOUT_CLASSIFICATION	1.0953416382433262E-4	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9998947354361913	WITHOUT_CLASSIFICATION	1.0526456380869191E-4	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9998875229930678	WITHOUT_CLASSIFICATION	1.1247700693212665E-4	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9998991705107368	WITHOUT_CLASSIFICATION	1.0082948926322494E-4	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9998971533475846	WITHOUT_CLASSIFICATION	1.0284665241537361E-4	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9998986564242074	WITHOUT_CLASSIFICATION	1.0134357579265636E-4	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9998904440074782	WITHOUT_CLASSIFICATION	1.0955599252188932E-4	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9998655602309806	WITHOUT_CLASSIFICATION	1.344397690193607E-4	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.999864216957732	WITHOUT_CLASSIFICATION	1.3578304226806893E-4	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9998724138546383	WITHOUT_CLASSIFICATION	1.2758614536155228E-4	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999892020092404	WITHOUT_CLASSIFICATION	1.0797990759603488E-4	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9998671317546021	WITHOUT_CLASSIFICATION	1.3286824539790264E-4	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9998586333186679	WITHOUT_CLASSIFICATION	1.413666813321563E-4	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9998583943314965	WITHOUT_CLASSIFICATION	1.416056685035442E-4	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9998569443717535	WITHOUT_CLASSIFICATION	1.4305562824643462E-4	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9998772420072383	WITHOUT_CLASSIFICATION	1.2275799276174697E-4	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9998752636165147	WITHOUT_CLASSIFICATION	1.247363834853014E-4	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9998574832377904	WITHOUT_CLASSIFICATION	1.4251676220960476E-4	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9998658367163337	WITHOUT_CLASSIFICATION	1.3416328366634524E-4	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9998887660501489	WITHOUT_CLASSIFICATION	1.1123394985113839E-4	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9998773453401535	WITHOUT_CLASSIFICATION	1.2265465984662773E-4	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9998705471735867	WITHOUT_CLASSIFICATION	1.2945282641329644E-4	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9998646802360323	WITHOUT_CLASSIFICATION	1.3531976396772134E-4	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9998790333514704	WITHOUT_CLASSIFICATION	1.209666485295402E-4	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9998760493742559	WITHOUT_CLASSIFICATION	1.2395062574414802E-4	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9998999240131607	WITHOUT_CLASSIFICATION	1.0007598683922349E-4	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9998868370749789	WITHOUT_CLASSIFICATION	1.1316292502111025E-4	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999040163545566	WITHOUT_CLASSIFICATION	9.598364544339881E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999015525039516	WITHOUT_CLASSIFICATION	9.844749604825438E-5	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9998933418231359	WITHOUT_CLASSIFICATION	1.0665817686396042E-4	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9998895971207326	WITHOUT_CLASSIFICATION	1.1040287926752152E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996145170121087	WITHOUT_CLASSIFICATION	3.854829878913351E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9998930487483485	WITHOUT_CLASSIFICATION	1.0695125165150228E-4	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9998883418534972	WITHOUT_CLASSIFICATION	1.1165814650275727E-4	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9998637159483359	WITHOUT_CLASSIFICATION	1.362840516641477E-4	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.999862320471353	WITHOUT_CLASSIFICATION	1.376795286468346E-4	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9998758046901279	WITHOUT_CLASSIFICATION	1.2419530987209918E-4	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9998880697412372	WITHOUT_CLASSIFICATION	1.1193025876280777E-4	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.999881653228743	WITHOUT_CLASSIFICATION	1.1834677125696916E-4	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9998758431441663	WITHOUT_CLASSIFICATION	1.2415685583364147E-4	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9998842657013087	WITHOUT_CLASSIFICATION	1.1573429869123766E-4	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9998865676249972	WITHOUT_CLASSIFICATION	1.1343237500289867E-4	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9998935640867134	WITHOUT_CLASSIFICATION	1.0643591328661697E-4	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.999895332729896	WITHOUT_CLASSIFICATION	1.046672701039804E-4	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.999882571995062	WITHOUT_CLASSIFICATION	1.1742800493807138E-4	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.999877782882865	WITHOUT_CLASSIFICATION	1.2221711713494263E-4	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9998963365381188	WITHOUT_CLASSIFICATION	1.0366346188128574E-4	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9998941623797017	WITHOUT_CLASSIFICATION	1.0583762029818227E-4	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9998797273973484	WITHOUT_CLASSIFICATION	1.2027260265157684E-4	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9998742883627881	WITHOUT_CLASSIFICATION	1.2571163721189773E-4	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9998641414488473	WITHOUT_CLASSIFICATION	1.3585855115272522E-4	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9998832131105646	WITHOUT_CLASSIFICATION	1.1678688943537378E-4	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9998545983180874	WITHOUT_CLASSIFICATION	1.4540168191247356E-4	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9998570665206393	WITHOUT_CLASSIFICATION	1.429334793606932E-4	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9998759329660046	WITHOUT_CLASSIFICATION	1.2406703399537678E-4	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9998899647053187	WITHOUT_CLASSIFICATION	1.1003529468137998E-4	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9998791775492866	WITHOUT_CLASSIFICATION	1.2082245071339398E-4	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9998969444750984	WITHOUT_CLASSIFICATION	1.030555249015653E-4	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9998878900510824	WITHOUT_CLASSIFICATION	1.1210994891766056E-4	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9998774498892437	WITHOUT_CLASSIFICATION	1.2255011075642337E-4	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999019433332678	WITHOUT_CLASSIFICATION	9.805666673227113E-5	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9998853688536264	WITHOUT_CLASSIFICATION	1.1463114637348989E-4	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999085769335002	WITHOUT_CLASSIFICATION	9.142306649974639E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9998875075026744	WITHOUT_CLASSIFICATION	1.1249249732557371E-4	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9998984747369828	WITHOUT_CLASSIFICATION	1.0152526301714622E-4	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999897021124154	WITHOUT_CLASSIFICATION	1.0297887584592576E-4	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9998914445455471	WITHOUT_CLASSIFICATION	1.0855545445293535E-4	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.999893349891915	WITHOUT_CLASSIFICATION	1.0665010808498822E-4	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9998893472458013	WITHOUT_CLASSIFICATION	1.1065275419879119E-4	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.99987481759696	WITHOUT_CLASSIFICATION	1.2518240304010373E-4	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9998876036039859	WITHOUT_CLASSIFICATION	1.1239639601408379E-4	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9998962745607867	WITHOUT_CLASSIFICATION	1.0372543921331292E-4	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9998839176620062	WITHOUT_CLASSIFICATION	1.1608233799373741E-4	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.999886480153503	WITHOUT_CLASSIFICATION	1.1351984649700812E-4	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9998912215051566	WITHOUT_CLASSIFICATION	1.0877849484338893E-4	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9998866825800858	WITHOUT_CLASSIFICATION	1.1331741991413458E-4	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9998979237152935	WITHOUT_CLASSIFICATION	1.0207628470640059E-4	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9998890713359105	WITHOUT_CLASSIFICATION	1.1092866408945763E-4	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9998905333224276	WITHOUT_CLASSIFICATION	1.0946667757239042E-4	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9998761704199105	WITHOUT_CLASSIFICATION	1.2382958008944926E-4	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9998888296091017	WITHOUT_CLASSIFICATION	1.1117039089830184E-4	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999055425702345	WITHOUT_CLASSIFICATION	9.445742976554782E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9998892665485457	WITHOUT_CLASSIFICATION	1.1073345145434691E-4	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999078013923914	WITHOUT_CLASSIFICATION	9.219860760863525E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9998888578469862	WITHOUT_CLASSIFICATION	1.1114215301376717E-4	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9998850216317283	WITHOUT_CLASSIFICATION	1.149783682715981E-4	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9998934631620371	WITHOUT_CLASSIFICATION	1.0653683796289432E-4	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9998707938645316	WITHOUT_CLASSIFICATION	1.292061354684217E-4	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9998980964071785	WITHOUT_CLASSIFICATION	1.0190359282149766E-4	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9998895492549243	WITHOUT_CLASSIFICATION	1.1045074507562513E-4	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9998829168997254	WITHOUT_CLASSIFICATION	1.1708310027463314E-4	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9998943723558403	WITHOUT_CLASSIFICATION	1.0562764415968761E-4	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9998799920486752	WITHOUT_CLASSIFICATION	1.2000795132491623E-4	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9998698601753714	WITHOUT_CLASSIFICATION	1.3013982462852956E-4	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9998954995819684	WITHOUT_CLASSIFICATION	1.0450041803155068E-4	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9998867476177599	WITHOUT_CLASSIFICATION	1.1325238224007942E-4	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9998804935851314	WITHOUT_CLASSIFICATION	1.1950641486853328E-4	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.999877919291594	WITHOUT_CLASSIFICATION	1.2208070840601944E-4	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9998917322510015	WITHOUT_CLASSIFICATION	1.0826774899855301E-4	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.999885509411492	WITHOUT_CLASSIFICATION	1.1449058850800795E-4	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9998964901846513	WITHOUT_CLASSIFICATION	1.0350981534870773E-4	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9998870444127231	WITHOUT_CLASSIFICATION	1.1295558727692602E-4	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9998929685203876	WITHOUT_CLASSIFICATION	1.0703147961245717E-4	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9998840930485517	WITHOUT_CLASSIFICATION	1.1590695144825475E-4	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9998893951785761	WITHOUT_CLASSIFICATION	1.1060482142388613E-4	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999029475076502	WITHOUT_CLASSIFICATION	9.705249234984352E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999045998402442	WITHOUT_CLASSIFICATION	9.540015975592378E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9998875054443804	WITHOUT_CLASSIFICATION	1.1249455561962829E-4	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.999907313292824	WITHOUT_CLASSIFICATION	9.268670717591398E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.99989482840709	WITHOUT_CLASSIFICATION	1.0517159291006561E-4	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9998859526756037	WITHOUT_CLASSIFICATION	1.1404732439637017E-4	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9998954251983756	WITHOUT_CLASSIFICATION	1.0457480162436813E-4	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9998816796257759	WITHOUT_CLASSIFICATION	1.1832037422399799E-4	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9998888552349194	WITHOUT_CLASSIFICATION	1.111447650804857E-4	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9998679571157499	WITHOUT_CLASSIFICATION	1.3204288425004053E-4	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9998748551381007	WITHOUT_CLASSIFICATION	1.2514486189927173E-4	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9998813824950363	WITHOUT_CLASSIFICATION	1.1861750496367385E-4	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9998947779355197	WITHOUT_CLASSIFICATION	1.0522206448021341E-4	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9998638220050501	WITHOUT_CLASSIFICATION	1.3617799494982218E-4	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9998844625832474	WITHOUT_CLASSIFICATION	1.1553741675269342E-4	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9998961420125934	WITHOUT_CLASSIFICATION	1.0385798740659973E-4	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9998940642686758	WITHOUT_CLASSIFICATION	1.0593573132417529E-4	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999062113126657	WITHOUT_CLASSIFICATION	9.378868733424696E-5	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9998764301649468	WITHOUT_CLASSIFICATION	1.2356983505329203E-4	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9998835845915622	WITHOUT_CLASSIFICATION	1.1641540843782855E-4	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9998762953417364	WITHOUT_CLASSIFICATION	1.2370465826353622E-4	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9998978704370053	WITHOUT_CLASSIFICATION	1.0212956299462924E-4	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9998865852696321	WITHOUT_CLASSIFICATION	1.1341473036791911E-4	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999020855788585	WITHOUT_CLASSIFICATION	9.791442114150857E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9998699242045758	WITHOUT_CLASSIFICATION	1.3007579542415946E-4	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9998985339385477	WITHOUT_CLASSIFICATION	1.014660614523933E-4	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9998977002744257	WITHOUT_CLASSIFICATION	1.0229972557432208E-4	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9998772131604142	WITHOUT_CLASSIFICATION	1.2278683958577623E-4	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9998748950948396	WITHOUT_CLASSIFICATION	1.251049051603602E-4	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9998770477081587	WITHOUT_CLASSIFICATION	1.229522918414152E-4	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9998870277009373	WITHOUT_CLASSIFICATION	1.1297229906265023E-4	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9998937787218871	WITHOUT_CLASSIFICATION	1.0622127811293523E-4	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9998916407211754	WITHOUT_CLASSIFICATION	1.0835927882455444E-4	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9998939467231657	WITHOUT_CLASSIFICATION	1.0605327683429016E-4	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9998850535313037	WITHOUT_CLASSIFICATION	1.1494646869619464E-4	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9998960780233112	WITHOUT_CLASSIFICATION	1.0392197668877622E-4	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9998967199710028	WITHOUT_CLASSIFICATION	1.0328002899720131E-4	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.999895323192667	WITHOUT_CLASSIFICATION	1.0467680733295387E-4	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9998957041431754	WITHOUT_CLASSIFICATION	1.042958568245954E-4	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9998996431266169	WITHOUT_CLASSIFICATION	1.0035687338301638E-4	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9998895370577278	WITHOUT_CLASSIFICATION	1.1046294227230204E-4	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9998909339823541	WITHOUT_CLASSIFICATION	1.0906601764592814E-4	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9998643452690411	WITHOUT_CLASSIFICATION	1.3565473095877346E-4	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9998701000143174	WITHOUT_CLASSIFICATION	1.2989998568262037E-4	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9998688033416288	WITHOUT_CLASSIFICATION	1.3119665837118695E-4	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9998761290844977	WITHOUT_CLASSIFICATION	1.2387091550221748E-4	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9998812456734623	WITHOUT_CLASSIFICATION	1.187543265378421E-4	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9998710108768469	WITHOUT_CLASSIFICATION	1.2898912315304322E-4	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.999872694688519	WITHOUT_CLASSIFICATION	1.273053114809203E-4	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9998769238910459	WITHOUT_CLASSIFICATION	1.2307610895413918E-4	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9998716080403668	WITHOUT_CLASSIFICATION	1.2839195963317232E-4	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.999867261689589	WITHOUT_CLASSIFICATION	1.3273831041107797E-4	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9998527846414792	WITHOUT_CLASSIFICATION	1.4721535852080535E-4	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9998749435424307	WITHOUT_CLASSIFICATION	1.2505645756930446E-4	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.999845128251104	WITHOUT_CLASSIFICATION	1.5487174889590086E-4	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9998746259009874	WITHOUT_CLASSIFICATION	1.2537409901266025E-4	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9998774315579163	WITHOUT_CLASSIFICATION	1.225684420836472E-4	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9998798891043537	WITHOUT_CLASSIFICATION	1.2011089564625157E-4	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9998789317292159	WITHOUT_CLASSIFICATION	1.2106827078408969E-4	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9998767201638052	WITHOUT_CLASSIFICATION	1.2327983619473993E-4	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9998606884179332	WITHOUT_CLASSIFICATION	1.393115820667933E-4	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9998820295782233	WITHOUT_CLASSIFICATION	1.179704217767404E-4	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9998755748994637	WITHOUT_CLASSIFICATION	1.2442510053634078E-4	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9998355746980979	WITHOUT_CLASSIFICATION	1.6442530190212415E-4	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9998426105440632	WITHOUT_CLASSIFICATION	1.5738945593676742E-4	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.999866647395342	WITHOUT_CLASSIFICATION	1.3335260465802937E-4	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9997579016668551	WITHOUT_CLASSIFICATION	2.4209833314479146E-4	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9998074211409217	WITHOUT_CLASSIFICATION	1.9257885907825469E-4	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9998578113370887	WITHOUT_CLASSIFICATION	1.4218866291129242E-4	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9998526586643602	WITHOUT_CLASSIFICATION	1.4734133563972838E-4	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9998559110917599	WITHOUT_CLASSIFICATION	1.4408890824013095E-4	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9998840669562024	WITHOUT_CLASSIFICATION	1.159330437976732E-4	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9998671678063874	WITHOUT_CLASSIFICATION	1.3283219361256995E-4	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.999879965882451	WITHOUT_CLASSIFICATION	1.2003411754895085E-4	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9998536102623793	WITHOUT_CLASSIFICATION	1.4638973762070065E-4	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9998603066238402	WITHOUT_CLASSIFICATION	1.3969337615986322E-4	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9998877816165124	WITHOUT_CLASSIFICATION	1.1221838348769165E-4	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9998868231614398	WITHOUT_CLASSIFICATION	1.1317683856020385E-4	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9998671440843423	WITHOUT_CLASSIFICATION	1.3285591565764273E-4	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9998718573994296	WITHOUT_CLASSIFICATION	1.2814260057038553E-4	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9998962494444119	WITHOUT_CLASSIFICATION	1.0375055558814622E-4	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9998839309047537	WITHOUT_CLASSIFICATION	1.1606909524633395E-4	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.999871839829237	WITHOUT_CLASSIFICATION	1.2816017076295376E-4	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9998595520458233	WITHOUT_CLASSIFICATION	1.4044795417658335E-4	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9998802885265586	WITHOUT_CLASSIFICATION	1.1971147344129128E-4	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9998778098251525	WITHOUT_CLASSIFICATION	1.221901748475083E-4	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9998598637558466	WITHOUT_CLASSIFICATION	1.401362441534987E-4	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.999872599453138	WITHOUT_CLASSIFICATION	1.2740054686198975E-4	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9998816649361223	WITHOUT_CLASSIFICATION	1.1833506387768161E-4	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9998821058898669	WITHOUT_CLASSIFICATION	1.1789411013307857E-4	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9998492767744397	WITHOUT_CLASSIFICATION	1.5072322556025777E-4	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9998413348509492	WITHOUT_CLASSIFICATION	1.586651490508267E-4	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9998403886215943	WITHOUT_CLASSIFICATION	1.596113784056839E-4	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9998692602754417	WITHOUT_CLASSIFICATION	1.3073972455837854E-4	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9998400672161153	WITHOUT_CLASSIFICATION	1.5993278388462504E-4	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9998568103555655	WITHOUT_CLASSIFICATION	1.431896444345678E-4	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9998445719284128	WITHOUT_CLASSIFICATION	1.55428071587288E-4	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9998509204510297	WITHOUT_CLASSIFICATION	1.4907954897021335E-4	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.999844498887348	WITHOUT_CLASSIFICATION	1.5550111265195813E-4	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9998744097764162	WITHOUT_CLASSIFICATION	1.2559022358385805E-4	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9998525057823611	WITHOUT_CLASSIFICATION	1.4749421763887737E-4	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9998767131305133	WITHOUT_CLASSIFICATION	1.2328686948672926E-4	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9998580572390754	WITHOUT_CLASSIFICATION	1.4194276092456974E-4	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9998518749798189	WITHOUT_CLASSIFICATION	1.4812502018108004E-4	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9998464881508994	WITHOUT_CLASSIFICATION	1.535118491006215E-4	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9998936382618586	WITHOUT_CLASSIFICATION	1.0636173814129447E-4	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9998864984305486	WITHOUT_CLASSIFICATION	1.1350156945142289E-4	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999871018312261	WITHOUT_CLASSIFICATION	1.2898168773900565E-4	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.999860946710515	WITHOUT_CLASSIFICATION	1.3905328948506055E-4	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.999873439513245	WITHOUT_CLASSIFICATION	1.2656048675498203E-4	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9998848082174369	WITHOUT_CLASSIFICATION	1.1519178256319964E-4	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9998706844847446	WITHOUT_CLASSIFICATION	1.293155152554335E-4	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9998596317137358	WITHOUT_CLASSIFICATION	1.4036828626425748E-4	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9998594875030088	WITHOUT_CLASSIFICATION	1.4051249699116876E-4	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9998679783815924	WITHOUT_CLASSIFICATION	1.3202161840769036E-4	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9998724627166158	WITHOUT_CLASSIFICATION	1.2753728338418233E-4	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.999858620448119	WITHOUT_CLASSIFICATION	1.4137955188099722E-4	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9998726912465101	WITHOUT_CLASSIFICATION	1.2730875348989707E-4	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9998817009274631	WITHOUT_CLASSIFICATION	1.1829907253698018E-4	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9998712418412911	WITHOUT_CLASSIFICATION	1.2875815870887254E-4	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9998789192837428	WITHOUT_CLASSIFICATION	1.2108071625714032E-4	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9998915241822912	WITHOUT_CLASSIFICATION	1.0847581770871605E-4	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9998845474661138	WITHOUT_CLASSIFICATION	1.1545253388612344E-4	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9998726626815087	WITHOUT_CLASSIFICATION	1.273373184914191E-4	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9998661257919432	WITHOUT_CLASSIFICATION	1.338742080568608E-4	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9998755267143931	WITHOUT_CLASSIFICATION	1.2447328560702433E-4	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9998732997702802	WITHOUT_CLASSIFICATION	1.2670022971985597E-4	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9998688745427577	WITHOUT_CLASSIFICATION	1.3112545724219517E-4	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9998405417859026	WITHOUT_CLASSIFICATION	1.594582140973336E-4	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9998412787791694	WITHOUT_CLASSIFICATION	1.587212208305802E-4	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.999851322183993	WITHOUT_CLASSIFICATION	1.486778160070505E-4	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9998608690909659	WITHOUT_CLASSIFICATION	1.3913090903404767E-4	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.999869289439933	WITHOUT_CLASSIFICATION	1.3071056006695167E-4	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.999855419500642	WITHOUT_CLASSIFICATION	1.4458049935799818E-4	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9998744931575303	WITHOUT_CLASSIFICATION	1.2550684246976593E-4	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9998645076005774	WITHOUT_CLASSIFICATION	1.35492399422576E-4	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9998739136203104	WITHOUT_CLASSIFICATION	1.2608637968965583E-4	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9998483652317729	WITHOUT_CLASSIFICATION	1.516347682270721E-4	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9998909247826038	WITHOUT_CLASSIFICATION	1.0907521739612146E-4	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9998920357552176	WITHOUT_CLASSIFICATION	1.0796424478242652E-4	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9998825259771139	WITHOUT_CLASSIFICATION	1.1747402288606917E-4	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9998755101376007	WITHOUT_CLASSIFICATION	1.2448986239931402E-4	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9998636158929531	WITHOUT_CLASSIFICATION	1.36384107046871E-4	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9998582659477051	WITHOUT_CLASSIFICATION	1.417340522949788E-4	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9998623272276581	WITHOUT_CLASSIFICATION	1.376727723419221E-4	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9998727982138713	WITHOUT_CLASSIFICATION	1.2720178612870233E-4	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9998715267961392	WITHOUT_CLASSIFICATION	1.2847320386069472E-4	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9998768926235886	WITHOUT_CLASSIFICATION	1.2310737641139127E-4	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9998717558838647	WITHOUT_CLASSIFICATION	1.2824411613535585E-4	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9998627492245448	WITHOUT_CLASSIFICATION	1.3725077545517105E-4	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9998885071813826	WITHOUT_CLASSIFICATION	1.1149281861746952E-4	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9998538833574828	WITHOUT_CLASSIFICATION	1.4611664251728139E-4	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9998672465774122	WITHOUT_CLASSIFICATION	1.3275342258784348E-4	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9998785237474409	WITHOUT_CLASSIFICATION	1.2147625255914581E-4	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999140090269943	WITHOUT_CLASSIFICATION	8.599097300563167E-5	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9995220574924668	WITHOUT_CLASSIFICATION	4.779425075332604E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9995640075131111	WITHOUT_CLASSIFICATION	4.35992486888861E-4	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.998772145027073	WITHOUT_CLASSIFICATION	0.001227854972927014	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999497610957547	WITHOUT_CLASSIFICATION	5.0238904245267845E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9986875815857876	WITHOUT_CLASSIFICATION	0.001312418414212343	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999842888297875	WITHOUT_CLASSIFICATION	1.571117021247014E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999843510696013	WITHOUT_CLASSIFICATION	1.564893039871068E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.999843280650329	WITHOUT_CLASSIFICATION	1.567193496710352E-4	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9998374173471967	WITHOUT_CLASSIFICATION	1.6258265280340287E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.999919285074624	WITHOUT_CLASSIFICATION	8.071492537602975E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9998965283021479	WITHOUT_CLASSIFICATION	1.0347169785199093E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.999913980881809	WITHOUT_CLASSIFICATION	8.60191181909889E-5	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9990532691521246	WITHOUT_CLASSIFICATION	9.467308478755231E-4	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9997120833034561	WITHOUT_CLASSIFICATION	2.87916696543919E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999562537027757	WITHOUT_CLASSIFICATION	4.374629722425558E-5	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9997099231125832	WITHOUT_CLASSIFICATION	2.900768874167753E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999541060004352	WITHOUT_CLASSIFICATION	4.589399956474014E-5	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999811100208695	WITHOUT_CLASSIFICATION	1.88899791304488E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999788522031592	WITHOUT_CLASSIFICATION	2.1147796840919202E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999734338083137	WITHOUT_CLASSIFICATION	2.6566191686378775E-5	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999234323064825	WITHOUT_CLASSIFICATION	7.65676935174831E-5	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999950898980685	WITHOUT_CLASSIFICATION	4.910101931471313E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999980941369182	WITHOUT_CLASSIFICATION	1.9058630818435686E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999980941369182	WITHOUT_CLASSIFICATION	1.9058630818435686E-6	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999923327133994	WITHOUT_CLASSIFICATION	7.66728660064591E-6	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9999991079389905	WITHOUT_CLASSIFICATION	8.92061009560513E-7	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999198799093666	WITHOUT_CLASSIFICATION	8.012009063342417E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999608349623055	WITHOUT_CLASSIFICATION	3.916503769441657E-5	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999840880052149	WITHOUT_CLASSIFICATION	1.5911994785050264E-5	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999715179921953	WITHOUT_CLASSIFICATION	2.8482007804660495E-5	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9999866411064434	WITHOUT_CLASSIFICATION	1.335889355660263E-5	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999854161256136	WITHOUT_CLASSIFICATION	1.4583874386303128E-5	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9999186303846371	WITHOUT_CLASSIFICATION	8.136961536285743E-5	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999962004832594	WITHOUT_CLASSIFICATION	3.799516740628708E-6	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999849469922831	WITHOUT_CLASSIFICATION	1.5053007716771827E-5	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9999972248482304	WITHOUT_CLASSIFICATION	2.775151769626158E-6	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999973332803618	WITHOUT_CLASSIFICATION	2.666719638240194E-6	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9998169100801285	WITHOUT_CLASSIFICATION	1.8308991987145797E-4	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9998298786960514	WITHOUT_CLASSIFICATION	1.7012130394846188E-4	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9998559003141165	WITHOUT_CLASSIFICATION	1.4409968588354968E-4	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999709193954187	WITHOUT_CLASSIFICATION	2.908060458129715E-5	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9998839274556945	WITHOUT_CLASSIFICATION	1.1607254430542028E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9999949305262106	WITHOUT_CLASSIFICATION	5.0694737894047064E-6	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.999977709404156	WITHOUT_CLASSIFICATION	2.2290595844037706E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999996827157214	WITHOUT_CLASSIFICATION	3.1728427860084706E-7	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999395213416469	WITHOUT_CLASSIFICATION	6.0478658353117674E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9999923838226243	WITHOUT_CLASSIFICATION	7.616177375661632E-6	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.999996911570537	WITHOUT_CLASSIFICATION	3.0884294628759243E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9999923838226243	WITHOUT_CLASSIFICATION	7.616177375661632E-6	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999971197307319	WITHOUT_CLASSIFICATION	2.8802692680722363E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999967216816238	WITHOUT_CLASSIFICATION	3.27831837630239E-6	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9999833992466791	WITHOUT_CLASSIFICATION	1.6600753320877585E-5	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9998503985001084	WITHOUT_CLASSIFICATION	1.4960149989166107E-4	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999916719882613	WITHOUT_CLASSIFICATION	8.328011738658843E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999150484241224	WITHOUT_CLASSIFICATION	8.495157587763489E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999150484241224	WITHOUT_CLASSIFICATION	8.495157587763489E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999150484241224	WITHOUT_CLASSIFICATION	8.495157587763489E-5	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.999703012313057	WITHOUT_CLASSIFICATION	2.9698768694293165E-4	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9997988885311204	WITHOUT_CLASSIFICATION	2.0111146887955882E-4	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999939055038932	WITHOUT_CLASSIFICATION	6.09449610679131E-6	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9995243818028511	WITHOUT_CLASSIFICATION	4.7561819714889923E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9995243818028511	WITHOUT_CLASSIFICATION	4.7561819714889923E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9995243818028511	WITHOUT_CLASSIFICATION	4.7561819714889923E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9995243818028511	WITHOUT_CLASSIFICATION	4.7561819714889923E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9995243818028511	WITHOUT_CLASSIFICATION	4.7561819714889923E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9995243818028511	WITHOUT_CLASSIFICATION	4.7561819714889923E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999623783734611	WITHOUT_CLASSIFICATION	3.762162653889421E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999623783734611	WITHOUT_CLASSIFICATION	3.762162653889421E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999623783734611	WITHOUT_CLASSIFICATION	3.762162653889421E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999623783734611	WITHOUT_CLASSIFICATION	3.762162653889421E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999623783734611	WITHOUT_CLASSIFICATION	3.762162653889421E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9997860634329917	WITHOUT_CLASSIFICATION	2.1393656700827797E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9997860634329917	WITHOUT_CLASSIFICATION	2.1393656700827797E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9997860634329917	WITHOUT_CLASSIFICATION	2.1393656700827797E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9997860634329917	WITHOUT_CLASSIFICATION	2.1393656700827797E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9997860634329917	WITHOUT_CLASSIFICATION	2.1393656700827797E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997691856017747	WITHOUT_CLASSIFICATION	2.308143982253744E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997691856017747	WITHOUT_CLASSIFICATION	2.308143982253744E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997691856017747	WITHOUT_CLASSIFICATION	2.308143982253744E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997691856017747	WITHOUT_CLASSIFICATION	2.308143982253744E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997691856017747	WITHOUT_CLASSIFICATION	2.308143982253744E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997691856017747	WITHOUT_CLASSIFICATION	2.308143982253744E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9995403479515558	WITHOUT_CLASSIFICATION	4.5965204844427903E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9995403479515558	WITHOUT_CLASSIFICATION	4.5965204844427903E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9995403479515558	WITHOUT_CLASSIFICATION	4.5965204844427903E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9995403479515558	WITHOUT_CLASSIFICATION	4.5965204844427903E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9995403479515558	WITHOUT_CLASSIFICATION	4.5965204844427903E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9996181615883604	WITHOUT_CLASSIFICATION	3.8183841163955123E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9996181615883604	WITHOUT_CLASSIFICATION	3.8183841163955123E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9996181615883604	WITHOUT_CLASSIFICATION	3.8183841163955123E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9996181615883604	WITHOUT_CLASSIFICATION	3.8183841163955123E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9996181615883604	WITHOUT_CLASSIFICATION	3.8183841163955123E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996145170121087	WITHOUT_CLASSIFICATION	3.854829878913351E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996145170121087	WITHOUT_CLASSIFICATION	3.854829878913351E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996145170121087	WITHOUT_CLASSIFICATION	3.854829878913351E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996145170121087	WITHOUT_CLASSIFICATION	3.854829878913351E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9996145170121087	WITHOUT_CLASSIFICATION	3.854829878913351E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999844423935831	WITHOUT_CLASSIFICATION	1.5557606416933277E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999930674900478	WITHOUT_CLASSIFICATION	6.932509952200732E-6	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999517186979398	WITHOUT_CLASSIFICATION	4.8281302060358206E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.999985415885655	WITHOUT_CLASSIFICATION	1.4584114345011818E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999888591773263	WITHOUT_CLASSIFICATION	1.1140822673641099E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9998968710464422	WITHOUT_CLASSIFICATION	1.0312895355778557E-4	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9998904658361756	WITHOUT_CLASSIFICATION	1.0953416382433262E-4	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9998986564242074	WITHOUT_CLASSIFICATION	1.0134357579265636E-4	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9998724138546383	WITHOUT_CLASSIFICATION	1.2758614536155228E-4	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999892020092404	WITHOUT_CLASSIFICATION	1.0797990759603488E-4	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9998774720445203	WITHOUT_CLASSIFICATION	1.2252795547975867E-4	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9998671317546021	WITHOUT_CLASSIFICATION	1.3286824539790264E-4	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999122921439038	WITHOUT_CLASSIFICATION	8.770785609627999E-5	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9998995068663806	WITHOUT_CLASSIFICATION	1.0049313361941809E-4	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.99989008575746	WITHOUT_CLASSIFICATION	1.0991424253993453E-4	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9998749268003222	WITHOUT_CLASSIFICATION	1.250731996778657E-4	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999009732838291	WITHOUT_CLASSIFICATION	9.90267161708942E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9998905052121574	WITHOUT_CLASSIFICATION	1.0949478784264468E-4	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9998877073173126	WITHOUT_CLASSIFICATION	1.1229268268736801E-4	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9998828397809058	WITHOUT_CLASSIFICATION	1.1716021909429893E-4	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9998815348905148	WITHOUT_CLASSIFICATION	1.1846510948514778E-4	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9998768877680083	WITHOUT_CLASSIFICATION	1.2311223199175722E-4	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9998790063927221	WITHOUT_CLASSIFICATION	1.209936072779836E-4	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9998760830495724	WITHOUT_CLASSIFICATION	1.2391695042760344E-4	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9998868268432405	WITHOUT_CLASSIFICATION	1.1317315675959847E-4	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9998911481159884	WITHOUT_CLASSIFICATION	1.0885188401144298E-4	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9998898675806679	WITHOUT_CLASSIFICATION	1.1013241933205772E-4	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9998984563724574	WITHOUT_CLASSIFICATION	1.0154362754260656E-4	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9998966480562422	WITHOUT_CLASSIFICATION	1.0335194375768875E-4	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9998800852440723	WITHOUT_CLASSIFICATION	1.1991475592763996E-4	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9998697143690897	WITHOUT_CLASSIFICATION	1.3028563091029921E-4	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9998525897992235	WITHOUT_CLASSIFICATION	1.4741020077657213E-4	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9998670804428897	WITHOUT_CLASSIFICATION	1.3291955711023935E-4	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9998693678187213	WITHOUT_CLASSIFICATION	1.306321812787183E-4	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.999867062895205	WITHOUT_CLASSIFICATION	1.3293710479491257E-4	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9998759104877802	WITHOUT_CLASSIFICATION	1.2408951221982815E-4	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9998565460947862	WITHOUT_CLASSIFICATION	1.434539052138378E-4	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9998662775507672	WITHOUT_CLASSIFICATION	1.337224492328002E-4	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9998765723843165	WITHOUT_CLASSIFICATION	1.234276156835715E-4	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9998718976292948	WITHOUT_CLASSIFICATION	1.281023707050903E-4	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.999868823906191	WITHOUT_CLASSIFICATION	1.3117609380884618E-4	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9998687712792623	WITHOUT_CLASSIFICATION	1.3122872073759742E-4	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9998768791874671	WITHOUT_CLASSIFICATION	1.2312081253280412E-4	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999023539169662	WITHOUT_CLASSIFICATION	9.764608303369599E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9998855285192421	WITHOUT_CLASSIFICATION	1.1447148075791756E-4	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999046889842013	WITHOUT_CLASSIFICATION	9.531101579877691E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9998840164332641	WITHOUT_CLASSIFICATION	1.1598356673596804E-4	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.999891788675598	WITHOUT_CLASSIFICATION	1.0821132440189262E-4	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9998853508289434	WITHOUT_CLASSIFICATION	1.1464917105663387E-4	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9998883418534972	WITHOUT_CLASSIFICATION	1.1165814650275727E-4	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9998637159483359	WITHOUT_CLASSIFICATION	1.362840516641477E-4	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.999862320471353	WITHOUT_CLASSIFICATION	1.376795286468346E-4	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9998758431441663	WITHOUT_CLASSIFICATION	1.2415685583364147E-4	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9998941623797017	WITHOUT_CLASSIFICATION	1.0583762029818227E-4	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9998878900510824	WITHOUT_CLASSIFICATION	1.1210994891766056E-4	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9998802356687758	WITHOUT_CLASSIFICATION	1.1976433122421133E-4	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9998774498892437	WITHOUT_CLASSIFICATION	1.2255011075642337E-4	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9998912215051566	WITHOUT_CLASSIFICATION	1.0877849484338893E-4	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9998979237152935	WITHOUT_CLASSIFICATION	1.0207628470640059E-4	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9998937013046177	WITHOUT_CLASSIFICATION	1.0629869538230534E-4	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9998890713359105	WITHOUT_CLASSIFICATION	1.1092866408945763E-4	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9998905333224276	WITHOUT_CLASSIFICATION	1.0946667757239042E-4	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9998737494330743	WITHOUT_CLASSIFICATION	1.2625056692579294E-4	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9998757412948858	WITHOUT_CLASSIFICATION	1.2425870511434666E-4	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9998892708025338	WITHOUT_CLASSIFICATION	1.107291974661353E-4	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9998869780637826	WITHOUT_CLASSIFICATION	1.1302193621742803E-4	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9998785650411907	WITHOUT_CLASSIFICATION	1.2143495880942037E-4	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9998893657698507	WITHOUT_CLASSIFICATION	1.1063423014937312E-4	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9998748983814684	WITHOUT_CLASSIFICATION	1.2510161853174467E-4	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9998942306445927	WITHOUT_CLASSIFICATION	1.057693554072598E-4	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9998833054939876	WITHOUT_CLASSIFICATION	1.1669450601233601E-4	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9998944984392044	WITHOUT_CLASSIFICATION	1.0550156079566127E-4	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9998954396464694	WITHOUT_CLASSIFICATION	1.0456035353060139E-4	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9998860667583932	WITHOUT_CLASSIFICATION	1.1393324160688288E-4	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9998928603325672	WITHOUT_CLASSIFICATION	1.0713966743277747E-4	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9998864531587885	WITHOUT_CLASSIFICATION	1.1354684121145448E-4	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.99988840740107	WITHOUT_CLASSIFICATION	1.1159259892996327E-4	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9998888749012299	WITHOUT_CLASSIFICATION	1.111250987701169E-4	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.999879554389382	WITHOUT_CLASSIFICATION	1.2044561061805105E-4	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9998848138901775	WITHOUT_CLASSIFICATION	1.1518610982254614E-4	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9998653755758148	WITHOUT_CLASSIFICATION	1.346244241853196E-4	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9998839658228645	WITHOUT_CLASSIFICATION	1.1603417713541793E-4	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9998736428534439	WITHOUT_CLASSIFICATION	1.2635714655605775E-4	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9998706210657363	WITHOUT_CLASSIFICATION	1.2937893426369568E-4	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9998856472403999	WITHOUT_CLASSIFICATION	1.143527596002595E-4	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9998880230481575	WITHOUT_CLASSIFICATION	1.1197695184258752E-4	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9998783121559911	WITHOUT_CLASSIFICATION	1.2168784400883041E-4	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9998793789043419	WITHOUT_CLASSIFICATION	1.2062109565813526E-4	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.99988783827715	WITHOUT_CLASSIFICATION	1.1216172284995279E-4	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999046106060988	WITHOUT_CLASSIFICATION	9.538939390121048E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9998917539858344	WITHOUT_CLASSIFICATION	1.0824601416557352E-4	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9998884286717594	WITHOUT_CLASSIFICATION	1.1157132824056057E-4	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9998923489136166	WITHOUT_CLASSIFICATION	1.0765108638352004E-4	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.999889740187909	WITHOUT_CLASSIFICATION	1.1025981209102792E-4	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999031920077636	WITHOUT_CLASSIFICATION	9.680799223636115E-5	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999000084804823	WITHOUT_CLASSIFICATION	9.99915195176099E-5	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.99988580879775	WITHOUT_CLASSIFICATION	1.1419120225004635E-4	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9998916302787901	WITHOUT_CLASSIFICATION	1.0836972120981608E-4	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9998799920486752	WITHOUT_CLASSIFICATION	1.2000795132491623E-4	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9998752844114668	WITHOUT_CLASSIFICATION	1.2471558853311356E-4	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9998698601753714	WITHOUT_CLASSIFICATION	1.3013982462852956E-4	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9998929685203876	WITHOUT_CLASSIFICATION	1.0703147961245717E-4	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9998893951785761	WITHOUT_CLASSIFICATION	1.1060482142388613E-4	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9998954251983756	WITHOUT_CLASSIFICATION	1.0457480162436813E-4	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9998679571157499	WITHOUT_CLASSIFICATION	1.3204288425004053E-4	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9998947779355197	WITHOUT_CLASSIFICATION	1.0522206448021341E-4	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999062113126657	WITHOUT_CLASSIFICATION	9.378868733424696E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9998865852696321	WITHOUT_CLASSIFICATION	1.1341473036791911E-4	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9998938178202765	WITHOUT_CLASSIFICATION	1.0618217972351968E-4	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999082660045023	WITHOUT_CLASSIFICATION	9.173399549761159E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9998871249248275	WITHOUT_CLASSIFICATION	1.128750751724644E-4	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.999898129454009	WITHOUT_CLASSIFICATION	1.0187054599096388E-4	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9998965187500042	WITHOUT_CLASSIFICATION	1.0348124999578064E-4	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9998890094376192	WITHOUT_CLASSIFICATION	1.1099056238085135E-4	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9998938154024791	WITHOUT_CLASSIFICATION	1.0618459752091744E-4	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9998959306038746	WITHOUT_CLASSIFICATION	1.0406939612537829E-4	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9998835327339909	WITHOUT_CLASSIFICATION	1.1646726600907484E-4	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9998778149100641	WITHOUT_CLASSIFICATION	1.2218508993590315E-4	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9998861037217192	WITHOUT_CLASSIFICATION	1.1389627828091393E-4	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9998936197406428	WITHOUT_CLASSIFICATION	1.0638025935712678E-4	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9998701496949047	WITHOUT_CLASSIFICATION	1.298503050953415E-4	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9998902759394253	WITHOUT_CLASSIFICATION	1.0972406057480233E-4	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.999904961150308	WITHOUT_CLASSIFICATION	9.50388496919675E-5	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999063032389708	WITHOUT_CLASSIFICATION	9.369676102913559E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999000747708231	WITHOUT_CLASSIFICATION	9.992522917680224E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9998845264634908	WITHOUT_CLASSIFICATION	1.1547353650921021E-4	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9998799197557958	WITHOUT_CLASSIFICATION	1.2008024420410693E-4	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9998903272340888	WITHOUT_CLASSIFICATION	1.0967276591121076E-4	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.999896442147781	WITHOUT_CLASSIFICATION	1.0355785221905091E-4	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9998699519495058	WITHOUT_CLASSIFICATION	1.3004805049420662E-4	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9998754172916211	WITHOUT_CLASSIFICATION	1.2458270837896116E-4	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9998876757650585	WITHOUT_CLASSIFICATION	1.123242349414272E-4	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9998851000873425	WITHOUT_CLASSIFICATION	1.1489991265742225E-4	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9998814299054769	WITHOUT_CLASSIFICATION	1.1857009452312458E-4	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9998785288960604	WITHOUT_CLASSIFICATION	1.2147110393952645E-4	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9998878786855204	WITHOUT_CLASSIFICATION	1.1212131447953072E-4	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.999892507823753	WITHOUT_CLASSIFICATION	1.0749217624695032E-4	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9998881439975212	WITHOUT_CLASSIFICATION	1.1185600247875591E-4	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9998963222437496	WITHOUT_CLASSIFICATION	1.0367775625042184E-4	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9998919208327302	WITHOUT_CLASSIFICATION	1.0807916726980174E-4	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9998696681323591	WITHOUT_CLASSIFICATION	1.3033186764089286E-4	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9998667192682268	WITHOUT_CLASSIFICATION	1.332807317733011E-4	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.999874706154418	WITHOUT_CLASSIFICATION	1.2529384558198725E-4	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.999894044340868	WITHOUT_CLASSIFICATION	1.0595565913191623E-4	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9998706899413815	WITHOUT_CLASSIFICATION	1.2931005861850864E-4	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9998771296147173	WITHOUT_CLASSIFICATION	1.2287038528263042E-4	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9998931961508245	WITHOUT_CLASSIFICATION	1.0680384917548868E-4	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9998882387817661	WITHOUT_CLASSIFICATION	1.1176121823390578E-4	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9998643452690411	WITHOUT_CLASSIFICATION	1.3565473095877346E-4	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9998639998036708	WITHOUT_CLASSIFICATION	1.3600019632918224E-4	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9998812456734623	WITHOUT_CLASSIFICATION	1.187543265378421E-4	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9998716080403668	WITHOUT_CLASSIFICATION	1.2839195963317232E-4	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9998749435424307	WITHOUT_CLASSIFICATION	1.2505645756930446E-4	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9998606884179332	WITHOUT_CLASSIFICATION	1.393115820667933E-4	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9998820295782233	WITHOUT_CLASSIFICATION	1.179704217767404E-4	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9998074211409217	WITHOUT_CLASSIFICATION	1.9257885907825469E-4	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9998578113370887	WITHOUT_CLASSIFICATION	1.4218866291129242E-4	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9998457821956055	WITHOUT_CLASSIFICATION	1.542178043944231E-4	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9998956511293494	WITHOUT_CLASSIFICATION	1.0434887065058271E-4	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9998771022168723	WITHOUT_CLASSIFICATION	1.228977831275941E-4	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9998961531561574	WITHOUT_CLASSIFICATION	1.0384684384252173E-4	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9998911602735959	WITHOUT_CLASSIFICATION	1.088397264040437E-4	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9998935838573128	WITHOUT_CLASSIFICATION	1.0641614268724713E-4	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9998489415505503	WITHOUT_CLASSIFICATION	1.5105844944966943E-4	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9998604668072755	WITHOUT_CLASSIFICATION	1.395331927244646E-4	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9998721703191474	WITHOUT_CLASSIFICATION	1.2782968085264668E-4	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.999825887499589	WITHOUT_CLASSIFICATION	1.7411250041098262E-4	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9998585752616882	WITHOUT_CLASSIFICATION	1.41424738311812E-4	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9998749290879367	WITHOUT_CLASSIFICATION	1.2507091206328654E-4	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9998472057562917	WITHOUT_CLASSIFICATION	1.5279424370823967E-4	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.999856874173391	WITHOUT_CLASSIFICATION	1.4312582660909893E-4	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9998668873811608	WITHOUT_CLASSIFICATION	1.3311261883920355E-4	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9998697851494338	WITHOUT_CLASSIFICATION	1.30214850566234E-4	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9998755069609524	WITHOUT_CLASSIFICATION	1.2449303904769267E-4	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9998780087906488	WITHOUT_CLASSIFICATION	1.219912093512103E-4	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9998805472045719	WITHOUT_CLASSIFICATION	1.1945279542808745E-4	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9998909247263816	WITHOUT_CLASSIFICATION	1.0907527361845497E-4	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9998664974941447	WITHOUT_CLASSIFICATION	1.3350250585536841E-4	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9998583842409966	WITHOUT_CLASSIFICATION	1.4161575900331527E-4	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9998605383818614	WITHOUT_CLASSIFICATION	1.3946161813851497E-4	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9998589962860852	WITHOUT_CLASSIFICATION	1.4100371391489045E-4	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9998520872882399	WITHOUT_CLASSIFICATION	1.4791271176013931E-4	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9997963487964148	WITHOUT_CLASSIFICATION	2.0365120358536437E-4	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.999842303752809	WITHOUT_CLASSIFICATION	1.57696247190888E-4	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9998662520767695	WITHOUT_CLASSIFICATION	1.3374792323056421E-4	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9998296108554144	WITHOUT_CLASSIFICATION	1.7038914458555253E-4	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9998807428663131	WITHOUT_CLASSIFICATION	1.1925713368680968E-4	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9998656683911537	WITHOUT_CLASSIFICATION	1.3433160884630279E-4	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9998543025682606	WITHOUT_CLASSIFICATION	1.456974317393776E-4	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9998682759902244	WITHOUT_CLASSIFICATION	1.3172400977568352E-4	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9998611405172854	WITHOUT_CLASSIFICATION	1.3885948271469416E-4	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9998699394314529	WITHOUT_CLASSIFICATION	1.3006056854710852E-4	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9998592860623345	WITHOUT_CLASSIFICATION	1.4071393766546347E-4	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.999863889191893	WITHOUT_CLASSIFICATION	1.361108081070844E-4	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.999866435714248	WITHOUT_CLASSIFICATION	1.335642857518755E-4	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9998829273902203	WITHOUT_CLASSIFICATION	1.1707260977961284E-4	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9998595520458233	WITHOUT_CLASSIFICATION	1.4044795417658335E-4	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9998816649361223	WITHOUT_CLASSIFICATION	1.1833506387768161E-4	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9998821058898669	WITHOUT_CLASSIFICATION	1.1789411013307857E-4	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999852460721991	WITHOUT_CLASSIFICATION	1.4753927800905235E-4	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9998509204510297	WITHOUT_CLASSIFICATION	1.4907954897021335E-4	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9998744097764162	WITHOUT_CLASSIFICATION	1.2559022358385805E-4	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9998464881508994	WITHOUT_CLASSIFICATION	1.535118491006215E-4	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9998936382618586	WITHOUT_CLASSIFICATION	1.0636173814129447E-4	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9998712418412911	WITHOUT_CLASSIFICATION	1.2875815870887254E-4	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9998789192837428	WITHOUT_CLASSIFICATION	1.2108071625714032E-4	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9998841198098799	WITHOUT_CLASSIFICATION	1.1588019012013834E-4	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9998683420250866	WITHOUT_CLASSIFICATION	1.3165797491336136E-4	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9998750538529978	WITHOUT_CLASSIFICATION	1.2494614700223045E-4	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9998770534530532	WITHOUT_CLASSIFICATION	1.2294654694682824E-4	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.999872174319019	WITHOUT_CLASSIFICATION	1.278256809811018E-4	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9998846362593725	WITHOUT_CLASSIFICATION	1.1536374062746586E-4	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9998759179401617	WITHOUT_CLASSIFICATION	1.24082059838238E-4	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9998624870403657	WITHOUT_CLASSIFICATION	1.3751295963419118E-4	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9998570928198977	WITHOUT_CLASSIFICATION	1.4290718010240427E-4	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9998561587311479	WITHOUT_CLASSIFICATION	1.4384126885216787E-4	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9998789900477909	WITHOUT_CLASSIFICATION	1.210099522090985E-4	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9998603488463407	WITHOUT_CLASSIFICATION	1.3965115365930462E-4	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9998698223693556	WITHOUT_CLASSIFICATION	1.301776306443983E-4	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9998738936407534	WITHOUT_CLASSIFICATION	1.2610635924653407E-4	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9998738108296662	WITHOUT_CLASSIFICATION	1.2618917033382042E-4	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9998729415606558	WITHOUT_CLASSIFICATION	1.270584393443381E-4	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9998736541624103	WITHOUT_CLASSIFICATION	1.263458375896698E-4	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9998685891471436	WITHOUT_CLASSIFICATION	1.3141085285646255E-4	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9998526419940363	WITHOUT_CLASSIFICATION	1.4735800596352746E-4	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9998530364077007	WITHOUT_CLASSIFICATION	1.4696359229922115E-4	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.999845239866927	WITHOUT_CLASSIFICATION	1.5476013307304948E-4	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9998640392508593	WITHOUT_CLASSIFICATION	1.3596074914071343E-4	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9998442012808977	WITHOUT_CLASSIFICATION	1.557987191023185E-4	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9998429927761071	WITHOUT_CLASSIFICATION	1.5700722389286654E-4	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9998335652590749	WITHOUT_CLASSIFICATION	1.664347409250748E-4	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9998555438852261	WITHOUT_CLASSIFICATION	1.444561147739825E-4	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9998498773465243	WITHOUT_CLASSIFICATION	1.5012265347580188E-4	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9998585547958418	WITHOUT_CLASSIFICATION	1.4144520415821973E-4	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9998390417666242	WITHOUT_CLASSIFICATION	1.6095823337592603E-4	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9998618519667513	WITHOUT_CLASSIFICATION	1.3814803324870638E-4	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9998582427761188	WITHOUT_CLASSIFICATION	1.4175722388114185E-4	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9998917132928169	WITHOUT_CLASSIFICATION	1.0828670718307067E-4	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.999877018569059	WITHOUT_CLASSIFICATION	1.2298143094091165E-4	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9998814254202164	WITHOUT_CLASSIFICATION	1.1857457978353736E-4	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9998772839604241	WITHOUT_CLASSIFICATION	1.2271603957593209E-4	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9998608874660945	WITHOUT_CLASSIFICATION	1.3911253390545505E-4	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9998728342757022	WITHOUT_CLASSIFICATION	1.271657242979041E-4	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9998780164757435	WITHOUT_CLASSIFICATION	1.2198352425664732E-4	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9998717409293326	WITHOUT_CLASSIFICATION	1.2825907066732776E-4	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9998610460691	WITHOUT_CLASSIFICATION	1.3895393090008747E-4	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9998755267143931	WITHOUT_CLASSIFICATION	1.2447328560702433E-4	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9998732997702802	WITHOUT_CLASSIFICATION	1.2670022971985597E-4	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9998909247826038	WITHOUT_CLASSIFICATION	1.0907521739612146E-4	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9998635404377868	WITHOUT_CLASSIFICATION	1.3645956221323185E-4	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9998825259771139	WITHOUT_CLASSIFICATION	1.1747402288606917E-4	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9998636158929531	WITHOUT_CLASSIFICATION	1.36384107046871E-4	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9998623272276581	WITHOUT_CLASSIFICATION	1.376727723419221E-4	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9998672465774122	WITHOUT_CLASSIFICATION	1.3275342258784348E-4	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9998785237474409	WITHOUT_CLASSIFICATION	1.2147625255914581E-4	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9998837327101187	WITHOUT_CLASSIFICATION	1.1626728988125865E-4	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.999878931416903	WITHOUT_CLASSIFICATION	1.2106858309705869E-4	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9998672129775116	WITHOUT_CLASSIFICATION	1.3278702248832133E-4	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9998725751694914	WITHOUT_CLASSIFICATION	1.2742483050860064E-4	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9998610162351188	WITHOUT_CLASSIFICATION	1.3898376488117686E-4	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9998706718334545	WITHOUT_CLASSIFICATION	1.293281665455313E-4	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9998502460053843	WITHOUT_CLASSIFICATION	1.4975399461573016E-4	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9998612603202854	WITHOUT_CLASSIFICATION	1.387396797145562E-4	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9998698771480903	WITHOUT_CLASSIFICATION	1.3012285190974526E-4	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9998765702708934	WITHOUT_CLASSIFICATION	1.2342972910654536E-4	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9998618663077788	WITHOUT_CLASSIFICATION	1.381336922211967E-4	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9998719823701933	WITHOUT_CLASSIFICATION	1.2801762980674968E-4	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9998954474446373	WITHOUT_CLASSIFICATION	1.0455255536267123E-4	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9998686536507972	WITHOUT_CLASSIFICATION	1.3134634920286014E-4	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9998792990029719	WITHOUT_CLASSIFICATION	1.2070099702818696E-4	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9998775830547021	WITHOUT_CLASSIFICATION	1.224169452978511E-4	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9998741955378452	WITHOUT_CLASSIFICATION	1.2580446215478322E-4	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9998595797431057	WITHOUT_CLASSIFICATION	1.4042025689439192E-4	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9998792916943378	WITHOUT_CLASSIFICATION	1.2070830566228388E-4	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9998474578105345	WITHOUT_CLASSIFICATION	1.5254218946547126E-4	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9998677553373219	WITHOUT_CLASSIFICATION	1.3224466267820436E-4	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9998796527930813	WITHOUT_CLASSIFICATION	1.2034720691857607E-4	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9998624954729888	WITHOUT_CLASSIFICATION	1.3750452701118913E-4	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9998631464738256	WITHOUT_CLASSIFICATION	1.3685352617450654E-4	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.999861978905289	WITHOUT_CLASSIFICATION	1.380210947108749E-4	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9998846578336122	WITHOUT_CLASSIFICATION	1.1534216638772E-4	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9998798867423894	WITHOUT_CLASSIFICATION	1.2011325761059702E-4	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.999874655139085	WITHOUT_CLASSIFICATION	1.2534486091501492E-4	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9998736293869601	WITHOUT_CLASSIFICATION	1.2637061303979663E-4	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9998741856939158	WITHOUT_CLASSIFICATION	1.258143060840774E-4	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999037610879363	WITHOUT_CLASSIFICATION	9.623891206373021E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9998946777502824	WITHOUT_CLASSIFICATION	1.05322249717562E-4	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9998765298355136	WITHOUT_CLASSIFICATION	1.234701644864986E-4	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9998971963632561	WITHOUT_CLASSIFICATION	1.0280363674392435E-4	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9998730954617727	WITHOUT_CLASSIFICATION	1.2690453822718076E-4	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9998834292423154	WITHOUT_CLASSIFICATION	1.1657075768465624E-4	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9998782120372344	WITHOUT_CLASSIFICATION	1.2178796276569238E-4	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9998750862428626	WITHOUT_CLASSIFICATION	1.2491375713729897E-4	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9998628235959096	WITHOUT_CLASSIFICATION	1.3717640409036694E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999842888297875	WITHOUT_CLASSIFICATION	1.571117021247014E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999843510696013	WITHOUT_CLASSIFICATION	1.564893039871068E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.999913980881809	WITHOUT_CLASSIFICATION	8.60191181909889E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9997120833034561	WITHOUT_CLASSIFICATION	2.87916696543919E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999562537027757	WITHOUT_CLASSIFICATION	4.374629722425558E-5	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9997099231125832	WITHOUT_CLASSIFICATION	2.900768874167753E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999541060004352	WITHOUT_CLASSIFICATION	4.589399956474014E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998812376013945	WITHOUT_CLASSIFICATION	1.1876239860557763E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9998594775007015	WITHOUT_CLASSIFICATION	1.4052249929850423E-4	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9998725355977448	WITHOUT_CLASSIFICATION	1.2746440225522968E-4	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9998857155134093	WITHOUT_CLASSIFICATION	1.142844865906599E-4	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9998766227177116	WITHOUT_CLASSIFICATION	1.2337728228842553E-4	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9998630947585203	WITHOUT_CLASSIFICATION	1.3690524147962058E-4	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.999874329234266	WITHOUT_CLASSIFICATION	1.2567076573394916E-4	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9998968862521904	WITHOUT_CLASSIFICATION	1.03113747809622E-4	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.999892417226434	WITHOUT_CLASSIFICATION	1.07582773566052E-4	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9998698112866732	WITHOUT_CLASSIFICATION	1.301887133267872E-4	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9998765427980789	WITHOUT_CLASSIFICATION	1.2345720192114923E-4	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9998782843200846	WITHOUT_CLASSIFICATION	1.2171567991546315E-4	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9998804206248061	WITHOUT_CLASSIFICATION	1.1957937519392835E-4	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9998646975511557	WITHOUT_CLASSIFICATION	1.3530244884431074E-4	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9998618097299157	WITHOUT_CLASSIFICATION	1.381902700843306E-4	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9998838090874002	WITHOUT_CLASSIFICATION	1.1619091259992801E-4	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9998699673594162	WITHOUT_CLASSIFICATION	1.3003264058381487E-4	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.999871628927787	WITHOUT_CLASSIFICATION	1.2837107221301753E-4	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9998853153460417	WITHOUT_CLASSIFICATION	1.1468465395836136E-4	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9998853298917709	WITHOUT_CLASSIFICATION	1.1467010822909791E-4	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9998730067587069	WITHOUT_CLASSIFICATION	1.269932412930246E-4	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999220624652129	WITHOUT_CLASSIFICATION	7.793753478718022E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.999906152409755	WITHOUT_CLASSIFICATION	9.384759024501039E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999111962791	WITHOUT_CLASSIFICATION	8.880372090005128E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999376232540269	WITHOUT_CLASSIFICATION	6.237674597309414E-5	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999709812235482	WITHOUT_CLASSIFICATION	2.901877645169602E-5	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.999990990254894	WITHOUT_CLASSIFICATION	9.009745105989659E-6	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9998514207082042	WITHOUT_CLASSIFICATION	1.4857929179576016E-4	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999888625365287	WITHOUT_CLASSIFICATION	1.1137463471219767E-5	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9996724938138498	WITHOUT_CLASSIFICATION	3.27506186150188E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999788522031592	WITHOUT_CLASSIFICATION	2.1147796840919202E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999734338083137	WITHOUT_CLASSIFICATION	2.6566191686378775E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999980941369182	WITHOUT_CLASSIFICATION	1.9058630818435686E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999980941369182	WITHOUT_CLASSIFICATION	1.9058630818435686E-6	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9999158809087831	WITHOUT_CLASSIFICATION	8.411909121688231E-5	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.999877226638736	WITHOUT_CLASSIFICATION	1.2277336126395117E-4	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999654027098486	WITHOUT_CLASSIFICATION	3.459729015150628E-5	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999088624826931	WITHOUT_CLASSIFICATION	9.11375173069744E-5	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999977050137958	WITHOUT_CLASSIFICATION	2.294986204237643E-6	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999545627370621	WITHOUT_CLASSIFICATION	4.5437262937967744E-5	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999825569140165	WITHOUT_CLASSIFICATION	1.7443085983431382E-5	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999912084921448	WITHOUT_CLASSIFICATION	8.791507855049246E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999976460566169	WITHOUT_CLASSIFICATION	2.3539433831880506E-6	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.999995125797853	WITHOUT_CLASSIFICATION	4.874202147080775E-6	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.99999479355895	WITHOUT_CLASSIFICATION	5.206441049891775E-6	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999909618619639	WITHOUT_CLASSIFICATION	9.0381380361004E-6	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999383481495002	WITHOUT_CLASSIFICATION	6.165185049978541E-5	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999622398040524	WITHOUT_CLASSIFICATION	3.776019594758069E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999846172992071	WITHOUT_CLASSIFICATION	1.5382700792961184E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999846172992071	WITHOUT_CLASSIFICATION	1.5382700792961184E-5	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999670329108238	WITHOUT_CLASSIFICATION	3.296708917627984E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999982465866843	WITHOUT_CLASSIFICATION	1.753413315599457E-6	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999914135048055	WITHOUT_CLASSIFICATION	8.586495194448449E-6	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999797218933515	WITHOUT_CLASSIFICATION	2.027810664856278E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999905360920253	WITHOUT_CLASSIFICATION	9.463907974802203E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999947180307468	WITHOUT_CLASSIFICATION	5.281969253246864E-6	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999874699140201	WITHOUT_CLASSIFICATION	1.2530085979831504E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999947180307468	WITHOUT_CLASSIFICATION	5.281969253246864E-6	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999813908380952	WITHOUT_CLASSIFICATION	1.8609161904689346E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999330664353218	WITHOUT_CLASSIFICATION	6.693356467830324E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9997964329451464	WITHOUT_CLASSIFICATION	2.0356705485347938E-4	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9999449038076195	WITHOUT_CLASSIFICATION	5.5096192380539785E-5	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999885306995036	WITHOUT_CLASSIFICATION	1.1469300496591897E-5	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999909201449516	WITHOUT_CLASSIFICATION	9.079855048381173E-6	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999995678600134	WITHOUT_CLASSIFICATION	4.3213998656665907E-7	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999871275837816	WITHOUT_CLASSIFICATION	1.2872416218385454E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999849635992513	WITHOUT_CLASSIFICATION	1.5036400748788629E-5	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9999923761402347	WITHOUT_CLASSIFICATION	7.62385976525114E-6	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.999994544732701	WITHOUT_CLASSIFICATION	5.455267299007488E-6	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.999869249567976	WITHOUT_CLASSIFICATION	1.3075043202407364E-4	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999172166278779	WITHOUT_CLASSIFICATION	8.278337212207885E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999848130309272	WITHOUT_CLASSIFICATION	1.518696907274006E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999956419449429	WITHOUT_CLASSIFICATION	4.358055057094289E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999956419449429	WITHOUT_CLASSIFICATION	4.358055057094289E-5	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999868166381725	WITHOUT_CLASSIFICATION	1.3183361827628598E-5	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999837750155403	WITHOUT_CLASSIFICATION	1.622498445973255E-5	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999880761621605	WITHOUT_CLASSIFICATION	1.1923837839606303E-5	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.999996770729274	WITHOUT_CLASSIFICATION	3.229270725969652E-6	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999839937283501	WITHOUT_CLASSIFICATION	1.6006271649907137E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999947180307468	WITHOUT_CLASSIFICATION	5.281969253246864E-6	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.999995131525201	WITHOUT_CLASSIFICATION	4.868474798970709E-6	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999951888986548	WITHOUT_CLASSIFICATION	4.811101345149952E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999924324014825	WITHOUT_CLASSIFICATION	7.567598517430534E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999949132057169	WITHOUT_CLASSIFICATION	5.0867942832144305E-6	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999983175163715	WITHOUT_CLASSIFICATION	1.6824836286249099E-6	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999964181184309	WITHOUT_CLASSIFICATION	3.581881569050013E-6	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999997766984974	WITHOUT_CLASSIFICATION	2.2330150263991935E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999935416063751	WITHOUT_CLASSIFICATION	6.458393624810487E-6	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999833833025762	WITHOUT_CLASSIFICATION	1.6616697423847485E-5	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999961855130115	WITHOUT_CLASSIFICATION	3.8144869886070476E-6	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999783683886201	WITHOUT_CLASSIFICATION	2.16316113799475E-5	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999910094029852	WITHOUT_CLASSIFICATION	8.99059701478204E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.999886368208269	WITHOUT_CLASSIFICATION	1.136317917309687E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999187032132112	WITHOUT_CLASSIFICATION	8.129678678879177E-5	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9999816305839405	WITHOUT_CLASSIFICATION	1.836941605953083E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999642964701165	WITHOUT_CLASSIFICATION	3.5703529883479597E-5	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999895025287007	WITHOUT_CLASSIFICATION	1.0497471299315756E-5	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9993557295119008	WITHOUT_CLASSIFICATION	6.442704880992492E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999665442034501	WITHOUT_CLASSIFICATION	3.345579654992584E-5	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999624248574113	WITHOUT_CLASSIFICATION	3.75751425887451E-5	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999600698635447	WITHOUT_CLASSIFICATION	3.9930136455422596E-5	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9999303899995494	WITHOUT_CLASSIFICATION	6.961000045055995E-5	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999965718633074	WITHOUT_CLASSIFICATION	3.428136692728955E-6	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999623989654196	WITHOUT_CLASSIFICATION	3.760103458040373E-5	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999845686955923	WITHOUT_CLASSIFICATION	1.5431304407789847E-5	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999686026242154	WITHOUT_CLASSIFICATION	3.139737578453377E-5	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999975217687754	WITHOUT_CLASSIFICATION	2.478231224479054E-6	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999936517966355	WITHOUT_CLASSIFICATION	6.348203364483024E-6	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9998759736413532	WITHOUT_CLASSIFICATION	1.2402635864683145E-4	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.99999700632679	WITHOUT_CLASSIFICATION	2.9936732099251073E-6	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999525024675199	WITHOUT_CLASSIFICATION	4.749753248012271E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999718750623352	WITHOUT_CLASSIFICATION	2.8124937664841023E-5	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999912561210665	WITHOUT_CLASSIFICATION	8.743878933373173E-6	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9999533844698003	WITHOUT_CLASSIFICATION	4.661553019968897E-5	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999987825522072	WITHOUT_CLASSIFICATION	1.2174477927800698E-6	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999964454657193	WITHOUT_CLASSIFICATION	3.554534280581432E-6	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999858269681935	WITHOUT_CLASSIFICATION	1.417303180653461E-5	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.999989330593321	WITHOUT_CLASSIFICATION	1.0669406678997046E-5	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999728800886748	WITHOUT_CLASSIFICATION	2.7119911325297682E-5	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999944522086597	WITHOUT_CLASSIFICATION	5.5477913403246525E-6	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998812376013945	WITHOUT_CLASSIFICATION	1.1876239860557763E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999922240812381	WITHOUT_CLASSIFICATION	7.775918761969549E-6	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999218214807647	WITHOUT_CLASSIFICATION	7.817851923525197E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999968135724948	WITHOUT_CLASSIFICATION	3.1864275052339884E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999869670319746	WITHOUT_CLASSIFICATION	1.3032968025351658E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999330664353218	WITHOUT_CLASSIFICATION	6.693356467830324E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999715293137856	WITHOUT_CLASSIFICATION	2.8470686214338594E-5	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.999982512341926	WITHOUT_CLASSIFICATION	1.7487658073975907E-5	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999024919477343	WITHOUT_CLASSIFICATION	9.750805226573032E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999961951841813	WITHOUT_CLASSIFICATION	3.80481581876069E-6	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999961951841813	WITHOUT_CLASSIFICATION	3.80481581876069E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999910351354054	WITHOUT_CLASSIFICATION	8.964864594621267E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999910351354054	WITHOUT_CLASSIFICATION	8.964864594621267E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999910351354054	WITHOUT_CLASSIFICATION	8.964864594621267E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999712616468764	WITHOUT_CLASSIFICATION	2.8738353123528806E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999712616468764	WITHOUT_CLASSIFICATION	2.8738353123528806E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999528313850434	WITHOUT_CLASSIFICATION	4.7168614956668344E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999528313850434	WITHOUT_CLASSIFICATION	4.7168614956668344E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999820602952839	WITHOUT_CLASSIFICATION	1.793970471614096E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999678759285376	WITHOUT_CLASSIFICATION	3.2124071462304986E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9998905204108584	WITHOUT_CLASSIFICATION	1.094795891416694E-4	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9998905204108584	WITHOUT_CLASSIFICATION	1.094795891416694E-4	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.999998007912656	WITHOUT_CLASSIFICATION	1.9920873439446292E-6	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999928321772622	WITHOUT_CLASSIFICATION	7.167822737849938E-6	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999292575330643	WITHOUT_CLASSIFICATION	7.074246693563394E-5	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999741154193619	WITHOUT_CLASSIFICATION	2.5884580638221512E-5	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999811618159014	WITHOUT_CLASSIFICATION	1.88381840987311E-5	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999980406088363	WITHOUT_CLASSIFICATION	1.9593911636007006E-6	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999558418556129	WITHOUT_CLASSIFICATION	4.415814438694109E-5	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999584655237607	WITHOUT_CLASSIFICATION	4.1534476239313365E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999623262556117	WITHOUT_CLASSIFICATION	3.7673744388365764E-5	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999918726977014	WITHOUT_CLASSIFICATION	8.127302298615751E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999975805430104	WITHOUT_CLASSIFICATION	2.419456989544572E-6	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999846718219387	WITHOUT_CLASSIFICATION	1.5328178061222674E-5	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9998519630848628	WITHOUT_CLASSIFICATION	1.4803691513726348E-4	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9995274720626328	WITHOUT_CLASSIFICATION	4.725279373671654E-4	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999773802834726	WITHOUT_CLASSIFICATION	2.2619716527422178E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999106950479701	WITHOUT_CLASSIFICATION	8.930495202983208E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999879612876387	WITHOUT_CLASSIFICATION	1.2038712361252537E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999888776472436	WITHOUT_CLASSIFICATION	1.1122352756479776E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999847850763323	WITHOUT_CLASSIFICATION	1.521492366766174E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999627534624564	WITHOUT_CLASSIFICATION	3.724653754353541E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999972857838704	WITHOUT_CLASSIFICATION	2.714216129591945E-6	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999975852188845	WITHOUT_CLASSIFICATION	2.4147811155549285E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.999979514387587	WITHOUT_CLASSIFICATION	2.0485612412954835E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999974929687125	WITHOUT_CLASSIFICATION	2.507031287515142E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999973888979035	WITHOUT_CLASSIFICATION	2.6111020965644516E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999932155890143	WITHOUT_CLASSIFICATION	6.784410985762257E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999931553760466	WITHOUT_CLASSIFICATION	6.844623953419917E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999963390386828	WITHOUT_CLASSIFICATION	3.6609613171889992E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999974479982555	WITHOUT_CLASSIFICATION	2.5520017445221398E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999973420606569	WITHOUT_CLASSIFICATION	2.6579393429600985E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999930938925936	WITHOUT_CLASSIFICATION	6.906107406401194E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999964289389501	WITHOUT_CLASSIFICATION	3.571061049891015E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962806987576	WITHOUT_CLASSIFICATION	3.719301242433341E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999913633082242	WITHOUT_CLASSIFICATION	8.6366917757263E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962806987576	WITHOUT_CLASSIFICATION	3.719301242433341E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962806987576	WITHOUT_CLASSIFICATION	3.719301242433341E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962806987576	WITHOUT_CLASSIFICATION	3.719301242433341E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962806987576	WITHOUT_CLASSIFICATION	3.719301242433341E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962806987576	WITHOUT_CLASSIFICATION	3.719301242433341E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962806987576	WITHOUT_CLASSIFICATION	3.719301242433341E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999913633082242	WITHOUT_CLASSIFICATION	8.6366917757263E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999913633082242	WITHOUT_CLASSIFICATION	8.6366917757263E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999913633082242	WITHOUT_CLASSIFICATION	8.6366917757263E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999913633082242	WITHOUT_CLASSIFICATION	8.6366917757263E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999913633082242	WITHOUT_CLASSIFICATION	8.6366917757263E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999913633082242	WITHOUT_CLASSIFICATION	8.6366917757263E-6	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9999913216754113	WITHOUT_CLASSIFICATION	8.678324588691988E-6	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999772980837534	WITHOUT_CLASSIFICATION	2.2701916246608968E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.999987591180758	WITHOUT_CLASSIFICATION	1.2408819242068595E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999930555644087	WITHOUT_CLASSIFICATION	6.944435591274539E-6	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999959022025058	WITHOUT_CLASSIFICATION	4.097797494192464E-6	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999959126589479	WITHOUT_CLASSIFICATION	4.087341052131134E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999819482898992	WITHOUT_CLASSIFICATION	1.805171010083179E-5	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999695023280443	WITHOUT_CLASSIFICATION	3.049767195585605E-5	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999852773705425	WITHOUT_CLASSIFICATION	1.4722629457456128E-5	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999198122652109	WITHOUT_CLASSIFICATION	8.018773478911091E-5	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999825993838766	WITHOUT_CLASSIFICATION	1.740061612346375E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999959729132208	WITHOUT_CLASSIFICATION	4.027086779149637E-6	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999298628801702	WITHOUT_CLASSIFICATION	7.013711982986306E-5	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999990011052662	WITHOUT_CLASSIFICATION	9.988947337777998E-7	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999950387394737	WITHOUT_CLASSIFICATION	4.9612605262196555E-6	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999873094846319	WITHOUT_CLASSIFICATION	1.2690515368173022E-5	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999648316750838	WITHOUT_CLASSIFICATION	3.5168324916162524E-5	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999958683575837	WITHOUT_CLASSIFICATION	4.131642416209873E-6	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999960514168387	WITHOUT_CLASSIFICATION	3.948583161383323E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999938795379488	WITHOUT_CLASSIFICATION	6.120462051203629E-6	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999477108994028	WITHOUT_CLASSIFICATION	5.2289100597181566E-5	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999693304719578	WITHOUT_CLASSIFICATION	3.066952804226454E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999874699140201	WITHOUT_CLASSIFICATION	1.2530085979831504E-5	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9999869332455251	WITHOUT_CLASSIFICATION	1.3066754474923065E-5	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9999665824099521	WITHOUT_CLASSIFICATION	3.3417590047944825E-5	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999986227794377	WITHOUT_CLASSIFICATION	1.3772205622093835E-6	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999985216894818	WITHOUT_CLASSIFICATION	1.4783105182980935E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999816555106525	WITHOUT_CLASSIFICATION	1.8344489347504296E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9998167058995806	WITHOUT_CLASSIFICATION	1.832941004193276E-4	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999794738321772	WITHOUT_CLASSIFICATION	2.0526167822857092E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999475149890172	WITHOUT_CLASSIFICATION	5.24850109826273E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.999963816761783	WITHOUT_CLASSIFICATION	3.618323821700208E-5	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999888789492127	WITHOUT_CLASSIFICATION	1.1121050787360219E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999877209529526	WITHOUT_CLASSIFICATION	1.2279047047427383E-5	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999957476093287	WITHOUT_CLASSIFICATION	4.252390671285064E-6	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999912650821825	WITHOUT_CLASSIFICATION	8.73491781746802E-6	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.99999660805943	WITHOUT_CLASSIFICATION	3.3919405698769304E-6	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.999996317528212	WITHOUT_CLASSIFICATION	3.682471787840434E-6	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999969218422624	WITHOUT_CLASSIFICATION	3.0781577374882746E-6	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999961700950465	WITHOUT_CLASSIFICATION	3.829904953536619E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997731066321796	WITHOUT_CLASSIFICATION	2.26893367820524E-4	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999795529367792	WITHOUT_CLASSIFICATION	2.044706322075071E-5	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.999939948810713	WITHOUT_CLASSIFICATION	6.005118928693819E-5	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999993840152106	WITHOUT_CLASSIFICATION	6.159847894563467E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999993840152106	WITHOUT_CLASSIFICATION	6.159847894563467E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9998652114956414	WITHOUT_CLASSIFICATION	1.3478850435855733E-4	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9998652114956414	WITHOUT_CLASSIFICATION	1.3478850435855733E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999804249587906	WITHOUT_CLASSIFICATION	1.957504120935564E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999804249587906	WITHOUT_CLASSIFICATION	1.957504120935564E-5	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999996609060273	WITHOUT_CLASSIFICATION	3.390939726461272E-7	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999977006782522	WITHOUT_CLASSIFICATION	2.299321747893903E-6	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9992407474225147	WITHOUT_CLASSIFICATION	7.592525774853022E-4	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999986930513627	WITHOUT_CLASSIFICATION	1.3069486373692465E-6	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999986568489352	WITHOUT_CLASSIFICATION	1.3431510648536403E-6	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.999846321732365	WITHOUT_CLASSIFICATION	1.5367826763495053E-4	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999906382276845	WITHOUT_CLASSIFICATION	9.361772315471464E-6	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.999990640128743	WITHOUT_CLASSIFICATION	9.359871257066079E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999878013925962	WITHOUT_CLASSIFICATION	1.2198607403779035E-5	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999840611724008	WITHOUT_CLASSIFICATION	1.593882759915558E-5	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.999998929786806	WITHOUT_CLASSIFICATION	1.0702131939483114E-6	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.999968573468237	WITHOUT_CLASSIFICATION	3.1426531763023555E-5	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999870122341572	WITHOUT_CLASSIFICATION	1.2987765842702082E-5	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999945546433248	WITHOUT_CLASSIFICATION	5.445356675263526E-6	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999445521745944	WITHOUT_CLASSIFICATION	5.544782540549863E-5	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999059368016818	WITHOUT_CLASSIFICATION	9.406319831807897E-5	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999986535591866	WITHOUT_CLASSIFICATION	1.3464408133339858E-6	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999385541596648	WITHOUT_CLASSIFICATION	6.144584033521895E-5	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999975331924065	WITHOUT_CLASSIFICATION	2.4668075935074407E-6	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999280306479376	WITHOUT_CLASSIFICATION	7.196935206243329E-5	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999045499521223	WITHOUT_CLASSIFICATION	9.545004787762227E-5	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999958552517718	WITHOUT_CLASSIFICATION	4.144748228112692E-6	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999535475196502	WITHOUT_CLASSIFICATION	4.645248034995793E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999878615828481	WITHOUT_CLASSIFICATION	1.2138417151814117E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999716977731135	WITHOUT_CLASSIFICATION	2.830222688659405E-5	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999950657996854	WITHOUT_CLASSIFICATION	4.934200314558983E-6	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999196993499394	WITHOUT_CLASSIFICATION	8.030065006067775E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999946734775411	WITHOUT_CLASSIFICATION	5.326522458871753E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999946734775411	WITHOUT_CLASSIFICATION	5.326522458871753E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999946734775411	WITHOUT_CLASSIFICATION	5.326522458871753E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999986686348269	WITHOUT_CLASSIFICATION	1.3313651730918578E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999986686348269	WITHOUT_CLASSIFICATION	1.3313651730918578E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999187032132112	WITHOUT_CLASSIFICATION	8.129678678879177E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999187032132112	WITHOUT_CLASSIFICATION	8.129678678879177E-5	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.99997720089253	WITHOUT_CLASSIFICATION	2.2799107470027848E-5	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9990163374624503	WITHOUT_CLASSIFICATION	9.836625375497013E-4	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999900332173687	WITHOUT_CLASSIFICATION	9.96678263130976E-6	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999261616253119	WITHOUT_CLASSIFICATION	7.383837468809759E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999946734775411	WITHOUT_CLASSIFICATION	5.326522458871753E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999946734775411	WITHOUT_CLASSIFICATION	5.326522458871753E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999946734775411	WITHOUT_CLASSIFICATION	5.326522458871753E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999986686348269	WITHOUT_CLASSIFICATION	1.3313651730918578E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999986686348269	WITHOUT_CLASSIFICATION	1.3313651730918578E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999986686348269	WITHOUT_CLASSIFICATION	1.3313651730918578E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999187032132112	WITHOUT_CLASSIFICATION	8.129678678879177E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999187032132112	WITHOUT_CLASSIFICATION	8.129678678879177E-5	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.999998926885445	WITHOUT_CLASSIFICATION	1.073114555079082E-6	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999905528468476	WITHOUT_CLASSIFICATION	9.44715315242066E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999043876433	WITHOUT_CLASSIFICATION	9.561235677682091E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999043876433	WITHOUT_CLASSIFICATION	9.561235677682091E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999043876433	WITHOUT_CLASSIFICATION	9.561235677682091E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999043876433	WITHOUT_CLASSIFICATION	9.561235677682091E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999043876433	WITHOUT_CLASSIFICATION	9.561235677682091E-8	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.99998774817147	WITHOUT_CLASSIFICATION	1.2251828530030763E-5	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999744899471381	WITHOUT_CLASSIFICATION	2.551005286193862E-5	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9999654994975598	WITHOUT_CLASSIFICATION	3.450050244020095E-5	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.999972340246063	WITHOUT_CLASSIFICATION	2.765975393712123E-5	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9998842807655647	WITHOUT_CLASSIFICATION	1.1571923443528368E-4	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999986589273784	WITHOUT_CLASSIFICATION	1.3410726216283422E-6	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999650356405313	WITHOUT_CLASSIFICATION	3.496435946883477E-5	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999688104916694	WITHOUT_CLASSIFICATION	3.118950833066549E-5	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999787990349316	WITHOUT_CLASSIFICATION	2.1200965068385188E-5	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999912303484202	WITHOUT_CLASSIFICATION	8.769651579760636E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.999944626308678	WITHOUT_CLASSIFICATION	5.537369132202528E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9993354526361266	WITHOUT_CLASSIFICATION	6.645473638733568E-4	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9998708332651746	WITHOUT_CLASSIFICATION	1.2916673482545456E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999577451580259	WITHOUT_CLASSIFICATION	4.225484197402022E-5	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999576210556095	WITHOUT_CLASSIFICATION	4.237894439050657E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9997384783963573	WITHOUT_CLASSIFICATION	2.6152160364267954E-4	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9997384783963573	WITHOUT_CLASSIFICATION	2.6152160364267954E-4	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9997384783963573	WITHOUT_CLASSIFICATION	2.6152160364267954E-4	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999946328658172	WITHOUT_CLASSIFICATION	5.3671341827524545E-6	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999946322336727	WITHOUT_CLASSIFICATION	5.36776632726548E-6	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999712048855586	WITHOUT_CLASSIFICATION	2.879511444135185E-5	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999635264786882	WITHOUT_CLASSIFICATION	3.64735213118418E-5	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999916869717316	WITHOUT_CLASSIFICATION	8.313028268405637E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999966570600981	WITHOUT_CLASSIFICATION	3.342939901793729E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999924592512296	WITHOUT_CLASSIFICATION	7.540748770397617E-6	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999961944618899	WITHOUT_CLASSIFICATION	3.8055381100784126E-6	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999971516249476	WITHOUT_CLASSIFICATION	2.848375052394247E-6	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999958086063216	WITHOUT_CLASSIFICATION	4.191393678298722E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999927561061878	WITHOUT_CLASSIFICATION	7.243893812237654E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.999996261995962	WITHOUT_CLASSIFICATION	3.7380040380546176E-6	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999881887054142	WITHOUT_CLASSIFICATION	1.181129458572141E-5	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999932541222603	WITHOUT_CLASSIFICATION	6.745877739732854E-6	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999917050053838	WITHOUT_CLASSIFICATION	8.294994616199501E-6	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.999953144742833	WITHOUT_CLASSIFICATION	4.685525716695576E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999466655498627	WITHOUT_CLASSIFICATION	5.333445013727519E-5	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999800771287842	WITHOUT_CLASSIFICATION	1.992287121577046E-5	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999260101705906	WITHOUT_CLASSIFICATION	7.398982940948062E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999653713189018	WITHOUT_CLASSIFICATION	3.46286810981784E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9999944146700217	WITHOUT_CLASSIFICATION	5.585329978290462E-6	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999896221899754	WITHOUT_CLASSIFICATION	1.037781002455236E-5	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9999951795729433	WITHOUT_CLASSIFICATION	4.820427056772506E-6	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999868343231944	WITHOUT_CLASSIFICATION	1.3165676805569147E-5	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999105823028133	WITHOUT_CLASSIFICATION	8.941769718673564E-5	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999142260769855	WITHOUT_CLASSIFICATION	8.577392301453471E-5	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999533074622703	WITHOUT_CLASSIFICATION	4.6692537729792944E-5	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999527618756175	WITHOUT_CLASSIFICATION	4.723812438237454E-5	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999383582624126	WITHOUT_CLASSIFICATION	6.164173758737311E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.999088425360608	WITHOUT_CLASSIFICATION	9.115746393918958E-4	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9992976056804739	WITHOUT_CLASSIFICATION	7.023943195261697E-4	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9992560459240939	WITHOUT_CLASSIFICATION	7.439540759061592E-4	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9990129436838604	WITHOUT_CLASSIFICATION	9.870563161396614E-4	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9992262648790918	WITHOUT_CLASSIFICATION	7.737351209080927E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9991669176461656	WITHOUT_CLASSIFICATION	8.330823538344278E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9992476901280631	WITHOUT_CLASSIFICATION	7.523098719369373E-4	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999918046142385	WITHOUT_CLASSIFICATION	8.19538576142274E-6	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999816787278967	WITHOUT_CLASSIFICATION	1.8321272103272476E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999284593917	WITHOUT_CLASSIFICATION	7.1540608248893E-8	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.999638589266774	WITHOUT_CLASSIFICATION	3.61410733226111E-4	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999774990442585	WITHOUT_CLASSIFICATION	2.250095574141286E-5	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9999981294559561	WITHOUT_CLASSIFICATION	1.8705440438934556E-6	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999952536667612	WITHOUT_CLASSIFICATION	4.746333238776247E-6	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999855972871318	WITHOUT_CLASSIFICATION	1.4402712868140783E-5	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9996503935587695	WITHOUT_CLASSIFICATION	3.496064412305245E-4	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9969883230216755	WITHOUT_CLASSIFICATION	0.0030116769783245212	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999358529436457	WITHOUT_CLASSIFICATION	6.41470563542751E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999358529436457	WITHOUT_CLASSIFICATION	6.41470563542751E-5	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999899836385205	WITHOUT_CLASSIFICATION	1.0016361479461658E-5	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.999993320453757	WITHOUT_CLASSIFICATION	6.679546243009586E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9968692288974553	WITHOUT_CLASSIFICATION	0.003130771102544655	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9995445078368662	WITHOUT_CLASSIFICATION	4.554921631337112E-4	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999782494220305	WITHOUT_CLASSIFICATION	2.1750577969477518E-5	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999897634220598	WITHOUT_CLASSIFICATION	1.023657794024237E-5	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.999821234827424	WITHOUT_CLASSIFICATION	1.7876517257599408E-4	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999687456441909	WITHOUT_CLASSIFICATION	3.125435580913375E-5	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999870876649977	WITHOUT_CLASSIFICATION	1.2912335002423354E-5	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999573355712578	WITHOUT_CLASSIFICATION	4.2664428742251076E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999618154508496	WITHOUT_CLASSIFICATION	3.8184549150420326E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999618154508496	WITHOUT_CLASSIFICATION	3.8184549150420326E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999618154508496	WITHOUT_CLASSIFICATION	3.8184549150420326E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999618154508496	WITHOUT_CLASSIFICATION	3.8184549150420326E-5	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999149387618668	WITHOUT_CLASSIFICATION	8.506123813323976E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9998521251303467	WITHOUT_CLASSIFICATION	1.4787486965331623E-4	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999250937655242	WITHOUT_CLASSIFICATION	7.490623447581351E-5	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999363310377294	WITHOUT_CLASSIFICATION	6.366896227061194E-5	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9999429819008695	WITHOUT_CLASSIFICATION	5.701809913047921E-5	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.999986285785924	WITHOUT_CLASSIFICATION	1.3714214075913967E-5	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999527116174826	WITHOUT_CLASSIFICATION	4.728838251744623E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999936273618305	WITHOUT_CLASSIFICATION	6.372638169529069E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999936273618305	WITHOUT_CLASSIFICATION	6.372638169529069E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999998558523463	WITHOUT_CLASSIFICATION	1.4414765372445641E-7	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9998975515764819	WITHOUT_CLASSIFICATION	1.0244842351813978E-4	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999917577071947	WITHOUT_CLASSIFICATION	8.242292805316443E-6	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999981577108805	WITHOUT_CLASSIFICATION	1.8422891194829485E-6	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999981577108805	WITHOUT_CLASSIFICATION	1.8422891194829485E-6	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9999986009294889	WITHOUT_CLASSIFICATION	1.3990705110787045E-6	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999964744760037	WITHOUT_CLASSIFICATION	3.525523996328059E-6	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999964744760037	WITHOUT_CLASSIFICATION	3.525523996328059E-6	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9999476752527128	WITHOUT_CLASSIFICATION	5.232474728731886E-5	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999998358664692	WITHOUT_CLASSIFICATION	1.641335307169304E-7	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999996166363959	WITHOUT_CLASSIFICATION	3.833636039865531E-7	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9999989830335391	WITHOUT_CLASSIFICATION	1.0169664609433286E-6	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999968624557277	WITHOUT_CLASSIFICATION	3.1375442723389857E-6	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999946315107625	WITHOUT_CLASSIFICATION	5.368489237449262E-6	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.999998738662388	WITHOUT_CLASSIFICATION	1.261337612004215E-6	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9998869698596664	WITHOUT_CLASSIFICATION	1.1303014033366093E-4	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999977394120326	WITHOUT_CLASSIFICATION	2.260587967406479E-6	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999748380861798	WITHOUT_CLASSIFICATION	2.5161913820199153E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999594276934961	WITHOUT_CLASSIFICATION	4.057230650388882E-5	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999871671684264	WITHOUT_CLASSIFICATION	1.2832831573628816E-5	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.999904865417082	WITHOUT_CLASSIFICATION	9.513458291793719E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9998837043930318	WITHOUT_CLASSIFICATION	1.162956069681981E-4	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999856178543202	WITHOUT_CLASSIFICATION	1.4382145679967993E-5	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999979369381603	WITHOUT_CLASSIFICATION	2.0630618397588983E-6	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9998820511059977	WITHOUT_CLASSIFICATION	1.1794889400227588E-4	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999844215829361	WITHOUT_CLASSIFICATION	1.5578417063905427E-5	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999944723225402	WITHOUT_CLASSIFICATION	5.527677459756234E-6	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9999725709539077	WITHOUT_CLASSIFICATION	2.7429046092325443E-5	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9999844245558381	WITHOUT_CLASSIFICATION	1.557544416188507E-5	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999981336169161	WITHOUT_CLASSIFICATION	1.8663830838080368E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999972294543165	WITHOUT_CLASSIFICATION	2.770545683459011E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9992522552684459	WITHOUT_CLASSIFICATION	7.477447315542474E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.999997637489742	WITHOUT_CLASSIFICATION	2.3625102579618886E-6	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9999740135912674	WITHOUT_CLASSIFICATION	2.5986408732661566E-5	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999344409077715	WITHOUT_CLASSIFICATION	6.555909222852235E-5	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999765304777821	WITHOUT_CLASSIFICATION	2.3469522217802565E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.999999362575034	WITHOUT_CLASSIFICATION	6.374249660353505E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999920287353177	WITHOUT_CLASSIFICATION	7.971264682374117E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9998566567745845	WITHOUT_CLASSIFICATION	1.43343225415493E-4	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999944613474747	WITHOUT_CLASSIFICATION	5.538652525194722E-6	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9999932502840413	WITHOUT_CLASSIFICATION	6.749715958781281E-6	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999794546405396	WITHOUT_CLASSIFICATION	2.054535946031883E-5	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999960229049311	WITHOUT_CLASSIFICATION	3.977095068965315E-6	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999505547378761	WITHOUT_CLASSIFICATION	4.9445262123989E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9994443164667511	WITHOUT_CLASSIFICATION	5.556835332488652E-4	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999957445432678	WITHOUT_CLASSIFICATION	4.255456732186368E-6	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999953824667313	WITHOUT_CLASSIFICATION	4.6175332687799905E-6	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999505547378761	WITHOUT_CLASSIFICATION	4.9445262123989E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9994443164667511	WITHOUT_CLASSIFICATION	5.556835332488652E-4	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999863652935845	WITHOUT_CLASSIFICATION	1.3634706415385747E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999365851996677	WITHOUT_CLASSIFICATION	6.341480033238401E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999365851996677	WITHOUT_CLASSIFICATION	6.341480033238401E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999587758412133	WITHOUT_CLASSIFICATION	4.122415878673268E-5	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999983857749754	WITHOUT_CLASSIFICATION	1.614225024677733E-6	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9997681417828215	WITHOUT_CLASSIFICATION	2.3185821717848588E-4	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9998484321806889	WITHOUT_CLASSIFICATION	1.515678193111933E-4	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9998186503074529	WITHOUT_CLASSIFICATION	1.8134969254705123E-4	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9999443604166727	WITHOUT_CLASSIFICATION	5.5639583327197974E-5	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999759779552284	WITHOUT_CLASSIFICATION	2.4022044771608582E-5	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999944918522743	WITHOUT_CLASSIFICATION	5.508147725774202E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999932079529813	WITHOUT_CLASSIFICATION	6.792047018703155E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9998721870479081	WITHOUT_CLASSIFICATION	1.278129520918595E-4	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999973678103756	WITHOUT_CLASSIFICATION	2.6321896242990255E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999826803971685	WITHOUT_CLASSIFICATION	1.7319602831449115E-5	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.999954665615923	WITHOUT_CLASSIFICATION	4.533438407703807E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999748464051028	WITHOUT_CLASSIFICATION	2.515359489723904E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999748464051028	WITHOUT_CLASSIFICATION	2.515359489723904E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999736271530106	WITHOUT_CLASSIFICATION	2.6372846989384978E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999736271530106	WITHOUT_CLASSIFICATION	2.6372846989384978E-5	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999763894329107	WITHOUT_CLASSIFICATION	2.3610567089264886E-5	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.999993177149383	WITHOUT_CLASSIFICATION	6.822850617002716E-6	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999712308465902	WITHOUT_CLASSIFICATION	2.8769153409844847E-5	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999151965615405	WITHOUT_CLASSIFICATION	8.48034384595454E-5	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999286211748902	WITHOUT_CLASSIFICATION	7.137882510972568E-5	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999774095967372	WITHOUT_CLASSIFICATION	2.2590403262826485E-5	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9997681417828215	WITHOUT_CLASSIFICATION	2.3185821717848588E-4	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9998484321806889	WITHOUT_CLASSIFICATION	1.515678193111933E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999932079529813	WITHOUT_CLASSIFICATION	6.792047018703155E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9998721870479081	WITHOUT_CLASSIFICATION	1.278129520918595E-4	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999959978655412	WITHOUT_CLASSIFICATION	4.002134458795053E-6	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.999994502203613	WITHOUT_CLASSIFICATION	5.4977963870811574E-6	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999823518127544	WITHOUT_CLASSIFICATION	1.7648187245605123E-4	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999787967414333	WITHOUT_CLASSIFICATION	2.1203258566654114E-5	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999860687713319	WITHOUT_CLASSIFICATION	1.3931228668203179E-5	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999867472676763	WITHOUT_CLASSIFICATION	1.3252732323639361E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9999851030574551	WITHOUT_CLASSIFICATION	1.4896942544949434E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999194415407867	WITHOUT_CLASSIFICATION	8.055845921327913E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999982931955987	WITHOUT_CLASSIFICATION	1.706804401238423E-6	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999858613014981	WITHOUT_CLASSIFICATION	1.4138698501825676E-5	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999996369520044	WITHOUT_CLASSIFICATION	3.630479955707589E-7	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999962157180987	WITHOUT_CLASSIFICATION	3.7842819012723522E-6	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999846657458438	WITHOUT_CLASSIFICATION	1.5334254156193052E-5	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999843833586225	WITHOUT_CLASSIFICATION	1.561664137742087E-5	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.99999170802699	WITHOUT_CLASSIFICATION	8.291973009953285E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999996469864253	WITHOUT_CLASSIFICATION	3.5301357469863574E-7	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9998201765633389	WITHOUT_CLASSIFICATION	1.7982343666112356E-4	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9998276715581678	WITHOUT_CLASSIFICATION	1.7232844183230424E-4	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9997922510911209	WITHOUT_CLASSIFICATION	2.0774890887894867E-4	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999398499651001	WITHOUT_CLASSIFICATION	6.015003489990403E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999458474947523	WITHOUT_CLASSIFICATION	5.4152505247716385E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999458474947523	WITHOUT_CLASSIFICATION	5.4152505247716385E-5	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9997474991995839	WITHOUT_CLASSIFICATION	2.525008004160385E-4	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9998194599060591	WITHOUT_CLASSIFICATION	1.8054009394079492E-4	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999772178105413	WITHOUT_CLASSIFICATION	2.2782189458810104E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999881577904378	WITHOUT_CLASSIFICATION	1.1842209562275637E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999881577904378	WITHOUT_CLASSIFICATION	1.1842209562275637E-5	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999823518127544	WITHOUT_CLASSIFICATION	1.7648187245605123E-4	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.999959685382841	WITHOUT_CLASSIFICATION	4.031461715911002E-5	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999864729380955	WITHOUT_CLASSIFICATION	1.3527061904455375E-5	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999824316003615	WITHOUT_CLASSIFICATION	1.756839963856066E-5	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999760588656075	WITHOUT_CLASSIFICATION	2.3941134392599148E-5	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999939452468121	WITHOUT_CLASSIFICATION	6.054753187941584E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994475199368366	WITHOUT_CLASSIFICATION	5.524800631634278E-4	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999879123494663	WITHOUT_CLASSIFICATION	1.2087650533631358E-5	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999643534344882	WITHOUT_CLASSIFICATION	3.564656551174366E-5	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999760567149794	WITHOUT_CLASSIFICATION	2.394328502055934E-5	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999894067879768	WITHOUT_CLASSIFICATION	1.0593212023294678E-5	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9997768211991575	WITHOUT_CLASSIFICATION	2.2317880084268203E-4	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999352263077707	WITHOUT_CLASSIFICATION	6.477369222930147E-5	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999711163401267	WITHOUT_CLASSIFICATION	2.8883659873253385E-5	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999622177323162	WITHOUT_CLASSIFICATION	3.778226768385403E-5	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999493612564517	WITHOUT_CLASSIFICATION	5.063874354837267E-5	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9997738147244014	WITHOUT_CLASSIFICATION	2.2618527559867328E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999647511122535	WITHOUT_CLASSIFICATION	3.524888774648434E-5	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999982959267095	WITHOUT_CLASSIFICATION	1.7040732904629766E-6	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999981068484224	WITHOUT_CLASSIFICATION	1.8931515776878148E-6	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999993865029273	WITHOUT_CLASSIFICATION	6.134970727317036E-7	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999693909604331	WITHOUT_CLASSIFICATION	3.0609039566840626E-5	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999795671008145	WITHOUT_CLASSIFICATION	2.0432899185505653E-5	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999850199496031	WITHOUT_CLASSIFICATION	1.4980050396845802E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999768300153365	WITHOUT_CLASSIFICATION	2.316998466339564E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999873497562307	WITHOUT_CLASSIFICATION	1.2650243769227842E-5	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999988070897093	WITHOUT_CLASSIFICATION	1.1929102906438853E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.999946697862798	WITHOUT_CLASSIFICATION	5.33021372019828E-5	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999991037072898	WITHOUT_CLASSIFICATION	8.962927100365765E-7	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999940953757531	WITHOUT_CLASSIFICATION	5.90462424694605E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.999984465331365	WITHOUT_CLASSIFICATION	1.5534668635049567E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.999984465331365	WITHOUT_CLASSIFICATION	1.5534668635049567E-5	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999967457428593	WITHOUT_CLASSIFICATION	3.254257140729391E-6	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999703322717836	WITHOUT_CLASSIFICATION	2.9667728216418646E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999703322717836	WITHOUT_CLASSIFICATION	2.9667728216418646E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999956733228393	WITHOUT_CLASSIFICATION	4.326677160585863E-6	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999956733228393	WITHOUT_CLASSIFICATION	4.326677160585863E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999971809072897	WITHOUT_CLASSIFICATION	2.819092710308192E-5	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.999948553719902	WITHOUT_CLASSIFICATION	5.1446280097925114E-5	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.999996930315071	WITHOUT_CLASSIFICATION	3.0696849289855054E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9998942767355548	WITHOUT_CLASSIFICATION	1.0572326444513257E-4	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999974827580361	WITHOUT_CLASSIFICATION	2.517241963815671E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999240033451137	WITHOUT_CLASSIFICATION	7.59966548862208E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999240033451137	WITHOUT_CLASSIFICATION	7.59966548862208E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999768300153365	WITHOUT_CLASSIFICATION	2.316998466339564E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999768300153365	WITHOUT_CLASSIFICATION	2.316998466339564E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999768300153365	WITHOUT_CLASSIFICATION	2.316998466339564E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999873497562307	WITHOUT_CLASSIFICATION	1.2650243769227842E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.999984465331365	WITHOUT_CLASSIFICATION	1.5534668635049567E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.999984465331365	WITHOUT_CLASSIFICATION	1.5534668635049567E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.999984465331365	WITHOUT_CLASSIFICATION	1.5534668635049567E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999971809072897	WITHOUT_CLASSIFICATION	2.819092710308192E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999971809072897	WITHOUT_CLASSIFICATION	2.819092710308192E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999971809072897	WITHOUT_CLASSIFICATION	2.819092710308192E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9998942767355548	WITHOUT_CLASSIFICATION	1.0572326444513257E-4	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9998942767355548	WITHOUT_CLASSIFICATION	1.0572326444513257E-4	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999888177208275	WITHOUT_CLASSIFICATION	1.118227917262177E-5	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999983326295213	WITHOUT_CLASSIFICATION	1.6673704786893573E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.999998352673951	WITHOUT_CLASSIFICATION	1.647326048916399E-6	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.9999837734290011	WITHOUT_CLASSIFICATION	1.622657099879756E-5	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9997489870689283	WITHOUT_CLASSIFICATION	2.5101293107165283E-4	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999486475497092	WITHOUT_CLASSIFICATION	5.1352450290855844E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999486475497092	WITHOUT_CLASSIFICATION	5.1352450290855844E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999717661093785	WITHOUT_CLASSIFICATION	2.823389062151982E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994475199368366	WITHOUT_CLASSIFICATION	5.524800631634278E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994475199368366	WITHOUT_CLASSIFICATION	5.524800631634278E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994475199368366	WITHOUT_CLASSIFICATION	5.524800631634278E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994475199368366	WITHOUT_CLASSIFICATION	5.524800631634278E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994475199368366	WITHOUT_CLASSIFICATION	5.524800631634278E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999984952534638	WITHOUT_CLASSIFICATION	1.5047465361718124E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999984952534638	WITHOUT_CLASSIFICATION	1.5047465361718124E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999984952534638	WITHOUT_CLASSIFICATION	1.5047465361718124E-6	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9998416045561757	WITHOUT_CLASSIFICATION	1.5839544382436176E-4	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999382084958539	WITHOUT_CLASSIFICATION	6.179150414611002E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999873497562307	WITHOUT_CLASSIFICATION	1.2650243769227842E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999971809072897	WITHOUT_CLASSIFICATION	2.819092710308192E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999971809072897	WITHOUT_CLASSIFICATION	2.819092710308192E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994475199368366	WITHOUT_CLASSIFICATION	5.524800631634278E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994475199368366	WITHOUT_CLASSIFICATION	5.524800631634278E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999984952534638	WITHOUT_CLASSIFICATION	1.5047465361718124E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999717661093785	WITHOUT_CLASSIFICATION	2.823389062151982E-5	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999897315634453	WITHOUT_CLASSIFICATION	1.026843655475973E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999659780030763	WITHOUT_CLASSIFICATION	3.402199692372405E-5	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999990744159787	WITHOUT_CLASSIFICATION	9.255840212615628E-7	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.999987951061146	WITHOUT_CLASSIFICATION	1.2048938853976605E-5	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999483353627098	WITHOUT_CLASSIFICATION	5.1664637290358986E-5	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999581563972353	WITHOUT_CLASSIFICATION	4.184360276478171E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999869669775938	WITHOUT_CLASSIFICATION	1.303302240620024E-4	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999462718660623	WITHOUT_CLASSIFICATION	5.3728133937773203E-5	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999915050364947	WITHOUT_CLASSIFICATION	8.494963505290306E-6	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.999992530972438	WITHOUT_CLASSIFICATION	7.46902756201645E-6	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999954602389585	WITHOUT_CLASSIFICATION	4.539761041479606E-6	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999882497969457	WITHOUT_CLASSIFICATION	1.175020305430291E-5	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999771101425399	WITHOUT_CLASSIFICATION	2.2889857460120896E-5	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999903764458913	WITHOUT_CLASSIFICATION	9.623554108685599E-6	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999810029927511	WITHOUT_CLASSIFICATION	1.8997007248949245E-5	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999911013387855	WITHOUT_CLASSIFICATION	8.898661214422154E-6	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999751724615876	WITHOUT_CLASSIFICATION	2.482753841234719E-5	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999993646232548	WITHOUT_CLASSIFICATION	6.353767451883881E-7	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999022377078429	WITHOUT_CLASSIFICATION	9.776229215707123E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999922103170839	WITHOUT_CLASSIFICATION	7.78968291622861E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9998961781523998	WITHOUT_CLASSIFICATION	1.0382184760017099E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9998457645487544	WITHOUT_CLASSIFICATION	1.542354512455717E-4	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999716354679461	WITHOUT_CLASSIFICATION	2.836453205396755E-5	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.999996147492614	WITHOUT_CLASSIFICATION	3.852507385928046E-6	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9994326184043484	WITHOUT_CLASSIFICATION	5.673815956517204E-4	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999745267042113	WITHOUT_CLASSIFICATION	2.5473295788693226E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999783973112023	WITHOUT_CLASSIFICATION	2.160268879768189E-5	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999558155556106	WITHOUT_CLASSIFICATION	4.4184444389394E-5	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999553068183714	WITHOUT_CLASSIFICATION	4.469318162850294E-5	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999811225829738	WITHOUT_CLASSIFICATION	1.8877417026157627E-5	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999995769462929	WITHOUT_CLASSIFICATION	4.2305370699263973E-7	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999998466889131	WITHOUT_CLASSIFICATION	1.5331108696434189E-7	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999937119799418	WITHOUT_CLASSIFICATION	6.288020058261445E-6	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999949719141044	WITHOUT_CLASSIFICATION	5.028085895574124E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999897315634453	WITHOUT_CLASSIFICATION	1.026843655475973E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.999996732446532	WITHOUT_CLASSIFICATION	3.2675534679271556E-6	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999683859076062	WITHOUT_CLASSIFICATION	3.161409239394223E-5	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9999984943942929	WITHOUT_CLASSIFICATION	1.505605707083684E-6	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999676092148975	WITHOUT_CLASSIFICATION	3.23907851024829E-5	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999676092148975	WITHOUT_CLASSIFICATION	3.23907851024829E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999059790241371	WITHOUT_CLASSIFICATION	9.402097586291655E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999059790241371	WITHOUT_CLASSIFICATION	9.402097586291655E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999762281248749	WITHOUT_CLASSIFICATION	2.377187512510393E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.999995111209132	WITHOUT_CLASSIFICATION	4.888790868043317E-6	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999024962845531	WITHOUT_CLASSIFICATION	9.750371544697517E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999434718223348	WITHOUT_CLASSIFICATION	5.6528177665183345E-5	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999754416430967	WITHOUT_CLASSIFICATION	2.455835690321231E-5	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999945130168258	WITHOUT_CLASSIFICATION	5.486983174089383E-6	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999808100317381	WITHOUT_CLASSIFICATION	1.918996826190743E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999885708816293	WITHOUT_CLASSIFICATION	1.1429118370751274E-5	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999877198198567	WITHOUT_CLASSIFICATION	1.228018014340459E-5	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999944585792876	WITHOUT_CLASSIFICATION	5.541420712364642E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999914992624823	WITHOUT_CLASSIFICATION	8.500737517789224E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999961300363377	WITHOUT_CLASSIFICATION	3.8699636623169164E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999961300363377	WITHOUT_CLASSIFICATION	3.8699636623169164E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999652055197322	WITHOUT_CLASSIFICATION	3.4794480267724874E-5	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999992882391319	WITHOUT_CLASSIFICATION	7.117608682393335E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999935709628519	WITHOUT_CLASSIFICATION	6.4290371481758706E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999935709628519	WITHOUT_CLASSIFICATION	6.4290371481758706E-6	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9998254086530768	WITHOUT_CLASSIFICATION	1.7459134692324023E-4	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999960828635779	WITHOUT_CLASSIFICATION	3.917136422086572E-6	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999390420831089	WITHOUT_CLASSIFICATION	6.0957916890970035E-5	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9997408751603635	WITHOUT_CLASSIFICATION	2.5912483963642783E-4	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999840374274256	WITHOUT_CLASSIFICATION	1.596257257443303E-5	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999651976868015	WITHOUT_CLASSIFICATION	3.480231319855977E-5	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999813793293462	WITHOUT_CLASSIFICATION	1.8620670653819817E-5	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999802834707289	WITHOUT_CLASSIFICATION	1.97165292710925E-5	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9998725918057139	WITHOUT_CLASSIFICATION	1.2740819428610605E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999021973481815	WITHOUT_CLASSIFICATION	9.780265181856915E-5	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.999992900551224	WITHOUT_CLASSIFICATION	7.0994487760458195E-6	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999960198843625	WITHOUT_CLASSIFICATION	3.980115637450705E-6	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999985404886538	WITHOUT_CLASSIFICATION	1.4595113462107776E-6	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999789981006884	WITHOUT_CLASSIFICATION	2.1001899311615737E-5	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999863443303806	WITHOUT_CLASSIFICATION	1.3655669619428066E-5	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9999945735809943	WITHOUT_CLASSIFICATION	5.4264190056801425E-6	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999847951969858	WITHOUT_CLASSIFICATION	1.520480301410179E-5	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999953420601977	WITHOUT_CLASSIFICATION	4.657939802256185E-6	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999902242883202	WITHOUT_CLASSIFICATION	9.77571167988944E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999900930037434	WITHOUT_CLASSIFICATION	9.906996256614246E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9999741151196504	WITHOUT_CLASSIFICATION	2.5884880349649182E-5	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999876295333489	WITHOUT_CLASSIFICATION	1.2370466651087272E-5	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999774046939336	WITHOUT_CLASSIFICATION	2.259530606640876E-5	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.99999496566899	WITHOUT_CLASSIFICATION	5.034331010054299E-6	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999144732251629	WITHOUT_CLASSIFICATION	8.552677483707431E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999882533898529	WITHOUT_CLASSIFICATION	1.1746610147232801E-5	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999644399434718	WITHOUT_CLASSIFICATION	3.556005652821493E-5	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999838642703165	WITHOUT_CLASSIFICATION	1.6135729683503236E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999642372094395	WITHOUT_CLASSIFICATION	3.576279056050796E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999975759265288	WITHOUT_CLASSIFICATION	2.4240734712706065E-6	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999854386705628	WITHOUT_CLASSIFICATION	1.4561329437215532E-5	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999887426345447	WITHOUT_CLASSIFICATION	1.1257365455370363E-5	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999989711423057	WITHOUT_CLASSIFICATION	1.0288576942563171E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9998071246074486	WITHOUT_CLASSIFICATION	1.9287539255145975E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9998071246074486	WITHOUT_CLASSIFICATION	1.9287539255145975E-4	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.999991913565798	WITHOUT_CLASSIFICATION	8.086434202034867E-6	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999950493887289	WITHOUT_CLASSIFICATION	4.9506112711108415E-6	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999936709537125	WITHOUT_CLASSIFICATION	6.3290462875218195E-6	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999435140204977	WITHOUT_CLASSIFICATION	5.6485979502279855E-5	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.999906719677045	WITHOUT_CLASSIFICATION	9.328032295497913E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999861105166696	WITHOUT_CLASSIFICATION	1.3889483330377586E-5	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9999519585687955	WITHOUT_CLASSIFICATION	4.8041431204593045E-5	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9999494417224971	WITHOUT_CLASSIFICATION	5.055827750297656E-5	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9981850757066488	WITHOUT_CLASSIFICATION	0.001814924293351237	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.999852297839145	WITHOUT_CLASSIFICATION	1.477021608550409E-4	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999992145152512	WITHOUT_CLASSIFICATION	7.854847487864533E-7	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9999247709369803	WITHOUT_CLASSIFICATION	7.522906301968446E-5	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999242748975583	WITHOUT_CLASSIFICATION	7.572510244166442E-5	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999111737344315	WITHOUT_CLASSIFICATION	8.882626556848908E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999992191277334	WITHOUT_CLASSIFICATION	7.808722665680493E-7	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999885188332133	WITHOUT_CLASSIFICATION	1.1481166786711152E-5	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999952902166672	WITHOUT_CLASSIFICATION	4.709783332717105E-6	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.999981458703766	WITHOUT_CLASSIFICATION	1.85412962340528E-5	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999939920659539	WITHOUT_CLASSIFICATION	6.007934046100516E-6	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999940622918915	WITHOUT_CLASSIFICATION	5.937708108452615E-6	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999992138861854	WITHOUT_CLASSIFICATION	7.861138146075806E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.999959678327923	WITHOUT_CLASSIFICATION	4.0321672076958134E-5	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999803354226443	WITHOUT_CLASSIFICATION	1.9664577355682492E-5	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999608371158735	WITHOUT_CLASSIFICATION	3.916288412647985E-5	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999836058044115	WITHOUT_CLASSIFICATION	1.6394195588438074E-5	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999906774819087	WITHOUT_CLASSIFICATION	9.32251809123311E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999938164505576	WITHOUT_CLASSIFICATION	6.183549442295571E-6	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999906033917539	WITHOUT_CLASSIFICATION	9.396608246113105E-6	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9999508260439901	WITHOUT_CLASSIFICATION	4.917395600992844E-5	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9999698292163725	WITHOUT_CLASSIFICATION	3.0170783627531497E-5	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999677136355511	WITHOUT_CLASSIFICATION	3.228636444875522E-5	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999980389128965	WITHOUT_CLASSIFICATION	1.961087103551833E-6	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999427410040643	WITHOUT_CLASSIFICATION	5.7258995935692206E-5	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999944121257465	WITHOUT_CLASSIFICATION	5.587874253477487E-6	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9997425094406307	WITHOUT_CLASSIFICATION	2.5749055936924887E-4	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999932743821661	WITHOUT_CLASSIFICATION	6.725617833843014E-6	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999642851489543	WITHOUT_CLASSIFICATION	3.571485104565173E-5	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999603997133921	WITHOUT_CLASSIFICATION	3.9600286607928756E-5	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999606931283597	WITHOUT_CLASSIFICATION	3.930687164024658E-5	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999910267036315	WITHOUT_CLASSIFICATION	8.973296368478509E-6	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999731996648012	WITHOUT_CLASSIFICATION	2.680033519867178E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999620222128991	WITHOUT_CLASSIFICATION	3.797778710077373E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999620222128991	WITHOUT_CLASSIFICATION	3.797778710077373E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999149475331139	WITHOUT_CLASSIFICATION	8.505246688598754E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999945311038503	WITHOUT_CLASSIFICATION	5.4688961497082396E-6	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999323636016264	WITHOUT_CLASSIFICATION	6.76363983735419E-5	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999772777540036	WITHOUT_CLASSIFICATION	2.272224599647723E-5	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999735696300276	WITHOUT_CLASSIFICATION	2.6430369972405135E-5	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999981968565355	WITHOUT_CLASSIFICATION	1.8031434645113697E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9993068348274223	WITHOUT_CLASSIFICATION	6.931651725776636E-4	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9999989056384017	WITHOUT_CLASSIFICATION	1.0943615983422097E-6	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999940366491826	WITHOUT_CLASSIFICATION	5.963350817354867E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999952556992742	WITHOUT_CLASSIFICATION	4.744300725777443E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9998975315635699	WITHOUT_CLASSIFICATION	1.0246843643007593E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999969001713332	WITHOUT_CLASSIFICATION	3.0998286668212768E-6	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999898432225867	WITHOUT_CLASSIFICATION	1.0156777413436056E-5	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.999997998003553	WITHOUT_CLASSIFICATION	2.0019964469357665E-6	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.999990458958918	WITHOUT_CLASSIFICATION	9.541041081897005E-6	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9999011773778216	WITHOUT_CLASSIFICATION	9.882262217850846E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999972055021	WITHOUT_CLASSIFICATION	2.7944979000082138E-6	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9997908917124295	WITHOUT_CLASSIFICATION	2.0910828757058142E-4	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999985842752136	WITHOUT_CLASSIFICATION	1.4157247864151975E-6	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9997433302349102	WITHOUT_CLASSIFICATION	2.5666976508967033E-4	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999940205308618	WITHOUT_CLASSIFICATION	5.9794691381812385E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999344218770128	WITHOUT_CLASSIFICATION	6.557812298732589E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999934303249538	WITHOUT_CLASSIFICATION	6.569675046243236E-6	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.999999067007679	WITHOUT_CLASSIFICATION	9.329923209583257E-7	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999802891275893	WITHOUT_CLASSIFICATION	1.971087241069779E-5	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.999996058764958	WITHOUT_CLASSIFICATION	3.941235042055627E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999997591057301	WITHOUT_CLASSIFICATION	2.408942698721848E-7	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999964673446812	WITHOUT_CLASSIFICATION	3.5326553188316224E-6	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999634111336634	WITHOUT_CLASSIFICATION	3.65888663366197E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999622529369319	WITHOUT_CLASSIFICATION	3.774706306820902E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999651337316414	WITHOUT_CLASSIFICATION	3.486626835852577E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999927037853761	WITHOUT_CLASSIFICATION	7.296214623942104E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999622529369319	WITHOUT_CLASSIFICATION	3.774706306820902E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999938530161406	WITHOUT_CLASSIFICATION	6.146983859452922E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.999997637489742	WITHOUT_CLASSIFICATION	2.3625102579618886E-6	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9999945220768638	WITHOUT_CLASSIFICATION	5.477923136249009E-6	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.9998977336537294	WITHOUT_CLASSIFICATION	1.0226634627061818E-4	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999932575167769	WITHOUT_CLASSIFICATION	6.742483223145367E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999043876433	WITHOUT_CLASSIFICATION	9.561235677682091E-8	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999937780256438	WITHOUT_CLASSIFICATION	6.221974356253446E-6	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999192921677464	WITHOUT_CLASSIFICATION	8.070783225355345E-5	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999983857749754	WITHOUT_CLASSIFICATION	1.614225024677733E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999900930037434	WITHOUT_CLASSIFICATION	9.906996256614246E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.999998352673951	WITHOUT_CLASSIFICATION	1.647326048916399E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999139645801682	WITHOUT_CLASSIFICATION	8.603541983184621E-5	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999281174945099	WITHOUT_CLASSIFICATION	7.188250549003288E-5	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999949843889802	WITHOUT_CLASSIFICATION	5.015611019847671E-6	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9998918288242642	WITHOUT_CLASSIFICATION	1.0817117573584327E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999640977452756	WITHOUT_CLASSIFICATION	3.590225472434641E-5	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999981354548284	WITHOUT_CLASSIFICATION	1.864545171494104E-6	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999680759322134	WITHOUT_CLASSIFICATION	3.1924067786615874E-5	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9999963802477077	WITHOUT_CLASSIFICATION	3.6197522923711967E-6	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999991445329892	WITHOUT_CLASSIFICATION	8.554670109186762E-7	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999701240375553	WITHOUT_CLASSIFICATION	2.9875962444713567E-5	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999713021727283	WITHOUT_CLASSIFICATION	2.869782727161363E-5	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999639317783391	WITHOUT_CLASSIFICATION	3.60682216609956E-5	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999901530717985	WITHOUT_CLASSIFICATION	9.846928201484939E-6	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999591848344969	WITHOUT_CLASSIFICATION	4.0815165503107836E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9998774720445203	WITHOUT_CLASSIFICATION	1.2252795547975867E-4	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9998646802360323	WITHOUT_CLASSIFICATION	1.3531976396772134E-4	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999915456426853	WITHOUT_CLASSIFICATION	8.454357314778305E-6	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999926846869208	WITHOUT_CLASSIFICATION	7.3153130791022485E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998288861943884	WITHOUT_CLASSIFICATION	1.711138056116153E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998288861943884	WITHOUT_CLASSIFICATION	1.711138056116153E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998559123661933	WITHOUT_CLASSIFICATION	1.4408763380660262E-4	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.999996886151296	WITHOUT_CLASSIFICATION	3.1138487039589886E-6	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999996288638636	WITHOUT_CLASSIFICATION	3.711361364327681E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9996481380003386	WITHOUT_CLASSIFICATION	3.5186199966142484E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9996481380003386	WITHOUT_CLASSIFICATION	3.5186199966142484E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9996481380003386	WITHOUT_CLASSIFICATION	3.5186199966142484E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9996481380003386	WITHOUT_CLASSIFICATION	3.5186199966142484E-4	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999981041159519	WITHOUT_CLASSIFICATION	1.8958840481249878E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.999992737228899	WITHOUT_CLASSIFICATION	7.262771100994682E-6	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999686391094847	WITHOUT_CLASSIFICATION	3.1360890515289796E-5	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9999994960449655	WITHOUT_CLASSIFICATION	5.039550344979345E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999921526399154	WITHOUT_CLASSIFICATION	7.847360084705456E-6	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999865862025117	WITHOUT_CLASSIFICATION	1.341379748841019E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999226775522488	WITHOUT_CLASSIFICATION	7.732244775111479E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999226775522488	WITHOUT_CLASSIFICATION	7.732244775111479E-5	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9999974512224558	WITHOUT_CLASSIFICATION	2.5487775442347746E-6	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9992252454075854	WITHOUT_CLASSIFICATION	7.747545924146697E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999990148756219	WITHOUT_CLASSIFICATION	9.851243780708325E-7	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9999888478579345	WITHOUT_CLASSIFICATION	1.1152142065489887E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999932187464734	WITHOUT_CLASSIFICATION	6.781253526545978E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999887983953583	WITHOUT_CLASSIFICATION	1.1201604641802343E-5	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.999996547601067	WITHOUT_CLASSIFICATION	3.4523989328980736E-6	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999794319314472	WITHOUT_CLASSIFICATION	2.0568068552789554E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9994751085132205	WITHOUT_CLASSIFICATION	5.248914867794046E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9994751085132205	WITHOUT_CLASSIFICATION	5.248914867794046E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999927037853761	WITHOUT_CLASSIFICATION	7.296214623942104E-6	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9998708891828961	WITHOUT_CLASSIFICATION	1.2911081710385874E-4	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9998736861217563	WITHOUT_CLASSIFICATION	1.2631387824369448E-4	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.99997205277409	WITHOUT_CLASSIFICATION	2.7947225909997352E-5	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999969447897844	WITHOUT_CLASSIFICATION	3.055210215742131E-6	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9989767170546545	WITHOUT_CLASSIFICATION	0.0010232829453455355	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999820261295413	WITHOUT_CLASSIFICATION	1.7973870458660926E-5	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.999991818651926	WITHOUT_CLASSIFICATION	8.18134807393821E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999080772799197	WITHOUT_CLASSIFICATION	9.192272008021519E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999080772799197	WITHOUT_CLASSIFICATION	9.192272008021519E-5	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999986397132425	WITHOUT_CLASSIFICATION	1.3602867574766945E-6	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999997322644292	WITHOUT_CLASSIFICATION	2.6773557081593213E-7	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999977345154921	WITHOUT_CLASSIFICATION	2.265484507927249E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.99986749217695	WITHOUT_CLASSIFICATION	1.325078230499285E-4	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999946062836008	WITHOUT_CLASSIFICATION	5.393716399254893E-6	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9991382474983254	WITHOUT_CLASSIFICATION	8.617525016746977E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999949182450384	WITHOUT_CLASSIFICATION	5.081754961572433E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999972334519502	WITHOUT_CLASSIFICATION	2.7665480497920214E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999972334519502	WITHOUT_CLASSIFICATION	2.7665480497920214E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999972334519502	WITHOUT_CLASSIFICATION	2.7665480497920214E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999972334519502	WITHOUT_CLASSIFICATION	2.7665480497920214E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999740189892862	WITHOUT_CLASSIFICATION	2.598101071389013E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9999862499223611	WITHOUT_CLASSIFICATION	1.3750077638882086E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999747021937981	WITHOUT_CLASSIFICATION	2.5297806201921884E-5	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999983804043536	WITHOUT_CLASSIFICATION	1.61959564643791E-6	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999849320606345	WITHOUT_CLASSIFICATION	1.5067939365432507E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9992702371954493	WITHOUT_CLASSIFICATION	7.297628045507952E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999784410517405	WITHOUT_CLASSIFICATION	2.155894825952325E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999950595593943	WITHOUT_CLASSIFICATION	4.94044060574006E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999950595593943	WITHOUT_CLASSIFICATION	4.94044060574006E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999950595593943	WITHOUT_CLASSIFICATION	4.94044060574006E-6	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9998683950432181	WITHOUT_CLASSIFICATION	1.3160495678182397E-4	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999938170045218	WITHOUT_CLASSIFICATION	6.182995478103533E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999904517262187	WITHOUT_CLASSIFICATION	9.54827378132643E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999904517262187	WITHOUT_CLASSIFICATION	9.54827378132643E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9998461225892485	WITHOUT_CLASSIFICATION	1.538774107515488E-4	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999998552772654	WITHOUT_CLASSIFICATION	1.4472273463670758E-7	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.999999729564401	WITHOUT_CLASSIFICATION	2.704355990393965E-7	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9995057968887713	WITHOUT_CLASSIFICATION	4.942031112287693E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9994494185163209	WITHOUT_CLASSIFICATION	5.505814836792583E-4	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999831222220597	WITHOUT_CLASSIFICATION	1.6877777940360393E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999818418998669	WITHOUT_CLASSIFICATION	1.815810013301261E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999818418998669	WITHOUT_CLASSIFICATION	1.815810013301261E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999834759040622	WITHOUT_CLASSIFICATION	1.6524095937831057E-5	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.999998163119399	WITHOUT_CLASSIFICATION	1.8368806008691495E-6	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999901332501111	WITHOUT_CLASSIFICATION	9.86674988881719E-6	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.999859795064611	WITHOUT_CLASSIFICATION	1.4020493538899063E-4	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999897299252911	WITHOUT_CLASSIFICATION	1.0270074708820801E-5	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999944268848113	WITHOUT_CLASSIFICATION	5.573115188688718E-6	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999893051922824	WITHOUT_CLASSIFICATION	1.0694807717620266E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9997423608390955	WITHOUT_CLASSIFICATION	2.576391609044555E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999885097593086	WITHOUT_CLASSIFICATION	1.1490240691333712E-5	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999693639787931	WITHOUT_CLASSIFICATION	3.0636021206888983E-5	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999782831356149	WITHOUT_CLASSIFICATION	2.171686438511642E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999935050442559	WITHOUT_CLASSIFICATION	6.494955744213811E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9997985151224229	WITHOUT_CLASSIFICATION	2.0148487757712434E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999842313447442	WITHOUT_CLASSIFICATION	1.576865525580502E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999967264625138	WITHOUT_CLASSIFICATION	3.2735374862016107E-6	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999874064467872	WITHOUT_CLASSIFICATION	1.259355321281982E-5	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999956513401641	WITHOUT_CLASSIFICATION	4.348659835851863E-6	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999977663324332	WITHOUT_CLASSIFICATION	2.2336675667625247E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999913241402918	WITHOUT_CLASSIFICATION	8.675859708206247E-6	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999565691063145	WITHOUT_CLASSIFICATION	4.3430893685536275E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999674174128763	WITHOUT_CLASSIFICATION	3.258258712376966E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999984240966318	WITHOUT_CLASSIFICATION	1.5759033682546486E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999727339286058	WITHOUT_CLASSIFICATION	2.7266071394163594E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999727339286058	WITHOUT_CLASSIFICATION	2.7266071394163594E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999727339286058	WITHOUT_CLASSIFICATION	2.7266071394163594E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999727339286058	WITHOUT_CLASSIFICATION	2.7266071394163594E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999727339286058	WITHOUT_CLASSIFICATION	2.7266071394163594E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999727339286058	WITHOUT_CLASSIFICATION	2.7266071394163594E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999727339286058	WITHOUT_CLASSIFICATION	2.7266071394163594E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999727339286058	WITHOUT_CLASSIFICATION	2.7266071394163594E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999988061715673	WITHOUT_CLASSIFICATION	1.1938284326877468E-6	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9996862502962488	WITHOUT_CLASSIFICATION	3.1374970375119696E-4	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999720669303719	WITHOUT_CLASSIFICATION	2.793306962804388E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9999120213767605	WITHOUT_CLASSIFICATION	8.797862323948669E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9993068348274223	WITHOUT_CLASSIFICATION	6.931651725776636E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9993068348274223	WITHOUT_CLASSIFICATION	6.931651725776636E-4	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999761811075781	WITHOUT_CLASSIFICATION	2.3818892421856148E-5	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999984631466484	WITHOUT_CLASSIFICATION	1.5368533515752962E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999991305482478	WITHOUT_CLASSIFICATION	8.69451752174111E-7	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999679236315346	WITHOUT_CLASSIFICATION	3.2076368465373585E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999737215648185	WITHOUT_CLASSIFICATION	2.6278435181520683E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999766714835401	WITHOUT_CLASSIFICATION	2.3328516459928495E-5	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999469384240232	WITHOUT_CLASSIFICATION	5.306157597692449E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9999556544441814	WITHOUT_CLASSIFICATION	4.434555581850592E-5	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999918038361122	WITHOUT_CLASSIFICATION	8.196163887856025E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999968802124828	WITHOUT_CLASSIFICATION	3.1197875171941117E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999968802124828	WITHOUT_CLASSIFICATION	3.1197875171941117E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999968802124828	WITHOUT_CLASSIFICATION	3.1197875171941117E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999855692522642	WITHOUT_CLASSIFICATION	1.4430747735792914E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9998527088413927	WITHOUT_CLASSIFICATION	1.4729115860730223E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999117551824156	WITHOUT_CLASSIFICATION	8.824481758443325E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999870987902668	WITHOUT_CLASSIFICATION	1.2901209733150144E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994997421847863	WITHOUT_CLASSIFICATION	5.002578152136322E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999424050038264	WITHOUT_CLASSIFICATION	5.759499617375995E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999687318391485	WITHOUT_CLASSIFICATION	3.126816085148428E-5	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999905995923316	WITHOUT_CLASSIFICATION	9.40040766837986E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999699947473919	WITHOUT_CLASSIFICATION	3.0005252607992675E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999699947473919	WITHOUT_CLASSIFICATION	3.0005252607992675E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999962327668863	WITHOUT_CLASSIFICATION	3.7672331137117416E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999352734235006	WITHOUT_CLASSIFICATION	6.472657649933775E-5	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999753781420105	WITHOUT_CLASSIFICATION	2.4621857989571836E-5	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9999983127497776	WITHOUT_CLASSIFICATION	1.68725022241446E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999803872685585	WITHOUT_CLASSIFICATION	1.9612731441509958E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999803872685585	WITHOUT_CLASSIFICATION	1.9612731441509958E-5	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999980748655207	WITHOUT_CLASSIFICATION	1.9251344792869585E-6	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999320556282364	WITHOUT_CLASSIFICATION	6.794437176367323E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999819324368456	WITHOUT_CLASSIFICATION	1.806756315430379E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9990905284913767	WITHOUT_CLASSIFICATION	9.094715086233335E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999636192327609	WITHOUT_CLASSIFICATION	3.638076723908567E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999602627406394	WITHOUT_CLASSIFICATION	3.973725936059747E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999602627406394	WITHOUT_CLASSIFICATION	3.973725936059747E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999778755892506	WITHOUT_CLASSIFICATION	2.21244107494662E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999778755892506	WITHOUT_CLASSIFICATION	2.21244107494662E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999942913588189	WITHOUT_CLASSIFICATION	5.70864118112204E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999933373737289	WITHOUT_CLASSIFICATION	6.662626271203233E-6	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999611506526659	WITHOUT_CLASSIFICATION	3.884934733400278E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9997847873571483	WITHOUT_CLASSIFICATION	2.1521264285173923E-4	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.999784497017762	WITHOUT_CLASSIFICATION	2.1550298223806314E-4	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9998732524678539	WITHOUT_CLASSIFICATION	1.2674753214613906E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999938185757311	WITHOUT_CLASSIFICATION	6.181424268856492E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999240033451137	WITHOUT_CLASSIFICATION	7.59966548862208E-5	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999789793934446	WITHOUT_CLASSIFICATION	2.10206065553473E-5	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.999997533154732	WITHOUT_CLASSIFICATION	2.466845267893861E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9998889301557202	WITHOUT_CLASSIFICATION	1.1106984427973811E-4	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.999960309521138	WITHOUT_CLASSIFICATION	3.9690478861890985E-5	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999925363213813	WITHOUT_CLASSIFICATION	7.4636786186555895E-6	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999896059006209	WITHOUT_CLASSIFICATION	1.0394099378986888E-5	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999999065847683	WITHOUT_CLASSIFICATION	9.34152316579169E-8	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999976857296895	WITHOUT_CLASSIFICATION	2.314270310541051E-6	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999968754721446	WITHOUT_CLASSIFICATION	3.1245278555963796E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999691549297252	WITHOUT_CLASSIFICATION	3.084507027484566E-5	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999561325713575	WITHOUT_CLASSIFICATION	4.3867428642520016E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999837202484931	WITHOUT_CLASSIFICATION	1.6279751506869105E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999139645801682	WITHOUT_CLASSIFICATION	8.603541983184621E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9988620551930594	WITHOUT_CLASSIFICATION	0.0011379448069406331	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999945919046342	WITHOUT_CLASSIFICATION	5.408095365755888E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999780347915773	WITHOUT_CLASSIFICATION	2.1965208422719737E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999846357751743	WITHOUT_CLASSIFICATION	1.5364224825706203E-5	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999835202764351	WITHOUT_CLASSIFICATION	1.6479723564804595E-5	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9998980465123786	WITHOUT_CLASSIFICATION	1.0195348762150328E-4	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999919928296609	WITHOUT_CLASSIFICATION	8.007170339133823E-6	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999877840219407	WITHOUT_CLASSIFICATION	1.2215978059235768E-5	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999998380419938	WITHOUT_CLASSIFICATION	1.6195800622158786E-7	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999880697483158	WITHOUT_CLASSIFICATION	1.193025168418706E-5	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999957622444745	WITHOUT_CLASSIFICATION	4.237755525536841E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999914176199998	WITHOUT_CLASSIFICATION	8.582380000188756E-6	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.999998049763937	WITHOUT_CLASSIFICATION	1.950236063065739E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999721871736628	WITHOUT_CLASSIFICATION	2.7812826337224965E-5	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999987590084446	WITHOUT_CLASSIFICATION	1.2409915554175074E-6	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.999987061850627	WITHOUT_CLASSIFICATION	1.2938149373012933E-5	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999912820629561	WITHOUT_CLASSIFICATION	8.7179370439699E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999943842865723	WITHOUT_CLASSIFICATION	5.61571342761477E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999903386223054	WITHOUT_CLASSIFICATION	9.661377694631167E-6	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999996531340777	WITHOUT_CLASSIFICATION	3.4686592225437534E-7	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999139310905643	WITHOUT_CLASSIFICATION	8.606890943577596E-5	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999912653772807	WITHOUT_CLASSIFICATION	8.734622719374816E-6	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9998072599239194	WITHOUT_CLASSIFICATION	1.9274007608072617E-4	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9999957841918341	WITHOUT_CLASSIFICATION	4.215808165959039E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999946744231667	WITHOUT_CLASSIFICATION	5.325576833266166E-6	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999834650995906	WITHOUT_CLASSIFICATION	1.6534900409418996E-5	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999994841413655	WITHOUT_CLASSIFICATION	5.158586343707081E-7	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999204687061505	WITHOUT_CLASSIFICATION	7.95312938495357E-5	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998677018415563	WITHOUT_CLASSIFICATION	1.322981584437987E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999974318807576	WITHOUT_CLASSIFICATION	2.568119242433946E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999845819441385	WITHOUT_CLASSIFICATION	1.541805586149418E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999845819441385	WITHOUT_CLASSIFICATION	1.541805586149418E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999653500177873	WITHOUT_CLASSIFICATION	3.464998221275118E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999653500177873	WITHOUT_CLASSIFICATION	3.464998221275118E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999737585857335	WITHOUT_CLASSIFICATION	2.624141426657788E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999737585857335	WITHOUT_CLASSIFICATION	2.624141426657788E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999082870167778	WITHOUT_CLASSIFICATION	9.171298322218422E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999082870167778	WITHOUT_CLASSIFICATION	9.171298322218422E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999875683313723	WITHOUT_CLASSIFICATION	1.2431668627764273E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999875683313723	WITHOUT_CLASSIFICATION	1.2431668627764273E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999875683313723	WITHOUT_CLASSIFICATION	1.2431668627764273E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999875683313723	WITHOUT_CLASSIFICATION	1.2431668627764273E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999875683313723	WITHOUT_CLASSIFICATION	1.2431668627764273E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999875683313723	WITHOUT_CLASSIFICATION	1.2431668627764273E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999875683313723	WITHOUT_CLASSIFICATION	1.2431668627764273E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999875683313723	WITHOUT_CLASSIFICATION	1.2431668627764273E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999875683313723	WITHOUT_CLASSIFICATION	1.2431668627764273E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999958776004087	WITHOUT_CLASSIFICATION	4.1223995913007676E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999958776004087	WITHOUT_CLASSIFICATION	4.1223995913007676E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999958776004087	WITHOUT_CLASSIFICATION	4.1223995913007676E-5	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.999996169098116	WITHOUT_CLASSIFICATION	3.830901884082537E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999571908067167	WITHOUT_CLASSIFICATION	4.2809193283283214E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999571908067167	WITHOUT_CLASSIFICATION	4.2809193283283214E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999571908067167	WITHOUT_CLASSIFICATION	4.2809193283283214E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999878832428158	WITHOUT_CLASSIFICATION	1.2116757184176694E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999878832428158	WITHOUT_CLASSIFICATION	1.2116757184176694E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999878832428158	WITHOUT_CLASSIFICATION	1.2116757184176694E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998717810434786	WITHOUT_CLASSIFICATION	1.282189565214135E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999633570718336	WITHOUT_CLASSIFICATION	3.6642928166416066E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9996007487888428	WITHOUT_CLASSIFICATION	3.992512111572033E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9995697247281587	WITHOUT_CLASSIFICATION	4.302752718412766E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9995697247281587	WITHOUT_CLASSIFICATION	4.302752718412766E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9995697247281587	WITHOUT_CLASSIFICATION	4.302752718412766E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999594140330386	WITHOUT_CLASSIFICATION	4.0585966961406804E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999183631263325	WITHOUT_CLASSIFICATION	8.163687366752137E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999183631263325	WITHOUT_CLASSIFICATION	8.163687366752137E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999821815842622	WITHOUT_CLASSIFICATION	1.78184157378476E-5	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999723606470312	WITHOUT_CLASSIFICATION	2.7639352968807652E-5	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999723606470312	WITHOUT_CLASSIFICATION	2.7639352968807652E-5	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9999738092034421	WITHOUT_CLASSIFICATION	2.6190796557895038E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999922240812381	WITHOUT_CLASSIFICATION	7.775918761969549E-6	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999852366172367	WITHOUT_CLASSIFICATION	1.4763382763327871E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999400463507533	WITHOUT_CLASSIFICATION	5.995364924666453E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999400463507533	WITHOUT_CLASSIFICATION	5.995364924666453E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999641147344978	WITHOUT_CLASSIFICATION	3.5885265502337956E-5	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.999997403577911	WITHOUT_CLASSIFICATION	2.5964220890932107E-6	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999946033797166	WITHOUT_CLASSIFICATION	5.396620283519594E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9999888250309266	WITHOUT_CLASSIFICATION	1.1174969073443344E-5	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9997185760078724	WITHOUT_CLASSIFICATION	2.8142399212755534E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999400463507533	WITHOUT_CLASSIFICATION	5.995364924666453E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999400463507533	WITHOUT_CLASSIFICATION	5.995364924666453E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999400463507533	WITHOUT_CLASSIFICATION	5.995364924666453E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999400463507533	WITHOUT_CLASSIFICATION	5.995364924666453E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999400463507533	WITHOUT_CLASSIFICATION	5.995364924666453E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999732485347934	WITHOUT_CLASSIFICATION	2.6751465206522578E-5	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999494149817607	WITHOUT_CLASSIFICATION	5.058501823926871E-5	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999860029240134	WITHOUT_CLASSIFICATION	1.3997075986519972E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999889982597941	WITHOUT_CLASSIFICATION	1.1001740205912076E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999997167392614	WITHOUT_CLASSIFICATION	2.8326073865022954E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.99999144860621	WITHOUT_CLASSIFICATION	8.551393790010815E-6	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9999992612803978	WITHOUT_CLASSIFICATION	7.387196022569486E-7	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999693834325728	WITHOUT_CLASSIFICATION	3.0616567427160874E-5	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999861733847311	WITHOUT_CLASSIFICATION	1.3826615268945744E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999596640717714	WITHOUT_CLASSIFICATION	4.03359282286561E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.999991076923872	WITHOUT_CLASSIFICATION	8.923076127917595E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999344218770128	WITHOUT_CLASSIFICATION	6.557812298732589E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999776834293186	WITHOUT_CLASSIFICATION	2.2316570681452352E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999988340154843	WITHOUT_CLASSIFICATION	1.165984515746202E-6	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999996375393879	WITHOUT_CLASSIFICATION	3.624606120074986E-7	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999973916747712	WITHOUT_CLASSIFICATION	2.6083252289398505E-6	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.99999877100389	WITHOUT_CLASSIFICATION	1.2289961099804828E-6	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999986665987981	WITHOUT_CLASSIFICATION	1.3334012018406032E-6	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999981486903828	WITHOUT_CLASSIFICATION	1.8513096172434479E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999934943831947	WITHOUT_CLASSIFICATION	6.505616805288557E-6	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999990581722362	WITHOUT_CLASSIFICATION	9.418277637590398E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999828115498793	WITHOUT_CLASSIFICATION	1.7188450120642167E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999952556992742	WITHOUT_CLASSIFICATION	4.744300725777443E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999544233026089	WITHOUT_CLASSIFICATION	4.557669739100897E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999544233026089	WITHOUT_CLASSIFICATION	4.557669739100897E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999544233026089	WITHOUT_CLASSIFICATION	4.557669739100897E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999544233026089	WITHOUT_CLASSIFICATION	4.557669739100897E-5	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999926164940073	WITHOUT_CLASSIFICATION	7.383505992771648E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9999287858486727	WITHOUT_CLASSIFICATION	7.121415132718246E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999367272399573	WITHOUT_CLASSIFICATION	6.327276004271325E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999367272399573	WITHOUT_CLASSIFICATION	6.327276004271325E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999883041979013	WITHOUT_CLASSIFICATION	1.1695802098669633E-5	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998600424195273	WITHOUT_CLASSIFICATION	1.3995758047265867E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999991282475048	WITHOUT_CLASSIFICATION	8.717524953336152E-7	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999906481561301	WITHOUT_CLASSIFICATION	9.351843869781667E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.999953901709287	WITHOUT_CLASSIFICATION	4.6098290712959224E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999367725801436	WITHOUT_CLASSIFICATION	6.322741985643922E-5	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999462523422089	WITHOUT_CLASSIFICATION	5.374765779121611E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999733162501622	WITHOUT_CLASSIFICATION	2.6683749837862227E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999733162501622	WITHOUT_CLASSIFICATION	2.6683749837862227E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999733162501622	WITHOUT_CLASSIFICATION	2.6683749837862227E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999733162501622	WITHOUT_CLASSIFICATION	2.6683749837862227E-5	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999967215866425	WITHOUT_CLASSIFICATION	3.278413357468846E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999948643888326	WITHOUT_CLASSIFICATION	5.135611167392584E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999948643888326	WITHOUT_CLASSIFICATION	5.135611167392584E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999948643888326	WITHOUT_CLASSIFICATION	5.135611167392584E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999718530798646	WITHOUT_CLASSIFICATION	2.814692013546697E-5	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999578312347456	WITHOUT_CLASSIFICATION	4.216876525435098E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999973634648334	WITHOUT_CLASSIFICATION	2.6365351666782235E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9996481380003386	WITHOUT_CLASSIFICATION	3.5186199966142484E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9996481380003386	WITHOUT_CLASSIFICATION	3.5186199966142484E-4	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999989849477222	WITHOUT_CLASSIFICATION	1.0150522778344306E-6	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9999982785846697	WITHOUT_CLASSIFICATION	1.7214153303147827E-6	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9998858808227419	WITHOUT_CLASSIFICATION	1.1411917725808973E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9998858808227419	WITHOUT_CLASSIFICATION	1.1411917725808973E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999972072663366	WITHOUT_CLASSIFICATION	2.7927336635108195E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999972072663366	WITHOUT_CLASSIFICATION	2.7927336635108195E-6	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999956781474114	WITHOUT_CLASSIFICATION	4.321852588542362E-6	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.999996444458403	WITHOUT_CLASSIFICATION	3.555541596977059E-6	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999883714277955	WITHOUT_CLASSIFICATION	1.1628572204433691E-5	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9999989677588504	WITHOUT_CLASSIFICATION	1.0322411495563451E-6	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999259954008537	WITHOUT_CLASSIFICATION	7.400459914624646E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999976179335014	WITHOUT_CLASSIFICATION	2.382066498593964E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999662162469539	WITHOUT_CLASSIFICATION	3.37837530460572E-5	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999900025292134	WITHOUT_CLASSIFICATION	9.997470786493151E-6	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999970102110061	WITHOUT_CLASSIFICATION	2.9897889939308265E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999956732264716	WITHOUT_CLASSIFICATION	4.3267735282740934E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999956732264716	WITHOUT_CLASSIFICATION	4.3267735282740934E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999855081650254	WITHOUT_CLASSIFICATION	1.4491834974562177E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999855081650254	WITHOUT_CLASSIFICATION	1.4491834974562177E-5	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999994338362113	WITHOUT_CLASSIFICATION	5.661637886796728E-7	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999981124585678	WITHOUT_CLASSIFICATION	1.8875414321018816E-6	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9995979323270393	WITHOUT_CLASSIFICATION	4.0206767296072896E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999821419449383	WITHOUT_CLASSIFICATION	1.7858055061680676E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999821419449383	WITHOUT_CLASSIFICATION	1.7858055061680676E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999821419449383	WITHOUT_CLASSIFICATION	1.7858055061680676E-5	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9998911645814429	WITHOUT_CLASSIFICATION	1.0883541855708475E-4	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9998643338738613	WITHOUT_CLASSIFICATION	1.3566612613878095E-4	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.999888125333161	WITHOUT_CLASSIFICATION	1.1187466683902727E-4	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9998969312912491	WITHOUT_CLASSIFICATION	1.0306870875092055E-4	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9998880724848164	WITHOUT_CLASSIFICATION	1.1192751518352048E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9998930487483485	WITHOUT_CLASSIFICATION	1.0695125165150228E-4	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9998823938566425	WITHOUT_CLASSIFICATION	1.1760614335754355E-4	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999619041044474	WITHOUT_CLASSIFICATION	3.809589555250901E-5	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.999943804410162	WITHOUT_CLASSIFICATION	5.6195589837954324E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999963798012178	WITHOUT_CLASSIFICATION	3.620198782269475E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9999601868300229	WITHOUT_CLASSIFICATION	3.981316997722519E-5	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.999955679032955	WITHOUT_CLASSIFICATION	4.432096704493403E-5	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999919435499776	WITHOUT_CLASSIFICATION	8.056450022461276E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9996481380003386	WITHOUT_CLASSIFICATION	3.5186199966142484E-4	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.999999249604652	WITHOUT_CLASSIFICATION	7.503953479524324E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999645254242044	WITHOUT_CLASSIFICATION	3.547457579556609E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998288861943884	WITHOUT_CLASSIFICATION	1.711138056116153E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999164041256496	WITHOUT_CLASSIFICATION	8.35958743503907E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999164041256496	WITHOUT_CLASSIFICATION	8.35958743503907E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999164041256496	WITHOUT_CLASSIFICATION	8.35958743503907E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999164041256496	WITHOUT_CLASSIFICATION	8.35958743503907E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999164041256496	WITHOUT_CLASSIFICATION	8.35958743503907E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9995243818028511	WITHOUT_CLASSIFICATION	4.7561819714889923E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999164041256496	WITHOUT_CLASSIFICATION	8.35958743503907E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999164041256496	WITHOUT_CLASSIFICATION	8.35958743503907E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999164041256496	WITHOUT_CLASSIFICATION	8.35958743503907E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999865681062753	WITHOUT_CLASSIFICATION	1.3431893724725305E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999865215498852	WITHOUT_CLASSIFICATION	1.3478450114733602E-5	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9999791572785238	WITHOUT_CLASSIFICATION	2.0842721476172297E-5	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9998367419933705	WITHOUT_CLASSIFICATION	1.6325800662947843E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9998418962022408	WITHOUT_CLASSIFICATION	1.5810379775912334E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9995523457445726	WITHOUT_CLASSIFICATION	4.4765425542739307E-4	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999917906756935	WITHOUT_CLASSIFICATION	8.209324306467711E-6	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9998956516398008	WITHOUT_CLASSIFICATION	1.0434836019925875E-4	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.999891916796848	WITHOUT_CLASSIFICATION	1.0808320315199946E-4	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.999891916796848	WITHOUT_CLASSIFICATION	1.0808320315199946E-4	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9998863751231398	WITHOUT_CLASSIFICATION	1.1362487686023698E-4	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9998669434281292	WITHOUT_CLASSIFICATION	1.3305657187077905E-4	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9998802356687758	WITHOUT_CLASSIFICATION	1.1976433122421133E-4	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.999896262242319	WITHOUT_CLASSIFICATION	1.0373775768097274E-4	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999897021124154	WITHOUT_CLASSIFICATION	1.0297887584592576E-4	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9998747625791724	WITHOUT_CLASSIFICATION	1.2523742082759051E-4	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9998782187333676	WITHOUT_CLASSIFICATION	1.2178126663242303E-4	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9998937013046177	WITHOUT_CLASSIFICATION	1.0629869538230534E-4	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9998761704199105	WITHOUT_CLASSIFICATION	1.2382958008944926E-4	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999135282950441	WITHOUT_CLASSIFICATION	8.647170495591192E-5	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9998859146751348	WITHOUT_CLASSIFICATION	1.140853248651328E-4	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9998977009435176	WITHOUT_CLASSIFICATION	1.0229905648240612E-4	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9998943723558403	WITHOUT_CLASSIFICATION	1.0562764415968761E-4	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9998752844114668	WITHOUT_CLASSIFICATION	1.2471558853311356E-4	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.999865313738365	WITHOUT_CLASSIFICATION	1.3468626163505956E-4	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9998776677026849	WITHOUT_CLASSIFICATION	1.2233229731501848E-4	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9998840930485517	WITHOUT_CLASSIFICATION	1.1590695144825475E-4	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9998844192979189	WITHOUT_CLASSIFICATION	1.1558070208109061E-4	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9998914285265758	WITHOUT_CLASSIFICATION	1.0857147342431452E-4	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9998942438873166	WITHOUT_CLASSIFICATION	1.0575611268346936E-4	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999045300405831	WITHOUT_CLASSIFICATION	9.546995941691618E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9998961420125934	WITHOUT_CLASSIFICATION	1.0385798740659973E-4	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9998827923234676	WITHOUT_CLASSIFICATION	1.1720767653244628E-4	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9998839281621474	WITHOUT_CLASSIFICATION	1.1607183785257873E-4	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9998875725672357	WITHOUT_CLASSIFICATION	1.1242743276419552E-4	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9998938178202765	WITHOUT_CLASSIFICATION	1.0618217972351968E-4	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9998767245511935	WITHOUT_CLASSIFICATION	1.2327544880659676E-4	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9998924477725035	WITHOUT_CLASSIFICATION	1.0755222749647136E-4	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9998957041431754	WITHOUT_CLASSIFICATION	1.042958568245954E-4	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9998882387817661	WITHOUT_CLASSIFICATION	1.1176121823390578E-4	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9998639998036708	WITHOUT_CLASSIFICATION	1.3600019632918224E-4	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9998710108768469	WITHOUT_CLASSIFICATION	1.2898912315304322E-4	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9998526655778079	WITHOUT_CLASSIFICATION	1.4733442219209565E-4	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9998683284023687	WITHOUT_CLASSIFICATION	1.3167159763116985E-4	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9998743280134865	WITHOUT_CLASSIFICATION	1.2567198651341154E-4	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9998755748994637	WITHOUT_CLASSIFICATION	1.2442510053634078E-4	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.999861065669444	WITHOUT_CLASSIFICATION	1.389343305561112E-4	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9998457821956055	WITHOUT_CLASSIFICATION	1.542178043944231E-4	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9998709679060728	WITHOUT_CLASSIFICATION	1.2903209392727975E-4	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9998648196109119	WITHOUT_CLASSIFICATION	1.3518038908815098E-4	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9998857622765467	WITHOUT_CLASSIFICATION	1.1423772345344351E-4	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9998962494444119	WITHOUT_CLASSIFICATION	1.0375055558814622E-4	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9998820412127518	WITHOUT_CLASSIFICATION	1.1795878724825747E-4	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9998611599791127	WITHOUT_CLASSIFICATION	1.3884002088728845E-4	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9998791976961594	WITHOUT_CLASSIFICATION	1.2080230384056672E-4	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999852460721991	WITHOUT_CLASSIFICATION	1.4753927800905235E-4	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9998445719284128	WITHOUT_CLASSIFICATION	1.55428071587288E-4	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9998586752350086	WITHOUT_CLASSIFICATION	1.4132476499145445E-4	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9998633092957983	WITHOUT_CLASSIFICATION	1.3669070420185185E-4	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999871018312261	WITHOUT_CLASSIFICATION	1.2898168773900565E-4	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9998805161914326	WITHOUT_CLASSIFICATION	1.1948380856744636E-4	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9998709072199906	WITHOUT_CLASSIFICATION	1.2909278000944774E-4	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9998823491016801	WITHOUT_CLASSIFICATION	1.176508983199325E-4	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9998817190011846	WITHOUT_CLASSIFICATION	1.1828099881547241E-4	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9998817190011846	WITHOUT_CLASSIFICATION	1.1828099881547241E-4	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9998610460691	WITHOUT_CLASSIFICATION	1.3895393090008747E-4	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9998877785580302	WITHOUT_CLASSIFICATION	1.1222144196973564E-4	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9998665319929623	WITHOUT_CLASSIFICATION	1.3346800703773292E-4	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9998719409603567	WITHOUT_CLASSIFICATION	1.2805903964333771E-4	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.99986425440053	WITHOUT_CLASSIFICATION	1.3574559947017174E-4	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9998920357552176	WITHOUT_CLASSIFICATION	1.0796424478242652E-4	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9998635404377868	WITHOUT_CLASSIFICATION	1.3645956221323185E-4	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9998718999637859	WITHOUT_CLASSIFICATION	1.2810003621417253E-4	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9998768926235886	WITHOUT_CLASSIFICATION	1.2310737641139127E-4	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9998830979437575	WITHOUT_CLASSIFICATION	1.1690205624240585E-4	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9998341869627351	WITHOUT_CLASSIFICATION	1.6581303726487755E-4	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9998341869627351	WITHOUT_CLASSIFICATION	1.6581303726487755E-4	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999140090269943	WITHOUT_CLASSIFICATION	8.599097300563167E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999497610957547	WITHOUT_CLASSIFICATION	5.0238904245267845E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9986875815857876	WITHOUT_CLASSIFICATION	0.001312418414212343	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999981864822141	WITHOUT_CLASSIFICATION	1.8135177860128396E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999788522031592	WITHOUT_CLASSIFICATION	2.1147796840919202E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999788522031592	WITHOUT_CLASSIFICATION	2.1147796840919202E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999788522031592	WITHOUT_CLASSIFICATION	2.1147796840919202E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999788522031592	WITHOUT_CLASSIFICATION	2.1147796840919202E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9999923838226243	WITHOUT_CLASSIFICATION	7.616177375661632E-6	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9999996399334062	WITHOUT_CLASSIFICATION	3.600665937184677E-7	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9998887953838314	WITHOUT_CLASSIFICATION	1.1120461616869685E-4	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9998943027815584	WITHOUT_CLASSIFICATION	1.0569721844162692E-4	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9998823705445545	WITHOUT_CLASSIFICATION	1.176294554455296E-4	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9998704431199811	WITHOUT_CLASSIFICATION	1.2955688001878735E-4	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9998696180985789	WITHOUT_CLASSIFICATION	1.3038190142101587E-4	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9998789931594056	WITHOUT_CLASSIFICATION	1.2100684059432735E-4	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999103163105626	WITHOUT_CLASSIFICATION	8.968368943742531E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9998820920451874	WITHOUT_CLASSIFICATION	1.179079548126081E-4	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9998795583997572	WITHOUT_CLASSIFICATION	1.204416002429285E-4	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9998959062216762	WITHOUT_CLASSIFICATION	1.0409377832374868E-4	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9998853096814135	WITHOUT_CLASSIFICATION	1.146903185864596E-4	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9998762140024255	WITHOUT_CLASSIFICATION	1.2378599757450882E-4	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9998795745536196	WITHOUT_CLASSIFICATION	1.2042544638036677E-4	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999043242114851	WITHOUT_CLASSIFICATION	9.56757885148282E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9998780434329617	WITHOUT_CLASSIFICATION	1.2195656703838304E-4	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.999872031708048	WITHOUT_CLASSIFICATION	1.2796829195199755E-4	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.999895909435531	WITHOUT_CLASSIFICATION	1.0409056446893973E-4	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9998744354372574	WITHOUT_CLASSIFICATION	1.255645627426308E-4	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9998978808263824	WITHOUT_CLASSIFICATION	1.0211917361752085E-4	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999022423124527	WITHOUT_CLASSIFICATION	9.775768754728634E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9998947561267676	WITHOUT_CLASSIFICATION	1.05243873232358E-4	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9998920541092433	WITHOUT_CLASSIFICATION	1.0794589075662162E-4	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9998898504394488	WITHOUT_CLASSIFICATION	1.10149560551264E-4	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9998776024274094	WITHOUT_CLASSIFICATION	1.223975725905458E-4	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.99989747468652	WITHOUT_CLASSIFICATION	1.0252531347994022E-4	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9998881951090236	WITHOUT_CLASSIFICATION	1.1180489097644108E-4	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9998893771092942	WITHOUT_CLASSIFICATION	1.1062289070587242E-4	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.999863265479863	WITHOUT_CLASSIFICATION	1.3673452013685238E-4	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9998670767072995	WITHOUT_CLASSIFICATION	1.3292329270046962E-4	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9998811263649786	WITHOUT_CLASSIFICATION	1.1887363502137524E-4	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9997949423934277	WITHOUT_CLASSIFICATION	2.050576065722169E-4	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9998554360878104	WITHOUT_CLASSIFICATION	1.4456391218957063E-4	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9998561413297141	WITHOUT_CLASSIFICATION	1.4385867028586573E-4	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9998784907913647	WITHOUT_CLASSIFICATION	1.2150920863536704E-4	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9998524578922826	WITHOUT_CLASSIFICATION	1.4754210771729086E-4	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9998680661156846	WITHOUT_CLASSIFICATION	1.3193388431541957E-4	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9998715002597187	WITHOUT_CLASSIFICATION	1.2849974028132028E-4	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9998768944624256	WITHOUT_CLASSIFICATION	1.2310553757449445E-4	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9998780837464482	WITHOUT_CLASSIFICATION	1.2191625355175026E-4	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9998498485738216	WITHOUT_CLASSIFICATION	1.5015142617840046E-4	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9998468247742316	WITHOUT_CLASSIFICATION	1.5317522576850328E-4	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9998696566335287	WITHOUT_CLASSIFICATION	1.3034336647133954E-4	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9998721462150802	WITHOUT_CLASSIFICATION	1.2785378491964424E-4	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9998646120991397	WITHOUT_CLASSIFICATION	1.3538790086044708E-4	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9998381197273951	WITHOUT_CLASSIFICATION	1.6188027260490682E-4	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9998649155121955	WITHOUT_CLASSIFICATION	1.3508448780456575E-4	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9998844079041205	WITHOUT_CLASSIFICATION	1.1559209587951533E-4	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9998781685221888	WITHOUT_CLASSIFICATION	1.2183147781123796E-4	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9998752162037102	WITHOUT_CLASSIFICATION	1.247837962897027E-4	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9998598592072624	WITHOUT_CLASSIFICATION	1.40140792737584E-4	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9998697349382384	WITHOUT_CLASSIFICATION	1.3026506176160518E-4	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9998818870699336	WITHOUT_CLASSIFICATION	1.1811293006640744E-4	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9998793830629219	WITHOUT_CLASSIFICATION	1.206169370781495E-4	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9998837757191119	WITHOUT_CLASSIFICATION	1.1622428088804006E-4	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9998925106856774	WITHOUT_CLASSIFICATION	1.0748931432260741E-4	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9998783827443145	WITHOUT_CLASSIFICATION	1.2161725568538871E-4	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9998974578746712	WITHOUT_CLASSIFICATION	1.0254212532868022E-4	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999925527145832	WITHOUT_CLASSIFICATION	7.447285416823204E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999982465866843	WITHOUT_CLASSIFICATION	1.753413315599457E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999905360920253	WITHOUT_CLASSIFICATION	9.463907974802203E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999905360920253	WITHOUT_CLASSIFICATION	9.463907974802203E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999905360920253	WITHOUT_CLASSIFICATION	9.463907974802203E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999905360920253	WITHOUT_CLASSIFICATION	9.463907974802203E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999905360920253	WITHOUT_CLASSIFICATION	9.463907974802203E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999905360920253	WITHOUT_CLASSIFICATION	9.463907974802203E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999905360920253	WITHOUT_CLASSIFICATION	9.463907974802203E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999330664353218	WITHOUT_CLASSIFICATION	6.693356467830324E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999330664353218	WITHOUT_CLASSIFICATION	6.693356467830324E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999330664353218	WITHOUT_CLASSIFICATION	6.693356467830324E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999330664353218	WITHOUT_CLASSIFICATION	6.693356467830324E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999848130309272	WITHOUT_CLASSIFICATION	1.518696907274006E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999848130309272	WITHOUT_CLASSIFICATION	1.518696907274006E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9999978712260424	WITHOUT_CLASSIFICATION	2.1287739575796693E-6	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999961951841813	WITHOUT_CLASSIFICATION	3.80481581876069E-6	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999961951841813	WITHOUT_CLASSIFICATION	3.80481581876069E-6	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999948832382058	WITHOUT_CLASSIFICATION	5.11676179409475E-6	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999230113855979	WITHOUT_CLASSIFICATION	7.69886144020064E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999964289389501	WITHOUT_CLASSIFICATION	3.571061049891015E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999964289389501	WITHOUT_CLASSIFICATION	3.571061049891015E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999964289389501	WITHOUT_CLASSIFICATION	3.571061049891015E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999964289389501	WITHOUT_CLASSIFICATION	3.571061049891015E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999964289389501	WITHOUT_CLASSIFICATION	3.571061049891015E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999964289389501	WITHOUT_CLASSIFICATION	3.571061049891015E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999964289389501	WITHOUT_CLASSIFICATION	3.571061049891015E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999962806987576	WITHOUT_CLASSIFICATION	3.719301242433341E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999913633082242	WITHOUT_CLASSIFICATION	8.6366917757263E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999816555106525	WITHOUT_CLASSIFICATION	1.8344489347504296E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999816555106525	WITHOUT_CLASSIFICATION	1.8344489347504296E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.999972570733577	WITHOUT_CLASSIFICATION	2.742926642302198E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997731066321796	WITHOUT_CLASSIFICATION	2.26893367820524E-4	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997731066321796	WITHOUT_CLASSIFICATION	2.26893367820524E-4	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999998965341254	WITHOUT_CLASSIFICATION	1.0346587463109124E-7	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9999974121509184	WITHOUT_CLASSIFICATION	2.5878490815103213E-6	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999982766698546	WITHOUT_CLASSIFICATION	1.7233301452959678E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999971602970397	WITHOUT_CLASSIFICATION	2.839702960309317E-6	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999972021730018	WITHOUT_CLASSIFICATION	2.79782699815585E-6	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999862972617356	WITHOUT_CLASSIFICATION	1.3702738264346141E-5	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999887509486212	WITHOUT_CLASSIFICATION	1.1249051378802571E-5	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999853711154642	WITHOUT_CLASSIFICATION	1.4628884535901021E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999917577071947	WITHOUT_CLASSIFICATION	8.242292805316443E-6	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999913146195437	WITHOUT_CLASSIFICATION	8.685380456344384E-6	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9995445078368662	WITHOUT_CLASSIFICATION	4.554921631337112E-4	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999993739999136	WITHOUT_CLASSIFICATION	6.260000864776391E-7	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999687456441909	WITHOUT_CLASSIFICATION	3.125435580913375E-5	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999978748947477	WITHOUT_CLASSIFICATION	2.1251052524039337E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999587758412133	WITHOUT_CLASSIFICATION	4.122415878673268E-5	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999939930706901	WITHOUT_CLASSIFICATION	6.0069293097693E-6	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999896741868306	WITHOUT_CLASSIFICATION	1.0325813169416074E-5	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9998186503074529	WITHOUT_CLASSIFICATION	1.8134969254705123E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999932079529813	WITHOUT_CLASSIFICATION	6.792047018703155E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999932079529813	WITHOUT_CLASSIFICATION	6.792047018703155E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999960849157479	WITHOUT_CLASSIFICATION	3.915084252129741E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.999984465331365	WITHOUT_CLASSIFICATION	1.5534668635049567E-5	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999995023795839	WITHOUT_CLASSIFICATION	4.976204159757941E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994475199368366	WITHOUT_CLASSIFICATION	5.524800631634278E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999869669775938	WITHOUT_CLASSIFICATION	1.303302240620024E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999869669775938	WITHOUT_CLASSIFICATION	1.303302240620024E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999869669775938	WITHOUT_CLASSIFICATION	1.303302240620024E-4	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999954602389585	WITHOUT_CLASSIFICATION	4.539761041479606E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9998961781523998	WITHOUT_CLASSIFICATION	1.0382184760017099E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999967913632735	WITHOUT_CLASSIFICATION	3.208636726479826E-6	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999974850094457	WITHOUT_CLASSIFICATION	2.5149905543288448E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.999998179964475	WITHOUT_CLASSIFICATION	1.820035524945507E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999969227963665	WITHOUT_CLASSIFICATION	3.0772036334449035E-6	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999969825173528	WITHOUT_CLASSIFICATION	3.017482647251519E-6	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999944585792876	WITHOUT_CLASSIFICATION	5.541420712364642E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999877198198567	WITHOUT_CLASSIFICATION	1.228018014340459E-5	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999894473937426	WITHOUT_CLASSIFICATION	1.055260625729643E-5	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9997941509428989	WITHOUT_CLASSIFICATION	2.058490571011078E-4	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999987281955864	WITHOUT_CLASSIFICATION	1.2718044134680508E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9999741151196504	WITHOUT_CLASSIFICATION	2.5884880349649182E-5	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9998852954187626	WITHOUT_CLASSIFICATION	1.1470458123739001E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999994737880155	WITHOUT_CLASSIFICATION	5.262119845173236E-7	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999931766503898	WITHOUT_CLASSIFICATION	6.823349610197134E-6	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999980307802386	WITHOUT_CLASSIFICATION	1.9692197613101552E-6	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999677136355511	WITHOUT_CLASSIFICATION	3.228636444875522E-5	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999951495627653	WITHOUT_CLASSIFICATION	4.850437234766594E-6	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9975565073099619	WITHOUT_CLASSIFICATION	0.002443492690037999	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9999819148668262	WITHOUT_CLASSIFICATION	1.8085133173800943E-5	DEFECT
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9999852271385506	WITHOUT_CLASSIFICATION	1.4772861449412011E-5	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9999880240637637	WITHOUT_CLASSIFICATION	1.1975936236282133E-5	DEFECT
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9999777183940505	WITHOUT_CLASSIFICATION	2.2281605949529447E-5	DEFECT
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9999912227019893	WITHOUT_CLASSIFICATION	8.777298010757375E-6	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9999802412851622	WITHOUT_CLASSIFICATION	1.9758714837829378E-5	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9999966371582872	WITHOUT_CLASSIFICATION	3.3628417127647E-6	DEFECT
// FIXME: not correct exception	DEFECT	0.9999798161126852	WITHOUT_CLASSIFICATION	2.0183887314865646E-5	DEFECT
// XXX actually only on windows...	DEFECT	0.9999536086437085	WITHOUT_CLASSIFICATION	4.639135629143693E-5	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9998981402024453	WITHOUT_CLASSIFICATION	1.0185979755474192E-4	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9999935020388288	WITHOUT_CLASSIFICATION	6.4979611712414655E-6	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9999910820689627	WITHOUT_CLASSIFICATION	8.917931037269351E-6	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9994738225424223	WITHOUT_CLASSIFICATION	5.261774575775827E-4	DEFECT
// TODO: sys fail	DEFECT	0.9998544236386037	WITHOUT_CLASSIFICATION	1.455763613963559E-4	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9999720055223432	WITHOUT_CLASSIFICATION	2.7994477656718442E-5	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9999720055223432	WITHOUT_CLASSIFICATION	2.7994477656718442E-5	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9999836573455353	WITHOUT_CLASSIFICATION	1.6342654464646513E-5	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9999988316561882	WITHOUT_CLASSIFICATION	1.168343811803592E-6	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9999830799613777	WITHOUT_CLASSIFICATION	1.6920038622264482E-5	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998324868930863	WITHOUT_CLASSIFICATION	1.6751310691367674E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998324868930863	WITHOUT_CLASSIFICATION	1.6751310691367674E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9999974730622502	WITHOUT_CLASSIFICATION	2.52693774978392E-6	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9999940100816346	WITHOUT_CLASSIFICATION	5.9899183654377005E-6	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9999747965673078	WITHOUT_CLASSIFICATION	2.520343269211257E-5	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.9998985136576279	WITHOUT_CLASSIFICATION	1.0148634237211328E-4	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.999762993968366	WITHOUT_CLASSIFICATION	2.3700603163390852E-4	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.9999452526984124	WITHOUT_CLASSIFICATION	5.4747301587652756E-5	DEFECT
// TODO: proper sign	DEFECT	0.9999594862484112	WITHOUT_CLASSIFICATION	4.0513751588729434E-5	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9999703766754481	WITHOUT_CLASSIFICATION	2.962332455190948E-5	DEFECT
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.9999994402745943	WITHOUT_CLASSIFICATION	5.597254056832299E-7	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.999988799572601	WITHOUT_CLASSIFICATION	1.120042739894155E-5	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.999960684480773	WITHOUT_CLASSIFICATION	3.9315519226931347E-5	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9999940613006594	WITHOUT_CLASSIFICATION	5.938699340733608E-6	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.999972885202261	WITHOUT_CLASSIFICATION	2.7114797738915814E-5	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.999987344050102	WITHOUT_CLASSIFICATION	1.2655949897908237E-5	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9999500321417394	WITHOUT_CLASSIFICATION	4.996785826069455E-5	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9999956730338271	WITHOUT_CLASSIFICATION	4.3269661728288E-6	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9999624183285207	WITHOUT_CLASSIFICATION	3.758167147920729E-5	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9999912622120608	WITHOUT_CLASSIFICATION	8.737787939182267E-6	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9999998079353044	WITHOUT_CLASSIFICATION	1.9206469565663392E-7	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.999998846854878	WITHOUT_CLASSIFICATION	1.153145121958703E-6	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9998771284648675	WITHOUT_CLASSIFICATION	1.2287153513250882E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9998771284648675	WITHOUT_CLASSIFICATION	1.2287153513250882E-4	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9999987172023808	WITHOUT_CLASSIFICATION	1.282797619249267E-6	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9999556958607648	WITHOUT_CLASSIFICATION	4.430413923507473E-5	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9999866370340047	WITHOUT_CLASSIFICATION	1.3362965995324384E-5	DEFECT
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9999927600397225	WITHOUT_CLASSIFICATION	7.2399602775562516E-6	DEFECT
// FIXME: This is wrong	DEFECT	0.9996278622104755	WITHOUT_CLASSIFICATION	3.721377895244553E-4	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9999969650761013	WITHOUT_CLASSIFICATION	3.034923898663289E-6	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999817373087677	WITHOUT_CLASSIFICATION	1.8262691232346222E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9998901880656048	WITHOUT_CLASSIFICATION	1.0981193439524291E-4	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9999983697908661	WITHOUT_CLASSIFICATION	1.6302091337861834E-6	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9999984589033315	WITHOUT_CLASSIFICATION	1.5410966684528384E-6	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9999275519965505	WITHOUT_CLASSIFICATION	7.244800344950165E-5	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9999859911365515	WITHOUT_CLASSIFICATION	1.4008863448376675E-5	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9999859911365515	WITHOUT_CLASSIFICATION	1.4008863448376675E-5	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9999974061824926	WITHOUT_CLASSIFICATION	2.59381750741135E-6	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999998127687569	WITHOUT_CLASSIFICATION	1.8723124309314616E-6	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9999938205928367	WITHOUT_CLASSIFICATION	6.179407163287756E-6	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.999722554893915	WITHOUT_CLASSIFICATION	2.774451060849823E-4	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.999196878020355	WITHOUT_CLASSIFICATION	8.031219796450857E-4	DEFECT
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9999567542622924	WITHOUT_CLASSIFICATION	4.3245737707603646E-5	DEFECT
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9999540118331047	WITHOUT_CLASSIFICATION	4.598816689523611E-5	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9998931728977872	WITHOUT_CLASSIFICATION	1.0682710221284615E-4	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9999987172023808	WITHOUT_CLASSIFICATION	1.282797619249267E-6	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9999872744557693	WITHOUT_CLASSIFICATION	1.272554423081395E-5	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.999986368212799	WITHOUT_CLASSIFICATION	1.3631787201159261E-5	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9999765791922248	WITHOUT_CLASSIFICATION	2.3420807775269785E-5	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.9998985136576279	WITHOUT_CLASSIFICATION	1.0148634237211328E-4	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9999779479400253	WITHOUT_CLASSIFICATION	2.2052059974711834E-5	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.999998242328959	WITHOUT_CLASSIFICATION	1.7576710409236773E-6	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9999956730338271	WITHOUT_CLASSIFICATION	4.3269661728288E-6	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9999381856997643	WITHOUT_CLASSIFICATION	6.181430023563476E-5	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9999275519965505	WITHOUT_CLASSIFICATION	7.244800344950165E-5	DEFECT
// TODO: we loose encoding information here, fix it	DEFECT	0.9995477845451063	WITHOUT_CLASSIFICATION	4.5221545489361974E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9998892119268727	WITHOUT_CLASSIFICATION	1.1078807312723327E-4	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9998901880656048	WITHOUT_CLASSIFICATION	1.0981193439524291E-4	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9999988123586716	WITHOUT_CLASSIFICATION	1.187641328377919E-6	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9999859911365515	WITHOUT_CLASSIFICATION	1.4008863448376675E-5	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9999859911365515	WITHOUT_CLASSIFICATION	1.4008863448376675E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999998127687569	WITHOUT_CLASSIFICATION	1.8723124309314616E-6	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999998127687569	WITHOUT_CLASSIFICATION	1.8723124309314616E-6	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999998127687569	WITHOUT_CLASSIFICATION	1.8723124309314616E-6	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999998127687569	WITHOUT_CLASSIFICATION	1.8723124309314616E-6	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999998127687569	WITHOUT_CLASSIFICATION	1.8723124309314616E-6	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999998127687569	WITHOUT_CLASSIFICATION	1.8723124309314616E-6	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.999995342023578	WITHOUT_CLASSIFICATION	4.657976422051073E-6	DEFECT
