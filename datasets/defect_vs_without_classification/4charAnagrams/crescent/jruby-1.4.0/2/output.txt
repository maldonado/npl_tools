// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999400881880981	WITHOUT_CLASSIFICATION	5.991181190180305E-5	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999735835805754	WITHOUT_CLASSIFICATION	2.641641942461167E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998684167454832	WITHOUT_CLASSIFICATION	1.315832545167806E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998684167454832	WITHOUT_CLASSIFICATION	1.315832545167806E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999811225117462	WITHOUT_CLASSIFICATION	1.8877488253812576E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999811225117462	WITHOUT_CLASSIFICATION	1.8877488253812576E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998370421842507	WITHOUT_CLASSIFICATION	1.629578157492128E-4	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999954245143177	WITHOUT_CLASSIFICATION	4.575485682387881E-6	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999742406917385	WITHOUT_CLASSIFICATION	2.5759308261486184E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999762899873266	WITHOUT_CLASSIFICATION	2.3710012673392468E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999834916964184	WITHOUT_CLASSIFICATION	1.6508303581586428E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999834916964184	WITHOUT_CLASSIFICATION	1.6508303581586428E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999731068033779	WITHOUT_CLASSIFICATION	2.6893196622110623E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998713583513252	WITHOUT_CLASSIFICATION	1.2864164867472155E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998713583513252	WITHOUT_CLASSIFICATION	1.2864164867472155E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9997716352641616	WITHOUT_CLASSIFICATION	2.2836473583842898E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9998152750012987	WITHOUT_CLASSIFICATION	1.8472499870121232E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998408641133171	WITHOUT_CLASSIFICATION	1.5913588668292324E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998408641133171	WITHOUT_CLASSIFICATION	1.5913588668292324E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998408641133171	WITHOUT_CLASSIFICATION	1.5913588668292324E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998408641133171	WITHOUT_CLASSIFICATION	1.5913588668292324E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998408641133171	WITHOUT_CLASSIFICATION	1.5913588668292324E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998408641133171	WITHOUT_CLASSIFICATION	1.5913588668292324E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998408641133171	WITHOUT_CLASSIFICATION	1.5913588668292324E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998302329806882	WITHOUT_CLASSIFICATION	1.697670193118039E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998302329806882	WITHOUT_CLASSIFICATION	1.697670193118039E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998302329806882	WITHOUT_CLASSIFICATION	1.697670193118039E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998302329806882	WITHOUT_CLASSIFICATION	1.697670193118039E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998302329806882	WITHOUT_CLASSIFICATION	1.697670193118039E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998302329806882	WITHOUT_CLASSIFICATION	1.697670193118039E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998302329806882	WITHOUT_CLASSIFICATION	1.697670193118039E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998025840104904	WITHOUT_CLASSIFICATION	1.9741598950949847E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998025840104904	WITHOUT_CLASSIFICATION	1.9741598950949847E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998025840104904	WITHOUT_CLASSIFICATION	1.9741598950949847E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998025840104904	WITHOUT_CLASSIFICATION	1.9741598950949847E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998025840104904	WITHOUT_CLASSIFICATION	1.9741598950949847E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998025840104904	WITHOUT_CLASSIFICATION	1.9741598950949847E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998514470193239	WITHOUT_CLASSIFICATION	1.485529806760816E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998514470193239	WITHOUT_CLASSIFICATION	1.485529806760816E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998514470193239	WITHOUT_CLASSIFICATION	1.485529806760816E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998514470193239	WITHOUT_CLASSIFICATION	1.485529806760816E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998514470193239	WITHOUT_CLASSIFICATION	1.485529806760816E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998514470193239	WITHOUT_CLASSIFICATION	1.485529806760816E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998842398886572	WITHOUT_CLASSIFICATION	1.1576011134273638E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998842398886572	WITHOUT_CLASSIFICATION	1.1576011134273638E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998842398886572	WITHOUT_CLASSIFICATION	1.1576011134273638E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998842398886572	WITHOUT_CLASSIFICATION	1.1576011134273638E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998842398886572	WITHOUT_CLASSIFICATION	1.1576011134273638E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998842398886572	WITHOUT_CLASSIFICATION	1.1576011134273638E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998842398886572	WITHOUT_CLASSIFICATION	1.1576011134273638E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998425578517924	WITHOUT_CLASSIFICATION	1.5744214820755833E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998425578517924	WITHOUT_CLASSIFICATION	1.5744214820755833E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998425578517924	WITHOUT_CLASSIFICATION	1.5744214820755833E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998425578517924	WITHOUT_CLASSIFICATION	1.5744214820755833E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9998520627049206	WITHOUT_CLASSIFICATION	1.4793729507932608E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9998520627049206	WITHOUT_CLASSIFICATION	1.4793729507932608E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9998609293593945	WITHOUT_CLASSIFICATION	1.3907064060542286E-4	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999880278906441	WITHOUT_CLASSIFICATION	1.1972109355840503E-5	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999955258852471	WITHOUT_CLASSIFICATION	4.474114752994912E-6	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999861444358583	WITHOUT_CLASSIFICATION	1.3855564141732232E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999990503480326	WITHOUT_CLASSIFICATION	9.496519673999808E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999990503480326	WITHOUT_CLASSIFICATION	9.496519673999808E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999990503480326	WITHOUT_CLASSIFICATION	9.496519673999808E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999990503480326	WITHOUT_CLASSIFICATION	9.496519673999808E-6	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9999997634454295	WITHOUT_CLASSIFICATION	2.3655457048253E-7	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999917624466391	WITHOUT_CLASSIFICATION	8.237553360845526E-6	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999984952786117	WITHOUT_CLASSIFICATION	1.5047213882764665E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.999987863560639	WITHOUT_CLASSIFICATION	1.2136439361062621E-5	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.999969906023777	WITHOUT_CLASSIFICATION	3.0093976222931812E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999985131282588	WITHOUT_CLASSIFICATION	1.486871741161285E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999866813012125	WITHOUT_CLASSIFICATION	1.3318698787359815E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999952671520446	WITHOUT_CLASSIFICATION	4.732847955408405E-6	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.999998804871623	WITHOUT_CLASSIFICATION	1.1951283770046715E-6	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9998069324551419	WITHOUT_CLASSIFICATION	1.93067544858214E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999748577469459	WITHOUT_CLASSIFICATION	2.5142253054102542E-5	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999900151850981	WITHOUT_CLASSIFICATION	9.984814901922388E-6	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999676821514302	WITHOUT_CLASSIFICATION	3.231784856984519E-5	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999964855157863	WITHOUT_CLASSIFICATION	3.514484213585626E-6	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999921929629703	WITHOUT_CLASSIFICATION	7.80703702969963E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999985650971902	WITHOUT_CLASSIFICATION	1.434902809793767E-6	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999951736140089	WITHOUT_CLASSIFICATION	4.8263859910602035E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999990503480326	WITHOUT_CLASSIFICATION	9.496519673999808E-6	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999967779751474	WITHOUT_CLASSIFICATION	3.222024852618135E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999968076684753	WITHOUT_CLASSIFICATION	3.1923315247477115E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999893811394243	WITHOUT_CLASSIFICATION	1.0618860575612972E-5	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999478466981837	WITHOUT_CLASSIFICATION	5.215330181634899E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.999986114531482	WITHOUT_CLASSIFICATION	1.388546851806634E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999923203877814	WITHOUT_CLASSIFICATION	7.679612218584797E-6	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999996941260316	WITHOUT_CLASSIFICATION	3.058739684327183E-7	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999987926304712	WITHOUT_CLASSIFICATION	1.207369528775612E-6	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999980398780894	WITHOUT_CLASSIFICATION	1.9601219105363283E-6	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9999997489385536	WITHOUT_CLASSIFICATION	2.510614464186013E-7	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9999688850528314	WITHOUT_CLASSIFICATION	3.111494716856318E-5	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999737542941937	WITHOUT_CLASSIFICATION	2.6245705806405312E-5	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999957737869344	WITHOUT_CLASSIFICATION	4.226213065618009E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999830788869168	WITHOUT_CLASSIFICATION	1.692111308319353E-5	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999282721144844	WITHOUT_CLASSIFICATION	7.172788551547717E-5	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999526136585505	WITHOUT_CLASSIFICATION	4.738634144954293E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999878789716904	WITHOUT_CLASSIFICATION	1.2121028309755019E-5	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999988915170661	WITHOUT_CLASSIFICATION	1.1084829338934106E-6	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999985710945133	WITHOUT_CLASSIFICATION	1.4289054866946477E-6	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999977527058288	WITHOUT_CLASSIFICATION	2.2472941712296787E-6	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9999577825301595	WITHOUT_CLASSIFICATION	4.221746984052742E-5	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999644558674569	WITHOUT_CLASSIFICATION	3.5544132543170155E-5	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.999969529916528	WITHOUT_CLASSIFICATION	3.0470083471971747E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9998066371424259	WITHOUT_CLASSIFICATION	1.9336285757403374E-4	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.99998318175285	WITHOUT_CLASSIFICATION	1.6818247150057958E-5	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999434876465199	WITHOUT_CLASSIFICATION	5.6512353480127686E-5	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999977211860676	WITHOUT_CLASSIFICATION	2.278813932557585E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9949382251880561	WITHOUT_CLASSIFICATION	0.005061774811943902	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999979143699542	WITHOUT_CLASSIFICATION	2.0856300457294665E-6	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999956729112668	WITHOUT_CLASSIFICATION	4.327088733238297E-6	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999971586584149	WITHOUT_CLASSIFICATION	2.841341585094783E-6	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999824316230348	WITHOUT_CLASSIFICATION	1.756837696524541E-5	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999381076633456	WITHOUT_CLASSIFICATION	6.189233665443272E-5	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999959535253977	WITHOUT_CLASSIFICATION	4.046474602293937E-6	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999997335802224	WITHOUT_CLASSIFICATION	2.6641977767046735E-7	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999968800285424	WITHOUT_CLASSIFICATION	3.1199714576538445E-6	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999588558705877	WITHOUT_CLASSIFICATION	4.1144129412263564E-5	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999535548458849	WITHOUT_CLASSIFICATION	4.6445154115016925E-5	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999979629809526	WITHOUT_CLASSIFICATION	2.037019047445276E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999597993183822	WITHOUT_CLASSIFICATION	4.020068161777989E-5	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.999953687237002	WITHOUT_CLASSIFICATION	4.631276299808667E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999878611286132	WITHOUT_CLASSIFICATION	1.2138871386813449E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.999995556503345	WITHOUT_CLASSIFICATION	4.443496654934917E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999977056171336	WITHOUT_CLASSIFICATION	2.294382866389074E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999977056171336	WITHOUT_CLASSIFICATION	2.294382866389074E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999843852022354	WITHOUT_CLASSIFICATION	1.5614797764624892E-5	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999983733742446	WITHOUT_CLASSIFICATION	1.6266257553468252E-6	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999726632286917	WITHOUT_CLASSIFICATION	2.7336771308243285E-5	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999986778771461	WITHOUT_CLASSIFICATION	1.3221228538759403E-6	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999441728806792	WITHOUT_CLASSIFICATION	5.58271193209628E-5	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9999678290785958	WITHOUT_CLASSIFICATION	3.2170921404248566E-5	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9995262140128465	WITHOUT_CLASSIFICATION	4.73785987153568E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999405237985556	WITHOUT_CLASSIFICATION	5.9476201444539765E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999878611286132	WITHOUT_CLASSIFICATION	1.2138871386813449E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999774693828769	WITHOUT_CLASSIFICATION	2.2530617123038414E-5	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999637826635386	WITHOUT_CLASSIFICATION	3.621733646134822E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999977859118884	WITHOUT_CLASSIFICATION	2.214088111606054E-6	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999944518449838	WITHOUT_CLASSIFICATION	5.5481550160807425E-6	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999964043499167	WITHOUT_CLASSIFICATION	3.595650083475606E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999979170820785	WITHOUT_CLASSIFICATION	2.082917921482587E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999979170820785	WITHOUT_CLASSIFICATION	2.082917921482587E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999979170820785	WITHOUT_CLASSIFICATION	2.082917921482587E-6	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999965929997453	WITHOUT_CLASSIFICATION	3.407000254714801E-6	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999996953668484	WITHOUT_CLASSIFICATION	3.0463315162331015E-7	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999990394936504	WITHOUT_CLASSIFICATION	9.605063495918302E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9999836390560929	WITHOUT_CLASSIFICATION	1.6360943907088683E-5	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999991643481728	WITHOUT_CLASSIFICATION	8.356518272186529E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999943836507985	WITHOUT_CLASSIFICATION	5.616349201469017E-6	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.999974232964107	WITHOUT_CLASSIFICATION	2.5767035892928E-5	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999981320075965	WITHOUT_CLASSIFICATION	1.867992403653278E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999797425717513	WITHOUT_CLASSIFICATION	2.0257428248765947E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999797425717513	WITHOUT_CLASSIFICATION	2.0257428248765947E-5	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999561492192771	WITHOUT_CLASSIFICATION	4.3850780723004294E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999998266166792	WITHOUT_CLASSIFICATION	1.733833209108744E-7	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999576404033665	WITHOUT_CLASSIFICATION	4.235959663349813E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999576404033665	WITHOUT_CLASSIFICATION	4.235959663349813E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999997374662999	WITHOUT_CLASSIFICATION	2.6253370013802496E-7	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999986640186904	WITHOUT_CLASSIFICATION	1.3359813096136951E-6	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.999887080057067	WITHOUT_CLASSIFICATION	1.1291994293304696E-4	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.999996987933258	WITHOUT_CLASSIFICATION	3.0120667419529666E-6	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999891083213285	WITHOUT_CLASSIFICATION	1.0891678671478924E-5	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999937426801385	WITHOUT_CLASSIFICATION	6.2573198614828115E-6	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999058668010459	WITHOUT_CLASSIFICATION	9.413319895411092E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.999982197177998	WITHOUT_CLASSIFICATION	1.7802822002023784E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999880630303946	WITHOUT_CLASSIFICATION	1.1936969605367655E-5	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999981548738434	WITHOUT_CLASSIFICATION	1.8451261566577598E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999878611286132	WITHOUT_CLASSIFICATION	1.2138871386813449E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999936068444322	WITHOUT_CLASSIFICATION	6.393155567859525E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999951040297612	WITHOUT_CLASSIFICATION	4.895970238772628E-6	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999626156308029	WITHOUT_CLASSIFICATION	3.738436919711563E-5	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9997857351293744	WITHOUT_CLASSIFICATION	2.1426487062552294E-4	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999992364866936	WITHOUT_CLASSIFICATION	7.635133062959593E-7	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999921154885996	WITHOUT_CLASSIFICATION	7.884511400465943E-6	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9996933073586597	WITHOUT_CLASSIFICATION	3.0669264134028026E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9990850305381045	WITHOUT_CLASSIFICATION	9.149694618955124E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999910143062811	WITHOUT_CLASSIFICATION	8.985693718915936E-6	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999683861960028	WITHOUT_CLASSIFICATION	3.161380399721701E-5	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999935179951435	WITHOUT_CLASSIFICATION	6.48200485658795E-6	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999954600291016	WITHOUT_CLASSIFICATION	4.539970898428002E-6	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9985408841869695	WITHOUT_CLASSIFICATION	0.0014591158130303746	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999852106058191	WITHOUT_CLASSIFICATION	1.478939418074171E-5	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.999982266564079	WITHOUT_CLASSIFICATION	1.773343592101928E-5	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.999986197657257	WITHOUT_CLASSIFICATION	1.3802342742981968E-5	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999996594061497	WITHOUT_CLASSIFICATION	3.405938503131194E-7	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999913236271816	WITHOUT_CLASSIFICATION	8.676372818374242E-6	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999604762402222	WITHOUT_CLASSIFICATION	3.9523759777861964E-5	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.999999881982281	WITHOUT_CLASSIFICATION	1.1801771899979993E-7	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999753463189982	WITHOUT_CLASSIFICATION	2.465368100184125E-5	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999905492742206	WITHOUT_CLASSIFICATION	9.450725779339828E-6	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9998772377238223	WITHOUT_CLASSIFICATION	1.2276227617771034E-4	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999892226381085	WITHOUT_CLASSIFICATION	1.0777361891550922E-5	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999998862169622	WITHOUT_CLASSIFICATION	1.1378303774315894E-7	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.999998080217395	WITHOUT_CLASSIFICATION	1.9197826049188955E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999904776049395	WITHOUT_CLASSIFICATION	9.522395060362395E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9998933240570839	WITHOUT_CLASSIFICATION	1.066759429161734E-4	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999981500826495	WITHOUT_CLASSIFICATION	1.849917350523164E-6	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.999994246095808	WITHOUT_CLASSIFICATION	5.753904191962687E-6	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999985781523263	WITHOUT_CLASSIFICATION	1.4218476737702104E-6	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999984082348597	WITHOUT_CLASSIFICATION	1.5917651402437402E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999837717496184	WITHOUT_CLASSIFICATION	1.6228250381603777E-5	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999983953704992	WITHOUT_CLASSIFICATION	1.604629500875475E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.999946110983745	WITHOUT_CLASSIFICATION	5.38890162550034E-5	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9998072899579313	WITHOUT_CLASSIFICATION	1.9271004206867674E-4	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999970213897051	WITHOUT_CLASSIFICATION	2.9786102949718145E-6	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999882697330528	WITHOUT_CLASSIFICATION	1.1730266947238905E-5	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999929485273553	WITHOUT_CLASSIFICATION	7.0514726447000274E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998963500690404	WITHOUT_CLASSIFICATION	1.0364993095949563E-4	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999992917920763	WITHOUT_CLASSIFICATION	7.082079236554717E-7	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999897822590728	WITHOUT_CLASSIFICATION	1.021774092722418E-5	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999973903724673	WITHOUT_CLASSIFICATION	2.6096275326943607E-6	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999970920272329	WITHOUT_CLASSIFICATION	2.907972767125366E-6	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999879421699291	WITHOUT_CLASSIFICATION	1.2057830070749354E-5	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999927204963541	WITHOUT_CLASSIFICATION	7.279503645871814E-6	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999939209942623	WITHOUT_CLASSIFICATION	6.079005737596023E-6	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999981095180266	WITHOUT_CLASSIFICATION	1.8904819733480948E-6	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999973605104971	WITHOUT_CLASSIFICATION	2.639489502939415E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999696070458729	WITHOUT_CLASSIFICATION	3.039295412705836E-5	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999668180941771	WITHOUT_CLASSIFICATION	3.318190582295141E-5	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999985847387151	WITHOUT_CLASSIFICATION	1.4152612850120646E-6	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999993753591327	WITHOUT_CLASSIFICATION	6.246408672004171E-7	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999984266948421	WITHOUT_CLASSIFICATION	1.5733051578913516E-6	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.999996951260384	WITHOUT_CLASSIFICATION	3.048739616008144E-6	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999954470580148	WITHOUT_CLASSIFICATION	4.55294198513182E-6	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9997642356401643	WITHOUT_CLASSIFICATION	2.3576435983571126E-4	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999887767594235	WITHOUT_CLASSIFICATION	1.1223240576376473E-5	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999990515829199	WITHOUT_CLASSIFICATION	9.484170800057201E-7	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999982743288293	WITHOUT_CLASSIFICATION	1.7256711707154738E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999337806800265	WITHOUT_CLASSIFICATION	6.621931997349392E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999337806800265	WITHOUT_CLASSIFICATION	6.621931997349392E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999375809357469	WITHOUT_CLASSIFICATION	6.241906425309435E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999375809357469	WITHOUT_CLASSIFICATION	6.241906425309435E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9998800894806864	WITHOUT_CLASSIFICATION	1.1991051931360196E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9998800894806864	WITHOUT_CLASSIFICATION	1.1991051931360196E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999471565300728	WITHOUT_CLASSIFICATION	5.284346992729383E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999471565300728	WITHOUT_CLASSIFICATION	5.284346992729383E-5	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999993981757167	WITHOUT_CLASSIFICATION	6.018242832296691E-7	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999938592718454	WITHOUT_CLASSIFICATION	6.140728154591499E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999520267347018	WITHOUT_CLASSIFICATION	4.7973265298199136E-5	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999930293077388	WITHOUT_CLASSIFICATION	6.970692261207106E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999990241012854	WITHOUT_CLASSIFICATION	9.75898714664072E-7	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999981679429598	WITHOUT_CLASSIFICATION	1.8320570402572232E-6	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.999701006254859	WITHOUT_CLASSIFICATION	2.98993745141014E-4	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.999994373932135	WITHOUT_CLASSIFICATION	5.626067865007811E-6	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999832297906072	WITHOUT_CLASSIFICATION	1.6770209392844247E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999906003727359	WITHOUT_CLASSIFICATION	9.399627264057257E-6	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999951727874641	WITHOUT_CLASSIFICATION	4.827212535966075E-6	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999862382355603	WITHOUT_CLASSIFICATION	1.3761764439640567E-5	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999202605189177	WITHOUT_CLASSIFICATION	7.973948108236557E-5	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999964948910995	WITHOUT_CLASSIFICATION	3.5051089004392575E-6	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.999995899848917	WITHOUT_CLASSIFICATION	4.10015108294193E-6	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999504865014603	WITHOUT_CLASSIFICATION	4.951349853970026E-5	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999966287289512	WITHOUT_CLASSIFICATION	3.37127104875709E-6	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999895541272231	WITHOUT_CLASSIFICATION	1.0445872776886003E-5	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999822377371413	WITHOUT_CLASSIFICATION	1.7762262858675205E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9999393673142709	WITHOUT_CLASSIFICATION	6.0632685729221634E-5	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.999973174890816	WITHOUT_CLASSIFICATION	2.6825109183975786E-5	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.999994781543702	WITHOUT_CLASSIFICATION	5.218456297980215E-6	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999869920024841	WITHOUT_CLASSIFICATION	1.3007997515921736E-5	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999756246081806	WITHOUT_CLASSIFICATION	2.4375391819460926E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999663216186349	WITHOUT_CLASSIFICATION	3.367838136518124E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999906473899031	WITHOUT_CLASSIFICATION	9.352610097010778E-6	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999866608751362	WITHOUT_CLASSIFICATION	1.3339124863928147E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999928341580638	WITHOUT_CLASSIFICATION	7.165841936054445E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999928341580638	WITHOUT_CLASSIFICATION	7.165841936054445E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999773374388982	WITHOUT_CLASSIFICATION	2.266256110184037E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999929829018517	WITHOUT_CLASSIFICATION	7.017098148353023E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999945181009315	WITHOUT_CLASSIFICATION	5.481899068477457E-6	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999969104567711	WITHOUT_CLASSIFICATION	3.089543228957042E-6	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999597547136049	WITHOUT_CLASSIFICATION	4.024528639509789E-5	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9998922594012736	WITHOUT_CLASSIFICATION	1.0774059872639703E-4	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999749325321526	WITHOUT_CLASSIFICATION	2.506746784740273E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999749325321526	WITHOUT_CLASSIFICATION	2.506746784740273E-5	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999705894125431	WITHOUT_CLASSIFICATION	2.941058745682119E-5	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9930404868755086	WITHOUT_CLASSIFICATION	0.00695951312449139	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999778133474095	WITHOUT_CLASSIFICATION	2.2186652590402863E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999778133474095	WITHOUT_CLASSIFICATION	2.2186652590402863E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.999998032584566	WITHOUT_CLASSIFICATION	1.967415433957338E-6	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999670920070408	WITHOUT_CLASSIFICATION	3.290799295919282E-5	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999670920070408	WITHOUT_CLASSIFICATION	3.290799295919282E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999766391052565	WITHOUT_CLASSIFICATION	2.3360894743558375E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999766391052565	WITHOUT_CLASSIFICATION	2.3360894743558375E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999031829969748	WITHOUT_CLASSIFICATION	9.681700302518467E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999031829969748	WITHOUT_CLASSIFICATION	9.681700302518467E-5	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.99992522089305	WITHOUT_CLASSIFICATION	7.477910694998288E-5	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999822327309553	WITHOUT_CLASSIFICATION	1.776726904458456E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999883429581726	WITHOUT_CLASSIFICATION	1.1657041827395426E-5	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999810708305991	WITHOUT_CLASSIFICATION	1.8929169400949812E-5	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999971573143741	WITHOUT_CLASSIFICATION	2.8426856259184837E-6	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999945227057391	WITHOUT_CLASSIFICATION	5.477294260885023E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999832094979605	WITHOUT_CLASSIFICATION	1.679050203953326E-5	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999860568425873	WITHOUT_CLASSIFICATION	1.3943157412711807E-5	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999832094979605	WITHOUT_CLASSIFICATION	1.679050203953326E-5	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9998237646572421	WITHOUT_CLASSIFICATION	1.7623534275790277E-4	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999955477699178	WITHOUT_CLASSIFICATION	4.452230082134062E-6	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999930084199238	WITHOUT_CLASSIFICATION	6.991580076186916E-6	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999983579109386	WITHOUT_CLASSIFICATION	1.642089061412591E-6	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.999991160885101	WITHOUT_CLASSIFICATION	8.839114899034898E-6	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999963279172477	WITHOUT_CLASSIFICATION	3.672082752418296E-6	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999958480046276	WITHOUT_CLASSIFICATION	4.151995372362327E-6	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999910503044147	WITHOUT_CLASSIFICATION	8.949695585168886E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999965322480018	WITHOUT_CLASSIFICATION	3.46775199827646E-6	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999889898316118	WITHOUT_CLASSIFICATION	1.1010168388202251E-5	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999907706890943	WITHOUT_CLASSIFICATION	9.229310905676042E-6	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999848680632952	WITHOUT_CLASSIFICATION	1.5131936704641637E-5	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999783387982211	WITHOUT_CLASSIFICATION	2.1661201778865794E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999948181301433	WITHOUT_CLASSIFICATION	5.181869856646921E-6	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.999984738335042	WITHOUT_CLASSIFICATION	1.5261664958014607E-5	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999856418916155	WITHOUT_CLASSIFICATION	1.4358108384537853E-5	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999423737254522	WITHOUT_CLASSIFICATION	5.762627454776398E-5	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999945842488328	WITHOUT_CLASSIFICATION	5.415751167116258E-6	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999962162217491	WITHOUT_CLASSIFICATION	3.7837782510255407E-6	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999743250301182	WITHOUT_CLASSIFICATION	2.5674969881811987E-5	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999861847746436	WITHOUT_CLASSIFICATION	1.3815225356423574E-5	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999929922229844	WITHOUT_CLASSIFICATION	7.0077770154790355E-6	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999988378353039	WITHOUT_CLASSIFICATION	1.1621646961260975E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.999934050670105	WITHOUT_CLASSIFICATION	6.594932989493201E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999922810876118	WITHOUT_CLASSIFICATION	7.718912388241134E-6	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999921710701125	WITHOUT_CLASSIFICATION	7.82892988738303E-6	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999983300285885	WITHOUT_CLASSIFICATION	1.6699714114814631E-6	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999966028134127	WITHOUT_CLASSIFICATION	3.397186587240317E-6	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999806709661806	WITHOUT_CLASSIFICATION	1.9329033819373843E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999927204779916	WITHOUT_CLASSIFICATION	7.279522008331961E-6	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999891116226844	WITHOUT_CLASSIFICATION	1.0888377315485108E-5	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999991323593537	WITHOUT_CLASSIFICATION	8.676406464516673E-7	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999465112172421	WITHOUT_CLASSIFICATION	5.348878275791555E-5	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999952357086607	WITHOUT_CLASSIFICATION	4.764291339301936E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999942301082604	WITHOUT_CLASSIFICATION	5.769891739564209E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999816041138213	WITHOUT_CLASSIFICATION	1.8395886178642965E-5	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.999985466318752	WITHOUT_CLASSIFICATION	1.4533681248076801E-5	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999961243978674	WITHOUT_CLASSIFICATION	3.875602132522115E-6	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999914775766252	WITHOUT_CLASSIFICATION	8.522423374734241E-6	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999562266497908	WITHOUT_CLASSIFICATION	4.3773350209098784E-5	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999594386034052	WITHOUT_CLASSIFICATION	4.056139659481038E-5	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999958554285666	WITHOUT_CLASSIFICATION	4.1445714333674345E-6	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999948997073673	WITHOUT_CLASSIFICATION	5.100292632672714E-6	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999951472085169	WITHOUT_CLASSIFICATION	4.852791483159073E-6	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999980816554799	WITHOUT_CLASSIFICATION	1.918344520222722E-6	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999958120823658	WITHOUT_CLASSIFICATION	4.187917634169252E-6	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999931689080666	WITHOUT_CLASSIFICATION	6.831091933468042E-6	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999982343961792	WITHOUT_CLASSIFICATION	1.7656038208517371E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999946664850966	WITHOUT_CLASSIFICATION	5.333514903352078E-6	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999500541814768	WITHOUT_CLASSIFICATION	4.994581852312352E-5	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9990730975222399	WITHOUT_CLASSIFICATION	9.269024777601371E-4	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999959656035261	WITHOUT_CLASSIFICATION	4.0343964739633E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999829724128031	WITHOUT_CLASSIFICATION	1.7027587196904203E-5	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.999998366055782	WITHOUT_CLASSIFICATION	1.6339442180179787E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999934100844903	WITHOUT_CLASSIFICATION	6.5899155097067165E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999934100844903	WITHOUT_CLASSIFICATION	6.5899155097067165E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999995478100618	WITHOUT_CLASSIFICATION	4.521899382059143E-7	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999989755116429	WITHOUT_CLASSIFICATION	1.0244883571023892E-6	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.999982502144996	WITHOUT_CLASSIFICATION	1.749785500404944E-5	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999964798733916	WITHOUT_CLASSIFICATION	3.5201266084239742E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999966142031854	WITHOUT_CLASSIFICATION	3.385796814528864E-6	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999984853958399	WITHOUT_CLASSIFICATION	1.514604160139355E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999963804197358	WITHOUT_CLASSIFICATION	3.6195802642136438E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.999996684627578	WITHOUT_CLASSIFICATION	3.315372422069274E-6	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999968245133031	WITHOUT_CLASSIFICATION	3.1754866969864113E-6	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999967790345295	WITHOUT_CLASSIFICATION	3.2209654703768E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999969850372905	WITHOUT_CLASSIFICATION	3.0149627095024486E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999969850372905	WITHOUT_CLASSIFICATION	3.0149627095024486E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999885261964416	WITHOUT_CLASSIFICATION	1.1473803558249524E-5	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999924375295242	WITHOUT_CLASSIFICATION	7.562470475778034E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999995465606579	WITHOUT_CLASSIFICATION	4.534393421054937E-7	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.999997689288598	WITHOUT_CLASSIFICATION	2.310711402018803E-6	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999996320521325	WITHOUT_CLASSIFICATION	3.679478676072011E-7	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999834956347053	WITHOUT_CLASSIFICATION	1.650436529463865E-5	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999979145664906	WITHOUT_CLASSIFICATION	2.085433509483363E-6	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999659335425208	WITHOUT_CLASSIFICATION	3.4066457479179846E-5	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999921252634079	WITHOUT_CLASSIFICATION	7.874736592127378E-6	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.999999882015131	WITHOUT_CLASSIFICATION	1.1798486905045472E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999903987159822	WITHOUT_CLASSIFICATION	9.60128401788527E-6	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999965240435631	WITHOUT_CLASSIFICATION	3.475956436901579E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999918462253699	WITHOUT_CLASSIFICATION	8.153774630113783E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999918462253699	WITHOUT_CLASSIFICATION	8.153774630113783E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999791861713928	WITHOUT_CLASSIFICATION	2.0813828607295336E-5	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9998099175643789	WITHOUT_CLASSIFICATION	1.9008243562109323E-4	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999633994262862	WITHOUT_CLASSIFICATION	3.660057371382921E-5	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999998521418553	WITHOUT_CLASSIFICATION	1.478581448292113E-7	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999992276226987	WITHOUT_CLASSIFICATION	7.723773013413759E-7	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999300720577327	WITHOUT_CLASSIFICATION	6.992794226731064E-5	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999969923017198	WITHOUT_CLASSIFICATION	3.0076982803106596E-6	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999855923801909	WITHOUT_CLASSIFICATION	1.4407619809155329E-5	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9999607521506424	WITHOUT_CLASSIFICATION	3.9247849357580225E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999903928398893	WITHOUT_CLASSIFICATION	9.607160110678459E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999995465606579	WITHOUT_CLASSIFICATION	4.534393421054937E-7	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999954982006097	WITHOUT_CLASSIFICATION	4.501799390265773E-6	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999967676636037	WITHOUT_CLASSIFICATION	3.232336396330438E-6	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999985170012553	WITHOUT_CLASSIFICATION	1.4829987446616648E-6	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999992147685477	WITHOUT_CLASSIFICATION	7.852314521809566E-7	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999863347776085	WITHOUT_CLASSIFICATION	1.3665222391489226E-5	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999995015517579	WITHOUT_CLASSIFICATION	4.984482420490685E-7	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999912742481325	WITHOUT_CLASSIFICATION	8.725751867562014E-6	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999975191232241	WITHOUT_CLASSIFICATION	2.480876775800964E-6	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999991916728476	WITHOUT_CLASSIFICATION	8.083271524969477E-7	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999928229776791	WITHOUT_CLASSIFICATION	7.177022320894759E-6	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999876163321364	WITHOUT_CLASSIFICATION	1.2383667863648826E-5	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999980257717686	WITHOUT_CLASSIFICATION	1.9742282313946874E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999894314856905	WITHOUT_CLASSIFICATION	1.0568514309562128E-5	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9999772012279361	WITHOUT_CLASSIFICATION	2.2798772063982856E-5	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999799336455087	WITHOUT_CLASSIFICATION	2.0066354491274914E-5	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999962303366533	WITHOUT_CLASSIFICATION	3.7696633466985704E-6	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999579356332273	WITHOUT_CLASSIFICATION	4.206436677264942E-5	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9998862498304527	WITHOUT_CLASSIFICATION	1.1375016954730096E-4	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999409338298935	WITHOUT_CLASSIFICATION	5.906617010646094E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.999986571323072	WITHOUT_CLASSIFICATION	1.3428676928073456E-5	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9999989761266925	WITHOUT_CLASSIFICATION	1.0238733075109884E-6	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999941130113137	WITHOUT_CLASSIFICATION	5.886988686390389E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.999936976267084	WITHOUT_CLASSIFICATION	6.302373291600208E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9999468597960456	WITHOUT_CLASSIFICATION	5.314020395443031E-5	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999968558463403	WITHOUT_CLASSIFICATION	3.14415365956335E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.999997009937919	WITHOUT_CLASSIFICATION	2.9900620809997857E-6	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.999848654883762	WITHOUT_CLASSIFICATION	1.513451162379643E-4	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999984142382577	WITHOUT_CLASSIFICATION	1.5857617422667024E-6	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999554076740012	WITHOUT_CLASSIFICATION	4.459232599873468E-5	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.99999986669859	WITHOUT_CLASSIFICATION	1.333014100703225E-7	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999450589767983	WITHOUT_CLASSIFICATION	5.494102320177823E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999450589767983	WITHOUT_CLASSIFICATION	5.494102320177823E-5	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999955800778363	WITHOUT_CLASSIFICATION	4.419922163686567E-6	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999975266691309	WITHOUT_CLASSIFICATION	2.473330869135925E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999551524347314	WITHOUT_CLASSIFICATION	4.4847565268591774E-5	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999992549471882	WITHOUT_CLASSIFICATION	7.45052811803526E-7	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999986647093075	WITHOUT_CLASSIFICATION	1.3352906924994422E-6	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999952874407763	WITHOUT_CLASSIFICATION	4.7125592237304156E-6	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999878611286132	WITHOUT_CLASSIFICATION	1.2138871386813449E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999952761774653	WITHOUT_CLASSIFICATION	4.723822534699121E-6	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999969042440483	WITHOUT_CLASSIFICATION	3.095755951772983E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999964930362605	WITHOUT_CLASSIFICATION	3.506963739394855E-6	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999990394893339	WITHOUT_CLASSIFICATION	9.605106661120668E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999517211524775	WITHOUT_CLASSIFICATION	4.827884752255678E-5	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999994015630596	WITHOUT_CLASSIFICATION	5.984369403482381E-7	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998963500690404	WITHOUT_CLASSIFICATION	1.0364993095949563E-4	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999996725408956	WITHOUT_CLASSIFICATION	3.274591043240555E-7	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999958248663896	WITHOUT_CLASSIFICATION	4.1751336104298605E-6	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999993026535838	WITHOUT_CLASSIFICATION	6.97346416250325E-7	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999850972848909	WITHOUT_CLASSIFICATION	1.4902715109155098E-5	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999858490892118	WITHOUT_CLASSIFICATION	1.4150910788094902E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999822706936382	WITHOUT_CLASSIFICATION	1.7729306361776702E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999870850603485	WITHOUT_CLASSIFICATION	1.2914939651478675E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999870850603485	WITHOUT_CLASSIFICATION	1.2914939651478675E-5	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999931599386158	WITHOUT_CLASSIFICATION	6.840061384189081E-6	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999873715738531	WITHOUT_CLASSIFICATION	1.2628426146986958E-5	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999929812719527	WITHOUT_CLASSIFICATION	7.018728047216888E-6	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999913998683693	WITHOUT_CLASSIFICATION	8.60013163075206E-6	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999952054603384	WITHOUT_CLASSIFICATION	4.794539661655907E-6	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999905368181186	WITHOUT_CLASSIFICATION	9.463181881482302E-6	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999980999065177	WITHOUT_CLASSIFICATION	1.9000934823918812E-6	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999990314390845	WITHOUT_CLASSIFICATION	9.685609154956933E-7	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999948408509846	WITHOUT_CLASSIFICATION	5.159149015466246E-6	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999990917744939	WITHOUT_CLASSIFICATION	9.08225506030851E-7	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999878365097048	WITHOUT_CLASSIFICATION	1.2163490295096337E-5	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999982312467219	WITHOUT_CLASSIFICATION	1.7687532780653975E-6	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999941339065823	WITHOUT_CLASSIFICATION	5.866093417749821E-6	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999988246936783	WITHOUT_CLASSIFICATION	1.1753063217101627E-6	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999705903238132	WITHOUT_CLASSIFICATION	2.9409676186806244E-5	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.999987187940365	WITHOUT_CLASSIFICATION	1.281205963504816E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999924566049703	WITHOUT_CLASSIFICATION	7.54339502971857E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999950817276666	WITHOUT_CLASSIFICATION	4.918272333312751E-6	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999993034297575	WITHOUT_CLASSIFICATION	6.96570242557654E-7	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999966981881617	WITHOUT_CLASSIFICATION	3.30181183831051E-6	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.999987254509398	WITHOUT_CLASSIFICATION	1.2745490602103848E-5	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999661146000147	WITHOUT_CLASSIFICATION	3.3885399985334654E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999721499466844	WITHOUT_CLASSIFICATION	2.7850053315557453E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9999765613063226	WITHOUT_CLASSIFICATION	2.343869367741052E-5	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999042444288092	WITHOUT_CLASSIFICATION	9.575557119080915E-5	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999532488577544	WITHOUT_CLASSIFICATION	4.675114224561364E-5	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999505590202257	WITHOUT_CLASSIFICATION	4.944097977441639E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999748873014777	WITHOUT_CLASSIFICATION	2.511269852244233E-5	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999904863768324	WITHOUT_CLASSIFICATION	9.513623167700334E-6	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9998619519880048	WITHOUT_CLASSIFICATION	1.380480119952765E-4	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999819215910237	WITHOUT_CLASSIFICATION	1.8078408976310316E-5	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999980429932829	WITHOUT_CLASSIFICATION	1.9570067170407984E-6	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999772675080283	WITHOUT_CLASSIFICATION	2.2732491971743768E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999407236691471	WITHOUT_CLASSIFICATION	5.927633085297922E-5	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9999979900249153	WITHOUT_CLASSIFICATION	2.009975084763267E-6	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9999910390586119	WITHOUT_CLASSIFICATION	8.9609413881368E-6	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9999840000402102	WITHOUT_CLASSIFICATION	1.5999959789907995E-5	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999963975590307	WITHOUT_CLASSIFICATION	3.6024409693224247E-6	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999826507975575	WITHOUT_CLASSIFICATION	1.7349202442502367E-5	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999996943091108	WITHOUT_CLASSIFICATION	3.056908890760585E-7	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999866843424363	WITHOUT_CLASSIFICATION	1.3315657563748264E-5	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999803789075714	WITHOUT_CLASSIFICATION	1.962109242851361E-5	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999747367631916	WITHOUT_CLASSIFICATION	2.52632368083208E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9998941532722466	WITHOUT_CLASSIFICATION	1.0584672775342185E-4	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9998779517683642	WITHOUT_CLASSIFICATION	1.220482316357978E-4	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9998941532722466	WITHOUT_CLASSIFICATION	1.0584672775342185E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9997154098425995	WITHOUT_CLASSIFICATION	2.8459015740043875E-4	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9997757587284185	WITHOUT_CLASSIFICATION	2.2424127158145928E-4	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999986219456086	WITHOUT_CLASSIFICATION	1.3780543913047415E-6	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9152360288590407	WITHOUT_CLASSIFICATION	0.0847639711409593	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999791651935016	WITHOUT_CLASSIFICATION	2.0834806498352514E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999963392401352	WITHOUT_CLASSIFICATION	3.6607598648908185E-6	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999835116251158	WITHOUT_CLASSIFICATION	1.648837488418083E-5	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9999726904520507	WITHOUT_CLASSIFICATION	2.7309547949249416E-5	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999981728176358	WITHOUT_CLASSIFICATION	1.827182364104936E-6	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9998500130514166	WITHOUT_CLASSIFICATION	1.4998694858342783E-4	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9999609219180764	WITHOUT_CLASSIFICATION	3.90780819237032E-5	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.999988539961509	WITHOUT_CLASSIFICATION	1.1460038490853409E-5	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999978066553183	WITHOUT_CLASSIFICATION	2.1933446815689148E-6	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999982869724346	WITHOUT_CLASSIFICATION	1.7130275654428986E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999818999290785	WITHOUT_CLASSIFICATION	1.810007092159333E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9870839338738364	WITHOUT_CLASSIFICATION	0.012916066126163594	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999992757861166	WITHOUT_CLASSIFICATION	7.242138834107147E-7	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9996844235010793	WITHOUT_CLASSIFICATION	3.155764989206751E-4	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999778373592323	WITHOUT_CLASSIFICATION	2.2162640767675897E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.999881627720415	WITHOUT_CLASSIFICATION	1.1837227958502436E-4	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999227816914292	WITHOUT_CLASSIFICATION	7.721830857077224E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999863276480493	WITHOUT_CLASSIFICATION	1.3672351950794228E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999330264244165	WITHOUT_CLASSIFICATION	6.69735755835511E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999806286239521	WITHOUT_CLASSIFICATION	1.9371376047915742E-5	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.999998865093061	WITHOUT_CLASSIFICATION	1.13490693896809E-6	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999605475084405	WITHOUT_CLASSIFICATION	3.945249155955324E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999571175002022	WITHOUT_CLASSIFICATION	4.288249979779351E-5	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999833608556998	WITHOUT_CLASSIFICATION	1.6639144300170233E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999748577469459	WITHOUT_CLASSIFICATION	2.5142253054102542E-5	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9992569448318763	WITHOUT_CLASSIFICATION	7.430551681236564E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999038729778051	WITHOUT_CLASSIFICATION	9.612702219484226E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999344385802181	WITHOUT_CLASSIFICATION	6.556141978194542E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999450883896503	WITHOUT_CLASSIFICATION	5.49116103496892E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.999983513013586	WITHOUT_CLASSIFICATION	1.6486986414023347E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999912072078158	WITHOUT_CLASSIFICATION	8.792792184225788E-6	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999918154069947	WITHOUT_CLASSIFICATION	8.184593005316787E-6	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999954143893433	WITHOUT_CLASSIFICATION	4.5856106566868585E-6	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999979316030568	WITHOUT_CLASSIFICATION	2.068396943151705E-6	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999992719536357	WITHOUT_CLASSIFICATION	7.280463642964281E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9998076644496922	WITHOUT_CLASSIFICATION	1.9233555030775842E-4	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999995859745766	WITHOUT_CLASSIFICATION	4.1402542337726294E-7	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999950392115227	WITHOUT_CLASSIFICATION	4.960788477302585E-6	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999997456302712	WITHOUT_CLASSIFICATION	2.543697288462685E-7	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999573501027074	WITHOUT_CLASSIFICATION	4.264989729271575E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999573501027074	WITHOUT_CLASSIFICATION	4.264989729271575E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999766368311719	WITHOUT_CLASSIFICATION	2.3363168828147253E-5	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999962737077648	WITHOUT_CLASSIFICATION	3.7262922352436856E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9999956261744751	WITHOUT_CLASSIFICATION	4.373825524876988E-6	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999983486659837	WITHOUT_CLASSIFICATION	1.6513340163027303E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999980135081559	WITHOUT_CLASSIFICATION	1.9864918442281115E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999983235699704	WITHOUT_CLASSIFICATION	1.676430029558236E-6	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.99995880475151	WITHOUT_CLASSIFICATION	4.119524848994817E-5	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999814459744537	WITHOUT_CLASSIFICATION	1.8554025546293714E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999995270488446	WITHOUT_CLASSIFICATION	4.729511552737486E-7	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999926329472825	WITHOUT_CLASSIFICATION	7.367052717519689E-6	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999989425958425	WITHOUT_CLASSIFICATION	1.0574041574683857E-6	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999984660087072	WITHOUT_CLASSIFICATION	1.533991292813561E-6	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999699903290322	WITHOUT_CLASSIFICATION	3.0009670967823955E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999938435093336	WITHOUT_CLASSIFICATION	6.1564906662776244E-6	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999995779407689	WITHOUT_CLASSIFICATION	4.2205923110650976E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999971806518362	WITHOUT_CLASSIFICATION	2.819348163859429E-6	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999910408839341	WITHOUT_CLASSIFICATION	8.959116065782141E-6	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999967091155922	WITHOUT_CLASSIFICATION	3.2908844077199187E-6	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999952246346263	WITHOUT_CLASSIFICATION	4.775365373649958E-6	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999955645722	WITHOUT_CLASSIFICATION	4.435427800083953E-6	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9998580785447918	WITHOUT_CLASSIFICATION	1.4192145520829235E-4	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9999552361093731	WITHOUT_CLASSIFICATION	4.4763890626879285E-5	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999977936195151	WITHOUT_CLASSIFICATION	2.2063804847861784E-6	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999995262404439	WITHOUT_CLASSIFICATION	4.73759556021261E-7	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9999980804253416	WITHOUT_CLASSIFICATION	1.919574658480918E-6	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999996809537399	WITHOUT_CLASSIFICATION	3.190462601637595E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999791622128735	WITHOUT_CLASSIFICATION	2.0837787126397475E-5	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9999503870132604	WITHOUT_CLASSIFICATION	4.961298673956411E-5	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999986807507527	WITHOUT_CLASSIFICATION	1.319249247281471E-6	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.999957441594432	WITHOUT_CLASSIFICATION	4.2558405568060636E-5	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999948424910712	WITHOUT_CLASSIFICATION	5.1575089288460965E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.999912536542443	WITHOUT_CLASSIFICATION	8.746345755701514E-5	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999983756845272	WITHOUT_CLASSIFICATION	1.6243154728676036E-6	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.999995005562558	WITHOUT_CLASSIFICATION	4.994437441901355E-6	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999985995738307	WITHOUT_CLASSIFICATION	1.4004261692375588E-6	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999970116059107	WITHOUT_CLASSIFICATION	2.9883940893144878E-6	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999925694061599	WITHOUT_CLASSIFICATION	7.430593840092938E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999223218880295	WITHOUT_CLASSIFICATION	7.767811197043177E-5	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9999670639261765	WITHOUT_CLASSIFICATION	3.293607382349803E-5	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999384372060416	WITHOUT_CLASSIFICATION	6.15627939584519E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999950208581176	WITHOUT_CLASSIFICATION	4.979141882359052E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9999992722480412	WITHOUT_CLASSIFICATION	7.277519587545622E-7	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999972597498725	WITHOUT_CLASSIFICATION	2.7402501274975216E-6	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999983235228428	WITHOUT_CLASSIFICATION	1.6764771572195253E-6	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999967630022079	WITHOUT_CLASSIFICATION	3.2369977922260173E-6	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999963747499966	WITHOUT_CLASSIFICATION	3.6252500035093614E-6	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999945775287116	WITHOUT_CLASSIFICATION	5.42247128851721E-6	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999926962255468	WITHOUT_CLASSIFICATION	7.303774453188245E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9998541633813923	WITHOUT_CLASSIFICATION	1.458366186076376E-4	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999862721202738	WITHOUT_CLASSIFICATION	1.372787972625467E-5	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999988291108143	WITHOUT_CLASSIFICATION	1.170889185655166E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999986019659971	WITHOUT_CLASSIFICATION	1.398034002813955E-6	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999983733057886	WITHOUT_CLASSIFICATION	1.626694211442164E-6	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999914798823125	WITHOUT_CLASSIFICATION	8.520117687549452E-6	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.999960372190191	WITHOUT_CLASSIFICATION	3.9627809808990704E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9995603373475203	WITHOUT_CLASSIFICATION	4.3966265247972477E-4	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999979531150324	WITHOUT_CLASSIFICATION	2.0468849675830505E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9986070278228757	WITHOUT_CLASSIFICATION	0.0013929721771243119	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999997426016559	WITHOUT_CLASSIFICATION	2.5739834408458714E-7	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999641759182105	WITHOUT_CLASSIFICATION	3.5824081789496184E-5	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999945103333373	WITHOUT_CLASSIFICATION	5.489666662745341E-6	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999926699695827	WITHOUT_CLASSIFICATION	7.330030417284934E-6	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999974964715937	WITHOUT_CLASSIFICATION	2.5035284063074808E-6	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999965606753054	WITHOUT_CLASSIFICATION	3.439324694551478E-6	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9995908971193026	WITHOUT_CLASSIFICATION	4.0910288069749464E-4	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999173606084891	WITHOUT_CLASSIFICATION	8.263939151090415E-5	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999650402680398	WITHOUT_CLASSIFICATION	3.495973196030058E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999882638044462	WITHOUT_CLASSIFICATION	1.1736195553889666E-5	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999611662274556	WITHOUT_CLASSIFICATION	3.8833772544382855E-5	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999760954913778	WITHOUT_CLASSIFICATION	2.3904508622286602E-5	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999929626689623	WITHOUT_CLASSIFICATION	7.037331037640131E-6	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999968617190997	WITHOUT_CLASSIFICATION	3.1382809002016708E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999992901001886	WITHOUT_CLASSIFICATION	7.09899811300926E-7	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9997889287425875	WITHOUT_CLASSIFICATION	2.1107125741261204E-4	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9998622257503745	WITHOUT_CLASSIFICATION	1.3777424962546056E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9998081802165714	WITHOUT_CLASSIFICATION	1.9181978342860574E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9998627089829377	WITHOUT_CLASSIFICATION	1.372910170623402E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9998428451948086	WITHOUT_CLASSIFICATION	1.5715480519149774E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9998241628852776	WITHOUT_CLASSIFICATION	1.7583711472234382E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9998457110755425	WITHOUT_CLASSIFICATION	1.5428892445750437E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9998328530444559	WITHOUT_CLASSIFICATION	1.671469555440289E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9998467134710636	WITHOUT_CLASSIFICATION	1.5328652893639586E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9998453430088217	WITHOUT_CLASSIFICATION	1.5465699117826563E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9998377883551537	WITHOUT_CLASSIFICATION	1.6221164484633266E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9997938092844328	WITHOUT_CLASSIFICATION	2.061907155671413E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9997763270069296	WITHOUT_CLASSIFICATION	2.2367299307030644E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9997823685310245	WITHOUT_CLASSIFICATION	2.1763146897547052E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.99979100056228	WITHOUT_CLASSIFICATION	2.089994377199975E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9997762185450073	WITHOUT_CLASSIFICATION	2.2378145499253992E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9997925087588158	WITHOUT_CLASSIFICATION	2.07491241184322E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.999774670895945	WITHOUT_CLASSIFICATION	2.2532910405506813E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9998650105351126	WITHOUT_CLASSIFICATION	1.3498946488745253E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9998457577412833	WITHOUT_CLASSIFICATION	1.5424225871665397E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999931286219294	WITHOUT_CLASSIFICATION	6.871378070629514E-6	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999997477686775	WITHOUT_CLASSIFICATION	2.5223132244445604E-7	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999976228359587	WITHOUT_CLASSIFICATION	2.377164041318268E-6	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999944423664886	WITHOUT_CLASSIFICATION	5.557633511413212E-6	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9999808971093125	WITHOUT_CLASSIFICATION	1.9102890687520657E-5	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999966625902098	WITHOUT_CLASSIFICATION	3.337409790127417E-6	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.999998636143019	WITHOUT_CLASSIFICATION	1.3638569810431882E-6	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9999994346116952	WITHOUT_CLASSIFICATION	5.653883048763058E-7	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999985675630905	WITHOUT_CLASSIFICATION	1.4324369095656425E-6	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999960250602251	WITHOUT_CLASSIFICATION	3.9749397749473635E-6	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.6289278943539499	WITHOUT_CLASSIFICATION	0.3710721056460501	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.999995871079711	WITHOUT_CLASSIFICATION	4.128920288943965E-6	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999882269823689	WITHOUT_CLASSIFICATION	1.1773017631046538E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999888385498312	WITHOUT_CLASSIFICATION	1.1161450168847266E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999888385498312	WITHOUT_CLASSIFICATION	1.1161450168847266E-5	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999977166262849	WITHOUT_CLASSIFICATION	2.283373715235158E-6	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999951187158685	WITHOUT_CLASSIFICATION	4.881284131450311E-6	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999996173803046	WITHOUT_CLASSIFICATION	3.826196952669034E-7	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999687884769186	WITHOUT_CLASSIFICATION	3.1211523081335716E-5	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999967211783269	WITHOUT_CLASSIFICATION	3.2788216729408386E-6	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999785498475942	WITHOUT_CLASSIFICATION	2.1450152405816923E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999811498674815	WITHOUT_CLASSIFICATION	1.8850132518423E-5	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999960495158309	WITHOUT_CLASSIFICATION	3.950484169170992E-6	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9998565630893039	WITHOUT_CLASSIFICATION	1.434369106961408E-4	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999761089873876	WITHOUT_CLASSIFICATION	2.3891012612346204E-5	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.999940909008994	WITHOUT_CLASSIFICATION	5.9090991006087046E-5	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.99998671004702	WITHOUT_CLASSIFICATION	1.3289952979978096E-5	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999208789283759	WITHOUT_CLASSIFICATION	7.91210716242007E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9999981889906163	WITHOUT_CLASSIFICATION	1.811009383658283E-6	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999969739882765	WITHOUT_CLASSIFICATION	3.026011723625466E-6	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999848246262878	WITHOUT_CLASSIFICATION	1.517537371227471E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999923203877814	WITHOUT_CLASSIFICATION	7.679612218584797E-6	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999988472136891	WITHOUT_CLASSIFICATION	1.1527863108871121E-6	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9999895728578602	WITHOUT_CLASSIFICATION	1.0427142139882916E-5	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999995440105284	WITHOUT_CLASSIFICATION	4.5598947170848375E-7	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999924992776178	WITHOUT_CLASSIFICATION	7.500722382135701E-6	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999993704408647	WITHOUT_CLASSIFICATION	6.2955913526813E-7	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999600635110316	WITHOUT_CLASSIFICATION	3.993648896828084E-5	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999521107312207	WITHOUT_CLASSIFICATION	4.788926877917125E-5	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999984068234455	WITHOUT_CLASSIFICATION	1.5931765543597213E-6	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.999998454644801	WITHOUT_CLASSIFICATION	1.5453551990291465E-6	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.999983838956913	WITHOUT_CLASSIFICATION	1.6161043087024376E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.999999215457071	WITHOUT_CLASSIFICATION	7.845429289862796E-7	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999996908414306	WITHOUT_CLASSIFICATION	3.0915856941087837E-7	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999821849967863	WITHOUT_CLASSIFICATION	1.781500321377581E-5	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999472568004066	WITHOUT_CLASSIFICATION	5.2743199593303534E-5	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999409501440585	WITHOUT_CLASSIFICATION	5.9049855941520843E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999865703714182	WITHOUT_CLASSIFICATION	1.3429628581683811E-5	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999624356509239	WITHOUT_CLASSIFICATION	3.7564349076121106E-5	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999925023906652	WITHOUT_CLASSIFICATION	7.49760933481324E-6	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999758307589007	WITHOUT_CLASSIFICATION	2.41692410992895E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999542366351317	WITHOUT_CLASSIFICATION	4.576336486818228E-5	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999911934871073	WITHOUT_CLASSIFICATION	8.806512892598198E-6	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999987646560488	WITHOUT_CLASSIFICATION	1.2353439512319027E-6	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999997419172443	WITHOUT_CLASSIFICATION	2.5808275564989326E-7	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999922237808443	WITHOUT_CLASSIFICATION	7.776219155712749E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999990228432873	WITHOUT_CLASSIFICATION	9.771567126276021E-7	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999876398874727	WITHOUT_CLASSIFICATION	1.2360112527221306E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999453718404684	WITHOUT_CLASSIFICATION	5.4628159531656764E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999453718404684	WITHOUT_CLASSIFICATION	5.4628159531656764E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999982844804901	WITHOUT_CLASSIFICATION	1.7155195098321892E-6	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999988429736341	WITHOUT_CLASSIFICATION	1.157026365855608E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999976146976494	WITHOUT_CLASSIFICATION	2.3853023505559726E-6	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999378497995166	WITHOUT_CLASSIFICATION	6.215020048336993E-5	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999915341113509	WITHOUT_CLASSIFICATION	8.465888649093265E-6	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999783701169093	WITHOUT_CLASSIFICATION	2.1629883090717067E-5	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999988575221506	WITHOUT_CLASSIFICATION	1.1424778493505625E-6	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999658971877772	WITHOUT_CLASSIFICATION	3.4102812222925446E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999937498784782	WITHOUT_CLASSIFICATION	6.25012152180814E-6	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999922309978927	WITHOUT_CLASSIFICATION	7.769002107289007E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999941307615662	WITHOUT_CLASSIFICATION	5.869238433812824E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999972953841892	WITHOUT_CLASSIFICATION	2.704615810847071E-6	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9999781782201339	WITHOUT_CLASSIFICATION	2.1821779866022034E-5	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999880776815164	WITHOUT_CLASSIFICATION	1.1922318483628822E-5	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.985690814823625	WITHOUT_CLASSIFICATION	0.01430918517637508	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999797587880461	WITHOUT_CLASSIFICATION	2.0241211953943205E-5	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999983084076927	WITHOUT_CLASSIFICATION	1.6915923073448095E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.999986262175128	WITHOUT_CLASSIFICATION	1.373782487203575E-5	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999999709910927	WITHOUT_CLASSIFICATION	2.900890729892629E-8	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999882697330528	WITHOUT_CLASSIFICATION	1.1730266947238905E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999981288708966	WITHOUT_CLASSIFICATION	1.8711291034371234E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999981288708966	WITHOUT_CLASSIFICATION	1.8711291034371234E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999981124610571	WITHOUT_CLASSIFICATION	1.8875389428601509E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999981124610571	WITHOUT_CLASSIFICATION	1.8875389428601509E-6	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999934982418113	WITHOUT_CLASSIFICATION	6.501758188745253E-6	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999289708665275	WITHOUT_CLASSIFICATION	7.10291334724503E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.999996869106971	WITHOUT_CLASSIFICATION	3.130893029011579E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999935481816721	WITHOUT_CLASSIFICATION	6.451818328047499E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999883429581726	WITHOUT_CLASSIFICATION	1.1657041827395426E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999984982464841	WITHOUT_CLASSIFICATION	1.5017535158617523E-6	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9997627682293792	WITHOUT_CLASSIFICATION	2.3723177062083079E-4	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999823025409348	WITHOUT_CLASSIFICATION	1.7697459065194804E-5	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999935337168665	WITHOUT_CLASSIFICATION	6.46628313341865E-6	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999966039867754	WITHOUT_CLASSIFICATION	3.396013224694358E-6	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999133014774526	WITHOUT_CLASSIFICATION	8.66985225473225E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999892336390873	WITHOUT_CLASSIFICATION	1.0766360912770086E-5	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999994885082975	WITHOUT_CLASSIFICATION	5.114917025681767E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9999334464873447	WITHOUT_CLASSIFICATION	6.655351265530435E-5	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999095480834106	WITHOUT_CLASSIFICATION	9.045191658940196E-5	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999860488302437	WITHOUT_CLASSIFICATION	1.3951169756415517E-5	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999952852608985	WITHOUT_CLASSIFICATION	4.714739101455443E-6	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999846183835305	WITHOUT_CLASSIFICATION	1.5381616469576545E-5	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9998921314138397	WITHOUT_CLASSIFICATION	1.0786858616033584E-4	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999988089877402	WITHOUT_CLASSIFICATION	1.1910122598128037E-6	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.999956820017349	WITHOUT_CLASSIFICATION	4.317998265105484E-5	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999914501374897	WITHOUT_CLASSIFICATION	8.549862510428998E-6	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.999901872109601	WITHOUT_CLASSIFICATION	9.812789039890882E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999571175002022	WITHOUT_CLASSIFICATION	4.288249979779351E-5	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999983235699704	WITHOUT_CLASSIFICATION	1.676430029558236E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999889843201484	WITHOUT_CLASSIFICATION	1.101567985169428E-5	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999805043427994	WITHOUT_CLASSIFICATION	1.9495657200686008E-5	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999893739001964	WITHOUT_CLASSIFICATION	1.0626099803632516E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999891350026735	WITHOUT_CLASSIFICATION	1.086499732647881E-5	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999944366488789	WITHOUT_CLASSIFICATION	5.563351121136295E-6	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999944366488789	WITHOUT_CLASSIFICATION	5.563351121136295E-6	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999972140531961	WITHOUT_CLASSIFICATION	2.7859468038770433E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999993762263644	WITHOUT_CLASSIFICATION	6.237736356134064E-7	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.999998952639377	WITHOUT_CLASSIFICATION	1.0473606230290637E-6	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999971221043985	WITHOUT_CLASSIFICATION	2.8778956015197187E-6	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999947844123073	WITHOUT_CLASSIFICATION	5.215587692691588E-6	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999798568623461	WITHOUT_CLASSIFICATION	2.0143137653838947E-5	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999975492268238	WITHOUT_CLASSIFICATION	2.450773176203245E-6	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.999999697752109	WITHOUT_CLASSIFICATION	3.022478910146507E-7	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999784528047972	WITHOUT_CLASSIFICATION	2.154719520273354E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999977173542542	WITHOUT_CLASSIFICATION	2.282645745648901E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999894242780306	WITHOUT_CLASSIFICATION	1.0575721969368332E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.999987969001924	WITHOUT_CLASSIFICATION	1.2030998076019594E-5	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999427975586478	WITHOUT_CLASSIFICATION	5.720244135220205E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999968675538375	WITHOUT_CLASSIFICATION	3.132446162377982E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999943046066341	WITHOUT_CLASSIFICATION	5.6953933659622134E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999520267347018	WITHOUT_CLASSIFICATION	4.7973265298199136E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999990887546494	WITHOUT_CLASSIFICATION	9.112453505203892E-7	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999970539793303	WITHOUT_CLASSIFICATION	2.9460206698167453E-6	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999976138557316	WITHOUT_CLASSIFICATION	2.3861442684285436E-6	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9999890700918217	WITHOUT_CLASSIFICATION	1.0929908178226202E-5	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999997638801107	WITHOUT_CLASSIFICATION	2.3611988923971431E-7	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999993753023745	WITHOUT_CLASSIFICATION	6.246976255873737E-7	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9998986848085922	WITHOUT_CLASSIFICATION	1.013151914076945E-4	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999915194023373	WITHOUT_CLASSIFICATION	8.48059766267281E-6	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999656126310504	WITHOUT_CLASSIFICATION	3.438736894952688E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999984530412622	WITHOUT_CLASSIFICATION	1.5469587377368167E-6	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999770208205685	WITHOUT_CLASSIFICATION	2.2979179431527892E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9999649412297898	WITHOUT_CLASSIFICATION	3.505877021011636E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999953823967754	WITHOUT_CLASSIFICATION	4.61760322451879E-6	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999774713932414	WITHOUT_CLASSIFICATION	2.2528606758508127E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999995855457344	WITHOUT_CLASSIFICATION	4.1445426554822246E-7	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999844528450915	WITHOUT_CLASSIFICATION	1.5547154908470385E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999864391141685	WITHOUT_CLASSIFICATION	1.3560885831513033E-5	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999661184415627	WITHOUT_CLASSIFICATION	3.3881558437409247E-5	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.999996863485192	WITHOUT_CLASSIFICATION	3.13651480791793E-6	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999946877149474	WITHOUT_CLASSIFICATION	5.312285052606313E-6	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999781094833827	WITHOUT_CLASSIFICATION	2.189051661731471E-5	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9985410580244606	WITHOUT_CLASSIFICATION	0.0014589419755393473	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999992853153226	WITHOUT_CLASSIFICATION	7.146846774068636E-7	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999912549914979	WITHOUT_CLASSIFICATION	8.745008502144616E-6	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999996477412851	WITHOUT_CLASSIFICATION	3.5225871490509335E-7	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999997436029684	WITHOUT_CLASSIFICATION	2.5639703159890346E-7	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999733167878114	WITHOUT_CLASSIFICATION	2.6683212188552216E-5	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999732457535809	WITHOUT_CLASSIFICATION	2.6754246419116637E-5	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9997561302928784	WITHOUT_CLASSIFICATION	2.438697071216262E-4	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999991517880341	WITHOUT_CLASSIFICATION	8.4821196584223E-7	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999908198433001	WITHOUT_CLASSIFICATION	9.180156699969412E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999975350852154	WITHOUT_CLASSIFICATION	2.4649147846873776E-6	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.999999241431176	WITHOUT_CLASSIFICATION	7.585688239854818E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.999983050857496	WITHOUT_CLASSIFICATION	1.6949142504119453E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9998285200401242	WITHOUT_CLASSIFICATION	1.7147995987569059E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9997056819869039	WITHOUT_CLASSIFICATION	2.943180130960162E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9998360854315613	WITHOUT_CLASSIFICATION	1.6391456843868775E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9998814568589774	WITHOUT_CLASSIFICATION	1.1854314102258371E-4	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999101628934982	WITHOUT_CLASSIFICATION	8.98371065018107E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999423093940644	WITHOUT_CLASSIFICATION	5.769060593568119E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999383663074286	WITHOUT_CLASSIFICATION	6.163369257139852E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999885048074474	WITHOUT_CLASSIFICATION	1.1495192552639834E-5	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999798170313345	WITHOUT_CLASSIFICATION	2.018296866543426E-5	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999962208535984	WITHOUT_CLASSIFICATION	3.7791464017066263E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9998258969037214	WITHOUT_CLASSIFICATION	1.7410309627868134E-4	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9998285200401242	WITHOUT_CLASSIFICATION	1.7147995987569059E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9998360854315613	WITHOUT_CLASSIFICATION	1.6391456843868775E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9997056819869039	WITHOUT_CLASSIFICATION	2.943180130960162E-4	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9998489817218488	WITHOUT_CLASSIFICATION	1.5101827815114922E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9998474930647986	WITHOUT_CLASSIFICATION	1.525069352013933E-4	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999753486331989	WITHOUT_CLASSIFICATION	2.4651366801146583E-5	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999766434161093	WITHOUT_CLASSIFICATION	2.3356583890662787E-5	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999963283341583	WITHOUT_CLASSIFICATION	3.671665841653036E-6	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.999984790684991	WITHOUT_CLASSIFICATION	1.5209315008979038E-5	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999855296666511	WITHOUT_CLASSIFICATION	1.4470333348852098E-5	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999936275491883	WITHOUT_CLASSIFICATION	6.372450811619105E-6	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9998998874802141	WITHOUT_CLASSIFICATION	1.0011251978589977E-4	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999035805857355	WITHOUT_CLASSIFICATION	9.641941426450344E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999508890729106	WITHOUT_CLASSIFICATION	4.911092708933524E-5	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9999759872238331	WITHOUT_CLASSIFICATION	2.4012776166903535E-5	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999841074936533	WITHOUT_CLASSIFICATION	1.5892506346633906E-5	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999920501214279	WITHOUT_CLASSIFICATION	7.949878572137384E-6	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.99952795745536	WITHOUT_CLASSIFICATION	4.7204254463996105E-4	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999891193816186	WITHOUT_CLASSIFICATION	1.0880618381378571E-5	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999727593051799	WITHOUT_CLASSIFICATION	2.7240694820076048E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999965784022429	WITHOUT_CLASSIFICATION	3.421597757229202E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999965784022429	WITHOUT_CLASSIFICATION	3.421597757229202E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999934746596504	WITHOUT_CLASSIFICATION	6.5253403497038375E-6	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999946341482415	WITHOUT_CLASSIFICATION	5.365851758518695E-6	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999987907875935	WITHOUT_CLASSIFICATION	1.2092124065594126E-6	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999175521126318	WITHOUT_CLASSIFICATION	8.244788736816196E-5	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999938521787791	WITHOUT_CLASSIFICATION	6.147821220864272E-6	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999996159129036	WITHOUT_CLASSIFICATION	3.84087096374135E-7	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999984492821273	WITHOUT_CLASSIFICATION	1.5507178727280924E-6	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999880642314324	WITHOUT_CLASSIFICATION	1.1935768567574597E-5	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999981180709826	WITHOUT_CLASSIFICATION	1.8819290174349843E-6	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999969317285222	WITHOUT_CLASSIFICATION	3.068271477720969E-6	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999981563416305	WITHOUT_CLASSIFICATION	1.8436583695593457E-6	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999536710254486	WITHOUT_CLASSIFICATION	4.632897455131688E-5	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999989339754954	WITHOUT_CLASSIFICATION	1.0660245045091665E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999941650331611	WITHOUT_CLASSIFICATION	5.834966838852119E-6	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999983126800506	WITHOUT_CLASSIFICATION	1.6873199494002188E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999867388810344	WITHOUT_CLASSIFICATION	1.326111896566126E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999766682810612	WITHOUT_CLASSIFICATION	2.3331718938687636E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997636775982	WITHOUT_CLASSIFICATION	2.3632240181623133E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997636775982	WITHOUT_CLASSIFICATION	2.3632240181623133E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999812992046357	WITHOUT_CLASSIFICATION	1.8700795364295184E-5	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999749755637665	WITHOUT_CLASSIFICATION	2.5024436233566512E-5	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999991829042437	WITHOUT_CLASSIFICATION	8.170957563796041E-7	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999748606913571	WITHOUT_CLASSIFICATION	2.5139308642948335E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999939577676044	WITHOUT_CLASSIFICATION	6.042232395636531E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997636775982	WITHOUT_CLASSIFICATION	2.3632240181623133E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997636775982	WITHOUT_CLASSIFICATION	2.3632240181623133E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996626839598	WITHOUT_CLASSIFICATION	3.3731604022259236E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996626839598	WITHOUT_CLASSIFICATION	3.3731604022259236E-7	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999916168347142	WITHOUT_CLASSIFICATION	8.383165285853063E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999775968159571	WITHOUT_CLASSIFICATION	2.240318404280896E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999981144735841	WITHOUT_CLASSIFICATION	1.8855264157785268E-6	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9999949154145009	WITHOUT_CLASSIFICATION	5.084585499113259E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999988518561665	WITHOUT_CLASSIFICATION	1.148143833370145E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999988518561665	WITHOUT_CLASSIFICATION	1.148143833370145E-6	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999974854198913	WITHOUT_CLASSIFICATION	2.5145801085793475E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999994768101629	WITHOUT_CLASSIFICATION	5.231898371005428E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996023050044	WITHOUT_CLASSIFICATION	3.976949956515246E-7	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999960403368444	WITHOUT_CLASSIFICATION	3.959663155481313E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996558008705	WITHOUT_CLASSIFICATION	3.4419912948961425E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999845043394934	WITHOUT_CLASSIFICATION	1.549566050661055E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999879695717597	WITHOUT_CLASSIFICATION	1.2030428240303035E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999586664857489	WITHOUT_CLASSIFICATION	4.133351425106978E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999984817356317	WITHOUT_CLASSIFICATION	1.5182643683618921E-6	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999988595731923	WITHOUT_CLASSIFICATION	1.1404268076958927E-6	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999974129210838	WITHOUT_CLASSIFICATION	2.587078916252348E-6	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999968565799672	WITHOUT_CLASSIFICATION	3.143420032852645E-6	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999967676642981	WITHOUT_CLASSIFICATION	3.232335701797275E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999834117469061	WITHOUT_CLASSIFICATION	1.6588253093907202E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999867388810344	WITHOUT_CLASSIFICATION	1.326111896566126E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997636775982	WITHOUT_CLASSIFICATION	2.3632240181623133E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996626839598	WITHOUT_CLASSIFICATION	3.3731604022259236E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999845043394934	WITHOUT_CLASSIFICATION	1.549566050661055E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999680298534809	WITHOUT_CLASSIFICATION	3.1970146519060394E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999680298534809	WITHOUT_CLASSIFICATION	3.1970146519060394E-5	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999955090523656	WITHOUT_CLASSIFICATION	4.490947634426741E-6	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999993757567666	WITHOUT_CLASSIFICATION	6.242432334024054E-7	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.999998195063436	WITHOUT_CLASSIFICATION	1.8049365639959005E-6	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999970899968571	WITHOUT_CLASSIFICATION	2.9100031429443293E-6	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999962066600168	WITHOUT_CLASSIFICATION	3.793339983178756E-6	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999999039481915	WITHOUT_CLASSIFICATION	9.605180855185945E-8	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9999256385200392	WITHOUT_CLASSIFICATION	7.436147996077806E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999147785411022	WITHOUT_CLASSIFICATION	8.522145889782208E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999996912732363	WITHOUT_CLASSIFICATION	3.0872676362427185E-7	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999864988348653	WITHOUT_CLASSIFICATION	1.3501165134688511E-5	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999905949700897	WITHOUT_CLASSIFICATION	9.405029910387917E-6	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999996443466111	WITHOUT_CLASSIFICATION	3.5565338883863434E-7	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.999993049937497	WITHOUT_CLASSIFICATION	6.950062502921843E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999766682810612	WITHOUT_CLASSIFICATION	2.3331718938687636E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996626839598	WITHOUT_CLASSIFICATION	3.3731604022259236E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999994768101629	WITHOUT_CLASSIFICATION	5.231898371005428E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996023050044	WITHOUT_CLASSIFICATION	3.976949956515246E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996023050044	WITHOUT_CLASSIFICATION	3.976949956515246E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996558008705	WITHOUT_CLASSIFICATION	3.4419912948961425E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999845043394934	WITHOUT_CLASSIFICATION	1.549566050661055E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999845043394934	WITHOUT_CLASSIFICATION	1.549566050661055E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999680298534809	WITHOUT_CLASSIFICATION	3.1970146519060394E-5	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999956238290167	WITHOUT_CLASSIFICATION	4.376170983267801E-6	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999270455146461	WITHOUT_CLASSIFICATION	7.295448535392847E-5	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999632181988979	WITHOUT_CLASSIFICATION	3.6781801102217236E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999856451582902	WITHOUT_CLASSIFICATION	1.4354841709753442E-5	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999958268122078	WITHOUT_CLASSIFICATION	4.173187792252367E-6	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9998822792546033	WITHOUT_CLASSIFICATION	1.177207453967428E-4	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999910478352939	WITHOUT_CLASSIFICATION	8.952164706094768E-6	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999981792014491	WITHOUT_CLASSIFICATION	1.8207985509939439E-6	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999617145402397	WITHOUT_CLASSIFICATION	3.828545976032158E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999994768101629	WITHOUT_CLASSIFICATION	5.231898371005428E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996023050044	WITHOUT_CLASSIFICATION	3.976949956515246E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996023050044	WITHOUT_CLASSIFICATION	3.976949956515246E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996558008705	WITHOUT_CLASSIFICATION	3.4419912948961425E-7	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999147785411022	WITHOUT_CLASSIFICATION	8.522145889782208E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999864988348653	WITHOUT_CLASSIFICATION	1.3501165134688511E-5	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999952442963934	WITHOUT_CLASSIFICATION	4.755703606549465E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.999996925608739	WITHOUT_CLASSIFICATION	3.074391261053955E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999755139327786	WITHOUT_CLASSIFICATION	2.448606722144053E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999755139327786	WITHOUT_CLASSIFICATION	2.448606722144053E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.999994019382122	WITHOUT_CLASSIFICATION	5.980617878100652E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999843768146764	WITHOUT_CLASSIFICATION	1.5623185323515532E-5	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999989351170826	WITHOUT_CLASSIFICATION	1.0648829173907439E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999925846410507	WITHOUT_CLASSIFICATION	7.4153589493316645E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.999964259213761	WITHOUT_CLASSIFICATION	3.574078623899581E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.999964259213761	WITHOUT_CLASSIFICATION	3.574078623899581E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999992326154081	WITHOUT_CLASSIFICATION	7.673845918753186E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999992326154081	WITHOUT_CLASSIFICATION	7.673845918753186E-7	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999836736450889	WITHOUT_CLASSIFICATION	1.6326354911170303E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999836736450889	WITHOUT_CLASSIFICATION	1.6326354911170303E-5	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999580466624061	WITHOUT_CLASSIFICATION	4.195333759405175E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.999986389009444	WITHOUT_CLASSIFICATION	1.3610990555933744E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9998675622396801	WITHOUT_CLASSIFICATION	1.324377603198501E-4	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999978889547431	WITHOUT_CLASSIFICATION	2.1110452568676002E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999905060164566	WITHOUT_CLASSIFICATION	9.493983543494102E-6	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999775795893606	WITHOUT_CLASSIFICATION	2.2420410639478315E-5	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999954505797685	WITHOUT_CLASSIFICATION	4.549420231541219E-6	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999906667302318	WITHOUT_CLASSIFICATION	9.3332697682358E-6	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999983328047779	WITHOUT_CLASSIFICATION	1.6671952219979723E-6	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999984268968838	WITHOUT_CLASSIFICATION	1.5731031162072885E-6	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999988058458137	WITHOUT_CLASSIFICATION	1.1941541862579785E-6	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999966603113484	WITHOUT_CLASSIFICATION	3.33968865177265E-6	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999994935010927	WITHOUT_CLASSIFICATION	5.064989072525076E-7	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999843217820603	WITHOUT_CLASSIFICATION	1.5678217939710994E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999843217820603	WITHOUT_CLASSIFICATION	1.5678217939710994E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.999999746369329	WITHOUT_CLASSIFICATION	2.5363067106720373E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999984982464841	WITHOUT_CLASSIFICATION	1.5017535158617523E-6	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9999859823054138	WITHOUT_CLASSIFICATION	1.4017694586067012E-5	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999625165379641	WITHOUT_CLASSIFICATION	3.748346203601488E-5	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999741077573544	WITHOUT_CLASSIFICATION	2.5892242645514902E-5	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999921421038488	WITHOUT_CLASSIFICATION	7.857896151229912E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999966809320965	WITHOUT_CLASSIFICATION	3.319067903407393E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999986672812877	WITHOUT_CLASSIFICATION	1.33271871234498E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999886376323113	WITHOUT_CLASSIFICATION	1.1362367688790248E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.999991958354796	WITHOUT_CLASSIFICATION	8.041645204062835E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999669775411072	WITHOUT_CLASSIFICATION	3.3022458892870883E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9999400734824001	WITHOUT_CLASSIFICATION	5.9926517599974954E-5	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999941693016345	WITHOUT_CLASSIFICATION	5.830698365473285E-6	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9997902355699678	WITHOUT_CLASSIFICATION	2.097644300321779E-4	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999908865043867	WITHOUT_CLASSIFICATION	9.113495613243466E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999774184280542	WITHOUT_CLASSIFICATION	2.2581571945853538E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999784629789958	WITHOUT_CLASSIFICATION	2.1537021004129873E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999862573672035	WITHOUT_CLASSIFICATION	1.3742632796451762E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999697905496474	WITHOUT_CLASSIFICATION	3.020945035257658E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999697905496474	WITHOUT_CLASSIFICATION	3.020945035257658E-5	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999991539338008	WITHOUT_CLASSIFICATION	8.460661992477193E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999051284884034	WITHOUT_CLASSIFICATION	9.487151159655106E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9992407264153299	WITHOUT_CLASSIFICATION	7.592735846701916E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9992407264153299	WITHOUT_CLASSIFICATION	7.592735846701916E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999977152828008	WITHOUT_CLASSIFICATION	2.2847171992231506E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999471247036587	WITHOUT_CLASSIFICATION	5.287529634146073E-5	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9998180679076927	WITHOUT_CLASSIFICATION	1.819320923072482E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999034782992345	WITHOUT_CLASSIFICATION	9.652170076550818E-5	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999136770703083	WITHOUT_CLASSIFICATION	8.632292969161782E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999809371550097	WITHOUT_CLASSIFICATION	1.9062844990292975E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999809371550097	WITHOUT_CLASSIFICATION	1.9062844990292975E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999993848161325	WITHOUT_CLASSIFICATION	6.151838676004361E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999242919024484	WITHOUT_CLASSIFICATION	7.570809755160373E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999889777753408	WITHOUT_CLASSIFICATION	1.1022224659335372E-5	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999217254946808	WITHOUT_CLASSIFICATION	7.827450531911335E-5	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999051284884034	WITHOUT_CLASSIFICATION	9.487151159655106E-5	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999120172318137	WITHOUT_CLASSIFICATION	8.798276818641422E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999349371520216	WITHOUT_CLASSIFICATION	6.506284797836852E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999349371520216	WITHOUT_CLASSIFICATION	6.506284797836852E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999925380838574	WITHOUT_CLASSIFICATION	7.46191614268798E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999982532826731	WITHOUT_CLASSIFICATION	1.7467173267902158E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999982532826731	WITHOUT_CLASSIFICATION	1.7467173267902158E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999552983118257	WITHOUT_CLASSIFICATION	4.4701688174372696E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999552983118257	WITHOUT_CLASSIFICATION	4.4701688174372696E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999552983118257	WITHOUT_CLASSIFICATION	4.4701688174372696E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999982532826731	WITHOUT_CLASSIFICATION	1.7467173267902158E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999982532826731	WITHOUT_CLASSIFICATION	1.7467173267902158E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999925380838574	WITHOUT_CLASSIFICATION	7.46191614268798E-6	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999998495646405	WITHOUT_CLASSIFICATION	1.5043535948627927E-7	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.999989304480542	WITHOUT_CLASSIFICATION	1.0695519457964575E-5	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999990859297131	WITHOUT_CLASSIFICATION	9.140702868988316E-7	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999746539949693	WITHOUT_CLASSIFICATION	2.534600503072434E-5	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999913050484386	WITHOUT_CLASSIFICATION	8.694951561331445E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.999998522691213	WITHOUT_CLASSIFICATION	1.4773087869152576E-6	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999936306794749	WITHOUT_CLASSIFICATION	6.369320525144167E-6	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999954240308783	WITHOUT_CLASSIFICATION	4.575969121810944E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999669775411072	WITHOUT_CLASSIFICATION	3.3022458892870883E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999982532826731	WITHOUT_CLASSIFICATION	1.7467173267902158E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999982532826731	WITHOUT_CLASSIFICATION	1.7467173267902158E-6	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999992824215121	WITHOUT_CLASSIFICATION	7.175784879089945E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999928495861746	WITHOUT_CLASSIFICATION	7.15041382538141E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999741908819235	WITHOUT_CLASSIFICATION	2.580911807644713E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999950618843645	WITHOUT_CLASSIFICATION	4.938115635527385E-6	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999949856806828	WITHOUT_CLASSIFICATION	5.014319317268443E-6	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999813084995104	WITHOUT_CLASSIFICATION	1.869150048968239E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999993272772059	WITHOUT_CLASSIFICATION	6.727227940573995E-7	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999568036352	WITHOUT_CLASSIFICATION	4.319636481865684E-8	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999987627303171	WITHOUT_CLASSIFICATION	1.2372696830039222E-6	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999933486271817	WITHOUT_CLASSIFICATION	6.651372818301717E-6	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.999904702709009	WITHOUT_CLASSIFICATION	9.529729099107442E-5	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999996525244941	WITHOUT_CLASSIFICATION	3.474755059057399E-6	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999981954836533	WITHOUT_CLASSIFICATION	1.804516346653102E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.999998582028321	WITHOUT_CLASSIFICATION	1.4179716788556149E-6	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999904444629438	WITHOUT_CLASSIFICATION	9.555537056163368E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999623122988885	WITHOUT_CLASSIFICATION	3.7687701111448304E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999623122988885	WITHOUT_CLASSIFICATION	3.7687701111448304E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999623122988885	WITHOUT_CLASSIFICATION	3.7687701111448304E-5	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999855236689635	WITHOUT_CLASSIFICATION	1.447633103634529E-5	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999933921057717	WITHOUT_CLASSIFICATION	6.607894228305452E-6	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999539483322142	WITHOUT_CLASSIFICATION	4.6051667785903075E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9997680486847911	WITHOUT_CLASSIFICATION	2.3195131520889633E-4	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999998922816006	WITHOUT_CLASSIFICATION	1.0771839943416179E-7	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999994273756778	WITHOUT_CLASSIFICATION	5.726243221892553E-7	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999131540603	WITHOUT_CLASSIFICATION	8.684593964017444E-8	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999963236758773	WITHOUT_CLASSIFICATION	3.6763241228227704E-6	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999977584483403	WITHOUT_CLASSIFICATION	2.2415516596963694E-6	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999872017353586	WITHOUT_CLASSIFICATION	1.2798264641268352E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999815370088415	WITHOUT_CLASSIFICATION	1.846299115847719E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9998338440718735	WITHOUT_CLASSIFICATION	1.6615592812644904E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999993848161325	WITHOUT_CLASSIFICATION	6.151838676004361E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999982532826731	WITHOUT_CLASSIFICATION	1.7467173267902158E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999982532826731	WITHOUT_CLASSIFICATION	1.7467173267902158E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999925380838574	WITHOUT_CLASSIFICATION	7.46191614268798E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.999998522691213	WITHOUT_CLASSIFICATION	1.4773087869152576E-6	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999928495861746	WITHOUT_CLASSIFICATION	7.15041382538141E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999950618843645	WITHOUT_CLASSIFICATION	4.938115635527385E-6	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999813084995104	WITHOUT_CLASSIFICATION	1.869150048968239E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999741908819235	WITHOUT_CLASSIFICATION	2.580911807644713E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999993272772059	WITHOUT_CLASSIFICATION	6.727227940573995E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999933486271817	WITHOUT_CLASSIFICATION	6.651372818301717E-6	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999987627303171	WITHOUT_CLASSIFICATION	1.2372696830039222E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999996525244941	WITHOUT_CLASSIFICATION	3.474755059057399E-6	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999929733502584	WITHOUT_CLASSIFICATION	7.0266497416778395E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999969296767938	WITHOUT_CLASSIFICATION	3.070323206206712E-6	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999960574029173	WITHOUT_CLASSIFICATION	3.942597082743917E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999909854541565	WITHOUT_CLASSIFICATION	9.014545843514668E-6	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999975759884852	WITHOUT_CLASSIFICATION	2.4240115148285173E-6	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999518463444732	WITHOUT_CLASSIFICATION	4.815365552683818E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999914761090111	WITHOUT_CLASSIFICATION	8.523890988867843E-6	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.999977940114512	WITHOUT_CLASSIFICATION	2.2059885488024657E-5	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.999978003396771	WITHOUT_CLASSIFICATION	2.199660322900085E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999471857833	WITHOUT_CLASSIFICATION	5.281421664003279E-8	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.999993295413932	WITHOUT_CLASSIFICATION	6.704586067982558E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999999291176319	WITHOUT_CLASSIFICATION	7.088236809696066E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993586838308	WITHOUT_CLASSIFICATION	6.413161691339819E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999973441597059	WITHOUT_CLASSIFICATION	2.655840294181372E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999976795976777	WITHOUT_CLASSIFICATION	2.3204023223869014E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999959434400146	WITHOUT_CLASSIFICATION	4.056559985346653E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999943569303769	WITHOUT_CLASSIFICATION	5.643069623114083E-6	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999850563078923	WITHOUT_CLASSIFICATION	1.4943692107776342E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999963881068046	WITHOUT_CLASSIFICATION	3.611893195423737E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999973048375631	WITHOUT_CLASSIFICATION	2.695162436919357E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999977311342453	WITHOUT_CLASSIFICATION	2.268865754624069E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999255903684388	WITHOUT_CLASSIFICATION	7.440963156119036E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999255903684388	WITHOUT_CLASSIFICATION	7.440963156119036E-5	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999980527336809	WITHOUT_CLASSIFICATION	1.947266319101361E-6	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.99999884354787	WITHOUT_CLASSIFICATION	1.156452129887302E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997385622355108	WITHOUT_CLASSIFICATION	2.6143776448923954E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997385622355108	WITHOUT_CLASSIFICATION	2.6143776448923954E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997385622355108	WITHOUT_CLASSIFICATION	2.6143776448923954E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9997073158712476	WITHOUT_CLASSIFICATION	2.9268412875239734E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9997073158712476	WITHOUT_CLASSIFICATION	2.9268412875239734E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9997348045784317	WITHOUT_CLASSIFICATION	2.6519542156833354E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9997271925658284	WITHOUT_CLASSIFICATION	2.728074341715532E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.99999884354787	WITHOUT_CLASSIFICATION	1.156452129887302E-6	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999993732329994	WITHOUT_CLASSIFICATION	6.267670006784892E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997385622355108	WITHOUT_CLASSIFICATION	2.6143776448923954E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997385622355108	WITHOUT_CLASSIFICATION	2.6143776448923954E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9997073158712476	WITHOUT_CLASSIFICATION	2.9268412875239734E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9997271925658284	WITHOUT_CLASSIFICATION	2.728074341715532E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999950169584574	WITHOUT_CLASSIFICATION	4.983041542590593E-6	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999950169584574	WITHOUT_CLASSIFICATION	4.983041542590593E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.999995496401181	WITHOUT_CLASSIFICATION	4.503598818973841E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.999995496401181	WITHOUT_CLASSIFICATION	4.503598818973841E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999713672607198	WITHOUT_CLASSIFICATION	2.8632739280328662E-5	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999713672607198	WITHOUT_CLASSIFICATION	2.8632739280328662E-5	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999873128779729	WITHOUT_CLASSIFICATION	1.268712202701118E-5	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999917772283695	WITHOUT_CLASSIFICATION	8.222771630399313E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999917772283695	WITHOUT_CLASSIFICATION	8.222771630399313E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999945888131127	WITHOUT_CLASSIFICATION	5.411186887263017E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999945888131127	WITHOUT_CLASSIFICATION	5.411186887263017E-6	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999983335980795	WITHOUT_CLASSIFICATION	1.6664019204969775E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999962628686202	WITHOUT_CLASSIFICATION	3.737131379827712E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999962628686202	WITHOUT_CLASSIFICATION	3.737131379827712E-6	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999985446950627	WITHOUT_CLASSIFICATION	1.4553049372935095E-6	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999689563510155	WITHOUT_CLASSIFICATION	3.104364898449785E-5	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999737665048739	WITHOUT_CLASSIFICATION	2.6233495126111898E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999985446950627	WITHOUT_CLASSIFICATION	1.4553049372935095E-6	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999628432786049	WITHOUT_CLASSIFICATION	3.7156721395062936E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999872338242829	WITHOUT_CLASSIFICATION	1.2766175717208373E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999872338242829	WITHOUT_CLASSIFICATION	1.2766175717208373E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999872338242829	WITHOUT_CLASSIFICATION	1.2766175717208373E-5	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999994651441382	WITHOUT_CLASSIFICATION	5.348558618671464E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999722941217641	WITHOUT_CLASSIFICATION	2.7705878235825206E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999713002005897	WITHOUT_CLASSIFICATION	2.869979941032793E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999713002005897	WITHOUT_CLASSIFICATION	2.869979941032793E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999949437138996	WITHOUT_CLASSIFICATION	5.056286100431105E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999755958552492	WITHOUT_CLASSIFICATION	2.4404144750752212E-5	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999808114424796	WITHOUT_CLASSIFICATION	1.9188557520429095E-5	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999705905377181	WITHOUT_CLASSIFICATION	2.9409462281828607E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999921464540832	WITHOUT_CLASSIFICATION	7.853545916867988E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999925737892631	WITHOUT_CLASSIFICATION	7.426210736880137E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999925737892631	WITHOUT_CLASSIFICATION	7.426210736880137E-6	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999963124628858	WITHOUT_CLASSIFICATION	3.6875371142853773E-6	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997036270134076	WITHOUT_CLASSIFICATION	2.963729865923024E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997036270134076	WITHOUT_CLASSIFICATION	2.963729865923024E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999872338242829	WITHOUT_CLASSIFICATION	1.2766175717208373E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999722941217641	WITHOUT_CLASSIFICATION	2.7705878235825206E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999713002005897	WITHOUT_CLASSIFICATION	2.869979941032793E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999949437138996	WITHOUT_CLASSIFICATION	5.056286100431105E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999755958552492	WITHOUT_CLASSIFICATION	2.4404144750752212E-5	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999808114424796	WITHOUT_CLASSIFICATION	1.9188557520429095E-5	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999705905377181	WITHOUT_CLASSIFICATION	2.9409462281828607E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997036270134076	WITHOUT_CLASSIFICATION	2.963729865923024E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999956547436809	WITHOUT_CLASSIFICATION	4.3452563191563176E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999952399812831	WITHOUT_CLASSIFICATION	4.76001871690105E-6	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.999997376774494	WITHOUT_CLASSIFICATION	2.623225505951E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999981063324863	WITHOUT_CLASSIFICATION	1.8936675136913237E-6	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999816818710671	WITHOUT_CLASSIFICATION	1.8318128932979707E-5	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.999997918158814	WITHOUT_CLASSIFICATION	2.0818411859566347E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999925969513518	WITHOUT_CLASSIFICATION	7.403048648212714E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999925969513518	WITHOUT_CLASSIFICATION	7.403048648212714E-6	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999971588209927	WITHOUT_CLASSIFICATION	2.841179007337322E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999946298175125	WITHOUT_CLASSIFICATION	5.370182487487191E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999907799244933	WITHOUT_CLASSIFICATION	9.220075506725567E-6	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999938124197503	WITHOUT_CLASSIFICATION	6.1875802497051554E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999956341240833	WITHOUT_CLASSIFICATION	4.3658759167715685E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999956341240833	WITHOUT_CLASSIFICATION	4.3658759167715685E-6	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999977077807044	WITHOUT_CLASSIFICATION	2.2922192956132824E-6	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999953974782159	WITHOUT_CLASSIFICATION	4.602521784110338E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999947601073371	WITHOUT_CLASSIFICATION	5.239892662904064E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999947601073371	WITHOUT_CLASSIFICATION	5.239892662904064E-6	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999937860533522	WITHOUT_CLASSIFICATION	6.213946647747771E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999962503721008	WITHOUT_CLASSIFICATION	3.7496278992472207E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999921464540832	WITHOUT_CLASSIFICATION	7.853545916867988E-6	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999828463923397	WITHOUT_CLASSIFICATION	1.7153607660297233E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999848897121549	WITHOUT_CLASSIFICATION	1.5110287845003944E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999939965988713	WITHOUT_CLASSIFICATION	6.0034011286383535E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999999327033685	WITHOUT_CLASSIFICATION	6.729663151304757E-8	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999929004074033	WITHOUT_CLASSIFICATION	7.0995925967382625E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999974620526249	WITHOUT_CLASSIFICATION	2.537947375202438E-6	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999926767875944	WITHOUT_CLASSIFICATION	7.323212405625194E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999208780883099	WITHOUT_CLASSIFICATION	7.912191169011278E-5	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999949805120569	WITHOUT_CLASSIFICATION	5.019487943093004E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999949805120569	WITHOUT_CLASSIFICATION	5.019487943093004E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.999994542660826	WITHOUT_CLASSIFICATION	5.45733917395342E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.999994542660826	WITHOUT_CLASSIFICATION	5.45733917395342E-6	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999997767520096	WITHOUT_CLASSIFICATION	2.2324799039368678E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998511477052202	WITHOUT_CLASSIFICATION	1.488522947797296E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998511477052202	WITHOUT_CLASSIFICATION	1.488522947797296E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998511477052202	WITHOUT_CLASSIFICATION	1.488522947797296E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999657029512954	WITHOUT_CLASSIFICATION	3.4297048704621594E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999989904818241	WITHOUT_CLASSIFICATION	1.0095181759650397E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999989904818241	WITHOUT_CLASSIFICATION	1.0095181759650397E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999985135573612	WITHOUT_CLASSIFICATION	1.486442638741947E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999317536659031	WITHOUT_CLASSIFICATION	6.82463340969073E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999724953162061	WITHOUT_CLASSIFICATION	2.7504683793900855E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999968671238453	WITHOUT_CLASSIFICATION	3.1328761547523345E-6	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999988398325127	WITHOUT_CLASSIFICATION	1.160167487243778E-6	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999889511816454	WITHOUT_CLASSIFICATION	1.104881835455771E-5	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999950979755893	WITHOUT_CLASSIFICATION	4.9020244107833954E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993586838308	WITHOUT_CLASSIFICATION	6.413161691339819E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993586838308	WITHOUT_CLASSIFICATION	6.413161691339819E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999657029512954	WITHOUT_CLASSIFICATION	3.4297048704621594E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999985135573612	WITHOUT_CLASSIFICATION	1.486442638741947E-6	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999579885240478	WITHOUT_CLASSIFICATION	4.201147595210302E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999317536659031	WITHOUT_CLASSIFICATION	6.82463340969073E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999724953162061	WITHOUT_CLASSIFICATION	2.7504683793900855E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999993476285733	WITHOUT_CLASSIFICATION	6.523714266350284E-7	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999873388491927	WITHOUT_CLASSIFICATION	1.266115080729344E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999579387794892	WITHOUT_CLASSIFICATION	4.206122051073825E-5	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.99963870685826	WITHOUT_CLASSIFICATION	3.6129314173998986E-4	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999961601052495	WITHOUT_CLASSIFICATION	3.839894750429104E-6	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999949860055556	WITHOUT_CLASSIFICATION	5.013994444438488E-6	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999987919455978	WITHOUT_CLASSIFICATION	1.2080544022410108E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999993476285733	WITHOUT_CLASSIFICATION	6.523714266350284E-7	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999992303146437	WITHOUT_CLASSIFICATION	7.696853562816309E-7	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999992303146437	WITHOUT_CLASSIFICATION	7.696853562816309E-7	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999897581042788	WITHOUT_CLASSIFICATION	1.024189572125215E-5	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999951770459102	WITHOUT_CLASSIFICATION	4.822954089826788E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999935409218365	WITHOUT_CLASSIFICATION	6.4590781635657395E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999973221234477	WITHOUT_CLASSIFICATION	2.677876552241467E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999986713474731	WITHOUT_CLASSIFICATION	1.3286525268774845E-6	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999992736301185	WITHOUT_CLASSIFICATION	7.263698813973527E-7	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999973782823157	WITHOUT_CLASSIFICATION	2.6217176843287996E-6	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999988889076672	WITHOUT_CLASSIFICATION	1.1110923327533032E-6	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999981577919798	WITHOUT_CLASSIFICATION	1.8422080202578072E-6	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999833845549789	WITHOUT_CLASSIFICATION	1.661544502112179E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999951897084554	WITHOUT_CLASSIFICATION	4.810291544659763E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999973221234477	WITHOUT_CLASSIFICATION	2.677876552241467E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999986713474731	WITHOUT_CLASSIFICATION	1.3286525268774845E-6	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999957466923833	WITHOUT_CLASSIFICATION	4.253307616720651E-6	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999840445563916	WITHOUT_CLASSIFICATION	1.5955443608419826E-5	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999987025808169	WITHOUT_CLASSIFICATION	1.297419183081683E-6	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999283685172835	WITHOUT_CLASSIFICATION	7.163148271648178E-5	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999764287147429	WITHOUT_CLASSIFICATION	2.357128525708229E-5	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9998053389169328	WITHOUT_CLASSIFICATION	1.9466108306722E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.999213751897578	WITHOUT_CLASSIFICATION	7.862481024221251E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999630143519981	WITHOUT_CLASSIFICATION	3.698564800192555E-5	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999052699421401	WITHOUT_CLASSIFICATION	9.473005785989692E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.999893769927914	WITHOUT_CLASSIFICATION	1.0623007208596978E-4	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9998865853101638	WITHOUT_CLASSIFICATION	1.1341468983619715E-4	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999317477327495	WITHOUT_CLASSIFICATION	6.825226725052834E-5	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999970695312285	WITHOUT_CLASSIFICATION	2.930468771556325E-6	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999896489527957	WITHOUT_CLASSIFICATION	1.0351047204240298E-5	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999980306468553	WITHOUT_CLASSIFICATION	1.969353144699534E-6	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999754109430677	WITHOUT_CLASSIFICATION	2.4589056932333113E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9998693061990246	WITHOUT_CLASSIFICATION	1.3069380097545163E-4	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999976591059253	WITHOUT_CLASSIFICATION	2.3408940745989893E-6	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999996529632459	WITHOUT_CLASSIFICATION	3.470367540742768E-7	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999978274706547	WITHOUT_CLASSIFICATION	2.17252934541322E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9998693061990246	WITHOUT_CLASSIFICATION	1.3069380097545163E-4	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999976591059253	WITHOUT_CLASSIFICATION	2.3408940745989893E-6	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999996529632459	WITHOUT_CLASSIFICATION	3.470367540742768E-7	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999898953494969	WITHOUT_CLASSIFICATION	1.0104650503172465E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999977006971009	WITHOUT_CLASSIFICATION	2.2993028991200286E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999985378527599	WITHOUT_CLASSIFICATION	1.4621472401373595E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999949912791305	WITHOUT_CLASSIFICATION	5.008720869466166E-6	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9999943662873032	WITHOUT_CLASSIFICATION	5.6337126967656825E-6	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999995118678825	WITHOUT_CLASSIFICATION	4.881321174846125E-7	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999918466767221	WITHOUT_CLASSIFICATION	8.153323277810359E-6	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999992452267045	WITHOUT_CLASSIFICATION	7.547732954505774E-7	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999873238352246	WITHOUT_CLASSIFICATION	1.2676164775347447E-5	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999884547896399	WITHOUT_CLASSIFICATION	1.1545210360044639E-5	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9972593673046463	WITHOUT_CLASSIFICATION	0.002740632695353843	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.999981158326295	WITHOUT_CLASSIFICATION	1.8841673705028184E-5	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999962399140054	WITHOUT_CLASSIFICATION	3.760085994581131E-6	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999997443161774	WITHOUT_CLASSIFICATION	2.556838225708873E-7	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999964053265576	WITHOUT_CLASSIFICATION	3.594673442448147E-6	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999995757138139	WITHOUT_CLASSIFICATION	4.242861860718747E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.999998882250245	WITHOUT_CLASSIFICATION	1.1177497550143456E-6	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999949636992864	WITHOUT_CLASSIFICATION	5.03630071356505E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999961483369855	WITHOUT_CLASSIFICATION	3.851663014479907E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999967556454412	WITHOUT_CLASSIFICATION	3.2443545587421448E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999929194021145	WITHOUT_CLASSIFICATION	7.080597885419845E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.999982284052803	WITHOUT_CLASSIFICATION	1.7715947197024196E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.999982284052803	WITHOUT_CLASSIFICATION	1.7715947197024196E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999977271239168	WITHOUT_CLASSIFICATION	2.2728760832391924E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999977271239168	WITHOUT_CLASSIFICATION	2.2728760832391924E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999218358017	WITHOUT_CLASSIFICATION	7.816419835288358E-8	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999218358017	WITHOUT_CLASSIFICATION	7.816419835288358E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.999999792672143	WITHOUT_CLASSIFICATION	2.0732785696677963E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999982518978782	WITHOUT_CLASSIFICATION	1.7481021217542212E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999950882121168	WITHOUT_CLASSIFICATION	4.911787883252312E-6	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999899897681996	WITHOUT_CLASSIFICATION	1.0010231800474346E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999990457657568	WITHOUT_CLASSIFICATION	9.542342432691667E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.999997565055236	WITHOUT_CLASSIFICATION	2.4349447640784365E-6	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.999998623245684	WITHOUT_CLASSIFICATION	1.3767543159182926E-6	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.999990703525774	WITHOUT_CLASSIFICATION	9.296474226077763E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993586838308	WITHOUT_CLASSIFICATION	6.413161691339819E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.999999792672143	WITHOUT_CLASSIFICATION	2.0732785696677963E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999982518978782	WITHOUT_CLASSIFICATION	1.7481021217542212E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999950882121168	WITHOUT_CLASSIFICATION	4.911787883252312E-6	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999990457657568	WITHOUT_CLASSIFICATION	9.542342432691667E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.999997565055236	WITHOUT_CLASSIFICATION	2.4349447640784365E-6	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999869931829144	WITHOUT_CLASSIFICATION	1.3006817085556667E-5	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999896023391933	WITHOUT_CLASSIFICATION	1.0397660806727455E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9996176010230584	WITHOUT_CLASSIFICATION	3.823989769416161E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9996176010230584	WITHOUT_CLASSIFICATION	3.823989769416161E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.999998431089344	WITHOUT_CLASSIFICATION	1.5689106559695856E-6	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999932124901403	WITHOUT_CLASSIFICATION	6.787509859790593E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999946299700304	WITHOUT_CLASSIFICATION	5.370029969562262E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999959961409048	WITHOUT_CLASSIFICATION	4.00385909513316E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999959961409048	WITHOUT_CLASSIFICATION	4.00385909513316E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999995913674035	WITHOUT_CLASSIFICATION	4.0863259657153185E-7	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999969817766158	WITHOUT_CLASSIFICATION	3.018223384280845E-6	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999989895501556	WITHOUT_CLASSIFICATION	1.0104498444088629E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999988285820509	WITHOUT_CLASSIFICATION	1.171417949118111E-6	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999058568282395	WITHOUT_CLASSIFICATION	9.41431717605653E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999973441597059	WITHOUT_CLASSIFICATION	2.655840294181372E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999976795976777	WITHOUT_CLASSIFICATION	2.3204023223869014E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999959434400146	WITHOUT_CLASSIFICATION	4.056559985346653E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999943569303769	WITHOUT_CLASSIFICATION	5.643069623114083E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999973048375631	WITHOUT_CLASSIFICATION	2.695162436919357E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999977311342453	WITHOUT_CLASSIFICATION	2.268865754624069E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999995913674035	WITHOUT_CLASSIFICATION	4.0863259657153185E-7	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999969817766158	WITHOUT_CLASSIFICATION	3.018223384280845E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999988285820509	WITHOUT_CLASSIFICATION	1.171417949118111E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999993850780111	WITHOUT_CLASSIFICATION	6.14921988834058E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999946299700304	WITHOUT_CLASSIFICATION	5.370029969562262E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999946299700304	WITHOUT_CLASSIFICATION	5.370029969562262E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999951897084554	WITHOUT_CLASSIFICATION	4.810291544659763E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999951897084554	WITHOUT_CLASSIFICATION	4.810291544659763E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999259002879072	WITHOUT_CLASSIFICATION	7.409971209284373E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999259002879072	WITHOUT_CLASSIFICATION	7.409971209284373E-5	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999991734281232	WITHOUT_CLASSIFICATION	8.265718769723986E-7	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999987300672996	WITHOUT_CLASSIFICATION	1.269932700420338E-6	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999960172105977	WITHOUT_CLASSIFICATION	3.982789402365899E-6	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999982151375876	WITHOUT_CLASSIFICATION	1.7848624123960496E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999998610886389	WITHOUT_CLASSIFICATION	1.38911361150786E-7	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999992778151651	WITHOUT_CLASSIFICATION	7.221848348748998E-7	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9997551773695545	WITHOUT_CLASSIFICATION	2.4482263044547003E-4	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999987213414564	WITHOUT_CLASSIFICATION	1.2786585436666359E-6	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.999999673321486	WITHOUT_CLASSIFICATION	3.2667851403193126E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.999999166488138	WITHOUT_CLASSIFICATION	8.335118619465226E-7	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999849294392843	WITHOUT_CLASSIFICATION	1.5070560715620002E-5	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999926575795168	WITHOUT_CLASSIFICATION	7.3424204831790484E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999989615048764	WITHOUT_CLASSIFICATION	1.0384951236042495E-6	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999991537777024	WITHOUT_CLASSIFICATION	8.462222976083911E-7	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999999482660216	WITHOUT_CLASSIFICATION	5.1733978409458603E-8	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999928381207663	WITHOUT_CLASSIFICATION	7.161879233642039E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999860573988734	WITHOUT_CLASSIFICATION	1.3942601126775284E-5	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999940380962418	WITHOUT_CLASSIFICATION	5.961903758236508E-6	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999997477062942	WITHOUT_CLASSIFICATION	2.522937057188839E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999976795976777	WITHOUT_CLASSIFICATION	2.3204023223869014E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999943569303769	WITHOUT_CLASSIFICATION	5.643069623114083E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999255903684388	WITHOUT_CLASSIFICATION	7.440963156119036E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999713002005897	WITHOUT_CLASSIFICATION	2.869979941032793E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999713002005897	WITHOUT_CLASSIFICATION	2.869979941032793E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999993850780111	WITHOUT_CLASSIFICATION	6.14921988834058E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999946299700304	WITHOUT_CLASSIFICATION	5.370029969562262E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999951897084554	WITHOUT_CLASSIFICATION	4.810291544659763E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999259002879072	WITHOUT_CLASSIFICATION	7.409971209284373E-5	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.999987415705588	WITHOUT_CLASSIFICATION	1.2584294412071382E-5	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999863919264415	WITHOUT_CLASSIFICATION	1.360807355855355E-5	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999993799567028	WITHOUT_CLASSIFICATION	6.200432971368455E-7	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9999994758019687	WITHOUT_CLASSIFICATION	5.241980312380138E-7	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999642784808424	WITHOUT_CLASSIFICATION	3.5721519157669375E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999642784808424	WITHOUT_CLASSIFICATION	3.5721519157669375E-5	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999997016039439	WITHOUT_CLASSIFICATION	2.9839605609804005E-7	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999709245591419	WITHOUT_CLASSIFICATION	2.907544085802368E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999893047225863	WITHOUT_CLASSIFICATION	1.0695277413781927E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999560968393114	WITHOUT_CLASSIFICATION	4.39031606886598E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999990491415205	WITHOUT_CLASSIFICATION	9.508584794895061E-6	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999990491415205	WITHOUT_CLASSIFICATION	9.508584794895061E-6	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999991570995804	WITHOUT_CLASSIFICATION	8.429004196978075E-7	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999868191981123	WITHOUT_CLASSIFICATION	1.3180801887688145E-5	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999974695319419	WITHOUT_CLASSIFICATION	2.5304680580836556E-6	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999988677619643	WITHOUT_CLASSIFICATION	1.1322380356668116E-6	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999986992008199	WITHOUT_CLASSIFICATION	1.3007991801235523E-6	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999838886382296	WITHOUT_CLASSIFICATION	1.611136177032459E-5	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999933959458329	WITHOUT_CLASSIFICATION	6.604054167082039E-6	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999962726706141	WITHOUT_CLASSIFICATION	3.727329386046586E-6	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9999905721641222	WITHOUT_CLASSIFICATION	9.427835877738878E-6	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9999981586494415	WITHOUT_CLASSIFICATION	1.841350558546915E-6	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9999927588434732	WITHOUT_CLASSIFICATION	7.241156526896775E-6	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999814935556053	WITHOUT_CLASSIFICATION	1.8506444394749964E-5	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999995855223961	WITHOUT_CLASSIFICATION	4.1447760382491647E-7	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999974998125059	WITHOUT_CLASSIFICATION	2.5001874940543803E-6	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999942414287885	WITHOUT_CLASSIFICATION	5.7585712114914215E-6	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999998923411388	WITHOUT_CLASSIFICATION	1.0765886107120358E-7	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999857552274337	WITHOUT_CLASSIFICATION	1.4244772566376086E-5	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999943690156217	WITHOUT_CLASSIFICATION	5.63098437833141E-6	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999970181673511	WITHOUT_CLASSIFICATION	2.9818326488999473E-6	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999793897910356	WITHOUT_CLASSIFICATION	2.0610208964406028E-5	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999957977349521	WITHOUT_CLASSIFICATION	4.20226504792512E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999700714566256	WITHOUT_CLASSIFICATION	2.992854337431507E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999700714566256	WITHOUT_CLASSIFICATION	2.992854337431507E-5	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999974080543129	WITHOUT_CLASSIFICATION	2.591945687144548E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999525615244896	WITHOUT_CLASSIFICATION	4.743847551032358E-5	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999986672812877	WITHOUT_CLASSIFICATION	1.33271871234498E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999986672812877	WITHOUT_CLASSIFICATION	1.33271871234498E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9952382835314109	WITHOUT_CLASSIFICATION	0.004761716468589158	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999951373525917	WITHOUT_CLASSIFICATION	4.8626474082987145E-6	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999811776028845	WITHOUT_CLASSIFICATION	1.8822397115534586E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999958087767048	WITHOUT_CLASSIFICATION	4.191223295229422E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999958087767048	WITHOUT_CLASSIFICATION	4.191223295229422E-6	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999866398978798	WITHOUT_CLASSIFICATION	1.3360102120261114E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.999889026107749	WITHOUT_CLASSIFICATION	1.1097389225104331E-4	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.999971742445201	WITHOUT_CLASSIFICATION	2.8257554799008953E-5	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999956059986778	WITHOUT_CLASSIFICATION	4.394001322241593E-6	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999975903511802	WITHOUT_CLASSIFICATION	2.4096488198369888E-6	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999863743704412	WITHOUT_CLASSIFICATION	1.3625629558831667E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999839654297739	WITHOUT_CLASSIFICATION	1.6034570226125723E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999984563024547	WITHOUT_CLASSIFICATION	1.5436975454663603E-6	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999921659389572	WITHOUT_CLASSIFICATION	7.834061042817651E-6	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9999977050234592	WITHOUT_CLASSIFICATION	2.29497654073293E-6	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999724226861872	WITHOUT_CLASSIFICATION	2.757731381271939E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999893247228336	WITHOUT_CLASSIFICATION	1.0675277166472237E-5	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999890610881533	WITHOUT_CLASSIFICATION	1.093891184674359E-5	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999917925259737	WITHOUT_CLASSIFICATION	8.207474026321867E-6	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999959085349488	WITHOUT_CLASSIFICATION	4.091465051170319E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.999992937893821	WITHOUT_CLASSIFICATION	7.062106178930951E-6	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999971487687073	WITHOUT_CLASSIFICATION	2.8512312926360895E-6	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999938859668196	WITHOUT_CLASSIFICATION	6.114033180386993E-6	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999818394647061	WITHOUT_CLASSIFICATION	1.816053529394428E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999045416554917	WITHOUT_CLASSIFICATION	9.545834450842294E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999971578318818	WITHOUT_CLASSIFICATION	2.842168118229925E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999928616366767	WITHOUT_CLASSIFICATION	7.138363323336363E-6	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999609641309445	WITHOUT_CLASSIFICATION	3.903586905559172E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999932454659494	WITHOUT_CLASSIFICATION	6.75453405062936E-6	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999892480865471	WITHOUT_CLASSIFICATION	1.075191345281031E-5	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9999643599907433	WITHOUT_CLASSIFICATION	3.564000925677882E-5	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9989996170466078	WITHOUT_CLASSIFICATION	0.0010003829533921612	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999976550556318	WITHOUT_CLASSIFICATION	2.3449443682183174E-6	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999745205001894	WITHOUT_CLASSIFICATION	2.547949981054094E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9998746615995565	WITHOUT_CLASSIFICATION	1.2533840044352178E-4	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999947892148046	WITHOUT_CLASSIFICATION	5.210785195428045E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999917925259737	WITHOUT_CLASSIFICATION	8.207474026321867E-6	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999976550556318	WITHOUT_CLASSIFICATION	2.3449443682183174E-6	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999745205001894	WITHOUT_CLASSIFICATION	2.547949981054094E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999947892148046	WITHOUT_CLASSIFICATION	5.210785195428045E-6	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999885751552374	WITHOUT_CLASSIFICATION	1.142484476264105E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999597858084394	WITHOUT_CLASSIFICATION	4.0214191560528526E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999153151866967	WITHOUT_CLASSIFICATION	8.468481330331291E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999983444454744	WITHOUT_CLASSIFICATION	1.6555545257023978E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999934377363162	WITHOUT_CLASSIFICATION	6.562263683855448E-6	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999997238868369	WITHOUT_CLASSIFICATION	2.7611316315983754E-7	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.999982409871763	WITHOUT_CLASSIFICATION	1.759012823702523E-5	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999979498179566	WITHOUT_CLASSIFICATION	2.050182043445013E-6	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999802041442571	WITHOUT_CLASSIFICATION	1.9795855742869502E-5	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999879023037848	WITHOUT_CLASSIFICATION	1.2097696215270601E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999843317640079	WITHOUT_CLASSIFICATION	1.5668235991998156E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999843317640079	WITHOUT_CLASSIFICATION	1.5668235991998156E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999496957316051	WITHOUT_CLASSIFICATION	5.030426839501745E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999596663779078	WITHOUT_CLASSIFICATION	4.033362209228472E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999941822171531	WITHOUT_CLASSIFICATION	5.81778284693188E-6	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999911144038268	WITHOUT_CLASSIFICATION	8.885596173170363E-6	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999486959852429	WITHOUT_CLASSIFICATION	5.130401475713941E-5	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999972164929901	WITHOUT_CLASSIFICATION	2.783507009969253E-6	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999965345042455	WITHOUT_CLASSIFICATION	3.465495754464559E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999981113293025	WITHOUT_CLASSIFICATION	1.888670697442636E-6	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999954147805215	WITHOUT_CLASSIFICATION	4.585219478603335E-6	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999996025211725	WITHOUT_CLASSIFICATION	3.9747882752542646E-7	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999987967778367	WITHOUT_CLASSIFICATION	1.203222163386852E-6	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999998929425932	WITHOUT_CLASSIFICATION	1.0705740672875972E-7	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999989123605961	WITHOUT_CLASSIFICATION	1.0876394037788208E-6	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999988024650113	WITHOUT_CLASSIFICATION	1.1975349886994585E-6	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999976460070035	WITHOUT_CLASSIFICATION	2.3539929966328236E-6	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999984422704953	WITHOUT_CLASSIFICATION	1.5577295047390538E-6	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.999993118424645	WITHOUT_CLASSIFICATION	6.88157535508722E-6	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999979594913344	WITHOUT_CLASSIFICATION	2.040508665578284E-6	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999983345744811	WITHOUT_CLASSIFICATION	1.6654255189577806E-6	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999900788410941	WITHOUT_CLASSIFICATION	9.92115890595507E-6	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999869056583806	WITHOUT_CLASSIFICATION	1.309434161950264E-5	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999779230967669	WITHOUT_CLASSIFICATION	2.2076903233144962E-5	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999972097704898	WITHOUT_CLASSIFICATION	2.7902295101485286E-6	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999811617312702	WITHOUT_CLASSIFICATION	1.88382687298714E-5	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999876605603023	WITHOUT_CLASSIFICATION	1.2339439697686511E-5	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999944090780397	WITHOUT_CLASSIFICATION	5.590921960200699E-6	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9999964010636623	WITHOUT_CLASSIFICATION	3.598936337639553E-6	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9999993511097254	WITHOUT_CLASSIFICATION	6.488902745655432E-7	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999823686146297	WITHOUT_CLASSIFICATION	1.7631385370290618E-5	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999869739977655	WITHOUT_CLASSIFICATION	1.3026002234609188E-5	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999982810555148	WITHOUT_CLASSIFICATION	1.7189444852072693E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999539103494688	WITHOUT_CLASSIFICATION	4.608965053114754E-5	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999994195724189	WITHOUT_CLASSIFICATION	5.804275811091823E-7	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999998102267842	WITHOUT_CLASSIFICATION	1.8977321579462628E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999976785165761	WITHOUT_CLASSIFICATION	2.3214834238540504E-6	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999918868120048	WITHOUT_CLASSIFICATION	8.113187995122824E-6	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999986650526629	WITHOUT_CLASSIFICATION	1.3349473371564574E-6	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999250570961308	WITHOUT_CLASSIFICATION	7.49429038692107E-5	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999978813933756	WITHOUT_CLASSIFICATION	2.1186066243599558E-6	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999991457893245	WITHOUT_CLASSIFICATION	8.54210675574383E-7	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999589771084886	WITHOUT_CLASSIFICATION	4.102289151139037E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999750001185622	WITHOUT_CLASSIFICATION	2.4999881437825566E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999932406939829	WITHOUT_CLASSIFICATION	6.75930601720577E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999936111687568	WITHOUT_CLASSIFICATION	6.38883124323574E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999993872832595	WITHOUT_CLASSIFICATION	6.127167405381723E-7	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999979324684205	WITHOUT_CLASSIFICATION	2.067531579554977E-6	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9998744396214921	WITHOUT_CLASSIFICATION	1.2556037850773618E-4	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999977407929659	WITHOUT_CLASSIFICATION	2.2592070342038603E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999999346810887	WITHOUT_CLASSIFICATION	6.531891131038585E-8	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999906780342731	WITHOUT_CLASSIFICATION	9.321965726942135E-6	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999977112101496	WITHOUT_CLASSIFICATION	2.2887898504084806E-6	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999998377085862	WITHOUT_CLASSIFICATION	1.6229141383855338E-7	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999996943430606	WITHOUT_CLASSIFICATION	3.0565693947745427E-7	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999820521693502	WITHOUT_CLASSIFICATION	1.7947830649780953E-5	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999672664946632	WITHOUT_CLASSIFICATION	3.2733505336817333E-5	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999666547334654	WITHOUT_CLASSIFICATION	3.3345266534659225E-5	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999994675860683	WITHOUT_CLASSIFICATION	5.324139316820769E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999990986281834	WITHOUT_CLASSIFICATION	9.013718166105079E-7	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9999983118889193	WITHOUT_CLASSIFICATION	1.688111080763337E-6	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9997596830207853	WITHOUT_CLASSIFICATION	2.403169792147203E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9997596830207853	WITHOUT_CLASSIFICATION	2.403169792147203E-4	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999913765522432	WITHOUT_CLASSIFICATION	8.623447756758854E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999994773777041	WITHOUT_CLASSIFICATION	5.226222959009263E-7	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999735577612631	WITHOUT_CLASSIFICATION	2.6442238736994693E-5	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999873412727988	WITHOUT_CLASSIFICATION	1.2658727201266468E-5	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999948013991954	WITHOUT_CLASSIFICATION	5.198600804508791E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9999900936384485	WITHOUT_CLASSIFICATION	9.906361551417072E-6	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.999921044400023	WITHOUT_CLASSIFICATION	7.895559997701207E-5	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999810102884689	WITHOUT_CLASSIFICATION	1.8989711531163627E-5	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.999994455441139	WITHOUT_CLASSIFICATION	5.544558861009219E-6	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999941677744106	WITHOUT_CLASSIFICATION	5.832225589367155E-6	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999954603389944	WITHOUT_CLASSIFICATION	4.539661005646579E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999968628170353	WITHOUT_CLASSIFICATION	3.1371829646959056E-6	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999035817638326	WITHOUT_CLASSIFICATION	9.641823616735036E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999906461620592	WITHOUT_CLASSIFICATION	9.353837940858283E-6	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999975367045769	WITHOUT_CLASSIFICATION	2.4632954230402936E-6	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999634507189075	WITHOUT_CLASSIFICATION	3.654928109248925E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999961124556503	WITHOUT_CLASSIFICATION	3.887544349686088E-6	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999961148666794	WITHOUT_CLASSIFICATION	3.885133320700472E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9999987681587017	WITHOUT_CLASSIFICATION	1.231841298367958E-6	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999907498306387	WITHOUT_CLASSIFICATION	9.250169361222645E-6	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999923490433296	WITHOUT_CLASSIFICATION	7.650956670388165E-6	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9998106282215102	WITHOUT_CLASSIFICATION	1.8937177848981986E-4	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999992022830119	WITHOUT_CLASSIFICATION	7.977169880944696E-7	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999539883819593	WITHOUT_CLASSIFICATION	4.60116180407927E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999973461446743	WITHOUT_CLASSIFICATION	2.6538553257543554E-6	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999759187002689	WITHOUT_CLASSIFICATION	2.408129973108374E-5	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999882887863705	WITHOUT_CLASSIFICATION	1.1711213629497813E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999988485790074	WITHOUT_CLASSIFICATION	1.1514209926025342E-6	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999992287731435	WITHOUT_CLASSIFICATION	7.712268564034978E-7	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999824129326557	WITHOUT_CLASSIFICATION	1.758706734428381E-5	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999958156070938	WITHOUT_CLASSIFICATION	4.184392906084119E-6	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999954354262861	WITHOUT_CLASSIFICATION	4.564573713855191E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999952981114631	WITHOUT_CLASSIFICATION	4.701888536922828E-6	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999943980513658	WITHOUT_CLASSIFICATION	5.601948634190137E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999952981114631	WITHOUT_CLASSIFICATION	4.701888536922828E-6	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999993832883594	WITHOUT_CLASSIFICATION	6.167116406883955E-7	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999761763827859	WITHOUT_CLASSIFICATION	2.3823617214037985E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999761763827859	WITHOUT_CLASSIFICATION	2.3823617214037985E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999761763827859	WITHOUT_CLASSIFICATION	2.3823617214037985E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.999999124554708	WITHOUT_CLASSIFICATION	8.754452921231483E-7	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.999999124554708	WITHOUT_CLASSIFICATION	8.754452921231483E-7	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999627050542069	WITHOUT_CLASSIFICATION	3.7294945792965144E-5	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999979586728813	WITHOUT_CLASSIFICATION	2.0413271186643874E-6	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999934220674537	WITHOUT_CLASSIFICATION	6.577932546376204E-6	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999999316930801	WITHOUT_CLASSIFICATION	6.830691986373498E-8	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999698649675656	WITHOUT_CLASSIFICATION	3.0135032434375314E-5	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999984589819569	WITHOUT_CLASSIFICATION	1.5410180430977424E-6	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999987380504839	WITHOUT_CLASSIFICATION	1.261949516195941E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999713587399058	WITHOUT_CLASSIFICATION	2.8641260094150196E-5	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999990557121742	WITHOUT_CLASSIFICATION	9.442878257716013E-7	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999854757670652	WITHOUT_CLASSIFICATION	1.4524232934837331E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999936955090102	WITHOUT_CLASSIFICATION	6.30449098986344E-6	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9999759094643691	WITHOUT_CLASSIFICATION	2.409053563088849E-5	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999989636393384	WITHOUT_CLASSIFICATION	1.0363606616414388E-6	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999966286254052	WITHOUT_CLASSIFICATION	3.3713745949624136E-6	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999801276706598	WITHOUT_CLASSIFICATION	1.987232934018459E-5	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.999994873122602	WITHOUT_CLASSIFICATION	5.12687739804966E-6	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999913914243491	WITHOUT_CLASSIFICATION	8.608575650904844E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999928161885646	WITHOUT_CLASSIFICATION	7.183811435436086E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999928161885646	WITHOUT_CLASSIFICATION	7.183811435436086E-6	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999533860539461	WITHOUT_CLASSIFICATION	4.6613946053900566E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999986501167922	WITHOUT_CLASSIFICATION	1.3498832077621956E-6	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999986501167922	WITHOUT_CLASSIFICATION	1.3498832077621956E-6	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999600645457488	WITHOUT_CLASSIFICATION	3.993545425115117E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999740572113598	WITHOUT_CLASSIFICATION	2.594278864015307E-5	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.999997689001305	WITHOUT_CLASSIFICATION	2.310998694995047E-6	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.999965749821572	WITHOUT_CLASSIFICATION	3.425017842797717E-5	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999725758328623	WITHOUT_CLASSIFICATION	2.7424167137783154E-5	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.999997928927658	WITHOUT_CLASSIFICATION	2.0710723419565402E-6	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999553740707059	WITHOUT_CLASSIFICATION	4.4625929294155706E-5	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999900177673327	WITHOUT_CLASSIFICATION	9.982232667397315E-6	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999963032718667	WITHOUT_CLASSIFICATION	3.696728133303012E-6	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999926768008112	WITHOUT_CLASSIFICATION	7.323199188848365E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999949983597174	WITHOUT_CLASSIFICATION	5.001640282669125E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999979241969841	WITHOUT_CLASSIFICATION	2.0758030159035104E-5	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999889843201484	WITHOUT_CLASSIFICATION	1.101567985169428E-5	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999975139207744	WITHOUT_CLASSIFICATION	2.4860792256781106E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999713587399058	WITHOUT_CLASSIFICATION	2.8641260094150196E-5	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9991433454545576	WITHOUT_CLASSIFICATION	8.566545454424389E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999832206651375	WITHOUT_CLASSIFICATION	1.6779334862576483E-5	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999938768388907	WITHOUT_CLASSIFICATION	6.1231611092436985E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999938768388907	WITHOUT_CLASSIFICATION	6.1231611092436985E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999962675699362	WITHOUT_CLASSIFICATION	3.7324300638522565E-6	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.999943042661364	WITHOUT_CLASSIFICATION	5.695733863600012E-5	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.999998199233791	WITHOUT_CLASSIFICATION	1.8007662089841902E-6	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.999996521921393	WITHOUT_CLASSIFICATION	3.4780786070947794E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999983958140893	WITHOUT_CLASSIFICATION	1.6041859106987755E-6	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999971018394636	WITHOUT_CLASSIFICATION	2.898160536553591E-6	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999997044520232	WITHOUT_CLASSIFICATION	2.9554797681746455E-7	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9999868105691111	WITHOUT_CLASSIFICATION	1.3189430888813737E-5	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999836287124414	WITHOUT_CLASSIFICATION	1.6371287558625267E-5	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.999999708897377	WITHOUT_CLASSIFICATION	2.911026230708886E-7	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.999984167670261	WITHOUT_CLASSIFICATION	1.583232973900816E-5	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999973069660666	WITHOUT_CLASSIFICATION	2.693033933424905E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9990245279862296	WITHOUT_CLASSIFICATION	9.754720137703487E-4	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999987911137465	WITHOUT_CLASSIFICATION	1.208886253478109E-6	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999987656668345	WITHOUT_CLASSIFICATION	1.2343331654834876E-6	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.999990511365577	WITHOUT_CLASSIFICATION	9.488634422947702E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999230387366822	WITHOUT_CLASSIFICATION	7.696126331785223E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999962759345561	WITHOUT_CLASSIFICATION	3.724065443883338E-6	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999756475958077	WITHOUT_CLASSIFICATION	2.4352404192256216E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999961624320024	WITHOUT_CLASSIFICATION	3.8375679976005076E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999898848184452	WITHOUT_CLASSIFICATION	1.011518155481408E-5	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999980570825074	WITHOUT_CLASSIFICATION	1.9429174925551327E-6	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999452911130889	WITHOUT_CLASSIFICATION	5.470888691107762E-5	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999996455536787	WITHOUT_CLASSIFICATION	3.544463212559087E-7	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999998525144753	WITHOUT_CLASSIFICATION	1.4748552462429435E-7	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999407042934745	WITHOUT_CLASSIFICATION	5.929570652551539E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9999962851070532	WITHOUT_CLASSIFICATION	3.714892946784757E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9999755123834608	WITHOUT_CLASSIFICATION	2.4487616539160557E-5	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999959813466055	WITHOUT_CLASSIFICATION	4.018653394538034E-6	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999879800794103	WITHOUT_CLASSIFICATION	1.2019920589818064E-5	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999902355981152	WITHOUT_CLASSIFICATION	9.76440188487164E-6	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999981681668707	WITHOUT_CLASSIFICATION	1.831833129309545E-6	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999775941160646	WITHOUT_CLASSIFICATION	2.240588393535435E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9998196016832479	WITHOUT_CLASSIFICATION	1.803983167520668E-4	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999937517276062	WITHOUT_CLASSIFICATION	6.2482723937641E-6	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999691802167028	WITHOUT_CLASSIFICATION	3.081978329723802E-5	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9999755123834608	WITHOUT_CLASSIFICATION	2.4487616539160557E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999998948296205	WITHOUT_CLASSIFICATION	1.0517037952118496E-7	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999937517276062	WITHOUT_CLASSIFICATION	6.2482723937641E-6	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999999498694477	WITHOUT_CLASSIFICATION	5.013055226307914E-8	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.999997975451079	WITHOUT_CLASSIFICATION	2.024548920966051E-6	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999990706814713	WITHOUT_CLASSIFICATION	9.293185285771592E-7	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999960591579695	WITHOUT_CLASSIFICATION	3.9408420304394515E-6	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999529440950778	WITHOUT_CLASSIFICATION	4.705590492217336E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999995865183671	WITHOUT_CLASSIFICATION	4.1348163286370177E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999995865183671	WITHOUT_CLASSIFICATION	4.1348163286370177E-7	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.999997296611236	WITHOUT_CLASSIFICATION	2.703388764008214E-6	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.999999908667061	WITHOUT_CLASSIFICATION	9.133293911099171E-8	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999960484867141	WITHOUT_CLASSIFICATION	3.951513285957303E-6	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999960484867141	WITHOUT_CLASSIFICATION	3.951513285957303E-6	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.999999945223044	WITHOUT_CLASSIFICATION	5.4776956025343795E-8	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9992482538401354	WITHOUT_CLASSIFICATION	7.517461598646839E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9991806891934428	WITHOUT_CLASSIFICATION	8.193108065572003E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9991806891934428	WITHOUT_CLASSIFICATION	8.193108065572003E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999770913537258	WITHOUT_CLASSIFICATION	2.290864627424335E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999760913188793	WITHOUT_CLASSIFICATION	2.3908681120673736E-5	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999997690379113	WITHOUT_CLASSIFICATION	2.3096208878302873E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.999999734492956	WITHOUT_CLASSIFICATION	2.6550704400002395E-7	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999858073043695	WITHOUT_CLASSIFICATION	1.4192695630564721E-5	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999704722905496	WITHOUT_CLASSIFICATION	2.9527709450437905E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999997986157009	WITHOUT_CLASSIFICATION	2.013842989946988E-7	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999867086863116	WITHOUT_CLASSIFICATION	1.3291313688404616E-5	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.999974123905241	WITHOUT_CLASSIFICATION	2.5876094759010054E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999920206500147	WITHOUT_CLASSIFICATION	7.979349985289848E-6	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999926275795898	WITHOUT_CLASSIFICATION	7.372420410216617E-6	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999635142901702	WITHOUT_CLASSIFICATION	3.648570982987599E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999982786658779	WITHOUT_CLASSIFICATION	1.7213341221252622E-6	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.999996031258259	WITHOUT_CLASSIFICATION	3.968741741122322E-6	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999561115019306	WITHOUT_CLASSIFICATION	4.388849806938125E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999099881279868	WITHOUT_CLASSIFICATION	9.001187201313465E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.999904668679289	WITHOUT_CLASSIFICATION	9.533132071112178E-5	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999846805684149	WITHOUT_CLASSIFICATION	1.5319431585040143E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999856948007808	WITHOUT_CLASSIFICATION	1.4305199219271015E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999975028317224	WITHOUT_CLASSIFICATION	2.497168277686551E-6	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999884614768731	WITHOUT_CLASSIFICATION	1.1538523126905211E-5	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999975135045662	WITHOUT_CLASSIFICATION	2.4864954338495767E-6	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999863502613111	WITHOUT_CLASSIFICATION	1.3649738688847398E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999933959926083	WITHOUT_CLASSIFICATION	6.604007391696562E-5	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999568515442379	WITHOUT_CLASSIFICATION	4.31484557620671E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999559348372544	WITHOUT_CLASSIFICATION	4.4065162745584654E-5	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999987655174478	WITHOUT_CLASSIFICATION	1.2344825521480116E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.999973591767593	WITHOUT_CLASSIFICATION	2.6408232406908553E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999641759182105	WITHOUT_CLASSIFICATION	3.5824081789496184E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999641759182105	WITHOUT_CLASSIFICATION	3.5824081789496184E-5	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999885279312513	WITHOUT_CLASSIFICATION	1.1472068748779698E-5	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999943157133377	WITHOUT_CLASSIFICATION	5.684286662304768E-6	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999376389301162	WITHOUT_CLASSIFICATION	6.236106988377435E-5	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9999906732029779	WITHOUT_CLASSIFICATION	9.326797022242491E-6	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999767013832375	WITHOUT_CLASSIFICATION	2.329861676258555E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999616879677183	WITHOUT_CLASSIFICATION	3.831203228167473E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.999997986384836	WITHOUT_CLASSIFICATION	2.013615164051939E-6	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999932642615081	WITHOUT_CLASSIFICATION	6.73573849190425E-6	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999969714216882	WITHOUT_CLASSIFICATION	3.0285783118240033E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999983517897223	WITHOUT_CLASSIFICATION	1.648210277796444E-6	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999982188309959	WITHOUT_CLASSIFICATION	1.7811690040431078E-6	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999575683462912	WITHOUT_CLASSIFICATION	4.243165370874541E-5	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999845539271696	WITHOUT_CLASSIFICATION	1.5446072830441636E-5	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999988759710493	WITHOUT_CLASSIFICATION	1.1240289507296938E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999984289267647	WITHOUT_CLASSIFICATION	1.5710732352753226E-6	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999741333320984	WITHOUT_CLASSIFICATION	2.586666790159407E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999988702443395	WITHOUT_CLASSIFICATION	1.1297556605352194E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999977777818784	WITHOUT_CLASSIFICATION	2.222218121705328E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999892239527499	WITHOUT_CLASSIFICATION	1.077604725009556E-5	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999994543566479	WITHOUT_CLASSIFICATION	5.456433520625716E-7	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999977580899846	WITHOUT_CLASSIFICATION	2.2419100154061435E-6	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999304159880655	WITHOUT_CLASSIFICATION	6.958401193439216E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999976913932511	WITHOUT_CLASSIFICATION	2.3086067489110417E-6	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.999997108016779	WITHOUT_CLASSIFICATION	2.891983221030068E-6	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999953670810745	WITHOUT_CLASSIFICATION	4.632918925533674E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999837522506285	WITHOUT_CLASSIFICATION	1.6247749371475766E-5	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999902987136989	WITHOUT_CLASSIFICATION	9.701286300978182E-6	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999712306048762	WITHOUT_CLASSIFICATION	2.8769395123825218E-5	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999877117007853	WITHOUT_CLASSIFICATION	1.2288299214746225E-5	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999903200423342	WITHOUT_CLASSIFICATION	9.679957665804139E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999804883146236	WITHOUT_CLASSIFICATION	1.9511685376453802E-5	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999654278211842	WITHOUT_CLASSIFICATION	3.4572178815789867E-5	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.999994533908891	WITHOUT_CLASSIFICATION	5.466091108960335E-6	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999940244902166	WITHOUT_CLASSIFICATION	5.97550978351847E-6	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999787022246949	WITHOUT_CLASSIFICATION	2.1297775305114864E-5	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9996592240043097	WITHOUT_CLASSIFICATION	3.4077599569016083E-4	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999956507448048	WITHOUT_CLASSIFICATION	4.349255195262892E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999894933938307	WITHOUT_CLASSIFICATION	1.0506606169208035E-5	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999997364011726	WITHOUT_CLASSIFICATION	2.6359882740459237E-7	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999970938067102	WITHOUT_CLASSIFICATION	2.9061932898050933E-6	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.999883014910118	WITHOUT_CLASSIFICATION	1.1698508988190505E-4	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999954077895393	WITHOUT_CLASSIFICATION	4.592210460648335E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999995257051213	WITHOUT_CLASSIFICATION	4.742948787629035E-7	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999995257051213	WITHOUT_CLASSIFICATION	4.742948787629035E-7	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999790254881644	WITHOUT_CLASSIFICATION	2.0974511835592867E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999954664843537	WITHOUT_CLASSIFICATION	4.533515646260845E-6	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999921387395984	WITHOUT_CLASSIFICATION	7.861260401546874E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999641819131387	WITHOUT_CLASSIFICATION	3.5818086861263084E-5	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999961483369855	WITHOUT_CLASSIFICATION	3.851663014479907E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999967556454412	WITHOUT_CLASSIFICATION	3.2443545587421448E-6	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999981777547228	WITHOUT_CLASSIFICATION	1.822245277195374E-6	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999976110416942	WITHOUT_CLASSIFICATION	2.3889583058761118E-6	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9999449242302519	WITHOUT_CLASSIFICATION	5.507576974810745E-5	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999195388847234	WITHOUT_CLASSIFICATION	8.046111527663619E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999936954794546	WITHOUT_CLASSIFICATION	6.304520545414079E-6	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999897154675326	WITHOUT_CLASSIFICATION	1.0284532467424351E-5	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999807723880079	WITHOUT_CLASSIFICATION	1.9227611992084983E-5	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999988195188703	WITHOUT_CLASSIFICATION	1.1804811297150972E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999945309391839	WITHOUT_CLASSIFICATION	5.469060816010083E-6	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999693784891995	WITHOUT_CLASSIFICATION	3.062151080045952E-5	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999964589686158	WITHOUT_CLASSIFICATION	3.541031384232383E-6	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999272657770777	WITHOUT_CLASSIFICATION	7.273422292232792E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999929185197469	WITHOUT_CLASSIFICATION	7.081480253150403E-6	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999584354160698	WITHOUT_CLASSIFICATION	4.156458393034299E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999958130544585	WITHOUT_CLASSIFICATION	4.186945541529948E-6	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999965984504661	WITHOUT_CLASSIFICATION	3.401549533839585E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.999993746185784	WITHOUT_CLASSIFICATION	6.253814216046471E-6	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999941379830971	WITHOUT_CLASSIFICATION	5.862016902939633E-6	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999953589011605	WITHOUT_CLASSIFICATION	4.641098839373115E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999894097474864	WITHOUT_CLASSIFICATION	1.059025251362185E-5	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999947458807921	WITHOUT_CLASSIFICATION	5.254119207944767E-6	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999980241119866	WITHOUT_CLASSIFICATION	1.975888013473389E-6	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999998296925614	WITHOUT_CLASSIFICATION	1.7030743870704703E-7	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999975894215968	WITHOUT_CLASSIFICATION	2.4105784032944354E-6	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999941402374601	WITHOUT_CLASSIFICATION	5.859762539867957E-6	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999994372926939	WITHOUT_CLASSIFICATION	5.62707306180419E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999769179407518	WITHOUT_CLASSIFICATION	2.308205924807649E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999931018070373	WITHOUT_CLASSIFICATION	6.898192962750512E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999894933938307	WITHOUT_CLASSIFICATION	1.0506606169208035E-5	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999987492528073	WITHOUT_CLASSIFICATION	1.2507471926411675E-6	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999951869066845	WITHOUT_CLASSIFICATION	4.813093315463545E-6	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999951869066845	WITHOUT_CLASSIFICATION	4.813093315463545E-6	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999964567106518	WITHOUT_CLASSIFICATION	3.5432893481901537E-6	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999928045132733	WITHOUT_CLASSIFICATION	7.1954867266709055E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999958956541994	WITHOUT_CLASSIFICATION	4.104345800570585E-6	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999973083404307	WITHOUT_CLASSIFICATION	2.6916595694218175E-6	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999905137698736	WITHOUT_CLASSIFICATION	9.486230126343685E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999873237059432	WITHOUT_CLASSIFICATION	1.2676294056795054E-5	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.999988876647055	WITHOUT_CLASSIFICATION	1.112335294487574E-5	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999902076517921	WITHOUT_CLASSIFICATION	9.792348207919776E-6	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999778548835596	WITHOUT_CLASSIFICATION	2.214511644032542E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999795012048079	WITHOUT_CLASSIFICATION	2.0498795192130773E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999828930160918	WITHOUT_CLASSIFICATION	1.7106983908159863E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999822438244687	WITHOUT_CLASSIFICATION	1.7756175531280043E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999898410734112	WITHOUT_CLASSIFICATION	1.0158926588835385E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999967505958343	WITHOUT_CLASSIFICATION	3.249404165820505E-6	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999981739604226	WITHOUT_CLASSIFICATION	1.8260395775375018E-6	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999997635144154	WITHOUT_CLASSIFICATION	2.3648558456216628E-7	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999941008979831	WITHOUT_CLASSIFICATION	5.8991020169322535E-6	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.999992680338598	WITHOUT_CLASSIFICATION	7.319661402054805E-6	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999909996026682	WITHOUT_CLASSIFICATION	9.000397331761631E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999916687220067	WITHOUT_CLASSIFICATION	8.331277993155434E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999932460859408	WITHOUT_CLASSIFICATION	6.753914059224443E-6	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999875380384678	WITHOUT_CLASSIFICATION	1.2461961532051522E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999994990839384	WITHOUT_CLASSIFICATION	5.009160615202664E-7	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999983013917882	WITHOUT_CLASSIFICATION	1.6986082118178789E-6	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.999993228296679	WITHOUT_CLASSIFICATION	6.771703320887119E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999997178673401	WITHOUT_CLASSIFICATION	2.8213265988156215E-7	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999970835177903	WITHOUT_CLASSIFICATION	2.9164822097061914E-6	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999962840947481	WITHOUT_CLASSIFICATION	3.7159052519192903E-6	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999963203731386	WITHOUT_CLASSIFICATION	3.6796268613469343E-6	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999903419114006	WITHOUT_CLASSIFICATION	9.658088599472798E-6	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999836451902981	WITHOUT_CLASSIFICATION	1.6354809701887143E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999898594716838	WITHOUT_CLASSIFICATION	1.0140528316082412E-5	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999712992075722	WITHOUT_CLASSIFICATION	2.8700792427819502E-5	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999974719575829	WITHOUT_CLASSIFICATION	2.5280424171230313E-6	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999988089086502	WITHOUT_CLASSIFICATION	1.1910913497952614E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999829229709011	WITHOUT_CLASSIFICATION	1.707702909895123E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999975506968244	WITHOUT_CLASSIFICATION	2.4493031755979817E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999997178673401	WITHOUT_CLASSIFICATION	2.8213265988156215E-7	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999970835177903	WITHOUT_CLASSIFICATION	2.9164822097061914E-6	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999962840947481	WITHOUT_CLASSIFICATION	3.7159052519192903E-6	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999903419114006	WITHOUT_CLASSIFICATION	9.658088599472798E-6	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999995193967931	WITHOUT_CLASSIFICATION	4.806032068886942E-7	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999997217097963	WITHOUT_CLASSIFICATION	2.782902037185399E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.999948758910793	WITHOUT_CLASSIFICATION	5.124108920699039E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999959183125028	WITHOUT_CLASSIFICATION	4.081687497185356E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.999981685384591	WITHOUT_CLASSIFICATION	1.8314615409031374E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999821098451537	WITHOUT_CLASSIFICATION	1.7890154846415627E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999906460659039	WITHOUT_CLASSIFICATION	9.353934096031014E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999925280185687	WITHOUT_CLASSIFICATION	7.4719814311931505E-6	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999995631525564	WITHOUT_CLASSIFICATION	4.3684744351580906E-7	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999938251699717	WITHOUT_CLASSIFICATION	6.174830028181467E-6	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999892346904219	WITHOUT_CLASSIFICATION	1.0765309578197614E-5	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999996506294482	WITHOUT_CLASSIFICATION	3.493705517947231E-7	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999968374661964	WITHOUT_CLASSIFICATION	3.162533803591745E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999866678946644	WITHOUT_CLASSIFICATION	1.333210533557094E-5	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999851006921818	WITHOUT_CLASSIFICATION	1.4899307818166653E-5	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.999989932636145	WITHOUT_CLASSIFICATION	1.0067363855070655E-5	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.999995871532802	WITHOUT_CLASSIFICATION	4.128467198079787E-6	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999996605636334	WITHOUT_CLASSIFICATION	3.39436366554761E-7	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999964833175152	WITHOUT_CLASSIFICATION	3.5166824848857776E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999975506968244	WITHOUT_CLASSIFICATION	2.4493031755979817E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999997217097963	WITHOUT_CLASSIFICATION	2.782902037185399E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.999948758910793	WITHOUT_CLASSIFICATION	5.124108920699039E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.999981685384591	WITHOUT_CLASSIFICATION	1.8314615409031374E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999821098451537	WITHOUT_CLASSIFICATION	1.7890154846415627E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999906460659039	WITHOUT_CLASSIFICATION	9.353934096031014E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999925280185687	WITHOUT_CLASSIFICATION	7.4719814311931505E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999976573616068	WITHOUT_CLASSIFICATION	2.342638393119334E-6	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999969069188701	WITHOUT_CLASSIFICATION	3.093081129864427E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999894262174596	WITHOUT_CLASSIFICATION	1.0573782540371426E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999998758980686	WITHOUT_CLASSIFICATION	1.2410193136678723E-7	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999992559493207	WITHOUT_CLASSIFICATION	7.440506792007555E-7	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999992559493207	WITHOUT_CLASSIFICATION	7.440506792007555E-7	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999919082303743	WITHOUT_CLASSIFICATION	8.091769625672304E-6	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999981498868126	WITHOUT_CLASSIFICATION	1.8501131874682614E-6	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999953381451467	WITHOUT_CLASSIFICATION	4.661854853246228E-6	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999877378404597	WITHOUT_CLASSIFICATION	1.2262159540267431E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999966231653541	WITHOUT_CLASSIFICATION	3.376834645959076E-6	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999887078535281	WITHOUT_CLASSIFICATION	1.1292146471855652E-5	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999908360688989	WITHOUT_CLASSIFICATION	9.163931101120125E-6	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999840427762982	WITHOUT_CLASSIFICATION	1.5957223701829474E-5	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999952284832713	WITHOUT_CLASSIFICATION	4.771516728668651E-6	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999971316035562	WITHOUT_CLASSIFICATION	2.8683964437543225E-6	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999984616378211	WITHOUT_CLASSIFICATION	1.5383621787695135E-6	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999980771708049	WITHOUT_CLASSIFICATION	1.9228291950910545E-6	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999381493860169	WITHOUT_CLASSIFICATION	6.185061398314488E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999903112564208	WITHOUT_CLASSIFICATION	9.688743579138835E-6	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999984733377523	WITHOUT_CLASSIFICATION	1.5266622477274254E-6	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999978091852934	WITHOUT_CLASSIFICATION	2.190814706675506E-6	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999972105915395	WITHOUT_CLASSIFICATION	2.789408460456997E-6	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.999986582709501	WITHOUT_CLASSIFICATION	1.3417290498988045E-5	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999994809569817	WITHOUT_CLASSIFICATION	5.19043018229202E-7	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999969040356989	WITHOUT_CLASSIFICATION	3.0959643011760745E-6	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9993513465322748	WITHOUT_CLASSIFICATION	6.486534677253136E-4	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999994913747818	WITHOUT_CLASSIFICATION	5.086252180943716E-7	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999985947622001	WITHOUT_CLASSIFICATION	1.4052377998446413E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9813911077393587	WITHOUT_CLASSIFICATION	0.01860889226064138	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999980755988546	WITHOUT_CLASSIFICATION	1.924401145381887E-6	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999948085605914	WITHOUT_CLASSIFICATION	5.191439408653168E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999992361739509	WITHOUT_CLASSIFICATION	7.638260489970021E-7	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999980371509177	WITHOUT_CLASSIFICATION	1.9628490822877274E-6	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999740429818548	WITHOUT_CLASSIFICATION	2.5957018145173033E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999980755988546	WITHOUT_CLASSIFICATION	1.924401145381887E-6	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999948085605914	WITHOUT_CLASSIFICATION	5.191439408653168E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999903112564208	WITHOUT_CLASSIFICATION	9.688743579138835E-6	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999977940379328	WITHOUT_CLASSIFICATION	2.2059620672820246E-6	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999940544782281	WITHOUT_CLASSIFICATION	5.945521771900821E-6	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999913173902782	WITHOUT_CLASSIFICATION	8.68260972181368E-6	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999912052450963	WITHOUT_CLASSIFICATION	8.794754903729967E-6	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999760330801687	WITHOUT_CLASSIFICATION	2.396691983132458E-5	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999985650619371	WITHOUT_CLASSIFICATION	1.4349380629646725E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9990509400831443	WITHOUT_CLASSIFICATION	9.490599168555621E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9998865453431953	WITHOUT_CLASSIFICATION	1.1345465680462631E-4	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9999955619813888	WITHOUT_CLASSIFICATION	4.438018611117334E-6	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999791285871705	WITHOUT_CLASSIFICATION	2.0871412829364224E-5	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9999987881365293	WITHOUT_CLASSIFICATION	1.2118634707087934E-6	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999990605688658	WITHOUT_CLASSIFICATION	9.394311342551121E-7	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999994422925156	WITHOUT_CLASSIFICATION	5.577074843683252E-7	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999997310177381	WITHOUT_CLASSIFICATION	2.6898226198610545E-7	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999879016487322	WITHOUT_CLASSIFICATION	1.209835126790112E-5	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999978498997715	WITHOUT_CLASSIFICATION	2.1501002285045415E-6	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9999971519962221	WITHOUT_CLASSIFICATION	2.8480037778423054E-6	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999953806706405	WITHOUT_CLASSIFICATION	4.619329359465942E-6	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999998870730189	WITHOUT_CLASSIFICATION	1.1292698110686647E-7	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999995334233651	WITHOUT_CLASSIFICATION	4.6657663494006544E-7	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999989954044112	WITHOUT_CLASSIFICATION	1.0045955888004188E-6	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999953411618626	WITHOUT_CLASSIFICATION	4.658838137418445E-6	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999992371466591	WITHOUT_CLASSIFICATION	7.628533408869862E-7	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999996203490745	WITHOUT_CLASSIFICATION	3.7965092548387875E-7	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999991672193972	WITHOUT_CLASSIFICATION	8.327806027662674E-7	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999998804873939	WITHOUT_CLASSIFICATION	1.195126062158245E-7	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.999990344157557	WITHOUT_CLASSIFICATION	9.655842442874248E-6	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999560073377297	WITHOUT_CLASSIFICATION	4.3992662270210076E-5	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999817665375135	WITHOUT_CLASSIFICATION	1.8233462486550463E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9999861450680896	WITHOUT_CLASSIFICATION	1.3854931910354821E-5	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999991129360069	WITHOUT_CLASSIFICATION	8.870639932156013E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999085563531714	WITHOUT_CLASSIFICATION	9.144364682855938E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999085563531714	WITHOUT_CLASSIFICATION	9.144364682855938E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999381493860169	WITHOUT_CLASSIFICATION	6.185061398314488E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999997060253479	WITHOUT_CLASSIFICATION	2.9397465202297235E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999912660386319	WITHOUT_CLASSIFICATION	8.733961368097081E-6	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999895851660682	WITHOUT_CLASSIFICATION	1.0414833931913215E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999965162063814	WITHOUT_CLASSIFICATION	3.4837936185587397E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999965162063814	WITHOUT_CLASSIFICATION	3.4837936185587397E-6	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999963063147534	WITHOUT_CLASSIFICATION	3.693685246627938E-6	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999638135882377	WITHOUT_CLASSIFICATION	3.618641176228231E-5	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999991213457895	WITHOUT_CLASSIFICATION	8.786542104603072E-7	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999981574855037	WITHOUT_CLASSIFICATION	1.8425144963039358E-6	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999984434484159	WITHOUT_CLASSIFICATION	1.556551584067929E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999999366952723	WITHOUT_CLASSIFICATION	6.33047276748909E-8	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999983929974907	WITHOUT_CLASSIFICATION	1.607002509251312E-6	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999989325098625	WITHOUT_CLASSIFICATION	1.0674901374909878E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999955235041282	WITHOUT_CLASSIFICATION	4.476495871818993E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999969119021578	WITHOUT_CLASSIFICATION	3.0880978423349093E-6	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.999996342827232	WITHOUT_CLASSIFICATION	3.6571727679046175E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999776855903477	WITHOUT_CLASSIFICATION	2.2314409652348867E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999428700190645	WITHOUT_CLASSIFICATION	5.7129980935454055E-5	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999940401136541	WITHOUT_CLASSIFICATION	5.959886345883301E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999190644495178	WITHOUT_CLASSIFICATION	8.093555048221303E-5	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999709709000099	WITHOUT_CLASSIFICATION	2.9029099990213008E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999987220125245	WITHOUT_CLASSIFICATION	1.277987475513787E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999987220125245	WITHOUT_CLASSIFICATION	1.277987475513787E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999994601668901	WITHOUT_CLASSIFICATION	5.398331098014737E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999994601668901	WITHOUT_CLASSIFICATION	5.398331098014737E-7	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999994658743989	WITHOUT_CLASSIFICATION	5.341256010547613E-7	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.999973585373644	WITHOUT_CLASSIFICATION	2.641462635594426E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999986194573536	WITHOUT_CLASSIFICATION	1.3805426464074975E-6	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999996857190805	WITHOUT_CLASSIFICATION	3.1428091960119156E-7	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999994035546649	WITHOUT_CLASSIFICATION	5.964453350610279E-7	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999776849656602	WITHOUT_CLASSIFICATION	2.231503433981673E-5	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999518186543191	WITHOUT_CLASSIFICATION	4.8181345680754636E-5	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999776855903477	WITHOUT_CLASSIFICATION	2.2314409652348867E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999428700190645	WITHOUT_CLASSIFICATION	5.7129980935454055E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999190644495178	WITHOUT_CLASSIFICATION	8.093555048221303E-5	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999995588531339	WITHOUT_CLASSIFICATION	4.411468660713297E-7	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999972543401093	WITHOUT_CLASSIFICATION	2.7456598907620736E-6	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9999996639191703	WITHOUT_CLASSIFICATION	3.3608082966488155E-7	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.999983553030731	WITHOUT_CLASSIFICATION	1.6446969268954813E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999995277420975	WITHOUT_CLASSIFICATION	4.722579024179909E-7	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999989115688965	WITHOUT_CLASSIFICATION	1.0884311035702701E-6	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999927060235351	WITHOUT_CLASSIFICATION	7.293976464918021E-6	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999941801263722	WITHOUT_CLASSIFICATION	5.819873627770648E-6	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999324782333363	WITHOUT_CLASSIFICATION	6.752176666367197E-5	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999992214065485	WITHOUT_CLASSIFICATION	7.785934516145888E-7	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999977931251316	WITHOUT_CLASSIFICATION	2.206874868468395E-6	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9999749169879919	WITHOUT_CLASSIFICATION	2.5083012008107047E-5	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999928656041388	WITHOUT_CLASSIFICATION	7.134395861237938E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9999807538616955	WITHOUT_CLASSIFICATION	1.9246138304517875E-5	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9998077190089516	WITHOUT_CLASSIFICATION	1.9228099104835167E-4	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999986326442386	WITHOUT_CLASSIFICATION	1.367355761387836E-6	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999827203120615	WITHOUT_CLASSIFICATION	1.727968793846548E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999962945121651	WITHOUT_CLASSIFICATION	3.7054878348209224E-6	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999850699389524	WITHOUT_CLASSIFICATION	1.4930061047630748E-5	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999962434619336	WITHOUT_CLASSIFICATION	3.7565380664038845E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999983625058376	WITHOUT_CLASSIFICATION	1.6374941624483671E-6	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999950696124371	WITHOUT_CLASSIFICATION	4.930387562876105E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999876939372296	WITHOUT_CLASSIFICATION	1.2306062770308698E-5	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999993257318659	WITHOUT_CLASSIFICATION	6.742681342053805E-7	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999996515105817	WITHOUT_CLASSIFICATION	3.4848941832156147E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999990249646893	WITHOUT_CLASSIFICATION	9.750353107693087E-7	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999988743805069	WITHOUT_CLASSIFICATION	1.1256194930605948E-6	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999976952443382	WITHOUT_CLASSIFICATION	2.3047556618390225E-6	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999965238188117	WITHOUT_CLASSIFICATION	3.476181188449878E-6	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999849799833944	WITHOUT_CLASSIFICATION	1.5020016605484928E-5	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999873116696544	WITHOUT_CLASSIFICATION	1.2688330345706693E-5	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999940928930857	WITHOUT_CLASSIFICATION	5.907106914257777E-6	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999988817338118	WITHOUT_CLASSIFICATION	1.1182661881993904E-6	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999976581247175	WITHOUT_CLASSIFICATION	2.341875282523691E-6	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9999960811535205	WITHOUT_CLASSIFICATION	3.9188464795498855E-6	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.999998125136912	WITHOUT_CLASSIFICATION	1.874863087988988E-6	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999892785555279	WITHOUT_CLASSIFICATION	1.072144447209032E-5	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999995289582834	WITHOUT_CLASSIFICATION	4.710417166023911E-7	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999773670617816	WITHOUT_CLASSIFICATION	2.263293821837667E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999934759772959	WITHOUT_CLASSIFICATION	6.524022704110064E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999997725030493	WITHOUT_CLASSIFICATION	2.2749695063751812E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999912660386319	WITHOUT_CLASSIFICATION	8.733961368097081E-6	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999892785555279	WITHOUT_CLASSIFICATION	1.072144447209032E-5	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999336582582313	WITHOUT_CLASSIFICATION	6.634174176860977E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.99999718599551	WITHOUT_CLASSIFICATION	2.8140044901044418E-6	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999947536640608	WITHOUT_CLASSIFICATION	5.246335939141838E-6	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999860291556438	WITHOUT_CLASSIFICATION	1.3970844356218761E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999860291556438	WITHOUT_CLASSIFICATION	1.3970844356218761E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999982496507653	WITHOUT_CLASSIFICATION	1.7503492346107146E-6	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999995284370986	WITHOUT_CLASSIFICATION	4.7156290140299033E-7	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999968789373008	WITHOUT_CLASSIFICATION	3.121062699165692E-6	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999870085269678	WITHOUT_CLASSIFICATION	1.2991473032129791E-5	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999997721076953	WITHOUT_CLASSIFICATION	2.2789230473012573E-7	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999419283300967	WITHOUT_CLASSIFICATION	5.807166990329067E-5	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999996704649624	WITHOUT_CLASSIFICATION	3.295350375753805E-7	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.999997773319212	WITHOUT_CLASSIFICATION	2.2266807879107286E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999973874022265	WITHOUT_CLASSIFICATION	2.612597773380808E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999973874022265	WITHOUT_CLASSIFICATION	2.612597773380808E-6	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999965744708824	WITHOUT_CLASSIFICATION	3.4255291176071483E-6	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.999996313508797	WITHOUT_CLASSIFICATION	3.6864912028386463E-6	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999982423175423	WITHOUT_CLASSIFICATION	1.7576824577284739E-6	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999494356900259	WITHOUT_CLASSIFICATION	5.056430997399406E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999521956857433	WITHOUT_CLASSIFICATION	4.780431425664676E-5	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999987918152157	WITHOUT_CLASSIFICATION	1.2081847843818183E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999999493251817	WITHOUT_CLASSIFICATION	5.06748183194217E-8	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.999998200425919	WITHOUT_CLASSIFICATION	1.7995740809877945E-6	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999966383410317	WITHOUT_CLASSIFICATION	3.3616589682590466E-6	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999892154897259	WITHOUT_CLASSIFICATION	1.0784510274267073E-5	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999948590150863	WITHOUT_CLASSIFICATION	5.140984913707298E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999964980289245	WITHOUT_CLASSIFICATION	3.5019710754666003E-6	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999895380995326	WITHOUT_CLASSIFICATION	1.0461900467448072E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.999868062662987	WITHOUT_CLASSIFICATION	1.3193733701290873E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.999868062662987	WITHOUT_CLASSIFICATION	1.3193733701290873E-4	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999843768146764	WITHOUT_CLASSIFICATION	1.5623185323515532E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999925280185687	WITHOUT_CLASSIFICATION	7.4719814311931505E-6	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999946467095536	WITHOUT_CLASSIFICATION	5.353290446386873E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999990899660008	WITHOUT_CLASSIFICATION	9.100339992624985E-7	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999960815720845	WITHOUT_CLASSIFICATION	3.918427915453214E-6	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999994733153975	WITHOUT_CLASSIFICATION	5.266846025973126E-7	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999964354162557	WITHOUT_CLASSIFICATION	3.56458374429009E-6	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999851717463508	WITHOUT_CLASSIFICATION	1.4828253649206273E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999995924812435	WITHOUT_CLASSIFICATION	4.075187564416558E-7	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999889243641304	WITHOUT_CLASSIFICATION	1.107563586956304E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999844179605872	WITHOUT_CLASSIFICATION	1.5582039412816023E-5	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.999991575368751	WITHOUT_CLASSIFICATION	8.42463124894335E-6	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999999429195933	WITHOUT_CLASSIFICATION	5.708040680566756E-8	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.999997691363932	WITHOUT_CLASSIFICATION	2.3086360679396737E-6	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999944250293435	WITHOUT_CLASSIFICATION	5.574970656370948E-6	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999889273976488	WITHOUT_CLASSIFICATION	1.1072602351127444E-5	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.999999842206144	WITHOUT_CLASSIFICATION	1.5779385603405009E-7	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999862257007888	WITHOUT_CLASSIFICATION	1.3774299211341204E-5	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.999900342261566	WITHOUT_CLASSIFICATION	9.965773843399102E-5	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999936742208017	WITHOUT_CLASSIFICATION	6.325779198371065E-6	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999753513066192	WITHOUT_CLASSIFICATION	2.4648693380823327E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999885440681398	WITHOUT_CLASSIFICATION	1.1455931860234748E-5	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999986931399618	WITHOUT_CLASSIFICATION	1.3068600382565909E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.999998251698238	WITHOUT_CLASSIFICATION	1.748301762062881E-6	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.9998402526993768	WITHOUT_CLASSIFICATION	1.597473006232359E-4	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.999999458302516	WITHOUT_CLASSIFICATION	5.416974840271345E-7	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999992023486812	WITHOUT_CLASSIFICATION	7.976513187186852E-7	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999989731015206	WITHOUT_CLASSIFICATION	1.026898479373691E-6	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999944124203773	WITHOUT_CLASSIFICATION	5.5875796226262645E-6	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999605153992358	WITHOUT_CLASSIFICATION	3.9484600764230806E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999966202421438	WITHOUT_CLASSIFICATION	3.3797578562442494E-6	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999951398700397	WITHOUT_CLASSIFICATION	4.860129960213559E-6	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999861979244373	WITHOUT_CLASSIFICATION	1.380207556273726E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999981989644908	WITHOUT_CLASSIFICATION	1.8010355091594713E-6	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999994294856153	WITHOUT_CLASSIFICATION	5.705143846998989E-7	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999994947553108	WITHOUT_CLASSIFICATION	5.052446892982824E-7	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999979220110427	WITHOUT_CLASSIFICATION	2.077988957462312E-6	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999948127659997	WITHOUT_CLASSIFICATION	5.187234000342248E-6	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999785525831274	WITHOUT_CLASSIFICATION	2.1447416872617616E-5	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999934028536487	WITHOUT_CLASSIFICATION	6.597146351296475E-6	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999895893313083	WITHOUT_CLASSIFICATION	1.0410668691642137E-5	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999713280201101	WITHOUT_CLASSIFICATION	2.8671979889909838E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.999996954083333	WITHOUT_CLASSIFICATION	3.0459166669746487E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999945448345925	WITHOUT_CLASSIFICATION	5.4551654075570515E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9998821175540639	WITHOUT_CLASSIFICATION	1.1788244593616227E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.999996869106971	WITHOUT_CLASSIFICATION	3.130893029011579E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999935481816721	WITHOUT_CLASSIFICATION	6.451818328047499E-6	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999996912732363	WITHOUT_CLASSIFICATION	3.0872676362427185E-7	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999856451582902	WITHOUT_CLASSIFICATION	1.4354841709753442E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999980755988546	WITHOUT_CLASSIFICATION	1.924401145381887E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999980755988546	WITHOUT_CLASSIFICATION	1.924401145381887E-6	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999999261317299	WITHOUT_CLASSIFICATION	7.386827000832932E-8	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999627812665992	WITHOUT_CLASSIFICATION	3.721873340079797E-5	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999994591446053	WITHOUT_CLASSIFICATION	5.40855394601699E-7	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.999998568773542	WITHOUT_CLASSIFICATION	1.4312264580252096E-6	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999998052736124	WITHOUT_CLASSIFICATION	1.9472638768763624E-7	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999942083421751	WITHOUT_CLASSIFICATION	5.79165782482149E-6	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999986902072742	WITHOUT_CLASSIFICATION	1.3097927258388912E-6	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999997125282173	WITHOUT_CLASSIFICATION	2.874717826441553E-7	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999988184654153	WITHOUT_CLASSIFICATION	1.1815345846713409E-6	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999965789469477	WITHOUT_CLASSIFICATION	3.4210530522431252E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999888066154534	WITHOUT_CLASSIFICATION	1.1193384546585317E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999888066154534	WITHOUT_CLASSIFICATION	1.1193384546585317E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999888066154534	WITHOUT_CLASSIFICATION	1.1193384546585317E-5	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999985898470447	WITHOUT_CLASSIFICATION	1.4101529552568475E-6	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999961574001321	WITHOUT_CLASSIFICATION	3.842599867882643E-6	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999533494392753	WITHOUT_CLASSIFICATION	4.6650560724703643E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.999997512714845	WITHOUT_CLASSIFICATION	2.4872851549763232E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.999997512714845	WITHOUT_CLASSIFICATION	2.4872851549763232E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999994546546033	WITHOUT_CLASSIFICATION	5.453453967806181E-7	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999919298190397	WITHOUT_CLASSIFICATION	8.070180960217492E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999898328045848	WITHOUT_CLASSIFICATION	1.01671954153711E-5	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999981856165246	WITHOUT_CLASSIFICATION	1.8143834753327413E-6	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.999991894367808	WITHOUT_CLASSIFICATION	8.10563219194297E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999960697971959	WITHOUT_CLASSIFICATION	3.930202804119983E-6	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.999989098617801	WITHOUT_CLASSIFICATION	1.0901382198999997E-5	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999957507756342	WITHOUT_CLASSIFICATION	4.2492243657314046E-6	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999935692409487	WITHOUT_CLASSIFICATION	6.430759051167425E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999990441544663	WITHOUT_CLASSIFICATION	9.558455337858834E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999990441544663	WITHOUT_CLASSIFICATION	9.558455337858834E-7	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999838626529974	WITHOUT_CLASSIFICATION	1.6137347002636374E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999969599462765	WITHOUT_CLASSIFICATION	3.040053723579762E-6	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999974703380913	WITHOUT_CLASSIFICATION	2.529661908700132E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999918455678726	WITHOUT_CLASSIFICATION	8.154432127402178E-6	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999960680157146	WITHOUT_CLASSIFICATION	3.931984285395552E-6	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999630587037803	WITHOUT_CLASSIFICATION	3.694129621964907E-5	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999806147095166	WITHOUT_CLASSIFICATION	1.9385290483367854E-5	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999771536839226	WITHOUT_CLASSIFICATION	2.2846316077500298E-5	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999562043086968	WITHOUT_CLASSIFICATION	4.379569130325362E-5	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999402576207692	WITHOUT_CLASSIFICATION	5.974237923073617E-5	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999981696768735	WITHOUT_CLASSIFICATION	1.830323126517522E-6	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999488019706332	WITHOUT_CLASSIFICATION	5.1198029366848295E-5	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999213004617	WITHOUT_CLASSIFICATION	7.869953830001977E-5	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999986149924129	WITHOUT_CLASSIFICATION	1.3850075869907607E-6	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999701727330808	WITHOUT_CLASSIFICATION	2.9827266919257317E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999996679526166	WITHOUT_CLASSIFICATION	3.3204738341537204E-7	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999942505919	WITHOUT_CLASSIFICATION	5.74940810010908E-6	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999976833065636	WITHOUT_CLASSIFICATION	2.3166934364981313E-6	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999916619195627	WITHOUT_CLASSIFICATION	8.33808043737644E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999997105969364	WITHOUT_CLASSIFICATION	2.894030635809021E-7	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9999740207402186	WITHOUT_CLASSIFICATION	2.597925978134944E-5	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999983619180584	WITHOUT_CLASSIFICATION	1.638081941659811E-6	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999919986763536	WITHOUT_CLASSIFICATION	8.00132364632446E-6	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999989302010668	WITHOUT_CLASSIFICATION	1.0697989332477471E-6	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999659744832973	WITHOUT_CLASSIFICATION	3.402551670276946E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999977506105393	WITHOUT_CLASSIFICATION	2.2493894607479757E-6	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999944269049011	WITHOUT_CLASSIFICATION	5.573095098840689E-6	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999467332366132	WITHOUT_CLASSIFICATION	5.326676338685343E-5	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9999974022862048	WITHOUT_CLASSIFICATION	2.597713795225526E-6	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999774661147783	WITHOUT_CLASSIFICATION	2.2533885221711982E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.999840635452173	WITHOUT_CLASSIFICATION	1.5936454782695521E-4	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.999983031901991	WITHOUT_CLASSIFICATION	1.696809800898663E-5	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999890715846861	WITHOUT_CLASSIFICATION	1.0928415313990072E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.999840635452173	WITHOUT_CLASSIFICATION	1.5936454782695521E-4	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999599724429575	WITHOUT_CLASSIFICATION	4.002755704246132E-5	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999991536225528	WITHOUT_CLASSIFICATION	8.463774471406843E-7	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999767355087384	WITHOUT_CLASSIFICATION	2.3264491261612424E-5	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9997183064795546	WITHOUT_CLASSIFICATION	2.816935204452693E-4	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999949123921886	WITHOUT_CLASSIFICATION	5.087607811454483E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9999954242031223	WITHOUT_CLASSIFICATION	4.575796877847956E-6	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999804344951505	WITHOUT_CLASSIFICATION	1.95655048495231E-5	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999583317958451	WITHOUT_CLASSIFICATION	4.166820415491187E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999485462538671	WITHOUT_CLASSIFICATION	5.145374613302503E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9998163408610244	WITHOUT_CLASSIFICATION	1.8365913897562102E-4	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.999783619563145	WITHOUT_CLASSIFICATION	2.163804368549462E-4	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9996974692019621	WITHOUT_CLASSIFICATION	3.0253079803778046E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9971681243542185	WITHOUT_CLASSIFICATION	0.0028318756457813253	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9979582865437149	WITHOUT_CLASSIFICATION	0.002041713456285061	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999798583508837	WITHOUT_CLASSIFICATION	2.0141649116354342E-5	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999395284657702	WITHOUT_CLASSIFICATION	6.047153422982048E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999534688745711	WITHOUT_CLASSIFICATION	4.653112542896992E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999842413662039	WITHOUT_CLASSIFICATION	1.5758633796085344E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999653118728701	WITHOUT_CLASSIFICATION	3.468812712985622E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999518362652388	WITHOUT_CLASSIFICATION	4.816373476122614E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9998995157367784	WITHOUT_CLASSIFICATION	1.0048426322162713E-4	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999564348342557	WITHOUT_CLASSIFICATION	4.3565165744388944E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999512239146692	WITHOUT_CLASSIFICATION	4.877608533084255E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999917421367016	WITHOUT_CLASSIFICATION	8.25786329829508E-6	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999854583132918	WITHOUT_CLASSIFICATION	1.4541686708247244E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999929549044224	WITHOUT_CLASSIFICATION	7.0450955776469155E-6	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999539149626311	WITHOUT_CLASSIFICATION	4.6085037368868325E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999964755731354	WITHOUT_CLASSIFICATION	3.5244268645624093E-6	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999928588895501	WITHOUT_CLASSIFICATION	7.141110449859158E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999870703133198	WITHOUT_CLASSIFICATION	1.2929686680162894E-5	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999736518209139	WITHOUT_CLASSIFICATION	2.6348179086070784E-5	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9997026210942079	WITHOUT_CLASSIFICATION	2.9737890579206895E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.999824470437428	WITHOUT_CLASSIFICATION	1.7552956257216394E-4	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999986499704051	WITHOUT_CLASSIFICATION	1.3500295947999044E-6	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999908404784187	WITHOUT_CLASSIFICATION	9.159521581279967E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999729543418455	WITHOUT_CLASSIFICATION	2.7045658154509295E-5	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.999990772242608	WITHOUT_CLASSIFICATION	9.227757392032519E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9997106244322637	WITHOUT_CLASSIFICATION	2.893755677363966E-4	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999852992102601	WITHOUT_CLASSIFICATION	1.47007897397793E-5	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.999981224106417	WITHOUT_CLASSIFICATION	1.8775893583073227E-5	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999794754014747	WITHOUT_CLASSIFICATION	2.0524598525361443E-5	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999800387254093	WITHOUT_CLASSIFICATION	1.9961274590750366E-5	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999891139357696	WITHOUT_CLASSIFICATION	1.0886064230505148E-5	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999891361310927	WITHOUT_CLASSIFICATION	1.0863868907312628E-5	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999872733928541	WITHOUT_CLASSIFICATION	1.2726607145908352E-5	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999920028734774	WITHOUT_CLASSIFICATION	7.997126522639016E-6	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999893487991837	WITHOUT_CLASSIFICATION	1.0651200816461494E-5	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999658461279245	WITHOUT_CLASSIFICATION	3.415387207544301E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999956624077185	WITHOUT_CLASSIFICATION	4.337592281511437E-6	DEFECT
// space	WITHOUT_CLASSIFICATION	0.999990520493179	WITHOUT_CLASSIFICATION	9.479506820918284E-6	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.999891561244313	WITHOUT_CLASSIFICATION	1.0843875568695921E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.999898745966334	WITHOUT_CLASSIFICATION	1.0125403366607704E-4	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999995578589985	WITHOUT_CLASSIFICATION	4.421410015289289E-7	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999956624077185	WITHOUT_CLASSIFICATION	4.337592281511437E-6	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9998405078011012	WITHOUT_CLASSIFICATION	1.5949219889868638E-4	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9998405078011012	WITHOUT_CLASSIFICATION	1.5949219889868638E-4	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999924911279531	WITHOUT_CLASSIFICATION	7.508872046978108E-6	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999722751993148	WITHOUT_CLASSIFICATION	2.772480068524685E-5	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999923400106714	WITHOUT_CLASSIFICATION	7.659989328669323E-6	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.999999128951437	WITHOUT_CLASSIFICATION	8.710485630196626E-7	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999993119189421	WITHOUT_CLASSIFICATION	6.880810579851329E-7	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999890803154154	WITHOUT_CLASSIFICATION	1.0919684584609507E-5	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999896861414251	WITHOUT_CLASSIFICATION	1.0313858574942258E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.5089996114602557	DEFECT	0.4910003885397442	WITHOUT_CLASSIFICATION
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999999716639612	WITHOUT_CLASSIFICATION	2.8336038816427402E-8	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9998716269258687	WITHOUT_CLASSIFICATION	1.2837307413124537E-4	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.999999973673724	WITHOUT_CLASSIFICATION	2.6326276013711202E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999936418104445	WITHOUT_CLASSIFICATION	6.358189555568069E-6	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999183734371676	WITHOUT_CLASSIFICATION	8.162656283242808E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999945976952564	WITHOUT_CLASSIFICATION	5.4023047435585715E-6	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9958492301372713	WITHOUT_CLASSIFICATION	0.004150769862728739	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9956488609530308	WITHOUT_CLASSIFICATION	0.004351139046969222	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999942725223645	WITHOUT_CLASSIFICATION	5.727477635500859E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999757008896543	WITHOUT_CLASSIFICATION	2.4299110345717302E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999757008896543	WITHOUT_CLASSIFICATION	2.4299110345717302E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999757008896543	WITHOUT_CLASSIFICATION	2.4299110345717302E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999757008896543	WITHOUT_CLASSIFICATION	2.4299110345717302E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999757008896543	WITHOUT_CLASSIFICATION	2.4299110345717302E-4	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999751906177987	WITHOUT_CLASSIFICATION	2.480938220131358E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999873460343335	WITHOUT_CLASSIFICATION	1.2653965666537403E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998700396578997	WITHOUT_CLASSIFICATION	1.2996034210029537E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.999997041255118	WITHOUT_CLASSIFICATION	2.95874488198616E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999894893479528	WITHOUT_CLASSIFICATION	1.051065204705622E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999896166877892	WITHOUT_CLASSIFICATION	1.0383312210805774E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999609993528635	WITHOUT_CLASSIFICATION	3.90006471365074E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999861529674533	WITHOUT_CLASSIFICATION	1.3847032546841187E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999967381832884	WITHOUT_CLASSIFICATION	3.261816711686323E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999776626302332	WITHOUT_CLASSIFICATION	2.2337369766819275E-5	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999751964645125	WITHOUT_CLASSIFICATION	2.4803535487529748E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999728089919935	WITHOUT_CLASSIFICATION	2.7191008006508953E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999745418608491	WITHOUT_CLASSIFICATION	2.5458139150966722E-5	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999708979753054	WITHOUT_CLASSIFICATION	2.9102024694590313E-5	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999739878634327	WITHOUT_CLASSIFICATION	2.601213656726018E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999756697383123	WITHOUT_CLASSIFICATION	2.4330261687690197E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999736830586364	WITHOUT_CLASSIFICATION	2.6316941363644544E-5	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999707225681177	WITHOUT_CLASSIFICATION	2.927743188228549E-5	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999704158149241	WITHOUT_CLASSIFICATION	2.958418507585445E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999742022886987	WITHOUT_CLASSIFICATION	2.579771130132182E-5	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999742668038432	WITHOUT_CLASSIFICATION	2.5733196156938422E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.999972466820381	WITHOUT_CLASSIFICATION	2.7533179618991053E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999762899873266	WITHOUT_CLASSIFICATION	2.3710012673392468E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999745422128122	WITHOUT_CLASSIFICATION	2.545778718783032E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999761107392819	WITHOUT_CLASSIFICATION	2.3889260718024404E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999742207729294	WITHOUT_CLASSIFICATION	2.5779227070531643E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999711040787627	WITHOUT_CLASSIFICATION	2.8895921237369823E-5	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999698652267945	WITHOUT_CLASSIFICATION	3.013477320534764E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999704752735943	WITHOUT_CLASSIFICATION	2.952472640573111E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999763116605188	WITHOUT_CLASSIFICATION	2.3688339481256997E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999706856589518	WITHOUT_CLASSIFICATION	2.931434104833712E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999675902945898	WITHOUT_CLASSIFICATION	3.240970541017314E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999646233100027	WITHOUT_CLASSIFICATION	3.5376689997231194E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999675272550589	WITHOUT_CLASSIFICATION	3.247274494105288E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999731641362796	WITHOUT_CLASSIFICATION	2.683586372047412E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.999971361489962	WITHOUT_CLASSIFICATION	2.8638510038022836E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999685594288562	WITHOUT_CLASSIFICATION	3.144057114372053E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999691169692594	WITHOUT_CLASSIFICATION	3.088303074061341E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999745668534178	WITHOUT_CLASSIFICATION	2.5433146582170252E-5	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999701975375135	WITHOUT_CLASSIFICATION	2.9802462486498663E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999709082955925	WITHOUT_CLASSIFICATION	2.90917044074503E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999688168402524	WITHOUT_CLASSIFICATION	3.1183159747686267E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999721319093887	WITHOUT_CLASSIFICATION	2.7868090611294084E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999699212474317	WITHOUT_CLASSIFICATION	3.0078752568425172E-5	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999775282642542	WITHOUT_CLASSIFICATION	2.2471735745757222E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999744329767292	WITHOUT_CLASSIFICATION	2.5567023270862577E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999771812200108	WITHOUT_CLASSIFICATION	2.2818779989209198E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999777277629813	WITHOUT_CLASSIFICATION	2.2272237018612832E-5	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999722953568124	WITHOUT_CLASSIFICATION	2.7704643187571397E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999754930028525	WITHOUT_CLASSIFICATION	2.4506997147611164E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998700396578997	WITHOUT_CLASSIFICATION	1.2996034210029537E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.999973903893849	WITHOUT_CLASSIFICATION	2.609610615098938E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999745549369689	WITHOUT_CLASSIFICATION	2.5445063031142403E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999658614313034	WITHOUT_CLASSIFICATION	3.4138568696697404E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999686637466265	WITHOUT_CLASSIFICATION	3.133625337349943E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999716370977134	WITHOUT_CLASSIFICATION	2.8362902286570455E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999729133978534	WITHOUT_CLASSIFICATION	2.7086602146630837E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999697223549716	WITHOUT_CLASSIFICATION	3.0277645028348664E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999714295051791	WITHOUT_CLASSIFICATION	2.8570494820849452E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999716368386989	WITHOUT_CLASSIFICATION	2.8363161301027798E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.999973656696739	WITHOUT_CLASSIFICATION	2.6343303261026536E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999748681424722	WITHOUT_CLASSIFICATION	2.5131857527804388E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999751493270959	WITHOUT_CLASSIFICATION	2.4850672904165214E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999714000456164	WITHOUT_CLASSIFICATION	2.8599954383613444E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999722059175506	WITHOUT_CLASSIFICATION	2.7794082449381796E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999751935838904	WITHOUT_CLASSIFICATION	2.480641610955919E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999758743078122	WITHOUT_CLASSIFICATION	2.4125692187765927E-5	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999688039243874	WITHOUT_CLASSIFICATION	3.1196075612561186E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999706490297998	WITHOUT_CLASSIFICATION	2.9350970200130282E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999683249906667	WITHOUT_CLASSIFICATION	3.167500933332712E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999713115666344	WITHOUT_CLASSIFICATION	2.8688433365544483E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999633526066634	WITHOUT_CLASSIFICATION	3.664739333659961E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999673842749139	WITHOUT_CLASSIFICATION	3.261572508602991E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.999971520872805	WITHOUT_CLASSIFICATION	2.847912719493061E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999746129987921	WITHOUT_CLASSIFICATION	2.5387001207981854E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999716788630281	WITHOUT_CLASSIFICATION	2.8321136972034682E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999758642680486	WITHOUT_CLASSIFICATION	2.4135731951352947E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999746589090174	WITHOUT_CLASSIFICATION	2.5341090982565337E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999700577486385	WITHOUT_CLASSIFICATION	2.9942251361654648E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999776784182288	WITHOUT_CLASSIFICATION	2.2321581771109753E-5	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999730167875172	WITHOUT_CLASSIFICATION	2.6983212482782253E-5	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999793512553397	WITHOUT_CLASSIFICATION	2.0648744660384695E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999744477557772	WITHOUT_CLASSIFICATION	2.555224422277284E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.999975577457935	WITHOUT_CLASSIFICATION	2.442254206502836E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999756942810873	WITHOUT_CLASSIFICATION	2.4305718912580205E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999735901249109	WITHOUT_CLASSIFICATION	2.640987508896891E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999736895783281	WITHOUT_CLASSIFICATION	2.631042167179171E-5	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999747809900059	WITHOUT_CLASSIFICATION	2.5219009994110283E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999719804981425	WITHOUT_CLASSIFICATION	2.801950185744578E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.999973773989194	WITHOUT_CLASSIFICATION	2.6226010806052968E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999758168425946	WITHOUT_CLASSIFICATION	2.418315740535489E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999699122486854	WITHOUT_CLASSIFICATION	3.0087751314650435E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999718147255945	WITHOUT_CLASSIFICATION	2.8185274405476523E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999755873481039	WITHOUT_CLASSIFICATION	2.44126518960273E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.999973626174664	WITHOUT_CLASSIFICATION	2.6373825335994924E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999766938074951	WITHOUT_CLASSIFICATION	2.3306192504866885E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999737972284279	WITHOUT_CLASSIFICATION	2.6202771572064748E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.999973668866697	WITHOUT_CLASSIFICATION	2.633113330289581E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999707516781817	WITHOUT_CLASSIFICATION	2.9248321818318002E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999726274198437	WITHOUT_CLASSIFICATION	2.7372580156254392E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999748689723869	WITHOUT_CLASSIFICATION	2.513102761310228E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999735043556608	WITHOUT_CLASSIFICATION	2.6495644339162354E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999764691693991	WITHOUT_CLASSIFICATION	2.353083060095348E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999737200696996	WITHOUT_CLASSIFICATION	2.627993030030103E-5	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999728321213809	WITHOUT_CLASSIFICATION	2.7167878619145107E-5	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999762520356837	WITHOUT_CLASSIFICATION	2.37479643161976E-5	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.999971789957346	WITHOUT_CLASSIFICATION	2.821004265390455E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999750980704645	WITHOUT_CLASSIFICATION	2.4901929535509912E-5	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999711840337338	WITHOUT_CLASSIFICATION	2.881596626623364E-5	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999712802538809	WITHOUT_CLASSIFICATION	2.871974611907069E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999725006563221	WITHOUT_CLASSIFICATION	2.7499343677832885E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999730862989729	WITHOUT_CLASSIFICATION	2.691370102715307E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999697909312546	WITHOUT_CLASSIFICATION	3.0209068745376472E-5	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999763675393317	WITHOUT_CLASSIFICATION	2.3632460668249315E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999734946052725	WITHOUT_CLASSIFICATION	2.6505394727456485E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999725375327735	WITHOUT_CLASSIFICATION	2.7462467226618362E-5	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999713577126782	WITHOUT_CLASSIFICATION	2.8642287321795402E-5	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999748659267264	WITHOUT_CLASSIFICATION	2.513407327357412E-5	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999727584005812	WITHOUT_CLASSIFICATION	2.724159941881302E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999739144711096	WITHOUT_CLASSIFICATION	2.6085528890361338E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.999970700909698	WITHOUT_CLASSIFICATION	2.9299090301939017E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.999970638368242	WITHOUT_CLASSIFICATION	2.9361631758107425E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999712530977095	WITHOUT_CLASSIFICATION	2.874690229058375E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999725138923039	WITHOUT_CLASSIFICATION	2.748610769605135E-5	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999721381834907	WITHOUT_CLASSIFICATION	2.7861816509237856E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999749729654696	WITHOUT_CLASSIFICATION	2.5027034530473522E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999724265867004	WITHOUT_CLASSIFICATION	2.7573413299591852E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999781916472249	WITHOUT_CLASSIFICATION	2.180835277517069E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.999972481737268	WITHOUT_CLASSIFICATION	2.7518262731917893E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999730127386184	WITHOUT_CLASSIFICATION	2.6987261381563062E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999742528679699	WITHOUT_CLASSIFICATION	2.5747132030176606E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999698971899204	WITHOUT_CLASSIFICATION	3.0102810079633782E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999732535756308	WITHOUT_CLASSIFICATION	2.6746424369256408E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999692112384279	WITHOUT_CLASSIFICATION	3.078876157207933E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999695733446896	WITHOUT_CLASSIFICATION	3.042665531048574E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999711018936259	WITHOUT_CLASSIFICATION	2.889810637402302E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999744278756382	WITHOUT_CLASSIFICATION	2.5572124361896867E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999681652873765	WITHOUT_CLASSIFICATION	3.1834712623488696E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999714723446345	WITHOUT_CLASSIFICATION	2.852765536543714E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999753995282474	WITHOUT_CLASSIFICATION	2.4600471752586222E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999735861156164	WITHOUT_CLASSIFICATION	2.6413884383575375E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999768085306443	WITHOUT_CLASSIFICATION	2.319146935563302E-5	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999705635175776	WITHOUT_CLASSIFICATION	2.943648242234595E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999712146280697	WITHOUT_CLASSIFICATION	2.8785371930397257E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999699139543767	WITHOUT_CLASSIFICATION	3.0086045623259605E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999757096355089	WITHOUT_CLASSIFICATION	2.4290364491066133E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999722243057039	WITHOUT_CLASSIFICATION	2.7775694296153902E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999748744778695	WITHOUT_CLASSIFICATION	2.5125522130604063E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999709237655611	WITHOUT_CLASSIFICATION	2.907623443882529E-5	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999748944147283	WITHOUT_CLASSIFICATION	2.5105585271697908E-5	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999750749954913	WITHOUT_CLASSIFICATION	2.4925004508579802E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999702803489959	WITHOUT_CLASSIFICATION	2.971965100402498E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999702717946714	WITHOUT_CLASSIFICATION	2.9728205328661853E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.999970379254346	WITHOUT_CLASSIFICATION	2.9620745654038637E-5	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999736828313712	WITHOUT_CLASSIFICATION	2.631716862871985E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.999974056577679	WITHOUT_CLASSIFICATION	2.594342232102586E-5	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999741688537793	WITHOUT_CLASSIFICATION	2.583114622068143E-5	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999714827879818	WITHOUT_CLASSIFICATION	2.851721201813297E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999720449110162	WITHOUT_CLASSIFICATION	2.7955088983863673E-5	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999732314092169	WITHOUT_CLASSIFICATION	2.6768590783153303E-5	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999757870632843	WITHOUT_CLASSIFICATION	2.421293671568222E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999729786458368	WITHOUT_CLASSIFICATION	2.702135416313966E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999732146112603	WITHOUT_CLASSIFICATION	2.678538873956164E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999767536785794	WITHOUT_CLASSIFICATION	2.3246321420560666E-5	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999720808247347	WITHOUT_CLASSIFICATION	2.791917526528441E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999748424918333	WITHOUT_CLASSIFICATION	2.515750816671224E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999705947080959	WITHOUT_CLASSIFICATION	2.940529190413315E-5	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999671364063439	WITHOUT_CLASSIFICATION	3.28635936561249E-5	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999700763501351	WITHOUT_CLASSIFICATION	2.992364986492382E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999683801244826	WITHOUT_CLASSIFICATION	3.161987551732461E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999711497115257	WITHOUT_CLASSIFICATION	2.8850288474400874E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999665562534823	WITHOUT_CLASSIFICATION	3.344374651772396E-5	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999690464329388	WITHOUT_CLASSIFICATION	3.09535670612774E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999696033851941	WITHOUT_CLASSIFICATION	3.039661480584823E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999703910347663	WITHOUT_CLASSIFICATION	2.9608965233751998E-5	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999700806859528	WITHOUT_CLASSIFICATION	2.9919314047166665E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999670936433569	WITHOUT_CLASSIFICATION	3.290635664315047E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999704565732378	WITHOUT_CLASSIFICATION	2.9543426762309897E-5	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999653800644396	WITHOUT_CLASSIFICATION	3.4619935560348276E-5	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999704923165235	WITHOUT_CLASSIFICATION	2.9507683476555548E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999707084583188	WITHOUT_CLASSIFICATION	2.929154168125124E-5	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999711231755827	WITHOUT_CLASSIFICATION	2.887682441734875E-5	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999695876542388	WITHOUT_CLASSIFICATION	3.0412345761143315E-5	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999647246969814	WITHOUT_CLASSIFICATION	3.527530301862893E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999680507682163	WITHOUT_CLASSIFICATION	3.1949231783750994E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999715207732663	WITHOUT_CLASSIFICATION	2.8479226733687018E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.999971632271345	WITHOUT_CLASSIFICATION	2.836772865492961E-5	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999630827157162	WITHOUT_CLASSIFICATION	3.691728428368326E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999630190304746	WITHOUT_CLASSIFICATION	3.698096952551193E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.999965358979922	WITHOUT_CLASSIFICATION	3.4641020077995956E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999393877747025	WITHOUT_CLASSIFICATION	6.061222529747267E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999554287193482	WITHOUT_CLASSIFICATION	4.457128065186943E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999679826058089	WITHOUT_CLASSIFICATION	3.201739419120729E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999616809422436	WITHOUT_CLASSIFICATION	3.8319057756481865E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999641038737432	WITHOUT_CLASSIFICATION	3.589612625671537E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.999972189010355	WITHOUT_CLASSIFICATION	2.7810989645020335E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999647647725819	WITHOUT_CLASSIFICATION	3.523522741811453E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999690836514942	WITHOUT_CLASSIFICATION	3.091634850577553E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999637773335226	WITHOUT_CLASSIFICATION	3.622266647740581E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999653659921957	WITHOUT_CLASSIFICATION	3.463400780442059E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999721999476698	WITHOUT_CLASSIFICATION	2.7800052330172657E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999690356617099	WITHOUT_CLASSIFICATION	3.096433829013335E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999644367126113	WITHOUT_CLASSIFICATION	3.556328738886601E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999676472554794	WITHOUT_CLASSIFICATION	3.2352744520551246E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999745109267135	WITHOUT_CLASSIFICATION	2.5489073286425657E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999708997761724	WITHOUT_CLASSIFICATION	2.910022382752322E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999676352701423	WITHOUT_CLASSIFICATION	3.2364729857760306E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999645022309674	WITHOUT_CLASSIFICATION	3.549776903253764E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999708964719654	WITHOUT_CLASSIFICATION	2.9103528034578064E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.999968755504471	WITHOUT_CLASSIFICATION	3.124449552900105E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999656606695878	WITHOUT_CLASSIFICATION	3.4339330412225315E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999684613051144	WITHOUT_CLASSIFICATION	3.1538694885599096E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999692538568701	WITHOUT_CLASSIFICATION	3.0746143129962126E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999697686790078	WITHOUT_CLASSIFICATION	3.023132099210296E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999641808645745	WITHOUT_CLASSIFICATION	3.581913542544629E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.999961887960208	WITHOUT_CLASSIFICATION	3.811203979201039E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999615508217201	WITHOUT_CLASSIFICATION	3.844917827981617E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.999968760882392	WITHOUT_CLASSIFICATION	3.123911760794133E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999580216521889	WITHOUT_CLASSIFICATION	4.197834781100418E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999621923536747	WITHOUT_CLASSIFICATION	3.780764632533976E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999629025321328	WITHOUT_CLASSIFICATION	3.7097467867138966E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999657129778607	WITHOUT_CLASSIFICATION	3.428702213929459E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999628855444576	WITHOUT_CLASSIFICATION	3.71144555424156E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999698274067556	WITHOUT_CLASSIFICATION	3.0172593244340956E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999645107735279	WITHOUT_CLASSIFICATION	3.5489226472159404E-5	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999701612585014	WITHOUT_CLASSIFICATION	2.9838741498543615E-5	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999657204448132	WITHOUT_CLASSIFICATION	3.427955518666347E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999643094840782	WITHOUT_CLASSIFICATION	3.569051592180124E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.99996133023425	WITHOUT_CLASSIFICATION	3.866976574982934E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999747791220968	WITHOUT_CLASSIFICATION	2.522087790319942E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999733365274971	WITHOUT_CLASSIFICATION	2.6663472502860736E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999655224364479	WITHOUT_CLASSIFICATION	3.4477563552182244E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999663963337361	WITHOUT_CLASSIFICATION	3.360366626396521E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999660009226022	WITHOUT_CLASSIFICATION	3.3999077397813836E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999725264847693	WITHOUT_CLASSIFICATION	2.747351523063282E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999657448823415	WITHOUT_CLASSIFICATION	3.4255117658585304E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.999966388332379	WITHOUT_CLASSIFICATION	3.3611667621045565E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999660620120163	WITHOUT_CLASSIFICATION	3.393798798378857E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999676000412747	WITHOUT_CLASSIFICATION	3.23999587252941E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999698695144874	WITHOUT_CLASSIFICATION	3.013048551260003E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999668804820616	WITHOUT_CLASSIFICATION	3.3119517938389496E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999689285197882	WITHOUT_CLASSIFICATION	3.107148021182672E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999705504318983	WITHOUT_CLASSIFICATION	2.9449568101677058E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999672504507384	WITHOUT_CLASSIFICATION	3.2749549261596317E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999687104653797	WITHOUT_CLASSIFICATION	3.1289534620236554E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999722224349739	WITHOUT_CLASSIFICATION	2.777756502612206E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.999969711212337	WITHOUT_CLASSIFICATION	3.0288787662949304E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999668010699697	WITHOUT_CLASSIFICATION	3.319893003018689E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999685707217574	WITHOUT_CLASSIFICATION	3.142927824267204E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999689394281781	WITHOUT_CLASSIFICATION	3.106057182181756E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999968921395051	WITHOUT_CLASSIFICATION	3.107860494903348E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999663837523826	WITHOUT_CLASSIFICATION	3.361624761740299E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999631821941772	WITHOUT_CLASSIFICATION	3.6817805822880276E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999631717390807	WITHOUT_CLASSIFICATION	3.682826091935708E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.999962319234336	WITHOUT_CLASSIFICATION	3.768076566397296E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999666439370655	WITHOUT_CLASSIFICATION	3.33560629345995E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999678809349729	WITHOUT_CLASSIFICATION	3.21190650270995E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.999966185061801	WITHOUT_CLASSIFICATION	3.3814938198930225E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999703597420742	WITHOUT_CLASSIFICATION	2.9640257925743003E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.999966795168772	WITHOUT_CLASSIFICATION	3.320483122805145E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999684937103162	WITHOUT_CLASSIFICATION	3.150628968374581E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999627655245756	WITHOUT_CLASSIFICATION	3.7234475424405454E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999727829587958	WITHOUT_CLASSIFICATION	2.7217041204238976E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999727953308278	WITHOUT_CLASSIFICATION	2.7204669172140492E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999723234763296	WITHOUT_CLASSIFICATION	2.7676523670472675E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999662083397628	WITHOUT_CLASSIFICATION	3.379166023728051E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999683513014912	WITHOUT_CLASSIFICATION	3.164869850886345E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999658677490818	WITHOUT_CLASSIFICATION	3.4132250918272384E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.999964790160713	WITHOUT_CLASSIFICATION	3.520983928682442E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.999968944583481	WITHOUT_CLASSIFICATION	3.105541651902959E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999666244901585	WITHOUT_CLASSIFICATION	3.337550984148427E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999710918099305	WITHOUT_CLASSIFICATION	2.890819006948136E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999687695018318	WITHOUT_CLASSIFICATION	3.12304981682455E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999671485660973	WITHOUT_CLASSIFICATION	3.285143390273007E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999720981730871	WITHOUT_CLASSIFICATION	2.790182691295476E-5	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999656435158384	WITHOUT_CLASSIFICATION	3.435648416151483E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999675737740051	WITHOUT_CLASSIFICATION	3.2426225994899035E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999713340846977	WITHOUT_CLASSIFICATION	2.8665915302297796E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999906396101136	WITHOUT_CLASSIFICATION	9.360389886479132E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9998269295884685	WITHOUT_CLASSIFICATION	1.7307041153148792E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9998898934119735	WITHOUT_CLASSIFICATION	1.1010658802657752E-4	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9995940377485053	WITHOUT_CLASSIFICATION	4.0596225149470684E-4	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999630499852732	WITHOUT_CLASSIFICATION	3.6950014726790104E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9999034594055797	WITHOUT_CLASSIFICATION	9.654059442035547E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999813519703821	WITHOUT_CLASSIFICATION	1.864802961800008E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999816263963367	WITHOUT_CLASSIFICATION	1.8373603663362294E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999593656412519	WITHOUT_CLASSIFICATION	4.0634358748098405E-5	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9996320083745096	WITHOUT_CLASSIFICATION	3.679916254904676E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999831664089173	WITHOUT_CLASSIFICATION	1.6833591082745703E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999754209419172	WITHOUT_CLASSIFICATION	2.4579058082957124E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999313083580704	WITHOUT_CLASSIFICATION	6.869164192964382E-5	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9997443478089245	WITHOUT_CLASSIFICATION	2.5565219107548257E-4	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.999965162546568	WITHOUT_CLASSIFICATION	3.4837453432092795E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999354136581564	WITHOUT_CLASSIFICATION	6.458634184353561E-5	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9996823928095533	WITHOUT_CLASSIFICATION	3.176071904466992E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999571223896988	WITHOUT_CLASSIFICATION	4.287761030125993E-5	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999912112719929	WITHOUT_CLASSIFICATION	8.788728007149704E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999981365217438	WITHOUT_CLASSIFICATION	1.8634782562091583E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999902270452087	WITHOUT_CLASSIFICATION	9.77295479140883E-6	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999812540172056	WITHOUT_CLASSIFICATION	1.8745982794330212E-5	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999994302520262	WITHOUT_CLASSIFICATION	5.697479737303574E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999996247364963	WITHOUT_CLASSIFICATION	3.7526350363309767E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999996247364963	WITHOUT_CLASSIFICATION	3.7526350363309767E-7	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999851886529725	WITHOUT_CLASSIFICATION	1.4811347027409878E-5	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9999915331306783	WITHOUT_CLASSIFICATION	8.466869321578425E-6	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999526287846148	WITHOUT_CLASSIFICATION	4.737121538527206E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.999992172100975	WITHOUT_CLASSIFICATION	7.827899024945126E-6	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999797040028353	WITHOUT_CLASSIFICATION	2.0295997164686443E-5	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999971147769026	WITHOUT_CLASSIFICATION	2.88522309733308E-6	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9999985783896085	WITHOUT_CLASSIFICATION	1.4216103915271592E-6	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999979623256158	WITHOUT_CLASSIFICATION	2.0376743843211236E-6	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9999859078405671	WITHOUT_CLASSIFICATION	1.409215943296715E-5	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999970096806047	WITHOUT_CLASSIFICATION	2.990319395267212E-6	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999942855902131	WITHOUT_CLASSIFICATION	5.714409786854046E-6	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9999995065860338	WITHOUT_CLASSIFICATION	4.934139662060057E-7	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999993505523119	WITHOUT_CLASSIFICATION	6.494476881024389E-7	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999418130722639	WITHOUT_CLASSIFICATION	5.8186927736045066E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999164554227333	WITHOUT_CLASSIFICATION	8.354457726664243E-5	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999611636396732	WITHOUT_CLASSIFICATION	3.8836360326803245E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999940024427721	WITHOUT_CLASSIFICATION	5.997557227835477E-6	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9999507562706851	WITHOUT_CLASSIFICATION	4.924372931491902E-5	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9999955861197872	WITHOUT_CLASSIFICATION	4.413880212739641E-6	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999859048626596	WITHOUT_CLASSIFICATION	1.4095137340394292E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999994204467624	WITHOUT_CLASSIFICATION	5.795532376135047E-7	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999723563207753	WITHOUT_CLASSIFICATION	2.7643679224746952E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9999521890710715	WITHOUT_CLASSIFICATION	4.781092892853916E-5	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999751245318785	WITHOUT_CLASSIFICATION	2.4875468121463185E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9999521890710715	WITHOUT_CLASSIFICATION	4.781092892853916E-5	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999825150642896	WITHOUT_CLASSIFICATION	1.7484935710413406E-5	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999834488434026	WITHOUT_CLASSIFICATION	1.6551156597348574E-5	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9998982428904224	WITHOUT_CLASSIFICATION	1.0175710957765841E-4	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999372352199555	WITHOUT_CLASSIFICATION	6.276478004453753E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999967718702172	WITHOUT_CLASSIFICATION	3.228129782755681E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999715653077298	WITHOUT_CLASSIFICATION	2.8434692270252505E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999715653077298	WITHOUT_CLASSIFICATION	2.8434692270252505E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999715653077298	WITHOUT_CLASSIFICATION	2.8434692270252505E-5	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9997300724444901	WITHOUT_CLASSIFICATION	2.6992755550986846E-4	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9998400812777029	WITHOUT_CLASSIFICATION	1.5991872229722282E-4	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999987760350392	WITHOUT_CLASSIFICATION	1.2239649608608303E-6	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9997992140241451	WITHOUT_CLASSIFICATION	2.0078597585486353E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9997992140241451	WITHOUT_CLASSIFICATION	2.0078597585486353E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9997992140241451	WITHOUT_CLASSIFICATION	2.0078597585486353E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9997992140241451	WITHOUT_CLASSIFICATION	2.0078597585486353E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9997992140241451	WITHOUT_CLASSIFICATION	2.0078597585486353E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9997992140241451	WITHOUT_CLASSIFICATION	2.0078597585486353E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998684167454832	WITHOUT_CLASSIFICATION	1.315832545167806E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998684167454832	WITHOUT_CLASSIFICATION	1.315832545167806E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998684167454832	WITHOUT_CLASSIFICATION	1.315832545167806E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998684167454832	WITHOUT_CLASSIFICATION	1.315832545167806E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998684167454832	WITHOUT_CLASSIFICATION	1.315832545167806E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999811225117462	WITHOUT_CLASSIFICATION	1.8877488253812576E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999811225117462	WITHOUT_CLASSIFICATION	1.8877488253812576E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999811225117462	WITHOUT_CLASSIFICATION	1.8877488253812576E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999811225117462	WITHOUT_CLASSIFICATION	1.8877488253812576E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999811225117462	WITHOUT_CLASSIFICATION	1.8877488253812576E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998370421842507	WITHOUT_CLASSIFICATION	1.629578157492128E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998370421842507	WITHOUT_CLASSIFICATION	1.629578157492128E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998370421842507	WITHOUT_CLASSIFICATION	1.629578157492128E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998370421842507	WITHOUT_CLASSIFICATION	1.629578157492128E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998370421842507	WITHOUT_CLASSIFICATION	1.629578157492128E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998370421842507	WITHOUT_CLASSIFICATION	1.629578157492128E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999834916964184	WITHOUT_CLASSIFICATION	1.6508303581586428E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999834916964184	WITHOUT_CLASSIFICATION	1.6508303581586428E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999834916964184	WITHOUT_CLASSIFICATION	1.6508303581586428E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999834916964184	WITHOUT_CLASSIFICATION	1.6508303581586428E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999834916964184	WITHOUT_CLASSIFICATION	1.6508303581586428E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998713583513252	WITHOUT_CLASSIFICATION	1.2864164867472155E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998713583513252	WITHOUT_CLASSIFICATION	1.2864164867472155E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998713583513252	WITHOUT_CLASSIFICATION	1.2864164867472155E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998713583513252	WITHOUT_CLASSIFICATION	1.2864164867472155E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998713583513252	WITHOUT_CLASSIFICATION	1.2864164867472155E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998700396578997	WITHOUT_CLASSIFICATION	1.2996034210029537E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998700396578997	WITHOUT_CLASSIFICATION	1.2996034210029537E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998700396578997	WITHOUT_CLASSIFICATION	1.2996034210029537E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998700396578997	WITHOUT_CLASSIFICATION	1.2996034210029537E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998700396578997	WITHOUT_CLASSIFICATION	1.2996034210029537E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.999997041255118	WITHOUT_CLASSIFICATION	2.95874488198616E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999896166877892	WITHOUT_CLASSIFICATION	1.0383312210805774E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999609993528635	WITHOUT_CLASSIFICATION	3.90006471365074E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999861529674533	WITHOUT_CLASSIFICATION	1.3847032546841187E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999967381832884	WITHOUT_CLASSIFICATION	3.261816711686323E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999760913188793	WITHOUT_CLASSIFICATION	2.3908681120673736E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999742022886987	WITHOUT_CLASSIFICATION	2.579771130132182E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999761107392819	WITHOUT_CLASSIFICATION	2.3889260718024404E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999704752735943	WITHOUT_CLASSIFICATION	2.952472640573111E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999763116605188	WITHOUT_CLASSIFICATION	2.3688339481256997E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999701088713507	WITHOUT_CLASSIFICATION	2.9891128649139185E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999706856589518	WITHOUT_CLASSIFICATION	2.931434104833712E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999804570712905	WITHOUT_CLASSIFICATION	1.95429287094918E-5	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999752399271992	WITHOUT_CLASSIFICATION	2.4760072800870713E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999746117545855	WITHOUT_CLASSIFICATION	2.5388245414524082E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999715989996555	WITHOUT_CLASSIFICATION	2.8401000344446813E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999762297122902	WITHOUT_CLASSIFICATION	2.377028770984756E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999739892974229	WITHOUT_CLASSIFICATION	2.6010702577091625E-5	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999711115492556	WITHOUT_CLASSIFICATION	2.8888450744482295E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999715537031284	WITHOUT_CLASSIFICATION	2.8446296871540417E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999727924280349	WITHOUT_CLASSIFICATION	2.7207571965113302E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.99997065737169	WITHOUT_CLASSIFICATION	2.934262831006535E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.99997076375459	WITHOUT_CLASSIFICATION	2.923624541001805E-5	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999713375802881	WITHOUT_CLASSIFICATION	2.8662419711802698E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999722672281847	WITHOUT_CLASSIFICATION	2.773277181537361E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999734385735541	WITHOUT_CLASSIFICATION	2.656142644576475E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999731416963055	WITHOUT_CLASSIFICATION	2.6858303694481387E-5	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999751053302828	WITHOUT_CLASSIFICATION	2.4894669717132638E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999733433715376	WITHOUT_CLASSIFICATION	2.6656628462270638E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999719817278342	WITHOUT_CLASSIFICATION	2.801827216582132E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999702530519587	WITHOUT_CLASSIFICATION	2.9746948041303044E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999652207430191	WITHOUT_CLASSIFICATION	3.477925698092685E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999698948029816	WITHOUT_CLASSIFICATION	3.0105197018377064E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999700039505227	WITHOUT_CLASSIFICATION	2.9996049477196048E-5	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999707249592583	WITHOUT_CLASSIFICATION	2.9275040741578117E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999701322588828	WITHOUT_CLASSIFICATION	2.9867741117257465E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.999967504211272	WITHOUT_CLASSIFICATION	3.249578872807979E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999677351417546	WITHOUT_CLASSIFICATION	3.2264858245378196E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999713282850625	WITHOUT_CLASSIFICATION	2.8671714937527678E-5	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999712101902413	WITHOUT_CLASSIFICATION	2.878980975876759E-5	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999699179160487	WITHOUT_CLASSIFICATION	3.0082083951200942E-5	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999694923485956	WITHOUT_CLASSIFICATION	3.0507651404402828E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999701595084619	WITHOUT_CLASSIFICATION	2.984049153812811E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.999974596558003	WITHOUT_CLASSIFICATION	2.5403441996988554E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999732171495512	WITHOUT_CLASSIFICATION	2.6782850448793167E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999762140633688	WITHOUT_CLASSIFICATION	2.3785936631315428E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999740911997518	WITHOUT_CLASSIFICATION	2.590880024826855E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999763132444756	WITHOUT_CLASSIFICATION	2.3686755524546388E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999742839600652	WITHOUT_CLASSIFICATION	2.5716039934861583E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999745549369689	WITHOUT_CLASSIFICATION	2.5445063031142403E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999658614313034	WITHOUT_CLASSIFICATION	3.4138568696697404E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999686637466265	WITHOUT_CLASSIFICATION	3.133625337349943E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999714295051791	WITHOUT_CLASSIFICATION	2.8570494820849452E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999758743078122	WITHOUT_CLASSIFICATION	2.4125692187765927E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999746589090174	WITHOUT_CLASSIFICATION	2.5341090982565337E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999713369364768	WITHOUT_CLASSIFICATION	2.8663063523294423E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999700577486385	WITHOUT_CLASSIFICATION	2.9942251361654648E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999755873481039	WITHOUT_CLASSIFICATION	2.44126518960273E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999766938074951	WITHOUT_CLASSIFICATION	2.3306192504866885E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999748332450489	WITHOUT_CLASSIFICATION	2.5166754951100406E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999737972284279	WITHOUT_CLASSIFICATION	2.6202771572064748E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.999973668866697	WITHOUT_CLASSIFICATION	2.633113330289581E-5	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.999970804158434	WITHOUT_CLASSIFICATION	2.919584156603717E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999700312458301	WITHOUT_CLASSIFICATION	2.996875416991618E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999756629684252	WITHOUT_CLASSIFICATION	2.4337031574843483E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999738726335873	WITHOUT_CLASSIFICATION	2.6127366412800802E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999726089318515	WITHOUT_CLASSIFICATION	2.7391068148559545E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.999974829252065	WITHOUT_CLASSIFICATION	2.517074793499733E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999720502749041	WITHOUT_CLASSIFICATION	2.7949725095899996E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999738769952412	WITHOUT_CLASSIFICATION	2.612300475871583E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999726681263216	WITHOUT_CLASSIFICATION	2.7331873678520294E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999738278902264	WITHOUT_CLASSIFICATION	2.6172109773658916E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999755353059453	WITHOUT_CLASSIFICATION	2.4464694054722347E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999723624948975	WITHOUT_CLASSIFICATION	2.7637505102461698E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999735946144259	WITHOUT_CLASSIFICATION	2.6405385574183986E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.999971655080362	WITHOUT_CLASSIFICATION	2.834491963796413E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999745438486414	WITHOUT_CLASSIFICATION	2.545615135866434E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999731125503409	WITHOUT_CLASSIFICATION	2.688744965910783E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999688864431387	WITHOUT_CLASSIFICATION	3.1113556861334414E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999703080412058	WITHOUT_CLASSIFICATION	2.9691958794203436E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999687895771809	WITHOUT_CLASSIFICATION	3.121042281904113E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999727402672133	WITHOUT_CLASSIFICATION	2.7259732786682436E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999714257438397	WITHOUT_CLASSIFICATION	2.857425616034885E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999701291984792	WITHOUT_CLASSIFICATION	2.987080152072097E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999727909034609	WITHOUT_CLASSIFICATION	2.7209096539083524E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999745853344623	WITHOUT_CLASSIFICATION	2.5414665537823573E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.999971426829409	WITHOUT_CLASSIFICATION	2.8573170590952005E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999703425205066	WITHOUT_CLASSIFICATION	2.965747949343633E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999733961828621	WITHOUT_CLASSIFICATION	2.6603817137859065E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999770278198602	WITHOUT_CLASSIFICATION	2.2972180139742776E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999754589310644	WITHOUT_CLASSIFICATION	2.4541068935628416E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999727723455776	WITHOUT_CLASSIFICATION	2.7227654422512056E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999721688094093	WITHOUT_CLASSIFICATION	2.7831190590621988E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999727539845236	WITHOUT_CLASSIFICATION	2.7246015476450257E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999777691795756	WITHOUT_CLASSIFICATION	2.223082042445519E-5	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999760982298201	WITHOUT_CLASSIFICATION	2.39017701798092E-5	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999745894618941	WITHOUT_CLASSIFICATION	2.541053810585421E-5	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999740365406793	WITHOUT_CLASSIFICATION	2.59634593207744E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999730862989729	WITHOUT_CLASSIFICATION	2.691370102715307E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999709743028554	WITHOUT_CLASSIFICATION	2.902569714462964E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999697909312546	WITHOUT_CLASSIFICATION	3.0209068745376472E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.999970638368242	WITHOUT_CLASSIFICATION	2.9361631758107425E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999725138923039	WITHOUT_CLASSIFICATION	2.748610769605135E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999742528679699	WITHOUT_CLASSIFICATION	2.5747132030176606E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999692112384279	WITHOUT_CLASSIFICATION	3.078876157207933E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999744278756382	WITHOUT_CLASSIFICATION	2.5572124361896867E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999768085306443	WITHOUT_CLASSIFICATION	2.319146935563302E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999722243057039	WITHOUT_CLASSIFICATION	2.7775694296153902E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999729763808609	WITHOUT_CLASSIFICATION	2.702361913911319E-5	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999791652234413	WITHOUT_CLASSIFICATION	2.0834776558736448E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.999974217507548	WITHOUT_CLASSIFICATION	2.578249245202104E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.999975357427389	WITHOUT_CLASSIFICATION	2.464257261105255E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999754358166144	WITHOUT_CLASSIFICATION	2.4564183385576863E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999745654273636	WITHOUT_CLASSIFICATION	2.5434572636417028E-5	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.999974780069881	WITHOUT_CLASSIFICATION	2.521993011886801E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999756008165511	WITHOUT_CLASSIFICATION	2.4399183448902202E-5	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999696434318106	WITHOUT_CLASSIFICATION	3.0356568189448625E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999713550318302	WITHOUT_CLASSIFICATION	2.8644968169846694E-5	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.999971562905781	WITHOUT_CLASSIFICATION	2.843709421897641E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.999974749513088	WITHOUT_CLASSIFICATION	2.5250486912030403E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999706535412243	WITHOUT_CLASSIFICATION	2.9346458775742432E-5	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999739078157137	WITHOUT_CLASSIFICATION	2.6092184286318167E-5	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999754643734882	WITHOUT_CLASSIFICATION	2.4535626511917484E-5	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999766271217861	WITHOUT_CLASSIFICATION	2.3372878213833136E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999739703703605	WITHOUT_CLASSIFICATION	2.6029629639445784E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999727570440342	WITHOUT_CLASSIFICATION	2.724295596586893E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999704851101029	WITHOUT_CLASSIFICATION	2.9514889897186162E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999743675949353	WITHOUT_CLASSIFICATION	2.563240506462808E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.999975130787206	WITHOUT_CLASSIFICATION	2.4869212794053125E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.999969530481282	WITHOUT_CLASSIFICATION	3.046951871800043E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999697559471441	WITHOUT_CLASSIFICATION	3.024405285595253E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999733128732899	WITHOUT_CLASSIFICATION	2.6687126710108206E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999723543788197	WITHOUT_CLASSIFICATION	2.764562118032231E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999711086542757	WITHOUT_CLASSIFICATION	2.8891345724153995E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999702623410435	WITHOUT_CLASSIFICATION	2.973765895645697E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999724410290279	WITHOUT_CLASSIFICATION	2.755897097199649E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999706110313554	WITHOUT_CLASSIFICATION	2.938896864455708E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999711098210037	WITHOUT_CLASSIFICATION	2.8890178996320488E-5	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999732161827802	WITHOUT_CLASSIFICATION	2.67838172197494E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999728742316297	WITHOUT_CLASSIFICATION	2.7125768370217406E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999700352479951	WITHOUT_CLASSIFICATION	2.99647520048945E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999650659328378	WITHOUT_CLASSIFICATION	3.4934067162193756E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999710554043179	WITHOUT_CLASSIFICATION	2.8944595682094816E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999741681646954	WITHOUT_CLASSIFICATION	2.583183530454463E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999696465768819	WITHOUT_CLASSIFICATION	3.0353423118090965E-5	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999687562097499	WITHOUT_CLASSIFICATION	3.124379025014041E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999740881717527	WITHOUT_CLASSIFICATION	2.5911828247373233E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999744913358526	WITHOUT_CLASSIFICATION	2.5508664147406677E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999705947080959	WITHOUT_CLASSIFICATION	2.940529190413315E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999695623542425	WITHOUT_CLASSIFICATION	3.0437645757467586E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999711497115257	WITHOUT_CLASSIFICATION	2.8850288474400874E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999703910347663	WITHOUT_CLASSIFICATION	2.9608965233751998E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999704565732378	WITHOUT_CLASSIFICATION	2.9543426762309897E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999680507682163	WITHOUT_CLASSIFICATION	3.1949231783750994E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999715207732663	WITHOUT_CLASSIFICATION	2.8479226733687018E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999554287193482	WITHOUT_CLASSIFICATION	4.457128065186943E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999679826058089	WITHOUT_CLASSIFICATION	3.201739419120729E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999649808719588	WITHOUT_CLASSIFICATION	3.501912804121875E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999742855710771	WITHOUT_CLASSIFICATION	2.5714428922800775E-5	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.999971142956302	WITHOUT_CLASSIFICATION	2.8857043698150643E-5	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999743432307019	WITHOUT_CLASSIFICATION	2.565676929810571E-5	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999717067535424	WITHOUT_CLASSIFICATION	2.8293246457626644E-5	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.999970092619694	WITHOUT_CLASSIFICATION	2.9907380305972424E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999669249429003	WITHOUT_CLASSIFICATION	3.307505709974735E-5	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999681099266919	WITHOUT_CLASSIFICATION	3.18900733080507E-5	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999703893352383	WITHOUT_CLASSIFICATION	2.9610664761774672E-5	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999624325234558	WITHOUT_CLASSIFICATION	3.7567476544096706E-5	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999679534648189	WITHOUT_CLASSIFICATION	3.2046535180979324E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999691629963103	WITHOUT_CLASSIFICATION	3.08370036897155E-5	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999658696138949	WITHOUT_CLASSIFICATION	3.413038610500877E-5	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999650795576805	WITHOUT_CLASSIFICATION	3.492044231950322E-5	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999693187675509	WITHOUT_CLASSIFICATION	3.0681232449053366E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999707204055227	WITHOUT_CLASSIFICATION	2.9279594477299542E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999675253377655	WITHOUT_CLASSIFICATION	3.247466223459174E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999695164445287	WITHOUT_CLASSIFICATION	3.0483555471348083E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999727484032621	WITHOUT_CLASSIFICATION	2.7251596737902728E-5	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999692682906517	WITHOUT_CLASSIFICATION	3.073170934828605E-5	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999654632336835	WITHOUT_CLASSIFICATION	3.453676631656292E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999632754015886	WITHOUT_CLASSIFICATION	3.672459841149096E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999669633670571	WITHOUT_CLASSIFICATION	3.303663294280507E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999665590317894	WITHOUT_CLASSIFICATION	3.3440968210469154E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999637958805625	WITHOUT_CLASSIFICATION	3.62041194375434E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999546976329738	WITHOUT_CLASSIFICATION	4.530236702620415E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999647859633211	WITHOUT_CLASSIFICATION	3.521403667893219E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999684234575974	WITHOUT_CLASSIFICATION	3.157654240251202E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999616581520812	WITHOUT_CLASSIFICATION	3.8341847918797266E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999718254580883	WITHOUT_CLASSIFICATION	2.8174541911642172E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999648070289525	WITHOUT_CLASSIFICATION	3.5192971047554856E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999654744043238	WITHOUT_CLASSIFICATION	3.4525595676109965E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999669395806017	WITHOUT_CLASSIFICATION	3.306041939840513E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999670751145449	WITHOUT_CLASSIFICATION	3.292488545514284E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999669529354175	WITHOUT_CLASSIFICATION	3.30470645825132E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999656778011367	WITHOUT_CLASSIFICATION	3.432219886338495E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999664001619686	WITHOUT_CLASSIFICATION	3.3599838031438916E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999665567986052	WITHOUT_CLASSIFICATION	3.3443201394817555E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999698193302885	WITHOUT_CLASSIFICATION	3.018066971158264E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999645022309674	WITHOUT_CLASSIFICATION	3.549776903253764E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999692538568701	WITHOUT_CLASSIFICATION	3.0746143129962126E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999697686790078	WITHOUT_CLASSIFICATION	3.023132099210296E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999644063403789	WITHOUT_CLASSIFICATION	3.5593659621087836E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999657129778607	WITHOUT_CLASSIFICATION	3.428702213929459E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999698274067556	WITHOUT_CLASSIFICATION	3.0172593244340956E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.99996133023425	WITHOUT_CLASSIFICATION	3.866976574982934E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999747791220968	WITHOUT_CLASSIFICATION	2.522087790319942E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999672504507384	WITHOUT_CLASSIFICATION	3.2749549261596317E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999687104653797	WITHOUT_CLASSIFICATION	3.1289534620236554E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999698330494545	WITHOUT_CLASSIFICATION	3.0166950545509856E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999687175421228	WITHOUT_CLASSIFICATION	3.128245787714333E-5	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999680368051059	WITHOUT_CLASSIFICATION	3.1963194894078054E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999678724624307	WITHOUT_CLASSIFICATION	3.212753756933948E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999684213943482	WITHOUT_CLASSIFICATION	3.157860565191879E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999698175696704	WITHOUT_CLASSIFICATION	3.0182430329609725E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999681801430469	WITHOUT_CLASSIFICATION	3.181985695308931E-5	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999669653708385	WITHOUT_CLASSIFICATION	3.3034629161386986E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999643730648645	WITHOUT_CLASSIFICATION	3.562693513541633E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999651989485784	WITHOUT_CLASSIFICATION	3.48010514215764E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999676084054054	WITHOUT_CLASSIFICATION	3.23915945945562E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999648037769998	WITHOUT_CLASSIFICATION	3.519622300018961E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.999965059245492	WITHOUT_CLASSIFICATION	3.494075450800759E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999658869974779	WITHOUT_CLASSIFICATION	3.411300252200599E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999677841353892	WITHOUT_CLASSIFICATION	3.221586461073255E-5	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999655526014697	WITHOUT_CLASSIFICATION	3.4447398530224464E-5	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999662087257362	WITHOUT_CLASSIFICATION	3.37912742638891E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999696021396429	WITHOUT_CLASSIFICATION	3.0397860357077167E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999641360568873	WITHOUT_CLASSIFICATION	3.586394311269129E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999646121504899	WITHOUT_CLASSIFICATION	3.5387849509970254E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999652866665595	WITHOUT_CLASSIFICATION	3.4713333440474394E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999681527214638	WITHOUT_CLASSIFICATION	3.184727853613191E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999616701122266	WITHOUT_CLASSIFICATION	3.832988777330423E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999586014948723	WITHOUT_CLASSIFICATION	4.139850512763757E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999587397279708	WITHOUT_CLASSIFICATION	4.126027202922557E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999668761337417	WITHOUT_CLASSIFICATION	3.3123866258337666E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999642768253704	WITHOUT_CLASSIFICATION	3.572317462958755E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999658264942894	WITHOUT_CLASSIFICATION	3.417350571053628E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999626911455196	WITHOUT_CLASSIFICATION	3.7308854480369215E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999645729945733	WITHOUT_CLASSIFICATION	3.542700542676423E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999605032592593	WITHOUT_CLASSIFICATION	3.949674074074343E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999729962876912	WITHOUT_CLASSIFICATION	2.7003712308871364E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999668301634406	WITHOUT_CLASSIFICATION	3.3169836559450456E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999710174490369	WITHOUT_CLASSIFICATION	2.8982550963049233E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999686509488406	WITHOUT_CLASSIFICATION	3.134905115939188E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.999968079710682	WITHOUT_CLASSIFICATION	3.192028931807702E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999692218789249	WITHOUT_CLASSIFICATION	3.077812107517513E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999670231816489	WITHOUT_CLASSIFICATION	3.297681835113308E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999683636942653	WITHOUT_CLASSIFICATION	3.1636305734629054E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999663913683243	WITHOUT_CLASSIFICATION	3.3608631675620984E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999689394281781	WITHOUT_CLASSIFICATION	3.106057182181756E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999968921395051	WITHOUT_CLASSIFICATION	3.107860494903348E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999727829587958	WITHOUT_CLASSIFICATION	2.7217041204238976E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999666526913062	WITHOUT_CLASSIFICATION	3.334730869381791E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999723234763296	WITHOUT_CLASSIFICATION	2.7676523670472675E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999683513014912	WITHOUT_CLASSIFICATION	3.164869850886345E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.999964790160713	WITHOUT_CLASSIFICATION	3.520983928682442E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999675737740051	WITHOUT_CLASSIFICATION	3.2426225994899035E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999713340846977	WITHOUT_CLASSIFICATION	2.8665915302297796E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999709428631871	WITHOUT_CLASSIFICATION	2.9057136812800936E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999714549017414	WITHOUT_CLASSIFICATION	2.854509825855508E-5	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999690762181527	WITHOUT_CLASSIFICATION	3.0923781847333066E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999702168124425	WITHOUT_CLASSIFICATION	2.9783187557492045E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999649238571321	WITHOUT_CLASSIFICATION	3.507614286783324E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999652078573168	WITHOUT_CLASSIFICATION	3.4792142683255254E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999638232373071	WITHOUT_CLASSIFICATION	3.617676269280089E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.999967472278362	WITHOUT_CLASSIFICATION	3.25277216379143E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999680721411838	WITHOUT_CLASSIFICATION	3.192785881627193E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999702599289514	WITHOUT_CLASSIFICATION	2.9740071048504624E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999629986013533	WITHOUT_CLASSIFICATION	3.700139864678169E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999681748357122	WITHOUT_CLASSIFICATION	3.182516428789816E-5	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999749298143448	WITHOUT_CLASSIFICATION	2.5070185655216748E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999698768776822	WITHOUT_CLASSIFICATION	3.012312231779792E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999670803034362	WITHOUT_CLASSIFICATION	3.291969656381647E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999712636734785	WITHOUT_CLASSIFICATION	2.8736326521558947E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999688909462339	WITHOUT_CLASSIFICATION	3.110905376615779E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999655985618602	WITHOUT_CLASSIFICATION	3.440143813985032E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999688421995686	WITHOUT_CLASSIFICATION	3.115780043139064E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.999963183572491	WITHOUT_CLASSIFICATION	3.681642750893226E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999676628779549	WITHOUT_CLASSIFICATION	3.2337122045111944E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999702116485635	WITHOUT_CLASSIFICATION	2.9788351436467062E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999674399077983	WITHOUT_CLASSIFICATION	3.2560092201650774E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999664955858748	WITHOUT_CLASSIFICATION	3.350441412522264E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999663068548926	WITHOUT_CLASSIFICATION	3.369314510738294E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999724353527627	WITHOUT_CLASSIFICATION	2.7564647237197803E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999702348426776	WITHOUT_CLASSIFICATION	2.976515732240614E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999690095337282	WITHOUT_CLASSIFICATION	3.0990466271795594E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999685022199635	WITHOUT_CLASSIFICATION	3.149778003653787E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999675866880761	WITHOUT_CLASSIFICATION	3.241331192393774E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999748832170545	WITHOUT_CLASSIFICATION	2.511678294538833E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999706632005464	WITHOUT_CLASSIFICATION	2.9336799453556427E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999690702171508	WITHOUT_CLASSIFICATION	3.0929782849260895E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999725311891812	WITHOUT_CLASSIFICATION	2.7468810818836726E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999689170142604	WITHOUT_CLASSIFICATION	3.108298573952729E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999723915134205	WITHOUT_CLASSIFICATION	2.7608486579479315E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999709440845295	WITHOUT_CLASSIFICATION	2.905591547053841E-5	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999689458348164	WITHOUT_CLASSIFICATION	3.105416518363962E-5	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999662968588698	WITHOUT_CLASSIFICATION	3.3703141130146895E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999813519703821	WITHOUT_CLASSIFICATION	1.864802961800008E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999816263963367	WITHOUT_CLASSIFICATION	1.8373603663362294E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999313083580704	WITHOUT_CLASSIFICATION	6.869164192964382E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.999965162546568	WITHOUT_CLASSIFICATION	3.4837453432092795E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999354136581564	WITHOUT_CLASSIFICATION	6.458634184353561E-5	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9996823928095533	WITHOUT_CLASSIFICATION	3.176071904466992E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999571223896988	WITHOUT_CLASSIFICATION	4.287761030125993E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.99992664306494	WITHOUT_CLASSIFICATION	7.335693506007334E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999669198397491	WITHOUT_CLASSIFICATION	3.308016025089467E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999667115810433	WITHOUT_CLASSIFICATION	3.32884189566707E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999726394980475	WITHOUT_CLASSIFICATION	2.736050195250952E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999693490825547	WITHOUT_CLASSIFICATION	3.065091744517147E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999664066687562	WITHOUT_CLASSIFICATION	3.359333124372509E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999675389791263	WITHOUT_CLASSIFICATION	3.246102087366694E-5	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999703774417517	WITHOUT_CLASSIFICATION	2.962255824831639E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999678382538029	WITHOUT_CLASSIFICATION	3.216174619710644E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999672702617247	WITHOUT_CLASSIFICATION	3.2729738275391E-5	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999665052070958	WITHOUT_CLASSIFICATION	3.349479290410177E-5	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999660173555377	WITHOUT_CLASSIFICATION	3.398264446241639E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999661453252688	WITHOUT_CLASSIFICATION	3.385467473112413E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.999965590106228	WITHOUT_CLASSIFICATION	3.44098937719658E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999630243248141	WITHOUT_CLASSIFICATION	3.6975675185827425E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999689237964219	WITHOUT_CLASSIFICATION	3.1076203578049484E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999613362516849	WITHOUT_CLASSIFICATION	3.8663748314993134E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999650808357485	WITHOUT_CLASSIFICATION	3.491916425153664E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999701045788232	WITHOUT_CLASSIFICATION	2.9895421176854478E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999699845393322	WITHOUT_CLASSIFICATION	3.001546066780441E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999660882527204	WITHOUT_CLASSIFICATION	3.391174727974708E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999818676751417	WITHOUT_CLASSIFICATION	1.8132324858316322E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999779453277085	WITHOUT_CLASSIFICATION	2.2054672291539034E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999812608594371	WITHOUT_CLASSIFICATION	1.873914056301344E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999929582990563	WITHOUT_CLASSIFICATION	7.041700943700053E-6	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.999995942144259	WITHOUT_CLASSIFICATION	4.057855741005016E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9999552866719501	WITHOUT_CLASSIFICATION	4.47133280499652E-5	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999623125519935	WITHOUT_CLASSIFICATION	3.76874480064909E-5	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999926417273158	WITHOUT_CLASSIFICATION	7.3582726841954375E-6	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9996927093703213	WITHOUT_CLASSIFICATION	3.072906296787467E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999981365217438	WITHOUT_CLASSIFICATION	1.8634782562091583E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999902270452087	WITHOUT_CLASSIFICATION	9.77295479140883E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999996247364963	WITHOUT_CLASSIFICATION	3.7526350363309767E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999996247364963	WITHOUT_CLASSIFICATION	3.7526350363309767E-7	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9999151917321403	WITHOUT_CLASSIFICATION	8.480826785965987E-5	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999789788971803	WITHOUT_CLASSIFICATION	2.1021102819706123E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999879752487083	WITHOUT_CLASSIFICATION	1.202475129172192E-5	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999779664796283	WITHOUT_CLASSIFICATION	2.2033520371683224E-5	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999998548901494	WITHOUT_CLASSIFICATION	1.4510985056553734E-7	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999816739023445	WITHOUT_CLASSIFICATION	1.832609765541766E-5	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999952470421012	WITHOUT_CLASSIFICATION	4.752957898781573E-6	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999949990016224	WITHOUT_CLASSIFICATION	5.0009983777011514E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999992127568934	WITHOUT_CLASSIFICATION	7.872431066427326E-7	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.999998789598471	WITHOUT_CLASSIFICATION	1.2104015288970135E-6	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999989026844193	WITHOUT_CLASSIFICATION	1.0973155807579537E-6	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999982311731088	WITHOUT_CLASSIFICATION	1.7688268911938297E-6	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999929583234244	WITHOUT_CLASSIFICATION	7.041676575587525E-6	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999821061483719	WITHOUT_CLASSIFICATION	1.7893851628084096E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999903714252566	WITHOUT_CLASSIFICATION	9.628574743264877E-6	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999903714252566	WITHOUT_CLASSIFICATION	9.628574743264877E-6	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999927499911679	WITHOUT_CLASSIFICATION	7.250008832137074E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.999997610006904	WITHOUT_CLASSIFICATION	2.3899930959908126E-6	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999982459424135	WITHOUT_CLASSIFICATION	1.7540575864581052E-6	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.999994055040241	WITHOUT_CLASSIFICATION	5.944959759017875E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999957264749795	WITHOUT_CLASSIFICATION	4.27352502053305E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999971324441392	WITHOUT_CLASSIFICATION	2.867555860887144E-6	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999977362445949	WITHOUT_CLASSIFICATION	2.263755405102434E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999971324441392	WITHOUT_CLASSIFICATION	2.867555860887144E-6	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999972614464623	WITHOUT_CLASSIFICATION	2.738553537666917E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999666254325761	WITHOUT_CLASSIFICATION	3.337456742400055E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.999973305221028	WITHOUT_CLASSIFICATION	2.6694778971990704E-5	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9998769886122162	WITHOUT_CLASSIFICATION	1.230113877837313E-4	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999809893095785	WITHOUT_CLASSIFICATION	1.9010690421525015E-5	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999887380988495	WITHOUT_CLASSIFICATION	1.1261901150615344E-5	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999997322327034	WITHOUT_CLASSIFICATION	2.6776729655569735E-7	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999986105371416	WITHOUT_CLASSIFICATION	1.3894628584246379E-6	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999990434076019	WITHOUT_CLASSIFICATION	9.565923980351246E-7	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9999587421812518	WITHOUT_CLASSIFICATION	4.125781874819993E-5	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999982801158084	WITHOUT_CLASSIFICATION	1.719884191723327E-6	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999349349368558	WITHOUT_CLASSIFICATION	6.50650631442076E-5	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999566912615484	WITHOUT_CLASSIFICATION	4.3308738451590085E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999868613363392	WITHOUT_CLASSIFICATION	1.3138663660832038E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999860696241449	WITHOUT_CLASSIFICATION	1.3930375854971436E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999860696241449	WITHOUT_CLASSIFICATION	1.3930375854971436E-5	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999977996139456	WITHOUT_CLASSIFICATION	2.2003860543547753E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999948679620382	WITHOUT_CLASSIFICATION	5.1320379618595065E-6	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999953567645612	WITHOUT_CLASSIFICATION	4.643235438849492E-6	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9999651432360984	WITHOUT_CLASSIFICATION	3.485676390168108E-5	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999949125909626	WITHOUT_CLASSIFICATION	5.087409037396121E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999971324441392	WITHOUT_CLASSIFICATION	2.867555860887144E-6	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999994172932052	WITHOUT_CLASSIFICATION	5.827067948291551E-7	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999940413189273	WITHOUT_CLASSIFICATION	5.9586810726961935E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999983676502787	WITHOUT_CLASSIFICATION	1.6323497213513201E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999993397671441	WITHOUT_CLASSIFICATION	6.602328558207582E-7	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.999999805207782	WITHOUT_CLASSIFICATION	1.9479221797451382E-7	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999997845288626	WITHOUT_CLASSIFICATION	2.1547113739871985E-7	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999999231485279	WITHOUT_CLASSIFICATION	7.685147210871862E-8	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999995832369496	WITHOUT_CLASSIFICATION	4.167630504832194E-7	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999977639615433	WITHOUT_CLASSIFICATION	2.236038456703906E-6	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999982625586765	WITHOUT_CLASSIFICATION	1.7374413234636488E-6	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999956464455415	WITHOUT_CLASSIFICATION	4.353554458572789E-6	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999870279430404	WITHOUT_CLASSIFICATION	1.2972056959618805E-5	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9999606810915965	WITHOUT_CLASSIFICATION	3.9318908403455314E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999799666833193	WITHOUT_CLASSIFICATION	2.0033316680661193E-5	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.99994822784888	WITHOUT_CLASSIFICATION	5.177215111999483E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999598772348014	WITHOUT_CLASSIFICATION	4.012276519854774E-5	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.999992741967627	WITHOUT_CLASSIFICATION	7.25803237301708E-6	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9998997115019455	WITHOUT_CLASSIFICATION	1.0028849805456398E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999851479095468	WITHOUT_CLASSIFICATION	1.4852090453075818E-5	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999855073299456	WITHOUT_CLASSIFICATION	1.4492670054406868E-5	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999803336207528	WITHOUT_CLASSIFICATION	1.9666379247141894E-5	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9999100345190151	WITHOUT_CLASSIFICATION	8.99654809849422E-5	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999967715939764	WITHOUT_CLASSIFICATION	3.2284060235875497E-6	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999871985938296	WITHOUT_CLASSIFICATION	1.280140617042046E-5	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999772954775741	WITHOUT_CLASSIFICATION	2.2704522425929575E-5	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999779498013255	WITHOUT_CLASSIFICATION	2.2050198674503712E-5	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999973026896852	WITHOUT_CLASSIFICATION	2.6973103148098024E-6	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999990342637461	WITHOUT_CLASSIFICATION	9.657362539418293E-7	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9999729647465451	WITHOUT_CLASSIFICATION	2.7035253454834683E-5	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999971333013626	WITHOUT_CLASSIFICATION	2.8666986374078896E-6	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999813634735106	WITHOUT_CLASSIFICATION	1.863652648935667E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999928232455272	WITHOUT_CLASSIFICATION	7.1767544728274754E-6	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999893282474795	WITHOUT_CLASSIFICATION	1.067175252034541E-5	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9999934867512643	WITHOUT_CLASSIFICATION	6.513248735707651E-6	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999997177100637	WITHOUT_CLASSIFICATION	2.822899362958771E-7	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999990983486247	WITHOUT_CLASSIFICATION	9.016513753668449E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.999994107759141	WITHOUT_CLASSIFICATION	5.8922408589583465E-6	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999975578772704	WITHOUT_CLASSIFICATION	2.4421227296919976E-6	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999833908894084	WITHOUT_CLASSIFICATION	1.6609110591592012E-5	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.999993643352501	WITHOUT_CLASSIFICATION	6.356647499074769E-6	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.99992664306494	WITHOUT_CLASSIFICATION	7.335693506007334E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.999984683440899	WITHOUT_CLASSIFICATION	1.5316559101072053E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999289708665275	WITHOUT_CLASSIFICATION	7.10291334724503E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.999996869106971	WITHOUT_CLASSIFICATION	3.130893029011579E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999935481816721	WITHOUT_CLASSIFICATION	6.451818328047499E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999666254325761	WITHOUT_CLASSIFICATION	3.337456742400055E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999880567409799	WITHOUT_CLASSIFICATION	1.1943259020137262E-5	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999936639733648	WITHOUT_CLASSIFICATION	6.33602663535159E-6	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9998816024590865	WITHOUT_CLASSIFICATION	1.1839754091349361E-4	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999997317396453	WITHOUT_CLASSIFICATION	2.6826035464955464E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999997317396453	WITHOUT_CLASSIFICATION	2.6826035464955464E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999957103373613	WITHOUT_CLASSIFICATION	4.2896626386960425E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999957103373613	WITHOUT_CLASSIFICATION	4.2896626386960425E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999957103373613	WITHOUT_CLASSIFICATION	4.2896626386960425E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999940406635383	WITHOUT_CLASSIFICATION	5.959336461734111E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999940406635383	WITHOUT_CLASSIFICATION	5.959336461734111E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999901193695475	WITHOUT_CLASSIFICATION	9.88063045252841E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999901193695475	WITHOUT_CLASSIFICATION	9.88063045252841E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999972061696502	WITHOUT_CLASSIFICATION	2.7938303498552552E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.999994565595229	WITHOUT_CLASSIFICATION	5.434404771014636E-6	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9998857618975728	WITHOUT_CLASSIFICATION	1.1423810242715262E-4	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9998857618975728	WITHOUT_CLASSIFICATION	1.1423810242715262E-4	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999965835914184	WITHOUT_CLASSIFICATION	3.4164085815089708E-6	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999949232132509	WITHOUT_CLASSIFICATION	5.07678674910141E-6	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999896681380104	WITHOUT_CLASSIFICATION	1.0331861989640814E-5	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.999993365596168	WITHOUT_CLASSIFICATION	6.63440383194958E-6	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999965129866176	WITHOUT_CLASSIFICATION	3.48701338234004E-6	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999983375278055	WITHOUT_CLASSIFICATION	1.6624721944726123E-6	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999888713227396	WITHOUT_CLASSIFICATION	1.1128677260348864E-5	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.999981955658128	WITHOUT_CLASSIFICATION	1.8044341871977903E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999913826630917	WITHOUT_CLASSIFICATION	8.617336908212909E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999971661758322	WITHOUT_CLASSIFICATION	2.8338241677193503E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999975614337987	WITHOUT_CLASSIFICATION	2.4385662012454273E-6	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999967547093824	WITHOUT_CLASSIFICATION	3.245290617470355E-6	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999162453220019	WITHOUT_CLASSIFICATION	8.375467799814788E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.99993717561918	WITHOUT_CLASSIFICATION	6.28243808199144E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999941014490188	WITHOUT_CLASSIFICATION	5.898550981229996E-6	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999047412449938	WITHOUT_CLASSIFICATION	9.525875500609875E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999836786420524	WITHOUT_CLASSIFICATION	1.6321357947577816E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999917543021042	WITHOUT_CLASSIFICATION	8.245697895821008E-6	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999928817121717	WITHOUT_CLASSIFICATION	7.1182878282532844E-6	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999653540903192	WITHOUT_CLASSIFICATION	3.4645909680799524E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999979591233297	WITHOUT_CLASSIFICATION	2.040876670362237E-6	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.999997172220029	WITHOUT_CLASSIFICATION	2.8277799709774797E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999887275517247	WITHOUT_CLASSIFICATION	1.127244827521191E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999977955227216	WITHOUT_CLASSIFICATION	2.2044772783619628E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999989000228119	WITHOUT_CLASSIFICATION	1.0999771881301393E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999975794214219	WITHOUT_CLASSIFICATION	2.420578578065349E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999933351815089	WITHOUT_CLASSIFICATION	6.6648184911915315E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999960263782013	WITHOUT_CLASSIFICATION	3.9736217987086956E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999967099013428	WITHOUT_CLASSIFICATION	3.290098657207239E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999983583249082	WITHOUT_CLASSIFICATION	1.6416750917027329E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999963873787405	WITHOUT_CLASSIFICATION	3.612621259465676E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977875677148	WITHOUT_CLASSIFICATION	2.2124322852462883E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988960534646	WITHOUT_CLASSIFICATION	1.1039465353716366E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977298580474	WITHOUT_CLASSIFICATION	2.2701419525886424E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988960534646	WITHOUT_CLASSIFICATION	1.1039465353716366E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988960534646	WITHOUT_CLASSIFICATION	1.1039465353716366E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988960534646	WITHOUT_CLASSIFICATION	1.1039465353716366E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988960534646	WITHOUT_CLASSIFICATION	1.1039465353716366E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988960534646	WITHOUT_CLASSIFICATION	1.1039465353716366E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988960534646	WITHOUT_CLASSIFICATION	1.1039465353716366E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977298580474	WITHOUT_CLASSIFICATION	2.2701419525886424E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977298580474	WITHOUT_CLASSIFICATION	2.2701419525886424E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977298580474	WITHOUT_CLASSIFICATION	2.2701419525886424E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977298580474	WITHOUT_CLASSIFICATION	2.2701419525886424E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977298580474	WITHOUT_CLASSIFICATION	2.2701419525886424E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977298580474	WITHOUT_CLASSIFICATION	2.2701419525886424E-6	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9999959418425747	WITHOUT_CLASSIFICATION	4.058157425340693E-6	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999930260068678	WITHOUT_CLASSIFICATION	6.973993132226953E-6	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999932818921174	WITHOUT_CLASSIFICATION	6.718107882584481E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999971906432815	WITHOUT_CLASSIFICATION	2.8093567184499143E-6	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999994080379063	WITHOUT_CLASSIFICATION	5.919620937145139E-7	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999973423936626	WITHOUT_CLASSIFICATION	2.657606337420075E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999955059153163	WITHOUT_CLASSIFICATION	4.49408468374999E-6	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999944188758906	WITHOUT_CLASSIFICATION	5.581124109404308E-6	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999976783934623	WITHOUT_CLASSIFICATION	2.321606537661843E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999853578282385	WITHOUT_CLASSIFICATION	1.4642171761401913E-5	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999878435136569	WITHOUT_CLASSIFICATION	1.215648634307309E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999998295614188	WITHOUT_CLASSIFICATION	1.704385813429469E-7	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999645446158875	WITHOUT_CLASSIFICATION	3.5455384112515204E-5	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999997524162954	WITHOUT_CLASSIFICATION	2.4758370460422173E-7	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.999999697216542	WITHOUT_CLASSIFICATION	3.027834579859054E-7	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999919849871813	WITHOUT_CLASSIFICATION	8.015012818715255E-6	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999710465321893	WITHOUT_CLASSIFICATION	2.895346781066828E-5	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999976299880616	WITHOUT_CLASSIFICATION	2.37001193830367E-6	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999914463408364	WITHOUT_CLASSIFICATION	8.553659163665195E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999996632169804	WITHOUT_CLASSIFICATION	3.3678301959895814E-7	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999962115278384	WITHOUT_CLASSIFICATION	3.788472161662288E-6	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999594781613488	WITHOUT_CLASSIFICATION	4.0521838651247705E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999977362445949	WITHOUT_CLASSIFICATION	2.263755405102434E-6	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9999756988507871	WITHOUT_CLASSIFICATION	2.4301149212943606E-5	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9999925734692725	WITHOUT_CLASSIFICATION	7.426530727568966E-6	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999986968381597	WITHOUT_CLASSIFICATION	1.3031618404055172E-6	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999928655975813	WITHOUT_CLASSIFICATION	7.134402418661576E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999971861207487	WITHOUT_CLASSIFICATION	2.813879251188884E-6	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999664296380582	WITHOUT_CLASSIFICATION	3.357036194177765E-5	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999891903671678	WITHOUT_CLASSIFICATION	1.080963283219947E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999892505368172	WITHOUT_CLASSIFICATION	1.0749463182805914E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999981859119806	WITHOUT_CLASSIFICATION	1.8140880193104683E-6	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999923990659574	WITHOUT_CLASSIFICATION	7.600934042538789E-6	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999951023124674	WITHOUT_CLASSIFICATION	4.897687532684217E-6	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999993517165402	WITHOUT_CLASSIFICATION	6.482834596918876E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999915830968785	WITHOUT_CLASSIFICATION	8.416903121377589E-6	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999997127501803	WITHOUT_CLASSIFICATION	2.872498196112192E-7	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999991537248507	WITHOUT_CLASSIFICATION	8.462751492678461E-7	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999989058604506	WITHOUT_CLASSIFICATION	1.0941395493285667E-6	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999987436406018	WITHOUT_CLASSIFICATION	1.2563593982799116E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999770247040074	WITHOUT_CLASSIFICATION	2.2975295992607126E-5	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999971114870848	WITHOUT_CLASSIFICATION	2.8885129151164195E-6	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999952590983541	WITHOUT_CLASSIFICATION	4.740901645854792E-6	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999994676437598	WITHOUT_CLASSIFICATION	5.323562401191386E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999994676437598	WITHOUT_CLASSIFICATION	5.323562401191386E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999831306286837	WITHOUT_CLASSIFICATION	1.6869371316354604E-5	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999831306286837	WITHOUT_CLASSIFICATION	1.6869371316354604E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999066089070917	WITHOUT_CLASSIFICATION	9.33910929083111E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999066089070917	WITHOUT_CLASSIFICATION	9.33910929083111E-5	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999998837471298	WITHOUT_CLASSIFICATION	1.1625287012918713E-7	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999991284123738	WITHOUT_CLASSIFICATION	8.715876260727243E-7	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999385243021228	WITHOUT_CLASSIFICATION	6.147569787708147E-5	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999998575207851	WITHOUT_CLASSIFICATION	1.42479214963134E-7	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999992135637016	WITHOUT_CLASSIFICATION	7.864362985125798E-7	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.999941138297111	WITHOUT_CLASSIFICATION	5.886170288891288E-5	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999924019441848	WITHOUT_CLASSIFICATION	7.598055815246685E-6	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999980151300741	WITHOUT_CLASSIFICATION	1.9848699259846363E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999983308783664	WITHOUT_CLASSIFICATION	1.6691216336061957E-6	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999884821182748	WITHOUT_CLASSIFICATION	1.1517881725106151E-5	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999837536806703	WITHOUT_CLASSIFICATION	1.62463193297342E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999950446284058	WITHOUT_CLASSIFICATION	4.955371594185368E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999876875702168	WITHOUT_CLASSIFICATION	1.2312429783203392E-5	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999979130434269	WITHOUT_CLASSIFICATION	2.0869565731681115E-6	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999929212207279	WITHOUT_CLASSIFICATION	7.0787792721317205E-6	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.999944996020747	WITHOUT_CLASSIFICATION	5.500397925291296E-5	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999995772616671	WITHOUT_CLASSIFICATION	4.227383328599035E-7	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999945481594177	WITHOUT_CLASSIFICATION	5.451840582281113E-6	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999907190747499	WITHOUT_CLASSIFICATION	9.280925250149146E-6	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.99997804471091	WITHOUT_CLASSIFICATION	2.1955289089999066E-5	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999812823803209	WITHOUT_CLASSIFICATION	1.8717619679136574E-5	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999915975052907	WITHOUT_CLASSIFICATION	8.402494709241893E-6	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999824552770171	WITHOUT_CLASSIFICATION	1.7544722982774532E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999875829400452	WITHOUT_CLASSIFICATION	1.2417059954792065E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999901259696354	WITHOUT_CLASSIFICATION	9.874030364537454E-6	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999986012361868	WITHOUT_CLASSIFICATION	1.3987638131647932E-6	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.99997323830194	WITHOUT_CLASSIFICATION	2.676169806007345E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999911184412751	WITHOUT_CLASSIFICATION	8.881558724959867E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999911184412751	WITHOUT_CLASSIFICATION	8.881558724959867E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999911184412751	WITHOUT_CLASSIFICATION	8.881558724959867E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999998484568334	WITHOUT_CLASSIFICATION	1.5154316661908184E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999998484568334	WITHOUT_CLASSIFICATION	1.5154316661908184E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999799666833193	WITHOUT_CLASSIFICATION	2.0033316680661193E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999799666833193	WITHOUT_CLASSIFICATION	2.0033316680661193E-5	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999922553672358	WITHOUT_CLASSIFICATION	7.744632764206186E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9992864963377749	WITHOUT_CLASSIFICATION	7.135036622251102E-4	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999921828222974	WITHOUT_CLASSIFICATION	7.817177702561447E-6	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999939141462637	WITHOUT_CLASSIFICATION	6.085853736232074E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999911184412751	WITHOUT_CLASSIFICATION	8.881558724959867E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999911184412751	WITHOUT_CLASSIFICATION	8.881558724959867E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999911184412751	WITHOUT_CLASSIFICATION	8.881558724959867E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999998484568334	WITHOUT_CLASSIFICATION	1.5154316661908184E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999998484568334	WITHOUT_CLASSIFICATION	1.5154316661908184E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999998484568334	WITHOUT_CLASSIFICATION	1.5154316661908184E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999799666833193	WITHOUT_CLASSIFICATION	2.0033316680661193E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999799666833193	WITHOUT_CLASSIFICATION	2.0033316680661193E-5	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999998601363433	WITHOUT_CLASSIFICATION	1.3986365666306622E-7	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999993409001829	WITHOUT_CLASSIFICATION	6.590998169969317E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999999930228301	WITHOUT_CLASSIFICATION	6.977169887722556E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999999930228301	WITHOUT_CLASSIFICATION	6.977169887722556E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999999930228301	WITHOUT_CLASSIFICATION	6.977169887722556E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999999930228301	WITHOUT_CLASSIFICATION	6.977169887722556E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999999930228301	WITHOUT_CLASSIFICATION	6.977169887722556E-8	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999962351518011	WITHOUT_CLASSIFICATION	3.764848198785627E-6	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999852862971969	WITHOUT_CLASSIFICATION	1.4713702803203248E-5	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9999592174042311	WITHOUT_CLASSIFICATION	4.0782595768832566E-5	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999979566122568	WITHOUT_CLASSIFICATION	2.0433877431986037E-6	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999568171197236	WITHOUT_CLASSIFICATION	4.3182880276418816E-5	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999988486312309	WITHOUT_CLASSIFICATION	1.1513687690632075E-6	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999809412399976	WITHOUT_CLASSIFICATION	1.9058760002460944E-5	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999946391860006	WITHOUT_CLASSIFICATION	5.360813999351484E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999959179895508	WITHOUT_CLASSIFICATION	4.082010449186812E-6	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999918992307063	WITHOUT_CLASSIFICATION	8.100769293652878E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999834661404449	WITHOUT_CLASSIFICATION	1.6533859555202405E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999444769003621	WITHOUT_CLASSIFICATION	5.552309963781084E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9999772037781265	WITHOUT_CLASSIFICATION	2.2796221873596268E-5	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.999992562583492	WITHOUT_CLASSIFICATION	7.4374165080752634E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999611696954727	WITHOUT_CLASSIFICATION	3.883030452727726E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9998788371177957	WITHOUT_CLASSIFICATION	1.2116288220423735E-4	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9998788371177957	WITHOUT_CLASSIFICATION	1.2116288220423735E-4	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9998788371177957	WITHOUT_CLASSIFICATION	1.2116288220423735E-4	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999938238740438	WITHOUT_CLASSIFICATION	6.176125956185684E-6	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999938236754116	WITHOUT_CLASSIFICATION	6.1763245884503305E-6	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999922321277273	WITHOUT_CLASSIFICATION	7.767872272716634E-6	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999969255363901	WITHOUT_CLASSIFICATION	3.0744636098727658E-6	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999957510059142	WITHOUT_CLASSIFICATION	4.248994085830449E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.99999775354879	WITHOUT_CLASSIFICATION	2.246451209983684E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999942673711344	WITHOUT_CLASSIFICATION	5.732628865505691E-6	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999974322014312	WITHOUT_CLASSIFICATION	2.5677985687514755E-6	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999978985226039	WITHOUT_CLASSIFICATION	2.1014773961095776E-6	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999969449646835	WITHOUT_CLASSIFICATION	3.055035316524727E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999941075861075	WITHOUT_CLASSIFICATION	5.892413892427472E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999975122305719	WITHOUT_CLASSIFICATION	2.4877694280877604E-6	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999878475131644	WITHOUT_CLASSIFICATION	1.2152486835714318E-5	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999963489369593	WITHOUT_CLASSIFICATION	3.651063040700998E-6	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999960608586127	WITHOUT_CLASSIFICATION	3.939141387261375E-6	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999952930157474	WITHOUT_CLASSIFICATION	4.706984252609287E-6	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999949104270809	WITHOUT_CLASSIFICATION	5.089572919114343E-6	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999945157983404	WITHOUT_CLASSIFICATION	5.484201659554271E-6	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999893266382788	WITHOUT_CLASSIFICATION	1.0673361721171751E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999925500258936	WITHOUT_CLASSIFICATION	7.449974106370124E-6	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.999997453825998	WITHOUT_CLASSIFICATION	2.5461740020450073E-6	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999972245982549	WITHOUT_CLASSIFICATION	2.775401745152674E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9999898231024109	WITHOUT_CLASSIFICATION	1.0176897589090982E-5	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999802283409818	WITHOUT_CLASSIFICATION	1.9771659018180712E-5	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999867074461753	WITHOUT_CLASSIFICATION	1.3292553824608895E-5	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999841117283311	WITHOUT_CLASSIFICATION	1.5888271668905333E-5	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999900319248735	WITHOUT_CLASSIFICATION	9.968075126528579E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999929764358638	WITHOUT_CLASSIFICATION	7.0235641362311946E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999077666078406	WITHOUT_CLASSIFICATION	9.2233392159262E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9997891549524972	WITHOUT_CLASSIFICATION	2.108450475028565E-4	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9998513872663524	WITHOUT_CLASSIFICATION	1.4861273364773358E-4	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9998284176200474	WITHOUT_CLASSIFICATION	1.7158237995263434E-4	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9997787583046022	WITHOUT_CLASSIFICATION	2.212416953979766E-4	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9998247812943677	WITHOUT_CLASSIFICATION	1.7521870563227737E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.999808992322735	WITHOUT_CLASSIFICATION	1.9100767726506744E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9998268075393878	WITHOUT_CLASSIFICATION	1.7319246061209392E-4	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999986229071557	WITHOUT_CLASSIFICATION	1.37709284431748E-6	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999948999472243	WITHOUT_CLASSIFICATION	5.100052775602963E-6	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999962279336	WITHOUT_CLASSIFICATION	3.772066442333297E-9	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9999539800650744	WITHOUT_CLASSIFICATION	4.601993492554204E-5	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999968979154329	WITHOUT_CLASSIFICATION	3.10208456717634E-6	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9999993295468924	WITHOUT_CLASSIFICATION	6.704531076589342E-7	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999929741313788	WITHOUT_CLASSIFICATION	7.025868621187886E-6	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999973802429196	WITHOUT_CLASSIFICATION	2.619757080481771E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.998819258075781	WITHOUT_CLASSIFICATION	0.0011807419242190849	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.999420631350668	WITHOUT_CLASSIFICATION	5.793686493318826E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.999973087475473	WITHOUT_CLASSIFICATION	2.6912524527008134E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.999973087475473	WITHOUT_CLASSIFICATION	2.6912524527008134E-5	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999892625905638	WITHOUT_CLASSIFICATION	1.073740943631316E-5	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999995115770733	WITHOUT_CLASSIFICATION	4.884229266881161E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.999454080273508	WITHOUT_CLASSIFICATION	5.459197264920985E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999379926887669	WITHOUT_CLASSIFICATION	6.200731123306747E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.999980062607825	WITHOUT_CLASSIFICATION	1.9937392174897736E-5	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999923263604943	WITHOUT_CLASSIFICATION	7.673639505702094E-6	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999220283627036	WITHOUT_CLASSIFICATION	7.797163729640014E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.999997888316328	WITHOUT_CLASSIFICATION	2.111683671983878E-6	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.999996069696749	WITHOUT_CLASSIFICATION	3.930303250932152E-6	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999907597333144	WITHOUT_CLASSIFICATION	9.24026668554862E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999781651547551	WITHOUT_CLASSIFICATION	2.1834845244950266E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999781651547551	WITHOUT_CLASSIFICATION	2.1834845244950266E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999781651547551	WITHOUT_CLASSIFICATION	2.1834845244950266E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999781651547551	WITHOUT_CLASSIFICATION	2.1834845244950266E-5	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999522602554191	WITHOUT_CLASSIFICATION	4.7739744580944174E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999599901029945	WITHOUT_CLASSIFICATION	4.0009897005577234E-5	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.999976362139709	WITHOUT_CLASSIFICATION	2.3637860290985992E-5	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999794064095721	WITHOUT_CLASSIFICATION	2.0593590427974108E-5	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9996795550449874	WITHOUT_CLASSIFICATION	3.204449550126165E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9999946248994713	WITHOUT_CLASSIFICATION	5.375100528599004E-6	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999899632197532	WITHOUT_CLASSIFICATION	1.0036780246702163E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999960446844496	WITHOUT_CLASSIFICATION	3.955315550400956E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999960446844496	WITHOUT_CLASSIFICATION	3.955315550400956E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.999999675577136	WITHOUT_CLASSIFICATION	3.2442286403853254E-7	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999145868466427	WITHOUT_CLASSIFICATION	8.541315335724977E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.999991822114292	WITHOUT_CLASSIFICATION	8.177885707925125E-6	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999996799709258	WITHOUT_CLASSIFICATION	3.2002907419865984E-7	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999996799709258	WITHOUT_CLASSIFICATION	3.2002907419865984E-7	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9999996857247082	WITHOUT_CLASSIFICATION	3.142752917539603E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999988360120988	WITHOUT_CLASSIFICATION	1.1639879012559526E-6	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999988360120988	WITHOUT_CLASSIFICATION	1.1639879012559526E-6	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9999693049661404	WITHOUT_CLASSIFICATION	3.069503385958926E-5	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.999999474240779	WITHOUT_CLASSIFICATION	5.257592209569537E-7	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999998910785551	WITHOUT_CLASSIFICATION	1.0892144492207112E-7	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9999985963501474	WITHOUT_CLASSIFICATION	1.4036498525662612E-6	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999961893370657	WITHOUT_CLASSIFICATION	3.8106629343995884E-6	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999644235218859	WITHOUT_CLASSIFICATION	3.557647811416952E-5	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9999859476673707	WITHOUT_CLASSIFICATION	1.4052332629344684E-5	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999319146254511	WITHOUT_CLASSIFICATION	6.80853745489641E-5	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999995393878618	WITHOUT_CLASSIFICATION	4.606121381260149E-7	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999962070988766	WITHOUT_CLASSIFICATION	3.7929011233641654E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.999981162230697	WITHOUT_CLASSIFICATION	1.8837769303029882E-5	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999959098535404	WITHOUT_CLASSIFICATION	4.0901464595663865E-6	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999788877137818	WITHOUT_CLASSIFICATION	2.111228621817391E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999753703280895	WITHOUT_CLASSIFICATION	2.46296719105112E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999978766826748	WITHOUT_CLASSIFICATION	2.123317325187095E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999990113495157	WITHOUT_CLASSIFICATION	9.886504841931E-7	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999607040815517	WITHOUT_CLASSIFICATION	3.929591844833534E-5	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999949110040482	WITHOUT_CLASSIFICATION	5.0889959516984195E-6	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999982783521166	WITHOUT_CLASSIFICATION	1.721647883376377E-6	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9999914676314351	WITHOUT_CLASSIFICATION	8.53236856498256E-6	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9999928752631186	WITHOUT_CLASSIFICATION	7.124736881411334E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999989034823294	WITHOUT_CLASSIFICATION	1.0965176704866538E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999985142040452	WITHOUT_CLASSIFICATION	1.4857959547747789E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9998205524542747	WITHOUT_CLASSIFICATION	1.7944754572542457E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999992012312332	WITHOUT_CLASSIFICATION	7.987687668301744E-7	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9999242443398181	WITHOUT_CLASSIFICATION	7.57556601818984E-5	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999702988600166	WITHOUT_CLASSIFICATION	2.9701139983338993E-5	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999962429791424	WITHOUT_CLASSIFICATION	3.757020857721616E-6	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999992016295686	WITHOUT_CLASSIFICATION	7.983704314072147E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999988384157034	WITHOUT_CLASSIFICATION	1.1615842966663128E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999352020221872	WITHOUT_CLASSIFICATION	6.479797781274447E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999978615840392	WITHOUT_CLASSIFICATION	2.1384159608316292E-6	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9998094753477714	WITHOUT_CLASSIFICATION	1.9052465222842738E-4	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999955754921512	WITHOUT_CLASSIFICATION	4.424507848678037E-6	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999987888579419	WITHOUT_CLASSIFICATION	1.2111420580925587E-6	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999260174132149	WITHOUT_CLASSIFICATION	7.398258678515505E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999239378570154	WITHOUT_CLASSIFICATION	7.606214298459716E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.999995357070642	WITHOUT_CLASSIFICATION	4.642929357952016E-6	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999960862097371	WITHOUT_CLASSIFICATION	3.91379026288492E-6	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999260174132149	WITHOUT_CLASSIFICATION	7.398258678515505E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999239378570154	WITHOUT_CLASSIFICATION	7.606214298459716E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.999993531811344	WITHOUT_CLASSIFICATION	6.468188655951855E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999891077551185	WITHOUT_CLASSIFICATION	1.0892244881526649E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999891077551185	WITHOUT_CLASSIFICATION	1.0892244881526649E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999917785582076	WITHOUT_CLASSIFICATION	8.221441792413543E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999986007901733	WITHOUT_CLASSIFICATION	1.399209826742994E-6	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999137508482321	WITHOUT_CLASSIFICATION	8.624915176786814E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999536679323209	WITHOUT_CLASSIFICATION	4.633206767907402E-5	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9998016748144033	WITHOUT_CLASSIFICATION	1.9832518559676125E-4	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9996878989329611	WITHOUT_CLASSIFICATION	3.1210106703903867E-4	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999897541125103	WITHOUT_CLASSIFICATION	1.0245887489606938E-5	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999973743151943	WITHOUT_CLASSIFICATION	2.6256848057341514E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999972624333893	WITHOUT_CLASSIFICATION	2.7375666107069134E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999387048103529	WITHOUT_CLASSIFICATION	6.129518964715069E-5	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999973011614709	WITHOUT_CLASSIFICATION	2.6988385291030206E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999973874934791	WITHOUT_CLASSIFICATION	2.6125065208972856E-6	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999951946057896	WITHOUT_CLASSIFICATION	4.805394210372532E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999954620530527	WITHOUT_CLASSIFICATION	4.537946947320082E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999954620530527	WITHOUT_CLASSIFICATION	4.537946947320082E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999944366433584	WITHOUT_CLASSIFICATION	5.56335664147373E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999944366433584	WITHOUT_CLASSIFICATION	5.56335664147373E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999961874774792	WITHOUT_CLASSIFICATION	3.812522520719572E-6	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999932685540895	WITHOUT_CLASSIFICATION	6.7314459105698104E-6	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999914886762302	WITHOUT_CLASSIFICATION	8.511323769747647E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999818836302868	WITHOUT_CLASSIFICATION	1.8116369713168186E-5	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999439550765576	WITHOUT_CLASSIFICATION	5.6044923442381414E-5	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999950409736406	WITHOUT_CLASSIFICATION	4.9590263595249155E-6	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999137508482321	WITHOUT_CLASSIFICATION	8.624915176786814E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999536679323209	WITHOUT_CLASSIFICATION	4.633206767907402E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999972624333893	WITHOUT_CLASSIFICATION	2.7375666107069134E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999387048103529	WITHOUT_CLASSIFICATION	6.129518964715069E-5	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999976728722962	WITHOUT_CLASSIFICATION	2.3271277037592858E-6	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999950986957343	WITHOUT_CLASSIFICATION	4.901304265717535E-6	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999940675836107	WITHOUT_CLASSIFICATION	5.932416389284E-5	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999936003797024	WITHOUT_CLASSIFICATION	6.399620297524669E-6	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999980395747258	WITHOUT_CLASSIFICATION	1.960425274191017E-6	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999863565707088	WITHOUT_CLASSIFICATION	1.3643429291152922E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9999886076440985	WITHOUT_CLASSIFICATION	1.1392355901533026E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999667892243406	WITHOUT_CLASSIFICATION	3.321077565938061E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999998915396536	WITHOUT_CLASSIFICATION	1.0846034635529087E-7	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999976938083704	WITHOUT_CLASSIFICATION	2.3061916296028173E-6	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999999664681621	WITHOUT_CLASSIFICATION	3.35318377877508E-8	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999994951330259	WITHOUT_CLASSIFICATION	5.048669740926247E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999896112645272	WITHOUT_CLASSIFICATION	1.0388735472834376E-5	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999972172187158	WITHOUT_CLASSIFICATION	2.782781284255666E-6	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999975725420094	WITHOUT_CLASSIFICATION	2.4274579906194313E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.99999074259958	WITHOUT_CLASSIFICATION	9.257400419985499E-6	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999665497313672	WITHOUT_CLASSIFICATION	3.3450268632735326E-5	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999735719584617	WITHOUT_CLASSIFICATION	2.642804153832547E-5	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999711593927155	WITHOUT_CLASSIFICATION	2.8840607284496343E-5	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.999991378930157	WITHOUT_CLASSIFICATION	8.621069843107112E-6	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999916588770367	WITHOUT_CLASSIFICATION	8.341122963326504E-6	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999916588770367	WITHOUT_CLASSIFICATION	8.341122963326504E-6	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999471952224085	WITHOUT_CLASSIFICATION	5.280477759154574E-5	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999529853785016	WITHOUT_CLASSIFICATION	4.701462149827499E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999720643857428	WITHOUT_CLASSIFICATION	2.793561425712559E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999935175117494	WITHOUT_CLASSIFICATION	6.48248825061192E-6	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999935175117494	WITHOUT_CLASSIFICATION	6.48248825061192E-6	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999940675836107	WITHOUT_CLASSIFICATION	5.932416389284E-5	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999619622873959	WITHOUT_CLASSIFICATION	3.80377126042259E-5	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999907616574333	WITHOUT_CLASSIFICATION	9.238342566797486E-6	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999924871814123	WITHOUT_CLASSIFICATION	7.5128185876586E-6	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999914498881207	WITHOUT_CLASSIFICATION	8.55011187922199E-6	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999980692489637	WITHOUT_CLASSIFICATION	1.9307510362218816E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996537498052035	WITHOUT_CLASSIFICATION	3.4625019479649874E-4	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.999995426559915	WITHOUT_CLASSIFICATION	4.573440084983522E-6	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999907278631495	WITHOUT_CLASSIFICATION	9.272136850638628E-6	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999907823444921	WITHOUT_CLASSIFICATION	9.217655507905367E-6	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999792437370597	WITHOUT_CLASSIFICATION	2.0756262940252788E-5	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999407495370043	WITHOUT_CLASSIFICATION	5.925046299569819E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.999997621696011	WITHOUT_CLASSIFICATION	2.3783039888612413E-6	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999830256007668	WITHOUT_CLASSIFICATION	1.6974399233270812E-5	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999628082073757	WITHOUT_CLASSIFICATION	3.719179262432782E-5	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999599814351933	WITHOUT_CLASSIFICATION	4.0018564806804146E-5	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9998611818637361	WITHOUT_CLASSIFICATION	1.3881813626392646E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999937637480846	WITHOUT_CLASSIFICATION	6.236251915388287E-6	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999996104020668	WITHOUT_CLASSIFICATION	3.895979333593131E-7	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999999083038836	WITHOUT_CLASSIFICATION	9.169611634766581E-8	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999500328421	WITHOUT_CLASSIFICATION	4.996715795310886E-8	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999896103511481	WITHOUT_CLASSIFICATION	1.0389648852059011E-5	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999799758154057	WITHOUT_CLASSIFICATION	2.0024184594345225E-5	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999939444903643	WITHOUT_CLASSIFICATION	6.055509635730894E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999935914602438	WITHOUT_CLASSIFICATION	6.408539756236465E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999940011627807	WITHOUT_CLASSIFICATION	5.998837219302615E-6	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.999999278061877	WITHOUT_CLASSIFICATION	7.219381229674929E-7	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999768591367852	WITHOUT_CLASSIFICATION	2.3140863214775144E-5	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999999649380067	WITHOUT_CLASSIFICATION	3.5061993304697704E-8	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999977296226109	WITHOUT_CLASSIFICATION	2.270377389059569E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999946445261165	WITHOUT_CLASSIFICATION	5.355473883453374E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999946445261165	WITHOUT_CLASSIFICATION	5.355473883453374E-6	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999995497714438	WITHOUT_CLASSIFICATION	4.502285563034263E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999867436908336	WITHOUT_CLASSIFICATION	1.325630916631061E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999867436908336	WITHOUT_CLASSIFICATION	1.325630916631061E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999988648735565	WITHOUT_CLASSIFICATION	1.1351264434050332E-6	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999988648735565	WITHOUT_CLASSIFICATION	1.1351264434050332E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999988377157734	WITHOUT_CLASSIFICATION	1.1622842265911997E-5	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999795258355694	WITHOUT_CLASSIFICATION	2.0474164430636693E-5	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999986906339354	WITHOUT_CLASSIFICATION	1.3093660646500695E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999656256450952	WITHOUT_CLASSIFICATION	3.437435490488666E-5	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999989992172142	WITHOUT_CLASSIFICATION	1.000782785780181E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999713002005897	WITHOUT_CLASSIFICATION	2.869979941032793E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999713002005897	WITHOUT_CLASSIFICATION	2.869979941032793E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999935914602438	WITHOUT_CLASSIFICATION	6.408539756236465E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999935914602438	WITHOUT_CLASSIFICATION	6.408539756236465E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999935914602438	WITHOUT_CLASSIFICATION	6.408539756236465E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999940011627807	WITHOUT_CLASSIFICATION	5.998837219302615E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999946445261165	WITHOUT_CLASSIFICATION	5.355473883453374E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999946445261165	WITHOUT_CLASSIFICATION	5.355473883453374E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999946445261165	WITHOUT_CLASSIFICATION	5.355473883453374E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999988377157734	WITHOUT_CLASSIFICATION	1.1622842265911997E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999988377157734	WITHOUT_CLASSIFICATION	1.1622842265911997E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999988377157734	WITHOUT_CLASSIFICATION	1.1622842265911997E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999656256450952	WITHOUT_CLASSIFICATION	3.437435490488666E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999656256450952	WITHOUT_CLASSIFICATION	3.437435490488666E-5	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999982975029833	WITHOUT_CLASSIFICATION	1.7024970167293695E-6	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.999999656992842	WITHOUT_CLASSIFICATION	3.4300715798791756E-7	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999991550131158	WITHOUT_CLASSIFICATION	8.449868841833342E-7	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.9962412473755377	WITHOUT_CLASSIFICATION	0.003758752624462374	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9998922992668778	WITHOUT_CLASSIFICATION	1.0770073312216977E-4	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999670386669041	WITHOUT_CLASSIFICATION	3.2961333095955046E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999670386669041	WITHOUT_CLASSIFICATION	3.2961333095955046E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999953990115075	WITHOUT_CLASSIFICATION	4.600988492637639E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996537498052035	WITHOUT_CLASSIFICATION	3.4625019479649874E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996537498052035	WITHOUT_CLASSIFICATION	3.4625019479649874E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996537498052035	WITHOUT_CLASSIFICATION	3.4625019479649874E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996537498052035	WITHOUT_CLASSIFICATION	3.4625019479649874E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996537498052035	WITHOUT_CLASSIFICATION	3.4625019479649874E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998117696266	WITHOUT_CLASSIFICATION	1.8823037345782704E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998117696266	WITHOUT_CLASSIFICATION	1.8823037345782704E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998117696266	WITHOUT_CLASSIFICATION	1.8823037345782704E-7	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999319236237856	WITHOUT_CLASSIFICATION	6.807637621447563E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999758926686847	WITHOUT_CLASSIFICATION	2.4107331315364275E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999940011627807	WITHOUT_CLASSIFICATION	5.998837219302615E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999988377157734	WITHOUT_CLASSIFICATION	1.1622842265911997E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.999988377157734	WITHOUT_CLASSIFICATION	1.1622842265911997E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996537498052035	WITHOUT_CLASSIFICATION	3.4625019479649874E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996537498052035	WITHOUT_CLASSIFICATION	3.4625019479649874E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998117696266	WITHOUT_CLASSIFICATION	1.8823037345782704E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999953990115075	WITHOUT_CLASSIFICATION	4.600988492637639E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999969562012933	WITHOUT_CLASSIFICATION	3.043798706690294E-6	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999841007149283	WITHOUT_CLASSIFICATION	1.5899285071789177E-5	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999997466703849	WITHOUT_CLASSIFICATION	2.53329615069029E-7	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999835658461274	WITHOUT_CLASSIFICATION	1.643415387269566E-5	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999842729377282	WITHOUT_CLASSIFICATION	1.5727062271746143E-5	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999578536403955	WITHOUT_CLASSIFICATION	4.2146359604563256E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999776452591005	WITHOUT_CLASSIFICATION	2.2354740899448007E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999854183586456	WITHOUT_CLASSIFICATION	1.458164135423194E-5	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999964628717348	WITHOUT_CLASSIFICATION	3.537128265169469E-6	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999978834279087	WITHOUT_CLASSIFICATION	2.116572091291021E-6	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999960638084355	WITHOUT_CLASSIFICATION	3.9361915645109514E-6	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999966052552496	WITHOUT_CLASSIFICATION	3.3947447503178582E-6	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999925699167181	WITHOUT_CLASSIFICATION	7.430083281869387E-6	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999982546027719	WITHOUT_CLASSIFICATION	1.7453972281816184E-6	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999931742734631	WITHOUT_CLASSIFICATION	6.8257265368100805E-6	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999909777728054	WITHOUT_CLASSIFICATION	9.022227194646522E-6	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999958697139234	WITHOUT_CLASSIFICATION	4.130286076610013E-6	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999990395126095	WITHOUT_CLASSIFICATION	9.60487390550939E-7	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999458552203868	WITHOUT_CLASSIFICATION	5.414477961326992E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999989126584125	WITHOUT_CLASSIFICATION	1.0873415876005586E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999478921469199	WITHOUT_CLASSIFICATION	5.210785308013951E-5	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999879977637964	WITHOUT_CLASSIFICATION	1.2002236203540633E-5	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.999994315955994	WITHOUT_CLASSIFICATION	5.684044005951072E-6	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999988172492158	WITHOUT_CLASSIFICATION	1.1827507841351768E-6	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9998289445881997	WITHOUT_CLASSIFICATION	1.7105541180031358E-4	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999483633538098	WITHOUT_CLASSIFICATION	5.163664619031265E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999943525271385	WITHOUT_CLASSIFICATION	5.64747286147591E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999988814347212	WITHOUT_CLASSIFICATION	1.1185652788890456E-6	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.999996086034507	WITHOUT_CLASSIFICATION	3.913965493032521E-6	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999982677181674	WITHOUT_CLASSIFICATION	1.7322818326873965E-6	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999999391800679	WITHOUT_CLASSIFICATION	6.081993216813676E-8	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999995303773478	WITHOUT_CLASSIFICATION	4.696226521769315E-7	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999935356639705	WITHOUT_CLASSIFICATION	6.464336029458569E-6	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999981849264966	WITHOUT_CLASSIFICATION	1.815073503412588E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999969562012933	WITHOUT_CLASSIFICATION	3.043798706690294E-6	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999975895775624	WITHOUT_CLASSIFICATION	2.4104224376606385E-6	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9998393577998662	WITHOUT_CLASSIFICATION	1.60642200133835E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9999994399205215	WITHOUT_CLASSIFICATION	5.60079478488373E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999915965528535	WITHOUT_CLASSIFICATION	8.403447146538389E-6	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999915965528535	WITHOUT_CLASSIFICATION	8.403447146538389E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999039875365904	WITHOUT_CLASSIFICATION	9.6012463409632E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999039875365904	WITHOUT_CLASSIFICATION	9.6012463409632E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999942760540423	WITHOUT_CLASSIFICATION	5.723945957648337E-6	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999974095506023	WITHOUT_CLASSIFICATION	2.5904493976492285E-6	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999611370473778	WITHOUT_CLASSIFICATION	3.8862952622234116E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999838691776224	WITHOUT_CLASSIFICATION	1.6130822377613395E-5	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999981740968913	WITHOUT_CLASSIFICATION	1.825903108761076E-6	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.999997114733527	WITHOUT_CLASSIFICATION	2.885266472944701E-6	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999987427071689	WITHOUT_CLASSIFICATION	1.2572928311255821E-6	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999994671667254	WITHOUT_CLASSIFICATION	5.328332745755956E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999991419394592	WITHOUT_CLASSIFICATION	8.58060540859533E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999989679068064	WITHOUT_CLASSIFICATION	1.0320931935262705E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.999997796724696	WITHOUT_CLASSIFICATION	2.2032753040195583E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.999999282730241	WITHOUT_CLASSIFICATION	7.172697589682897E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.999999282730241	WITHOUT_CLASSIFICATION	7.172697589682897E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999933957613067	WITHOUT_CLASSIFICATION	6.6042386933071256E-6	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999999338536318	WITHOUT_CLASSIFICATION	6.614636812444294E-8	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999987044620808	WITHOUT_CLASSIFICATION	1.2955379191797774E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999987044620808	WITHOUT_CLASSIFICATION	1.2955379191797774E-6	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9998232067595718	WITHOUT_CLASSIFICATION	1.7679324042813602E-4	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999986018812875	WITHOUT_CLASSIFICATION	1.3981187124748447E-6	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999840197652089	WITHOUT_CLASSIFICATION	1.5980234791146536E-5	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999513021480078	WITHOUT_CLASSIFICATION	4.8697851992295655E-5	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999683929243142	WITHOUT_CLASSIFICATION	3.160707568580431E-5	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999572054983352	WITHOUT_CLASSIFICATION	4.2794501664781755E-5	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999919217019461	WITHOUT_CLASSIFICATION	8.078298053841954E-6	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999968822155352	WITHOUT_CLASSIFICATION	3.1177844648133816E-6	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9996326579938991	WITHOUT_CLASSIFICATION	3.673420061009828E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.999956534623621	WITHOUT_CLASSIFICATION	4.346537637906748E-5	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999953116075782	WITHOUT_CLASSIFICATION	4.688392421802531E-6	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999992267998226	WITHOUT_CLASSIFICATION	7.732001773877243E-7	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999993453370726	WITHOUT_CLASSIFICATION	6.546629273934305E-7	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999950330056793	WITHOUT_CLASSIFICATION	4.966994320777995E-6	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999973916875506	WITHOUT_CLASSIFICATION	2.608312449480257E-6	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9999986216299105	WITHOUT_CLASSIFICATION	1.3783700894325582E-6	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999938016783999	WITHOUT_CLASSIFICATION	6.1983216000402265E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.999998068959807	WITHOUT_CLASSIFICATION	1.9310401930919575E-6	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.999983160957972	WITHOUT_CLASSIFICATION	1.6839042027940673E-5	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999176992869403	WITHOUT_CLASSIFICATION	8.230071305970383E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9992885258758435	WITHOUT_CLASSIFICATION	7.114741241565093E-4	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.999996510859335	WITHOUT_CLASSIFICATION	3.4891406649338465E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999953038290984	WITHOUT_CLASSIFICATION	4.696170901580926E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999991693625699	WITHOUT_CLASSIFICATION	8.306374300567982E-7	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999658327465638	WITHOUT_CLASSIFICATION	3.416725343624852E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999967239465343	WITHOUT_CLASSIFICATION	3.276053465815633E-6	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999922032999401	WITHOUT_CLASSIFICATION	7.796700059869335E-6	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999868419314129	WITHOUT_CLASSIFICATION	1.3158068587108158E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999535594338692	WITHOUT_CLASSIFICATION	4.644056613071339E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999995672044557	WITHOUT_CLASSIFICATION	4.327955443518496E-7	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999951002679421	WITHOUT_CLASSIFICATION	4.899732057925142E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999979368237599	WITHOUT_CLASSIFICATION	2.0631762400883402E-6	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999934273664198	WITHOUT_CLASSIFICATION	6.5726335802655785E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999528302207263	WITHOUT_CLASSIFICATION	4.716977927358579E-5	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999528302207263	WITHOUT_CLASSIFICATION	4.716977927358579E-5	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999433875992552	WITHOUT_CLASSIFICATION	5.661240074484508E-5	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999977209460958	WITHOUT_CLASSIFICATION	2.2790539041110037E-6	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999939601759169	WITHOUT_CLASSIFICATION	6.039824083136322E-6	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999712225514823	WITHOUT_CLASSIFICATION	2.877744851772432E-5	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999680040957303	WITHOUT_CLASSIFICATION	3.19959042696971E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999928858086418	WITHOUT_CLASSIFICATION	7.114191358186117E-6	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9994584129941587	WITHOUT_CLASSIFICATION	5.415870058412891E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9993461566948867	WITHOUT_CLASSIFICATION	6.538433051132272E-4	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9982022441938154	WITHOUT_CLASSIFICATION	0.0017977558061844719	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999551770412592	WITHOUT_CLASSIFICATION	4.4822958740848395E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999967988481552	WITHOUT_CLASSIFICATION	3.2011518447570964E-6	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9999357093537486	WITHOUT_CLASSIFICATION	6.429064625129046E-5	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9998608829840926	WITHOUT_CLASSIFICATION	1.391170159073623E-4	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999637396906923	WITHOUT_CLASSIFICATION	3.6260309307779146E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.999999753484754	WITHOUT_CLASSIFICATION	2.465152460853396E-7	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999961963413188	WITHOUT_CLASSIFICATION	3.8036586813121025E-6	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999994954950139	WITHOUT_CLASSIFICATION	5.045049860232662E-7	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999669474552814	WITHOUT_CLASSIFICATION	3.305254471872089E-5	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999934152966147	WITHOUT_CLASSIFICATION	6.584703385289445E-6	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.999998634847268	WITHOUT_CLASSIFICATION	1.3651527319219558E-6	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999993156319804	WITHOUT_CLASSIFICATION	6.843680196033296E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999906473899031	WITHOUT_CLASSIFICATION	9.352610097010778E-6	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999909854774519	WITHOUT_CLASSIFICATION	9.014522548060305E-6	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.999994561364168	WITHOUT_CLASSIFICATION	5.43863583208697E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999945889277468	WITHOUT_CLASSIFICATION	5.4110722531841236E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999956883366802	WITHOUT_CLASSIFICATION	4.311663319849637E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999828854932521	WITHOUT_CLASSIFICATION	1.7114506747867547E-5	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999940176266481	WITHOUT_CLASSIFICATION	5.982373351932532E-6	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9998657940886212	WITHOUT_CLASSIFICATION	1.3420591137883355E-4	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9999932404891858	WITHOUT_CLASSIFICATION	6.759510814075538E-6	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999635560183321	WITHOUT_CLASSIFICATION	3.644398166797227E-5	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999996979630937	WITHOUT_CLASSIFICATION	3.020369063406433E-7	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999908824757819	WITHOUT_CLASSIFICATION	9.117524218001564E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999869495902315	WITHOUT_CLASSIFICATION	1.3050409768414501E-5	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999489166975543	WITHOUT_CLASSIFICATION	5.1083302445784344E-5	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999996467870148	WITHOUT_CLASSIFICATION	3.5321298526073045E-7	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999825104436116	WITHOUT_CLASSIFICATION	1.7489556388461028E-5	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999880129012507	WITHOUT_CLASSIFICATION	1.1987098749160127E-5	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999927268766021	WITHOUT_CLASSIFICATION	7.2731233979248074E-6	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999990309034136	WITHOUT_CLASSIFICATION	9.69096586478905E-7	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999969639801014	WITHOUT_CLASSIFICATION	3.0360198984833854E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.999987422914339	WITHOUT_CLASSIFICATION	1.2577085661067708E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.999987422914339	WITHOUT_CLASSIFICATION	1.2577085661067708E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999802675551782	WITHOUT_CLASSIFICATION	1.9732444821743713E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999993000585081	WITHOUT_CLASSIFICATION	6.999414919342652E-7	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999937909576557	WITHOUT_CLASSIFICATION	6.209042344227657E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999634133327262	WITHOUT_CLASSIFICATION	3.658666727382978E-5	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999920501274445	WITHOUT_CLASSIFICATION	7.949872555424472E-6	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999983754197739	WITHOUT_CLASSIFICATION	1.6245802261138786E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999255903684388	WITHOUT_CLASSIFICATION	7.440963156119036E-5	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9999771362037523	WITHOUT_CLASSIFICATION	2.2863796247777237E-5	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.999998894363569	WITHOUT_CLASSIFICATION	1.1056364310592827E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999502301740558	WITHOUT_CLASSIFICATION	4.976982594417214E-5	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999217254946808	WITHOUT_CLASSIFICATION	7.827450531911335E-5	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999993732329994	WITHOUT_CLASSIFICATION	6.267670006784892E-7	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999686784228026	WITHOUT_CLASSIFICATION	3.132157719744893E-5	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999967700923413	WITHOUT_CLASSIFICATION	3.2299076585290536E-6	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999975558564947	WITHOUT_CLASSIFICATION	2.444143505227371E-6	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9994051723608885	WITHOUT_CLASSIFICATION	5.948276391113974E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.99999718599551	WITHOUT_CLASSIFICATION	2.8140044901044418E-6	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999154938754172	WITHOUT_CLASSIFICATION	8.450612458273597E-5	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999989209278111	WITHOUT_CLASSIFICATION	1.0790721889175022E-6	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9941199089780479	WITHOUT_CLASSIFICATION	0.005880091021952124	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999957105338595	WITHOUT_CLASSIFICATION	4.289466140435243E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999775881839222	WITHOUT_CLASSIFICATION	2.2411816077710873E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999989755758085	WITHOUT_CLASSIFICATION	1.0244241915165955E-6	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999999203703076	WITHOUT_CLASSIFICATION	7.962969237736224E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999955235041282	WITHOUT_CLASSIFICATION	4.476495871818993E-6	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999985669062227	WITHOUT_CLASSIFICATION	1.433093777297483E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999997957243778	WITHOUT_CLASSIFICATION	2.0427562214270989E-7	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999942391816597	WITHOUT_CLASSIFICATION	5.7608183402870205E-6	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999907032817085	WITHOUT_CLASSIFICATION	9.296718291522338E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999665624755244	WITHOUT_CLASSIFICATION	3.3437524475700105E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999919319481879	WITHOUT_CLASSIFICATION	8.068051812099119E-6	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999997742504421	WITHOUT_CLASSIFICATION	2.2574955789809025E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999665624755244	WITHOUT_CLASSIFICATION	3.3437524475700105E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999989411648783	WITHOUT_CLASSIFICATION	1.0588351217139763E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999992012312332	WITHOUT_CLASSIFICATION	7.987687668301744E-7	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9999677757983557	WITHOUT_CLASSIFICATION	3.222420164427187E-5	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.9958128032164951	WITHOUT_CLASSIFICATION	0.00418719678350486	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999932399255324	WITHOUT_CLASSIFICATION	6.760074467566266E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999999930228301	WITHOUT_CLASSIFICATION	6.977169887722556E-8	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999988986442168	WITHOUT_CLASSIFICATION	1.101355783171555E-6	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999340927171131	WITHOUT_CLASSIFICATION	6.590728288683076E-5	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999986007901733	WITHOUT_CLASSIFICATION	1.399209826742994E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999176992869403	WITHOUT_CLASSIFICATION	8.230071305970383E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999991550131158	WITHOUT_CLASSIFICATION	8.449868841833342E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999680298534809	WITHOUT_CLASSIFICATION	3.1970146519060394E-5	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999882216831122	WITHOUT_CLASSIFICATION	1.1778316887797766E-5	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999982222782128	WITHOUT_CLASSIFICATION	1.7777217871921626E-6	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999337219107247	WITHOUT_CLASSIFICATION	6.627808927533415E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999866789640309	WITHOUT_CLASSIFICATION	1.3321035969094934E-5	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999898258594538	WITHOUT_CLASSIFICATION	1.0174140546233713E-5	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.999994072733615	WITHOUT_CLASSIFICATION	5.927266385092986E-6	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9999997007538821	WITHOUT_CLASSIFICATION	2.9924611790932325E-7	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999989986288002	WITHOUT_CLASSIFICATION	1.001371199831268E-6	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999933886107876	WITHOUT_CLASSIFICATION	6.611389212523218E-6	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999786343068973	WITHOUT_CLASSIFICATION	2.1365693102687998E-5	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999887103401955	WITHOUT_CLASSIFICATION	1.1289659804581053E-5	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999978390325918	WITHOUT_CLASSIFICATION	2.1609674082065482E-6	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999875170989713	WITHOUT_CLASSIFICATION	1.2482901028849214E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999701088713507	WITHOUT_CLASSIFICATION	2.9891128649139185E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999688168402524	WITHOUT_CLASSIFICATION	3.1183159747686267E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999922438337725	WITHOUT_CLASSIFICATION	7.756166227503423E-6	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999990314390845	WITHOUT_CLASSIFICATION	9.685609154956933E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9986070278228757	WITHOUT_CLASSIFICATION	0.0013929721771243119	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9986070278228757	WITHOUT_CLASSIFICATION	0.0013929721771243119	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999697905496474	WITHOUT_CLASSIFICATION	3.020945035257658E-5	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999986147245639	WITHOUT_CLASSIFICATION	1.3852754361570813E-6	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.999999908667061	WITHOUT_CLASSIFICATION	9.133293911099171E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9813911077393587	WITHOUT_CLASSIFICATION	0.01860889226064138	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9813911077393587	WITHOUT_CLASSIFICATION	0.01860889226064138	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9813911077393587	WITHOUT_CLASSIFICATION	0.01860889226064138	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9813911077393587	WITHOUT_CLASSIFICATION	0.01860889226064138	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999992577964294	WITHOUT_CLASSIFICATION	7.422035706087874E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.999998582028321	WITHOUT_CLASSIFICATION	1.4179716788556149E-6	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999808450552544	WITHOUT_CLASSIFICATION	1.915494474561275E-5	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9999469228838312	WITHOUT_CLASSIFICATION	5.307711616876662E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999980755988546	WITHOUT_CLASSIFICATION	1.924401145381887E-6	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999923113203641	WITHOUT_CLASSIFICATION	7.688679635845982E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999837717496184	WITHOUT_CLASSIFICATION	1.6228250381603777E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999837717496184	WITHOUT_CLASSIFICATION	1.6228250381603777E-5	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9999236235805027	WITHOUT_CLASSIFICATION	7.637641949731646E-5	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9998182384528331	WITHOUT_CLASSIFICATION	1.8176154716689625E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999766288433906	WITHOUT_CLASSIFICATION	2.337115660943765E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9999829340968418	WITHOUT_CLASSIFICATION	1.7065903158180313E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999981954836533	WITHOUT_CLASSIFICATION	1.804516346653102E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999992355723551	WITHOUT_CLASSIFICATION	7.644276449099211E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999988717011251	WITHOUT_CLASSIFICATION	1.1282988748120452E-6	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999893650066609	WITHOUT_CLASSIFICATION	1.0634993339054668E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999757008896543	WITHOUT_CLASSIFICATION	2.4299110345717302E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999757008896543	WITHOUT_CLASSIFICATION	2.4299110345717302E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999997742504421	WITHOUT_CLASSIFICATION	2.2574955789809025E-6	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999689443486741	WITHOUT_CLASSIFICATION	3.105565132590129E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999697804152536	WITHOUT_CLASSIFICATION	3.0219584746410977E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999927677065803	WITHOUT_CLASSIFICATION	7.2322934197554815E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999985074066389	WITHOUT_CLASSIFICATION	1.4925933610981437E-6	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9997615367004258	WITHOUT_CLASSIFICATION	2.3846329957429342E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.999993681937233	WITHOUT_CLASSIFICATION	6.318062767031239E-6	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999881663990408	WITHOUT_CLASSIFICATION	1.1833600959187156E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999929194021145	WITHOUT_CLASSIFICATION	7.080597885419845E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999929194021145	WITHOUT_CLASSIFICATION	7.080597885419845E-6	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999755695830651	WITHOUT_CLASSIFICATION	2.4430416934905256E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999999242888359	WITHOUT_CLASSIFICATION	7.57111640114578E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999954704982181	WITHOUT_CLASSIFICATION	4.529501781982029E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.999982284052803	WITHOUT_CLASSIFICATION	1.7715947197024196E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999988726842284	WITHOUT_CLASSIFICATION	1.1273157717185164E-6	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.999793046729564	WITHOUT_CLASSIFICATION	2.06953270435972E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999983126800506	WITHOUT_CLASSIFICATION	1.6873199494002188E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999999291176319	WITHOUT_CLASSIFICATION	7.088236809696066E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999999291176319	WITHOUT_CLASSIFICATION	7.088236809696066E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999999291176319	WITHOUT_CLASSIFICATION	7.088236809696066E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999999291176319	WITHOUT_CLASSIFICATION	7.088236809696066E-7	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999958087767048	WITHOUT_CLASSIFICATION	4.191223295229422E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9999509633551031	WITHOUT_CLASSIFICATION	4.903664489690771E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.999904668679289	WITHOUT_CLASSIFICATION	9.533132071112178E-5	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999984532545142	WITHOUT_CLASSIFICATION	1.5467454857901808E-6	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999800390145428	WITHOUT_CLASSIFICATION	1.9960985457224627E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.999844531569436	WITHOUT_CLASSIFICATION	1.5546843056391462E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999867388810344	WITHOUT_CLASSIFICATION	1.326111896566126E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993586838308	WITHOUT_CLASSIFICATION	6.413161691339819E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993586838308	WITHOUT_CLASSIFICATION	6.413161691339819E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993586838308	WITHOUT_CLASSIFICATION	6.413161691339819E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999932124901403	WITHOUT_CLASSIFICATION	6.787509859790593E-6	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999980529835691	WITHOUT_CLASSIFICATION	1.94701643090438E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999952981114631	WITHOUT_CLASSIFICATION	4.701888536922828E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999952981114631	WITHOUT_CLASSIFICATION	4.701888536922828E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999933959926083	WITHOUT_CLASSIFICATION	6.604007391696562E-5	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999797899595	WITHOUT_CLASSIFICATION	2.0210040434105527E-8	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999999525189307	WITHOUT_CLASSIFICATION	4.748106931500094E-8	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9998898409122333	WITHOUT_CLASSIFICATION	1.1015908776668022E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999494619960114	WITHOUT_CLASSIFICATION	5.0538003988685877E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999766682810612	WITHOUT_CLASSIFICATION	2.3331718938687636E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999973441597059	WITHOUT_CLASSIFICATION	2.655840294181372E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999973441597059	WITHOUT_CLASSIFICATION	2.655840294181372E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999959961409048	WITHOUT_CLASSIFICATION	4.00385909513316E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9999777533217259	WITHOUT_CLASSIFICATION	2.2246678274097007E-5	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999380604556821	WITHOUT_CLASSIFICATION	6.193954431794464E-5	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999249332340622	WITHOUT_CLASSIFICATION	7.506676593785108E-5	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999900959832637	WITHOUT_CLASSIFICATION	9.904016736264581E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999997486262232	WITHOUT_CLASSIFICATION	2.5137377682930396E-7	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999940754678087	WITHOUT_CLASSIFICATION	5.924532191359004E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998025840104904	WITHOUT_CLASSIFICATION	1.9741598950949847E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999894893479528	WITHOUT_CLASSIFICATION	1.051065204705622E-5	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999864697354475	WITHOUT_CLASSIFICATION	1.3530264552566967E-5	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999955486192473	WITHOUT_CLASSIFICATION	4.451380752684681E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999976795976777	WITHOUT_CLASSIFICATION	2.3204023223869014E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999259002879072	WITHOUT_CLASSIFICATION	7.409971209284373E-5	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999985808540145	WITHOUT_CLASSIFICATION	1.4191459855434052E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999983517897223	WITHOUT_CLASSIFICATION	1.648210277796444E-6	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9997525913498785	WITHOUT_CLASSIFICATION	2.474086501215491E-4	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999993975496321	WITHOUT_CLASSIFICATION	6.024503678843866E-7	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999998807557412	WITHOUT_CLASSIFICATION	1.1924425881814427E-7	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999963881068046	WITHOUT_CLASSIFICATION	3.611893195423737E-6	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999985861734801	WITHOUT_CLASSIFICATION	1.4138265198748591E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9998746615995565	WITHOUT_CLASSIFICATION	1.2533840044352178E-4	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999995193967931	WITHOUT_CLASSIFICATION	4.806032068886942E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999085563531714	WITHOUT_CLASSIFICATION	9.144364682855938E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999085563531714	WITHOUT_CLASSIFICATION	9.144364682855938E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999085563531714	WITHOUT_CLASSIFICATION	9.144364682855938E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999085563531714	WITHOUT_CLASSIFICATION	9.144364682855938E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999085563531714	WITHOUT_CLASSIFICATION	9.144364682855938E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999085563531714	WITHOUT_CLASSIFICATION	9.144364682855938E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999085563531714	WITHOUT_CLASSIFICATION	9.144364682855938E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999085563531714	WITHOUT_CLASSIFICATION	9.144364682855938E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999986194573536	WITHOUT_CLASSIFICATION	1.3805426464074975E-6	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999152242229248	WITHOUT_CLASSIFICATION	8.477577707522189E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.999992530952487	WITHOUT_CLASSIFICATION	7.4690475131515264E-6	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9997154098425995	WITHOUT_CLASSIFICATION	2.8459015740043875E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999255903684388	WITHOUT_CLASSIFICATION	7.440963156119036E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999255903684388	WITHOUT_CLASSIFICATION	7.440963156119036E-5	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999988886755001	WITHOUT_CLASSIFICATION	1.1113244998186316E-6	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999953310267439	WITHOUT_CLASSIFICATION	4.668973256139695E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999996022500058	WITHOUT_CLASSIFICATION	3.9774999417025384E-7	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999774305120249	WITHOUT_CLASSIFICATION	2.2569487975084795E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999829229709011	WITHOUT_CLASSIFICATION	1.707702909895123E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999909670167006	WITHOUT_CLASSIFICATION	9.032983299450528E-6	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999855003439694	WITHOUT_CLASSIFICATION	1.4499656030573379E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9999393673142709	WITHOUT_CLASSIFICATION	6.0632685729221634E-5	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999960250602251	WITHOUT_CLASSIFICATION	3.9749397749473635E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997636775982	WITHOUT_CLASSIFICATION	2.3632240181623133E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997636775982	WITHOUT_CLASSIFICATION	2.3632240181623133E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997636775982	WITHOUT_CLASSIFICATION	2.3632240181623133E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999642784808424	WITHOUT_CLASSIFICATION	3.5721519157669375E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999979241969841	WITHOUT_CLASSIFICATION	2.0758030159035104E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999663216186349	WITHOUT_CLASSIFICATION	3.367838136518124E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999963392401352	WITHOUT_CLASSIFICATION	3.6607598648908185E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9994923919814903	WITHOUT_CLASSIFICATION	5.07608018509609E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999893047225863	WITHOUT_CLASSIFICATION	1.0695277413781927E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999934377363162	WITHOUT_CLASSIFICATION	6.562263683855448E-6	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999990762602374	WITHOUT_CLASSIFICATION	9.237397625488394E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999837522506285	WITHOUT_CLASSIFICATION	1.6247749371475766E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999837522506285	WITHOUT_CLASSIFICATION	1.6247749371475766E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999959183125028	WITHOUT_CLASSIFICATION	4.081687497185356E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999912660386319	WITHOUT_CLASSIFICATION	8.733961368097081E-6	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999827901360933	WITHOUT_CLASSIFICATION	1.7209863906730086E-5	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9999998201929149	WITHOUT_CLASSIFICATION	1.7980708519675388E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999928341580638	WITHOUT_CLASSIFICATION	7.165841936054445E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999928341580638	WITHOUT_CLASSIFICATION	7.165841936054445E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999988286413595	WITHOUT_CLASSIFICATION	1.1713586405266442E-6	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999424110858711	WITHOUT_CLASSIFICATION	5.7588914128830274E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999994768101629	WITHOUT_CLASSIFICATION	5.231898371005428E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996460416846925	WITHOUT_CLASSIFICATION	3.5395831530756985E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999990491415205	WITHOUT_CLASSIFICATION	9.508584794895061E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999832206651375	WITHOUT_CLASSIFICATION	1.6779334862576483E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999832206651375	WITHOUT_CLASSIFICATION	1.6779334862576483E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999867411318865	WITHOUT_CLASSIFICATION	1.3258868113546759E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999867411318865	WITHOUT_CLASSIFICATION	1.3258868113546759E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999976573616068	WITHOUT_CLASSIFICATION	2.342638393119334E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999965162063814	WITHOUT_CLASSIFICATION	3.4837936185587397E-6	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999879414411976	WITHOUT_CLASSIFICATION	1.2058558802336396E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999031829969748	WITHOUT_CLASSIFICATION	9.681700302518467E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999330264244165	WITHOUT_CLASSIFICATION	6.69735755835511E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.999968980571177	WITHOUT_CLASSIFICATION	3.1019428823111036E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996558008705	WITHOUT_CLASSIFICATION	3.4419912948961425E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999713002005897	WITHOUT_CLASSIFICATION	2.869979941032793E-5	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999934469178152	WITHOUT_CLASSIFICATION	6.5530821848524435E-6	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999995170100203	WITHOUT_CLASSIFICATION	4.829899796483778E-7	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9990245279862296	WITHOUT_CLASSIFICATION	9.754720137703487E-4	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999712306048762	WITHOUT_CLASSIFICATION	2.8769395123825218E-5	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999987810157145	WITHOUT_CLASSIFICATION	1.218984285539645E-6	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999983929974907	WITHOUT_CLASSIFICATION	1.607002509251312E-6	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.999999916511127	WITHOUT_CLASSIFICATION	8.348887300388913E-8	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999996054234439	WITHOUT_CLASSIFICATION	3.9457655608923283E-7	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999895407296359	WITHOUT_CLASSIFICATION	1.0459270364177456E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999965322480018	WITHOUT_CLASSIFICATION	3.46775199827646E-6	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999613524529627	WITHOUT_CLASSIFICATION	3.864754703719748E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9998922563785916	WITHOUT_CLASSIFICATION	1.0774362140841825E-4	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999680298534809	WITHOUT_CLASSIFICATION	3.1970146519060394E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997036270134076	WITHOUT_CLASSIFICATION	2.963729865923024E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.999998066219672	WITHOUT_CLASSIFICATION	1.9337803279500113E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.999994656807564	WITHOUT_CLASSIFICATION	5.343192435991206E-6	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999978077682988	WITHOUT_CLASSIFICATION	2.1922317012062365E-6	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999970561796169	WITHOUT_CLASSIFICATION	2.9438203830345954E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999773670617816	WITHOUT_CLASSIFICATION	2.263293821837667E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999979234132946	WITHOUT_CLASSIFICATION	2.0765867053779432E-6	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.99999652342391	WITHOUT_CLASSIFICATION	3.476576089971606E-6	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999999556352535	WITHOUT_CLASSIFICATION	4.436474661100881E-8	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999965426518561	WITHOUT_CLASSIFICATION	3.4573481438769304E-6	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999983213417344	WITHOUT_CLASSIFICATION	1.6786582656704842E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999952399812831	WITHOUT_CLASSIFICATION	4.76001871690105E-6	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999973773520291	WITHOUT_CLASSIFICATION	2.6226479709648144E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999929922229844	WITHOUT_CLASSIFICATION	7.0077770154790355E-6	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999998642039427	WITHOUT_CLASSIFICATION	1.3579605731039552E-7	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999982976757379	WITHOUT_CLASSIFICATION	1.7023242621070738E-6	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999981816256601	WITHOUT_CLASSIFICATION	1.8183743399804868E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.999997918158814	WITHOUT_CLASSIFICATION	2.0818411859566347E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999981113293025	WITHOUT_CLASSIFICATION	1.888670697442636E-6	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999999668704125	WITHOUT_CLASSIFICATION	3.312958749275488E-8	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999804883146236	WITHOUT_CLASSIFICATION	1.9511685376453802E-5	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999958318669223	WITHOUT_CLASSIFICATION	4.1681330777037704E-6	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.999989418151525	WITHOUT_CLASSIFICATION	1.0581848475097503E-5	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9999996891215084	WITHOUT_CLASSIFICATION	3.108784916301059E-7	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999856451582902	WITHOUT_CLASSIFICATION	1.4354841709753442E-5	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999958927417667	WITHOUT_CLASSIFICATION	4.107258233285727E-6	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999999502055128	WITHOUT_CLASSIFICATION	4.9794487110830875E-8	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999973754664995	WITHOUT_CLASSIFICATION	2.6245335005522066E-6	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999038729778051	WITHOUT_CLASSIFICATION	9.612702219484226E-5	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.999983820678734	WITHOUT_CLASSIFICATION	1.6179321266022427E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999925846410507	WITHOUT_CLASSIFICATION	7.4153589493316645E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999925846410507	WITHOUT_CLASSIFICATION	7.4153589493316645E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999848897121549	WITHOUT_CLASSIFICATION	1.5110287845003944E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999848897121549	WITHOUT_CLASSIFICATION	1.5110287845003944E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999750001185622	WITHOUT_CLASSIFICATION	2.4999881437825566E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999750001185622	WITHOUT_CLASSIFICATION	2.4999881437825566E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999597993183822	WITHOUT_CLASSIFICATION	4.020068161777989E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999597993183822	WITHOUT_CLASSIFICATION	4.020068161777989E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999981124610571	WITHOUT_CLASSIFICATION	1.8875389428601509E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999981124610571	WITHOUT_CLASSIFICATION	1.8875389428601509E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999981124610571	WITHOUT_CLASSIFICATION	1.8875389428601509E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999981124610571	WITHOUT_CLASSIFICATION	1.8875389428601509E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999981124610571	WITHOUT_CLASSIFICATION	1.8875389428601509E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999981124610571	WITHOUT_CLASSIFICATION	1.8875389428601509E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999981124610571	WITHOUT_CLASSIFICATION	1.8875389428601509E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999981124610571	WITHOUT_CLASSIFICATION	1.8875389428601509E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999981124610571	WITHOUT_CLASSIFICATION	1.8875389428601509E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999939965988713	WITHOUT_CLASSIFICATION	6.0034011286383535E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999939965988713	WITHOUT_CLASSIFICATION	6.0034011286383535E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999939965988713	WITHOUT_CLASSIFICATION	6.0034011286383535E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999969119021578	WITHOUT_CLASSIFICATION	3.0880978423349093E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999878611286132	WITHOUT_CLASSIFICATION	1.2138871386813449E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999878611286132	WITHOUT_CLASSIFICATION	1.2138871386813449E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999878611286132	WITHOUT_CLASSIFICATION	1.2138871386813449E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999946664850966	WITHOUT_CLASSIFICATION	5.333514903352078E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999946664850966	WITHOUT_CLASSIFICATION	5.333514903352078E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999946664850966	WITHOUT_CLASSIFICATION	5.333514903352078E-6	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999344385802181	WITHOUT_CLASSIFICATION	6.556141978194542E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999884528012052	WITHOUT_CLASSIFICATION	1.154719879473019E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998514470193239	WITHOUT_CLASSIFICATION	1.485529806760816E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998425578517924	WITHOUT_CLASSIFICATION	1.5744214820755833E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998425578517924	WITHOUT_CLASSIFICATION	1.5744214820755833E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998425578517924	WITHOUT_CLASSIFICATION	1.5744214820755833E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999893035101708	WITHOUT_CLASSIFICATION	1.069648982925128E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999678574738623	WITHOUT_CLASSIFICATION	3.2142526137694994E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999678574738623	WITHOUT_CLASSIFICATION	3.2142526137694994E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.999995556503345	WITHOUT_CLASSIFICATION	4.443496654934917E-6	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999880595865562	WITHOUT_CLASSIFICATION	1.1940413443796733E-5	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999880595865562	WITHOUT_CLASSIFICATION	1.1940413443796733E-5	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9990778792257927	WITHOUT_CLASSIFICATION	9.22120774207138E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.999984683440899	WITHOUT_CLASSIFICATION	1.5316559101072053E-5	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999672490319907	WITHOUT_CLASSIFICATION	3.2750968009194066E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999657029512954	WITHOUT_CLASSIFICATION	3.4297048704621594E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999657029512954	WITHOUT_CLASSIFICATION	3.4297048704621594E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999441728806792	WITHOUT_CLASSIFICATION	5.58271193209628E-5	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999884553108613	WITHOUT_CLASSIFICATION	1.1544689138729263E-5	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999982574536258	WITHOUT_CLASSIFICATION	1.7425463742021367E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9999725518220571	WITHOUT_CLASSIFICATION	2.7448177942837123E-5	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9997689328637129	WITHOUT_CLASSIFICATION	2.31067136287026E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999657029512954	WITHOUT_CLASSIFICATION	3.4297048704621594E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999657029512954	WITHOUT_CLASSIFICATION	3.4297048704621594E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999657029512954	WITHOUT_CLASSIFICATION	3.4297048704621594E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999657029512954	WITHOUT_CLASSIFICATION	3.4297048704621594E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999657029512954	WITHOUT_CLASSIFICATION	3.4297048704621594E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999756475958077	WITHOUT_CLASSIFICATION	2.4352404192256216E-5	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999956507448048	WITHOUT_CLASSIFICATION	4.349255195262892E-6	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999856572109644	WITHOUT_CLASSIFICATION	1.434278903562385E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.999996342827232	WITHOUT_CLASSIFICATION	3.6571727679046175E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.999999609278548	WITHOUT_CLASSIFICATION	3.907214518839347E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999929819922407	WITHOUT_CLASSIFICATION	7.0180077591446E-6	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9999984902944916	WITHOUT_CLASSIFICATION	1.509705508292469E-6	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999891350026735	WITHOUT_CLASSIFICATION	1.086499732647881E-5	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999579885240478	WITHOUT_CLASSIFICATION	4.201147595210302E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999793897910356	WITHOUT_CLASSIFICATION	2.0610208964406028E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999961624320024	WITHOUT_CLASSIFICATION	3.8375679976005076E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999775881839222	WITHOUT_CLASSIFICATION	2.2411816077710873E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999880872071639	WITHOUT_CLASSIFICATION	1.1912792836129906E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999998266166792	WITHOUT_CLASSIFICATION	1.733833209108744E-7	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999995271365212	WITHOUT_CLASSIFICATION	4.728634788166317E-7	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999843896275326	WITHOUT_CLASSIFICATION	1.561037246738688E-5	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999996567641052	WITHOUT_CLASSIFICATION	3.432358949269835E-7	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999998981348682	WITHOUT_CLASSIFICATION	1.0186513179198292E-7	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.99999835569381	WITHOUT_CLASSIFICATION	1.6443061899971022E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999979145664906	WITHOUT_CLASSIFICATION	2.085433509483363E-6	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999989161440036	WITHOUT_CLASSIFICATION	1.083855996457436E-6	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999977173542542	WITHOUT_CLASSIFICATION	2.282645745648901E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999502301740558	WITHOUT_CLASSIFICATION	4.976982594417214E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999579387794892	WITHOUT_CLASSIFICATION	4.206122051073825E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999579387794892	WITHOUT_CLASSIFICATION	4.206122051073825E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999579387794892	WITHOUT_CLASSIFICATION	4.206122051073825E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999579387794892	WITHOUT_CLASSIFICATION	4.206122051073825E-5	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999984881615024	WITHOUT_CLASSIFICATION	1.5118384975212256E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9999909414195971	WITHOUT_CLASSIFICATION	9.058580402854147E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999892906827396	WITHOUT_CLASSIFICATION	1.0709317260503867E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999892906827396	WITHOUT_CLASSIFICATION	1.0709317260503867E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999754109430677	WITHOUT_CLASSIFICATION	2.4589056932333113E-5	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999675167784849	WITHOUT_CLASSIFICATION	3.248322151513803E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999998948296205	WITHOUT_CLASSIFICATION	1.0517037952118496E-7	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999928319086029	WITHOUT_CLASSIFICATION	7.168091397145688E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.999973585373644	WITHOUT_CLASSIFICATION	2.641462635594426E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999367902128612	WITHOUT_CLASSIFICATION	6.320978713883454E-5	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999947035922855	WITHOUT_CLASSIFICATION	5.296407714468139E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999831466091383	WITHOUT_CLASSIFICATION	1.685339086172364E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999831466091383	WITHOUT_CLASSIFICATION	1.685339086172364E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999831466091383	WITHOUT_CLASSIFICATION	1.685339086172364E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999831466091383	WITHOUT_CLASSIFICATION	1.685339086172364E-5	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999959402099661	WITHOUT_CLASSIFICATION	4.059790033847694E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999791622128735	WITHOUT_CLASSIFICATION	2.0837787126397475E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999791622128735	WITHOUT_CLASSIFICATION	2.0837787126397475E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999791622128735	WITHOUT_CLASSIFICATION	2.0837787126397475E-5	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999966809320965	WITHOUT_CLASSIFICATION	3.319067903407393E-6	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999904628124278	WITHOUT_CLASSIFICATION	9.537187572264624E-6	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999986595724213	WITHOUT_CLASSIFICATION	1.3404275786631815E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9813911077393587	WITHOUT_CLASSIFICATION	0.01860889226064138	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9813911077393587	WITHOUT_CLASSIFICATION	0.01860889226064138	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999997711810196	WITHOUT_CLASSIFICATION	2.2881898046212118E-7	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9999955328380817	WITHOUT_CLASSIFICATION	4.467161918306828E-6	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999458969822759	WITHOUT_CLASSIFICATION	5.410301772415205E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999458969822759	WITHOUT_CLASSIFICATION	5.410301772415205E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999990887546494	WITHOUT_CLASSIFICATION	9.112453505203892E-7	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999990887546494	WITHOUT_CLASSIFICATION	9.112453505203892E-7	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.999999108636981	WITHOUT_CLASSIFICATION	8.913630189501072E-7	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999983130762604	WITHOUT_CLASSIFICATION	1.6869237395386474E-6	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999982119218058	WITHOUT_CLASSIFICATION	1.788078194241785E-6	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9999995219352509	WITHOUT_CLASSIFICATION	4.780647491488372E-7	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999351386079346	WITHOUT_CLASSIFICATION	6.486139206546634E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999993930974125	WITHOUT_CLASSIFICATION	6.069025875725666E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999951040297612	WITHOUT_CLASSIFICATION	4.895970238772628E-6	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999926661394777	WITHOUT_CLASSIFICATION	7.333860522301281E-6	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999940120584271	WITHOUT_CLASSIFICATION	5.987941572986195E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999975350852154	WITHOUT_CLASSIFICATION	2.4649147846873776E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999975350852154	WITHOUT_CLASSIFICATION	2.4649147846873776E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999852106058191	WITHOUT_CLASSIFICATION	1.478939418074171E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999852106058191	WITHOUT_CLASSIFICATION	1.478939418074171E-5	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999993794836457	WITHOUT_CLASSIFICATION	6.205163544225783E-7	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999963747499966	WITHOUT_CLASSIFICATION	3.6252500035093614E-6	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9998814568589774	WITHOUT_CLASSIFICATION	1.1854314102258371E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999873460343335	WITHOUT_CLASSIFICATION	1.2653965666537403E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999873460343335	WITHOUT_CLASSIFICATION	1.2653965666537403E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999873460343335	WITHOUT_CLASSIFICATION	1.2653965666537403E-5	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999757484569991	WITHOUT_CLASSIFICATION	2.4251543000924757E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999688767433307	WITHOUT_CLASSIFICATION	3.112325666933663E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999712005457875	WITHOUT_CLASSIFICATION	2.879945421260959E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999752536805814	WITHOUT_CLASSIFICATION	2.4746319418559785E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999713216679055	WITHOUT_CLASSIFICATION	2.8678332094570412E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.999973903893849	WITHOUT_CLASSIFICATION	2.609610615098938E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999738071302529	WITHOUT_CLASSIFICATION	2.6192869747097035E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999933020505559	WITHOUT_CLASSIFICATION	6.697949444148733E-6	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9997521814161128	WITHOUT_CLASSIFICATION	2.478185838871672E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999977006971009	WITHOUT_CLASSIFICATION	2.2993028991200286E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9999050155489722	WITHOUT_CLASSIFICATION	9.498445102783648E-5	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999958829968314	WITHOUT_CLASSIFICATION	4.117003168628405E-6	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.999998996868305	WITHOUT_CLASSIFICATION	1.0031316950012473E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9813911077393587	WITHOUT_CLASSIFICATION	0.01860889226064138	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999998768444338	WITHOUT_CLASSIFICATION	1.2315556613830778E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999822706936382	WITHOUT_CLASSIFICATION	1.7729306361776702E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9986070278228757	WITHOUT_CLASSIFICATION	0.0013929721771243119	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997728204521161	WITHOUT_CLASSIFICATION	2.271795478839662E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997728204521161	WITHOUT_CLASSIFICATION	2.271795478839662E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997728204521161	WITHOUT_CLASSIFICATION	2.271795478839662E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997728204521161	WITHOUT_CLASSIFICATION	2.271795478839662E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997728204521161	WITHOUT_CLASSIFICATION	2.271795478839662E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9997992140241451	WITHOUT_CLASSIFICATION	2.0078597585486353E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997728204521161	WITHOUT_CLASSIFICATION	2.271795478839662E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997728204521161	WITHOUT_CLASSIFICATION	2.271795478839662E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997728204521161	WITHOUT_CLASSIFICATION	2.271795478839662E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999990815651493	WITHOUT_CLASSIFICATION	9.184348507772591E-7	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999759225752352	WITHOUT_CLASSIFICATION	2.407742476483524E-5	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9999695507655736	WITHOUT_CLASSIFICATION	3.0449234426390212E-5	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9999333289482731	WITHOUT_CLASSIFICATION	6.667105172683268E-5	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999521185292203	WITHOUT_CLASSIFICATION	4.7881470779740174E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.999898745966334	WITHOUT_CLASSIFICATION	1.0125403366607704E-4	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999978924439329	WITHOUT_CLASSIFICATION	2.1075560670749725E-6	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999765935411918	WITHOUT_CLASSIFICATION	2.340645880805856E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999755707511601	WITHOUT_CLASSIFICATION	2.4429248839957652E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999755707511601	WITHOUT_CLASSIFICATION	2.4429248839957652E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999745714203594	WITHOUT_CLASSIFICATION	2.542857964069347E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999676870793284	WITHOUT_CLASSIFICATION	3.2312920671736675E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999713369364768	WITHOUT_CLASSIFICATION	2.8663063523294423E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999739449485695	WITHOUT_CLASSIFICATION	2.6055051430416153E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999756942810873	WITHOUT_CLASSIFICATION	2.4305718912580205E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999711756621549	WITHOUT_CLASSIFICATION	2.882433784512354E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999716086923836	WITHOUT_CLASSIFICATION	2.8391307616470196E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999748332450489	WITHOUT_CLASSIFICATION	2.5166754951100406E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999707516781817	WITHOUT_CLASSIFICATION	2.9248321818318002E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999784523683144	WITHOUT_CLASSIFICATION	2.154763168569008E-5	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999740350255125	WITHOUT_CLASSIFICATION	2.596497448754392E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999763895355382	WITHOUT_CLASSIFICATION	2.361046446178695E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999725006563221	WITHOUT_CLASSIFICATION	2.7499343677832885E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999709743028554	WITHOUT_CLASSIFICATION	2.902569714462964E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999696253771748	WITHOUT_CLASSIFICATION	3.0374622825159093E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999713026605253	WITHOUT_CLASSIFICATION	2.8697339474786985E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999712530977095	WITHOUT_CLASSIFICATION	2.874690229058375E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999733388101976	WITHOUT_CLASSIFICATION	2.666118980245113E-5	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999742634230366	WITHOUT_CLASSIFICATION	2.5736576963400927E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999752037686451	WITHOUT_CLASSIFICATION	2.479623135483234E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999765696602569	WITHOUT_CLASSIFICATION	2.3430339743015534E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999753995282474	WITHOUT_CLASSIFICATION	2.4600471752586222E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999721977215442	WITHOUT_CLASSIFICATION	2.780227845570303E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999750661813737	WITHOUT_CLASSIFICATION	2.4933818626364118E-5	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999737329715548	WITHOUT_CLASSIFICATION	2.6267028445280607E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999729763808609	WITHOUT_CLASSIFICATION	2.702361913911319E-5	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999700943086371	WITHOUT_CLASSIFICATION	2.9905691362834053E-5	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999738538513796	WITHOUT_CLASSIFICATION	2.6146148620387356E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999732146112603	WITHOUT_CLASSIFICATION	2.678538873956164E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999744913358526	WITHOUT_CLASSIFICATION	2.5508664147406677E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999695623542425	WITHOUT_CLASSIFICATION	3.0437645757467586E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999665562534823	WITHOUT_CLASSIFICATION	3.344374651772396E-5	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999661508719013	WITHOUT_CLASSIFICATION	3.3849128098785886E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999673514874516	WITHOUT_CLASSIFICATION	3.26485125483544E-5	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999716324257261	WITHOUT_CLASSIFICATION	2.8367574274043634E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.999971632271345	WITHOUT_CLASSIFICATION	2.836772865492961E-5	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999655677152589	WITHOUT_CLASSIFICATION	3.44322847410134E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999649808719588	WITHOUT_CLASSIFICATION	3.501912804121875E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.999968621392847	WITHOUT_CLASSIFICATION	3.1378607152983526E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999630027467437	WITHOUT_CLASSIFICATION	3.699725325626679E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999702375022009	WITHOUT_CLASSIFICATION	2.9762497799035422E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999745109267135	WITHOUT_CLASSIFICATION	2.5489073286425657E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999711130191951	WITHOUT_CLASSIFICATION	2.8886980804851508E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999627846115297	WITHOUT_CLASSIFICATION	3.7215388470288044E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999673705577411	WITHOUT_CLASSIFICATION	3.26294422589082E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999644063403789	WITHOUT_CLASSIFICATION	3.5593659621087836E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999629025321328	WITHOUT_CLASSIFICATION	3.7097467867138966E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999623345444194	WITHOUT_CLASSIFICATION	3.766545558064074E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999669213865086	WITHOUT_CLASSIFICATION	3.307861349133564E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999655224364479	WITHOUT_CLASSIFICATION	3.4477563552182244E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999689255585296	WITHOUT_CLASSIFICATION	3.107444147031782E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999699049023517	WITHOUT_CLASSIFICATION	3.0095097648259943E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999722078502695	WITHOUT_CLASSIFICATION	2.7792149730494832E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999676517399542	WITHOUT_CLASSIFICATION	3.2348260045780674E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999676517399542	WITHOUT_CLASSIFICATION	3.2348260045780674E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999663913683243	WITHOUT_CLASSIFICATION	3.3608631675620984E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999736896606324	WITHOUT_CLASSIFICATION	2.631033936764496E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999662566838688	WITHOUT_CLASSIFICATION	3.3743316131231915E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999700818288261	WITHOUT_CLASSIFICATION	2.991817117399913E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999676815646878	WITHOUT_CLASSIFICATION	3.231843531208997E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999727953308278	WITHOUT_CLASSIFICATION	2.7204669172140492E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999666526913062	WITHOUT_CLASSIFICATION	3.334730869381791E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999690644103871	WITHOUT_CLASSIFICATION	3.0935589612814404E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999710918099305	WITHOUT_CLASSIFICATION	2.890819006948136E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999692383438477	WITHOUT_CLASSIFICATION	3.0761656152416735E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9998975117233626	WITHOUT_CLASSIFICATION	1.0248827663748301E-4	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9998975117233626	WITHOUT_CLASSIFICATION	1.0248827663748301E-4	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999906396101136	WITHOUT_CLASSIFICATION	9.360389886479132E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999630499852732	WITHOUT_CLASSIFICATION	3.6950014726790104E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9999034594055797	WITHOUT_CLASSIFICATION	9.654059442035547E-5	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999998204495868	WITHOUT_CLASSIFICATION	1.7955041321950423E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999981365217438	WITHOUT_CLASSIFICATION	1.8634782562091583E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999981365217438	WITHOUT_CLASSIFICATION	1.8634782562091583E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999981365217438	WITHOUT_CLASSIFICATION	1.8634782562091583E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999981365217438	WITHOUT_CLASSIFICATION	1.8634782562091583E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9999521890710715	WITHOUT_CLASSIFICATION	4.781092892853916E-5	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9999997418696833	WITHOUT_CLASSIFICATION	2.581303166387518E-7	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999711995437033	WITHOUT_CLASSIFICATION	2.8800456296795645E-5	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999727624860715	WITHOUT_CLASSIFICATION	2.723751392853715E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999722207433389	WITHOUT_CLASSIFICATION	2.7779256661180383E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999671793385411	WITHOUT_CLASSIFICATION	3.282066145896748E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999711177533349	WITHOUT_CLASSIFICATION	2.8882246665004183E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.999973296702124	WITHOUT_CLASSIFICATION	2.6703297875936067E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999781594746167	WITHOUT_CLASSIFICATION	2.184052538337357E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999726812649821	WITHOUT_CLASSIFICATION	2.7318735017875847E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999726069673329	WITHOUT_CLASSIFICATION	2.7393032667088693E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999765479262341	WITHOUT_CLASSIFICATION	2.345207376582642E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999699845374316	WITHOUT_CLASSIFICATION	3.001546256833668E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999700656713921	WITHOUT_CLASSIFICATION	2.9934328607835948E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999704117072855	WITHOUT_CLASSIFICATION	2.9588292714442076E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999747663707184	WITHOUT_CLASSIFICATION	2.5233629281556948E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999715464844776	WITHOUT_CLASSIFICATION	2.8453515522475586E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999709523894063	WITHOUT_CLASSIFICATION	2.9047610593715856E-5	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999737102514917	WITHOUT_CLASSIFICATION	2.6289748508334634E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999717410425685	WITHOUT_CLASSIFICATION	2.8258957431473034E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999766271200148	WITHOUT_CLASSIFICATION	2.3372879985232685E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999746236306325	WITHOUT_CLASSIFICATION	2.537636936756756E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999753130266421	WITHOUT_CLASSIFICATION	2.4686973357918016E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.999973379612633	WITHOUT_CLASSIFICATION	2.6620387367023324E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.999974263803741	WITHOUT_CLASSIFICATION	2.5736196258976727E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999705575801046	WITHOUT_CLASSIFICATION	2.9442419895380012E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999760150509323	WITHOUT_CLASSIFICATION	2.398494906771966E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999736815881863	WITHOUT_CLASSIFICATION	2.6318411813703182E-5	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999745029313287	WITHOUT_CLASSIFICATION	2.5497068671315924E-5	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999666687115779	WITHOUT_CLASSIFICATION	3.3331288422022786E-5	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999685232084603	WITHOUT_CLASSIFICATION	3.1476791539763274E-5	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999704568708204	WITHOUT_CLASSIFICATION	2.9543129179625308E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999546389342201	WITHOUT_CLASSIFICATION	4.536106577983565E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999656412145178	WITHOUT_CLASSIFICATION	3.435878548217324E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999654884368234	WITHOUT_CLASSIFICATION	3.451156317653851E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999703892720101	WITHOUT_CLASSIFICATION	2.9610727989849775E-5	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999642400374477	WITHOUT_CLASSIFICATION	3.575996255229582E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999646066195091	WITHOUT_CLASSIFICATION	3.539338049087675E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999687110555275	WITHOUT_CLASSIFICATION	3.1288944472417656E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999672177323519	WITHOUT_CLASSIFICATION	3.2782267648099985E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999718973481362	WITHOUT_CLASSIFICATION	2.810265186382561E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999604930001568	WITHOUT_CLASSIFICATION	3.950699984325111E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999630769883261	WITHOUT_CLASSIFICATION	3.692301167395958E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999672176706155	WITHOUT_CLASSIFICATION	3.2782329384605676E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999687537574096	WITHOUT_CLASSIFICATION	3.1246242590322734E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999667428433324	WITHOUT_CLASSIFICATION	3.3257156667527825E-5	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999574522410811	WITHOUT_CLASSIFICATION	4.254775891883296E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999653383273606	WITHOUT_CLASSIFICATION	3.466167263945344E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999721191686243	WITHOUT_CLASSIFICATION	2.7880831375776227E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999670438265691	WITHOUT_CLASSIFICATION	3.2956173430985536E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.999967736705278	WITHOUT_CLASSIFICATION	3.226329472194158E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.999965365589537	WITHOUT_CLASSIFICATION	3.463441046301977E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999692895312522	WITHOUT_CLASSIFICATION	3.071046874780954E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999693051186981	WITHOUT_CLASSIFICATION	3.0694881301976934E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999687827710538	WITHOUT_CLASSIFICATION	3.1217228946114016E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999699971664451	WITHOUT_CLASSIFICATION	3.000283355492738E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.999971295200708	WITHOUT_CLASSIFICATION	2.870479929194377E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999687270868957	WITHOUT_CLASSIFICATION	3.1272913104421014E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.999978302764572	WITHOUT_CLASSIFICATION	2.1697235428012486E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999962944932783	WITHOUT_CLASSIFICATION	3.705506721703722E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.999997610006904	WITHOUT_CLASSIFICATION	2.3899930959908126E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999957264749795	WITHOUT_CLASSIFICATION	4.27352502053305E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999957264749795	WITHOUT_CLASSIFICATION	4.27352502053305E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999957264749795	WITHOUT_CLASSIFICATION	4.27352502053305E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999957264749795	WITHOUT_CLASSIFICATION	4.27352502053305E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999957264749795	WITHOUT_CLASSIFICATION	4.27352502053305E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999957264749795	WITHOUT_CLASSIFICATION	4.27352502053305E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999957264749795	WITHOUT_CLASSIFICATION	4.27352502053305E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999666254325761	WITHOUT_CLASSIFICATION	3.337456742400055E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999666254325761	WITHOUT_CLASSIFICATION	3.337456742400055E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999666254325761	WITHOUT_CLASSIFICATION	3.337456742400055E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999666254325761	WITHOUT_CLASSIFICATION	3.337456742400055E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999868613363392	WITHOUT_CLASSIFICATION	1.3138663660832038E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999868613363392	WITHOUT_CLASSIFICATION	1.3138663660832038E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.999999428077958	WITHOUT_CLASSIFICATION	5.719220419322851E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999997317396453	WITHOUT_CLASSIFICATION	2.6826035464955464E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999997317396453	WITHOUT_CLASSIFICATION	2.6826035464955464E-7	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.999996374610401	WITHOUT_CLASSIFICATION	3.6253895989094692E-6	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999864479918308	WITHOUT_CLASSIFICATION	1.3552008169367945E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977875677148	WITHOUT_CLASSIFICATION	2.2124322852462883E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977875677148	WITHOUT_CLASSIFICATION	2.2124322852462883E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977875677148	WITHOUT_CLASSIFICATION	2.2124322852462883E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977875677148	WITHOUT_CLASSIFICATION	2.2124322852462883E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977875677148	WITHOUT_CLASSIFICATION	2.2124322852462883E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977875677148	WITHOUT_CLASSIFICATION	2.2124322852462883E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977875677148	WITHOUT_CLASSIFICATION	2.2124322852462883E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988960534646	WITHOUT_CLASSIFICATION	1.1039465353716366E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999977298580474	WITHOUT_CLASSIFICATION	2.2701419525886424E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999971861207487	WITHOUT_CLASSIFICATION	2.813879251188884E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999971861207487	WITHOUT_CLASSIFICATION	2.813879251188884E-6	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999475853592442	WITHOUT_CLASSIFICATION	5.241464075575105E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999770247040074	WITHOUT_CLASSIFICATION	2.2975295992607126E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999770247040074	WITHOUT_CLASSIFICATION	2.2975295992607126E-5	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999999890036434	WITHOUT_CLASSIFICATION	1.0996356565286155E-8	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9998498490977429	WITHOUT_CLASSIFICATION	1.50150902257204E-4	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.999999189753816	WITHOUT_CLASSIFICATION	8.102461840130428E-7	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999989011813029	WITHOUT_CLASSIFICATION	1.098818697155812E-6	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999979640182032	WITHOUT_CLASSIFICATION	2.0359817968195523E-6	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999959751365733	WITHOUT_CLASSIFICATION	4.024863426694117E-6	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999953215055449	WITHOUT_CLASSIFICATION	4.67849445497146E-6	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999966768523588	WITHOUT_CLASSIFICATION	3.323147641100096E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.999991822114292	WITHOUT_CLASSIFICATION	8.177885707925125E-6	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999892101651854	WITHOUT_CLASSIFICATION	1.0789834814653843E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999379926887669	WITHOUT_CLASSIFICATION	6.200731123306747E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999997475627413	WITHOUT_CLASSIFICATION	2.5243725868413936E-7	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.999997888316328	WITHOUT_CLASSIFICATION	2.111683671983878E-6	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999982381163864	WITHOUT_CLASSIFICATION	1.761883613500674E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999917785582076	WITHOUT_CLASSIFICATION	8.221441792413543E-6	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999950792775439	WITHOUT_CLASSIFICATION	4.920722456104308E-6	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999948683631666	WITHOUT_CLASSIFICATION	5.13163683331857E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9998016748144033	WITHOUT_CLASSIFICATION	1.9832518559676125E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999972624333893	WITHOUT_CLASSIFICATION	2.7375666107069134E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999972624333893	WITHOUT_CLASSIFICATION	2.7375666107069134E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999982910950076	WITHOUT_CLASSIFICATION	1.7089049923481769E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999946445261165	WITHOUT_CLASSIFICATION	5.355473883453374E-6	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999997944035713	WITHOUT_CLASSIFICATION	2.0559642863717908E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996537498052035	WITHOUT_CLASSIFICATION	3.4625019479649874E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999776452591005	WITHOUT_CLASSIFICATION	2.2354740899448007E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999776452591005	WITHOUT_CLASSIFICATION	2.2354740899448007E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999776452591005	WITHOUT_CLASSIFICATION	2.2354740899448007E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999960638084355	WITHOUT_CLASSIFICATION	3.9361915645109514E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999478921469199	WITHOUT_CLASSIFICATION	5.210785308013951E-5	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999980226254097	WITHOUT_CLASSIFICATION	1.9773745902570028E-6	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999995283584193	WITHOUT_CLASSIFICATION	4.7164158056065123E-7	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999995464772208	WITHOUT_CLASSIFICATION	4.535227791568693E-7	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999987265015092	WITHOUT_CLASSIFICATION	1.2734984907087036E-6	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999986638696299	WITHOUT_CLASSIFICATION	1.3361303701189627E-6	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999989679068064	WITHOUT_CLASSIFICATION	1.0320931935262705E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999991419394592	WITHOUT_CLASSIFICATION	8.58060540859533E-7	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999952068886162	WITHOUT_CLASSIFICATION	4.793111383862444E-6	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9998626212818461	WITHOUT_CLASSIFICATION	1.3737871815386443E-4	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999983042685152	WITHOUT_CLASSIFICATION	1.6957314848029385E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9992885258758435	WITHOUT_CLASSIFICATION	7.114741241565093E-4	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.999875048043364	WITHOUT_CLASSIFICATION	1.2495195663606948E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999326788664	WITHOUT_CLASSIFICATION	6.73211335646998E-8	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999834549090381	WITHOUT_CLASSIFICATION	1.6545090961861834E-5	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.999998866508712	WITHOUT_CLASSIFICATION	1.1334912881200785E-6	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999635560183321	WITHOUT_CLASSIFICATION	3.644398166797227E-5	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999988289468783	WITHOUT_CLASSIFICATION	1.1710531216645655E-6	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9821240416695826	WITHOUT_CLASSIFICATION	0.01787595833041735	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9976189255712684	WITHOUT_CLASSIFICATION	0.0023810744287315797	DEFECT
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9923231521274429	WITHOUT_CLASSIFICATION	0.007676847872557107	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9990790988657923	WITHOUT_CLASSIFICATION	9.209011342077775E-4	DEFECT
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9967899416480118	WITHOUT_CLASSIFICATION	0.003210058351988205	DEFECT
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9999988246022604	WITHOUT_CLASSIFICATION	1.1753977395388825E-6	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9993398895049999	WITHOUT_CLASSIFICATION	6.60110495000211E-4	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9998278582990003	WITHOUT_CLASSIFICATION	1.721417009996943E-4	DEFECT
// FIXME: not correct exception	DEFECT	0.9990881705834971	WITHOUT_CLASSIFICATION	9.118294165029558E-4	DEFECT
// XXX actually only on windows...	DEFECT	0.9999877189761072	WITHOUT_CLASSIFICATION	1.2281023892931074E-5	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.999814750697423	WITHOUT_CLASSIFICATION	1.852493025770762E-4	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9999828435664668	WITHOUT_CLASSIFICATION	1.7156433533189047E-5	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9970378407964537	WITHOUT_CLASSIFICATION	0.002962159203546247	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.8679757514451885	WITHOUT_CLASSIFICATION	0.1320242485548115	DEFECT
// TODO: sys fail	DEFECT	0.9863730743579356	WITHOUT_CLASSIFICATION	0.013626925642064244	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9964512657758289	WITHOUT_CLASSIFICATION	0.0035487342241710936	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9964512657758289	WITHOUT_CLASSIFICATION	0.0035487342241710936	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9996733836384608	WITHOUT_CLASSIFICATION	3.266163615392596E-4	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9999908543276981	WITHOUT_CLASSIFICATION	9.145672301904138E-6	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9998371205661293	WITHOUT_CLASSIFICATION	1.6287943387062638E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9997911581186122	WITHOUT_CLASSIFICATION	2.0884188138790242E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9997911581186122	WITHOUT_CLASSIFICATION	2.0884188138790242E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.999682100261899	WITHOUT_CLASSIFICATION	3.178997381010088E-4	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.8981537444112941	WITHOUT_CLASSIFICATION	0.10184625558870597	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9997715863323859	WITHOUT_CLASSIFICATION	2.2841366761401746E-4	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.9931126025927132	WITHOUT_CLASSIFICATION	0.006887397407286864	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.9606937402555117	WITHOUT_CLASSIFICATION	0.03930625974448834	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.9890093788494027	WITHOUT_CLASSIFICATION	0.010990621150597435	DEFECT
// TODO: proper sign	DEFECT	0.9959126854941701	WITHOUT_CLASSIFICATION	0.004087314505829946	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.996952445400027	WITHOUT_CLASSIFICATION	0.003047554599973041	DEFECT
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.9999587907272381	WITHOUT_CLASSIFICATION	4.120927276194381E-5	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9996216729387135	WITHOUT_CLASSIFICATION	3.7832706128640106E-4	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9998858814986898	WITHOUT_CLASSIFICATION	1.1411850131008258E-4	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9999065300972623	WITHOUT_CLASSIFICATION	9.346990273772017E-5	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.9898315216089064	WITHOUT_CLASSIFICATION	0.010168478391093588	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9210376040858244	WITHOUT_CLASSIFICATION	0.07896239591417561	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9981702514340516	WITHOUT_CLASSIFICATION	0.001829748565948446	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9999842996271198	WITHOUT_CLASSIFICATION	1.5700372880155625E-5	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9996398129550121	WITHOUT_CLASSIFICATION	3.6018704498790043E-4	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9999303908962511	WITHOUT_CLASSIFICATION	6.96091037488926E-5	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9999956565622825	WITHOUT_CLASSIFICATION	4.3434377175212074E-6	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9999089595454865	WITHOUT_CLASSIFICATION	9.104045451350257E-5	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9998884580494222	WITHOUT_CLASSIFICATION	1.1154195057788466E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9998884580494222	WITHOUT_CLASSIFICATION	1.1154195057788466E-4	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9999893657876293	WITHOUT_CLASSIFICATION	1.0634212370659676E-5	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9998314917496594	WITHOUT_CLASSIFICATION	1.6850825034069638E-4	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9998534602623427	WITHOUT_CLASSIFICATION	1.46539737657339E-4	DEFECT
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9999083926564073	WITHOUT_CLASSIFICATION	9.160734359279643E-5	DEFECT
// FIXME: This is wrong	DEFECT	0.9974556611894367	WITHOUT_CLASSIFICATION	0.0025443388105632248	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9999886242488378	WITHOUT_CLASSIFICATION	1.1375751162210983E-5	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999894844584467	WITHOUT_CLASSIFICATION	1.0515541553197621E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9968747696452354	WITHOUT_CLASSIFICATION	0.0031252303547647238	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9999622993609464	WITHOUT_CLASSIFICATION	3.770063905364933E-5	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9999914987096988	WITHOUT_CLASSIFICATION	8.501290301063377E-6	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9995837570854657	WITHOUT_CLASSIFICATION	4.1624291453432635E-4	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9985823673525189	WITHOUT_CLASSIFICATION	0.0014176326474811456	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9985823673525189	WITHOUT_CLASSIFICATION	0.0014176326474811456	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9982074096499705	WITHOUT_CLASSIFICATION	0.0017925903500295582	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999493331042204	WITHOUT_CLASSIFICATION	5.066689577965585E-5	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.999529145817247	WITHOUT_CLASSIFICATION	4.708541827530627E-4	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9996653235115933	WITHOUT_CLASSIFICATION	3.346764884065824E-4	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9963951843695239	WITHOUT_CLASSIFICATION	0.0036048156304761634	DEFECT
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.978997403529221	WITHOUT_CLASSIFICATION	0.02100259647077888	DEFECT
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9999606798592571	WITHOUT_CLASSIFICATION	3.9320140742878773E-5	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9992939816461331	WITHOUT_CLASSIFICATION	7.060183538668894E-4	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9999893657876293	WITHOUT_CLASSIFICATION	1.0634212370659676E-5	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9999662454142322	WITHOUT_CLASSIFICATION	3.375458576788108E-5	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9995557671053822	WITHOUT_CLASSIFICATION	4.4423289461781676E-4	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9983919150643423	WITHOUT_CLASSIFICATION	0.0016080849356576409	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.9931126025927132	WITHOUT_CLASSIFICATION	0.006887397407286864	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9952111430393172	WITHOUT_CLASSIFICATION	0.004788856960682749	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9999924906355548	WITHOUT_CLASSIFICATION	7.509364445222716E-6	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9999842996271198	WITHOUT_CLASSIFICATION	1.5700372880155625E-5	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9997200068693594	WITHOUT_CLASSIFICATION	2.799931306407045E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9995837570854657	WITHOUT_CLASSIFICATION	4.1624291453432635E-4	DEFECT
// TODO: we loose encoding information here, fix it	DEFECT	0.9248373604177017	WITHOUT_CLASSIFICATION	0.07516263958229827	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// TODO: don't require pop	DEFECT	0.9719808181120893	WITHOUT_CLASSIFICATION	0.02801918188791071	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9968747696452354	WITHOUT_CLASSIFICATION	0.0031252303547647238	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9999951152705959	WITHOUT_CLASSIFICATION	4.8847294041243524E-6	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9985823673525189	WITHOUT_CLASSIFICATION	0.0014176326474811456	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9985823673525189	WITHOUT_CLASSIFICATION	0.0014176326474811456	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999493331042204	WITHOUT_CLASSIFICATION	5.066689577965585E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999493331042204	WITHOUT_CLASSIFICATION	5.066689577965585E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999493331042204	WITHOUT_CLASSIFICATION	5.066689577965585E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999493331042204	WITHOUT_CLASSIFICATION	5.066689577965585E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999493331042204	WITHOUT_CLASSIFICATION	5.066689577965585E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999493331042204	WITHOUT_CLASSIFICATION	5.066689577965585E-5	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9996099314734456	WITHOUT_CLASSIFICATION	3.9006852655447654E-4	DEFECT
