// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999999979416037	WITHOUT_CLASSIFICATION	2.0583963649210726E-9	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999865779290716	WITHOUT_CLASSIFICATION	1.342207092839398E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997968135148336	WITHOUT_CLASSIFICATION	2.0318648516638073E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997968135148336	WITHOUT_CLASSIFICATION	2.0318648516638073E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999804860104412	WITHOUT_CLASSIFICATION	1.9513989558844115E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999804860104412	WITHOUT_CLASSIFICATION	1.9513989558844115E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998806528413304	WITHOUT_CLASSIFICATION	1.1934715866958369E-4	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.999999203431255	WITHOUT_CLASSIFICATION	7.965687448651618E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999803967861376	WITHOUT_CLASSIFICATION	1.9603213862378373E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999792114755246	WITHOUT_CLASSIFICATION	2.078852447529751E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998597802701982	WITHOUT_CLASSIFICATION	1.4021972980176757E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998597802701982	WITHOUT_CLASSIFICATION	1.4021972980176757E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999918689094403	WITHOUT_CLASSIFICATION	8.131090559627675E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999761191397634	WITHOUT_CLASSIFICATION	2.3880860236608377E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999761191397634	WITHOUT_CLASSIFICATION	2.3880860236608377E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999357345640906	WITHOUT_CLASSIFICATION	6.426543590944757E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999487900072642	WITHOUT_CLASSIFICATION	5.120999273587969E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999146645977769	WITHOUT_CLASSIFICATION	8.533540222309478E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999146645977769	WITHOUT_CLASSIFICATION	8.533540222309478E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999146645977769	WITHOUT_CLASSIFICATION	8.533540222309478E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999146645977769	WITHOUT_CLASSIFICATION	8.533540222309478E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999146645977769	WITHOUT_CLASSIFICATION	8.533540222309478E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999146645977769	WITHOUT_CLASSIFICATION	8.533540222309478E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999146645977769	WITHOUT_CLASSIFICATION	8.533540222309478E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999992549122825	WITHOUT_CLASSIFICATION	7.4508771750356906E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999992549122825	WITHOUT_CLASSIFICATION	7.4508771750356906E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999992549122825	WITHOUT_CLASSIFICATION	7.4508771750356906E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999992549122825	WITHOUT_CLASSIFICATION	7.4508771750356906E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999992549122825	WITHOUT_CLASSIFICATION	7.4508771750356906E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999992549122825	WITHOUT_CLASSIFICATION	7.4508771750356906E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999992549122825	WITHOUT_CLASSIFICATION	7.4508771750356906E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999386691001447	WITHOUT_CLASSIFICATION	6.133089985529507E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999386691001447	WITHOUT_CLASSIFICATION	6.133089985529507E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999386691001447	WITHOUT_CLASSIFICATION	6.133089985529507E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999386691001447	WITHOUT_CLASSIFICATION	6.133089985529507E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999386691001447	WITHOUT_CLASSIFICATION	6.133089985529507E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999386691001447	WITHOUT_CLASSIFICATION	6.133089985529507E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999488753269883	WITHOUT_CLASSIFICATION	5.1124673011666566E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999488753269883	WITHOUT_CLASSIFICATION	5.1124673011666566E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999488753269883	WITHOUT_CLASSIFICATION	5.1124673011666566E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999488753269883	WITHOUT_CLASSIFICATION	5.1124673011666566E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999488753269883	WITHOUT_CLASSIFICATION	5.1124673011666566E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999488753269883	WITHOUT_CLASSIFICATION	5.1124673011666566E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999129239751808	WITHOUT_CLASSIFICATION	8.70760248191411E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999129239751808	WITHOUT_CLASSIFICATION	8.70760248191411E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999129239751808	WITHOUT_CLASSIFICATION	8.70760248191411E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999129239751808	WITHOUT_CLASSIFICATION	8.70760248191411E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999129239751808	WITHOUT_CLASSIFICATION	8.70760248191411E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999129239751808	WITHOUT_CLASSIFICATION	8.70760248191411E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999129239751808	WITHOUT_CLASSIFICATION	8.70760248191411E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999934031431236	WITHOUT_CLASSIFICATION	6.596856876393255E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999934031431236	WITHOUT_CLASSIFICATION	6.596856876393255E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999934031431236	WITHOUT_CLASSIFICATION	6.596856876393255E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999934031431236	WITHOUT_CLASSIFICATION	6.596856876393255E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999941780814016	WITHOUT_CLASSIFICATION	5.821918598442393E-6	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999941780814016	WITHOUT_CLASSIFICATION	5.821918598442393E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999998630331847	WITHOUT_CLASSIFICATION	1.3696681529088215E-6	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999993796564798	WITHOUT_CLASSIFICATION	6.203435202193748E-7	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999976457426497	WITHOUT_CLASSIFICATION	2.3542573502763192E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999999233818682	WITHOUT_CLASSIFICATION	7.661813181298102E-8	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999992457387348	WITHOUT_CLASSIFICATION	7.542612651897925E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999998013191481	WITHOUT_CLASSIFICATION	1.9868085191254107E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999998013191481	WITHOUT_CLASSIFICATION	1.9868085191254107E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999998013191481	WITHOUT_CLASSIFICATION	1.9868085191254107E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999998013191481	WITHOUT_CLASSIFICATION	1.9868085191254107E-6	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9997982317198445	WITHOUT_CLASSIFICATION	2.0176828015551737E-4	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999384159441035	WITHOUT_CLASSIFICATION	6.158405589652089E-5	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999935570177635	WITHOUT_CLASSIFICATION	6.442982236601914E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999976655433953	WITHOUT_CLASSIFICATION	2.3344566046976565E-6	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999998093612387	WITHOUT_CLASSIFICATION	1.9063876136199186E-7	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999706518061635	WITHOUT_CLASSIFICATION	2.9348193836489344E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999946497277294	WITHOUT_CLASSIFICATION	5.350272270657357E-6	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999999563114674	WITHOUT_CLASSIFICATION	4.3688532619071015E-8	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999999323266003	WITHOUT_CLASSIFICATION	6.767339974176157E-8	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9999136175679592	WITHOUT_CLASSIFICATION	8.63824320408085E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999969731978154	WITHOUT_CLASSIFICATION	3.0268021845196186E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999957735527126	WITHOUT_CLASSIFICATION	4.226447287296612E-6	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9998985828399368	WITHOUT_CLASSIFICATION	1.0141716006313707E-4	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999999734317885	WITHOUT_CLASSIFICATION	2.6568211519991708E-8	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999928467972555	WITHOUT_CLASSIFICATION	7.153202744370837E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999870441443179	WITHOUT_CLASSIFICATION	1.2955855682094624E-5	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999634255248212	WITHOUT_CLASSIFICATION	3.657447517879847E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999998013191481	WITHOUT_CLASSIFICATION	1.9868085191254107E-6	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999770998134582	WITHOUT_CLASSIFICATION	2.2900186541814338E-5	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999995142412118	WITHOUT_CLASSIFICATION	4.857587882553965E-7	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999992035680806	WITHOUT_CLASSIFICATION	7.96431919407853E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999917448766797	WITHOUT_CLASSIFICATION	8.255123320307301E-6	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9998185049331215	WITHOUT_CLASSIFICATION	1.8149506687841697E-4	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999916182150757	WITHOUT_CLASSIFICATION	8.381784924376552E-6	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999999866558236	WITHOUT_CLASSIFICATION	1.3344176278622308E-8	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999999136851514	WITHOUT_CLASSIFICATION	8.631484859310751E-8	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999999527364388	WITHOUT_CLASSIFICATION	4.7263561192630414E-8	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.999247690252919	WITHOUT_CLASSIFICATION	7.52309747080958E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9992496648705852	WITHOUT_CLASSIFICATION	7.503351294148816E-4	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999977632107939	WITHOUT_CLASSIFICATION	2.236789206103108E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999962519739358	WITHOUT_CLASSIFICATION	3.7480260641299027E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999999417610304	WITHOUT_CLASSIFICATION	5.823896980222544E-8	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999931589188243	WITHOUT_CLASSIFICATION	6.841081175678554E-6	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999804511994252	WITHOUT_CLASSIFICATION	1.9548800574746795E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999950882703444	WITHOUT_CLASSIFICATION	4.9117296555425E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999986429570781	WITHOUT_CLASSIFICATION	1.3570429219485897E-6	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.999995720735627	WITHOUT_CLASSIFICATION	4.279264372981117E-6	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999995596056848	WITHOUT_CLASSIFICATION	4.403943152492216E-7	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.8680218975295234	WITHOUT_CLASSIFICATION	0.1319781024704766	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999972894310384	WITHOUT_CLASSIFICATION	2.7105689616616177E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999965259372016	WITHOUT_CLASSIFICATION	3.4740627984754754E-6	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999949979572086	WITHOUT_CLASSIFICATION	5.0020427913784065E-6	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999841263033057	WITHOUT_CLASSIFICATION	1.587369669434409E-5	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9998844609118391	WITHOUT_CLASSIFICATION	1.1553908816097272E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999978805994016	WITHOUT_CLASSIFICATION	2.1194005983344114E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999980467162175	WITHOUT_CLASSIFICATION	1.9532837825801102E-6	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999998509124705	WITHOUT_CLASSIFICATION	1.490875295909555E-7	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999992931738914	WITHOUT_CLASSIFICATION	7.068261086237863E-7	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999673819285316	WITHOUT_CLASSIFICATION	3.2618071468440634E-5	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999990422035898	WITHOUT_CLASSIFICATION	9.577964102290407E-7	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999968611092941	WITHOUT_CLASSIFICATION	3.1388907058571886E-6	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999957840533094	WITHOUT_CLASSIFICATION	4.215946690632274E-6	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999088677782635	WITHOUT_CLASSIFICATION	9.113222173658724E-5	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999996663056325	WITHOUT_CLASSIFICATION	3.3369436737679136E-7	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999987443366424	WITHOUT_CLASSIFICATION	1.2556633576120555E-6	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999997268948999	WITHOUT_CLASSIFICATION	2.731051001048005E-7	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999999850131323	WITHOUT_CLASSIFICATION	1.498686781418839E-8	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999977209394392	WITHOUT_CLASSIFICATION	2.2790605608888687E-6	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.999994632522025	WITHOUT_CLASSIFICATION	5.367477975004195E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999946890461915	WITHOUT_CLASSIFICATION	5.310953808539198E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9988327241542456	WITHOUT_CLASSIFICATION	0.0011672758457543933	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999930879606139	WITHOUT_CLASSIFICATION	6.912039386111746E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999930879606139	WITHOUT_CLASSIFICATION	6.912039386111746E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999999719007008	WITHOUT_CLASSIFICATION	2.8099299179054856E-8	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999996024964998	WITHOUT_CLASSIFICATION	3.9750350031288386E-7	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999938083543185	WITHOUT_CLASSIFICATION	6.19164568153044E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9992416392247057	WITHOUT_CLASSIFICATION	7.583607752943746E-4	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999929787192393	WITHOUT_CLASSIFICATION	7.02128076074421E-6	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9998362459190062	WITHOUT_CLASSIFICATION	1.6375408099382764E-4	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999772427101035	WITHOUT_CLASSIFICATION	2.2757289896515094E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999840953160474	WITHOUT_CLASSIFICATION	1.5904683952682913E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999946890461915	WITHOUT_CLASSIFICATION	5.310953808539198E-6	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999996489157955	WITHOUT_CLASSIFICATION	3.5108420452144454E-7	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999923970690542	WITHOUT_CLASSIFICATION	7.602930945822737E-6	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999998006021349	WITHOUT_CLASSIFICATION	1.9939786508263157E-7	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999999975298001	WITHOUT_CLASSIFICATION	2.4701999131779235E-9	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.999999996563867	WITHOUT_CLASSIFICATION	3.4361331744455193E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999790966665	WITHOUT_CLASSIFICATION	2.0903333468018442E-8	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999790966665	WITHOUT_CLASSIFICATION	2.0903333468018442E-8	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999790966665	WITHOUT_CLASSIFICATION	2.0903333468018442E-8	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999996553684404	WITHOUT_CLASSIFICATION	3.446315596629909E-7	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999944837011	WITHOUT_CLASSIFICATION	5.51629888504207E-9	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999997599302957	WITHOUT_CLASSIFICATION	2.4006970432541676E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9347528729222696	WITHOUT_CLASSIFICATION	0.06524712707773037	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999703321005621	WITHOUT_CLASSIFICATION	2.9667899438011418E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999999620819611	WITHOUT_CLASSIFICATION	3.791803882739113E-8	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9997746123922631	WITHOUT_CLASSIFICATION	2.2538760773680252E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999995963138819	WITHOUT_CLASSIFICATION	4.036861180634686E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999991507833946	WITHOUT_CLASSIFICATION	8.492166053588599E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999991507833946	WITHOUT_CLASSIFICATION	8.492166053588599E-7	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999994699965715	WITHOUT_CLASSIFICATION	5.300034284696753E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999926591877	WITHOUT_CLASSIFICATION	7.34081240152648E-9	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999932095075242	WITHOUT_CLASSIFICATION	6.790492475717241E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999932095075242	WITHOUT_CLASSIFICATION	6.790492475717241E-6	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999971419932454	WITHOUT_CLASSIFICATION	2.85800675459925E-6	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999999647875613	WITHOUT_CLASSIFICATION	3.521243864237749E-8	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999924160596435	WITHOUT_CLASSIFICATION	7.583940356387156E-6	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999997460605886	WITHOUT_CLASSIFICATION	2.539394114612914E-7	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999921063420425	WITHOUT_CLASSIFICATION	7.893657957449578E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999982970549509	WITHOUT_CLASSIFICATION	1.7029450491291978E-6	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999982394015924	WITHOUT_CLASSIFICATION	1.7605984075671391E-6	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999806105322891	WITHOUT_CLASSIFICATION	1.9389467710942445E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.999998254671281	WITHOUT_CLASSIFICATION	1.7453287190802076E-6	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999982877830202	WITHOUT_CLASSIFICATION	1.7122169797399891E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999946890461915	WITHOUT_CLASSIFICATION	5.310953808539198E-6	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999979833872316	WITHOUT_CLASSIFICATION	2.0166127684775818E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999629256235	WITHOUT_CLASSIFICATION	3.707437640247052E-8	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999967674579266	WITHOUT_CLASSIFICATION	3.232542073377508E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.7973526362902148	WITHOUT_CLASSIFICATION	0.20264736370978512	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999692246903811	WITHOUT_CLASSIFICATION	3.0775309618885885E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999671499061537	WITHOUT_CLASSIFICATION	3.285009384633595E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999364344364176	WITHOUT_CLASSIFICATION	6.356556358248078E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.999911820392387	WITHOUT_CLASSIFICATION	8.817960761307999E-5	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999995753937351	WITHOUT_CLASSIFICATION	4.2460626489600764E-7	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999703330898156	WITHOUT_CLASSIFICATION	2.9666910184410382E-5	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999997792060799	WITHOUT_CLASSIFICATION	2.2079392010257618E-7	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999989360417081	WITHOUT_CLASSIFICATION	1.063958291860574E-6	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999991393490323	WITHOUT_CLASSIFICATION	8.606509676331987E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997540406462	WITHOUT_CLASSIFICATION	2.4595935381398844E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.99999836008019	WITHOUT_CLASSIFICATION	1.6399198100132557E-6	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999973201201886	WITHOUT_CLASSIFICATION	2.6798798114018334E-6	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999999841107989	WITHOUT_CLASSIFICATION	1.5889201014982007E-8	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999999917610322	WITHOUT_CLASSIFICATION	8.238967774148587E-9	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999997210165957	WITHOUT_CLASSIFICATION	2.789834042377205E-7	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999977996386	WITHOUT_CLASSIFICATION	2.200361403175667E-9	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999949267423904	WITHOUT_CLASSIFICATION	5.07325760954135E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999998611025883	WITHOUT_CLASSIFICATION	1.3889741166318478E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999999383157453	WITHOUT_CLASSIFICATION	6.168425468597983E-8	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999997314838438	WITHOUT_CLASSIFICATION	2.6851615621488914E-7	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999907502362166	WITHOUT_CLASSIFICATION	9.249763783348619E-6	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999924391558913	WITHOUT_CLASSIFICATION	7.560844108638839E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.999993837445911	WITHOUT_CLASSIFICATION	6.162554089118127E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999996955643136	WITHOUT_CLASSIFICATION	3.0443568642932147E-7	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999992818903071	WITHOUT_CLASSIFICATION	7.181096928457026E-7	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999996607571354	WITHOUT_CLASSIFICATION	3.392428645528223E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999773726071395	WITHOUT_CLASSIFICATION	2.2627392860528267E-5	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.999999815674983	WITHOUT_CLASSIFICATION	1.8432501703930954E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999946370969856	WITHOUT_CLASSIFICATION	5.3629030144382846E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999833024934633	WITHOUT_CLASSIFICATION	1.6697506536545167E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999991847914497	WITHOUT_CLASSIFICATION	8.152085504171864E-7	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999981360043781	WITHOUT_CLASSIFICATION	1.863995621827096E-6	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999985405079849	WITHOUT_CLASSIFICATION	1.4594920151905734E-6	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999932606322924	WITHOUT_CLASSIFICATION	6.739367707547093E-6	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999999905159733	WITHOUT_CLASSIFICATION	9.484026691063593E-9	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999938385959196	WITHOUT_CLASSIFICATION	6.161404080414961E-6	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999999512846328	WITHOUT_CLASSIFICATION	4.871536718083257E-8	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999999456927962	WITHOUT_CLASSIFICATION	5.4307203852777445E-8	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.999999979543797	WITHOUT_CLASSIFICATION	2.045620286891833E-8	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999999553405825	WITHOUT_CLASSIFICATION	4.4659417573668284E-8	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999887250901109	WITHOUT_CLASSIFICATION	1.127490988904055E-5	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999996708649153	WITHOUT_CLASSIFICATION	3.2913508475029146E-7	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999991744524315	WITHOUT_CLASSIFICATION	8.255475685370135E-7	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999992863853715	WITHOUT_CLASSIFICATION	7.136146284137201E-7	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.999997418386839	WITHOUT_CLASSIFICATION	2.5816131609854007E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999999054690292	WITHOUT_CLASSIFICATION	9.45309708478739E-8	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999980616365897	WITHOUT_CLASSIFICATION	1.9383634103304703E-6	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999890730528037	WITHOUT_CLASSIFICATION	1.0926947196305116E-5	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999977059741834	WITHOUT_CLASSIFICATION	2.2940258166774087E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999995969729566	WITHOUT_CLASSIFICATION	4.0302704332741963E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999967262315325	WITHOUT_CLASSIFICATION	3.273768467551856E-6	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.999993071161847	WITHOUT_CLASSIFICATION	6.928838153058651E-6	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9999992450667243	WITHOUT_CLASSIFICATION	7.549332756736871E-7	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.99998393437847	WITHOUT_CLASSIFICATION	1.6065621529998817E-5	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.999999911160117	WITHOUT_CLASSIFICATION	8.883988298911351E-8	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999999406799251	WITHOUT_CLASSIFICATION	5.9320074800520226E-8	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999951638805464	WITHOUT_CLASSIFICATION	4.8361194536021E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999951638805464	WITHOUT_CLASSIFICATION	4.8361194536021E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999975694136763	WITHOUT_CLASSIFICATION	2.4305863236197915E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999975694136763	WITHOUT_CLASSIFICATION	2.4305863236197915E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999949222649089	WITHOUT_CLASSIFICATION	5.077735091061397E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999949222649089	WITHOUT_CLASSIFICATION	5.077735091061397E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999905633364592	WITHOUT_CLASSIFICATION	9.436663540889117E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999905633364592	WITHOUT_CLASSIFICATION	9.436663540889117E-6	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999982903827493	WITHOUT_CLASSIFICATION	1.709617250620056E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999998122797052	WITHOUT_CLASSIFICATION	1.877202947010338E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999953935464272	WITHOUT_CLASSIFICATION	4.606453572834924E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999528073432993	WITHOUT_CLASSIFICATION	4.7192656700683644E-5	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999047711285212	WITHOUT_CLASSIFICATION	9.522887147882228E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9989930636491868	WITHOUT_CLASSIFICATION	0.0010069363508131493	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999985921141857	WITHOUT_CLASSIFICATION	1.4078858142502268E-6	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.999999811750098	WITHOUT_CLASSIFICATION	1.8824990197500014E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999999065163974	WITHOUT_CLASSIFICATION	9.34836027394089E-8	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999998833819972	WITHOUT_CLASSIFICATION	1.1661800270394366E-7	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.999999978716141	WITHOUT_CLASSIFICATION	2.1283859017218772E-8	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999999415758793	WITHOUT_CLASSIFICATION	5.842412057240415E-8	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999997925491428	WITHOUT_CLASSIFICATION	2.074508571627573E-7	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.999999994498786	WITHOUT_CLASSIFICATION	5.5012141138956E-9	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.999999611853292	WITHOUT_CLASSIFICATION	3.881467080072259E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999991605665453	WITHOUT_CLASSIFICATION	8.394334547016156E-7	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.999999712038483	WITHOUT_CLASSIFICATION	2.879615169511817E-7	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999989581454708	WITHOUT_CLASSIFICATION	1.041854529284566E-6	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999860359733687	WITHOUT_CLASSIFICATION	1.3964026631301033E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9989216020043733	WITHOUT_CLASSIFICATION	0.0010783979956267209	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999997836899565	WITHOUT_CLASSIFICATION	2.16310043501067E-7	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999996736077696	WITHOUT_CLASSIFICATION	3.263922304244323E-7	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999993801937647	WITHOUT_CLASSIFICATION	6.198062353162962E-7	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999719861071568	WITHOUT_CLASSIFICATION	2.801389284325734E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999950191826721	WITHOUT_CLASSIFICATION	4.980817327900167E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999251389949	WITHOUT_CLASSIFICATION	7.486100509821376E-8	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999968809612512	WITHOUT_CLASSIFICATION	3.1190387489568182E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999994929548761	WITHOUT_CLASSIFICATION	5.070451238424348E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999994929548761	WITHOUT_CLASSIFICATION	5.070451238424348E-7	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.999999959329514	WITHOUT_CLASSIFICATION	4.0670486019797425E-8	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.999999478597694	WITHOUT_CLASSIFICATION	5.214023060414075E-7	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999988905284668	WITHOUT_CLASSIFICATION	1.109471533218796E-6	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999908838845426	WITHOUT_CLASSIFICATION	9.116115457504169E-6	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999957791905982	WITHOUT_CLASSIFICATION	4.2208094018053174E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.999999238233857	WITHOUT_CLASSIFICATION	7.617661431025137E-7	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999895700026027	WITHOUT_CLASSIFICATION	1.0429997397325436E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999895700026027	WITHOUT_CLASSIFICATION	1.0429997397325436E-5	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999998633662065	WITHOUT_CLASSIFICATION	1.3663379345911348E-7	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9995511529160646	WITHOUT_CLASSIFICATION	4.488470839353971E-4	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.999999134242816	WITHOUT_CLASSIFICATION	8.657571839972859E-7	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.999999134242816	WITHOUT_CLASSIFICATION	8.657571839972859E-7	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9999964943476303	WITHOUT_CLASSIFICATION	3.505652369723931E-6	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9990227858968446	WITHOUT_CLASSIFICATION	9.772141031554836E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9990227858968446	WITHOUT_CLASSIFICATION	9.772141031554836E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999992959169226	WITHOUT_CLASSIFICATION	7.040830774724533E-7	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999992959169226	WITHOUT_CLASSIFICATION	7.040830774724533E-7	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999844877572195	WITHOUT_CLASSIFICATION	1.5512242780588937E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999844877572195	WITHOUT_CLASSIFICATION	1.5512242780588937E-5	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999944000144257	WITHOUT_CLASSIFICATION	5.599985574289671E-6	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999993745623103	WITHOUT_CLASSIFICATION	6.25437689833172E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999998619062442	WITHOUT_CLASSIFICATION	1.3809375568169045E-7	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999957195149762	WITHOUT_CLASSIFICATION	4.280485023763078E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999999689419942	WITHOUT_CLASSIFICATION	3.1058005801700436E-8	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999995517036092	WITHOUT_CLASSIFICATION	4.482963907936771E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999957580060069	WITHOUT_CLASSIFICATION	4.24199399309115E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999938538594325	WITHOUT_CLASSIFICATION	6.1461405675466825E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999957580060069	WITHOUT_CLASSIFICATION	4.24199399309115E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999948855432292	WITHOUT_CLASSIFICATION	5.114456770779447E-6	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999994640647184	WITHOUT_CLASSIFICATION	5.359352815954289E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999999029023011	WITHOUT_CLASSIFICATION	9.709769891834341E-8	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999819873565503	WITHOUT_CLASSIFICATION	1.8012643449735367E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999999316339944	WITHOUT_CLASSIFICATION	6.83660057009568E-8	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999466033568561	WITHOUT_CLASSIFICATION	5.339664314398168E-5	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999954859389252	WITHOUT_CLASSIFICATION	4.5140610748405275E-6	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999996563553958	WITHOUT_CLASSIFICATION	3.436446042636595E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999983360197462	WITHOUT_CLASSIFICATION	1.6639802538640049E-6	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999993459536917	WITHOUT_CLASSIFICATION	6.540463083568203E-7	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999995284887262	WITHOUT_CLASSIFICATION	4.715112737611102E-7	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999997739332969	WITHOUT_CLASSIFICATION	2.260667030642177E-7	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999941999966842	WITHOUT_CLASSIFICATION	5.800003315814964E-6	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999997677285744	WITHOUT_CLASSIFICATION	2.3227142574476363E-7	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999975748149506	WITHOUT_CLASSIFICATION	2.425185049466191E-6	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999998764443474	WITHOUT_CLASSIFICATION	1.2355565266872272E-7	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999821040750391	WITHOUT_CLASSIFICATION	1.789592496095833E-5	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999998836905825	WITHOUT_CLASSIFICATION	1.1630941760078115E-7	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999989912118964	WITHOUT_CLASSIFICATION	1.0087881035222266E-6	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.999999104703114	WITHOUT_CLASSIFICATION	8.952968858669198E-7	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999810801935853	WITHOUT_CLASSIFICATION	1.891980641468999E-5	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999005268304	WITHOUT_CLASSIFICATION	9.947316957051754E-8	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999966992614592	WITHOUT_CLASSIFICATION	3.30073854089391E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999951350433623	WITHOUT_CLASSIFICATION	4.864956637552256E-6	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999996081556979	WITHOUT_CLASSIFICATION	3.918443020865477E-7	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.999999933983601	WITHOUT_CLASSIFICATION	6.601639897189818E-8	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999999967231556	WITHOUT_CLASSIFICATION	3.2768443815312694E-9	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999999909692888	WITHOUT_CLASSIFICATION	9.030711265613219E-9	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999993671557468	WITHOUT_CLASSIFICATION	6.328442530988667E-7	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999995049271081	WITHOUT_CLASSIFICATION	4.950728918047762E-7	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999993284965691	WITHOUT_CLASSIFICATION	6.715034309595503E-7	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999999457272419	WITHOUT_CLASSIFICATION	5.427275794124664E-8	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999999198594738	WITHOUT_CLASSIFICATION	8.014052624323537E-8	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999987372489836	WITHOUT_CLASSIFICATION	1.262751016385628E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999968534455955	WITHOUT_CLASSIFICATION	3.1465544044481E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.999998313067523	WITHOUT_CLASSIFICATION	1.686932477045154E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999993430203267	WITHOUT_CLASSIFICATION	6.569796732560821E-7	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999990482313813	WITHOUT_CLASSIFICATION	9.517686187474945E-7	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999997070918766	WITHOUT_CLASSIFICATION	2.9290812338139635E-7	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999984902107608	WITHOUT_CLASSIFICATION	1.5097892391698652E-6	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999999341982322	WITHOUT_CLASSIFICATION	6.580176782297284E-8	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999939003475523	WITHOUT_CLASSIFICATION	6.099652447667409E-6	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999990587350686	WITHOUT_CLASSIFICATION	9.412649313287731E-7	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999995169284632	WITHOUT_CLASSIFICATION	4.830715368639774E-7	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999999119900335	WITHOUT_CLASSIFICATION	8.800996645828867E-8	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999998636989056	WITHOUT_CLASSIFICATION	1.363010944722662E-7	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999998542327095	WITHOUT_CLASSIFICATION	1.4576729041926967E-7	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999991779612893	WITHOUT_CLASSIFICATION	8.220387105619256E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999992638003039	WITHOUT_CLASSIFICATION	7.361996961823507E-7	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999992982998369	WITHOUT_CLASSIFICATION	7.017001629720572E-7	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999992589215381	WITHOUT_CLASSIFICATION	7.410784619006769E-7	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999999902782745	WITHOUT_CLASSIFICATION	9.72172555092241E-9	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9997856470189708	WITHOUT_CLASSIFICATION	2.143529810292062E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.999999750935385	WITHOUT_CLASSIFICATION	2.49064615016242E-7	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999854387327	WITHOUT_CLASSIFICATION	1.4561267233515345E-8	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999854387327	WITHOUT_CLASSIFICATION	1.4561267233515345E-8	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999916456718089	WITHOUT_CLASSIFICATION	8.354328191152731E-6	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999679106371788	WITHOUT_CLASSIFICATION	3.2089362821214164E-5	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999994590821445	WITHOUT_CLASSIFICATION	5.409178555819162E-7	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999965571222604	WITHOUT_CLASSIFICATION	3.442877739534236E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999075657458056	WITHOUT_CLASSIFICATION	9.243425419430385E-5	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999971048348699	WITHOUT_CLASSIFICATION	2.8951651300936274E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.999975527603332	WITHOUT_CLASSIFICATION	2.447239666804671E-5	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999998916857042	WITHOUT_CLASSIFICATION	1.0831429576249089E-7	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999996157553903	WITHOUT_CLASSIFICATION	3.842446097470719E-7	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999998337222346	WITHOUT_CLASSIFICATION	1.6627776545776826E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999989515755205	WITHOUT_CLASSIFICATION	1.0484244794712279E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999989515755205	WITHOUT_CLASSIFICATION	1.0484244794712279E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999981591829322	WITHOUT_CLASSIFICATION	1.8408170677754976E-6	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999950129294982	WITHOUT_CLASSIFICATION	4.987070501704264E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9998679389572156	WITHOUT_CLASSIFICATION	1.320610427844321E-4	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999980696404195	WITHOUT_CLASSIFICATION	1.9303595804959824E-6	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999961623730819	WITHOUT_CLASSIFICATION	3.837626918200186E-6	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999999680270135	WITHOUT_CLASSIFICATION	3.197298648879426E-8	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.99999957847535	WITHOUT_CLASSIFICATION	4.215246499711292E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999993489648769	WITHOUT_CLASSIFICATION	6.510351232350956E-7	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999994887375387	WITHOUT_CLASSIFICATION	5.112624612147844E-7	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999992597031628	WITHOUT_CLASSIFICATION	7.402968371953383E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999997247869946	WITHOUT_CLASSIFICATION	2.752130054001217E-7	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999996704612776	WITHOUT_CLASSIFICATION	3.2953872242446663E-7	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999878724610812	WITHOUT_CLASSIFICATION	1.2127538918729105E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999878724610812	WITHOUT_CLASSIFICATION	1.2127538918729105E-5	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999923618834288	WITHOUT_CLASSIFICATION	7.638116571203503E-6	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999927270441148	WITHOUT_CLASSIFICATION	7.272955885208145E-6	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999855928086442	WITHOUT_CLASSIFICATION	1.4407191355799486E-5	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999978393812793	WITHOUT_CLASSIFICATION	2.160618720630952E-6	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999994427084581	WITHOUT_CLASSIFICATION	5.572915419443038E-7	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999997100768416	WITHOUT_CLASSIFICATION	2.8992315841720265E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999896821187068	WITHOUT_CLASSIFICATION	1.0317881293299398E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999991230023862	WITHOUT_CLASSIFICATION	8.769976138275436E-7	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9999510784558181	WITHOUT_CLASSIFICATION	4.892154418184849E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999999602290405	WITHOUT_CLASSIFICATION	3.9770959548815876E-8	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9998679389572156	WITHOUT_CLASSIFICATION	1.320610427844321E-4	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.999985300934705	WITHOUT_CLASSIFICATION	1.4699065294986882E-5	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999946321083734	WITHOUT_CLASSIFICATION	5.367891626569027E-6	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999999697943609	WITHOUT_CLASSIFICATION	3.020563916898511E-8	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999999773958518	WITHOUT_CLASSIFICATION	2.2604148184635804E-8	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999999939806935	WITHOUT_CLASSIFICATION	6.0193064673475144E-9	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999860063388629	WITHOUT_CLASSIFICATION	1.3993661137213286E-5	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999998394824812	WITHOUT_CLASSIFICATION	1.6051751890245607E-7	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999956765136451	WITHOUT_CLASSIFICATION	4.3234863549131104E-6	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999991453700562	WITHOUT_CLASSIFICATION	8.546299437763424E-7	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.999997376755332	WITHOUT_CLASSIFICATION	2.623244668075647E-6	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999959156385675	WITHOUT_CLASSIFICATION	4.084361432462084E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999968079310518	WITHOUT_CLASSIFICATION	3.1920689481816466E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999990384931332	WITHOUT_CLASSIFICATION	9.615068667404086E-7	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9998331241907233	WITHOUT_CLASSIFICATION	1.6687580927661225E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999986067868953	WITHOUT_CLASSIFICATION	1.393213104751979E-6	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999997077798352	WITHOUT_CLASSIFICATION	2.9222016488796737E-7	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999991309265885	WITHOUT_CLASSIFICATION	8.690734114459883E-7	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999996442155049	WITHOUT_CLASSIFICATION	3.557844952026261E-7	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999947535224697	WITHOUT_CLASSIFICATION	5.24647753038265E-6	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999962614306358	WITHOUT_CLASSIFICATION	3.7385693642115523E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9986378950420979	WITHOUT_CLASSIFICATION	0.0013621049579021036	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999989149126726	WITHOUT_CLASSIFICATION	1.0850873275332107E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999779770041168	WITHOUT_CLASSIFICATION	2.202299588312277E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9993076948480955	WITHOUT_CLASSIFICATION	6.923051519045605E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.999996119569108	WITHOUT_CLASSIFICATION	3.880430891886466E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999999998958649	WITHOUT_CLASSIFICATION	1.0413512555679374E-10	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.999942196559183	WITHOUT_CLASSIFICATION	5.7803440816949846E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999970143381555	WITHOUT_CLASSIFICATION	2.9856618445302974E-6	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999991832433541	WITHOUT_CLASSIFICATION	8.167566459734413E-7	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9998769405620727	WITHOUT_CLASSIFICATION	1.2305943792735195E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999860246737491	WITHOUT_CLASSIFICATION	1.3975326250944826E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999860246737491	WITHOUT_CLASSIFICATION	1.3975326250944826E-5	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999975503965091	WITHOUT_CLASSIFICATION	2.4496034908652073E-6	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999945853708008	WITHOUT_CLASSIFICATION	5.414629199236993E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999999758323529	WITHOUT_CLASSIFICATION	2.4167647029979168E-8	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999952939266193	WITHOUT_CLASSIFICATION	4.706073380582988E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999987522985082	WITHOUT_CLASSIFICATION	1.247701491851264E-6	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999993898372805	WITHOUT_CLASSIFICATION	6.101627194466175E-7	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999946890461915	WITHOUT_CLASSIFICATION	5.310953808539198E-6	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999991174820168	WITHOUT_CLASSIFICATION	8.825179832333734E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999970549791436	WITHOUT_CLASSIFICATION	2.9450208564363685E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.999997263764731	WITHOUT_CLASSIFICATION	2.7362352689762052E-6	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999970127689383	WITHOUT_CLASSIFICATION	2.9872310617221035E-6	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.999999933579426	WITHOUT_CLASSIFICATION	6.642057404638682E-8	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999592152332508	WITHOUT_CLASSIFICATION	4.078476674915555E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999938385959196	WITHOUT_CLASSIFICATION	6.161404080414961E-6	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999918997001689	WITHOUT_CLASSIFICATION	8.10029983109722E-6	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999972080781228	WITHOUT_CLASSIFICATION	2.7919218771112624E-6	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999259728145843	WITHOUT_CLASSIFICATION	7.402718541575464E-5	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999999731866822	WITHOUT_CLASSIFICATION	2.68133178228903E-8	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999998489390147	WITHOUT_CLASSIFICATION	1.510609852678404E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999902556823822	WITHOUT_CLASSIFICATION	9.744317617673687E-6	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999557076981	WITHOUT_CLASSIFICATION	4.4292301943589254E-8	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999557076981	WITHOUT_CLASSIFICATION	4.4292301943589254E-8	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999994876988042	WITHOUT_CLASSIFICATION	5.123011958673829E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999999965219899	WITHOUT_CLASSIFICATION	3.4780101770956035E-9	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999962249197778	WITHOUT_CLASSIFICATION	3.775080222136001E-6	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999997879953665	WITHOUT_CLASSIFICATION	2.1200463355632263E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999999674371851	WITHOUT_CLASSIFICATION	3.256281490755093E-8	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999999532048397	WITHOUT_CLASSIFICATION	4.6795160302156976E-8	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999996196298527	WITHOUT_CLASSIFICATION	3.803701472392556E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999688140863	WITHOUT_CLASSIFICATION	3.118591369872163E-8	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999989006148542	WITHOUT_CLASSIFICATION	1.0993851458260568E-6	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999999998658927	WITHOUT_CLASSIFICATION	1.3410730790378174E-10	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999996302869648	WITHOUT_CLASSIFICATION	3.697130352074232E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999619862941533	WITHOUT_CLASSIFICATION	3.801370584653803E-5	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.999999992809827	WITHOUT_CLASSIFICATION	7.1901729668354895E-9	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999931756062	WITHOUT_CLASSIFICATION	6.824393879869747E-9	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999999673368148	WITHOUT_CLASSIFICATION	3.2663185164669725E-8	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999822821725075	WITHOUT_CLASSIFICATION	1.7717827492564376E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999985186480562	WITHOUT_CLASSIFICATION	1.4813519437506575E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999994767534981	WITHOUT_CLASSIFICATION	5.232465019590301E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999632588325615	WITHOUT_CLASSIFICATION	3.674116743837953E-5	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999993675887091	WITHOUT_CLASSIFICATION	6.324112908178589E-7	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9999082418429014	WITHOUT_CLASSIFICATION	9.175815709859083E-5	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999950862087564	WITHOUT_CLASSIFICATION	4.91379124361757E-6	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.999999953035325	WITHOUT_CLASSIFICATION	4.6964675082027296E-8	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9563165181293175	WITHOUT_CLASSIFICATION	0.04368348187068247	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999942338439421	WITHOUT_CLASSIFICATION	5.766156057808096E-6	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.999999577653695	WITHOUT_CLASSIFICATION	4.223463051282263E-7	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999972359768916	WITHOUT_CLASSIFICATION	2.7640231083706914E-6	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999976631329754	WITHOUT_CLASSIFICATION	2.3368670245613794E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999990732714218	WITHOUT_CLASSIFICATION	9.267285782833718E-7	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999980428529583	WITHOUT_CLASSIFICATION	1.957147041558752E-6	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.999999121474415	WITHOUT_CLASSIFICATION	8.785255849001654E-7	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.999995529678416	WITHOUT_CLASSIFICATION	4.470321584073121E-6	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999985583355538	WITHOUT_CLASSIFICATION	1.4416644461148967E-6	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999884447988026	WITHOUT_CLASSIFICATION	1.1555201197407783E-5	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9997784539576645	WITHOUT_CLASSIFICATION	2.2154604233551114E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.999926414445962	WITHOUT_CLASSIFICATION	7.358555403793072E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9995173311771296	WITHOUT_CLASSIFICATION	4.8266882287041515E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999996424269366	WITHOUT_CLASSIFICATION	3.5757306347710156E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.999992438757061	WITHOUT_CLASSIFICATION	7.561242938942026E-6	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999936091375417	WITHOUT_CLASSIFICATION	6.390862458370384E-6	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999974390212958	WITHOUT_CLASSIFICATION	2.5609787042566645E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999927098491597	WITHOUT_CLASSIFICATION	7.29015084037796E-6	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999975440147215	WITHOUT_CLASSIFICATION	2.455985278429841E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999819750291942	WITHOUT_CLASSIFICATION	1.8024970805894684E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999845041927473	WITHOUT_CLASSIFICATION	1.549580725269034E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999819750291942	WITHOUT_CLASSIFICATION	1.8024970805894684E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9536144191215407	WITHOUT_CLASSIFICATION	0.046385580878459294	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9997650630405176	WITHOUT_CLASSIFICATION	2.3493695948243804E-4	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999978185294748	WITHOUT_CLASSIFICATION	2.181470525313652E-6	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.978318711792174	WITHOUT_CLASSIFICATION	0.0216812882078261	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999841507652357	WITHOUT_CLASSIFICATION	1.58492347642879E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999579389979	WITHOUT_CLASSIFICATION	4.2061002066076805E-8	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999982852408663	WITHOUT_CLASSIFICATION	1.7147591336689849E-6	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9996238193701634	WITHOUT_CLASSIFICATION	3.7618062983663146E-4	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.999999985366379	WITHOUT_CLASSIFICATION	1.4633620891238179E-8	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9811072749818627	WITHOUT_CLASSIFICATION	0.018892725018137324	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9987944179741626	WITHOUT_CLASSIFICATION	0.001205582025837436	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999999839627846	WITHOUT_CLASSIFICATION	1.603721536542508E-8	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999993175864587	WITHOUT_CLASSIFICATION	6.824135413361731E-7	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999980194350213	WITHOUT_CLASSIFICATION	1.9805649786194373E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999971234798498	WITHOUT_CLASSIFICATION	2.876520150209679E-6	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9998518160886136	WITHOUT_CLASSIFICATION	1.4818391138648614E-4	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999956091750867	WITHOUT_CLASSIFICATION	4.390824913348923E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999940239551992	WITHOUT_CLASSIFICATION	5.976044800775363E-6	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.999998832400719	WITHOUT_CLASSIFICATION	1.1675992810744877E-6	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999968582236811	WITHOUT_CLASSIFICATION	3.1417763190126266E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999136643379317	WITHOUT_CLASSIFICATION	8.633566206825172E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999992557303521	WITHOUT_CLASSIFICATION	7.442696478745398E-7	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999808291869923	WITHOUT_CLASSIFICATION	1.9170813007723224E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999998944156141	WITHOUT_CLASSIFICATION	1.0558438592513234E-7	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999995686621155	WITHOUT_CLASSIFICATION	4.3133788458213853E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999771604298103	WITHOUT_CLASSIFICATION	2.2839570189764584E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999921088165401	WITHOUT_CLASSIFICATION	7.891183459847574E-6	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.999998445994995	WITHOUT_CLASSIFICATION	1.5540050050603588E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999969731978154	WITHOUT_CLASSIFICATION	3.0268021845196186E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999999922703264	WITHOUT_CLASSIFICATION	7.729673607346564E-9	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999752254404636	WITHOUT_CLASSIFICATION	2.477455953639753E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999504389600283	WITHOUT_CLASSIFICATION	4.956103997173116E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999764129811526	WITHOUT_CLASSIFICATION	2.358701884739626E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999995918087803	WITHOUT_CLASSIFICATION	4.081912196814212E-7	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999999615287146	WITHOUT_CLASSIFICATION	3.847128534990626E-8	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999996307011234	WITHOUT_CLASSIFICATION	3.6929887659807853E-7	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999986749573586	WITHOUT_CLASSIFICATION	1.3250426413725069E-6	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.999999985564858	WITHOUT_CLASSIFICATION	1.443514199240894E-8	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999996583862406	WITHOUT_CLASSIFICATION	3.416137594881756E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.999998470290577	WITHOUT_CLASSIFICATION	1.529709422989732E-6	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999862299591343	WITHOUT_CLASSIFICATION	1.3770040865551318E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999999440978926	WITHOUT_CLASSIFICATION	5.5902107363024025E-8	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999999824347349	WITHOUT_CLASSIFICATION	1.756526508172201E-8	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999927806089988	WITHOUT_CLASSIFICATION	7.2193910012931485E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999927806089988	WITHOUT_CLASSIFICATION	7.2193910012931485E-6	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999995341038307	WITHOUT_CLASSIFICATION	4.6589616924809175E-7	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999989684457964	WITHOUT_CLASSIFICATION	1.0315542035843884E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9975863053584025	WITHOUT_CLASSIFICATION	0.002413694641597403	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999985335320797	WITHOUT_CLASSIFICATION	1.4664679202434897E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999989230844128	WITHOUT_CLASSIFICATION	1.0769155871420177E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999992831438769	WITHOUT_CLASSIFICATION	7.168561231845035E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999990023923733	WITHOUT_CLASSIFICATION	9.976076267742185E-7	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999998495327885	WITHOUT_CLASSIFICATION	1.5046721145036789E-7	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999692231445	WITHOUT_CLASSIFICATION	3.077685554337513E-8	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.999999985263289	WITHOUT_CLASSIFICATION	1.4736711030541325E-8	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.999999973848867	WITHOUT_CLASSIFICATION	2.6151133049362026E-8	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999991554747631	WITHOUT_CLASSIFICATION	8.445252368531274E-7	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9998988842036983	WITHOUT_CLASSIFICATION	1.0111579630167606E-4	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999998262020328	WITHOUT_CLASSIFICATION	1.7379796720005652E-7	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.999999953930144	WITHOUT_CLASSIFICATION	4.6069855937199735E-8	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999999002414773	WITHOUT_CLASSIFICATION	9.975852257392717E-8	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999999206725241	WITHOUT_CLASSIFICATION	7.932747600627974E-8	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.999987336739819	WITHOUT_CLASSIFICATION	1.2663260180876793E-5	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999986800252635	WITHOUT_CLASSIFICATION	1.3199747365017322E-6	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999986898032195	WITHOUT_CLASSIFICATION	1.3101967805306585E-6	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.7769888806987619	WITHOUT_CLASSIFICATION	0.2230111193012381	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.7956309649400963	WITHOUT_CLASSIFICATION	0.20436903505990373	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999999971052791	WITHOUT_CLASSIFICATION	2.894720818697369E-9	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.999999999631636	WITHOUT_CLASSIFICATION	3.6836404835089593E-10	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9972216293448741	WITHOUT_CLASSIFICATION	0.0027783706551259115	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999846908851	WITHOUT_CLASSIFICATION	1.5309114958923354E-8	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999997837297089	WITHOUT_CLASSIFICATION	2.1627029109803104E-6	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.999739805332592	WITHOUT_CLASSIFICATION	2.6019466740792504E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999978794434361	WITHOUT_CLASSIFICATION	2.120556563835226E-6	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.999993527295889	WITHOUT_CLASSIFICATION	6.472704111026574E-6	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.999999782523178	WITHOUT_CLASSIFICATION	2.1747682192560089E-7	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999988364106424	WITHOUT_CLASSIFICATION	1.1635893576382766E-6	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999999073628847	WITHOUT_CLASSIFICATION	9.263711536426278E-8	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999995383332632	WITHOUT_CLASSIFICATION	4.616667367602799E-7	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.999999902403919	WITHOUT_CLASSIFICATION	9.759608097590963E-8	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.999999991053097	WITHOUT_CLASSIFICATION	8.94690294465482E-9	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999258021828	WITHOUT_CLASSIFICATION	7.419781719995402E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999596870223716	WITHOUT_CLASSIFICATION	4.031297762836671E-5	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9996742800522382	WITHOUT_CLASSIFICATION	3.257199477617561E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999621456096531	WITHOUT_CLASSIFICATION	3.785439034689688E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.999989629187935	WITHOUT_CLASSIFICATION	1.0370812065039527E-5	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9991086076205861	WITHOUT_CLASSIFICATION	8.913923794138447E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999838172586203	WITHOUT_CLASSIFICATION	1.618274137961579E-5	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.999999677480696	WITHOUT_CLASSIFICATION	3.225193040563225E-7	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999436075350647	WITHOUT_CLASSIFICATION	5.6392464935234286E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999965599983555	WITHOUT_CLASSIFICATION	3.440001644535673E-6	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999851631784699	WITHOUT_CLASSIFICATION	1.4836821530179942E-5	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999945424770056	WITHOUT_CLASSIFICATION	5.4575229944048445E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999885282975928	WITHOUT_CLASSIFICATION	1.1471702407231846E-5	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999964489661892	WITHOUT_CLASSIFICATION	3.5510338108430612E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999921271076894	WITHOUT_CLASSIFICATION	7.872892310732633E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999974302727336	WITHOUT_CLASSIFICATION	2.5697272665278453E-6	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999999211659599	WITHOUT_CLASSIFICATION	7.883404005607965E-8	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999981783684012	WITHOUT_CLASSIFICATION	1.8216315988344E-6	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999950400568538	WITHOUT_CLASSIFICATION	4.959943146170024E-6	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999977222607601	WITHOUT_CLASSIFICATION	2.277739239874795E-6	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999998056357079	WITHOUT_CLASSIFICATION	1.943642920629973E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999977028486177	WITHOUT_CLASSIFICATION	2.297151382309614E-6	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999977084855102	WITHOUT_CLASSIFICATION	2.291514489943624E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999997184602507	WITHOUT_CLASSIFICATION	2.8153974930718757E-6	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999998741541349	WITHOUT_CLASSIFICATION	1.2584586504843053E-7	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.999999801743899	WITHOUT_CLASSIFICATION	1.9825610089943588E-7	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999998051492647	WITHOUT_CLASSIFICATION	1.9485073521600925E-7	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999985655872727	WITHOUT_CLASSIFICATION	1.434412727262959E-6	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999998208993631	WITHOUT_CLASSIFICATION	1.7910063690130723E-7	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999925581938942	WITHOUT_CLASSIFICATION	7.441806105794156E-6	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999732814260209	WITHOUT_CLASSIFICATION	2.6718573979131017E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999999889144622	WITHOUT_CLASSIFICATION	1.1085537867471082E-8	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.999967774674706	WITHOUT_CLASSIFICATION	3.222532529407358E-5	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999980589112575	WITHOUT_CLASSIFICATION	1.9410887425867977E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999360026350029	WITHOUT_CLASSIFICATION	6.399736499702192E-5	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999839588837196	WITHOUT_CLASSIFICATION	1.604111628039983E-5	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999988117745287	WITHOUT_CLASSIFICATION	1.1882254713913852E-6	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999853799953058	WITHOUT_CLASSIFICATION	1.4620004694186235E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9997578506485588	WITHOUT_CLASSIFICATION	2.4214935144118642E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9997788681171079	WITHOUT_CLASSIFICATION	2.2113188289199105E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9996371376751261	WITHOUT_CLASSIFICATION	3.6286232487391806E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9997192220198232	WITHOUT_CLASSIFICATION	2.807779801766787E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9997226654780573	WITHOUT_CLASSIFICATION	2.7733452194266E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9995503800778114	WITHOUT_CLASSIFICATION	4.496199221887361E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9996145690754672	WITHOUT_CLASSIFICATION	3.854309245328482E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9997395716563886	WITHOUT_CLASSIFICATION	2.6042834361137443E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9997469069159539	WITHOUT_CLASSIFICATION	2.530930840460753E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9996466790160635	WITHOUT_CLASSIFICATION	3.533209839364856E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9997228551402058	WITHOUT_CLASSIFICATION	2.771448597941938E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9994254209379946	WITHOUT_CLASSIFICATION	5.745790620053613E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9995798692997894	WITHOUT_CLASSIFICATION	4.2013070021063405E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9994539575643445	WITHOUT_CLASSIFICATION	5.460424356554121E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9995583882962173	WITHOUT_CLASSIFICATION	4.4161170378261136E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9993388872343808	WITHOUT_CLASSIFICATION	6.611127656192006E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9995463629858423	WITHOUT_CLASSIFICATION	4.5363701415771553E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9990160087029518	WITHOUT_CLASSIFICATION	9.83991297048105E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9995061209250764	WITHOUT_CLASSIFICATION	4.938790749235978E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999999400266033	WITHOUT_CLASSIFICATION	5.997339675757735E-8	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999999512785394	WITHOUT_CLASSIFICATION	4.8721460600343414E-8	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999833236490507	WITHOUT_CLASSIFICATION	1.667635094935535E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999991999279607	WITHOUT_CLASSIFICATION	8.000720391987896E-7	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9990298665031411	WITHOUT_CLASSIFICATION	9.701334968588046E-4	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999935369474404	WITHOUT_CLASSIFICATION	6.4630525595341106E-6	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999967822928237	WITHOUT_CLASSIFICATION	3.217707176206559E-6	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9984335966834446	WITHOUT_CLASSIFICATION	0.0015664033165554854	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999997737908708	WITHOUT_CLASSIFICATION	2.262091292191337E-7	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999991913283509	WITHOUT_CLASSIFICATION	8.086716491847803E-7	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.9049900453294497	WITHOUT_CLASSIFICATION	0.09500995467055029	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999994348956441	WITHOUT_CLASSIFICATION	5.651043558562989E-7	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999944085241694	WITHOUT_CLASSIFICATION	5.591475830484589E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999985684225581	WITHOUT_CLASSIFICATION	1.4315774419097966E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999985684225581	WITHOUT_CLASSIFICATION	1.4315774419097966E-6	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999682331178701	WITHOUT_CLASSIFICATION	3.176688212983907E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999798825514893	WITHOUT_CLASSIFICATION	2.011744851074913E-5	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999997752544784	WITHOUT_CLASSIFICATION	2.2474552171233224E-7	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999914243809586	WITHOUT_CLASSIFICATION	8.57561904154273E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999923527468787	WITHOUT_CLASSIFICATION	7.6472531213138E-6	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999923218138611	WITHOUT_CLASSIFICATION	7.678186138990838E-6	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999983492846916	WITHOUT_CLASSIFICATION	1.6507153084488146E-6	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999995801186483	WITHOUT_CLASSIFICATION	4.198813516721182E-7	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999999091574969	WITHOUT_CLASSIFICATION	9.084250308586675E-8	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999997354805171	WITHOUT_CLASSIFICATION	2.6451948287741164E-7	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999956703903954	WITHOUT_CLASSIFICATION	4.329609604631108E-6	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999998790479617	WITHOUT_CLASSIFICATION	1.2095203830833748E-7	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999811603879215	WITHOUT_CLASSIFICATION	1.8839612078580366E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9999869933546651	WITHOUT_CLASSIFICATION	1.3006645334775302E-5	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999999617154657	WITHOUT_CLASSIFICATION	3.828453431740463E-8	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999997138441605	WITHOUT_CLASSIFICATION	2.861558394894098E-7	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999916182150757	WITHOUT_CLASSIFICATION	8.381784924376552E-6	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999999109558829	WITHOUT_CLASSIFICATION	8.904411706838311E-8	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9950263803242042	WITHOUT_CLASSIFICATION	0.004973619675795727	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999634851997309	WITHOUT_CLASSIFICATION	3.6514800269221106E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999990999614323	WITHOUT_CLASSIFICATION	9.000385675815952E-7	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.999998376773276	WITHOUT_CLASSIFICATION	1.6232267239839226E-6	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999982980536095	WITHOUT_CLASSIFICATION	1.7019463904524154E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999996293978015	WITHOUT_CLASSIFICATION	3.7060219843435254E-7	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999350417035051	WITHOUT_CLASSIFICATION	6.495829649495078E-5	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.999999757878535	WITHOUT_CLASSIFICATION	2.421214650938054E-7	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999999531322936	WITHOUT_CLASSIFICATION	4.686770649838765E-8	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.999999988072133	WITHOUT_CLASSIFICATION	1.1927867032445066E-8	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999997268201012	WITHOUT_CLASSIFICATION	2.731798988580363E-7	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.999985719445746	WITHOUT_CLASSIFICATION	1.4280554253981433E-5	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999996123622905	WITHOUT_CLASSIFICATION	3.876377095713464E-7	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999343664495709	WITHOUT_CLASSIFICATION	6.563355042905787E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999762039135613	WITHOUT_CLASSIFICATION	2.3796086438623315E-5	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999983524502081	WITHOUT_CLASSIFICATION	1.6475497919882026E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.999985993361264	WITHOUT_CLASSIFICATION	1.4006638735939934E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999953034231027	WITHOUT_CLASSIFICATION	4.696576897276853E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999990641150044	WITHOUT_CLASSIFICATION	9.358849955077049E-7	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999998774509109	WITHOUT_CLASSIFICATION	1.2254908913934362E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999258270153867	WITHOUT_CLASSIFICATION	7.417298461328787E-5	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999999078738587	WITHOUT_CLASSIFICATION	9.212614127571338E-8	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999936883024386	WITHOUT_CLASSIFICATION	6.311697561411236E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999912209851094	WITHOUT_CLASSIFICATION	8.779014890614407E-6	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999996925433957	WITHOUT_CLASSIFICATION	3.07456604244114E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999993253896853	WITHOUT_CLASSIFICATION	6.746103147042415E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999993253896853	WITHOUT_CLASSIFICATION	6.746103147042415E-7	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.999875901853776	WITHOUT_CLASSIFICATION	1.240981462240036E-4	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999946835231415	WITHOUT_CLASSIFICATION	5.316476858515673E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.999996697564817	WITHOUT_CLASSIFICATION	3.302435182844035E-6	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999999159462781	WITHOUT_CLASSIFICATION	8.405372186017771E-8	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999987181726706	WITHOUT_CLASSIFICATION	1.2818273294062504E-6	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.999998267030371	WITHOUT_CLASSIFICATION	1.7329696290269026E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999987736675	WITHOUT_CLASSIFICATION	1.226332522886836E-9	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999740190025235	WITHOUT_CLASSIFICATION	2.598099747652135E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999368371497814	WITHOUT_CLASSIFICATION	6.316285021847016E-5	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999730085972958	WITHOUT_CLASSIFICATION	2.6991402704196466E-5	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999723729836959	WITHOUT_CLASSIFICATION	2.7627016304158122E-5	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999999354665304	WITHOUT_CLASSIFICATION	6.453346953826876E-8	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.999991344630181	WITHOUT_CLASSIFICATION	8.65536981889129E-6	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999977847357653	WITHOUT_CLASSIFICATION	2.2152642346260275E-6	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9983542821276489	WITHOUT_CLASSIFICATION	0.0016457178723510856	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999955404764095	WITHOUT_CLASSIFICATION	4.459523590559982E-6	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999943793099917	WITHOUT_CLASSIFICATION	5.620690008297757E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999994203683593	WITHOUT_CLASSIFICATION	5.796316407180303E-7	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999911761618744	WITHOUT_CLASSIFICATION	8.823838125656058E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999932606322924	WITHOUT_CLASSIFICATION	6.739367707547093E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999872146953561	WITHOUT_CLASSIFICATION	1.2785304643933612E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999872146953561	WITHOUT_CLASSIFICATION	1.2785304643933612E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998804499691	WITHOUT_CLASSIFICATION	1.195500308970277E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998804499691	WITHOUT_CLASSIFICATION	1.195500308970277E-7	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999999163776406	WITHOUT_CLASSIFICATION	8.362235938749617E-8	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999994365921694	WITHOUT_CLASSIFICATION	5.634078306671826E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999546810399222	WITHOUT_CLASSIFICATION	4.531896007762372E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998078249903	WITHOUT_CLASSIFICATION	1.9217500974216957E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999998619062442	WITHOUT_CLASSIFICATION	1.3809375568169045E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999994311252862	WITHOUT_CLASSIFICATION	5.688747137117745E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.8777456365775417	WITHOUT_CLASSIFICATION	0.12225436342245828	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.99999895874823	WITHOUT_CLASSIFICATION	1.0412517700007334E-6	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999999908622725	WITHOUT_CLASSIFICATION	9.137727560769038E-9	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9997617190744773	WITHOUT_CLASSIFICATION	2.3828092552282976E-4	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999997037064611	WITHOUT_CLASSIFICATION	2.9629353884505956E-7	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999984829928297	WITHOUT_CLASSIFICATION	1.5170071703438456E-6	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999995703782645	WITHOUT_CLASSIFICATION	4.296217355244263E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9997562276646761	WITHOUT_CLASSIFICATION	2.4377233532399742E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999999581593484	WITHOUT_CLASSIFICATION	4.184065168885712E-8	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999999372722806	WITHOUT_CLASSIFICATION	6.272771933098852E-8	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999999592364768	WITHOUT_CLASSIFICATION	4.0763523167087265E-8	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999998401704989	WITHOUT_CLASSIFICATION	1.5982950110628827E-7	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999938779063823	WITHOUT_CLASSIFICATION	6.122093617791363E-6	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.999862317164731	WITHOUT_CLASSIFICATION	1.3768283526912616E-4	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999985226154264	WITHOUT_CLASSIFICATION	1.4773845735969662E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999999835934603	WITHOUT_CLASSIFICATION	1.6406539677845453E-8	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.999996958280775	WITHOUT_CLASSIFICATION	3.0417192250470122E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999921088165401	WITHOUT_CLASSIFICATION	7.891183459847574E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999992831438769	WITHOUT_CLASSIFICATION	7.168561231845035E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999999056064004	WITHOUT_CLASSIFICATION	9.439359966945993E-8	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999936088624108	WITHOUT_CLASSIFICATION	6.391137589184219E-6	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999988956567651	WITHOUT_CLASSIFICATION	1.104343234782091E-6	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9996751864335087	WITHOUT_CLASSIFICATION	3.2481356649126635E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.999999152864121	WITHOUT_CLASSIFICATION	8.471358790979152E-7	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.999999152864121	WITHOUT_CLASSIFICATION	8.471358790979152E-7	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999909567129506	WITHOUT_CLASSIFICATION	9.0432870495018E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999954334547071	WITHOUT_CLASSIFICATION	4.566545292993832E-6	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999998284282616	WITHOUT_CLASSIFICATION	1.7157173844490906E-7	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999996007744775	WITHOUT_CLASSIFICATION	3.9922552245771635E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999781990973249	WITHOUT_CLASSIFICATION	2.1800902675071478E-5	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999998229912955	WITHOUT_CLASSIFICATION	1.7700870448592145E-7	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999997005795855	WITHOUT_CLASSIFICATION	2.994204144808687E-7	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.999999970268574	WITHOUT_CLASSIFICATION	2.9731426022867256E-8	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999999958323034	WITHOUT_CLASSIFICATION	4.167696578635225E-9	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.999994736245998	WITHOUT_CLASSIFICATION	5.263754002029361E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999998964337415	WITHOUT_CLASSIFICATION	1.0356625848005019E-7	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999999469422506	WITHOUT_CLASSIFICATION	5.305774941732672E-8	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999999700002993	WITHOUT_CLASSIFICATION	2.999970073965653E-8	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999969459977477	WITHOUT_CLASSIFICATION	3.0540022523629447E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999996223631026	WITHOUT_CLASSIFICATION	3.7763689736887507E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999953935464272	WITHOUT_CLASSIFICATION	4.606453572834924E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9992417994831779	WITHOUT_CLASSIFICATION	7.582005168221394E-4	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999986647935412	WITHOUT_CLASSIFICATION	1.3352064588473365E-6	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.999998254035511	WITHOUT_CLASSIFICATION	1.7459644890419134E-6	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9999387908135655	WITHOUT_CLASSIFICATION	6.120918643450251E-5	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999990571601196	WITHOUT_CLASSIFICATION	9.428398803223138E-7	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999921868469933	WITHOUT_CLASSIFICATION	7.813153006692205E-6	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999807025317602	WITHOUT_CLASSIFICATION	1.9297468239790154E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999980862133171	WITHOUT_CLASSIFICATION	1.9137866829298422E-6	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999890701246101	WITHOUT_CLASSIFICATION	1.0929875389866674E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999748267478001	WITHOUT_CLASSIFICATION	2.5173252199844366E-5	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999997650911434	WITHOUT_CLASSIFICATION	2.3490885654560967E-7	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9996983111609566	WITHOUT_CLASSIFICATION	3.0168883904336884E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999996415328004	WITHOUT_CLASSIFICATION	3.5846719960205854E-7	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.999987041801421	WITHOUT_CLASSIFICATION	1.2958198579025092E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.99998651203468	WITHOUT_CLASSIFICATION	1.348796531989569E-5	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999972814646326	WITHOUT_CLASSIFICATION	2.718535367381698E-6	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999999788331455	WITHOUT_CLASSIFICATION	2.1166854544878557E-8	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999851202770302	WITHOUT_CLASSIFICATION	1.48797229696319E-5	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9998414231274905	WITHOUT_CLASSIFICATION	1.5857687250939127E-4	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999757466676753	WITHOUT_CLASSIFICATION	2.425333232467926E-5	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.999993332997486	WITHOUT_CLASSIFICATION	6.667002513941337E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9996000025260713	WITHOUT_CLASSIFICATION	3.999974739286977E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999996444810043	WITHOUT_CLASSIFICATION	3.5551899570831315E-7	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999992482500196	WITHOUT_CLASSIFICATION	7.517499803542977E-7	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999999435236864	WITHOUT_CLASSIFICATION	5.647631366092315E-8	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999734374865	WITHOUT_CLASSIFICATION	2.656251348311382E-8	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999994488974947	WITHOUT_CLASSIFICATION	5.511025053779161E-7	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999978905660477	WITHOUT_CLASSIFICATION	2.1094339523240346E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.999949198450024	WITHOUT_CLASSIFICATION	5.0801549976135404E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999999598964465	WITHOUT_CLASSIFICATION	4.01035535425122E-8	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999997261804343	WITHOUT_CLASSIFICATION	2.738195657103259E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999986822551	WITHOUT_CLASSIFICATION	1.317745001126778E-9	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999998041513881	WITHOUT_CLASSIFICATION	1.9584861182595044E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999993616579907	WITHOUT_CLASSIFICATION	6.383420092057489E-7	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999254050903046	WITHOUT_CLASSIFICATION	7.459490969535749E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999455551896168	WITHOUT_CLASSIFICATION	5.444481038323281E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999422619845506	WITHOUT_CLASSIFICATION	5.7738015449305506E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999458774369566	WITHOUT_CLASSIFICATION	5.412256304347097E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999926862220049	WITHOUT_CLASSIFICATION	7.313777995151235E-6	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999967793974223	WITHOUT_CLASSIFICATION	3.22060257777335E-6	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999955650673418	WITHOUT_CLASSIFICATION	4.434932658201191E-6	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999756667627495	WITHOUT_CLASSIFICATION	2.4333237250473454E-5	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.999998762690826	WITHOUT_CLASSIFICATION	1.2373091740527314E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999981213566351	WITHOUT_CLASSIFICATION	1.878643364878677E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999733474807275	WITHOUT_CLASSIFICATION	2.6652519272509308E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999254050903046	WITHOUT_CLASSIFICATION	7.459490969535749E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999422619845506	WITHOUT_CLASSIFICATION	5.7738015449305506E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999455551896168	WITHOUT_CLASSIFICATION	5.444481038323281E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9997778992969176	WITHOUT_CLASSIFICATION	2.221007030823846E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999875526048569	WITHOUT_CLASSIFICATION	1.2447395143021886E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999973681237977	WITHOUT_CLASSIFICATION	2.631876202307205E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999999311428327	WITHOUT_CLASSIFICATION	6.885716735326939E-8	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999982579791121	WITHOUT_CLASSIFICATION	1.7420208879512335E-6	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999999279804425	WITHOUT_CLASSIFICATION	7.201955753372801E-8	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999986205924565	WITHOUT_CLASSIFICATION	1.3794075435356637E-6	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999999399874855	WITHOUT_CLASSIFICATION	6.001251451322659E-8	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999968618436675	WITHOUT_CLASSIFICATION	3.138156332493824E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999999500865446	WITHOUT_CLASSIFICATION	4.991345539689379E-8	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999998886344657	WITHOUT_CLASSIFICATION	1.113655343556918E-7	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9967362052945612	WITHOUT_CLASSIFICATION	0.0032637947054387955	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999990471924178	WITHOUT_CLASSIFICATION	9.528075821008873E-7	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999998143565351	WITHOUT_CLASSIFICATION	1.8564346500329124E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999820419823141	WITHOUT_CLASSIFICATION	1.7958017685842584E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999987011104393	WITHOUT_CLASSIFICATION	1.2988895606911848E-6	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999735155144637	WITHOUT_CLASSIFICATION	2.648448553625727E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999976390408952	WITHOUT_CLASSIFICATION	2.360959104875623E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999976390408952	WITHOUT_CLASSIFICATION	2.360959104875623E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999991136844719	WITHOUT_CLASSIFICATION	8.863155281794829E-7	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999999888884279	WITHOUT_CLASSIFICATION	1.1111572068241621E-8	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999999553219706	WITHOUT_CLASSIFICATION	4.467802933776653E-8	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999905045895185	WITHOUT_CLASSIFICATION	9.49541048142509E-6	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999989393340681	WITHOUT_CLASSIFICATION	1.0606659319175786E-6	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999999922072649	WITHOUT_CLASSIFICATION	7.792735070462936E-9	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999999433612493	WITHOUT_CLASSIFICATION	5.6638750585171866E-8	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999993688159576	WITHOUT_CLASSIFICATION	6.31184042312139E-7	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999999397515592	WITHOUT_CLASSIFICATION	6.024844072956183E-8	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999999460202182	WITHOUT_CLASSIFICATION	5.397978175689714E-8	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.999998964124078	WITHOUT_CLASSIFICATION	1.0358759220782453E-6	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999959641983552	WITHOUT_CLASSIFICATION	4.035801644812866E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999967064502229	WITHOUT_CLASSIFICATION	3.2935497770565593E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.999989500199894	WITHOUT_CLASSIFICATION	1.0499800106023147E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999998828298626	WITHOUT_CLASSIFICATION	1.1717013740038547E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999559259535	WITHOUT_CLASSIFICATION	4.407404653721856E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999998396190981	WITHOUT_CLASSIFICATION	1.6038090187697408E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999892872958447	WITHOUT_CLASSIFICATION	1.0712704155312597E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999892872958447	WITHOUT_CLASSIFICATION	1.0712704155312597E-5	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999856298775173	WITHOUT_CLASSIFICATION	1.4370122482766218E-5	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999894415948807	WITHOUT_CLASSIFICATION	1.0558405119218311E-5	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999368486178735	WITHOUT_CLASSIFICATION	6.315138212652131E-5	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.999998289977149	WITHOUT_CLASSIFICATION	1.7100228509517557E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999993269766569	WITHOUT_CLASSIFICATION	6.730233431526142E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999892872958447	WITHOUT_CLASSIFICATION	1.0712704155312597E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999892872958447	WITHOUT_CLASSIFICATION	1.0712704155312597E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999994847627	WITHOUT_CLASSIFICATION	5.152372312807334E-10	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999994847627	WITHOUT_CLASSIFICATION	5.152372312807334E-10	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999961445942083	WITHOUT_CLASSIFICATION	3.855405791768298E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999974412894285	WITHOUT_CLASSIFICATION	2.558710571576068E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.99991511475371	WITHOUT_CLASSIFICATION	8.488524629006014E-5	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9985565707654451	WITHOUT_CLASSIFICATION	0.0014434292345549195	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999695682614032	WITHOUT_CLASSIFICATION	3.0431738596797957E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999695682614032	WITHOUT_CLASSIFICATION	3.0431738596797957E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999998272612385	WITHOUT_CLASSIFICATION	1.7273876149413605E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999979901285447	WITHOUT_CLASSIFICATION	2.009871455292657E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999997871860564	WITHOUT_CLASSIFICATION	2.1281394360198162E-6	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999991632853849	WITHOUT_CLASSIFICATION	8.367146151271482E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999994732648	WITHOUT_CLASSIFICATION	5.267352147629074E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999676846026	WITHOUT_CLASSIFICATION	3.231539730142034E-8	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999773231195602	WITHOUT_CLASSIFICATION	2.267688043971186E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999991870555404	WITHOUT_CLASSIFICATION	8.129444596244384E-7	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999182475441563	WITHOUT_CLASSIFICATION	8.175245584375003E-5	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999999991837094	WITHOUT_CLASSIFICATION	8.162905105850118E-10	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9993461995944609	WITHOUT_CLASSIFICATION	6.538004055391981E-4	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999998521803241	WITHOUT_CLASSIFICATION	1.4781967588150787E-7	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999976185546161	WITHOUT_CLASSIFICATION	2.3814453839890577E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999999523016811	WITHOUT_CLASSIFICATION	4.7698318952332414E-8	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999559259535	WITHOUT_CLASSIFICATION	4.407404653721856E-8	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999892872958447	WITHOUT_CLASSIFICATION	1.0712704155312597E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999994847627	WITHOUT_CLASSIFICATION	5.152372312807334E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999676846026	WITHOUT_CLASSIFICATION	3.231539730142034E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.99999054189532	WITHOUT_CLASSIFICATION	9.458104680068789E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.99999054189532	WITHOUT_CLASSIFICATION	9.458104680068789E-6	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999970710306104	WITHOUT_CLASSIFICATION	2.9289693895631376E-6	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.999999998758031	WITHOUT_CLASSIFICATION	1.2419689312182679E-9	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999999976488687	WITHOUT_CLASSIFICATION	2.3511313495427217E-9	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999996346505661	WITHOUT_CLASSIFICATION	3.653494339780409E-7	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999974611146776	WITHOUT_CLASSIFICATION	2.538885322412768E-6	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999996279860612	WITHOUT_CLASSIFICATION	3.7201393879561826E-7	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9999538137495267	WITHOUT_CLASSIFICATION	4.6186250473314576E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999876410280605	WITHOUT_CLASSIFICATION	1.2358971939470358E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999122447707	WITHOUT_CLASSIFICATION	8.775522938261856E-8	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999841254376	WITHOUT_CLASSIFICATION	1.5874562424165427E-8	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999991884324141	WITHOUT_CLASSIFICATION	8.115675857905456E-7	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999855446369	WITHOUT_CLASSIFICATION	1.4455363161986701E-8	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999959003381338	WITHOUT_CLASSIFICATION	4.099661866198221E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999998396190981	WITHOUT_CLASSIFICATION	1.6038090187697408E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999994847627	WITHOUT_CLASSIFICATION	5.152372312807334E-10	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999979901285447	WITHOUT_CLASSIFICATION	2.009871455292657E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999997871860564	WITHOUT_CLASSIFICATION	2.1281394360198162E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999997871860564	WITHOUT_CLASSIFICATION	2.1281394360198162E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999994732648	WITHOUT_CLASSIFICATION	5.267352147629074E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999676846026	WITHOUT_CLASSIFICATION	3.231539730142034E-8	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999676846026	WITHOUT_CLASSIFICATION	3.231539730142034E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.99999054189532	WITHOUT_CLASSIFICATION	9.458104680068789E-6	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999998512535508	WITHOUT_CLASSIFICATION	1.4874644910329608E-7	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999814720807553	WITHOUT_CLASSIFICATION	1.8527919244707935E-5	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999999687431687	WITHOUT_CLASSIFICATION	3.1256831447740586E-8	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999775721458	WITHOUT_CLASSIFICATION	2.2427854205640876E-8	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9998842567844853	WITHOUT_CLASSIFICATION	1.1574321551468102E-4	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9996002966285443	WITHOUT_CLASSIFICATION	3.9970337145579804E-4	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999997752278552	WITHOUT_CLASSIFICATION	2.2477214487941048E-7	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999998604693869	WITHOUT_CLASSIFICATION	1.3953061303202974E-7	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999999932591147	WITHOUT_CLASSIFICATION	6.740885295193657E-9	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999979901285447	WITHOUT_CLASSIFICATION	2.009871455292657E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999997871860564	WITHOUT_CLASSIFICATION	2.1281394360198162E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999997871860564	WITHOUT_CLASSIFICATION	2.1281394360198162E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999994732648	WITHOUT_CLASSIFICATION	5.267352147629074E-10	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999876410280605	WITHOUT_CLASSIFICATION	1.2358971939470358E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999841254376	WITHOUT_CLASSIFICATION	1.5874562424165427E-8	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999956882689975	WITHOUT_CLASSIFICATION	4.3117310024293036E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999996086584898	WITHOUT_CLASSIFICATION	3.9134151020941585E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999956294163604	WITHOUT_CLASSIFICATION	4.370583639580996E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999956294163604	WITHOUT_CLASSIFICATION	4.370583639580996E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999996148193743	WITHOUT_CLASSIFICATION	3.8518062563742814E-7	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.999998555557684	WITHOUT_CLASSIFICATION	1.4444423159579803E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999992898184531	WITHOUT_CLASSIFICATION	7.101815468894551E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999994497319347	WITHOUT_CLASSIFICATION	5.502680653172058E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999556124419	WITHOUT_CLASSIFICATION	4.4387558016472546E-8	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999556124419	WITHOUT_CLASSIFICATION	4.4387558016472546E-8	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999988083099833	WITHOUT_CLASSIFICATION	1.1916900166845525E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999988083099833	WITHOUT_CLASSIFICATION	1.1916900166845525E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999364262218	WITHOUT_CLASSIFICATION	6.357377815360293E-8	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999364262218	WITHOUT_CLASSIFICATION	6.357377815360293E-8	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999993952780567	WITHOUT_CLASSIFICATION	6.047219433492497E-7	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999788630858376	WITHOUT_CLASSIFICATION	2.11369141623182E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999988250083693	WITHOUT_CLASSIFICATION	1.174991630719507E-6	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999980602578056	WITHOUT_CLASSIFICATION	1.939742194455227E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999999191411169	WITHOUT_CLASSIFICATION	8.085888324959126E-8	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999996816739567	WITHOUT_CLASSIFICATION	3.183260433189437E-7	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999991511623623	WITHOUT_CLASSIFICATION	8.488376376127229E-7	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999998491527772	WITHOUT_CLASSIFICATION	1.508472227589702E-7	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999996592543674	WITHOUT_CLASSIFICATION	3.4074563265294187E-7	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999978012192653	WITHOUT_CLASSIFICATION	2.1987807346189564E-6	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999991828421009	WITHOUT_CLASSIFICATION	8.171578990268047E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999982176139476	WITHOUT_CLASSIFICATION	1.782386052439326E-6	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9997806497208473	WITHOUT_CLASSIFICATION	2.1935027915261104E-4	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999880051343026	WITHOUT_CLASSIFICATION	1.1994865697375956E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999880051343026	WITHOUT_CLASSIFICATION	1.1994865697375956E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999925382225346	WITHOUT_CLASSIFICATION	7.461777465396075E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999994311252862	WITHOUT_CLASSIFICATION	5.688747137117745E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9996712711799696	WITHOUT_CLASSIFICATION	3.287288200304319E-4	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999998455015783	WITHOUT_CLASSIFICATION	1.5449842174998775E-7	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999999546406635	WITHOUT_CLASSIFICATION	4.535933652134107E-8	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999998026125447	WITHOUT_CLASSIFICATION	1.9738745524314563E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999998465535233	WITHOUT_CLASSIFICATION	1.534464767846021E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999990549153669	WITHOUT_CLASSIFICATION	9.450846330196772E-7	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999994195220215	WITHOUT_CLASSIFICATION	5.804779785205532E-7	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999834159550438	WITHOUT_CLASSIFICATION	1.658404495621005E-5	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999998838945894	WITHOUT_CLASSIFICATION	1.1610541062940852E-7	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9999946619134716	WITHOUT_CLASSIFICATION	5.338086528452557E-6	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999998175800714	WITHOUT_CLASSIFICATION	1.8241992864490486E-7	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999996758610742	WITHOUT_CLASSIFICATION	3.241389258182218E-7	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999912706275517	WITHOUT_CLASSIFICATION	8.729372448299487E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999961876599366	WITHOUT_CLASSIFICATION	3.812340063438339E-6	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999883267037878	WITHOUT_CLASSIFICATION	1.1673296212076934E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999999707404703	WITHOUT_CLASSIFICATION	2.9259529688809096E-8	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997302322549	WITHOUT_CLASSIFICATION	2.6976774517225827E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997302322549	WITHOUT_CLASSIFICATION	2.6976774517225827E-7	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999953558038445	WITHOUT_CLASSIFICATION	4.644196155575537E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999988887206449	WITHOUT_CLASSIFICATION	1.111279355190171E-6	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999448052971412	WITHOUT_CLASSIFICATION	5.5194702858638506E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999448052971412	WITHOUT_CLASSIFICATION	5.5194702858638506E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999978512759526	WITHOUT_CLASSIFICATION	2.148724047453689E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999969774209881	WITHOUT_CLASSIFICATION	3.0225790117965365E-6	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999952099524686	WITHOUT_CLASSIFICATION	4.790047531426124E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999833244499234	WITHOUT_CLASSIFICATION	1.667555007652195E-5	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999981275144497	WITHOUT_CLASSIFICATION	1.87248555025813E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999994351870846	WITHOUT_CLASSIFICATION	5.648129154458327E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999994351870846	WITHOUT_CLASSIFICATION	5.648129154458327E-7	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999994088872888	WITHOUT_CLASSIFICATION	5.911127111874066E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999981052796528	WITHOUT_CLASSIFICATION	1.8947203472422671E-6	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999997504671005	WITHOUT_CLASSIFICATION	2.4953289946191943E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999992567495826	WITHOUT_CLASSIFICATION	7.432504173833161E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999988887206449	WITHOUT_CLASSIFICATION	1.111279355190171E-6	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999969382195185	WITHOUT_CLASSIFICATION	3.0617804815649298E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999917760446821	WITHOUT_CLASSIFICATION	8.22395531795252E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999917760446821	WITHOUT_CLASSIFICATION	8.22395531795252E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999988251891165	WITHOUT_CLASSIFICATION	1.1748108835162333E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999745946476	WITHOUT_CLASSIFICATION	2.5405352471334714E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999745946476	WITHOUT_CLASSIFICATION	2.5405352471334714E-8	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999938027250891	WITHOUT_CLASSIFICATION	6.197274910887575E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999938027250891	WITHOUT_CLASSIFICATION	6.197274910887575E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999938027250891	WITHOUT_CLASSIFICATION	6.197274910887575E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999745946476	WITHOUT_CLASSIFICATION	2.5405352471334714E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999745946476	WITHOUT_CLASSIFICATION	2.5405352471334714E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999988251891165	WITHOUT_CLASSIFICATION	1.1748108835162333E-6	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999993771956474	WITHOUT_CLASSIFICATION	6.228043526105029E-7	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999933492645077	WITHOUT_CLASSIFICATION	6.650735492353448E-6	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999889704475995	WITHOUT_CLASSIFICATION	1.1029552400452762E-5	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999989837368042	WITHOUT_CLASSIFICATION	1.0162631957897002E-6	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999981760928327	WITHOUT_CLASSIFICATION	1.823907167367598E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999998783244681	WITHOUT_CLASSIFICATION	1.2167553182452263E-7	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.999999981221749	WITHOUT_CLASSIFICATION	1.8778250982242247E-8	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999815675648195	WITHOUT_CLASSIFICATION	1.8432435180508836E-5	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999998838945894	WITHOUT_CLASSIFICATION	1.1610541062940852E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999745946476	WITHOUT_CLASSIFICATION	2.5405352471334714E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999745946476	WITHOUT_CLASSIFICATION	2.5405352471334714E-8	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999992312731455	WITHOUT_CLASSIFICATION	7.687268544400592E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999979970169494	WITHOUT_CLASSIFICATION	2.002983050671612E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999998505410255	WITHOUT_CLASSIFICATION	1.4945897459673995E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9995536164510381	WITHOUT_CLASSIFICATION	4.463835489619262E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999998879331864	WITHOUT_CLASSIFICATION	1.120668136404305E-7	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999996867070106	WITHOUT_CLASSIFICATION	3.132929894151695E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999998943427864	WITHOUT_CLASSIFICATION	1.0565721359242061E-7	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999974271727323	WITHOUT_CLASSIFICATION	2.5728272676815893E-6	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999996674474882	WITHOUT_CLASSIFICATION	3.3255251169460084E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999621119082021	WITHOUT_CLASSIFICATION	3.7888091797895674E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999828162101462	WITHOUT_CLASSIFICATION	1.7183789853782356E-5	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999999643145528	WITHOUT_CLASSIFICATION	3.5685447197668446E-7	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999989500357387	WITHOUT_CLASSIFICATION	1.0499642613065317E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999078465756	WITHOUT_CLASSIFICATION	9.215342446329151E-8	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999999999246698	WITHOUT_CLASSIFICATION	7.533014775270201E-11	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999980111383984	WITHOUT_CLASSIFICATION	1.9888616015377284E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999980111383984	WITHOUT_CLASSIFICATION	1.9888616015377284E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999980111383984	WITHOUT_CLASSIFICATION	1.9888616015377284E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999998643915154	WITHOUT_CLASSIFICATION	1.35608484561132E-7	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999992226540098	WITHOUT_CLASSIFICATION	7.773459902195817E-7	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999999101343131	WITHOUT_CLASSIFICATION	8.986568689872866E-8	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9998828500764811	WITHOUT_CLASSIFICATION	1.171499235188392E-4	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999999824557846	WITHOUT_CLASSIFICATION	1.7544215356671466E-8	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999999578772181	WITHOUT_CLASSIFICATION	4.2122781907300465E-8	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999999679154	WITHOUT_CLASSIFICATION	3.2084545706810324E-11	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999998744976739	WITHOUT_CLASSIFICATION	1.2550232614090486E-7	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999999784534219	WITHOUT_CLASSIFICATION	2.1546578105644208E-8	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999996085744449	WITHOUT_CLASSIFICATION	3.9142555519208926E-7	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999840222578988	WITHOUT_CLASSIFICATION	1.597774210112323E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9998850916100575	WITHOUT_CLASSIFICATION	1.1490838994263476E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999994088872888	WITHOUT_CLASSIFICATION	5.911127111874066E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999745946476	WITHOUT_CLASSIFICATION	2.5405352471334714E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999745946476	WITHOUT_CLASSIFICATION	2.5405352471334714E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999988251891165	WITHOUT_CLASSIFICATION	1.1748108835162333E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999998783244681	WITHOUT_CLASSIFICATION	1.2167553182452263E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999979970169494	WITHOUT_CLASSIFICATION	2.002983050671612E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9995536164510381	WITHOUT_CLASSIFICATION	4.463835489619262E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999996867070106	WITHOUT_CLASSIFICATION	3.132929894151695E-7	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999998505410255	WITHOUT_CLASSIFICATION	1.4945897459673995E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999998943427864	WITHOUT_CLASSIFICATION	1.0565721359242061E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999621119082021	WITHOUT_CLASSIFICATION	3.7888091797895674E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999996674474882	WITHOUT_CLASSIFICATION	3.3255251169460084E-7	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999999643145528	WITHOUT_CLASSIFICATION	3.5685447197668446E-7	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999989967366759	WITHOUT_CLASSIFICATION	1.003263324134583E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999906201112845	WITHOUT_CLASSIFICATION	9.379888715551596E-6	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999928555241937	WITHOUT_CLASSIFICATION	7.144475806309095E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999998978400966	WITHOUT_CLASSIFICATION	1.0215990334116257E-7	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999995586959572	WITHOUT_CLASSIFICATION	4.413040427864059E-7	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.999999716827918	WITHOUT_CLASSIFICATION	2.831720820932402E-7	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999768260367848	WITHOUT_CLASSIFICATION	2.3173963215135355E-5	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9999362687231248	WITHOUT_CLASSIFICATION	6.373127687526934E-5	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999938901738213	WITHOUT_CLASSIFICATION	6.109826178556958E-6	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999960993830213	WITHOUT_CLASSIFICATION	3.900616978680249E-6	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999997176775886	WITHOUT_CLASSIFICATION	2.8232241143111226E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999999974302713	WITHOUT_CLASSIFICATION	2.569728685168165E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996921754674	WITHOUT_CLASSIFICATION	3.0782453270817835E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999855580510991	WITHOUT_CLASSIFICATION	1.4441948900838172E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999865218336468	WITHOUT_CLASSIFICATION	1.3478166353139296E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999784432674	WITHOUT_CLASSIFICATION	2.1556732604395916E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.99999888504575	WITHOUT_CLASSIFICATION	1.1149542500197903E-6	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999939623495059	WITHOUT_CLASSIFICATION	6.0376504941201194E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999998047855047	WITHOUT_CLASSIFICATION	1.9521449531952638E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.99999794855837	WITHOUT_CLASSIFICATION	2.0514416300026093E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999995467632397	WITHOUT_CLASSIFICATION	4.5323676032850595E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999870520767585	WITHOUT_CLASSIFICATION	1.2947923241419138E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999870520767585	WITHOUT_CLASSIFICATION	1.2947923241419138E-5	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999619565635965	WITHOUT_CLASSIFICATION	3.8043436403525196E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999965820747	WITHOUT_CLASSIFICATION	3.4179253415429354E-9	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998006999259754	WITHOUT_CLASSIFICATION	1.9930007402443165E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998006999259754	WITHOUT_CLASSIFICATION	1.9930007402443165E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998006999259754	WITHOUT_CLASSIFICATION	1.9930007402443165E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998456324513878	WITHOUT_CLASSIFICATION	1.543675486122225E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998456324513878	WITHOUT_CLASSIFICATION	1.543675486122225E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9997410006833745	WITHOUT_CLASSIFICATION	2.589993166255595E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999209102726025	WITHOUT_CLASSIFICATION	7.90897273974433E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999965820747	WITHOUT_CLASSIFICATION	3.4179253415429354E-9	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999978809845324	WITHOUT_CLASSIFICATION	2.1190154676420665E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998006999259754	WITHOUT_CLASSIFICATION	1.9930007402443165E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998006999259754	WITHOUT_CLASSIFICATION	1.9930007402443165E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998456324513878	WITHOUT_CLASSIFICATION	1.543675486122225E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999209102726025	WITHOUT_CLASSIFICATION	7.90897273974433E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999988247303616	WITHOUT_CLASSIFICATION	1.1752696383852473E-6	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999988247303616	WITHOUT_CLASSIFICATION	1.1752696383852473E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999994844330812	WITHOUT_CLASSIFICATION	5.15566918754799E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999994844330812	WITHOUT_CLASSIFICATION	5.15566918754799E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999975999752206	WITHOUT_CLASSIFICATION	2.4000247793992237E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999975999752206	WITHOUT_CLASSIFICATION	2.4000247793992237E-6	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999969151859893	WITHOUT_CLASSIFICATION	3.0848140106625783E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999928618641525	WITHOUT_CLASSIFICATION	7.138135847601715E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999928618641525	WITHOUT_CLASSIFICATION	7.138135847601715E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999997516072623	WITHOUT_CLASSIFICATION	2.4839273766827775E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999997516072623	WITHOUT_CLASSIFICATION	2.4839273766827775E-7	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.999999731533509	WITHOUT_CLASSIFICATION	2.6846649100701904E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.999998676680183	WITHOUT_CLASSIFICATION	1.3233198168956882E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.999998676680183	WITHOUT_CLASSIFICATION	1.3233198168956882E-6	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999958837854588	WITHOUT_CLASSIFICATION	4.116214541195485E-6	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999962290078068	WITHOUT_CLASSIFICATION	3.770992193095133E-6	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.99999840823908	WITHOUT_CLASSIFICATION	1.5917609199935436E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999958837854588	WITHOUT_CLASSIFICATION	4.116214541195485E-6	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999981372512274	WITHOUT_CLASSIFICATION	1.8627487725489613E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999992834222595	WITHOUT_CLASSIFICATION	7.165777404953589E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999992834222595	WITHOUT_CLASSIFICATION	7.165777404953589E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999992834222595	WITHOUT_CLASSIFICATION	7.165777404953589E-7	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999998248470329	WITHOUT_CLASSIFICATION	1.7515296711517712E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.999999045905983	WITHOUT_CLASSIFICATION	9.540940170278563E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999972438353807	WITHOUT_CLASSIFICATION	2.756164619297407E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999972438353807	WITHOUT_CLASSIFICATION	2.756164619297407E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999860415602	WITHOUT_CLASSIFICATION	1.3958439941352426E-8	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999860538882	WITHOUT_CLASSIFICATION	1.394611183501947E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999716612852	WITHOUT_CLASSIFICATION	2.8338714709796065E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999998571119212	WITHOUT_CLASSIFICATION	1.4288807889843024E-7	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999997238011495	WITHOUT_CLASSIFICATION	2.761988504303486E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999987964735075	WITHOUT_CLASSIFICATION	1.2035264925173442E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999987964735075	WITHOUT_CLASSIFICATION	1.2035264925173442E-6	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999997583026574	WITHOUT_CLASSIFICATION	2.4169734263844123E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998300486510255	WITHOUT_CLASSIFICATION	1.6995134897447592E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998300486510255	WITHOUT_CLASSIFICATION	1.6995134897447592E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999992834222595	WITHOUT_CLASSIFICATION	7.165777404953589E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.999999045905983	WITHOUT_CLASSIFICATION	9.540940170278563E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999972438353807	WITHOUT_CLASSIFICATION	2.756164619297407E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999860415602	WITHOUT_CLASSIFICATION	1.3958439941352426E-8	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999860538882	WITHOUT_CLASSIFICATION	1.394611183501947E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999716612852	WITHOUT_CLASSIFICATION	2.8338714709796065E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999998571119212	WITHOUT_CLASSIFICATION	1.4288807889843024E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998300486510255	WITHOUT_CLASSIFICATION	1.6995134897447592E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999992636934206	WITHOUT_CLASSIFICATION	7.363065793372504E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999982398651784	WITHOUT_CLASSIFICATION	1.760134821657019E-6	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999984373780538	WITHOUT_CLASSIFICATION	1.5626219461494887E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999998952552409	WITHOUT_CLASSIFICATION	1.0474475902894242E-7	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999983242272128	WITHOUT_CLASSIFICATION	1.675772787273716E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999994293518681	WITHOUT_CLASSIFICATION	5.706481317785522E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999996375704787	WITHOUT_CLASSIFICATION	3.624295212354441E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999996375704787	WITHOUT_CLASSIFICATION	3.624295212354441E-7	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999946753531332	WITHOUT_CLASSIFICATION	5.32464686673619E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.999996399410775	WITHOUT_CLASSIFICATION	3.6005892249087653E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999949425191527	WITHOUT_CLASSIFICATION	5.057480847263167E-6	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999990206162228	WITHOUT_CLASSIFICATION	9.793837771706287E-7	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999879606818498	WITHOUT_CLASSIFICATION	1.2039318150280492E-5	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999879606818498	WITHOUT_CLASSIFICATION	1.2039318150280492E-5	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.999999878152467	WITHOUT_CLASSIFICATION	1.2184753289031677E-7	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.999999833950526	WITHOUT_CLASSIFICATION	1.660494739076173E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999999750218115	WITHOUT_CLASSIFICATION	2.497818848487838E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999999750218115	WITHOUT_CLASSIFICATION	2.497818848487838E-7	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999985481621894	WITHOUT_CLASSIFICATION	1.4518378106454948E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999981866275294	WITHOUT_CLASSIFICATION	1.8133724706774025E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999997238011495	WITHOUT_CLASSIFICATION	2.761988504303486E-7	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.999999472008893	WITHOUT_CLASSIFICATION	5.279911069262214E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999998173247824	WITHOUT_CLASSIFICATION	1.8267521767858131E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999985477831699	WITHOUT_CLASSIFICATION	1.4522168302302203E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999982023774541	WITHOUT_CLASSIFICATION	1.7976225459086164E-6	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999944254736162	WITHOUT_CLASSIFICATION	5.574526383793235E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.999999708582199	WITHOUT_CLASSIFICATION	2.9141780090013504E-7	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999942443638064	WITHOUT_CLASSIFICATION	5.755636193597447E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999999983916127	WITHOUT_CLASSIFICATION	1.6083873049362107E-9	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.999999989668381	WITHOUT_CLASSIFICATION	1.0331618894109487E-8	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.999999989668381	WITHOUT_CLASSIFICATION	1.0331618894109487E-8	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999999010010905	WITHOUT_CLASSIFICATION	9.899890948434739E-8	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999999010010905	WITHOUT_CLASSIFICATION	9.899890948434739E-8	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999998880949594	WITHOUT_CLASSIFICATION	1.1190504053766767E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999639978559791	WITHOUT_CLASSIFICATION	3.6002144020921964E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999639978559791	WITHOUT_CLASSIFICATION	3.6002144020921964E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999639978559791	WITHOUT_CLASSIFICATION	3.6002144020921964E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998529988785	WITHOUT_CLASSIFICATION	1.4700112155156186E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999992261232867	WITHOUT_CLASSIFICATION	7.738767133021896E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999992261232867	WITHOUT_CLASSIFICATION	7.738767133021896E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999975898819534	WITHOUT_CLASSIFICATION	2.410118046541648E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999894801491561	WITHOUT_CLASSIFICATION	1.051985084392842E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999999294520489	WITHOUT_CLASSIFICATION	7.054795117457042E-8	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999999644463846	WITHOUT_CLASSIFICATION	3.555361539514272E-8	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9996756980212435	WITHOUT_CLASSIFICATION	3.2430197875658374E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999981271057178	WITHOUT_CLASSIFICATION	1.8728942822210393E-6	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9997116158594735	WITHOUT_CLASSIFICATION	2.8838414052638885E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996921754674	WITHOUT_CLASSIFICATION	3.0782453270817835E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996921754674	WITHOUT_CLASSIFICATION	3.0782453270817835E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998529988785	WITHOUT_CLASSIFICATION	1.4700112155156186E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999975898819534	WITHOUT_CLASSIFICATION	2.410118046541648E-6	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999999169449558	WITHOUT_CLASSIFICATION	8.305504425210833E-8	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999894801491561	WITHOUT_CLASSIFICATION	1.051985084392842E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999999294520489	WITHOUT_CLASSIFICATION	7.054795117457042E-8	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999996190023386	WITHOUT_CLASSIFICATION	3.8099766132986324E-7	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999998203838661	WITHOUT_CLASSIFICATION	1.7961613395472235E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999808474463	WITHOUT_CLASSIFICATION	1.9152553665339707E-8	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999730622144298	WITHOUT_CLASSIFICATION	2.6937785570239182E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.999989767653538	WITHOUT_CLASSIFICATION	1.0232346462083515E-5	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999995468184649	WITHOUT_CLASSIFICATION	4.531815350404203E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.999997255649397	WITHOUT_CLASSIFICATION	2.7443506029860544E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999996190023386	WITHOUT_CLASSIFICATION	3.8099766132986324E-7	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999996962604006	WITHOUT_CLASSIFICATION	3.0373959940243615E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999996962604006	WITHOUT_CLASSIFICATION	3.0373959940243615E-6	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999913864740874	WITHOUT_CLASSIFICATION	8.613525912660006E-6	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999722789402163	WITHOUT_CLASSIFICATION	2.772105978360108E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999941881720367	WITHOUT_CLASSIFICATION	5.811827963323888E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999956350830623	WITHOUT_CLASSIFICATION	4.364916937624462E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999997091490194	WITHOUT_CLASSIFICATION	2.908509806590944E-7	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999999983362999	WITHOUT_CLASSIFICATION	1.6637000218093216E-9	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999987757491718	WITHOUT_CLASSIFICATION	1.2242508281735067E-6	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999988207129273	WITHOUT_CLASSIFICATION	1.179287072710497E-6	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999979086912453	WITHOUT_CLASSIFICATION	2.091308754655376E-6	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.999999379792808	WITHOUT_CLASSIFICATION	6.20207191959588E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999971915366965	WITHOUT_CLASSIFICATION	2.808463303478338E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999956350830623	WITHOUT_CLASSIFICATION	4.364916937624462E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999997091490194	WITHOUT_CLASSIFICATION	2.908509806590944E-7	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999732035585387	WITHOUT_CLASSIFICATION	2.6796441461224607E-5	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999998550299538	WITHOUT_CLASSIFICATION	1.4497004618351992E-7	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999976024298005	WITHOUT_CLASSIFICATION	2.3975701993910185E-6	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999981301604735	WITHOUT_CLASSIFICATION	1.869839526625959E-6	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999998067903985	WITHOUT_CLASSIFICATION	1.932096014593051E-7	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999674065236798	WITHOUT_CLASSIFICATION	3.2593476320170126E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999570202714273	WITHOUT_CLASSIFICATION	4.297972857264956E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999998270388455	WITHOUT_CLASSIFICATION	1.7296115458402825E-7	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999990728650691	WITHOUT_CLASSIFICATION	9.271349308457604E-7	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999983120329333	WITHOUT_CLASSIFICATION	1.6879670666989343E-6	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999711640812073	WITHOUT_CLASSIFICATION	2.883591879258372E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.999998392826598	WITHOUT_CLASSIFICATION	1.6071734019333505E-6	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999992299714229	WITHOUT_CLASSIFICATION	7.700285771042471E-7	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999997529960245	WITHOUT_CLASSIFICATION	2.470039754479388E-7	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9998070074204594	WITHOUT_CLASSIFICATION	1.9299257954070708E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999987487404598	WITHOUT_CLASSIFICATION	1.2512595402327562E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999543038693066	WITHOUT_CLASSIFICATION	4.569613069348442E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999840888689	WITHOUT_CLASSIFICATION	1.5911131022400598E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999043458739	WITHOUT_CLASSIFICATION	9.565412601234294E-8	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999990476163687	WITHOUT_CLASSIFICATION	9.523836313046623E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999543038693066	WITHOUT_CLASSIFICATION	4.569613069348442E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999840888689	WITHOUT_CLASSIFICATION	1.5911131022400598E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999043458739	WITHOUT_CLASSIFICATION	9.565412601234294E-8	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999982646320706	WITHOUT_CLASSIFICATION	1.7353679293724048E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999966193103256	WITHOUT_CLASSIFICATION	3.3806896744206096E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999509882962935	WITHOUT_CLASSIFICATION	4.9011703706502794E-5	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999570632677021	WITHOUT_CLASSIFICATION	4.2936732297936744E-5	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9993056854992509	WITHOUT_CLASSIFICATION	6.943145007491194E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999905652975184	WITHOUT_CLASSIFICATION	9.43470248150814E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9995262291536043	WITHOUT_CLASSIFICATION	4.737708463957031E-4	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999999906003132	WITHOUT_CLASSIFICATION	9.399686855552336E-9	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.999999547590858	WITHOUT_CLASSIFICATION	4.524091420520636E-7	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999995420414394	WITHOUT_CLASSIFICATION	4.579585607016694E-7	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9842972672172601	WITHOUT_CLASSIFICATION	0.015702732782739946	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999998031133992	WITHOUT_CLASSIFICATION	1.9688660072328833E-7	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999994773585437	WITHOUT_CLASSIFICATION	5.226414564021157E-7	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999998635451771	WITHOUT_CLASSIFICATION	1.3645482287657452E-7	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999996222640296	WITHOUT_CLASSIFICATION	3.7773597029710574E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999995789246199	WITHOUT_CLASSIFICATION	4.210753801482123E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999918941193795	WITHOUT_CLASSIFICATION	8.105880620562517E-6	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999983132132613	WITHOUT_CLASSIFICATION	1.6867867386309547E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999840112077	WITHOUT_CLASSIFICATION	1.5988792284527266E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999806506231	WITHOUT_CLASSIFICATION	1.9349376927935788E-8	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.999999200867437	WITHOUT_CLASSIFICATION	7.991325630335992E-7	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999988254518413	WITHOUT_CLASSIFICATION	1.1745481588290527E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999988254518413	WITHOUT_CLASSIFICATION	1.1745481588290527E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999983772341312	WITHOUT_CLASSIFICATION	1.6227658687594345E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999983772341312	WITHOUT_CLASSIFICATION	1.6227658687594345E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999563185251	WITHOUT_CLASSIFICATION	4.368147487713426E-8	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999563185251	WITHOUT_CLASSIFICATION	4.368147487713426E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999656127456	WITHOUT_CLASSIFICATION	3.43872542840081E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999894274799	WITHOUT_CLASSIFICATION	1.0572520060608778E-8	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999607438957	WITHOUT_CLASSIFICATION	3.925610429547635E-8	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999898716989	WITHOUT_CLASSIFICATION	1.0128301147006146E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999923575786	WITHOUT_CLASSIFICATION	7.642421401137696E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999919120279	WITHOUT_CLASSIFICATION	8.087972077791086E-9	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999999529326182	WITHOUT_CLASSIFICATION	4.706738168884978E-8	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999998358651393	WITHOUT_CLASSIFICATION	1.64134860649793E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996921754674	WITHOUT_CLASSIFICATION	3.0782453270817835E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999656127456	WITHOUT_CLASSIFICATION	3.43872542840081E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999894274799	WITHOUT_CLASSIFICATION	1.0572520060608778E-8	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999607438957	WITHOUT_CLASSIFICATION	3.925610429547635E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999923575786	WITHOUT_CLASSIFICATION	7.642421401137696E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999919120279	WITHOUT_CLASSIFICATION	8.087972077791086E-9	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.999997042361724	WITHOUT_CLASSIFICATION	2.9576382758933854E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999995554836806	WITHOUT_CLASSIFICATION	4.44516319312303E-7	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.999926353739813	WITHOUT_CLASSIFICATION	7.364626018707058E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.999926353739813	WITHOUT_CLASSIFICATION	7.364626018707058E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999996019700808	WITHOUT_CLASSIFICATION	3.980299192464556E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999768390416004	WITHOUT_CLASSIFICATION	2.3160958399568066E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999767120678025	WITHOUT_CLASSIFICATION	2.3287932197442308E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999985193398087	WITHOUT_CLASSIFICATION	1.4806601913943673E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999985193398087	WITHOUT_CLASSIFICATION	1.4806601913943673E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999744068613001	WITHOUT_CLASSIFICATION	2.5593138699816725E-5	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999998410004485	WITHOUT_CLASSIFICATION	1.5899955148178214E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999993374844011	WITHOUT_CLASSIFICATION	6.625155989335423E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999986300766462	WITHOUT_CLASSIFICATION	1.3699233537665543E-6	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.999990549687294	WITHOUT_CLASSIFICATION	9.450312705979506E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999855580510991	WITHOUT_CLASSIFICATION	1.4441948900838172E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999865218336468	WITHOUT_CLASSIFICATION	1.3478166353139296E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999784432674	WITHOUT_CLASSIFICATION	2.1556732604395916E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.99999888504575	WITHOUT_CLASSIFICATION	1.1149542500197903E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.99999794855837	WITHOUT_CLASSIFICATION	2.0514416300026093E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999995467632397	WITHOUT_CLASSIFICATION	4.5323676032850595E-7	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999744068613001	WITHOUT_CLASSIFICATION	2.5593138699816725E-5	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999998410004485	WITHOUT_CLASSIFICATION	1.5899955148178214E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999986300766462	WITHOUT_CLASSIFICATION	1.3699233537665543E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999994083447662	WITHOUT_CLASSIFICATION	5.916552337957217E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999767120678025	WITHOUT_CLASSIFICATION	2.3287932197442308E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999767120678025	WITHOUT_CLASSIFICATION	2.3287932197442308E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999971915366965	WITHOUT_CLASSIFICATION	2.808463303478338E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999971915366965	WITHOUT_CLASSIFICATION	2.808463303478338E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.999883882667488	WITHOUT_CLASSIFICATION	1.1611733251206524E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.999883882667488	WITHOUT_CLASSIFICATION	1.1611733251206524E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999997463004127	WITHOUT_CLASSIFICATION	2.536995872700155E-7	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999997964475063	WITHOUT_CLASSIFICATION	2.0355249375141718E-7	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999903439726104	WITHOUT_CLASSIFICATION	9.656027389632353E-6	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999874692130412	WITHOUT_CLASSIFICATION	1.2530786958860878E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999992052358884	WITHOUT_CLASSIFICATION	7.947641116437506E-7	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999990722175174	WITHOUT_CLASSIFICATION	9.277824826564106E-7	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9997625527514606	WITHOUT_CLASSIFICATION	2.3744724853935127E-4	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999979917924	WITHOUT_CLASSIFICATION	2.008207525050994E-9	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999993940226443	WITHOUT_CLASSIFICATION	6.059773556884283E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999999640129688	WITHOUT_CLASSIFICATION	3.598703126261851E-8	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999999155425983	WITHOUT_CLASSIFICATION	8.44574017819672E-8	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999969308617092	WITHOUT_CLASSIFICATION	3.0691382907913026E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999999085270137	WITHOUT_CLASSIFICATION	9.147298626433597E-8	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999996714334689	WITHOUT_CLASSIFICATION	3.2856653114965293E-7	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999997877738442	WITHOUT_CLASSIFICATION	2.1222615570008717E-7	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.999998082955712	WITHOUT_CLASSIFICATION	1.9170442879170862E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999986399533013	WITHOUT_CLASSIFICATION	1.360046698701586E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999999433972994	WITHOUT_CLASSIFICATION	5.660270058255259E-8	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999996196948917	WITHOUT_CLASSIFICATION	3.8030510822882964E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999865218336468	WITHOUT_CLASSIFICATION	1.3478166353139296E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.99999888504575	WITHOUT_CLASSIFICATION	1.1149542500197903E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999870520767585	WITHOUT_CLASSIFICATION	1.2947923241419138E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999972438353807	WITHOUT_CLASSIFICATION	2.756164619297407E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999972438353807	WITHOUT_CLASSIFICATION	2.756164619297407E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999994083447662	WITHOUT_CLASSIFICATION	5.916552337957217E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999767120678025	WITHOUT_CLASSIFICATION	2.3287932197442308E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999971915366965	WITHOUT_CLASSIFICATION	2.808463303478338E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.999883882667488	WITHOUT_CLASSIFICATION	1.1611733251206524E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999901179260646	WITHOUT_CLASSIFICATION	9.882073935387758E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9997077690421511	WITHOUT_CLASSIFICATION	2.922309578490039E-4	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999999956883848	WITHOUT_CLASSIFICATION	4.311615173691879E-9	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.990963249634933	WITHOUT_CLASSIFICATION	0.009036750365066952	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999999107843304	WITHOUT_CLASSIFICATION	8.921566964631062E-8	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999999107843304	WITHOUT_CLASSIFICATION	8.921566964631062E-8	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.999999351152655	WITHOUT_CLASSIFICATION	6.488473449795603E-7	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999999707266577	WITHOUT_CLASSIFICATION	2.9273342233830992E-8	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.999999972965667	WITHOUT_CLASSIFICATION	2.7034333066636756E-8	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999999045886364	WITHOUT_CLASSIFICATION	9.541136361424218E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999110471535	WITHOUT_CLASSIFICATION	8.895284656872178E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999110471535	WITHOUT_CLASSIFICATION	8.895284656872178E-8	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999999894928279	WITHOUT_CLASSIFICATION	1.0507172129699008E-8	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999999960656836	WITHOUT_CLASSIFICATION	3.934316481778441E-9	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999998633303601	WITHOUT_CLASSIFICATION	1.366696398755628E-7	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999759912387927	WITHOUT_CLASSIFICATION	2.4008761207329826E-5	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999995937245599	WITHOUT_CLASSIFICATION	4.062754401134516E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999998974061867	WITHOUT_CLASSIFICATION	1.0259381340933179E-7	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999630988056243	WITHOUT_CLASSIFICATION	3.690119437566915E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999999148595695	WITHOUT_CLASSIFICATION	8.514043039365442E-8	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9993190026244522	WITHOUT_CLASSIFICATION	6.809973755477709E-4	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9996878115272368	WITHOUT_CLASSIFICATION	3.121884727631732E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9999176644031627	WITHOUT_CLASSIFICATION	8.233559683742592E-5	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999980030958456	WITHOUT_CLASSIFICATION	1.9969041544127044E-6	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999999996406105	WITHOUT_CLASSIFICATION	3.593894756437312E-10	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999996122990787	WITHOUT_CLASSIFICATION	3.8770092124170913E-7	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999997176804909	WITHOUT_CLASSIFICATION	2.823195092022071E-7	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999995335995778	WITHOUT_CLASSIFICATION	4.6640042207256017E-7	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999993235099556	WITHOUT_CLASSIFICATION	6.764900444177337E-7	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999792679883558	WITHOUT_CLASSIFICATION	2.0732011644201758E-5	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999999274045382	WITHOUT_CLASSIFICATION	7.25954617462715E-8	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999997670910902	WITHOUT_CLASSIFICATION	2.329089097311143E-7	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999993670116664	WITHOUT_CLASSIFICATION	6.329883336389861E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999994530278431	WITHOUT_CLASSIFICATION	5.469721567791658E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999994530278431	WITHOUT_CLASSIFICATION	5.469721567791658E-7	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999825842247463	WITHOUT_CLASSIFICATION	1.7415775253779716E-5	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9995469622995607	WITHOUT_CLASSIFICATION	4.530377004391737E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999990549153669	WITHOUT_CLASSIFICATION	9.450846330196772E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999990549153669	WITHOUT_CLASSIFICATION	9.450846330196772E-7	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.94883919312556	DEFECT	0.05116080687444005	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999339586450178	WITHOUT_CLASSIFICATION	6.604135498223183E-5	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999882460681951	WITHOUT_CLASSIFICATION	1.1753931804915763E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999953109499864	WITHOUT_CLASSIFICATION	4.68905001361194E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999953109499864	WITHOUT_CLASSIFICATION	4.68905001361194E-6	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9998971155177386	WITHOUT_CLASSIFICATION	1.0288448226136675E-4	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999998922627298	WITHOUT_CLASSIFICATION	1.0773727029676568E-7	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999995669971298	WITHOUT_CLASSIFICATION	4.330028701894215E-7	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999980101778507	WITHOUT_CLASSIFICATION	1.9898221492832793E-6	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999995027951497	WITHOUT_CLASSIFICATION	4.972048502514236E-7	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999994646333312	WITHOUT_CLASSIFICATION	5.353666686788588E-7	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.999999814389146	WITHOUT_CLASSIFICATION	1.8561085403504658E-7	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999911199358031	WITHOUT_CLASSIFICATION	8.880064196917056E-6	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999993615286541	WITHOUT_CLASSIFICATION	6.384713458774195E-7	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9997907503989931	WITHOUT_CLASSIFICATION	2.0924960100681238E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999973735360961	WITHOUT_CLASSIFICATION	2.626463903974142E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999998672267121	WITHOUT_CLASSIFICATION	1.3277328797475623E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999996516067362	WITHOUT_CLASSIFICATION	3.483932637582344E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9994850190066547	WITHOUT_CLASSIFICATION	5.149809933452996E-4	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999967755236102	WITHOUT_CLASSIFICATION	3.2244763897609994E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9940520963156827	WITHOUT_CLASSIFICATION	0.005947903684317364	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.999999940197934	WITHOUT_CLASSIFICATION	5.980206599442273E-8	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999398297541416	WITHOUT_CLASSIFICATION	6.017024585851314E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9997157631235102	WITHOUT_CLASSIFICATION	2.842368764898187E-4	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999871138067676	WITHOUT_CLASSIFICATION	1.288619323229147E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999921413268228	WITHOUT_CLASSIFICATION	7.858673177207557E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999987301440814	WITHOUT_CLASSIFICATION	1.26985591865116E-6	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999810645824542	WITHOUT_CLASSIFICATION	1.8935417545753304E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9998199274837204	WITHOUT_CLASSIFICATION	1.8007251627951833E-4	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999997567590143	WITHOUT_CLASSIFICATION	2.4324098573538826E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9933097146144838	WITHOUT_CLASSIFICATION	0.006690285385516236	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.997392721371685	WITHOUT_CLASSIFICATION	0.002607278628315053	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999997530301439	WITHOUT_CLASSIFICATION	2.4696985602462245E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.999973343394248	WITHOUT_CLASSIFICATION	2.665660575192126E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999989517298672	WITHOUT_CLASSIFICATION	1.0482701327800757E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999999999315469	WITHOUT_CLASSIFICATION	6.845310632910501E-10	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9994850190066547	WITHOUT_CLASSIFICATION	5.149809933452996E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999997530301439	WITHOUT_CLASSIFICATION	2.4696985602462245E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.999973343394248	WITHOUT_CLASSIFICATION	2.665660575192126E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999999999315469	WITHOUT_CLASSIFICATION	6.845310632910501E-10	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999999287941638	WITHOUT_CLASSIFICATION	7.120583623389826E-8	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.999960057706825	WITHOUT_CLASSIFICATION	3.9942293175022174E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999406632728884	WITHOUT_CLASSIFICATION	5.9336727111655474E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999967463967956	WITHOUT_CLASSIFICATION	3.253603204307432E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999463680004	WITHOUT_CLASSIFICATION	5.3631999581121594E-8	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.999997954686264	WITHOUT_CLASSIFICATION	2.0453137359725053E-6	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999992585191366	WITHOUT_CLASSIFICATION	7.414808632475978E-7	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999997741585274	WITHOUT_CLASSIFICATION	2.2584147255932014E-7	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999998898495652	WITHOUT_CLASSIFICATION	1.1015043477281939E-7	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.999477488703728	WITHOUT_CLASSIFICATION	5.22511296271921E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999864781255058	WITHOUT_CLASSIFICATION	1.3521874494164521E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999864781255058	WITHOUT_CLASSIFICATION	1.3521874494164521E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999979943946123	WITHOUT_CLASSIFICATION	2.0056053877332545E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999987564618502	WITHOUT_CLASSIFICATION	1.2435381498167151E-6	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999985446338286	WITHOUT_CLASSIFICATION	1.4553661712940713E-6	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999999384009923	WITHOUT_CLASSIFICATION	6.159900772886468E-8	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999940149475043	WITHOUT_CLASSIFICATION	5.985052495726815E-6	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999797426090675	WITHOUT_CLASSIFICATION	2.0257390932484754E-5	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999945110828358	WITHOUT_CLASSIFICATION	5.488917164287233E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.996752864354553	WITHOUT_CLASSIFICATION	0.003247135645446887	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999999791343513	WITHOUT_CLASSIFICATION	2.0865648635382846E-8	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999998516734907	WITHOUT_CLASSIFICATION	1.4832650932771347E-7	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.999999583910436	WITHOUT_CLASSIFICATION	4.1608956390152503E-7	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999948377364897	WITHOUT_CLASSIFICATION	5.162263510231406E-6	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999999916185616	WITHOUT_CLASSIFICATION	8.381438504683399E-9	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999995851265918	WITHOUT_CLASSIFICATION	4.1487340824929E-7	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999999730013921	WITHOUT_CLASSIFICATION	2.699860790346276E-8	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999996309484482	WITHOUT_CLASSIFICATION	3.690515517736677E-7	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999999922725237	WITHOUT_CLASSIFICATION	7.727476233416755E-9	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999999613346202	WITHOUT_CLASSIFICATION	3.866537986792044E-8	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.99999987005453	WITHOUT_CLASSIFICATION	1.2994547003594961E-7	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999998179924423	WITHOUT_CLASSIFICATION	1.820075575927473E-7	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999964171128682	WITHOUT_CLASSIFICATION	3.5828871317680116E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999966773977844	WITHOUT_CLASSIFICATION	3.3226022155346487E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999999957186914	WITHOUT_CLASSIFICATION	4.281308628621911E-9	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999993241360368	WITHOUT_CLASSIFICATION	6.75863963229838E-7	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999998287666918	WITHOUT_CLASSIFICATION	1.7123330816654384E-7	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999992005946859	WITHOUT_CLASSIFICATION	7.994053140475874E-7	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9988850826707838	WITHOUT_CLASSIFICATION	0.0011149173292162057	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9996341637001669	WITHOUT_CLASSIFICATION	3.658362998331661E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999951302198965	WITHOUT_CLASSIFICATION	4.86978010345454E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999996790258987	WITHOUT_CLASSIFICATION	3.2097410129880156E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999980818698149	WITHOUT_CLASSIFICATION	1.9181301851201457E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999998863422007	WITHOUT_CLASSIFICATION	1.136577993023837E-7	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999999019887392	WITHOUT_CLASSIFICATION	9.801126077043689E-8	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999993297465773	WITHOUT_CLASSIFICATION	6.702534225296396E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999998848729963	WITHOUT_CLASSIFICATION	1.1512700376690234E-7	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9997115185594516	WITHOUT_CLASSIFICATION	2.884814405483116E-4	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999998735249397	WITHOUT_CLASSIFICATION	1.264750603497974E-7	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999991115228676	WITHOUT_CLASSIFICATION	8.884771324553167E-7	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999989137277117	WITHOUT_CLASSIFICATION	1.086272288335004E-6	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999993560145999	WITHOUT_CLASSIFICATION	6.439854000555031E-7	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9997874440010946	WITHOUT_CLASSIFICATION	2.125559989053282E-4	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999004292040733	WITHOUT_CLASSIFICATION	9.957079592672196E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999959735997027	WITHOUT_CLASSIFICATION	4.026400297217985E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999858738992684	WITHOUT_CLASSIFICATION	1.41261007316507E-5	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999277302324651	WITHOUT_CLASSIFICATION	7.22697675349396E-5	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999985631873455	WITHOUT_CLASSIFICATION	1.4368126545025962E-6	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999990145766128	WITHOUT_CLASSIFICATION	9.85423387223096E-7	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999912164953098	WITHOUT_CLASSIFICATION	8.783504690149031E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999730059269758	WITHOUT_CLASSIFICATION	2.699407302424817E-5	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999989012820215	WITHOUT_CLASSIFICATION	1.0987179784272317E-6	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.999980917246517	WITHOUT_CLASSIFICATION	1.90827534828934E-5	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999849264692	WITHOUT_CLASSIFICATION	1.507353073050406E-8	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999860755510499	WITHOUT_CLASSIFICATION	1.3924448950052989E-5	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999909880040461	WITHOUT_CLASSIFICATION	9.011995953967083E-6	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999990456051489	WITHOUT_CLASSIFICATION	9.543948511232075E-7	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999955763138209	WITHOUT_CLASSIFICATION	4.423686179132289E-6	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999981718720277	WITHOUT_CLASSIFICATION	1.8281279722582012E-6	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999978288819354	WITHOUT_CLASSIFICATION	2.1711180645509633E-6	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9983292405754938	WITHOUT_CLASSIFICATION	0.0016707594245061518	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999258283950748	WITHOUT_CLASSIFICATION	7.417160492514225E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999258283950748	WITHOUT_CLASSIFICATION	7.417160492514225E-5	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999927069692012	WITHOUT_CLASSIFICATION	7.293030798891669E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999985206774186	WITHOUT_CLASSIFICATION	1.4793225813761727E-6	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.999986407884024	WITHOUT_CLASSIFICATION	1.359211597598348E-5	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999785970430595	WITHOUT_CLASSIFICATION	2.1402956940463285E-5	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.999996043265182	WITHOUT_CLASSIFICATION	3.956734817974102E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9999125716117784	WITHOUT_CLASSIFICATION	8.742838822162042E-5	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9998099324575902	WITHOUT_CLASSIFICATION	1.900675424097735E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999998861335148	WITHOUT_CLASSIFICATION	1.1386648522905945E-7	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999999546271197	WITHOUT_CLASSIFICATION	4.53728803619472E-8	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999999999135111	WITHOUT_CLASSIFICATION	8.648890343592047E-11	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999977231675293	WITHOUT_CLASSIFICATION	2.2768324706641236E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999989993060564	WITHOUT_CLASSIFICATION	1.0006939435772597E-6	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.999999893605794	WITHOUT_CLASSIFICATION	1.063942059325178E-7	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999999865378991	WITHOUT_CLASSIFICATION	1.346210090250213E-8	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.999998604183017	WITHOUT_CLASSIFICATION	1.3958169830320296E-6	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999913046814787	WITHOUT_CLASSIFICATION	8.695318521279941E-6	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999995149266654	WITHOUT_CLASSIFICATION	4.850733346252853E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999937866764353	WITHOUT_CLASSIFICATION	6.213323564680834E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9995620345341906	WITHOUT_CLASSIFICATION	4.3796546580939075E-4	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999999770155219	WITHOUT_CLASSIFICATION	2.2984478112654524E-8	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999704560495843	WITHOUT_CLASSIFICATION	2.954395041558148E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999998083941614	WITHOUT_CLASSIFICATION	1.9160583868259995E-7	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999993588518022	WITHOUT_CLASSIFICATION	6.411481977227295E-7	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.999999993152068	WITHOUT_CLASSIFICATION	6.847931970671871E-9	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999977257470736	WITHOUT_CLASSIFICATION	2.2742529263973394E-6	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999979017993803	WITHOUT_CLASSIFICATION	2.0982006197500217E-6	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999999892003539	WITHOUT_CLASSIFICATION	1.0799646111061564E-8	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999971075097326	WITHOUT_CLASSIFICATION	2.892490267349238E-6	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999994540212658	WITHOUT_CLASSIFICATION	5.459787342631143E-7	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.999996252462954	WITHOUT_CLASSIFICATION	3.7475370460727695E-6	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999913639591383	WITHOUT_CLASSIFICATION	8.636040861647518E-6	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999938256313189	WITHOUT_CLASSIFICATION	6.174368681151728E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999997940787217	WITHOUT_CLASSIFICATION	2.059212781574381E-7	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999996422955111	WITHOUT_CLASSIFICATION	3.5770448892767923E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999997940787217	WITHOUT_CLASSIFICATION	2.059212781574381E-7	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999915033348153	WITHOUT_CLASSIFICATION	8.496665184618466E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9997810418135523	WITHOUT_CLASSIFICATION	2.1895818644774648E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9997810418135523	WITHOUT_CLASSIFICATION	2.1895818644774648E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9997810418135523	WITHOUT_CLASSIFICATION	2.1895818644774648E-4	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998814660066	WITHOUT_CLASSIFICATION	1.1853399331647541E-7	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998814660066	WITHOUT_CLASSIFICATION	1.1853399331647541E-7	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999999852243115	WITHOUT_CLASSIFICATION	1.47756884322274E-8	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999095473764108	WITHOUT_CLASSIFICATION	9.04526235892627E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999999874881204	WITHOUT_CLASSIFICATION	1.2511879699314493E-8	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999999364543504	WITHOUT_CLASSIFICATION	6.354564967169072E-8	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999984630662679	WITHOUT_CLASSIFICATION	1.5369337320489725E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999996501457903	WITHOUT_CLASSIFICATION	3.498542096451428E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999991733252424	WITHOUT_CLASSIFICATION	8.266747577130079E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999998631615853	WITHOUT_CLASSIFICATION	1.368384147521815E-7	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999999945424946	WITHOUT_CLASSIFICATION	5.457505452432629E-9	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999997436429146	WITHOUT_CLASSIFICATION	2.563570854410965E-7	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999994640416603	WITHOUT_CLASSIFICATION	5.359583396941332E-7	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9999160171540487	WITHOUT_CLASSIFICATION	8.39828459513443E-5	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999701279135866	WITHOUT_CLASSIFICATION	2.9872086413342215E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999997190625481	WITHOUT_CLASSIFICATION	2.8093745189644985E-7	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999996856007717	WITHOUT_CLASSIFICATION	3.1439922830367234E-7	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999998579577909	WITHOUT_CLASSIFICATION	1.420422090177152E-7	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999943652654576	WITHOUT_CLASSIFICATION	5.634734542315682E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999994103992802	WITHOUT_CLASSIFICATION	5.89600719805194E-7	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999994103992802	WITHOUT_CLASSIFICATION	5.89600719805194E-7	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999996651812755	WITHOUT_CLASSIFICATION	3.348187245323918E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999998358949995	WITHOUT_CLASSIFICATION	1.6410500051172188E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999998358949995	WITHOUT_CLASSIFICATION	1.6410500051172188E-7	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999509484098599	WITHOUT_CLASSIFICATION	4.905159014014557E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999999131872552	WITHOUT_CLASSIFICATION	8.681274470513996E-8	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999996765782457	WITHOUT_CLASSIFICATION	3.2342175421554895E-7	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999994020875186	WITHOUT_CLASSIFICATION	5.979124814341416E-7	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999997910034572	WITHOUT_CLASSIFICATION	2.0899654280680818E-7	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999999132036647	WITHOUT_CLASSIFICATION	8.679633545043922E-8	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999996562704726	WITHOUT_CLASSIFICATION	3.437295274569709E-7	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999886773697819	WITHOUT_CLASSIFICATION	1.132263021807837E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999999208084375	WITHOUT_CLASSIFICATION	7.919156255435879E-8	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999985605658838	WITHOUT_CLASSIFICATION	1.439434116308327E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999997692058967	WITHOUT_CLASSIFICATION	2.3079410316652443E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999926039491305	WITHOUT_CLASSIFICATION	7.396050869469038E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999999056064004	WITHOUT_CLASSIFICATION	9.439359966945993E-8	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999983807794286	WITHOUT_CLASSIFICATION	1.619220571410045E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999998631615853	WITHOUT_CLASSIFICATION	1.368384147521815E-7	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.999982326714903	WITHOUT_CLASSIFICATION	1.7673285097127667E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.99999868744588	WITHOUT_CLASSIFICATION	1.312554119981981E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999787712923	WITHOUT_CLASSIFICATION	2.1228707685176115E-8	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999787712923	WITHOUT_CLASSIFICATION	2.1228707685176115E-8	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999573574014691	WITHOUT_CLASSIFICATION	4.2642598530835574E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999300077924625	WITHOUT_CLASSIFICATION	6.99922075374546E-5	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999997083363911	WITHOUT_CLASSIFICATION	2.9166360887259795E-7	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999982062515763	WITHOUT_CLASSIFICATION	1.7937484237952855E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999994320486663	WITHOUT_CLASSIFICATION	5.679513337327091E-7	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.999999977375208	WITHOUT_CLASSIFICATION	2.2624792088793106E-8	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.999832411617133	WITHOUT_CLASSIFICATION	1.675883828669965E-4	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.998947471152339	WITHOUT_CLASSIFICATION	0.0010525288476610673	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999972075791882	WITHOUT_CLASSIFICATION	2.7924208117109706E-6	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999987823211755	WITHOUT_CLASSIFICATION	1.217678824496146E-6	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999958440152789	WITHOUT_CLASSIFICATION	4.155984721125649E-6	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999977254234717	WITHOUT_CLASSIFICATION	2.274576528302961E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.651982836383401	DEFECT	0.3480171636165989	WITHOUT_CLASSIFICATION
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999981342835235	WITHOUT_CLASSIFICATION	1.8657164765425204E-6	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999995821742488	WITHOUT_CLASSIFICATION	4.178257511954851E-7	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999979808346156	WITHOUT_CLASSIFICATION	2.019165384507075E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999992090204595	WITHOUT_CLASSIFICATION	7.909795405815861E-7	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999999919537361	WITHOUT_CLASSIFICATION	8.046263849943572E-9	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999999862123448	WITHOUT_CLASSIFICATION	1.3787655129893108E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999953889446683	WITHOUT_CLASSIFICATION	4.611055331636516E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999983739965111	WITHOUT_CLASSIFICATION	1.6260034887650875E-6	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999990737318457	WITHOUT_CLASSIFICATION	9.262681542628876E-7	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999991428718653	WITHOUT_CLASSIFICATION	8.571281347240941E-7	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999976537095	WITHOUT_CLASSIFICATION	2.3462904375802155E-9	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999977587894258	WITHOUT_CLASSIFICATION	2.2412105742886966E-6	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999993552133813	WITHOUT_CLASSIFICATION	6.44786618548247E-7	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9986316795922464	WITHOUT_CLASSIFICATION	0.0013683204077535422	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9773649826847516	WITHOUT_CLASSIFICATION	0.022635017315248366	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999999887012383	WITHOUT_CLASSIFICATION	1.1298761642748257E-8	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9998485961240627	WITHOUT_CLASSIFICATION	1.5140387593727455E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999755382537241	WITHOUT_CLASSIFICATION	2.4461746275826083E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999999905412436	WITHOUT_CLASSIFICATION	9.4587564381855E-9	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9998804547377419	WITHOUT_CLASSIFICATION	1.1954526225812625E-4	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9966929436307952	WITHOUT_CLASSIFICATION	0.0033070563692047966	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999888190784	WITHOUT_CLASSIFICATION	1.1180921566499868E-8	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999962819155667	WITHOUT_CLASSIFICATION	3.7180844333936096E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9773649826847516	WITHOUT_CLASSIFICATION	0.022635017315248366	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.999998536138751	WITHOUT_CLASSIFICATION	1.4638612489638717E-6	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999888190784	WITHOUT_CLASSIFICATION	1.1180921566499868E-8	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999988316632664	WITHOUT_CLASSIFICATION	1.1683367335983786E-6	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999999783920577	WITHOUT_CLASSIFICATION	2.160794223002767E-8	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999999241062358	WITHOUT_CLASSIFICATION	7.589376416672239E-8	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999988483119705	WITHOUT_CLASSIFICATION	1.1516880294557001E-6	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999996505766232	WITHOUT_CLASSIFICATION	3.494233767459551E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999921869531675	WITHOUT_CLASSIFICATION	7.813046832375673E-6	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999921869531675	WITHOUT_CLASSIFICATION	7.813046832375673E-6	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999999841226167	WITHOUT_CLASSIFICATION	1.5877383352994658E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999468931001	WITHOUT_CLASSIFICATION	5.310689995751222E-8	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999995604990809	WITHOUT_CLASSIFICATION	4.3950091913235206E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999995604990809	WITHOUT_CLASSIFICATION	4.3950091913235206E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999884474195755	WITHOUT_CLASSIFICATION	1.155258042450307E-5	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9991610398454921	WITHOUT_CLASSIFICATION	8.38960154508016E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999621275465042	WITHOUT_CLASSIFICATION	3.787245349588369E-5	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999621275465042	WITHOUT_CLASSIFICATION	3.787245349588369E-5	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999884946966509	WITHOUT_CLASSIFICATION	1.15053033490963E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999904871047873	WITHOUT_CLASSIFICATION	9.512895212747539E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999986060795862	WITHOUT_CLASSIFICATION	1.3939204137382836E-6	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.999999338734643	WITHOUT_CLASSIFICATION	6.61265356930934E-7	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999976198772905	WITHOUT_CLASSIFICATION	2.380122709552861E-6	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999950025424549	WITHOUT_CLASSIFICATION	4.997457545162231E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999926699947123	WITHOUT_CLASSIFICATION	7.330005287734218E-6	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999962187671452	WITHOUT_CLASSIFICATION	3.781232854844263E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999832392150687	WITHOUT_CLASSIFICATION	1.676078493125401E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999995688145571	WITHOUT_CLASSIFICATION	4.311854429300756E-7	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999991964825351	WITHOUT_CLASSIFICATION	8.035174648699231E-7	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999830548051545	WITHOUT_CLASSIFICATION	1.694519484545688E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999823093104853	WITHOUT_CLASSIFICATION	1.7690689514805744E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999959114564743	WITHOUT_CLASSIFICATION	4.088543525799905E-6	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999995125644365	WITHOUT_CLASSIFICATION	4.874355633543577E-7	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999996234485969	WITHOUT_CLASSIFICATION	3.765514029613133E-7	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9998219813217658	WITHOUT_CLASSIFICATION	1.780186782342732E-4	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999959271318084	WITHOUT_CLASSIFICATION	4.072868191517139E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999943473194123	WITHOUT_CLASSIFICATION	5.652680587702452E-6	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.999980331134143	WITHOUT_CLASSIFICATION	1.9668865857024665E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999997951858101	WITHOUT_CLASSIFICATION	2.0481418999335566E-7	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999995796915171	WITHOUT_CLASSIFICATION	4.203084828979379E-7	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999899664273585	WITHOUT_CLASSIFICATION	1.0033572641490028E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999931238609026	WITHOUT_CLASSIFICATION	6.876139097439463E-6	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999804401653954	WITHOUT_CLASSIFICATION	1.9559834604552173E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999897487564746	WITHOUT_CLASSIFICATION	1.0251243525426255E-5	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999919032828788	WITHOUT_CLASSIFICATION	8.09671712123936E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999881615582925	WITHOUT_CLASSIFICATION	1.183844170755671E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999997184602507	WITHOUT_CLASSIFICATION	2.8153974930718757E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999997184602507	WITHOUT_CLASSIFICATION	2.8153974930718757E-6	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999958897634346	WITHOUT_CLASSIFICATION	4.1102365654635214E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999998405504217	WITHOUT_CLASSIFICATION	1.5944957839490745E-7	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999945596540604	WITHOUT_CLASSIFICATION	5.440345939601147E-6	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998057895973803	WITHOUT_CLASSIFICATION	1.9421040261970618E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.999968315981486	WITHOUT_CLASSIFICATION	3.168401851403653E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999850059229684	WITHOUT_CLASSIFICATION	1.4994077031553703E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999994172816471	WITHOUT_CLASSIFICATION	5.827183529138187E-7	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999998054316571	WITHOUT_CLASSIFICATION	1.9456834294032224E-7	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999956259694602	WITHOUT_CLASSIFICATION	4.374030539779091E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999967379436	WITHOUT_CLASSIFICATION	3.262056374664372E-9	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999996079337294	WITHOUT_CLASSIFICATION	3.9206627045803996E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999999764904942	WITHOUT_CLASSIFICATION	2.3509505667038933E-8	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999988894529652	WITHOUT_CLASSIFICATION	1.1105470347817457E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999981773389555	WITHOUT_CLASSIFICATION	1.8226610444923227E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999991653325935	WITHOUT_CLASSIFICATION	8.346674066387076E-7	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999988691279825	WITHOUT_CLASSIFICATION	1.1308720174682598E-6	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999875028937613	WITHOUT_CLASSIFICATION	1.2497106238627959E-5	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999902748366618	WITHOUT_CLASSIFICATION	9.725163338274312E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999959696607365	WITHOUT_CLASSIFICATION	4.030339263606438E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999209612345434	WITHOUT_CLASSIFICATION	7.903876545662846E-5	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999996236273474	WITHOUT_CLASSIFICATION	3.7637265263573694E-7	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999866074094036	WITHOUT_CLASSIFICATION	1.3392590596486097E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999999659097639	WITHOUT_CLASSIFICATION	3.409023605327024E-8	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999999952746513	WITHOUT_CLASSIFICATION	4.7253486806389275E-9	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999997105750096	WITHOUT_CLASSIFICATION	2.8942499046542094E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.999998574788762	WITHOUT_CLASSIFICATION	1.4252112380252933E-6	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999693595189612	WITHOUT_CLASSIFICATION	3.0640481038890075E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999994340370234	WITHOUT_CLASSIFICATION	5.65962976683372E-7	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999933253998108	WITHOUT_CLASSIFICATION	6.674600189185587E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999998692123857	WITHOUT_CLASSIFICATION	1.3078761421494151E-7	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999959354597729	WITHOUT_CLASSIFICATION	4.064540227115168E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999989490029985	WITHOUT_CLASSIFICATION	1.0509970015236315E-6	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999999548932729	WITHOUT_CLASSIFICATION	4.510672714997301E-8	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999980352768546	WITHOUT_CLASSIFICATION	1.96472314536872E-6	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999998522294432	WITHOUT_CLASSIFICATION	1.4777055679319096E-7	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.999998338346235	WITHOUT_CLASSIFICATION	1.6616537649707458E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999993389174596	WITHOUT_CLASSIFICATION	6.61082540326895E-7	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999983729594414	WITHOUT_CLASSIFICATION	1.6270405585604089E-6	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999999986856075	WITHOUT_CLASSIFICATION	1.3143924270526487E-9	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.999999568979605	WITHOUT_CLASSIFICATION	4.3102039500301873E-7	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9994748815931016	WITHOUT_CLASSIFICATION	5.251184068983381E-4	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999999537980071	WITHOUT_CLASSIFICATION	4.620199279476317E-8	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999302238509018	WITHOUT_CLASSIFICATION	6.977614909810253E-5	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999302238509018	WITHOUT_CLASSIFICATION	6.977614909810253E-5	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999997192979825	WITHOUT_CLASSIFICATION	2.807020175930198E-7	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999251179207506	WITHOUT_CLASSIFICATION	7.488207924942844E-5	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999987216036051	WITHOUT_CLASSIFICATION	1.2783963947587435E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999989460493792	WITHOUT_CLASSIFICATION	1.0539506207557433E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999840112077	WITHOUT_CLASSIFICATION	1.5988792284527266E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999806506231	WITHOUT_CLASSIFICATION	1.9349376927935788E-8	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999991821453237	WITHOUT_CLASSIFICATION	8.178546762024507E-7	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999990531866879	WITHOUT_CLASSIFICATION	9.468133120535006E-7	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9819353006061617	WITHOUT_CLASSIFICATION	0.01806469939383822	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999671708072838	WITHOUT_CLASSIFICATION	3.2829192716176046E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999998440404321	WITHOUT_CLASSIFICATION	1.559595680051157E-7	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999998098428525	WITHOUT_CLASSIFICATION	1.9015714737235974E-7	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999998957150941	WITHOUT_CLASSIFICATION	1.0428490595098104E-7	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999998762407404	WITHOUT_CLASSIFICATION	1.2375925970690742E-7	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999898883803	WITHOUT_CLASSIFICATION	1.0111619735581878E-8	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999998103599131	WITHOUT_CLASSIFICATION	1.896400869229295E-7	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999231970684	WITHOUT_CLASSIFICATION	7.680293154517387E-8	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999976921019945	WITHOUT_CLASSIFICATION	2.307898005612656E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999995216288905	WITHOUT_CLASSIFICATION	4.783711095639039E-7	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999951635696385	WITHOUT_CLASSIFICATION	4.836430361474824E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999996844994943	WITHOUT_CLASSIFICATION	3.1550050566673073E-7	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999941118995062	WITHOUT_CLASSIFICATION	5.888100493860099E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999998746273678	WITHOUT_CLASSIFICATION	1.253726322025774E-7	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999999205443437	WITHOUT_CLASSIFICATION	7.945565633573676E-8	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999683954464	WITHOUT_CLASSIFICATION	3.1604553640687374E-8	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999998213696129	WITHOUT_CLASSIFICATION	1.7863038715189445E-7	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999998035706461	WITHOUT_CLASSIFICATION	1.9642935389281672E-7	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999999535195905	WITHOUT_CLASSIFICATION	4.648040944335503E-8	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999999193611993	WITHOUT_CLASSIFICATION	8.063880066787051E-8	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999999486526715	WITHOUT_CLASSIFICATION	5.134732839168797E-8	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.999999840020574	WITHOUT_CLASSIFICATION	1.5997942609787565E-7	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999993478439482	WITHOUT_CLASSIFICATION	6.521560518405919E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999993838346739	WITHOUT_CLASSIFICATION	6.161653260124118E-7	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.999998905646313	WITHOUT_CLASSIFICATION	1.0943536869985472E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999983729594414	WITHOUT_CLASSIFICATION	1.6270405585604089E-6	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999997775070768	WITHOUT_CLASSIFICATION	2.224929230627595E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999960889722	WITHOUT_CLASSIFICATION	3.911027816987731E-9	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999960889722	WITHOUT_CLASSIFICATION	3.911027816987731E-9	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999986361759888	WITHOUT_CLASSIFICATION	1.3638240111855645E-6	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.999998834880764	WITHOUT_CLASSIFICATION	1.1651192359420515E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999959044278502	WITHOUT_CLASSIFICATION	4.095572149716349E-6	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999998924427848	WITHOUT_CLASSIFICATION	1.0755721523585607E-7	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999990977166224	WITHOUT_CLASSIFICATION	9.022833775852985E-7	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999997731051726	WITHOUT_CLASSIFICATION	2.268948273307278E-7	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999998057698268	WITHOUT_CLASSIFICATION	1.9423017327065977E-7	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999980787079447	WITHOUT_CLASSIFICATION	1.9212920554020258E-6	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999981546869877	WITHOUT_CLASSIFICATION	1.8453130123452287E-6	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.999998384871001	WITHOUT_CLASSIFICATION	1.615128998995464E-6	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999843745120893	WITHOUT_CLASSIFICATION	1.5625487910669935E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999948274094644	WITHOUT_CLASSIFICATION	5.172590535552214E-6	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.999998306133341	WITHOUT_CLASSIFICATION	1.6938666591232385E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999989675546523	WITHOUT_CLASSIFICATION	1.032445347690074E-6	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.99999992823658	WITHOUT_CLASSIFICATION	7.176342004627377E-8	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999931860312384	WITHOUT_CLASSIFICATION	6.813968761574408E-6	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999861115072979	WITHOUT_CLASSIFICATION	1.3888492702158403E-5	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999921983996944	WITHOUT_CLASSIFICATION	7.801600305561835E-6	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999971899366856	WITHOUT_CLASSIFICATION	2.81006331433969E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999975404631821	WITHOUT_CLASSIFICATION	2.4595368177812506E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999694719459785	WITHOUT_CLASSIFICATION	3.052805402139605E-5	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999973754739025	WITHOUT_CLASSIFICATION	2.6245260975356634E-6	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999479049922	WITHOUT_CLASSIFICATION	5.209500774026884E-8	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.999991950699961	WITHOUT_CLASSIFICATION	8.049300039018694E-6	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.999990326986433	WITHOUT_CLASSIFICATION	9.673013567091886E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999946247638246	WITHOUT_CLASSIFICATION	5.375236175342144E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999699715045	WITHOUT_CLASSIFICATION	3.0028495502243024E-7	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999883857388	WITHOUT_CLASSIFICATION	1.1614261162890343E-8	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999996848563125	WITHOUT_CLASSIFICATION	3.151436874286208E-7	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999913968268	WITHOUT_CLASSIFICATION	8.603173158539522E-9	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999998559634052	WITHOUT_CLASSIFICATION	1.440365946941694E-7	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999988723641156	WITHOUT_CLASSIFICATION	1.1276358844728104E-6	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.999999474163268	WITHOUT_CLASSIFICATION	5.258367319340061E-7	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999949496655725	WITHOUT_CLASSIFICATION	5.050334427521272E-6	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999974673201274	WITHOUT_CLASSIFICATION	2.532679872562451E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999969796570662	WITHOUT_CLASSIFICATION	3.020342933640262E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999990303130321	WITHOUT_CLASSIFICATION	9.696869679284407E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999946247638246	WITHOUT_CLASSIFICATION	5.375236175342144E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999699715045	WITHOUT_CLASSIFICATION	3.0028495502243024E-7	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999883857388	WITHOUT_CLASSIFICATION	1.1614261162890343E-8	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999913968268	WITHOUT_CLASSIFICATION	8.603173158539522E-9	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9993678060429215	WITHOUT_CLASSIFICATION	6.321939570784564E-4	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999997447693005	WITHOUT_CLASSIFICATION	2.5523069939549756E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999982475827424	WITHOUT_CLASSIFICATION	1.7524172575909871E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999974381179605	WITHOUT_CLASSIFICATION	2.561882039525522E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999846190830571	WITHOUT_CLASSIFICATION	1.5380916942897562E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999962483834436	WITHOUT_CLASSIFICATION	3.7516165564650847E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999992292617976	WITHOUT_CLASSIFICATION	7.707382024015388E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999942241757532	WITHOUT_CLASSIFICATION	5.775824246697285E-6	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.999999684078399	WITHOUT_CLASSIFICATION	3.1592160102235005E-7	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999998039906133	WITHOUT_CLASSIFICATION	1.960093867365291E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999996845204377	WITHOUT_CLASSIFICATION	3.154795622942676E-7	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999999744139249	WITHOUT_CLASSIFICATION	2.5586075144195324E-8	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999951733443927	WITHOUT_CLASSIFICATION	4.8266556072807875E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999998832221498	WITHOUT_CLASSIFICATION	1.1677785019597252E-7	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999996746514601	WITHOUT_CLASSIFICATION	3.253485399116678E-7	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999992341522135	WITHOUT_CLASSIFICATION	7.658477865565297E-7	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.999999954177773	WITHOUT_CLASSIFICATION	4.5822226866144265E-8	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999991524937347	WITHOUT_CLASSIFICATION	8.475062654028497E-7	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999990254191125	WITHOUT_CLASSIFICATION	9.74580887625334E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999990303130321	WITHOUT_CLASSIFICATION	9.696869679284407E-7	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999997447693005	WITHOUT_CLASSIFICATION	2.5523069939549756E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999982475827424	WITHOUT_CLASSIFICATION	1.7524172575909871E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999846190830571	WITHOUT_CLASSIFICATION	1.5380916942897562E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999962483834436	WITHOUT_CLASSIFICATION	3.7516165564650847E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999992292617976	WITHOUT_CLASSIFICATION	7.707382024015388E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999942241757532	WITHOUT_CLASSIFICATION	5.775824246697285E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999985943322269	WITHOUT_CLASSIFICATION	1.4056677730787493E-6	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999390710944175	WITHOUT_CLASSIFICATION	6.092890558253171E-5	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999999535208568	WITHOUT_CLASSIFICATION	4.647914316990974E-8	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999998930949738	WITHOUT_CLASSIFICATION	1.0690502611552036E-7	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999430532178084	WITHOUT_CLASSIFICATION	5.694678219151944E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999430532178084	WITHOUT_CLASSIFICATION	5.694678219151944E-5	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999982504767814	WITHOUT_CLASSIFICATION	1.7495232186467127E-6	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999999937815361	WITHOUT_CLASSIFICATION	6.218463878309607E-9	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999982302685111	WITHOUT_CLASSIFICATION	1.769731488999926E-6	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999989096243187	WITHOUT_CLASSIFICATION	1.0903756812867545E-6	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.99999999078179	WITHOUT_CLASSIFICATION	9.218209978340249E-9	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999992622768382	WITHOUT_CLASSIFICATION	7.377231617362664E-7	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999999388319815	WITHOUT_CLASSIFICATION	6.116801861932169E-8	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999996265335306	WITHOUT_CLASSIFICATION	3.7346646949958016E-7	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999962792859648	WITHOUT_CLASSIFICATION	3.720714035202118E-6	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999998495820416	WITHOUT_CLASSIFICATION	1.5041795831704806E-7	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.999999935133583	WITHOUT_CLASSIFICATION	6.486641711022635E-8	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.999998670441954	WITHOUT_CLASSIFICATION	1.3295580459992745E-6	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.999982445266607	WITHOUT_CLASSIFICATION	1.7554733393082173E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999994165672278	WITHOUT_CLASSIFICATION	5.834327721704157E-7	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999999391560376	WITHOUT_CLASSIFICATION	6.084396249476774E-8	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999993742900829	WITHOUT_CLASSIFICATION	6.257099170883329E-7	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999905511463	WITHOUT_CLASSIFICATION	9.448853734636994E-9	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999999363174011	WITHOUT_CLASSIFICATION	6.368259881149463E-8	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.999993596567872	WITHOUT_CLASSIFICATION	6.403432127962202E-6	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999999886990073	WITHOUT_CLASSIFICATION	1.130099267728997E-8	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9999986058789039	WITHOUT_CLASSIFICATION	1.3941210960626698E-6	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.999999634117994	WITHOUT_CLASSIFICATION	3.65882006007606E-7	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999999738260186	WITHOUT_CLASSIFICATION	2.6173981495635526E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9963666109500185	WITHOUT_CLASSIFICATION	0.0036333890499814195	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999161927123	WITHOUT_CLASSIFICATION	8.380728771432869E-8	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999970889833802	WITHOUT_CLASSIFICATION	2.9110166197167673E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999968932860609	WITHOUT_CLASSIFICATION	3.1067139391354144E-6	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999421004996047	WITHOUT_CLASSIFICATION	5.78995003953818E-5	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999846748134785	WITHOUT_CLASSIFICATION	1.5325186521471706E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999161927123	WITHOUT_CLASSIFICATION	8.380728771432869E-8	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999970889833802	WITHOUT_CLASSIFICATION	2.9110166197167673E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999994165672278	WITHOUT_CLASSIFICATION	5.834327721704157E-7	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999997625139497	WITHOUT_CLASSIFICATION	2.374860502558947E-7	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999997750352262	WITHOUT_CLASSIFICATION	2.2496477372412958E-7	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9994451228865835	WITHOUT_CLASSIFICATION	5.548771134165911E-4	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999809802882845	WITHOUT_CLASSIFICATION	1.9019711715472112E-5	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999999904568916	WITHOUT_CLASSIFICATION	9.543108469295237E-9	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999907662260813	WITHOUT_CLASSIFICATION	9.233773918704338E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999989230052632	WITHOUT_CLASSIFICATION	1.0769947367635292E-6	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999999639438603	WITHOUT_CLASSIFICATION	3.605613968858779E-8	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9994955609006584	WITHOUT_CLASSIFICATION	5.04439099341598E-4	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.999977031233393	WITHOUT_CLASSIFICATION	2.296876660704279E-5	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9997779315687331	WITHOUT_CLASSIFICATION	2.2206843126690128E-4	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999988139936045	WITHOUT_CLASSIFICATION	1.186006395592721E-6	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999989865382706	WITHOUT_CLASSIFICATION	1.0134617294156106E-6	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999993829347328	WITHOUT_CLASSIFICATION	6.170652672525209E-7	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999961771932773	WITHOUT_CLASSIFICATION	3.822806722684466E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999687961846428	WITHOUT_CLASSIFICATION	3.120381535721318E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.999673244297014	WITHOUT_CLASSIFICATION	3.267557029860356E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999921550110366	WITHOUT_CLASSIFICATION	7.84498896339839E-6	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999856962184	WITHOUT_CLASSIFICATION	1.4303781651941142E-8	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999942811105517	WITHOUT_CLASSIFICATION	5.7188894483975255E-6	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999948071431	WITHOUT_CLASSIFICATION	5.19285699304592E-9	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999982434449098	WITHOUT_CLASSIFICATION	1.756555090208428E-6	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999975455223706	WITHOUT_CLASSIFICATION	2.4544776293105206E-6	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999999891924598	WITHOUT_CLASSIFICATION	1.0807540288664617E-8	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999999993961156	WITHOUT_CLASSIFICATION	6.038843887394871E-10	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999977122929211	WITHOUT_CLASSIFICATION	2.2877070789440167E-6	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999990402602514	WITHOUT_CLASSIFICATION	9.597397486434804E-7	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999981087660544	WITHOUT_CLASSIFICATION	1.8912339456008943E-6	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999716201589157	WITHOUT_CLASSIFICATION	2.8379841084318916E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9990490306657509	WITHOUT_CLASSIFICATION	9.509693342490878E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999986296087731	WITHOUT_CLASSIFICATION	1.3703912269431966E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999291879494	WITHOUT_CLASSIFICATION	7.081205051750928E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999291879494	WITHOUT_CLASSIFICATION	7.081205051750928E-8	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.999982445266607	WITHOUT_CLASSIFICATION	1.7554733393082173E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999999028298153	WITHOUT_CLASSIFICATION	9.717018460714258E-8	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999169804697	WITHOUT_CLASSIFICATION	8.301953019921786E-8	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999987608816235	WITHOUT_CLASSIFICATION	1.2391183764435502E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.99999730320814	WITHOUT_CLASSIFICATION	2.696791860039165E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.99999730320814	WITHOUT_CLASSIFICATION	2.696791860039165E-6	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999997723353197	WITHOUT_CLASSIFICATION	2.2766468043941666E-7	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.999999999647306	WITHOUT_CLASSIFICATION	3.5269398386702087E-10	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999999300433581	WITHOUT_CLASSIFICATION	6.995664192135987E-8	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999998532054234	WITHOUT_CLASSIFICATION	1.4679457656765335E-7	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.999998345218143	WITHOUT_CLASSIFICATION	1.654781857083806E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999999965434416	WITHOUT_CLASSIFICATION	3.4565584056433047E-9	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999985591625905	WITHOUT_CLASSIFICATION	1.44083740951301E-6	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999999897139336	WITHOUT_CLASSIFICATION	1.0286066406700418E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999955554514117	WITHOUT_CLASSIFICATION	4.4445485882723914E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999996915313185	WITHOUT_CLASSIFICATION	3.08468681403242E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999973726305823	WITHOUT_CLASSIFICATION	2.6273694178029957E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999996986752161	WITHOUT_CLASSIFICATION	3.013247838926858E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999938014904795	WITHOUT_CLASSIFICATION	6.198509520574812E-6	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999907778010458	WITHOUT_CLASSIFICATION	9.222198954182963E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999969224002956	WITHOUT_CLASSIFICATION	3.077599704416387E-6	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999979880033405	WITHOUT_CLASSIFICATION	2.011996659432266E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999768125037	WITHOUT_CLASSIFICATION	2.3187496344667686E-8	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999768125037	WITHOUT_CLASSIFICATION	2.3187496344667686E-8	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999986716509507	WITHOUT_CLASSIFICATION	1.3283490492795795E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999986716509507	WITHOUT_CLASSIFICATION	1.3283490492795795E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999964974363	WITHOUT_CLASSIFICATION	3.502563676394491E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9998420064279829	WITHOUT_CLASSIFICATION	1.5799357201701534E-4	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9936259282812496	WITHOUT_CLASSIFICATION	0.006374071718750298	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999999933622111	WITHOUT_CLASSIFICATION	6.637788891935457E-9	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999941563441984	WITHOUT_CLASSIFICATION	5.843655801595292E-6	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999955384186849	WITHOUT_CLASSIFICATION	4.4615813150589745E-6	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999999683459521	WITHOUT_CLASSIFICATION	3.165404796621654E-8	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999996986752161	WITHOUT_CLASSIFICATION	3.013247838926858E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999938014904795	WITHOUT_CLASSIFICATION	6.198509520574812E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999969224002956	WITHOUT_CLASSIFICATION	3.077599704416387E-6	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999948895298034	WITHOUT_CLASSIFICATION	5.110470196628784E-6	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.999863861485732	WITHOUT_CLASSIFICATION	1.3613851426794832E-4	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9744691850953526	WITHOUT_CLASSIFICATION	0.02553081490464725	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999771837950281	WITHOUT_CLASSIFICATION	2.2816204971829396E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999991468423721	WITHOUT_CLASSIFICATION	8.531576277945909E-7	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999836911702193	WITHOUT_CLASSIFICATION	1.6308829780693464E-5	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999989375364988	WITHOUT_CLASSIFICATION	1.0624635012137359E-6	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999995313499774	WITHOUT_CLASSIFICATION	4.6865002258740505E-7	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999999057465478	WITHOUT_CLASSIFICATION	9.42534521313876E-8	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999998263378045	WITHOUT_CLASSIFICATION	1.7366219554295413E-7	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.999992613722345	WITHOUT_CLASSIFICATION	7.38627765496174E-6	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9997167893955191	WITHOUT_CLASSIFICATION	2.8321060448092565E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.99997215090678	WITHOUT_CLASSIFICATION	2.784909321997632E-5	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9994360529275954	WITHOUT_CLASSIFICATION	5.639470724045496E-4	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999983176574905	WITHOUT_CLASSIFICATION	1.6823425094974278E-6	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999999629774071	WITHOUT_CLASSIFICATION	3.702259289424257E-8	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999734530819644	WITHOUT_CLASSIFICATION	2.6546918035664103E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999998896643781	WITHOUT_CLASSIFICATION	1.1033562193178912E-7	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999999524388201	WITHOUT_CLASSIFICATION	4.756117989917728E-8	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999984602686508	WITHOUT_CLASSIFICATION	1.5397313492757246E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999996904078222	WITHOUT_CLASSIFICATION	3.095921777359574E-7	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999954219106433	WITHOUT_CLASSIFICATION	4.5780893567281165E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999785956495086	WITHOUT_CLASSIFICATION	2.1404350491322926E-5	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.999998768144971	WITHOUT_CLASSIFICATION	1.231855029063811E-6	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999996552171365	WITHOUT_CLASSIFICATION	3.4478286342451423E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999934877746739	WITHOUT_CLASSIFICATION	6.51222532609486E-6	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999369847562303	WITHOUT_CLASSIFICATION	6.301524376976133E-5	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999569383911513	WITHOUT_CLASSIFICATION	4.3061608848678695E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999998054268764	WITHOUT_CLASSIFICATION	1.945731236620532E-7	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9994111306285427	WITHOUT_CLASSIFICATION	5.888693714572696E-4	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999889965233619	WITHOUT_CLASSIFICATION	1.1003476638131158E-5	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.999952783024983	WITHOUT_CLASSIFICATION	4.7216975016943644E-5	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999951336665782	WITHOUT_CLASSIFICATION	4.866333421800723E-6	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999961443267488	WITHOUT_CLASSIFICATION	3.855673251164474E-6	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9990708293966082	WITHOUT_CLASSIFICATION	9.291706033917357E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999999077713616	WITHOUT_CLASSIFICATION	9.22286384961223E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999990374892442	WITHOUT_CLASSIFICATION	9.625107557699411E-7	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999796314846973	WITHOUT_CLASSIFICATION	2.0368515302702193E-5	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999916436857215	WITHOUT_CLASSIFICATION	8.356314278581159E-6	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999928973344316	WITHOUT_CLASSIFICATION	7.1026655684832495E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9998402078204239	WITHOUT_CLASSIFICATION	1.5979217957611368E-4	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999169804697	WITHOUT_CLASSIFICATION	8.301953019921786E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999990374892442	WITHOUT_CLASSIFICATION	9.625107557699411E-7	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999986107044944	WITHOUT_CLASSIFICATION	1.3892955056267098E-6	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9997793431317324	WITHOUT_CLASSIFICATION	2.206568682675479E-4	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9998773246281915	WITHOUT_CLASSIFICATION	1.2267537180864457E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9997914503456046	WITHOUT_CLASSIFICATION	2.085496543953966E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9997914503456046	WITHOUT_CLASSIFICATION	2.085496543953966E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999999921376345	WITHOUT_CLASSIFICATION	7.862365537192322E-9	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999999527974751	WITHOUT_CLASSIFICATION	4.7202524843570696E-8	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999994804944533	WITHOUT_CLASSIFICATION	5.195055466937632E-7	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999986641501	WITHOUT_CLASSIFICATION	1.3358498786958035E-9	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999489042425135	WITHOUT_CLASSIFICATION	5.109575748656602E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999994363654843	WITHOUT_CLASSIFICATION	5.63634515711197E-7	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999997879502414	WITHOUT_CLASSIFICATION	2.1204975863442148E-7	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999830657418418	WITHOUT_CLASSIFICATION	1.6934258158290102E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999998121381559	WITHOUT_CLASSIFICATION	1.8786184409122847E-7	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999998121381559	WITHOUT_CLASSIFICATION	1.8786184409122847E-7	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999999162962663	WITHOUT_CLASSIFICATION	8.370373380661589E-8	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999916516250129	WITHOUT_CLASSIFICATION	8.348374987012064E-6	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999999621090521	WITHOUT_CLASSIFICATION	3.789094788043205E-8	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999998616515428	WITHOUT_CLASSIFICATION	1.3834845726396472E-7	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999993565650818	WITHOUT_CLASSIFICATION	6.434349181667144E-7	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999975432970682	WITHOUT_CLASSIFICATION	2.4567029317102865E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9993706217106652	WITHOUT_CLASSIFICATION	6.293782893348435E-4	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999985669974952	WITHOUT_CLASSIFICATION	1.4330025047699278E-6	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999998381331303	WITHOUT_CLASSIFICATION	1.6186686975429266E-7	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999441141540665	WITHOUT_CLASSIFICATION	5.58858459335818E-5	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.999997428813199	WITHOUT_CLASSIFICATION	2.5711868009623006E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999974008354531	WITHOUT_CLASSIFICATION	2.599164546952922E-6	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999996103946943	WITHOUT_CLASSIFICATION	3.8960530569633855E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.999999393942395	WITHOUT_CLASSIFICATION	6.06057605048316E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.999999393942395	WITHOUT_CLASSIFICATION	6.06057605048316E-7	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.999998555557684	WITHOUT_CLASSIFICATION	1.4444423159579803E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999942241757532	WITHOUT_CLASSIFICATION	5.775824246697285E-6	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999952318558651	WITHOUT_CLASSIFICATION	4.768144134791679E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999954293721349	WITHOUT_CLASSIFICATION	4.570627865085547E-6	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999992946854636	WITHOUT_CLASSIFICATION	7.053145363853989E-7	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999780427935181	WITHOUT_CLASSIFICATION	2.195720648192074E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999997079400424	WITHOUT_CLASSIFICATION	2.920599574930227E-7	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999727802071475	WITHOUT_CLASSIFICATION	2.7219792852503745E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999973189246285	WITHOUT_CLASSIFICATION	2.6810753714662452E-6	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999994234823825	WITHOUT_CLASSIFICATION	5.765176175352165E-7	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999998171573308	WITHOUT_CLASSIFICATION	1.8284266933828737E-7	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999982763305356	WITHOUT_CLASSIFICATION	1.723669464283949E-6	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.999985548534961	WITHOUT_CLASSIFICATION	1.4451465038922282E-5	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999997689032333	WITHOUT_CLASSIFICATION	2.3109676666014102E-7	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999970281238039	WITHOUT_CLASSIFICATION	2.9718761960506643E-6	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999996516131877	WITHOUT_CLASSIFICATION	3.483868122392308E-7	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.999994003706616	WITHOUT_CLASSIFICATION	5.99629338408537E-6	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999994624252413	WITHOUT_CLASSIFICATION	5.375747586206928E-7	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999999052369406	WITHOUT_CLASSIFICATION	9.476305944017894E-8	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999680949992544	WITHOUT_CLASSIFICATION	3.190500074560992E-5	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999412150486054	WITHOUT_CLASSIFICATION	5.878495139458889E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999987508897008	WITHOUT_CLASSIFICATION	1.249110299264483E-6	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999977504950034	WITHOUT_CLASSIFICATION	2.2495049966891097E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9998151600874656	WITHOUT_CLASSIFICATION	1.8483991253436384E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.8627699957978827	WITHOUT_CLASSIFICATION	0.13723000420211728	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.999938660008569	WITHOUT_CLASSIFICATION	6.133999143098706E-5	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999998778140144	WITHOUT_CLASSIFICATION	1.2218598544087105E-7	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999999712719371	WITHOUT_CLASSIFICATION	2.872806292827317E-8	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999999825983582	WITHOUT_CLASSIFICATION	1.740164174210066E-8	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9998978720768767	WITHOUT_CLASSIFICATION	1.021279231232219E-4	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999999203686435	WITHOUT_CLASSIFICATION	7.963135646035692E-8	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999995907084284	WITHOUT_CLASSIFICATION	4.0929157166589714E-7	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999993363503926	WITHOUT_CLASSIFICATION	6.636496073410925E-7	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999943198824	WITHOUT_CLASSIFICATION	5.6801176501012755E-9	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.999998609235752	WITHOUT_CLASSIFICATION	1.3907642479850444E-6	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999999662335007	WITHOUT_CLASSIFICATION	3.3766499198163507E-8	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999998497966026	WITHOUT_CLASSIFICATION	1.502033973241486E-7	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9998190907428902	WITHOUT_CLASSIFICATION	1.8090925710967037E-4	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999913128799031	WITHOUT_CLASSIFICATION	8.68712009686254E-6	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999581601324256	WITHOUT_CLASSIFICATION	4.183986757443217E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999999683505758	WITHOUT_CLASSIFICATION	3.164942412669156E-8	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9998824705544801	WITHOUT_CLASSIFICATION	1.1752944551989389E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999999598817014	WITHOUT_CLASSIFICATION	4.011829863070863E-8	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999875910075928	WITHOUT_CLASSIFICATION	1.2408992407203203E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999710350028249	WITHOUT_CLASSIFICATION	2.896499717503747E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999546810399222	WITHOUT_CLASSIFICATION	4.531896007762372E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998078249903	WITHOUT_CLASSIFICATION	1.9217500974216957E-7	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999122447707	WITHOUT_CLASSIFICATION	8.775522938261856E-8	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999775721458	WITHOUT_CLASSIFICATION	2.2427854205640876E-8	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999161927123	WITHOUT_CLASSIFICATION	8.380728771432869E-8	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999161927123	WITHOUT_CLASSIFICATION	8.380728771432869E-8	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999998900357224	WITHOUT_CLASSIFICATION	1.0996427756034312E-7	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.999997596583035	WITHOUT_CLASSIFICATION	2.403416964980745E-6	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999994586031542	WITHOUT_CLASSIFICATION	5.413968457797323E-7	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.6329022706147868	DEFECT	0.36709772938521323	WITHOUT_CLASSIFICATION
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999579409857	WITHOUT_CLASSIFICATION	4.205901425644262E-8	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999999711883518	WITHOUT_CLASSIFICATION	2.8811648138957175E-8	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999628307480619	WITHOUT_CLASSIFICATION	3.716925193813742E-5	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999988381675193	WITHOUT_CLASSIFICATION	1.1618324806246621E-6	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9956238957605765	WITHOUT_CLASSIFICATION	0.004376104239423481	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999998441487759	WITHOUT_CLASSIFICATION	1.558512240914949E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999989426289265	WITHOUT_CLASSIFICATION	1.0573710734018577E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999989426289265	WITHOUT_CLASSIFICATION	1.0573710734018577E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999989426289265	WITHOUT_CLASSIFICATION	1.0573710734018577E-6	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999994993494947	WITHOUT_CLASSIFICATION	5.006505051911518E-7	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999982460835614	WITHOUT_CLASSIFICATION	1.7539164386101366E-6	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999987860748036	WITHOUT_CLASSIFICATION	1.2139251962977946E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999989860316586	WITHOUT_CLASSIFICATION	1.0139683414214785E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999989860316586	WITHOUT_CLASSIFICATION	1.0139683414214785E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999687072750321	WITHOUT_CLASSIFICATION	3.1292724967853854E-5	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999911407763382	WITHOUT_CLASSIFICATION	8.859223661725353E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999994607003225	WITHOUT_CLASSIFICATION	5.392996774542514E-7	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999996326344108	WITHOUT_CLASSIFICATION	3.673655891531675E-7	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999951989795927	WITHOUT_CLASSIFICATION	4.801020407356244E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999927701169578	WITHOUT_CLASSIFICATION	7.22988304233491E-6	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.99999977941718	WITHOUT_CLASSIFICATION	2.2058282002992384E-7	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999359096997331	WITHOUT_CLASSIFICATION	6.409030026682275E-5	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9962010473991365	WITHOUT_CLASSIFICATION	0.003798952600863382	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999995131818459	WITHOUT_CLASSIFICATION	4.868181542043989E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999995131818459	WITHOUT_CLASSIFICATION	4.868181542043989E-7	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999991150084679	WITHOUT_CLASSIFICATION	8.849915321519273E-7	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999712011083818	WITHOUT_CLASSIFICATION	2.8798891618184684E-5	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999977254311267	WITHOUT_CLASSIFICATION	2.2745688733074245E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999267143653503	WITHOUT_CLASSIFICATION	7.328563464967877E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999811959026335	WITHOUT_CLASSIFICATION	1.8804097366527216E-5	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.999999983779275	WITHOUT_CLASSIFICATION	1.6220724964324916E-8	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999984856588339	WITHOUT_CLASSIFICATION	1.514341166164262E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999952876487814	WITHOUT_CLASSIFICATION	4.712351218599914E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.999990308358461	WITHOUT_CLASSIFICATION	9.691641538992104E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999915145515929	WITHOUT_CLASSIFICATION	8.48544840717331E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999990204875343	WITHOUT_CLASSIFICATION	9.795124657257115E-7	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999887637758483	WITHOUT_CLASSIFICATION	1.1236224151773506E-5	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999958277085134	WITHOUT_CLASSIFICATION	4.17229148662184E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.999997840623594	WITHOUT_CLASSIFICATION	2.159376406088723E-6	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999719276970314	WITHOUT_CLASSIFICATION	2.8072302968692843E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999984471623271	WITHOUT_CLASSIFICATION	1.55283767285199E-6	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.99997443529534	WITHOUT_CLASSIFICATION	2.5564704659900686E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.999778413125057	WITHOUT_CLASSIFICATION	2.2158687494291796E-4	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999952658306269	WITHOUT_CLASSIFICATION	4.734169373042809E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.999985386277857	WITHOUT_CLASSIFICATION	1.4613722142860437E-5	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.998985016376115	WITHOUT_CLASSIFICATION	0.0010149836238850032	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999996880355538	WITHOUT_CLASSIFICATION	3.1196444612368394E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999970322489651	WITHOUT_CLASSIFICATION	2.9677510348933447E-6	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999980136237566	WITHOUT_CLASSIFICATION	1.986376243505972E-6	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999903939655533	WITHOUT_CLASSIFICATION	9.60603444661572E-6	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999917459808872	WITHOUT_CLASSIFICATION	8.254019112828928E-6	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999992880712247	WITHOUT_CLASSIFICATION	7.119287751998383E-7	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999996664378726	WITHOUT_CLASSIFICATION	3.3356212742924005E-7	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.999480741142676	WITHOUT_CLASSIFICATION	5.192588573238978E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.999982142110974	WITHOUT_CLASSIFICATION	1.7857889025991196E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999441180017282	WITHOUT_CLASSIFICATION	5.588199827166857E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.999998705989416	WITHOUT_CLASSIFICATION	1.29401058404862E-6	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999987042334431	WITHOUT_CLASSIFICATION	1.2957665569733675E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999441180017282	WITHOUT_CLASSIFICATION	5.588199827166857E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999921521335534	WITHOUT_CLASSIFICATION	7.847866446575011E-6	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999975605212272	WITHOUT_CLASSIFICATION	2.4394787727002533E-6	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999962938992722	WITHOUT_CLASSIFICATION	3.7061007278135414E-6	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999995770084729	WITHOUT_CLASSIFICATION	4.2299152716505113E-7	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999985947163823	WITHOUT_CLASSIFICATION	1.4052836176845293E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9993061995242225	WITHOUT_CLASSIFICATION	6.938004757775432E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999985159081711	WITHOUT_CLASSIFICATION	1.4840918289089995E-6	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999682033058803	WITHOUT_CLASSIFICATION	3.1796694119610285E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9998688583420988	WITHOUT_CLASSIFICATION	1.311416579011531E-4	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999394067983397	WITHOUT_CLASSIFICATION	6.059320166021605E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999344755222124	WITHOUT_CLASSIFICATION	6.552447778763177E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.99983048198743	WITHOUT_CLASSIFICATION	1.6951801256999958E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999731130148006	WITHOUT_CLASSIFICATION	2.6886985199385156E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9999020661117819	WITHOUT_CLASSIFICATION	9.793388821812913E-5	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.999995878324719	WITHOUT_CLASSIFICATION	4.121675280926345E-6	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999976645903782	WITHOUT_CLASSIFICATION	2.3354096218236152E-6	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999961852087507	WITHOUT_CLASSIFICATION	3.814791249416541E-6	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999803301331783	WITHOUT_CLASSIFICATION	1.9669866821685788E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999995160008928	WITHOUT_CLASSIFICATION	4.839991071792129E-7	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9998967490982433	WITHOUT_CLASSIFICATION	1.0325090175662048E-4	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999807351938497	WITHOUT_CLASSIFICATION	1.9264806150368184E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999907955331816	WITHOUT_CLASSIFICATION	9.204466818372273E-6	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999311135315706	WITHOUT_CLASSIFICATION	6.888646842933608E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999591491884066	WITHOUT_CLASSIFICATION	4.085081159342211E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999667977497381	WITHOUT_CLASSIFICATION	3.320225026202373E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999976248550938	WITHOUT_CLASSIFICATION	2.3751449062288136E-6	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999695586005635	WITHOUT_CLASSIFICATION	3.0441399436497095E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999998420835905	WITHOUT_CLASSIFICATION	1.5791640952621826E-7	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999999077829724	WITHOUT_CLASSIFICATION	9.22170276407684E-8	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999996977910605	WITHOUT_CLASSIFICATION	3.022089395377493E-7	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999965038714084	WITHOUT_CLASSIFICATION	3.496128591494335E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9992203801557646	WITHOUT_CLASSIFICATION	7.796198442353859E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9642479167065532	WITHOUT_CLASSIFICATION	0.03575208329344675	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999405177421535	WITHOUT_CLASSIFICATION	5.9482257846415156E-5	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999973623327503	WITHOUT_CLASSIFICATION	2.637667249732398E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999992990519957	WITHOUT_CLASSIFICATION	7.009480042728396E-7	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999974475064589	WITHOUT_CLASSIFICATION	2.5524935411872136E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999795129193768	WITHOUT_CLASSIFICATION	2.0487080623195422E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999999933486822	WITHOUT_CLASSIFICATION	6.651317786986496E-9	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999990128868952	WITHOUT_CLASSIFICATION	9.87113104831198E-7	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999952330186966	WITHOUT_CLASSIFICATION	4.766981303319929E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999989688376798	WITHOUT_CLASSIFICATION	1.0311623201721724E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999995882939798	WITHOUT_CLASSIFICATION	4.1170602014200337E-7	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.999997321690223	WITHOUT_CLASSIFICATION	2.6783097770232973E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999997709741171	WITHOUT_CLASSIFICATION	2.290258828828213E-7	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999993707841389	WITHOUT_CLASSIFICATION	6.292158611474508E-7	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999992535703792	WITHOUT_CLASSIFICATION	7.464296207687352E-7	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999991760788766	WITHOUT_CLASSIFICATION	8.239211233590175E-7	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999979326152131	WITHOUT_CLASSIFICATION	2.067384786873908E-6	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999997835863234	WITHOUT_CLASSIFICATION	2.1641367651517837E-7	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999981773876179	WITHOUT_CLASSIFICATION	1.8226123821457519E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999996728691205	WITHOUT_CLASSIFICATION	3.2713087953243184E-7	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999899229566761	WITHOUT_CLASSIFICATION	1.0077043323964396E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999979326152131	WITHOUT_CLASSIFICATION	2.067384786873908E-6	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.7171855325872459	WITHOUT_CLASSIFICATION	0.282814467412754	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.7171855325872459	WITHOUT_CLASSIFICATION	0.282814467412754	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999999486246325	WITHOUT_CLASSIFICATION	5.1375367624047695E-8	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.999999500659967	WITHOUT_CLASSIFICATION	4.993400329819948E-7	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999998437099737	WITHOUT_CLASSIFICATION	1.56290026159028E-7	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.999999957824343	WITHOUT_CLASSIFICATION	4.217565692940458E-8	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999974761993042	WITHOUT_CLASSIFICATION	2.523800695745552E-6	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999995163424262	WITHOUT_CLASSIFICATION	4.836575737571007E-7	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.999994004897221	WITHOUT_CLASSIFICATION	5.995102778996738E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.8365145343456571	WITHOUT_CLASSIFICATION	0.16348546565434294	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999986855100519	WITHOUT_CLASSIFICATION	1.314489948130526E-6	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9998674279116264	WITHOUT_CLASSIFICATION	1.3257208837357887E-4	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999546414529	WITHOUT_CLASSIFICATION	4.535854712606303E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999995748123782	WITHOUT_CLASSIFICATION	4.25187621846267E-7	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999051275368404	WITHOUT_CLASSIFICATION	9.487246315966356E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999998664024154	WITHOUT_CLASSIFICATION	1.3359758467142714E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999898050631302	WITHOUT_CLASSIFICATION	1.0194936869706206E-5	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999959266000527	WITHOUT_CLASSIFICATION	4.0733999474000365E-6	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999996571148683	WITHOUT_CLASSIFICATION	3.428851318381404E-7	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999759499636652	WITHOUT_CLASSIFICATION	2.405003633478804E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999759499636652	WITHOUT_CLASSIFICATION	2.405003633478804E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999759499636652	WITHOUT_CLASSIFICATION	2.405003633478804E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999759499636652	WITHOUT_CLASSIFICATION	2.405003633478804E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999759499636652	WITHOUT_CLASSIFICATION	2.405003633478804E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999873420139513	WITHOUT_CLASSIFICATION	1.2657986048667758E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999987393083178	WITHOUT_CLASSIFICATION	1.260691682188055E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998716287104815	WITHOUT_CLASSIFICATION	1.2837128951844975E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999929662955684	WITHOUT_CLASSIFICATION	7.033704431524178E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9987670707672685	WITHOUT_CLASSIFICATION	0.0012329292327314838	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.99999996141639	WITHOUT_CLASSIFICATION	3.858361002122198E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999992300664401	WITHOUT_CLASSIFICATION	7.699335599935961E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999988839478076	WITHOUT_CLASSIFICATION	1.1160521923755846E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999986805064717	WITHOUT_CLASSIFICATION	1.319493528400631E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999925071872213	WITHOUT_CLASSIFICATION	7.492812778676437E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999891833443137	WITHOUT_CLASSIFICATION	1.0816655686357703E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999881209228878	WITHOUT_CLASSIFICATION	1.1879077112164716E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999944596190306	WITHOUT_CLASSIFICATION	5.540380969500567E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999911902615135	WITHOUT_CLASSIFICATION	8.809738486475542E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999889676487769	WITHOUT_CLASSIFICATION	1.1032351223170148E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999866204178774	WITHOUT_CLASSIFICATION	1.3379582122550936E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999934111450401	WITHOUT_CLASSIFICATION	6.588854959790431E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999920591104448	WITHOUT_CLASSIFICATION	7.940889555180146E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.999990781811217	WITHOUT_CLASSIFICATION	9.218188783015838E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999900386227236	WITHOUT_CLASSIFICATION	9.961377276430425E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999869385581671	WITHOUT_CLASSIFICATION	1.3061441832810948E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999889642747333	WITHOUT_CLASSIFICATION	1.1035725266704105E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999792114755246	WITHOUT_CLASSIFICATION	2.078852447529751E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999905999897573	WITHOUT_CLASSIFICATION	9.400010242843164E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999864118034929	WITHOUT_CLASSIFICATION	1.3588196506963348E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.999990713298871	WITHOUT_CLASSIFICATION	9.28670112896026E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999937249014608	WITHOUT_CLASSIFICATION	6.2750985392345775E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999914395495488	WITHOUT_CLASSIFICATION	8.560450451122425E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.99998588166894	WITHOUT_CLASSIFICATION	1.4118331060071892E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999876448444953	WITHOUT_CLASSIFICATION	1.2355155504697922E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999983850358646	WITHOUT_CLASSIFICATION	1.6149641353892192E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999910753816148	WITHOUT_CLASSIFICATION	8.924618385226707E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999896334027215	WITHOUT_CLASSIFICATION	1.0366597278370783E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999893484907045	WITHOUT_CLASSIFICATION	1.0651509295489853E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999764984735806	WITHOUT_CLASSIFICATION	2.3501526419386537E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999849294206227	WITHOUT_CLASSIFICATION	1.5070579377323713E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.999990035680191	WITHOUT_CLASSIFICATION	9.964319808910634E-6	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999888645660744	WITHOUT_CLASSIFICATION	1.1135433925648352E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.999991549627308	WITHOUT_CLASSIFICATION	8.450372692012734E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999893299038162	WITHOUT_CLASSIFICATION	1.0670096183805815E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999921722447404	WITHOUT_CLASSIFICATION	7.827755259643552E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999899323301569	WITHOUT_CLASSIFICATION	1.0067669842990839E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999840975244101	WITHOUT_CLASSIFICATION	1.5902475589918905E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999912783662487	WITHOUT_CLASSIFICATION	8.721633751309727E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.999984192463871	WITHOUT_CLASSIFICATION	1.5807536128959776E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999751161549207	WITHOUT_CLASSIFICATION	2.4883845079291002E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999813820496285	WITHOUT_CLASSIFICATION	1.8617950371441112E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.999992696492847	WITHOUT_CLASSIFICATION	7.3035071529167295E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999862508984996	WITHOUT_CLASSIFICATION	1.3749101500435891E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999721258421529	WITHOUT_CLASSIFICATION	2.7874157847196066E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998716287104815	WITHOUT_CLASSIFICATION	1.2837128951844975E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999831861274906	WITHOUT_CLASSIFICATION	1.6813872509458376E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999853959297006	WITHOUT_CLASSIFICATION	1.4604070299491271E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999811631701694	WITHOUT_CLASSIFICATION	1.8836829830591267E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999806487377771	WITHOUT_CLASSIFICATION	1.935126222279761E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999838832046176	WITHOUT_CLASSIFICATION	1.6116795382364243E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999839124696083	WITHOUT_CLASSIFICATION	1.608753039175045E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.999978543528255	WITHOUT_CLASSIFICATION	2.145647174506843E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999824290066301	WITHOUT_CLASSIFICATION	1.757099336990619E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.99997938243911	WITHOUT_CLASSIFICATION	2.0617560889990892E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999787553363169	WITHOUT_CLASSIFICATION	2.124466368323588E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999840369454018	WITHOUT_CLASSIFICATION	1.5963054598193157E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999847196626559	WITHOUT_CLASSIFICATION	1.528033734413347E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999793899901022	WITHOUT_CLASSIFICATION	2.0610009897831863E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999827298771683	WITHOUT_CLASSIFICATION	1.7270122831682067E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999869416426389	WITHOUT_CLASSIFICATION	1.3058357361077986E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999916286068218	WITHOUT_CLASSIFICATION	8.371393178111586E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999840632347178	WITHOUT_CLASSIFICATION	1.5936765282151856E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999875383056183	WITHOUT_CLASSIFICATION	1.2461694381777024E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999839689164611	WITHOUT_CLASSIFICATION	1.603108353895536E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999866183149372	WITHOUT_CLASSIFICATION	1.3381685062859563E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999828929212737	WITHOUT_CLASSIFICATION	1.710707872628066E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999861453668432	WITHOUT_CLASSIFICATION	1.3854633156817936E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999792739956282	WITHOUT_CLASSIFICATION	2.0726004371686713E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.999988727022573	WITHOUT_CLASSIFICATION	1.1272977426971452E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999862593677556	WITHOUT_CLASSIFICATION	1.3740632244357109E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999874550512277	WITHOUT_CLASSIFICATION	1.2544948772459584E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999717589134491	WITHOUT_CLASSIFICATION	2.8241086550958877E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999855136149812	WITHOUT_CLASSIFICATION	1.4486385018822563E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999939596973133	WITHOUT_CLASSIFICATION	6.040302686789087E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999920603470517	WITHOUT_CLASSIFICATION	7.939652948382355E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999867345506279	WITHOUT_CLASSIFICATION	1.3265449371996415E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999827021142458	WITHOUT_CLASSIFICATION	1.7297885754252233E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999857126390327	WITHOUT_CLASSIFICATION	1.4287360967340014E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999848434985509	WITHOUT_CLASSIFICATION	1.5156501449004333E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999847953669655	WITHOUT_CLASSIFICATION	1.5204633034391312E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999919789170161	WITHOUT_CLASSIFICATION	8.021082983955873E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.99998955403482	WITHOUT_CLASSIFICATION	1.0445965179870203E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999856453396044	WITHOUT_CLASSIFICATION	1.4354660395474612E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999851388627372	WITHOUT_CLASSIFICATION	1.4861137262794227E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999921222315081	WITHOUT_CLASSIFICATION	7.877768491798968E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999885304924965	WITHOUT_CLASSIFICATION	1.1469507503523833E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999891868253712	WITHOUT_CLASSIFICATION	1.0813174628777023E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999834515257708	WITHOUT_CLASSIFICATION	1.654847422923037E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999849317517745	WITHOUT_CLASSIFICATION	1.5068248225473656E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.99998737684211	WITHOUT_CLASSIFICATION	1.262315788994764E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999993075155741	WITHOUT_CLASSIFICATION	6.924844259018677E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999925232217253	WITHOUT_CLASSIFICATION	7.4767782747209046E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999897500733093	WITHOUT_CLASSIFICATION	1.0249926690754434E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999913167226374	WITHOUT_CLASSIFICATION	8.683277362660893E-6	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999863484205751	WITHOUT_CLASSIFICATION	1.365157942493627E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999891995932947	WITHOUT_CLASSIFICATION	1.0800406705375336E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999887811513357	WITHOUT_CLASSIFICATION	1.1218848664380768E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999893084309776	WITHOUT_CLASSIFICATION	1.0691569022371E-5	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999943888521845	WITHOUT_CLASSIFICATION	5.611147815550701E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.999991415484034	WITHOUT_CLASSIFICATION	8.584515965962536E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999883954230769	WITHOUT_CLASSIFICATION	1.1604576923093121E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999935806777248	WITHOUT_CLASSIFICATION	6.419322275142455E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999916716372228	WITHOUT_CLASSIFICATION	8.328362777242277E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999896889877082	WITHOUT_CLASSIFICATION	1.0311012291808733E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999902957327363	WITHOUT_CLASSIFICATION	9.704267263642563E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999853914088724	WITHOUT_CLASSIFICATION	1.4608591127608832E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999919552968534	WITHOUT_CLASSIFICATION	8.044703146625268E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999794414869095	WITHOUT_CLASSIFICATION	2.0558513090440522E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999886490036881	WITHOUT_CLASSIFICATION	1.1350996311858247E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999918517723174	WITHOUT_CLASSIFICATION	8.148227682592856E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999912549751196	WITHOUT_CLASSIFICATION	8.745024880432889E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999940721654098	WITHOUT_CLASSIFICATION	5.927834590160732E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999905870570835	WITHOUT_CLASSIFICATION	9.412942916358224E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999906785718138	WITHOUT_CLASSIFICATION	9.321428186192679E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999914375989856	WITHOUT_CLASSIFICATION	8.56240101451677E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999868731397179	WITHOUT_CLASSIFICATION	1.3126860282069365E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999901264715095	WITHOUT_CLASSIFICATION	9.873528490494355E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999921197745772	WITHOUT_CLASSIFICATION	7.880225422868103E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999813617154067	WITHOUT_CLASSIFICATION	1.8638284593155496E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999890997170692	WITHOUT_CLASSIFICATION	1.0900282930708888E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999852794783545	WITHOUT_CLASSIFICATION	1.4720521645429671E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999861900149626	WITHOUT_CLASSIFICATION	1.3809985037460905E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999832400502009	WITHOUT_CLASSIFICATION	1.6759949799156977E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999820507577735	WITHOUT_CLASSIFICATION	1.7949242226530968E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999770869061811	WITHOUT_CLASSIFICATION	2.2913093818866334E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999833698317216	WITHOUT_CLASSIFICATION	1.6630168278275732E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999890101520902	WITHOUT_CLASSIFICATION	1.0989847909900488E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999884436969926	WITHOUT_CLASSIFICATION	1.1556303007427494E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999886333016857	WITHOUT_CLASSIFICATION	1.1366698314261961E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999820759324823	WITHOUT_CLASSIFICATION	1.7924067517632615E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999893435173886	WITHOUT_CLASSIFICATION	1.065648261139857E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999865304178299	WITHOUT_CLASSIFICATION	1.3469582170039047E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999870108115366	WITHOUT_CLASSIFICATION	1.2989188463369497E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999977227479373	WITHOUT_CLASSIFICATION	2.2772520627007138E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999896956005255	WITHOUT_CLASSIFICATION	1.0304399474473345E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999915586100129	WITHOUT_CLASSIFICATION	8.441389987033661E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999896200664137	WITHOUT_CLASSIFICATION	1.0379933586340495E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.999988479947236	WITHOUT_CLASSIFICATION	1.1520052763975616E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999879831385271	WITHOUT_CLASSIFICATION	1.2016861473031692E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999936978677357	WITHOUT_CLASSIFICATION	6.302132264350815E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999896939939399	WITHOUT_CLASSIFICATION	1.030600606008534E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999910698188	WITHOUT_CLASSIFICATION	8.930181199893324E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999937181603911	WITHOUT_CLASSIFICATION	6.281839608979534E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999907375371507	WITHOUT_CLASSIFICATION	9.262462849298992E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999845468136207	WITHOUT_CLASSIFICATION	1.5453186379292546E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999896279896201	WITHOUT_CLASSIFICATION	1.0372010379795017E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.999986822960246	WITHOUT_CLASSIFICATION	1.3177039754074874E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999923850364911	WITHOUT_CLASSIFICATION	7.614963508851185E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999920544398333	WITHOUT_CLASSIFICATION	7.945560166784561E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999908167540151	WITHOUT_CLASSIFICATION	9.183245984832203E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999957834286373	WITHOUT_CLASSIFICATION	4.216571362718307E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999928658743197	WITHOUT_CLASSIFICATION	7.134125680372116E-6	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999928627474112	WITHOUT_CLASSIFICATION	7.137252588857112E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999931325237714	WITHOUT_CLASSIFICATION	6.867476228593068E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999885595177137	WITHOUT_CLASSIFICATION	1.1440482286342389E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999930244543875	WITHOUT_CLASSIFICATION	6.975545612512253E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999912081093667	WITHOUT_CLASSIFICATION	8.791890633280252E-6	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999957267818237	WITHOUT_CLASSIFICATION	4.273218176254371E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999930867212431	WITHOUT_CLASSIFICATION	6.913278756856394E-6	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999959649697	WITHOUT_CLASSIFICATION	4.0350303000253124E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999952468536689	WITHOUT_CLASSIFICATION	4.7531463310864735E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999937475805118	WITHOUT_CLASSIFICATION	6.252419488188352E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999912003956295	WITHOUT_CLASSIFICATION	8.799604370588333E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999938007685709	WITHOUT_CLASSIFICATION	6.1992314290999375E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999952603786535	WITHOUT_CLASSIFICATION	4.739621346487769E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999938504090234	WITHOUT_CLASSIFICATION	6.149590976474077E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999894476939188	WITHOUT_CLASSIFICATION	1.0552306081078826E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999932601757209	WITHOUT_CLASSIFICATION	6.739824279175415E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999939117444501	WITHOUT_CLASSIFICATION	6.088255549830485E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999928184949447	WITHOUT_CLASSIFICATION	7.1815050552681384E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999912769091585	WITHOUT_CLASSIFICATION	8.72309084160919E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999916998255719	WITHOUT_CLASSIFICATION	8.300174428071698E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.999992943601006	WITHOUT_CLASSIFICATION	7.056398994016287E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999822634411946	WITHOUT_CLASSIFICATION	1.773655880543597E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999923494622338	WITHOUT_CLASSIFICATION	7.650537766222647E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999948422839903	WITHOUT_CLASSIFICATION	5.157716009678263E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999947205974754	WITHOUT_CLASSIFICATION	5.2794025245940006E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999894951567869	WITHOUT_CLASSIFICATION	1.0504843213098527E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999839349499724	WITHOUT_CLASSIFICATION	1.606505002761687E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999878569669136	WITHOUT_CLASSIFICATION	1.2143033086310585E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999933030179176	WITHOUT_CLASSIFICATION	6.696982082475274E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999876374012528	WITHOUT_CLASSIFICATION	1.2362598747217108E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999874055099854	WITHOUT_CLASSIFICATION	1.2594490014521496E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999858380941568	WITHOUT_CLASSIFICATION	1.4161905843195918E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999853155418017	WITHOUT_CLASSIFICATION	1.4684458198161579E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999871606127434	WITHOUT_CLASSIFICATION	1.2839387256671893E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999832691931415	WITHOUT_CLASSIFICATION	1.6730806858472824E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999817247665103	WITHOUT_CLASSIFICATION	1.8275233489798978E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999827705445933	WITHOUT_CLASSIFICATION	1.722945540668988E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999903348629853	WITHOUT_CLASSIFICATION	9.665137014787613E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999867207514535	WITHOUT_CLASSIFICATION	1.3279248546628214E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999894600405784	WITHOUT_CLASSIFICATION	1.0539959421537913E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999853379636645	WITHOUT_CLASSIFICATION	1.466203633544943E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999882979764235	WITHOUT_CLASSIFICATION	1.1702023576390347E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999854969716095	WITHOUT_CLASSIFICATION	1.4503028390461267E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999882022979757	WITHOUT_CLASSIFICATION	1.1797702024308322E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999915354929964	WITHOUT_CLASSIFICATION	8.464507003634477E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999859757528714	WITHOUT_CLASSIFICATION	1.4024247128579363E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999884606895934	WITHOUT_CLASSIFICATION	1.153931040662332E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999886221670425	WITHOUT_CLASSIFICATION	1.1377832957509014E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999869188461363	WITHOUT_CLASSIFICATION	1.3081153863658988E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999910372549455	WITHOUT_CLASSIFICATION	8.962745054445807E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999772090779226	WITHOUT_CLASSIFICATION	2.2790922077364807E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999872913999335	WITHOUT_CLASSIFICATION	1.2708600066507139E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999902073569726	WITHOUT_CLASSIFICATION	9.792643027412413E-6	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999928662738921	WITHOUT_CLASSIFICATION	7.13372610802907E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999918420240738	WITHOUT_CLASSIFICATION	8.157975926323204E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999839469096241	WITHOUT_CLASSIFICATION	1.6053090375879446E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999846523521961	WITHOUT_CLASSIFICATION	1.5347647803895528E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999896000894369	WITHOUT_CLASSIFICATION	1.0399910563104573E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999903775393494	WITHOUT_CLASSIFICATION	9.62246065066348E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999908930320482	WITHOUT_CLASSIFICATION	9.106967951664561E-6	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.999988248761194	WITHOUT_CLASSIFICATION	1.1751238805980454E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999838733293129	WITHOUT_CLASSIFICATION	1.6126670687100107E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.999983886456653	WITHOUT_CLASSIFICATION	1.6113543346994157E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999786800515332	WITHOUT_CLASSIFICATION	2.1319948466830727E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999802531971693	WITHOUT_CLASSIFICATION	1.974680283068012E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999909322007129	WITHOUT_CLASSIFICATION	9.067799287184083E-6	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999903798926518	WITHOUT_CLASSIFICATION	9.620107348254022E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999917836848675	WITHOUT_CLASSIFICATION	8.216315132469086E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999845309214828	WITHOUT_CLASSIFICATION	1.5469078517246836E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999913850804201	WITHOUT_CLASSIFICATION	8.614919579872808E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999871342894598	WITHOUT_CLASSIFICATION	1.2865710540143422E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999783054808802	WITHOUT_CLASSIFICATION	2.1694519119827636E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.999993723250778	WITHOUT_CLASSIFICATION	6.276749222033548E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999880824147418	WITHOUT_CLASSIFICATION	1.191758525827274E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999881887249227	WITHOUT_CLASSIFICATION	1.1811275077285651E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999883961160748	WITHOUT_CLASSIFICATION	1.1603883925047395E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999903367600785	WITHOUT_CLASSIFICATION	9.663239921429973E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999878888136872	WITHOUT_CLASSIFICATION	1.2111186312861192E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999877529289527	WITHOUT_CLASSIFICATION	1.224707104731278E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999858723229703	WITHOUT_CLASSIFICATION	1.4127677029659188E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999874506384967	WITHOUT_CLASSIFICATION	1.254936150333092E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999891924428757	WITHOUT_CLASSIFICATION	1.0807557124306209E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999862093301903	WITHOUT_CLASSIFICATION	1.3790669809532949E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999873893352613	WITHOUT_CLASSIFICATION	1.261066473859737E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999883323972897	WITHOUT_CLASSIFICATION	1.1667602710242475E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999861935811348	WITHOUT_CLASSIFICATION	1.3806418865204668E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999882913989284	WITHOUT_CLASSIFICATION	1.1708601071632571E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999902414354163	WITHOUT_CLASSIFICATION	9.758564583734131E-6	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.999987244998161	WITHOUT_CLASSIFICATION	1.2755001838924684E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999840066056123	WITHOUT_CLASSIFICATION	1.599339438766888E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999854598148746	WITHOUT_CLASSIFICATION	1.4540185125485916E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999858038317638	WITHOUT_CLASSIFICATION	1.4196168236129987E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999829192540385	WITHOUT_CLASSIFICATION	1.70807459616229E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.999990960565315	WITHOUT_CLASSIFICATION	9.039434685039792E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999908343260888	WITHOUT_CLASSIFICATION	9.165673911266221E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999905951723014	WITHOUT_CLASSIFICATION	9.404827698548918E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999890375654173	WITHOUT_CLASSIFICATION	1.0962434582634774E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999861379980365	WITHOUT_CLASSIFICATION	1.3862001963604544E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999867519921205	WITHOUT_CLASSIFICATION	1.3248007879493855E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999909345316691	WITHOUT_CLASSIFICATION	9.065468330863162E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999809228294456	WITHOUT_CLASSIFICATION	1.9077170554390215E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999910249831306	WITHOUT_CLASSIFICATION	8.975016869360355E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999910526702659	WITHOUT_CLASSIFICATION	8.947329734004485E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999884728190211	WITHOUT_CLASSIFICATION	1.1527180978937621E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999669604022635	WITHOUT_CLASSIFICATION	3.3039597736504695E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999975224204923	WITHOUT_CLASSIFICATION	2.4775795076874614E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999353263204601	WITHOUT_CLASSIFICATION	6.467367953995169E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999840586595016	WITHOUT_CLASSIFICATION	1.5941340498515036E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.999972973729972	WITHOUT_CLASSIFICATION	2.7026270027968076E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999739446438778	WITHOUT_CLASSIFICATION	2.6055356122259578E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999824652879775	WITHOUT_CLASSIFICATION	1.753471202242613E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999668032544887	WITHOUT_CLASSIFICATION	3.3196745511295274E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999805463212148	WITHOUT_CLASSIFICATION	1.9453678785192708E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999702343230207	WITHOUT_CLASSIFICATION	2.976567697927754E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.999972893999034	WITHOUT_CLASSIFICATION	2.7106000966067366E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999857348280979	WITHOUT_CLASSIFICATION	1.4265171902041456E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.99999088637441	WITHOUT_CLASSIFICATION	9.113625589916413E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999920077537191	WITHOUT_CLASSIFICATION	7.99224628081755E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999933887677469	WITHOUT_CLASSIFICATION	6.61123225310083E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999887483786527	WITHOUT_CLASSIFICATION	1.1251621347389655E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999971545227266	WITHOUT_CLASSIFICATION	2.8454772733036593E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9993481390816856	WITHOUT_CLASSIFICATION	6.518609183144339E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9999287909879182	WITHOUT_CLASSIFICATION	7.120901208186435E-5	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999648903425865	WITHOUT_CLASSIFICATION	3.5109657413568664E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998022464867867	WITHOUT_CLASSIFICATION	1.9775351321324255E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9994428150197949	WITHOUT_CLASSIFICATION	5.571849802051126E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.999912370722101	WITHOUT_CLASSIFICATION	8.762927789897026E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9998765766447063	WITHOUT_CLASSIFICATION	1.2342335529365653E-4	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.999999675954788	WITHOUT_CLASSIFICATION	3.2404521195818827E-7	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999714554795686	WITHOUT_CLASSIFICATION	2.8544520431490214E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.999936172460471	WITHOUT_CLASSIFICATION	6.382753952900863E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999784348295936	WITHOUT_CLASSIFICATION	2.1565170406403036E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999841619076493	WITHOUT_CLASSIFICATION	1.5838092350694434E-5	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9987444865011305	WITHOUT_CLASSIFICATION	0.0012555134988696407	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999956252024563	WITHOUT_CLASSIFICATION	4.374797543624727E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9989276611931248	WITHOUT_CLASSIFICATION	0.0010723388068751957	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9997155773536003	WITHOUT_CLASSIFICATION	2.844226463997186E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9995239402862005	WITHOUT_CLASSIFICATION	4.760597137994954E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999991887489447	WITHOUT_CLASSIFICATION	8.112510554019769E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999999992102819	WITHOUT_CLASSIFICATION	7.897181041761602E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9995846631306147	WITHOUT_CLASSIFICATION	4.1533686938539086E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999952922834884	WITHOUT_CLASSIFICATION	4.707716511633456E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.999999520421438	WITHOUT_CLASSIFICATION	4.79578562010802E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999869470058	WITHOUT_CLASSIFICATION	1.3052994218359615E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999869470058	WITHOUT_CLASSIFICATION	1.3052994218359615E-8	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.999981414742736	WITHOUT_CLASSIFICATION	1.8585257263917037E-5	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9999886145298953	WITHOUT_CLASSIFICATION	1.1385470104726299E-5	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9997693037942887	WITHOUT_CLASSIFICATION	2.3069620571134936E-4	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999546152463903	WITHOUT_CLASSIFICATION	4.538475360972981E-5	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.999905329112092	WITHOUT_CLASSIFICATION	9.467088790811215E-5	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999939564097676	WITHOUT_CLASSIFICATION	6.043590232323213E-6	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.999886913874144	WITHOUT_CLASSIFICATION	1.1308612585604852E-4	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999787383096419	WITHOUT_CLASSIFICATION	2.1261690358165784E-5	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9971448891545848	WITHOUT_CLASSIFICATION	0.002855110845415163	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999997212268477	WITHOUT_CLASSIFICATION	2.7877315234337895E-7	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999996875968642	WITHOUT_CLASSIFICATION	3.1240313583176794E-7	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.999701973337273	WITHOUT_CLASSIFICATION	2.9802666272704735E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9996936190259466	WITHOUT_CLASSIFICATION	3.0638097405349187E-4	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999968516054386	WITHOUT_CLASSIFICATION	3.1483945614265902E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999994558918599	WITHOUT_CLASSIFICATION	5.441081400953672E-7	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999963855379033	WITHOUT_CLASSIFICATION	3.614462096753342E-6	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.999999828247545	WITHOUT_CLASSIFICATION	1.7175245506165145E-7	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.999863311065654	WITHOUT_CLASSIFICATION	1.3668893434609416E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9998099905157184	WITHOUT_CLASSIFICATION	1.9000948428153769E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.999823721523292	WITHOUT_CLASSIFICATION	1.7627847670798904E-4	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999999815581719	WITHOUT_CLASSIFICATION	1.844182810226561E-8	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999976509843392	WITHOUT_CLASSIFICATION	2.3490156608731935E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.5628077142528997	DEFECT	0.43719228574710034	WITHOUT_CLASSIFICATION
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999994213349477	WITHOUT_CLASSIFICATION	5.786650523625704E-7	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.5628077142528997	DEFECT	0.43719228574710034	WITHOUT_CLASSIFICATION
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.999990874667821	WITHOUT_CLASSIFICATION	9.125332178953902E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999979766883234	WITHOUT_CLASSIFICATION	2.0233116766580783E-6	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.8057387505488661	DEFECT	0.1942612494511339	WITHOUT_CLASSIFICATION
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999844821362276	WITHOUT_CLASSIFICATION	1.5517863772459995E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9995776277839449	WITHOUT_CLASSIFICATION	4.2237221605511885E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999910247832426	WITHOUT_CLASSIFICATION	8.975216757445434E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999910247832426	WITHOUT_CLASSIFICATION	8.975216757445434E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999910247832426	WITHOUT_CLASSIFICATION	8.975216757445434E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999980943948065	WITHOUT_CLASSIFICATION	1.9056051935914606E-6	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999948201675487	WITHOUT_CLASSIFICATION	5.179832451394463E-6	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999999657384431	WITHOUT_CLASSIFICATION	3.426155689867638E-8	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999445926936614	WITHOUT_CLASSIFICATION	5.5407306338558476E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999445926936614	WITHOUT_CLASSIFICATION	5.5407306338558476E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999445926936614	WITHOUT_CLASSIFICATION	5.5407306338558476E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999445926936614	WITHOUT_CLASSIFICATION	5.5407306338558476E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999445926936614	WITHOUT_CLASSIFICATION	5.5407306338558476E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999445926936614	WITHOUT_CLASSIFICATION	5.5407306338558476E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997968135148336	WITHOUT_CLASSIFICATION	2.0318648516638073E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997968135148336	WITHOUT_CLASSIFICATION	2.0318648516638073E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997968135148336	WITHOUT_CLASSIFICATION	2.0318648516638073E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997968135148336	WITHOUT_CLASSIFICATION	2.0318648516638073E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997968135148336	WITHOUT_CLASSIFICATION	2.0318648516638073E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999804860104412	WITHOUT_CLASSIFICATION	1.9513989558844115E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999804860104412	WITHOUT_CLASSIFICATION	1.9513989558844115E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999804860104412	WITHOUT_CLASSIFICATION	1.9513989558844115E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999804860104412	WITHOUT_CLASSIFICATION	1.9513989558844115E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999804860104412	WITHOUT_CLASSIFICATION	1.9513989558844115E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998806528413304	WITHOUT_CLASSIFICATION	1.1934715866958369E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998806528413304	WITHOUT_CLASSIFICATION	1.1934715866958369E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998806528413304	WITHOUT_CLASSIFICATION	1.1934715866958369E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998806528413304	WITHOUT_CLASSIFICATION	1.1934715866958369E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998806528413304	WITHOUT_CLASSIFICATION	1.1934715866958369E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998806528413304	WITHOUT_CLASSIFICATION	1.1934715866958369E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998597802701982	WITHOUT_CLASSIFICATION	1.4021972980176757E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998597802701982	WITHOUT_CLASSIFICATION	1.4021972980176757E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998597802701982	WITHOUT_CLASSIFICATION	1.4021972980176757E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998597802701982	WITHOUT_CLASSIFICATION	1.4021972980176757E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998597802701982	WITHOUT_CLASSIFICATION	1.4021972980176757E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999761191397634	WITHOUT_CLASSIFICATION	2.3880860236608377E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999761191397634	WITHOUT_CLASSIFICATION	2.3880860236608377E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999761191397634	WITHOUT_CLASSIFICATION	2.3880860236608377E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999761191397634	WITHOUT_CLASSIFICATION	2.3880860236608377E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999761191397634	WITHOUT_CLASSIFICATION	2.3880860236608377E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998716287104815	WITHOUT_CLASSIFICATION	1.2837128951844975E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998716287104815	WITHOUT_CLASSIFICATION	1.2837128951844975E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998716287104815	WITHOUT_CLASSIFICATION	1.2837128951844975E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998716287104815	WITHOUT_CLASSIFICATION	1.2837128951844975E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998716287104815	WITHOUT_CLASSIFICATION	1.2837128951844975E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999929662955684	WITHOUT_CLASSIFICATION	7.033704431524178E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.99999996141639	WITHOUT_CLASSIFICATION	3.858361002122198E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999992300664401	WITHOUT_CLASSIFICATION	7.699335599935961E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999988839478076	WITHOUT_CLASSIFICATION	1.1160521923755846E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999986805064717	WITHOUT_CLASSIFICATION	1.319493528400631E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999904871047873	WITHOUT_CLASSIFICATION	9.512895212747539E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999900386227236	WITHOUT_CLASSIFICATION	9.961377276430425E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999864118034929	WITHOUT_CLASSIFICATION	1.3588196506963348E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.99998588166894	WITHOUT_CLASSIFICATION	1.4118331060071892E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999876448444953	WITHOUT_CLASSIFICATION	1.2355155504697922E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999849723405537	WITHOUT_CLASSIFICATION	1.5027659446269283E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999983850358646	WITHOUT_CLASSIFICATION	1.6149641353892192E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999917199398809	WITHOUT_CLASSIFICATION	8.28006011905974E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999885811534739	WITHOUT_CLASSIFICATION	1.1418846526189642E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999875128077338	WITHOUT_CLASSIFICATION	1.2487192266219724E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.999987122112464	WITHOUT_CLASSIFICATION	1.287788753605241E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999879379134426	WITHOUT_CLASSIFICATION	1.2062086557346574E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.999993007209329	WITHOUT_CLASSIFICATION	6.99279067091758E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999918682822808	WITHOUT_CLASSIFICATION	8.131717719183167E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999902892153161	WITHOUT_CLASSIFICATION	9.710784683933617E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.999983445303123	WITHOUT_CLASSIFICATION	1.6554696877080894E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999842435085698	WITHOUT_CLASSIFICATION	1.575649143017717E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.999990788412197	WITHOUT_CLASSIFICATION	9.211587803013497E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999862937458398	WITHOUT_CLASSIFICATION	1.3706254160335113E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999896600766963	WITHOUT_CLASSIFICATION	1.0339923303760545E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.99998959448251	WITHOUT_CLASSIFICATION	1.0405517490058945E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999924875879881	WITHOUT_CLASSIFICATION	7.512412011971281E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999835186050076	WITHOUT_CLASSIFICATION	1.6481394992406818E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999895390293628	WITHOUT_CLASSIFICATION	1.0460970637162721E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999866610455935	WITHOUT_CLASSIFICATION	1.3338954406510688E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999837101895013	WITHOUT_CLASSIFICATION	1.628981049864205E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999881601360374	WITHOUT_CLASSIFICATION	1.1839863962592662E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999853594166356	WITHOUT_CLASSIFICATION	1.4640583364394662E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999915532227219	WITHOUT_CLASSIFICATION	8.446777278040952E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999881154264452	WITHOUT_CLASSIFICATION	1.1884573554895318E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.999984907922496	WITHOUT_CLASSIFICATION	1.5092077503960346E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999891099498652	WITHOUT_CLASSIFICATION	1.0890050134689153E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999874602562269	WITHOUT_CLASSIFICATION	1.2539743773099714E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999914214613524	WITHOUT_CLASSIFICATION	8.578538647444228E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999931693137198	WITHOUT_CLASSIFICATION	6.830686280110707E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999920454937051	WITHOUT_CLASSIFICATION	7.954506294907193E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999910176719784	WITHOUT_CLASSIFICATION	8.982328021578888E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999899211454841	WITHOUT_CLASSIFICATION	1.0078854515890597E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999678502065825	WITHOUT_CLASSIFICATION	3.214979341758053E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999738514148199	WITHOUT_CLASSIFICATION	2.614858518010184E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999728364929457	WITHOUT_CLASSIFICATION	2.716350705434648E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999805200178701	WITHOUT_CLASSIFICATION	1.947998212999805E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999833735595505	WITHOUT_CLASSIFICATION	1.6626440449484583E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999732531956889	WITHOUT_CLASSIFICATION	2.6746804311156554E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999853959297006	WITHOUT_CLASSIFICATION	1.4604070299491271E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999811631701694	WITHOUT_CLASSIFICATION	1.8836829830591267E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999806487377771	WITHOUT_CLASSIFICATION	1.935126222279761E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999824290066301	WITHOUT_CLASSIFICATION	1.757099336990619E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999916286068218	WITHOUT_CLASSIFICATION	8.371393178111586E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999717589134491	WITHOUT_CLASSIFICATION	2.8241086550958877E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999875523700351	WITHOUT_CLASSIFICATION	1.2447629964845659E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999855136149812	WITHOUT_CLASSIFICATION	1.4486385018822563E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999834515257708	WITHOUT_CLASSIFICATION	1.654847422923037E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.99998737684211	WITHOUT_CLASSIFICATION	1.262315788994764E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999875150894573	WITHOUT_CLASSIFICATION	1.2484910542789259E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999993075155741	WITHOUT_CLASSIFICATION	6.924844259018677E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999925232217253	WITHOUT_CLASSIFICATION	7.4767782747209046E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999833610262732	WITHOUT_CLASSIFICATION	1.6638973726821314E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999821055903924	WITHOUT_CLASSIFICATION	1.789440960771746E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999735744692921	WITHOUT_CLASSIFICATION	2.6425530707880625E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999860657090325	WITHOUT_CLASSIFICATION	1.3934290967417697E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999845100635328	WITHOUT_CLASSIFICATION	1.5489936467181023E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.999987424539444	WITHOUT_CLASSIFICATION	1.2575460555902869E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999818460537778	WITHOUT_CLASSIFICATION	1.815394622217403E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999802253580812	WITHOUT_CLASSIFICATION	1.977464191885219E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.99998259324836	WITHOUT_CLASSIFICATION	1.7406751640010245E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999842793240438	WITHOUT_CLASSIFICATION	1.5720675956160662E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999717499129439	WITHOUT_CLASSIFICATION	2.8250087056067984E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.999981563116874	WITHOUT_CLASSIFICATION	1.8436883125963723E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.999984278638861	WITHOUT_CLASSIFICATION	1.5721361138926656E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999727830370563	WITHOUT_CLASSIFICATION	2.7216962943635293E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999769741394748	WITHOUT_CLASSIFICATION	2.3025860525191815E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.999988605812135	WITHOUT_CLASSIFICATION	1.139418786489126E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999852173195816	WITHOUT_CLASSIFICATION	1.4782680418314436E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999827751344985	WITHOUT_CLASSIFICATION	1.722486550144306E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999860633667135	WITHOUT_CLASSIFICATION	1.393663328656768E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999772169464437	WITHOUT_CLASSIFICATION	2.278305355624702E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999881226797829	WITHOUT_CLASSIFICATION	1.1877320217119051E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999873966422943	WITHOUT_CLASSIFICATION	1.2603357705659665E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999874493118993	WITHOUT_CLASSIFICATION	1.255068810067469E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999783565124988	WITHOUT_CLASSIFICATION	2.164348750123718E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999880887238195	WITHOUT_CLASSIFICATION	1.1911276180399617E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999853467167705	WITHOUT_CLASSIFICATION	1.4653283229436173E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999881235237176	WITHOUT_CLASSIFICATION	1.1876476282457392E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.999989385164111	WITHOUT_CLASSIFICATION	1.061483588906755E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999877074195346	WITHOUT_CLASSIFICATION	1.229258046538249E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999912335496813	WITHOUT_CLASSIFICATION	8.766450318670715E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999844136396591	WITHOUT_CLASSIFICATION	1.5586360340918745E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999910081426585	WITHOUT_CLASSIFICATION	8.991857341380297E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999937758377668	WITHOUT_CLASSIFICATION	6.224162233196624E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.999990551976215	WITHOUT_CLASSIFICATION	9.44802378505911E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999953286813084	WITHOUT_CLASSIFICATION	4.671318691705948E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999906981716307	WITHOUT_CLASSIFICATION	9.301828369307022E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999853914088724	WITHOUT_CLASSIFICATION	1.4608591127608832E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999859177975139	WITHOUT_CLASSIFICATION	1.4082202486102152E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999919552968534	WITHOUT_CLASSIFICATION	8.044703146625268E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999868731397179	WITHOUT_CLASSIFICATION	1.3126860282069365E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999921197745772	WITHOUT_CLASSIFICATION	7.880225422868103E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999770869061811	WITHOUT_CLASSIFICATION	2.2913093818866334E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999884436969926	WITHOUT_CLASSIFICATION	1.1556303007427494E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999893435173886	WITHOUT_CLASSIFICATION	1.065648261139857E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999915586100129	WITHOUT_CLASSIFICATION	8.441389987033661E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999896939939399	WITHOUT_CLASSIFICATION	1.030600606008534E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.999991821905072	WITHOUT_CLASSIFICATION	8.178094928103474E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999892880839065	WITHOUT_CLASSIFICATION	1.0711916093400689E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999861900992391	WITHOUT_CLASSIFICATION	1.3809900760964508E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.999988606172348	WITHOUT_CLASSIFICATION	1.1393827652119671E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.999985754321877	WITHOUT_CLASSIFICATION	1.424567812301737E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999912327059411	WITHOUT_CLASSIFICATION	8.767294058864018E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.999986816670085	WITHOUT_CLASSIFICATION	1.3183329914947518E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999922666198721	WITHOUT_CLASSIFICATION	7.733380128019848E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999887407116195	WITHOUT_CLASSIFICATION	1.1259288380641861E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999907814950977	WITHOUT_CLASSIFICATION	9.21850490239128E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999893981543467	WITHOUT_CLASSIFICATION	1.0601845653224295E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999843794716585	WITHOUT_CLASSIFICATION	1.562052834147228E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999923081041641	WITHOUT_CLASSIFICATION	7.691895835936297E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999925060954895	WITHOUT_CLASSIFICATION	7.493904510504281E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999929846024832	WITHOUT_CLASSIFICATION	7.015397516801067E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999806365258175	WITHOUT_CLASSIFICATION	1.936347418243712E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999870357934625	WITHOUT_CLASSIFICATION	1.2964206537425658E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999853068974176	WITHOUT_CLASSIFICATION	1.4693102582353016E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999896338517215	WITHOUT_CLASSIFICATION	1.0366148278594515E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999851179440612	WITHOUT_CLASSIFICATION	1.4882055938886563E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999863986965408	WITHOUT_CLASSIFICATION	1.3601303459096766E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.999990044968948	WITHOUT_CLASSIFICATION	9.955031052081098E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999876059746607	WITHOUT_CLASSIFICATION	1.2394025339187075E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999884744968389	WITHOUT_CLASSIFICATION	1.1525503161068497E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999834091300066	WITHOUT_CLASSIFICATION	1.65908699934033E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999786293145263	WITHOUT_CLASSIFICATION	2.1370685473746826E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999879610977447	WITHOUT_CLASSIFICATION	1.2038902255405275E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999892840516358	WITHOUT_CLASSIFICATION	1.0715948364083485E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.999988325020504	WITHOUT_CLASSIFICATION	1.1674979496030746E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.99999352330914	WITHOUT_CLASSIFICATION	6.476690859972693E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999895649085432	WITHOUT_CLASSIFICATION	1.043509145672538E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999844977398855	WITHOUT_CLASSIFICATION	1.550226011447109E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999925786687538	WITHOUT_CLASSIFICATION	7.421331246204626E-6	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999906526945991	WITHOUT_CLASSIFICATION	9.347305400888478E-6	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999903488431434	WITHOUT_CLASSIFICATION	9.651156856560304E-6	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999894392588442	WITHOUT_CLASSIFICATION	1.056074115569362E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999941042798771	WITHOUT_CLASSIFICATION	5.895720122787732E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999905771856124	WITHOUT_CLASSIFICATION	9.422814387689723E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.999988699339609	WITHOUT_CLASSIFICATION	1.1300660391063288E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999927809045202	WITHOUT_CLASSIFICATION	7.219095479899127E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999952468536689	WITHOUT_CLASSIFICATION	4.7531463310864735E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999923332603644	WITHOUT_CLASSIFICATION	7.666739635577471E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999952603786535	WITHOUT_CLASSIFICATION	4.739621346487769E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999939117444501	WITHOUT_CLASSIFICATION	6.088255549830485E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999916998255719	WITHOUT_CLASSIFICATION	8.300174428071698E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999839349499724	WITHOUT_CLASSIFICATION	1.606505002761687E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999878569669136	WITHOUT_CLASSIFICATION	1.2143033086310585E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999871606127434	WITHOUT_CLASSIFICATION	1.2839387256671893E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999832691931415	WITHOUT_CLASSIFICATION	1.6730806858472824E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.999985038255693	WITHOUT_CLASSIFICATION	1.4961744307082801E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999946059830179	WITHOUT_CLASSIFICATION	5.394016981977362E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999928951391037	WITHOUT_CLASSIFICATION	7.104860896226141E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999930780201074	WITHOUT_CLASSIFICATION	6.921979892584008E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999937775941762	WITHOUT_CLASSIFICATION	6.2224058238424365E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999826279738426	WITHOUT_CLASSIFICATION	1.7372026157428832E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999939218818469	WITHOUT_CLASSIFICATION	6.078118153149839E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.999993803355198	WITHOUT_CLASSIFICATION	6.196644801869187E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.999995335918219	WITHOUT_CLASSIFICATION	4.664081781020446E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999926458940647	WITHOUT_CLASSIFICATION	7.354105935416471E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999909991571817	WITHOUT_CLASSIFICATION	9.0008428183656E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999944332272597	WITHOUT_CLASSIFICATION	5.566772740346229E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999932710791632	WITHOUT_CLASSIFICATION	6.728920836767216E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999925391227846	WITHOUT_CLASSIFICATION	7.460877215397312E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999911360729111	WITHOUT_CLASSIFICATION	8.863927088803038E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999879020137863	WITHOUT_CLASSIFICATION	1.2097986213691383E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999899738006475	WITHOUT_CLASSIFICATION	1.0026199352643624E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999905713226431	WITHOUT_CLASSIFICATION	9.428677356893362E-6	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999915720121838	WITHOUT_CLASSIFICATION	8.427987816129188E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.999994319895574	WITHOUT_CLASSIFICATION	5.680104426027667E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999920992780267	WITHOUT_CLASSIFICATION	7.900721973349315E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999872250573592	WITHOUT_CLASSIFICATION	1.2774942640774524E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999841477087101	WITHOUT_CLASSIFICATION	1.5852291289962728E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999876998295921	WITHOUT_CLASSIFICATION	1.230017040789271E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999849325757403	WITHOUT_CLASSIFICATION	1.5067424259622158E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999880284370918	WITHOUT_CLASSIFICATION	1.1971562908234076E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.999979579511156	WITHOUT_CLASSIFICATION	2.04204888440226E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999805632948884	WITHOUT_CLASSIFICATION	1.9436705111627474E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999841341870473	WITHOUT_CLASSIFICATION	1.5865812952606743E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999887336797337	WITHOUT_CLASSIFICATION	1.1266320266185153E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999850241188292	WITHOUT_CLASSIFICATION	1.4975881170794302E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999862843278272	WITHOUT_CLASSIFICATION	1.3715672172882857E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999857864276962	WITHOUT_CLASSIFICATION	1.4213572303931844E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999872423073183	WITHOUT_CLASSIFICATION	1.2757692681851624E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999880422820827	WITHOUT_CLASSIFICATION	1.1957717917258859E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999864500972759	WITHOUT_CLASSIFICATION	1.3549902724130597E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999801543674518	WITHOUT_CLASSIFICATION	1.9845632548145577E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999889376127494	WITHOUT_CLASSIFICATION	1.106238725051274E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.999985468987253	WITHOUT_CLASSIFICATION	1.4531012746961612E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999910372549455	WITHOUT_CLASSIFICATION	8.962745054445807E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999918420240738	WITHOUT_CLASSIFICATION	8.157975926323204E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999839469096241	WITHOUT_CLASSIFICATION	1.6053090375879446E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999904250044905	WITHOUT_CLASSIFICATION	9.574995509414046E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999786800515332	WITHOUT_CLASSIFICATION	2.1319948466830727E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999909322007129	WITHOUT_CLASSIFICATION	9.067799287184083E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999871342894598	WITHOUT_CLASSIFICATION	1.2865710540143422E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999783054808802	WITHOUT_CLASSIFICATION	2.1694519119827636E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999861935811348	WITHOUT_CLASSIFICATION	1.3806418865204668E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999882913989284	WITHOUT_CLASSIFICATION	1.1708601071632571E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999899638558959	WITHOUT_CLASSIFICATION	1.0036144104060082E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999938725690728	WITHOUT_CLASSIFICATION	6.127430927222229E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.999987798685484	WITHOUT_CLASSIFICATION	1.2201314515908715E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999883568993472	WITHOUT_CLASSIFICATION	1.1643100652789638E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999849331130034	WITHOUT_CLASSIFICATION	1.5066886996588421E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999875553595019	WITHOUT_CLASSIFICATION	1.2444640498095231E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999916449770992	WITHOUT_CLASSIFICATION	8.355022900746422E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999838925101547	WITHOUT_CLASSIFICATION	1.6107489845292767E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.999984669153285	WITHOUT_CLASSIFICATION	1.5330846715034302E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999866640063327	WITHOUT_CLASSIFICATION	1.3335993667271346E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999854146565311	WITHOUT_CLASSIFICATION	1.4585343468746635E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999894990116016	WITHOUT_CLASSIFICATION	1.0500988398457255E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999879082547818	WITHOUT_CLASSIFICATION	1.2091745218183694E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999906252100111	WITHOUT_CLASSIFICATION	9.374789988808926E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999907634121611	WITHOUT_CLASSIFICATION	9.236587838830179E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999922564071839	WITHOUT_CLASSIFICATION	7.743592815980177E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999906817795031	WITHOUT_CLASSIFICATION	9.318220496807195E-6	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999906919136176	WITHOUT_CLASSIFICATION	9.308086382335256E-6	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999857232620367	WITHOUT_CLASSIFICATION	1.4276737963211007E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999857083472635	WITHOUT_CLASSIFICATION	1.4291652736524171E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999873554838814	WITHOUT_CLASSIFICATION	1.2644516118526031E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999862722734101	WITHOUT_CLASSIFICATION	1.3727726589883614E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.999992074299156	WITHOUT_CLASSIFICATION	7.925700843880077E-6	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999900808411363	WITHOUT_CLASSIFICATION	9.919158863705595E-6	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999872343450216	WITHOUT_CLASSIFICATION	1.2765654978301598E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999827835634235	WITHOUT_CLASSIFICATION	1.7216436576426427E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999834039185146	WITHOUT_CLASSIFICATION	1.6596081485408626E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999858663522512	WITHOUT_CLASSIFICATION	1.4133647748874842E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999892600902714	WITHOUT_CLASSIFICATION	1.073990972848435E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999901520976264	WITHOUT_CLASSIFICATION	9.847902373577232E-6	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999829372821207	WITHOUT_CLASSIFICATION	1.706271787922693E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999880645407738	WITHOUT_CLASSIFICATION	1.1935459226267732E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999881837946427	WITHOUT_CLASSIFICATION	1.1816205357318522E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999801515838007	WITHOUT_CLASSIFICATION	1.9848416199374932E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999894969242656	WITHOUT_CLASSIFICATION	1.0503075734353987E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.999979039194835	WITHOUT_CLASSIFICATION	2.096080516505075E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999877925812448	WITHOUT_CLASSIFICATION	1.2207418755151985E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999841081720499	WITHOUT_CLASSIFICATION	1.5891827950131493E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.999988161950475	WITHOUT_CLASSIFICATION	1.1838049524887845E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999844838182989	WITHOUT_CLASSIFICATION	1.5516181701178702E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999858038317638	WITHOUT_CLASSIFICATION	1.4196168236129987E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999829192540385	WITHOUT_CLASSIFICATION	1.70807459616229E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999669604022635	WITHOUT_CLASSIFICATION	3.3039597736504695E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999852779313774	WITHOUT_CLASSIFICATION	1.472206862273673E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999353263204601	WITHOUT_CLASSIFICATION	6.467367953995169E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.999972973729972	WITHOUT_CLASSIFICATION	2.7026270027968076E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999824652879775	WITHOUT_CLASSIFICATION	1.753471202242613E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999933887677469	WITHOUT_CLASSIFICATION	6.61123225310083E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999887483786527	WITHOUT_CLASSIFICATION	1.1251621347389655E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.999991173595826	WITHOUT_CLASSIFICATION	8.826404174021281E-6	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.999994208818007	WITHOUT_CLASSIFICATION	5.791181992946849E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999853600289793	WITHOUT_CLASSIFICATION	1.4639971020743001E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999720609294712	WITHOUT_CLASSIFICATION	2.793907052875985E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999902183845699	WITHOUT_CLASSIFICATION	9.781615429949202E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999883644518531	WITHOUT_CLASSIFICATION	1.1635548146942002E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999899515882889	WITHOUT_CLASSIFICATION	1.0048411711123448E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999885375060694	WITHOUT_CLASSIFICATION	1.1462493930532224E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999847647882928	WITHOUT_CLASSIFICATION	1.5235211707209193E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999923946301819	WITHOUT_CLASSIFICATION	7.6053698180378264E-6	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999889270854913	WITHOUT_CLASSIFICATION	1.1072914508661445E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.999991521912658	WITHOUT_CLASSIFICATION	8.478087341968733E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999646617041359	WITHOUT_CLASSIFICATION	3.533829586423248E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999917774107155	WITHOUT_CLASSIFICATION	8.222589284513207E-6	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999852717860873	WITHOUT_CLASSIFICATION	1.4728213912650907E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999718236181059	WITHOUT_CLASSIFICATION	2.8176381894148475E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999838769768176	WITHOUT_CLASSIFICATION	1.6123023182478477E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999827823898929	WITHOUT_CLASSIFICATION	1.7217610107052283E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999855694626807	WITHOUT_CLASSIFICATION	1.4430537319318666E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999810438065071	WITHOUT_CLASSIFICATION	1.8956193492912955E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999664137587856	WITHOUT_CLASSIFICATION	3.358624121438605E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999669359987257	WITHOUT_CLASSIFICATION	3.306400127431753E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999831058632909	WITHOUT_CLASSIFICATION	1.689413670913379E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999844056675541	WITHOUT_CLASSIFICATION	1.5594332445958732E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999836658275058	WITHOUT_CLASSIFICATION	1.6334172494247354E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.999977290064009	WITHOUT_CLASSIFICATION	2.2709935990855608E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999775387780877	WITHOUT_CLASSIFICATION	2.246122191230714E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999875416684697	WITHOUT_CLASSIFICATION	1.2458331530380597E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999849391147252	WITHOUT_CLASSIFICATION	1.5060885274725366E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999845392851403	WITHOUT_CLASSIFICATION	1.546071485966732E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999917709439347	WITHOUT_CLASSIFICATION	8.22905606534853E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999868315951641	WITHOUT_CLASSIFICATION	1.3168404835846922E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999895818564938	WITHOUT_CLASSIFICATION	1.0418143506238554E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999891782244613	WITHOUT_CLASSIFICATION	1.08217755386134E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999884292237736	WITHOUT_CLASSIFICATION	1.1570776226413447E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.999978525796702	WITHOUT_CLASSIFICATION	2.1474203298013418E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999901222304105	WITHOUT_CLASSIFICATION	9.877769589582149E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999919429148517	WITHOUT_CLASSIFICATION	8.057085148235499E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999916592623891	WITHOUT_CLASSIFICATION	8.34073761082262E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.999912370722101	WITHOUT_CLASSIFICATION	8.762927789897026E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9998765766447063	WITHOUT_CLASSIFICATION	1.2342335529365653E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999841619076493	WITHOUT_CLASSIFICATION	1.5838092350694434E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999956252024563	WITHOUT_CLASSIFICATION	4.374797543624727E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9989276611931248	WITHOUT_CLASSIFICATION	0.0010723388068751957	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9997155773536003	WITHOUT_CLASSIFICATION	2.844226463997186E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9995239402862005	WITHOUT_CLASSIFICATION	4.760597137994954E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999603278690974	WITHOUT_CLASSIFICATION	3.967213090268105E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999884759030325	WITHOUT_CLASSIFICATION	1.1524096967422607E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999898600986581	WITHOUT_CLASSIFICATION	1.0139901342018013E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999840898976088	WITHOUT_CLASSIFICATION	1.5910102391223062E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999925149697926	WITHOUT_CLASSIFICATION	7.4850302074499595E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.999991841398502	WITHOUT_CLASSIFICATION	8.158601498016961E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999934635789093	WITHOUT_CLASSIFICATION	6.536421090788759E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999832459740619	WITHOUT_CLASSIFICATION	1.6754025938135912E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999832054201959	WITHOUT_CLASSIFICATION	1.6794579804103304E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999935161971173	WITHOUT_CLASSIFICATION	6.4838028826152735E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999921343434641	WITHOUT_CLASSIFICATION	7.865656535928608E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999795181500019	WITHOUT_CLASSIFICATION	2.0481849998127106E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999891951316028	WITHOUT_CLASSIFICATION	1.0804868397297378E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.999979875872257	WITHOUT_CLASSIFICATION	2.0124127742992785E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999894371824084	WITHOUT_CLASSIFICATION	1.0562817591694101E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999905063864869	WITHOUT_CLASSIFICATION	9.493613513225546E-6	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999861779396895	WITHOUT_CLASSIFICATION	1.3822060310507445E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999891578291282	WITHOUT_CLASSIFICATION	1.084217087173059E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999798904386866	WITHOUT_CLASSIFICATION	2.0109561313312647E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999852777708621	WITHOUT_CLASSIFICATION	1.4722229137805497E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999846075896077	WITHOUT_CLASSIFICATION	1.539241039237743E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999666442900215	WITHOUT_CLASSIFICATION	3.3355709978535335E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999499787661458	WITHOUT_CLASSIFICATION	5.0021233854255494E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999925104678211	WITHOUT_CLASSIFICATION	7.489532178863956E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.999999593368305	WITHOUT_CLASSIFICATION	4.0663169490412846E-7	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.999996375721267	WITHOUT_CLASSIFICATION	3.6242787329052344E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9999110059763309	WITHOUT_CLASSIFICATION	8.899402366913856E-5	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.999999505590735	WITHOUT_CLASSIFICATION	4.944092648629704E-7	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999991205986181	WITHOUT_CLASSIFICATION	8.794013819230854E-7	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9999711829027915	WITHOUT_CLASSIFICATION	2.881709720847699E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999999992102819	WITHOUT_CLASSIFICATION	7.897181041761602E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9995846631306147	WITHOUT_CLASSIFICATION	4.1533686938539086E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999869470058	WITHOUT_CLASSIFICATION	1.3052994218359615E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999869470058	WITHOUT_CLASSIFICATION	1.3052994218359615E-8	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.979708771732865	WITHOUT_CLASSIFICATION	0.020291228267135097	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999749309766658	WITHOUT_CLASSIFICATION	2.5069023334290294E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999980246527711	WITHOUT_CLASSIFICATION	1.975347228869683E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.999993968293667	WITHOUT_CLASSIFICATION	6.031706332997942E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999969212753245	WITHOUT_CLASSIFICATION	3.0787246755554996E-6	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999997889161013	WITHOUT_CLASSIFICATION	2.1108389866098538E-7	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999991986354486	WITHOUT_CLASSIFICATION	8.013645514501791E-7	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999994733068113	WITHOUT_CLASSIFICATION	5.266931886230713E-7	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999999497772114	WITHOUT_CLASSIFICATION	5.0222788567848497E-8	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999999925100002	WITHOUT_CLASSIFICATION	7.489999898186398E-9	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999958859927918	WITHOUT_CLASSIFICATION	4.114007208178575E-6	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999998511140386	WITHOUT_CLASSIFICATION	1.4888596145868358E-7	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999999513126775	WITHOUT_CLASSIFICATION	4.868732249959417E-8	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999999978847214	WITHOUT_CLASSIFICATION	2.1152786413411194E-9	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999992770156216	WITHOUT_CLASSIFICATION	7.22984378418761E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999992770156216	WITHOUT_CLASSIFICATION	7.22984378418761E-7	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999983652402245	WITHOUT_CLASSIFICATION	1.6347597755406782E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999996801716754	WITHOUT_CLASSIFICATION	3.198283246336937E-7	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999999970614272	WITHOUT_CLASSIFICATION	2.9385728655983386E-9	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.999998787345827	WITHOUT_CLASSIFICATION	1.2126541730178E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999857814631488	WITHOUT_CLASSIFICATION	1.421853685127904E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999998754683763	WITHOUT_CLASSIFICATION	1.2453162365397495E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999988909446141	WITHOUT_CLASSIFICATION	1.109055385773314E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999998754683763	WITHOUT_CLASSIFICATION	1.2453162365397495E-7	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999851213849781	WITHOUT_CLASSIFICATION	1.4878615021866858E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9990874649658847	WITHOUT_CLASSIFICATION	9.125350341151952E-4	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9915182744548025	WITHOUT_CLASSIFICATION	0.00848172554519765	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.99727826984422	WITHOUT_CLASSIFICATION	0.002721730155779989	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999703560977927	WITHOUT_CLASSIFICATION	2.9643902207166107E-5	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999966088778519	WITHOUT_CLASSIFICATION	3.3911221480567037E-6	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999999965690182	WITHOUT_CLASSIFICATION	3.4309817788153646E-9	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999843570874158	WITHOUT_CLASSIFICATION	1.5642912584128047E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999956847033098	WITHOUT_CLASSIFICATION	4.315296690200682E-6	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.7901751756092371	WITHOUT_CLASSIFICATION	0.20982482439076283	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999995689077547	WITHOUT_CLASSIFICATION	4.310922453135656E-7	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999927524077789	WITHOUT_CLASSIFICATION	7.247592221148577E-6	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999727203378087	WITHOUT_CLASSIFICATION	2.727966219132441E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999530454524886	WITHOUT_CLASSIFICATION	4.695454751132801E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999914103449	WITHOUT_CLASSIFICATION	8.589655038699902E-9	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999914103449	WITHOUT_CLASSIFICATION	8.589655038699902E-9	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999965051501408	WITHOUT_CLASSIFICATION	3.494849859113722E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.999999573308364	WITHOUT_CLASSIFICATION	4.266916360304093E-7	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.999999320818646	WITHOUT_CLASSIFICATION	6.791813540702349E-7	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9999384670408046	WITHOUT_CLASSIFICATION	6.153295919537961E-5	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999986538057861	WITHOUT_CLASSIFICATION	1.346194213998644E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999998754683763	WITHOUT_CLASSIFICATION	1.2453162365397495E-7	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999920142805191	WITHOUT_CLASSIFICATION	7.985719480916797E-6	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999998555042386	WITHOUT_CLASSIFICATION	1.4449576146237565E-7	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999976161787011	WITHOUT_CLASSIFICATION	2.3838212988726137E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999912595148157	WITHOUT_CLASSIFICATION	8.740485184220995E-6	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999999925826363	WITHOUT_CLASSIFICATION	7.417363682606934E-9	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.999999861048986	WITHOUT_CLASSIFICATION	1.389510140091641E-7	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999996472742196	WITHOUT_CLASSIFICATION	3.527257803518483E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.999997002510828	WITHOUT_CLASSIFICATION	2.9974891719921884E-6	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999999876348573	WITHOUT_CLASSIFICATION	1.2365142718328227E-8	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.999999966569291	WITHOUT_CLASSIFICATION	3.343070891919134E-8	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999999981351395	WITHOUT_CLASSIFICATION	1.864860429879131E-9	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.999999995598002	WITHOUT_CLASSIFICATION	4.401997954991883E-9	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9999697165205648	WITHOUT_CLASSIFICATION	3.0283479435188135E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999525661326	WITHOUT_CLASSIFICATION	4.7433867263636954E-8	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9999665530544064	WITHOUT_CLASSIFICATION	3.3446945593717136E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999994430267184	WITHOUT_CLASSIFICATION	5.569732815304833E-7	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999992723743947	WITHOUT_CLASSIFICATION	7.276256053146337E-7	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.999988641860413	WITHOUT_CLASSIFICATION	1.1358139586971744E-5	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999984293585171	WITHOUT_CLASSIFICATION	1.5706414829248145E-6	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999997192954896	WITHOUT_CLASSIFICATION	2.8070451046876934E-7	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999999742965715	WITHOUT_CLASSIFICATION	2.57034284638679E-8	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9994280415135698	WITHOUT_CLASSIFICATION	5.719584864302983E-4	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999999991322985	WITHOUT_CLASSIFICATION	8.677014726321797E-10	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999998020756051	WITHOUT_CLASSIFICATION	1.9792439493703583E-7	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999972331398712	WITHOUT_CLASSIFICATION	2.766860128779931E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999999502367021	WITHOUT_CLASSIFICATION	4.9763297988214386E-8	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999998796544936	WITHOUT_CLASSIFICATION	1.203455064915047E-7	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999909580141207	WITHOUT_CLASSIFICATION	9.041985879155125E-6	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9999744551141458	WITHOUT_CLASSIFICATION	2.5544885854133447E-5	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999999131221786	WITHOUT_CLASSIFICATION	8.687782138937116E-8	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999676236140657	WITHOUT_CLASSIFICATION	3.2376385934408485E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999998291835288	WITHOUT_CLASSIFICATION	1.7081647130984378E-7	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999999936531624	WITHOUT_CLASSIFICATION	6.3468376296605635E-9	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9989475750707504	WITHOUT_CLASSIFICATION	0.0010524249292496433	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999937876706381	WITHOUT_CLASSIFICATION	6.212329361849447E-6	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999991014566889	WITHOUT_CLASSIFICATION	8.985433110244479E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999842183757359	WITHOUT_CLASSIFICATION	1.5781624264055596E-5	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999998334381746	WITHOUT_CLASSIFICATION	1.665618254165681E-7	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999999470210162	WITHOUT_CLASSIFICATION	5.297898383328694E-8	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999999972784033	WITHOUT_CLASSIFICATION	2.7215967437946594E-9	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999603278690974	WITHOUT_CLASSIFICATION	3.967213090268105E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999991347157048	WITHOUT_CLASSIFICATION	8.652842951976259E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999994365921694	WITHOUT_CLASSIFICATION	5.634078306671826E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999546810399222	WITHOUT_CLASSIFICATION	4.531896007762372E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998078249903	WITHOUT_CLASSIFICATION	1.9217500974216957E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9990874649658847	WITHOUT_CLASSIFICATION	9.125350341151952E-4	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999535390554033	WITHOUT_CLASSIFICATION	4.646094459662892E-5	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999997076577009	WITHOUT_CLASSIFICATION	2.923422991507896E-7	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999247149338375	WITHOUT_CLASSIFICATION	7.528506616249995E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996610578751	WITHOUT_CLASSIFICATION	3.389421248611742E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996610578751	WITHOUT_CLASSIFICATION	3.389421248611742E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999816883384463	WITHOUT_CLASSIFICATION	1.8311661553719864E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999816883384463	WITHOUT_CLASSIFICATION	1.8311661553719864E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999816883384463	WITHOUT_CLASSIFICATION	1.8311661553719864E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999975430181054	WITHOUT_CLASSIFICATION	2.4569818944708937E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999975430181054	WITHOUT_CLASSIFICATION	2.4569818944708937E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999845817859961	WITHOUT_CLASSIFICATION	1.5418214003905926E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999845817859961	WITHOUT_CLASSIFICATION	1.5418214003905926E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999981676247606	WITHOUT_CLASSIFICATION	1.832375239341259E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999619896451747	WITHOUT_CLASSIFICATION	3.801035482519287E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999996536414724	WITHOUT_CLASSIFICATION	3.463585276858934E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999996536414724	WITHOUT_CLASSIFICATION	3.463585276858934E-7	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999994924200403	WITHOUT_CLASSIFICATION	5.075799596575138E-7	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999995911575917	WITHOUT_CLASSIFICATION	4.0884240826973245E-7	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9998771799824759	WITHOUT_CLASSIFICATION	1.2282001752411445E-4	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999999681635032	WITHOUT_CLASSIFICATION	3.1836496716824046E-8	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999732360915807	WITHOUT_CLASSIFICATION	2.676390841919566E-5	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.999999929070882	WITHOUT_CLASSIFICATION	7.092911802600714E-8	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999998629965394	WITHOUT_CLASSIFICATION	1.3700346055140177E-7	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999806813818367	WITHOUT_CLASSIFICATION	1.9318618163247892E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999916729473769	WITHOUT_CLASSIFICATION	8.327052623120147E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.999990055141867	WITHOUT_CLASSIFICATION	9.944858133079027E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999999527630167	WITHOUT_CLASSIFICATION	4.723698324587111E-8	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999994082161028	WITHOUT_CLASSIFICATION	5.917838972351778E-7	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999395938007105	WITHOUT_CLASSIFICATION	6.040619928952505E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999927542742835	WITHOUT_CLASSIFICATION	7.245725716570541E-6	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999995271032317	WITHOUT_CLASSIFICATION	4.72896768285355E-7	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999830354095796	WITHOUT_CLASSIFICATION	1.6964590420451068E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999871756447446	WITHOUT_CLASSIFICATION	1.2824355255413692E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999882359148515	WITHOUT_CLASSIFICATION	1.1764085148460375E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999871632054165	WITHOUT_CLASSIFICATION	1.2836794583442294E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999470717708702	WITHOUT_CLASSIFICATION	5.292822912998896E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999833699142988	WITHOUT_CLASSIFICATION	1.6630085701160857E-5	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999673535453303	WITHOUT_CLASSIFICATION	3.2646454669606413E-5	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999935965484867	WITHOUT_CLASSIFICATION	6.403451513243737E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999977001133177	WITHOUT_CLASSIFICATION	2.2998866822643174E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999992335012005	WITHOUT_CLASSIFICATION	7.664987994669898E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999986110933262	WITHOUT_CLASSIFICATION	1.3889066737496086E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.999993119982732	WITHOUT_CLASSIFICATION	6.8800172679637476E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999960035184803	WITHOUT_CLASSIFICATION	3.996481519681565E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999983354363168	WITHOUT_CLASSIFICATION	1.6645636832955704E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.999999445239831	WITHOUT_CLASSIFICATION	5.547601689573443E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999989947665489	WITHOUT_CLASSIFICATION	1.0052334511270105E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999992461241467	WITHOUT_CLASSIFICATION	7.538758532059413E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997487509514	WITHOUT_CLASSIFICATION	2.5124904860078773E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998083388714	WITHOUT_CLASSIFICATION	1.9166112860610242E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997487509514	WITHOUT_CLASSIFICATION	2.5124904860078773E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997487509514	WITHOUT_CLASSIFICATION	2.5124904860078773E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997487509514	WITHOUT_CLASSIFICATION	2.5124904860078773E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997487509514	WITHOUT_CLASSIFICATION	2.5124904860078773E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997487509514	WITHOUT_CLASSIFICATION	2.5124904860078773E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997487509514	WITHOUT_CLASSIFICATION	2.5124904860078773E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998083388714	WITHOUT_CLASSIFICATION	1.9166112860610242E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998083388714	WITHOUT_CLASSIFICATION	1.9166112860610242E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998083388714	WITHOUT_CLASSIFICATION	1.9166112860610242E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998083388714	WITHOUT_CLASSIFICATION	1.9166112860610242E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998083388714	WITHOUT_CLASSIFICATION	1.9166112860610242E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998083388714	WITHOUT_CLASSIFICATION	1.9166112860610242E-7	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9974198034739891	WITHOUT_CLASSIFICATION	0.0025801965260108875	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999319844532591	WITHOUT_CLASSIFICATION	6.801554674085161E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999992446138936	WITHOUT_CLASSIFICATION	7.553861063807641E-7	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998932050396244	WITHOUT_CLASSIFICATION	1.0679496037555846E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999550634662596	WITHOUT_CLASSIFICATION	4.493653374033228E-5	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999963165370076	WITHOUT_CLASSIFICATION	3.683462992504979E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999999757978301	WITHOUT_CLASSIFICATION	2.420216990105452E-8	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999997688972275	WITHOUT_CLASSIFICATION	2.311027724873191E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999981378916191	WITHOUT_CLASSIFICATION	1.8621083809813667E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.999998327726803	WITHOUT_CLASSIFICATION	1.672273197047696E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999954255967918	WITHOUT_CLASSIFICATION	4.574403208243435E-6	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999931905861276	WITHOUT_CLASSIFICATION	6.809413872474394E-6	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999991931439671	WITHOUT_CLASSIFICATION	8.068560329069939E-7	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999997539877202	WITHOUT_CLASSIFICATION	2.460122798148425E-7	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999998542183024	WITHOUT_CLASSIFICATION	1.4578169771106337E-7	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999985269128945	WITHOUT_CLASSIFICATION	1.4730871054778162E-6	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.999990655777127	WITHOUT_CLASSIFICATION	9.344222872974308E-6	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999863682417718	WITHOUT_CLASSIFICATION	1.3631758228148986E-5	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.999998118964291	WITHOUT_CLASSIFICATION	1.8810357088849858E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999527860030801	WITHOUT_CLASSIFICATION	4.7213996919925494E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999994554404361	WITHOUT_CLASSIFICATION	5.445595638561732E-7	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999997991396606	WITHOUT_CLASSIFICATION	2.0086033936959727E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999988909446141	WITHOUT_CLASSIFICATION	1.109055385773314E-6	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.98740185551671	WITHOUT_CLASSIFICATION	0.012598144483289903	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9995968747446806	WITHOUT_CLASSIFICATION	4.031252553192865E-4	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999944722566904	WITHOUT_CLASSIFICATION	5.527743309595346E-6	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999996318953928	WITHOUT_CLASSIFICATION	3.6810460717394886E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999778993610794	WITHOUT_CLASSIFICATION	2.2100638920575428E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.999990566597941	WITHOUT_CLASSIFICATION	9.43340205884029E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999504608796665	WITHOUT_CLASSIFICATION	4.9539120333431114E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999857400056936	WITHOUT_CLASSIFICATION	1.4259994306242972E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999914864312581	WITHOUT_CLASSIFICATION	8.513568741822109E-6	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999594092470029	WITHOUT_CLASSIFICATION	4.059075299706477E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999992463847388	WITHOUT_CLASSIFICATION	7.536152611901379E-7	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.999999825136203	WITHOUT_CLASSIFICATION	1.7486379699964269E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999999630634033	WITHOUT_CLASSIFICATION	3.6936596703132054E-8	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999992094032036	WITHOUT_CLASSIFICATION	7.905967962820735E-7	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999386928829158	WITHOUT_CLASSIFICATION	6.13071170842264E-5	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999993062807939	WITHOUT_CLASSIFICATION	6.937192060252391E-7	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999942024081447	WITHOUT_CLASSIFICATION	5.797591855232088E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999994709144775	WITHOUT_CLASSIFICATION	5.290855224723175E-7	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999999602220186	WITHOUT_CLASSIFICATION	3.977798137423762E-8	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999999585378074	WITHOUT_CLASSIFICATION	4.1462192455268204E-8	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.999999747585689	WITHOUT_CLASSIFICATION	2.524143110328273E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.999999747585689	WITHOUT_CLASSIFICATION	2.524143110328273E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999996671817226	WITHOUT_CLASSIFICATION	3.328182773114341E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999996671817226	WITHOUT_CLASSIFICATION	3.328182773114341E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999308119512	WITHOUT_CLASSIFICATION	6.918804887602339E-8	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999308119512	WITHOUT_CLASSIFICATION	6.918804887602339E-8	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999555674988391	WITHOUT_CLASSIFICATION	4.443250116084508E-5	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999999315693948	WITHOUT_CLASSIFICATION	6.843060520553566E-8	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999999553182157	WITHOUT_CLASSIFICATION	4.468178424804966E-8	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999986857865255	WITHOUT_CLASSIFICATION	1.314213474493126E-6	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999772719640653	WITHOUT_CLASSIFICATION	2.2728035934754978E-5	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999678147745102	WITHOUT_CLASSIFICATION	3.2185225489700064E-5	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999999826716028	WITHOUT_CLASSIFICATION	1.7328397194517853E-8	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999777717594492	WITHOUT_CLASSIFICATION	2.2228240550785008E-5	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999994773982664	WITHOUT_CLASSIFICATION	5.22601733613028E-7	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999920652250082	WITHOUT_CLASSIFICATION	7.934774991777115E-6	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999820294229882	WITHOUT_CLASSIFICATION	1.7970577011763432E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999962312071106	WITHOUT_CLASSIFICATION	3.7687928893868973E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999973792739342	WITHOUT_CLASSIFICATION	2.620726065843655E-6	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9997895662249565	WITHOUT_CLASSIFICATION	2.1043377504355223E-4	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999860111817214	WITHOUT_CLASSIFICATION	1.3988818278615038E-5	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999993934790153	WITHOUT_CLASSIFICATION	6.065209846353855E-7	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999996083222121	WITHOUT_CLASSIFICATION	3.9167778787835103E-7	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999967463822134	WITHOUT_CLASSIFICATION	3.253617786561288E-6	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999996529049777	WITHOUT_CLASSIFICATION	3.470950222738721E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.999997666995291	WITHOUT_CLASSIFICATION	2.3330047090512887E-6	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999980558730388	WITHOUT_CLASSIFICATION	1.9441269611781315E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9997280257112164	WITHOUT_CLASSIFICATION	2.719742887835334E-4	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999975928254884	WITHOUT_CLASSIFICATION	2.407174511696236E-6	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999982375358459	WITHOUT_CLASSIFICATION	1.7624641540429467E-6	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999994096989376	WITHOUT_CLASSIFICATION	5.903010624464679E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999947745689054	WITHOUT_CLASSIFICATION	5.225431094579526E-6	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999972583784148	WITHOUT_CLASSIFICATION	2.7416215851268707E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996022397915	WITHOUT_CLASSIFICATION	3.9776020855897154E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996022397915	WITHOUT_CLASSIFICATION	3.9776020855897154E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996022397915	WITHOUT_CLASSIFICATION	3.9776020855897154E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999677392846	WITHOUT_CLASSIFICATION	3.2260715436382353E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999677392846	WITHOUT_CLASSIFICATION	3.2260715436382353E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999525661326	WITHOUT_CLASSIFICATION	4.7433867263636954E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999525661326	WITHOUT_CLASSIFICATION	4.7433867263636954E-8	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.999999999500274	WITHOUT_CLASSIFICATION	4.99726080169643E-10	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9194271816182297	WITHOUT_CLASSIFICATION	0.08057281838177029	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999999844791874	WITHOUT_CLASSIFICATION	1.5520812684030185E-8	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.999999484685988	WITHOUT_CLASSIFICATION	5.153140121200129E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996022397915	WITHOUT_CLASSIFICATION	3.9776020855897154E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996022397915	WITHOUT_CLASSIFICATION	3.9776020855897154E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996022397915	WITHOUT_CLASSIFICATION	3.9776020855897154E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999677392846	WITHOUT_CLASSIFICATION	3.2260715436382353E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999677392846	WITHOUT_CLASSIFICATION	3.2260715436382353E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999677392846	WITHOUT_CLASSIFICATION	3.2260715436382353E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999525661326	WITHOUT_CLASSIFICATION	4.7433867263636954E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999525661326	WITHOUT_CLASSIFICATION	4.7433867263636954E-8	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999992981678429	WITHOUT_CLASSIFICATION	7.018321570640239E-7	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999999820982627	WITHOUT_CLASSIFICATION	1.7901737303430683E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999834547293	WITHOUT_CLASSIFICATION	1.654527066485049E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999834547293	WITHOUT_CLASSIFICATION	1.654527066485049E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999834547293	WITHOUT_CLASSIFICATION	1.654527066485049E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999834547293	WITHOUT_CLASSIFICATION	1.654527066485049E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999834547293	WITHOUT_CLASSIFICATION	1.654527066485049E-8	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999993065644883	WITHOUT_CLASSIFICATION	6.934355117564943E-7	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999991965480596	WITHOUT_CLASSIFICATION	8.03451940451813E-7	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9989231647536295	WITHOUT_CLASSIFICATION	0.001076835246370499	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999971955303512	WITHOUT_CLASSIFICATION	2.804469648929731E-6	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999992640051653	WITHOUT_CLASSIFICATION	7.359948348750288E-7	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999991464809368	WITHOUT_CLASSIFICATION	8.535190631832524E-7	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999869644730829	WITHOUT_CLASSIFICATION	1.3035526917022059E-5	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999991455186789	WITHOUT_CLASSIFICATION	8.544813211206382E-7	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999998969828133	WITHOUT_CLASSIFICATION	1.0301718666946874E-7	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.999994730711649	WITHOUT_CLASSIFICATION	5.269288350921919E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.999880214317396	WITHOUT_CLASSIFICATION	1.1978568260400843E-4	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999987027085345	WITHOUT_CLASSIFICATION	1.2972914654749366E-6	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.999944499587681	WITHOUT_CLASSIFICATION	5.550041231911579E-5	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999980983849152	WITHOUT_CLASSIFICATION	1.9016150848148862E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999962618255704	WITHOUT_CLASSIFICATION	3.7381744296167843E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999994391858374	WITHOUT_CLASSIFICATION	5.60814162652128E-7	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999994391858374	WITHOUT_CLASSIFICATION	5.60814162652128E-7	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999994391858374	WITHOUT_CLASSIFICATION	5.60814162652128E-7	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999837066769987	WITHOUT_CLASSIFICATION	1.629332300131039E-5	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999837098460914	WITHOUT_CLASSIFICATION	1.6290153908559486E-5	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999994375289915	WITHOUT_CLASSIFICATION	5.624710086235167E-7	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999990549249225	WITHOUT_CLASSIFICATION	9.45075077518157E-7	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999978264903602	WITHOUT_CLASSIFICATION	2.1735096399335937E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999949233456493	WITHOUT_CLASSIFICATION	5.07665435071019E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999988104998562	WITHOUT_CLASSIFICATION	1.1895001438545798E-6	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999999723402929	WITHOUT_CLASSIFICATION	2.7659707035296607E-8	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999998705380804	WITHOUT_CLASSIFICATION	1.294619195887267E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999950032104733	WITHOUT_CLASSIFICATION	4.996789526765574E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999975826978058	WITHOUT_CLASSIFICATION	2.417302194316142E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999999663508439	WITHOUT_CLASSIFICATION	3.364915611337155E-8	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.999999322330131	WITHOUT_CLASSIFICATION	6.776698688927731E-7	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999969494203	WITHOUT_CLASSIFICATION	3.050579752642351E-9	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.999999997009362	WITHOUT_CLASSIFICATION	2.990637975244504E-9	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999830059291669	WITHOUT_CLASSIFICATION	1.699407083320843E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999950666794284	WITHOUT_CLASSIFICATION	4.933320571596934E-6	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999999876682649	WITHOUT_CLASSIFICATION	1.2331735107228519E-8	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999998844405162	WITHOUT_CLASSIFICATION	1.1555948368141066E-7	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999933591637058	WITHOUT_CLASSIFICATION	6.640836294171489E-6	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9996931598001536	WITHOUT_CLASSIFICATION	3.06840199846416E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999980027788393	WITHOUT_CLASSIFICATION	1.9972211606748263E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9991971723137267	WITHOUT_CLASSIFICATION	8.028276862731398E-4	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999995789164243	WITHOUT_CLASSIFICATION	4.2108357561117144E-7	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999958474675059	WITHOUT_CLASSIFICATION	4.152532494171461E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999958176231227	WITHOUT_CLASSIFICATION	4.182376877338924E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999978578606403	WITHOUT_CLASSIFICATION	2.1421393597183787E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999961895294809	WITHOUT_CLASSIFICATION	3.8104705190908135E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999853470473967	WITHOUT_CLASSIFICATION	1.4652952603194319E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999570933036969	WITHOUT_CLASSIFICATION	4.290669630301194E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9998799907113017	WITHOUT_CLASSIFICATION	1.2000928869822815E-4	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999445103802642	WITHOUT_CLASSIFICATION	5.548961973587667E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9999333859024488	WITHOUT_CLASSIFICATION	6.661409755114098E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.999897311988757	WITHOUT_CLASSIFICATION	1.0268801124304972E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9998850236970745	WITHOUT_CLASSIFICATION	1.149763029254163E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9999415835338435	WITHOUT_CLASSIFICATION	5.841646615655118E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999997328421858	WITHOUT_CLASSIFICATION	2.671578142364505E-7	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999993913651442	WITHOUT_CLASSIFICATION	6.086348559077519E-7	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999936229121	WITHOUT_CLASSIFICATION	6.37708785584924E-9	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9981466864105346	WITHOUT_CLASSIFICATION	0.0018533135894653887	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9998235676108924	WITHOUT_CLASSIFICATION	1.7643238910747684E-4	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9916198279420546	WITHOUT_CLASSIFICATION	0.008380172057945397	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999755629572108	WITHOUT_CLASSIFICATION	2.4437042789193013E-5	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999926924216064	WITHOUT_CLASSIFICATION	7.307578393727403E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999993172181795	WITHOUT_CLASSIFICATION	6.827818205234645E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999874006140672	WITHOUT_CLASSIFICATION	1.259938593280635E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999722652077553	WITHOUT_CLASSIFICATION	2.7734792244808767E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999722652077553	WITHOUT_CLASSIFICATION	2.7734792244808767E-5	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999990202655366	WITHOUT_CLASSIFICATION	9.79734463498025E-7	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999971893718719	WITHOUT_CLASSIFICATION	2.81062812808649E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999830794722464	WITHOUT_CLASSIFICATION	1.692052775363791E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999877639992145	WITHOUT_CLASSIFICATION	1.2236000785473541E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999971091553982	WITHOUT_CLASSIFICATION	2.8908446018170635E-6	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999997440955842	WITHOUT_CLASSIFICATION	2.559044157635677E-7	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999999621610234	WITHOUT_CLASSIFICATION	3.7838976558546957E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999998708851204	WITHOUT_CLASSIFICATION	1.2911487969144648E-7	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999998835017735	WITHOUT_CLASSIFICATION	1.1649822654504205E-7	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999974630744993	WITHOUT_CLASSIFICATION	2.5369255006899896E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999623163406	WITHOUT_CLASSIFICATION	3.7683659335127714E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999623163406	WITHOUT_CLASSIFICATION	3.7683659335127714E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999623163406	WITHOUT_CLASSIFICATION	3.7683659335127714E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999623163406	WITHOUT_CLASSIFICATION	3.7683659335127714E-8	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999956025049713	WITHOUT_CLASSIFICATION	4.397495028646358E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999997306598499	WITHOUT_CLASSIFICATION	2.6934015007465385E-7	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.999999745792656	WITHOUT_CLASSIFICATION	2.5420734391738385E-7	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999991301903944	WITHOUT_CLASSIFICATION	8.69809605547841E-7	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9999760795385637	WITHOUT_CLASSIFICATION	2.392046143622127E-5	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9999710903076042	WITHOUT_CLASSIFICATION	2.8909692395840848E-5	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.999974203943841	WITHOUT_CLASSIFICATION	2.579605615910963E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999968960634676	WITHOUT_CLASSIFICATION	3.1039365322498413E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999968960634676	WITHOUT_CLASSIFICATION	3.1039365322498413E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999720938317377	WITHOUT_CLASSIFICATION	2.7906168262378352E-5	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999989262057067	WITHOUT_CLASSIFICATION	1.0737942932186503E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999907007396	WITHOUT_CLASSIFICATION	9.29926031600589E-9	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9993841592375501	WITHOUT_CLASSIFICATION	6.158407624498505E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9993841592375501	WITHOUT_CLASSIFICATION	6.158407624498505E-4	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9985147377923199	WITHOUT_CLASSIFICATION	0.0014852622076800728	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999996021666502	WITHOUT_CLASSIFICATION	3.9783334987134484E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999996021666502	WITHOUT_CLASSIFICATION	3.9783334987134484E-7	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9970332698823926	WITHOUT_CLASSIFICATION	0.002966730117607467	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999997599769024	WITHOUT_CLASSIFICATION	2.40023097625919E-7	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999679576388105	WITHOUT_CLASSIFICATION	3.204236118937468E-5	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9796410027088379	WITHOUT_CLASSIFICATION	0.020358997291162115	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999984961984185	WITHOUT_CLASSIFICATION	1.5038015815051211E-6	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999999977804842	WITHOUT_CLASSIFICATION	2.2195157984562913E-9	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9996271571306378	WITHOUT_CLASSIFICATION	3.728428693622979E-4	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999990548147984	WITHOUT_CLASSIFICATION	9.451852015635289E-7	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999999372342692	WITHOUT_CLASSIFICATION	6.276573077733175E-8	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999980880119511	WITHOUT_CLASSIFICATION	1.9119880489286182E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999971280871497	WITHOUT_CLASSIFICATION	2.871912850347702E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.999999501604589	WITHOUT_CLASSIFICATION	4.983954110929659E-7	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999102743623095	WITHOUT_CLASSIFICATION	8.972563769045945E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.999962638838556	WITHOUT_CLASSIFICATION	3.7361161443914115E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999995805479782	WITHOUT_CLASSIFICATION	4.1945202176666925E-7	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999831695510242	WITHOUT_CLASSIFICATION	1.683044897587264E-5	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999965860455363	WITHOUT_CLASSIFICATION	3.4139544636839197E-6	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999997474794085	WITHOUT_CLASSIFICATION	2.525205915014193E-7	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999997314089694	WITHOUT_CLASSIFICATION	2.6859103069518644E-7	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9977615773761224	WITHOUT_CLASSIFICATION	0.0022384226238775957	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9990197396326923	WITHOUT_CLASSIFICATION	9.802603673076569E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999725888181517	WITHOUT_CLASSIFICATION	2.741118184834696E-5	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.999979985116381	WITHOUT_CLASSIFICATION	2.0014883619081843E-5	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9999065182832164	WITHOUT_CLASSIFICATION	9.348171678356915E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9961308371729886	WITHOUT_CLASSIFICATION	0.0038691628270114456	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9987860678742765	WITHOUT_CLASSIFICATION	0.0012139321257234757	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999997858853952	WITHOUT_CLASSIFICATION	2.1411460487962037E-7	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.999952404962254	WITHOUT_CLASSIFICATION	4.7595037745906804E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999998905756895	WITHOUT_CLASSIFICATION	1.0942431052802638E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999905973021932	WITHOUT_CLASSIFICATION	9.402697806849549E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999505207867375	WITHOUT_CLASSIFICATION	4.94792132624858E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.999995309123739	WITHOUT_CLASSIFICATION	4.690876260965981E-6	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.999514055766859	DEFECT	4.859442331410275E-4	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9998268576998282	WITHOUT_CLASSIFICATION	1.731423001718276E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999999830254733	WITHOUT_CLASSIFICATION	1.6974526675111404E-8	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999107743002351	WITHOUT_CLASSIFICATION	8.922569976493854E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999939774535087	WITHOUT_CLASSIFICATION	6.022546491295927E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999999854153099	WITHOUT_CLASSIFICATION	1.4584690012395981E-8	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999999662647644	WITHOUT_CLASSIFICATION	3.373523572264373E-8	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999107743002351	WITHOUT_CLASSIFICATION	8.922569976493854E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999939774535087	WITHOUT_CLASSIFICATION	6.022546491295927E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999839470479351	WITHOUT_CLASSIFICATION	1.6052952064798694E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999894501678901	WITHOUT_CLASSIFICATION	1.0549832109884167E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999894501678901	WITHOUT_CLASSIFICATION	1.0549832109884167E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999985848030519	WITHOUT_CLASSIFICATION	1.415196948062967E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9977083530525273	WITHOUT_CLASSIFICATION	0.002291646947472769	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999844930910201	WITHOUT_CLASSIFICATION	1.5506908979885963E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999915794083344	WITHOUT_CLASSIFICATION	8.420591665612633E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9998932243058886	WITHOUT_CLASSIFICATION	1.067756941115527E-4	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9464863466197827	WITHOUT_CLASSIFICATION	0.05351365338021723	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999984867081908	WITHOUT_CLASSIFICATION	1.5132918091533503E-6	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999999267483675	WITHOUT_CLASSIFICATION	7.325163247579205E-8	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999970723826384	WITHOUT_CLASSIFICATION	2.9276173615073654E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999824956995881	WITHOUT_CLASSIFICATION	1.7504300411873946E-5	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.999997546256757	WITHOUT_CLASSIFICATION	2.4537432431699374E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999993824609958	WITHOUT_CLASSIFICATION	6.17539004156113E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999226575162824	WITHOUT_CLASSIFICATION	7.734248371764095E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999993663700055	WITHOUT_CLASSIFICATION	6.336299944837611E-7	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999993663700055	WITHOUT_CLASSIFICATION	6.336299944837611E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999830552060053	WITHOUT_CLASSIFICATION	1.6944793994677744E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999830552060053	WITHOUT_CLASSIFICATION	1.6944793994677744E-5	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.999999441959122	WITHOUT_CLASSIFICATION	5.580408780496137E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999996360725122	WITHOUT_CLASSIFICATION	3.63927487853727E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999976501318851	WITHOUT_CLASSIFICATION	2.3498681148412527E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999842888124099	WITHOUT_CLASSIFICATION	1.5711187590178037E-5	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999983261591826	WITHOUT_CLASSIFICATION	1.6738408174376699E-6	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999997793575477	WITHOUT_CLASSIFICATION	2.2064245226965024E-7	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999844930910201	WITHOUT_CLASSIFICATION	1.5506908979885963E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999915794083344	WITHOUT_CLASSIFICATION	8.420591665612633E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999970723826384	WITHOUT_CLASSIFICATION	2.9276173615073654E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999824956995881	WITHOUT_CLASSIFICATION	1.7504300411873946E-5	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999979658971759	WITHOUT_CLASSIFICATION	2.0341028241589722E-6	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.999998278926608	WITHOUT_CLASSIFICATION	1.7210733920288433E-6	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999842429952706	WITHOUT_CLASSIFICATION	1.5757004729458096E-5	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999991948875891	WITHOUT_CLASSIFICATION	8.051124108601145E-7	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999998009732107	WITHOUT_CLASSIFICATION	1.9902678919730717E-7	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999965232349773	WITHOUT_CLASSIFICATION	3.4767650226209123E-6	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9998089450122127	WITHOUT_CLASSIFICATION	1.9105498778731344E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999965934333422	WITHOUT_CLASSIFICATION	3.406566657829424E-6	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999807015337052	WITHOUT_CLASSIFICATION	1.9298466294730615E-5	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999984052050904	WITHOUT_CLASSIFICATION	1.5947949096704798E-6	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999883298867444	WITHOUT_CLASSIFICATION	1.1670113255587937E-5	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.999999641861973	WITHOUT_CLASSIFICATION	3.581380270521891E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999989713813893	WITHOUT_CLASSIFICATION	1.0286186107787622E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9996041836259338	WITHOUT_CLASSIFICATION	3.9581637406626403E-4	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999900975271567	WITHOUT_CLASSIFICATION	9.902472843193483E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999895756879223	WITHOUT_CLASSIFICATION	1.0424312077673395E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999991523940013	WITHOUT_CLASSIFICATION	8.476059986741162E-7	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.99999861027373	WITHOUT_CLASSIFICATION	1.3897262699999464E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999998668940959	WITHOUT_CLASSIFICATION	1.3310590406705885E-7	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999998940430507	WITHOUT_CLASSIFICATION	1.0595694927274923E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999998842652968	WITHOUT_CLASSIFICATION	1.1573470315815554E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999998842652968	WITHOUT_CLASSIFICATION	1.1573470315815554E-7	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.999983203955614	WITHOUT_CLASSIFICATION	1.6796044386024055E-5	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999985117290079	WITHOUT_CLASSIFICATION	1.488270992095764E-6	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.993404841961068	WITHOUT_CLASSIFICATION	0.006595158038931864	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.999999869462412	WITHOUT_CLASSIFICATION	1.3053758801039385E-7	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.999999869462412	WITHOUT_CLASSIFICATION	1.3053758801039385E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999842429952706	WITHOUT_CLASSIFICATION	1.5757004729458096E-5	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999989424441794	WITHOUT_CLASSIFICATION	1.0575558205240661E-6	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999998077901835	WITHOUT_CLASSIFICATION	1.9220981649779384E-7	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999998439940422	WITHOUT_CLASSIFICATION	1.5600595792399481E-7	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999997526630263	WITHOUT_CLASSIFICATION	2.473369735971253E-7	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999998354850415	WITHOUT_CLASSIFICATION	1.6451495858626956E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999905372168502	WITHOUT_CLASSIFICATION	9.46278314981369E-6	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999998776760268	WITHOUT_CLASSIFICATION	1.223239732515359E-7	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999999500426396	WITHOUT_CLASSIFICATION	4.995736035194983E-8	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999992674137888	WITHOUT_CLASSIFICATION	7.325862111701378E-7	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999995722978252	WITHOUT_CLASSIFICATION	4.277021748551163E-7	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.999950801763984	WITHOUT_CLASSIFICATION	4.919823601604572E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999980719869866	WITHOUT_CLASSIFICATION	1.928013013247721E-6	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.999999815660509	WITHOUT_CLASSIFICATION	1.8433949103178126E-7	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999950659191565	WITHOUT_CLASSIFICATION	4.934080843357283E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999994366409233	WITHOUT_CLASSIFICATION	5.633590768483097E-7	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999992402630813	WITHOUT_CLASSIFICATION	7.597369186100292E-7	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999994343809842	WITHOUT_CLASSIFICATION	5.65619015788226E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999599841719246	WITHOUT_CLASSIFICATION	4.0015828075361294E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999995019997497	WITHOUT_CLASSIFICATION	4.980002502545936E-7	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.999999999571961	WITHOUT_CLASSIFICATION	4.2803893742782195E-10	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999987189901636	WITHOUT_CLASSIFICATION	1.281009836448865E-6	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999936467477055	WITHOUT_CLASSIFICATION	6.353252294445524E-6	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999984069588047	WITHOUT_CLASSIFICATION	1.5930411953626816E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999989292067	WITHOUT_CLASSIFICATION	1.0707933771043707E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999996975476667	WITHOUT_CLASSIFICATION	3.0245233330490407E-7	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999967850376934	WITHOUT_CLASSIFICATION	3.2149623067130116E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999998967784407	WITHOUT_CLASSIFICATION	1.0322155928718512E-7	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999999935784837	WITHOUT_CLASSIFICATION	6.421516236756224E-9	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999992374903772	WITHOUT_CLASSIFICATION	7.625096227900255E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999831567873	WITHOUT_CLASSIFICATION	1.6843212670197246E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999831567873	WITHOUT_CLASSIFICATION	1.6843212670197246E-8	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999993840091207	WITHOUT_CLASSIFICATION	6.159908793902596E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999760629731	WITHOUT_CLASSIFICATION	2.3937026891511342E-8	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999760629731	WITHOUT_CLASSIFICATION	2.3937026891511342E-8	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999981845248894	WITHOUT_CLASSIFICATION	1.8154751105665996E-6	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999981845248894	WITHOUT_CLASSIFICATION	1.8154751105665996E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999997132704948	WITHOUT_CLASSIFICATION	2.8672950528030637E-7	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999999857381588	WITHOUT_CLASSIFICATION	1.42618411792893E-8	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999996789143664	WITHOUT_CLASSIFICATION	3.210856335995393E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999996265938066	WITHOUT_CLASSIFICATION	3.734061934067924E-7	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.999999886372756	WITHOUT_CLASSIFICATION	1.1362724396222875E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999972438353807	WITHOUT_CLASSIFICATION	2.756164619297407E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999972438353807	WITHOUT_CLASSIFICATION	2.756164619297407E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999989292067	WITHOUT_CLASSIFICATION	1.0707933771043707E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999989292067	WITHOUT_CLASSIFICATION	1.0707933771043707E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999989292067	WITHOUT_CLASSIFICATION	1.0707933771043707E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999996975476667	WITHOUT_CLASSIFICATION	3.0245233330490407E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999831567873	WITHOUT_CLASSIFICATION	1.6843212670197246E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999831567873	WITHOUT_CLASSIFICATION	1.6843212670197246E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999831567873	WITHOUT_CLASSIFICATION	1.6843212670197246E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999997132704948	WITHOUT_CLASSIFICATION	2.8672950528030637E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999997132704948	WITHOUT_CLASSIFICATION	2.8672950528030637E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999997132704948	WITHOUT_CLASSIFICATION	2.8672950528030637E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999996265938066	WITHOUT_CLASSIFICATION	3.734061934067924E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999996265938066	WITHOUT_CLASSIFICATION	3.734061934067924E-7	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999977344531228	WITHOUT_CLASSIFICATION	2.265546877206992E-6	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999999347691085	WITHOUT_CLASSIFICATION	6.523089148870304E-8	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999860853626	WITHOUT_CLASSIFICATION	1.391463747666266E-8	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.8064177276049231	WITHOUT_CLASSIFICATION	0.19358227239507686	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999997355017769	WITHOUT_CLASSIFICATION	2.6449822311013274E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999992238433634	WITHOUT_CLASSIFICATION	7.761566367690175E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999992238433634	WITHOUT_CLASSIFICATION	7.761566367690175E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999997433059284	WITHOUT_CLASSIFICATION	2.566940714953258E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999905372168502	WITHOUT_CLASSIFICATION	9.46278314981369E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999905372168502	WITHOUT_CLASSIFICATION	9.46278314981369E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999905372168502	WITHOUT_CLASSIFICATION	9.46278314981369E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999905372168502	WITHOUT_CLASSIFICATION	9.46278314981369E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999905372168502	WITHOUT_CLASSIFICATION	9.46278314981369E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998922120821	WITHOUT_CLASSIFICATION	1.077879178171103E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998922120821	WITHOUT_CLASSIFICATION	1.077879178171103E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998922120821	WITHOUT_CLASSIFICATION	1.077879178171103E-7	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999999980466449	WITHOUT_CLASSIFICATION	1.9533550792363187E-9	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999999919122027	WITHOUT_CLASSIFICATION	8.087797406746787E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999996975476667	WITHOUT_CLASSIFICATION	3.0245233330490407E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999997132704948	WITHOUT_CLASSIFICATION	2.8672950528030637E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999997132704948	WITHOUT_CLASSIFICATION	2.8672950528030637E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999905372168502	WITHOUT_CLASSIFICATION	9.46278314981369E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999905372168502	WITHOUT_CLASSIFICATION	9.46278314981369E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998922120821	WITHOUT_CLASSIFICATION	1.077879178171103E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999997433059284	WITHOUT_CLASSIFICATION	2.566940714953258E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999358606767892	WITHOUT_CLASSIFICATION	6.413932321087999E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999998566658238	WITHOUT_CLASSIFICATION	1.4333417618612832E-7	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999921493082488	WITHOUT_CLASSIFICATION	7.850691751249328E-6	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999997357469611	WITHOUT_CLASSIFICATION	2.6425303893446047E-7	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999997207048332	WITHOUT_CLASSIFICATION	2.79295166710561E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999999584786701	WITHOUT_CLASSIFICATION	4.152132991217485E-8	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999650135830928	WITHOUT_CLASSIFICATION	3.498641690724797E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999992336597625	WITHOUT_CLASSIFICATION	7.663402375386657E-7	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999999604889593	WITHOUT_CLASSIFICATION	3.95110406932475E-8	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999999937261028	WITHOUT_CLASSIFICATION	6.273897138069393E-9	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999995400423269	WITHOUT_CLASSIFICATION	4.599576730690782E-7	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999999725649066	WITHOUT_CLASSIFICATION	2.7435093485289813E-8	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.999999442174596	WITHOUT_CLASSIFICATION	5.578254039285524E-7	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999985248351827	WITHOUT_CLASSIFICATION	1.4751648173894054E-6	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999994738990112	WITHOUT_CLASSIFICATION	5.261009888707336E-7	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999834786711336	WITHOUT_CLASSIFICATION	1.6521328866367325E-5	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999999764710906	WITHOUT_CLASSIFICATION	2.3528909389594057E-8	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999867015773116	WITHOUT_CLASSIFICATION	1.3298422688397716E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999669376398254	WITHOUT_CLASSIFICATION	3.306236017468687E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999996341785	WITHOUT_CLASSIFICATION	3.658215000443399E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9995921992648623	WITHOUT_CLASSIFICATION	4.078007351377763E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999842535137	WITHOUT_CLASSIFICATION	1.5746486407172652E-8	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999997439316	WITHOUT_CLASSIFICATION	2.56068425566049E-10	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999997367145469	WITHOUT_CLASSIFICATION	2.632854531460556E-7	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999851962752085	WITHOUT_CLASSIFICATION	1.4803724791524436E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999867864370368	WITHOUT_CLASSIFICATION	1.3213562963226983E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999988746512434	WITHOUT_CLASSIFICATION	1.1253487566518254E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.999998798860157	WITHOUT_CLASSIFICATION	1.2011398430487682E-6	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999992528552083	WITHOUT_CLASSIFICATION	7.47144791671887E-7	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999985987678459	WITHOUT_CLASSIFICATION	1.4012321540244523E-6	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999999886154193	WITHOUT_CLASSIFICATION	1.1384580734288164E-8	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999999021929092	WITHOUT_CLASSIFICATION	9.780709077146024E-8	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.999986110047585	WITHOUT_CLASSIFICATION	1.388995241506204E-5	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999978989442997	WITHOUT_CLASSIFICATION	2.101055700278251E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999358606767892	WITHOUT_CLASSIFICATION	6.413932321087999E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999999577037537	WITHOUT_CLASSIFICATION	4.229624637584407E-8	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999999894436663	WITHOUT_CLASSIFICATION	1.0556333776253048E-8	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9996139289023056	WITHOUT_CLASSIFICATION	3.8607109769438257E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999993304892301	WITHOUT_CLASSIFICATION	6.695107699212698E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999993304892301	WITHOUT_CLASSIFICATION	6.695107699212698E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999992258833075	WITHOUT_CLASSIFICATION	7.741166925463099E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999992258833075	WITHOUT_CLASSIFICATION	7.741166925463099E-7	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999985811038915	WITHOUT_CLASSIFICATION	1.418896108531995E-6	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.998465026093066	WITHOUT_CLASSIFICATION	0.0015349739069340394	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999998849087494	WITHOUT_CLASSIFICATION	1.1509125059593623E-7	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999999438881978	WITHOUT_CLASSIFICATION	5.611180211801457E-8	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999997582838691	WITHOUT_CLASSIFICATION	2.417161308731866E-7	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.999997953647152	WITHOUT_CLASSIFICATION	2.0463528479305603E-6	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.999965503350943	WITHOUT_CLASSIFICATION	3.449664905689333E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999953229812291	WITHOUT_CLASSIFICATION	4.677018770970736E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999996778931575	WITHOUT_CLASSIFICATION	3.2210684252536006E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999926007541439	WITHOUT_CLASSIFICATION	7.399245856154483E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999949502055469	WITHOUT_CLASSIFICATION	5.049794453099309E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999993703677923	WITHOUT_CLASSIFICATION	6.296322077087317E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999993703677923	WITHOUT_CLASSIFICATION	6.296322077087317E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.999993363393124	WITHOUT_CLASSIFICATION	6.636606875984069E-6	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999996039029618	WITHOUT_CLASSIFICATION	3.960970381470085E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999992889921923	WITHOUT_CLASSIFICATION	7.110078076765515E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999992889921923	WITHOUT_CLASSIFICATION	7.110078076765515E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999940764041001	WITHOUT_CLASSIFICATION	5.9235958998531044E-6	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999828786456079	WITHOUT_CLASSIFICATION	1.7121354392158446E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999938675136955	WITHOUT_CLASSIFICATION	6.1324863045862955E-6	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999990929449981	WITHOUT_CLASSIFICATION	9.070550019110898E-7	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999998131442432	WITHOUT_CLASSIFICATION	1.8685575671926134E-7	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999996381129133	WITHOUT_CLASSIFICATION	3.6188708672395243E-7	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999991382355731	WITHOUT_CLASSIFICATION	8.617644270297374E-7	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999998596890116	WITHOUT_CLASSIFICATION	1.4031098831072813E-7	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9998875229736371	WITHOUT_CLASSIFICATION	1.1247702636277081E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999999053953512	WITHOUT_CLASSIFICATION	9.460464876117816E-8	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999998195803353	WITHOUT_CLASSIFICATION	1.8041966464760293E-7	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999947456760161	WITHOUT_CLASSIFICATION	5.254323983854295E-6	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999998644228368	WITHOUT_CLASSIFICATION	1.3557716310563002E-7	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.999998420420498	WITHOUT_CLASSIFICATION	1.579579502008219E-6	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999997505941574	WITHOUT_CLASSIFICATION	2.494058426464833E-7	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9998811455150189	WITHOUT_CLASSIFICATION	1.1885448498101592E-4	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999957184702747	WITHOUT_CLASSIFICATION	4.281529725362486E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999997218743137	WITHOUT_CLASSIFICATION	2.7812568618964833E-7	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.999999598331784	WITHOUT_CLASSIFICATION	4.016682160103273E-7	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999994644264355	WITHOUT_CLASSIFICATION	5.355735645076961E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.7523700736219281	WITHOUT_CLASSIFICATION	0.24762992637807188	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999978513033263	WITHOUT_CLASSIFICATION	2.148696673666988E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999970755013843	WITHOUT_CLASSIFICATION	2.924498615658918E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999999077539772	WITHOUT_CLASSIFICATION	9.224602288692104E-8	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999976518714238	WITHOUT_CLASSIFICATION	2.3481285762947945E-6	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999830898048018	WITHOUT_CLASSIFICATION	1.6910195198165478E-5	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999980335722536	WITHOUT_CLASSIFICATION	1.9664277464229862E-6	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.99999969760816	WITHOUT_CLASSIFICATION	3.0239184005453966E-7	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999821883094785	WITHOUT_CLASSIFICATION	1.78116905215229E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999999352699525	WITHOUT_CLASSIFICATION	6.473004754958E-8	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999973650443066	WITHOUT_CLASSIFICATION	2.63495569349396E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999998225506387	WITHOUT_CLASSIFICATION	1.7744936130082828E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999987846966584	WITHOUT_CLASSIFICATION	1.215303341645192E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999883425801295	WITHOUT_CLASSIFICATION	1.1657419870450384E-5	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999883425801295	WITHOUT_CLASSIFICATION	1.1657419870450384E-5	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999927608360892	WITHOUT_CLASSIFICATION	7.239163910780008E-6	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999998369836193	WITHOUT_CLASSIFICATION	1.6301638065531383E-7	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999999408940515	WITHOUT_CLASSIFICATION	5.91059485445951E-8	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999829751633876	WITHOUT_CLASSIFICATION	1.702483661226904E-5	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9998315731944915	WITHOUT_CLASSIFICATION	1.6842680550859836E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999999872122275	WITHOUT_CLASSIFICATION	1.2787772410865813E-8	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9997993730458964	WITHOUT_CLASSIFICATION	2.0062695410350088E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9971299323586228	WITHOUT_CLASSIFICATION	0.0028700676413772174	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9999628834359844	WITHOUT_CLASSIFICATION	3.711656401552399E-5	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999367706367586	WITHOUT_CLASSIFICATION	6.32293632414478E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999993707133794	WITHOUT_CLASSIFICATION	6.292866205896257E-7	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9983458659818141	WITHOUT_CLASSIFICATION	0.0016541340181859302	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999999173194899	WITHOUT_CLASSIFICATION	8.268051007274996E-8	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9997349107477614	WITHOUT_CLASSIFICATION	2.6508925223855083E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999999928541161	WITHOUT_CLASSIFICATION	7.14588390243333E-9	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999994118901704	WITHOUT_CLASSIFICATION	5.881098297038597E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999957721982112	WITHOUT_CLASSIFICATION	4.227801788683318E-6	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999985015116077	WITHOUT_CLASSIFICATION	1.4984883922447156E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999998549835685	WITHOUT_CLASSIFICATION	1.4501643143586625E-7	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999817224296688	WITHOUT_CLASSIFICATION	1.8277570331335732E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999993580405085	WITHOUT_CLASSIFICATION	6.419594915279605E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999251389949	WITHOUT_CLASSIFICATION	7.486100509821376E-8	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999904477593928	WITHOUT_CLASSIFICATION	9.552240607071755E-6	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999945701557872	WITHOUT_CLASSIFICATION	5.429844212743426E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999966398540231	WITHOUT_CLASSIFICATION	3.3601459767877027E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999993889253345	WITHOUT_CLASSIFICATION	6.110746655956741E-7	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999999811872191	WITHOUT_CLASSIFICATION	1.8812780876942068E-8	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999997022396644	WITHOUT_CLASSIFICATION	2.9776033562295534E-7	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9980987654826945	WITHOUT_CLASSIFICATION	0.001901234517305383	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.974683271874726	WITHOUT_CLASSIFICATION	0.025316728125273975	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999868429213694	WITHOUT_CLASSIFICATION	1.3157078630546764E-5	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999999992309406	WITHOUT_CLASSIFICATION	7.690593347016905E-10	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999880848940204	WITHOUT_CLASSIFICATION	1.1915105979640208E-5	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999996298310369	WITHOUT_CLASSIFICATION	3.7016896308852244E-7	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999948387908882	WITHOUT_CLASSIFICATION	5.161209111758188E-6	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999997489033124	WITHOUT_CLASSIFICATION	2.510966876071314E-7	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999979577979908	WITHOUT_CLASSIFICATION	2.04220200911295E-6	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999983217628394	WITHOUT_CLASSIFICATION	1.678237160564133E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999994449408779	WITHOUT_CLASSIFICATION	5.550591220565394E-7	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999999340285554	WITHOUT_CLASSIFICATION	6.597144467827483E-8	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999996129515616	WITHOUT_CLASSIFICATION	3.870484383774585E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999990356064689	WITHOUT_CLASSIFICATION	9.643935311749932E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999990356064689	WITHOUT_CLASSIFICATION	9.643935311749932E-7	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999986949578087	WITHOUT_CLASSIFICATION	1.3050421912964167E-6	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999999057052223	WITHOUT_CLASSIFICATION	9.429477755704714E-8	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999988985055935	WITHOUT_CLASSIFICATION	1.101494406524692E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999974517255036	WITHOUT_CLASSIFICATION	2.54827449629023E-6	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.999999849903471	WITHOUT_CLASSIFICATION	1.500965290208809E-7	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999999202929396	WITHOUT_CLASSIFICATION	7.970706040205329E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999870520767585	WITHOUT_CLASSIFICATION	1.2947923241419138E-5	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9696755858535556	WITHOUT_CLASSIFICATION	0.03032441414644443	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.999999022971458	WITHOUT_CLASSIFICATION	9.77028541887694E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999952155229	WITHOUT_CLASSIFICATION	4.784477112121245E-9	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999992567495826	WITHOUT_CLASSIFICATION	7.432504173833161E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999978809845324	WITHOUT_CLASSIFICATION	2.1190154676420665E-6	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9997270333038347	WITHOUT_CLASSIFICATION	2.729666961653201E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.999999851491551	WITHOUT_CLASSIFICATION	1.4850844892046068E-7	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999995178759272	WITHOUT_CLASSIFICATION	4.821240727254509E-7	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9997787620491473	WITHOUT_CLASSIFICATION	2.21237950852763E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9997793431317324	WITHOUT_CLASSIFICATION	2.206568682675479E-4	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.999998974872182	WITHOUT_CLASSIFICATION	1.025127817956049E-6	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999994985759	WITHOUT_CLASSIFICATION	5.014241901674023E-10	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9493903917969434	WITHOUT_CLASSIFICATION	0.05060960820305653	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999999447394866	WITHOUT_CLASSIFICATION	5.52605133985095E-8	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999727096213843	WITHOUT_CLASSIFICATION	2.7290378615652174E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999992577661	WITHOUT_CLASSIFICATION	7.422339491219843E-10	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999912394662394	WITHOUT_CLASSIFICATION	8.760533760606346E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999955554514117	WITHOUT_CLASSIFICATION	4.4445485882723914E-6	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.999999638396191	WITHOUT_CLASSIFICATION	3.6160380902303136E-7	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999998696799436	WITHOUT_CLASSIFICATION	1.3032005641695513E-7	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999994711883966	WITHOUT_CLASSIFICATION	5.288116034666457E-7	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9997579022166354	WITHOUT_CLASSIFICATION	2.4209778336454813E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999982163074931	WITHOUT_CLASSIFICATION	1.7836925069317427E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9995415604339407	WITHOUT_CLASSIFICATION	4.5843956605937835E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999991049135662	WITHOUT_CLASSIFICATION	8.950864338097638E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999982163074931	WITHOUT_CLASSIFICATION	1.7836925069317427E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999985470769718	WITHOUT_CLASSIFICATION	1.4529230282539462E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9961308371729886	WITHOUT_CLASSIFICATION	0.0038691628270114456	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9996157155846855	WITHOUT_CLASSIFICATION	3.842844153145597E-4	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.6292674598094028	WITHOUT_CLASSIFICATION	0.37073254019059715	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999998308852402	WITHOUT_CLASSIFICATION	1.6911475979925445E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999834547293	WITHOUT_CLASSIFICATION	1.654527066485049E-8	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999999456598438	WITHOUT_CLASSIFICATION	5.434015611286251E-8	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999991784155404	WITHOUT_CLASSIFICATION	8.215844595966611E-7	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9977083530525273	WITHOUT_CLASSIFICATION	0.002291646947472769	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999994644264355	WITHOUT_CLASSIFICATION	5.355735645076961E-7	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999860853626	WITHOUT_CLASSIFICATION	1.391463747666266E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.99999054189532	WITHOUT_CLASSIFICATION	9.458104680068789E-6	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999997568039013	WITHOUT_CLASSIFICATION	2.43196098758032E-7	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999999550987461	WITHOUT_CLASSIFICATION	4.490125405935241E-8	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999537668082705	WITHOUT_CLASSIFICATION	4.6233191729521016E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999998245262767	WITHOUT_CLASSIFICATION	1.7547372329387427E-7	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999983043653645	WITHOUT_CLASSIFICATION	1.6956346355930462E-6	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999999863673905	WITHOUT_CLASSIFICATION	1.3632609434312775E-8	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9914137667040073	WITHOUT_CLASSIFICATION	0.008586233295992776	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999959335609049	WITHOUT_CLASSIFICATION	4.066439095191788E-6	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999987374838177	WITHOUT_CLASSIFICATION	1.2625161822369825E-6	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999992414367042	WITHOUT_CLASSIFICATION	7.585632959275592E-7	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999999476404847	WITHOUT_CLASSIFICATION	5.2359515133645475E-8	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999964249432508	WITHOUT_CLASSIFICATION	3.5750567492305158E-6	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999984033239738	WITHOUT_CLASSIFICATION	1.5966760260927664E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999849723405537	WITHOUT_CLASSIFICATION	1.5027659446269283E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999899323301569	WITHOUT_CLASSIFICATION	1.0067669842990839E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999889781275859	WITHOUT_CLASSIFICATION	1.1021872414034157E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999688140863	WITHOUT_CLASSIFICATION	3.118591369872163E-8	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999977028486177	WITHOUT_CLASSIFICATION	2.297151382309614E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999977028486177	WITHOUT_CLASSIFICATION	2.297151382309614E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997302322549	WITHOUT_CLASSIFICATION	2.6976774517225827E-7	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999999256616378	WITHOUT_CLASSIFICATION	7.433836231140965E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999468931001	WITHOUT_CLASSIFICATION	5.310689995751222E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9963666109500185	WITHOUT_CLASSIFICATION	0.0036333890499814195	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9963666109500185	WITHOUT_CLASSIFICATION	0.0036333890499814195	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9963666109500185	WITHOUT_CLASSIFICATION	0.0036333890499814195	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9963666109500185	WITHOUT_CLASSIFICATION	0.0036333890499814195	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999982349749701	WITHOUT_CLASSIFICATION	1.7650250298172414E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999078465756	WITHOUT_CLASSIFICATION	9.215342446329151E-8	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999988169774108	WITHOUT_CLASSIFICATION	1.183022589133233E-6	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.999456216096081	WITHOUT_CLASSIFICATION	5.437839039190058E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999161927123	WITHOUT_CLASSIFICATION	8.380728771432869E-8	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9997863554977355	WITHOUT_CLASSIFICATION	2.1364450226458352E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999946370969856	WITHOUT_CLASSIFICATION	5.3629030144382846E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999946370969856	WITHOUT_CLASSIFICATION	5.3629030144382846E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9992781193996679	WITHOUT_CLASSIFICATION	7.218806003320255E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9996771939790211	WITHOUT_CLASSIFICATION	3.22806020978871E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999969202892331	WITHOUT_CLASSIFICATION	3.0797107669005165E-6	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9957931232559062	WITHOUT_CLASSIFICATION	0.00420687674409371	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999989500357387	WITHOUT_CLASSIFICATION	1.0499642613065317E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999995981677922	WITHOUT_CLASSIFICATION	4.018322078517362E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999998531791681	WITHOUT_CLASSIFICATION	1.4682083193041435E-7	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999973818729067	WITHOUT_CLASSIFICATION	2.6181270933069316E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999759499636652	WITHOUT_CLASSIFICATION	2.405003633478804E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999759499636652	WITHOUT_CLASSIFICATION	2.405003633478804E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999991049135662	WITHOUT_CLASSIFICATION	8.950864338097638E-6	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.999990157584132	WITHOUT_CLASSIFICATION	9.84241586797278E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999838703809608	WITHOUT_CLASSIFICATION	1.6129619039213757E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999975468974958	WITHOUT_CLASSIFICATION	2.4531025042683176E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999999966300753	WITHOUT_CLASSIFICATION	3.3699246362112087E-9	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9995296676293876	WITHOUT_CLASSIFICATION	4.703323706125026E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.999999925526402	WITHOUT_CLASSIFICATION	7.447359802334327E-8	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999981422369877	WITHOUT_CLASSIFICATION	1.8577630123266819E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.999999200867437	WITHOUT_CLASSIFICATION	7.991325630335992E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.999999200867437	WITHOUT_CLASSIFICATION	7.991325630335992E-7	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999985431245128	WITHOUT_CLASSIFICATION	1.4568754873170217E-6	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999999653986967	WITHOUT_CLASSIFICATION	3.460130330274502E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999897885191273	WITHOUT_CLASSIFICATION	1.021148087261648E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999988254518413	WITHOUT_CLASSIFICATION	1.1745481588290527E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999989121969214	WITHOUT_CLASSIFICATION	1.0878030785815562E-6	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9996385120313591	WITHOUT_CLASSIFICATION	3.6148796864083314E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999998828298626	WITHOUT_CLASSIFICATION	1.1717013740038547E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999999974302713	WITHOUT_CLASSIFICATION	2.569728685168165E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999999974302713	WITHOUT_CLASSIFICATION	2.569728685168165E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999999974302713	WITHOUT_CLASSIFICATION	2.569728685168165E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.999999974302713	WITHOUT_CLASSIFICATION	2.569728685168165E-8	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999953109499864	WITHOUT_CLASSIFICATION	4.68905001361194E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9996995132655205	WITHOUT_CLASSIFICATION	3.004867344794601E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9998219813217658	WITHOUT_CLASSIFICATION	1.780186782342732E-4	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999995214216926	WITHOUT_CLASSIFICATION	4.785783074136731E-7	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999979822987985	WITHOUT_CLASSIFICATION	2.0177012014441614E-6	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9994699253392428	WITHOUT_CLASSIFICATION	5.300746607571638E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999559259535	WITHOUT_CLASSIFICATION	4.407404653721856E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996921754674	WITHOUT_CLASSIFICATION	3.0782453270817835E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996921754674	WITHOUT_CLASSIFICATION	3.0782453270817835E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999996921754674	WITHOUT_CLASSIFICATION	3.0782453270817835E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999768390416004	WITHOUT_CLASSIFICATION	2.3160958399568066E-5	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.996734975603419	WITHOUT_CLASSIFICATION	0.0032650243965810254	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999997940787217	WITHOUT_CLASSIFICATION	2.059212781574381E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999997940787217	WITHOUT_CLASSIFICATION	2.059212781574381E-7	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999931238609026	WITHOUT_CLASSIFICATION	6.876139097439463E-6	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999981933668	WITHOUT_CLASSIFICATION	1.8066331963362667E-9	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999995479357988	WITHOUT_CLASSIFICATION	4.520642011354591E-7	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9995702935087583	WITHOUT_CLASSIFICATION	4.297064912416676E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999999509266424	WITHOUT_CLASSIFICATION	4.9073357644399184E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999998396190981	WITHOUT_CLASSIFICATION	1.6038090187697408E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999855580510991	WITHOUT_CLASSIFICATION	1.4441948900838172E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999855580510991	WITHOUT_CLASSIFICATION	1.4441948900838172E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999985193398087	WITHOUT_CLASSIFICATION	1.4806601913943673E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9969062791014571	WITHOUT_CLASSIFICATION	0.003093720898542833	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999998745148079	WITHOUT_CLASSIFICATION	1.2548519213223672E-7	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999981709896886	WITHOUT_CLASSIFICATION	1.8290103114598294E-6	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999976913361951	WITHOUT_CLASSIFICATION	2.30866380491038E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.999999407796793	WITHOUT_CLASSIFICATION	5.922032069566869E-7	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999995028068149	WITHOUT_CLASSIFICATION	4.971931849975065E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999386691001447	WITHOUT_CLASSIFICATION	6.133089985529507E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9987670707672685	WITHOUT_CLASSIFICATION	0.0012329292327314838	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999999436264879	WITHOUT_CLASSIFICATION	5.63735121054732E-8	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999999223011002	WITHOUT_CLASSIFICATION	7.769889975142104E-8	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999865218336468	WITHOUT_CLASSIFICATION	1.3478166353139296E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.999883882667488	WITHOUT_CLASSIFICATION	1.1611733251206524E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999928504169823	WITHOUT_CLASSIFICATION	7.1495830177366745E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999967379436	WITHOUT_CLASSIFICATION	3.262056374664372E-9	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999999929317651	WITHOUT_CLASSIFICATION	7.068234888789853E-9	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9998657026780817	WITHOUT_CLASSIFICATION	1.3429732191837243E-4	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999999883323105	WITHOUT_CLASSIFICATION	1.166768958073344E-8	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999998047855047	WITHOUT_CLASSIFICATION	1.9521449531952638E-7	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999956920201757	WITHOUT_CLASSIFICATION	4.30797982433833E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999989517298672	WITHOUT_CLASSIFICATION	1.0482701327800757E-6	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9993678060429215	WITHOUT_CLASSIFICATION	6.321939570784564E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999291879494	WITHOUT_CLASSIFICATION	7.081205051750928E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999291879494	WITHOUT_CLASSIFICATION	7.081205051750928E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999291879494	WITHOUT_CLASSIFICATION	7.081205051750928E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999291879494	WITHOUT_CLASSIFICATION	7.081205051750928E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999291879494	WITHOUT_CLASSIFICATION	7.081205051750928E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999291879494	WITHOUT_CLASSIFICATION	7.081205051750928E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999291879494	WITHOUT_CLASSIFICATION	7.081205051750928E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999291879494	WITHOUT_CLASSIFICATION	7.081205051750928E-8	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9936259282812496	WITHOUT_CLASSIFICATION	0.006374071718750298	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9998677279440262	WITHOUT_CLASSIFICATION	1.3227205597373924E-4	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999344737384442	WITHOUT_CLASSIFICATION	6.552626155573467E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9536144191215407	WITHOUT_CLASSIFICATION	0.046385580878459294	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999870520767585	WITHOUT_CLASSIFICATION	1.2947923241419138E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999870520767585	WITHOUT_CLASSIFICATION	1.2947923241419138E-5	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999999559374869	WITHOUT_CLASSIFICATION	4.406251312599619E-8	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999993142483085	WITHOUT_CLASSIFICATION	6.857516916537103E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999717567817	WITHOUT_CLASSIFICATION	2.8243218253083932E-8	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999822250147344	WITHOUT_CLASSIFICATION	1.777498526560662E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999969796570662	WITHOUT_CLASSIFICATION	3.020342933640262E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999991060237589	WITHOUT_CLASSIFICATION	8.939762412635699E-7	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999985894714392	WITHOUT_CLASSIFICATION	1.4105285609480646E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9989216020043733	WITHOUT_CLASSIFICATION	0.0010783979956267209	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999991913283509	WITHOUT_CLASSIFICATION	8.086716491847803E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999892872958447	WITHOUT_CLASSIFICATION	1.0712704155312597E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999892872958447	WITHOUT_CLASSIFICATION	1.0712704155312597E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999892872958447	WITHOUT_CLASSIFICATION	1.0712704155312597E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999999107843304	WITHOUT_CLASSIFICATION	8.921566964631062E-8	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999926039491305	WITHOUT_CLASSIFICATION	7.396050869469038E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999950191826721	WITHOUT_CLASSIFICATION	4.980817327900167E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999579389979	WITHOUT_CLASSIFICATION	4.2061002066076805E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999802132461229	WITHOUT_CLASSIFICATION	1.9786753877138795E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.999999972965667	WITHOUT_CLASSIFICATION	2.7034333066636756E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999463680004	WITHOUT_CLASSIFICATION	5.3631999581121594E-8	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999879295534121	WITHOUT_CLASSIFICATION	1.2070446587859136E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.999998574788762	WITHOUT_CLASSIFICATION	1.4252112380252933E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.999998574788762	WITHOUT_CLASSIFICATION	1.4252112380252933E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999974381179605	WITHOUT_CLASSIFICATION	2.561882039525522E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999169804697	WITHOUT_CLASSIFICATION	8.301953019921786E-8	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999721720968145	WITHOUT_CLASSIFICATION	2.7827903185546944E-5	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9988542538825069	WITHOUT_CLASSIFICATION	0.0011457461174930632	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999994929548761	WITHOUT_CLASSIFICATION	5.070451238424348E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999994929548761	WITHOUT_CLASSIFICATION	5.070451238424348E-7	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999998529639385	WITHOUT_CLASSIFICATION	1.470360615984872E-7	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999993690692186	WITHOUT_CLASSIFICATION	6.309307814649035E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999979901285447	WITHOUT_CLASSIFICATION	2.009871455292657E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999497415982862	WITHOUT_CLASSIFICATION	5.025840171384541E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999110471535	WITHOUT_CLASSIFICATION	8.895284656872178E-8	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.99999868744588	WITHOUT_CLASSIFICATION	1.312554119981981E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.99999868744588	WITHOUT_CLASSIFICATION	1.312554119981981E-6	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999998727725453	WITHOUT_CLASSIFICATION	1.2722745455830497E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999998727725453	WITHOUT_CLASSIFICATION	1.2722745455830497E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999985943322269	WITHOUT_CLASSIFICATION	1.4056677730787493E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.99999730320814	WITHOUT_CLASSIFICATION	2.696791860039165E-6	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999961583348188	WITHOUT_CLASSIFICATION	3.841665181253365E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999844877572195	WITHOUT_CLASSIFICATION	1.5512242780588937E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999808291869923	WITHOUT_CLASSIFICATION	1.9170813007723224E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999959437225615	WITHOUT_CLASSIFICATION	4.056277438393464E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999994732648	WITHOUT_CLASSIFICATION	5.267352147629074E-10	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999972438353807	WITHOUT_CLASSIFICATION	2.756164619297407E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999999300969395	WITHOUT_CLASSIFICATION	6.990306048688364E-8	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999941488561168	WITHOUT_CLASSIFICATION	5.851143883236755E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.651982836383401	DEFECT	0.3480171636165989	WITHOUT_CLASSIFICATION
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999994340370234	WITHOUT_CLASSIFICATION	5.65962976683372E-7	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999990730629471	WITHOUT_CLASSIFICATION	9.269370527843914E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999985591625905	WITHOUT_CLASSIFICATION	1.44083740951301E-6	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.999997192022421	WITHOUT_CLASSIFICATION	2.8079775790801176E-6	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999998578765117	WITHOUT_CLASSIFICATION	1.4212348829410845E-7	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.999999792236387	WITHOUT_CLASSIFICATION	2.0776361284495542E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999983360197462	WITHOUT_CLASSIFICATION	1.6639802538640049E-6	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999890095426722	WITHOUT_CLASSIFICATION	1.099045732779257E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999998916059339	WITHOUT_CLASSIFICATION	1.0839406613031783E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.99999054189532	WITHOUT_CLASSIFICATION	9.458104680068789E-6	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998300486510255	WITHOUT_CLASSIFICATION	1.6995134897447592E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999986665498859	WITHOUT_CLASSIFICATION	1.3334501141670812E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999997481814398	WITHOUT_CLASSIFICATION	2.518185602133508E-7	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999998701823375	WITHOUT_CLASSIFICATION	1.2981766246264513E-7	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999962816011376	WITHOUT_CLASSIFICATION	3.7183988623686403E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999916436857215	WITHOUT_CLASSIFICATION	8.356314278581159E-6	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999999594748089	WITHOUT_CLASSIFICATION	4.0525191078094564E-8	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999989071873544	WITHOUT_CLASSIFICATION	1.0928126455454998E-6	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9997480646854026	WITHOUT_CLASSIFICATION	2.5193531459738434E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999998234240361	WITHOUT_CLASSIFICATION	1.7657596375107637E-7	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999991686635784	WITHOUT_CLASSIFICATION	8.313364216212175E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999982398651784	WITHOUT_CLASSIFICATION	1.760134821657019E-6	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999980049089485	WITHOUT_CLASSIFICATION	1.995091051555563E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999005268304	WITHOUT_CLASSIFICATION	9.947316957051754E-8	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999884353259559	WITHOUT_CLASSIFICATION	1.15646740439792E-5	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999659106753	WITHOUT_CLASSIFICATION	3.408932477078832E-8	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999997931151158	WITHOUT_CLASSIFICATION	2.0688488429157954E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999994293518681	WITHOUT_CLASSIFICATION	5.706481317785522E-7	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.996752864354553	WITHOUT_CLASSIFICATION	0.003247135645446887	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.99988816120697	WITHOUT_CLASSIFICATION	1.1183879303007293E-4	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999959354597729	WITHOUT_CLASSIFICATION	4.064540227115168E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999999987707562	WITHOUT_CLASSIFICATION	1.2292439014263942E-9	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999980566807247	WITHOUT_CLASSIFICATION	1.9433192753385136E-6	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9543330474616224	WITHOUT_CLASSIFICATION	0.045666952538377666	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999775721458	WITHOUT_CLASSIFICATION	2.2427854205640876E-8	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.999999986457858	WITHOUT_CLASSIFICATION	1.354214192807164E-8	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999987354004329	WITHOUT_CLASSIFICATION	1.2645995670984836E-6	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.999993635406783	WITHOUT_CLASSIFICATION	6.364593217053066E-6	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999752254404636	WITHOUT_CLASSIFICATION	2.477455953639753E-5	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999981791345514	WITHOUT_CLASSIFICATION	1.8208654486333342E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999994497319347	WITHOUT_CLASSIFICATION	5.502680653172058E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999994497319347	WITHOUT_CLASSIFICATION	5.502680653172058E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999998173247824	WITHOUT_CLASSIFICATION	1.8267521767858131E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999998173247824	WITHOUT_CLASSIFICATION	1.8267521767858131E-7	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999004292040733	WITHOUT_CLASSIFICATION	9.957079592672196E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999004292040733	WITHOUT_CLASSIFICATION	9.957079592672196E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999977209394392	WITHOUT_CLASSIFICATION	2.2790605608888687E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999977209394392	WITHOUT_CLASSIFICATION	2.2790605608888687E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998804499691	WITHOUT_CLASSIFICATION	1.195500308970277E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998804499691	WITHOUT_CLASSIFICATION	1.195500308970277E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998804499691	WITHOUT_CLASSIFICATION	1.195500308970277E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998804499691	WITHOUT_CLASSIFICATION	1.195500308970277E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998804499691	WITHOUT_CLASSIFICATION	1.195500308970277E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998804499691	WITHOUT_CLASSIFICATION	1.195500308970277E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998804499691	WITHOUT_CLASSIFICATION	1.195500308970277E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998804499691	WITHOUT_CLASSIFICATION	1.195500308970277E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998804499691	WITHOUT_CLASSIFICATION	1.195500308970277E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999985477831699	WITHOUT_CLASSIFICATION	1.4522168302302203E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999985477831699	WITHOUT_CLASSIFICATION	1.4522168302302203E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999985477831699	WITHOUT_CLASSIFICATION	1.4522168302302203E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999996915313185	WITHOUT_CLASSIFICATION	3.08468681403242E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999946890461915	WITHOUT_CLASSIFICATION	5.310953808539198E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999946890461915	WITHOUT_CLASSIFICATION	5.310953808539198E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999946890461915	WITHOUT_CLASSIFICATION	5.310953808539198E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999992638003039	WITHOUT_CLASSIFICATION	7.361996961823507E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999992638003039	WITHOUT_CLASSIFICATION	7.361996961823507E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999992638003039	WITHOUT_CLASSIFICATION	7.361996961823507E-7	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999504389600283	WITHOUT_CLASSIFICATION	4.956103997173116E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999998408960201	WITHOUT_CLASSIFICATION	1.591039798200848E-7	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999488753269883	WITHOUT_CLASSIFICATION	5.1124673011666566E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999934031431236	WITHOUT_CLASSIFICATION	6.596856876393255E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999934031431236	WITHOUT_CLASSIFICATION	6.596856876393255E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999934031431236	WITHOUT_CLASSIFICATION	6.596856876393255E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999973501664371	WITHOUT_CLASSIFICATION	2.6498335627919707E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999717519190638	WITHOUT_CLASSIFICATION	2.824808093610217E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999717519190638	WITHOUT_CLASSIFICATION	2.824808093610217E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9988327241542456	WITHOUT_CLASSIFICATION	0.0011672758457543933	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999978907624	WITHOUT_CLASSIFICATION	2.1092375867127614E-9	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999978907624	WITHOUT_CLASSIFICATION	2.1092375867127614E-9	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9239920050614686	WITHOUT_CLASSIFICATION	0.07600799493853141	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999991347157048	WITHOUT_CLASSIFICATION	8.652842951976259E-7	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999985048026684	WITHOUT_CLASSIFICATION	1.4951973315520762E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998529988785	WITHOUT_CLASSIFICATION	1.4700112155156186E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998529988785	WITHOUT_CLASSIFICATION	1.4700112155156186E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999929787192393	WITHOUT_CLASSIFICATION	7.02128076074421E-6	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999997533833361	WITHOUT_CLASSIFICATION	2.466166637924001E-7	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999997089358358	WITHOUT_CLASSIFICATION	2.910641642293431E-7	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9999993835307917	WITHOUT_CLASSIFICATION	6.16469208450821E-7	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9981972110646181	WITHOUT_CLASSIFICATION	0.0018027889353818755	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998529988785	WITHOUT_CLASSIFICATION	1.4700112155156186E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998529988785	WITHOUT_CLASSIFICATION	1.4700112155156186E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998529988785	WITHOUT_CLASSIFICATION	1.4700112155156186E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998529988785	WITHOUT_CLASSIFICATION	1.4700112155156186E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998529988785	WITHOUT_CLASSIFICATION	1.4700112155156186E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999999862123448	WITHOUT_CLASSIFICATION	1.3787655129893108E-8	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999993389174596	WITHOUT_CLASSIFICATION	6.61082540326895E-7	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999999067246063	WITHOUT_CLASSIFICATION	9.327539374540375E-8	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999973726305823	WITHOUT_CLASSIFICATION	2.6273694178029957E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999162201958515	WITHOUT_CLASSIFICATION	8.377980414852701E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993055069711	WITHOUT_CLASSIFICATION	6.944930288948117E-7	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9920024270584232	WITHOUT_CLASSIFICATION	0.007997572941576714	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9996751864335087	WITHOUT_CLASSIFICATION	3.2481356649126635E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999999169449558	WITHOUT_CLASSIFICATION	8.305504425210833E-8	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999997670910902	WITHOUT_CLASSIFICATION	2.329089097311143E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999953889446683	WITHOUT_CLASSIFICATION	4.611055331636516E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999727096213843	WITHOUT_CLASSIFICATION	2.7290378615652174E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999990836563103	WITHOUT_CLASSIFICATION	9.163436895575314E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999926591877	WITHOUT_CLASSIFICATION	7.34081240152648E-9	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999785464871831	WITHOUT_CLASSIFICATION	2.145351281690648E-5	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9996755526381609	WITHOUT_CLASSIFICATION	3.2444736183906436E-4	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.999999891603355	WITHOUT_CLASSIFICATION	1.0839664501810547E-7	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999995713845	WITHOUT_CLASSIFICATION	4.286153957311805E-10	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999980735842374	WITHOUT_CLASSIFICATION	1.9264157625238104E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.99999957847535	WITHOUT_CLASSIFICATION	4.215246499711292E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999756029689317	WITHOUT_CLASSIFICATION	2.4397031068211382E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.999994736245998	WITHOUT_CLASSIFICATION	5.263754002029361E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999952155229	WITHOUT_CLASSIFICATION	4.784477112121245E-9	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999808474463	WITHOUT_CLASSIFICATION	1.9152553665339707E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999808474463	WITHOUT_CLASSIFICATION	1.9152553665339707E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999808474463	WITHOUT_CLASSIFICATION	1.9152553665339707E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999808474463	WITHOUT_CLASSIFICATION	1.9152553665339707E-8	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999881069623077	WITHOUT_CLASSIFICATION	1.1893037692312463E-5	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9999696687879167	WITHOUT_CLASSIFICATION	3.0331212083235002E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999987606486445	WITHOUT_CLASSIFICATION	1.2393513555604027E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999987606486445	WITHOUT_CLASSIFICATION	1.2393513555604027E-6	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999987487404598	WITHOUT_CLASSIFICATION	1.2512595402327562E-6	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999925943501811	WITHOUT_CLASSIFICATION	7.405649818905761E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.999998536138751	WITHOUT_CLASSIFICATION	1.4638612489638717E-6	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999958390493	WITHOUT_CLASSIFICATION	4.160950752211167E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9998420064279829	WITHOUT_CLASSIFICATION	1.5799357201701534E-4	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999990157832397	WITHOUT_CLASSIFICATION	9.842167602223936E-7	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999806175025898	WITHOUT_CLASSIFICATION	1.9382497410130847E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999973084211162	WITHOUT_CLASSIFICATION	2.6915788837971854E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999973084211162	WITHOUT_CLASSIFICATION	2.6915788837971854E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999973084211162	WITHOUT_CLASSIFICATION	2.6915788837971854E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999973084211162	WITHOUT_CLASSIFICATION	2.6915788837971854E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.998989122364948	WITHOUT_CLASSIFICATION	0.0010108776350519716	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999997837297089	WITHOUT_CLASSIFICATION	2.1627029109803104E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999997837297089	WITHOUT_CLASSIFICATION	2.1627029109803104E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999997837297089	WITHOUT_CLASSIFICATION	2.1627029109803104E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999998465535233	WITHOUT_CLASSIFICATION	1.534464767846021E-7	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999997559150093	WITHOUT_CLASSIFICATION	2.44084990612373E-7	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999996173009242	WITHOUT_CLASSIFICATION	3.826990757164006E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9963666109500185	WITHOUT_CLASSIFICATION	0.0036333890499814195	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9963666109500185	WITHOUT_CLASSIFICATION	0.0036333890499814195	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999845848896246	WITHOUT_CLASSIFICATION	1.5415110375437465E-5	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9999063163387055	WITHOUT_CLASSIFICATION	9.3683661294439E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.999916572327498	WITHOUT_CLASSIFICATION	8.342767250206651E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.999916572327498	WITHOUT_CLASSIFICATION	8.342767250206651E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9992417994831779	WITHOUT_CLASSIFICATION	7.582005168221394E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9992417994831779	WITHOUT_CLASSIFICATION	7.582005168221394E-4	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999999064149968	WITHOUT_CLASSIFICATION	9.35850032702571E-8	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999999131405333	WITHOUT_CLASSIFICATION	8.685946671674417E-8	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999999908885092	WITHOUT_CLASSIFICATION	9.111490821409647E-9	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9685735411891433	WITHOUT_CLASSIFICATION	0.03142645881085663	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999914244061946	WITHOUT_CLASSIFICATION	8.575593805370147E-6	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999998714869551	WITHOUT_CLASSIFICATION	1.2851304495865496E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999629256235	WITHOUT_CLASSIFICATION	3.707437640247052E-8	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999495158849495	WITHOUT_CLASSIFICATION	5.048411505045713E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999999125298417	WITHOUT_CLASSIFICATION	8.747015827865815E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999986822551	WITHOUT_CLASSIFICATION	1.317745001126778E-9	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999986822551	WITHOUT_CLASSIFICATION	1.317745001126778E-9	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997540406462	WITHOUT_CLASSIFICATION	2.4595935381398844E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997540406462	WITHOUT_CLASSIFICATION	2.4595935381398844E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.999978315069833	WITHOUT_CLASSIFICATION	2.1684930166942444E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999965599983555	WITHOUT_CLASSIFICATION	3.440001644535673E-6	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999458774369566	WITHOUT_CLASSIFICATION	5.412256304347097E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999987393083178	WITHOUT_CLASSIFICATION	1.260691682188055E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999987393083178	WITHOUT_CLASSIFICATION	1.260691682188055E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999987393083178	WITHOUT_CLASSIFICATION	1.260691682188055E-6	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.999988615339299	WITHOUT_CLASSIFICATION	1.1384660701038606E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999892251484479	WITHOUT_CLASSIFICATION	1.0774851552159237E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999861329350934	WITHOUT_CLASSIFICATION	1.3867064906520594E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999900829640311	WITHOUT_CLASSIFICATION	9.91703596879388E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999846567674519	WITHOUT_CLASSIFICATION	1.5343232548110185E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999831861274906	WITHOUT_CLASSIFICATION	1.6813872509458376E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999893165585355	WITHOUT_CLASSIFICATION	1.0683441464462953E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999978760661361	WITHOUT_CLASSIFICATION	2.1239338638242433E-6	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9999839491948862	WITHOUT_CLASSIFICATION	1.6050805113828867E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999966193103256	WITHOUT_CLASSIFICATION	3.3806896744206096E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9999999835767602	WITHOUT_CLASSIFICATION	1.6423239763710006E-8	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999998407492207	WITHOUT_CLASSIFICATION	1.5925077945588903E-7	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999968215216948	WITHOUT_CLASSIFICATION	3.1784783052978868E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9963666109500185	WITHOUT_CLASSIFICATION	0.0036333890499814195	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999517005286997	WITHOUT_CLASSIFICATION	4.829947130026579E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999902556823822	WITHOUT_CLASSIFICATION	9.744317617673687E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999977028486177	WITHOUT_CLASSIFICATION	2.297151382309614E-6	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997678318763068	WITHOUT_CLASSIFICATION	2.3216812369329732E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997678318763068	WITHOUT_CLASSIFICATION	2.3216812369329732E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997678318763068	WITHOUT_CLASSIFICATION	2.3216812369329732E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997678318763068	WITHOUT_CLASSIFICATION	2.3216812369329732E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997678318763068	WITHOUT_CLASSIFICATION	2.3216812369329732E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999445926936614	WITHOUT_CLASSIFICATION	5.5407306338558476E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997678318763068	WITHOUT_CLASSIFICATION	2.3216812369329732E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997678318763068	WITHOUT_CLASSIFICATION	2.3216812369329732E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997678318763068	WITHOUT_CLASSIFICATION	2.3216812369329732E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.999998440753377	WITHOUT_CLASSIFICATION	1.5592466230646045E-6	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999870272500235	WITHOUT_CLASSIFICATION	1.2972749976472656E-5	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.8480574285786718	DEFECT	0.15194257142132814	WITHOUT_CLASSIFICATION
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9997098357916469	WITHOUT_CLASSIFICATION	2.9016420835316164E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999945467014574	WITHOUT_CLASSIFICATION	5.453298542664553E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999996728691205	WITHOUT_CLASSIFICATION	3.2713087953243184E-7	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999999992841561	WITHOUT_CLASSIFICATION	7.158438921019492E-10	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999643555712839	WITHOUT_CLASSIFICATION	3.564442871613473E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999895306784117	WITHOUT_CLASSIFICATION	1.0469321588316231E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999895306784117	WITHOUT_CLASSIFICATION	1.0469321588316231E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999524547288596	WITHOUT_CLASSIFICATION	4.754527114035241E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.999983743583498	WITHOUT_CLASSIFICATION	1.6256416502037325E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999875523700351	WITHOUT_CLASSIFICATION	1.2447629964845659E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999839038681234	WITHOUT_CLASSIFICATION	1.6096131876628924E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999848434985509	WITHOUT_CLASSIFICATION	1.5156501449004333E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999855156763537	WITHOUT_CLASSIFICATION	1.4484323646257278E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999906093785322	WITHOUT_CLASSIFICATION	9.390621467673306E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999875150894573	WITHOUT_CLASSIFICATION	1.2484910542789259E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999897500733093	WITHOUT_CLASSIFICATION	1.0249926690754434E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999915253371976	WITHOUT_CLASSIFICATION	8.474662802477723E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999893378533402	WITHOUT_CLASSIFICATION	1.0662146659690239E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.999989172390875	WITHOUT_CLASSIFICATION	1.0827609124943483E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999902957327363	WITHOUT_CLASSIFICATION	9.704267263642563E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999859177975139	WITHOUT_CLASSIFICATION	1.4082202486102152E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.999990225153715	WITHOUT_CLASSIFICATION	9.774846285048758E-6	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999914705882945	WITHOUT_CLASSIFICATION	8.529411705491087E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999901264715095	WITHOUT_CLASSIFICATION	9.873528490494355E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999935683524305	WITHOUT_CLASSIFICATION	6.431647569529417E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999880291255315	WITHOUT_CLASSIFICATION	1.1970874468526712E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.999972139197154	WITHOUT_CLASSIFICATION	2.786080284608891E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999899250119201	WITHOUT_CLASSIFICATION	1.0074988079914807E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999977227479373	WITHOUT_CLASSIFICATION	2.2772520627007138E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999918554057764	WITHOUT_CLASSIFICATION	8.144594223710212E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999964888426731	WITHOUT_CLASSIFICATION	3.5111573267588356E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.999988785809067	WITHOUT_CLASSIFICATION	1.121419093298148E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.999991821905072	WITHOUT_CLASSIFICATION	8.178094928103474E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.99999163243745	WITHOUT_CLASSIFICATION	8.367562549918298E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999888129974966	WITHOUT_CLASSIFICATION	1.1187002503359488E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999912081093667	WITHOUT_CLASSIFICATION	8.791890633280252E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999927809045202	WITHOUT_CLASSIFICATION	7.219095479899127E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999923332603644	WITHOUT_CLASSIFICATION	7.666739635577471E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999938504090234	WITHOUT_CLASSIFICATION	6.149590976474077E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.999988911389974	WITHOUT_CLASSIFICATION	1.1088610025964253E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999923305006112	WITHOUT_CLASSIFICATION	7.669499388863093E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.999988992518929	WITHOUT_CLASSIFICATION	1.100748107102395E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999933030179176	WITHOUT_CLASSIFICATION	6.696982082475274E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999894354888896	WITHOUT_CLASSIFICATION	1.0564511110441015E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.999985038255693	WITHOUT_CLASSIFICATION	1.4961744307082801E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999883778534798	WITHOUT_CLASSIFICATION	1.162214652015648E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999805068472803	WITHOUT_CLASSIFICATION	1.9493152719642526E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999918702886199	WITHOUT_CLASSIFICATION	8.129711380081959E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999884606895934	WITHOUT_CLASSIFICATION	1.153931040662332E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999755080193222	WITHOUT_CLASSIFICATION	2.4491980677793847E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999893449992241	WITHOUT_CLASSIFICATION	1.065500077586446E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999911911175433	WITHOUT_CLASSIFICATION	8.80888245667787E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999904250044905	WITHOUT_CLASSIFICATION	9.574995509414046E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.999983886456653	WITHOUT_CLASSIFICATION	1.6113543346994157E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999878768317951	WITHOUT_CLASSIFICATION	1.212316820480509E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999823007570591	WITHOUT_CLASSIFICATION	1.7699242940912434E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999880824147418	WITHOUT_CLASSIFICATION	1.191758525827274E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999807916909391	WITHOUT_CLASSIFICATION	1.9208309060834403E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999762080120701	WITHOUT_CLASSIFICATION	2.3791987929820544E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999809345827857	WITHOUT_CLASSIFICATION	1.906541721436244E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.999984907391645	WITHOUT_CLASSIFICATION	1.5092608354956658E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.999984907391645	WITHOUT_CLASSIFICATION	1.5092608354956658E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999844838182989	WITHOUT_CLASSIFICATION	1.5516181701178702E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999868192208333	WITHOUT_CLASSIFICATION	1.3180779166625914E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999828650118507	WITHOUT_CLASSIFICATION	1.7134988149272672E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999762417430345	WITHOUT_CLASSIFICATION	2.375825696545964E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999921760242219	WITHOUT_CLASSIFICATION	7.823975778153656E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999975224204923	WITHOUT_CLASSIFICATION	2.4775795076874614E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999852779313774	WITHOUT_CLASSIFICATION	1.472206862273673E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999689118772755	WITHOUT_CLASSIFICATION	3.10881227245106E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999702343230207	WITHOUT_CLASSIFICATION	2.976567697927754E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999858699303058	WITHOUT_CLASSIFICATION	1.413006969424262E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999992216518123	WITHOUT_CLASSIFICATION	7.783481877125437E-7	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999992216518123	WITHOUT_CLASSIFICATION	7.783481877125437E-7	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999971545227266	WITHOUT_CLASSIFICATION	2.8454772733036593E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998022464867867	WITHOUT_CLASSIFICATION	1.9775351321324255E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9994428150197949	WITHOUT_CLASSIFICATION	5.571849802051126E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999996492268	WITHOUT_CLASSIFICATION	3.507731084509371E-10	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999999992102819	WITHOUT_CLASSIFICATION	7.897181041761602E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999999992102819	WITHOUT_CLASSIFICATION	7.897181041761602E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999999992102819	WITHOUT_CLASSIFICATION	7.897181041761602E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.999999992102819	WITHOUT_CLASSIFICATION	7.897181041761602E-9	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.5628077142528997	DEFECT	0.43719228574710034	WITHOUT_CLASSIFICATION
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9908835493082769	WITHOUT_CLASSIFICATION	0.009116450691723003	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999925148719114	WITHOUT_CLASSIFICATION	7.48512808852763E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999908857266167	WITHOUT_CLASSIFICATION	9.114273383282464E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999904604836364	WITHOUT_CLASSIFICATION	9.53951636354257E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999897951350941	WITHOUT_CLASSIFICATION	1.0204864905857875E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999899776243619	WITHOUT_CLASSIFICATION	1.0022375638027192E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999809602344867	WITHOUT_CLASSIFICATION	1.9039765513257593E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999745745328636	WITHOUT_CLASSIFICATION	2.5425467136422875E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999874879879006	WITHOUT_CLASSIFICATION	1.251201209932926E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999850519672614	WITHOUT_CLASSIFICATION	1.4948032738549684E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999750312599301	WITHOUT_CLASSIFICATION	2.4968740069931033E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999841988042323	WITHOUT_CLASSIFICATION	1.5801195767663402E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999855196198675	WITHOUT_CLASSIFICATION	1.4480380132551091E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999845265166886	WITHOUT_CLASSIFICATION	1.5473483311440994E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999852669363823	WITHOUT_CLASSIFICATION	1.4733063617572325E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999909198635177	WITHOUT_CLASSIFICATION	9.080136482270661E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999926150477851	WITHOUT_CLASSIFICATION	7.384952214767518E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999871495318479	WITHOUT_CLASSIFICATION	1.285046815219989E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.999987952132169	WITHOUT_CLASSIFICATION	1.2047867830983004E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999833667858646	WITHOUT_CLASSIFICATION	1.6633214135340924E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999805896557885	WITHOUT_CLASSIFICATION	1.9410344211495077E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999707218405273	WITHOUT_CLASSIFICATION	2.9278159472706758E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999844643146142	WITHOUT_CLASSIFICATION	1.5535685385772228E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999834738128692	WITHOUT_CLASSIFICATION	1.652618713082585E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999918271691236	WITHOUT_CLASSIFICATION	8.172830876449217E-6	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999868030296386	WITHOUT_CLASSIFICATION	1.319697036150764E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999939530597999	WITHOUT_CLASSIFICATION	6.0469402002013565E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999950164360955	WITHOUT_CLASSIFICATION	4.9835639044962135E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999923654783598	WITHOUT_CLASSIFICATION	7.634521640236428E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999936188113434	WITHOUT_CLASSIFICATION	6.381188656562587E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999891310387724	WITHOUT_CLASSIFICATION	1.0868961227689067E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999889698580691	WITHOUT_CLASSIFICATION	1.1030141930954861E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.999984711959298	WITHOUT_CLASSIFICATION	1.5288040702133365E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999867605068898	WITHOUT_CLASSIFICATION	1.3239493110220703E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999925950824409	WITHOUT_CLASSIFICATION	7.4049175591362705E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999902567990072	WITHOUT_CLASSIFICATION	9.743200992844182E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.999992074826833	WITHOUT_CLASSIFICATION	7.925173166954442E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999809263439512	WITHOUT_CLASSIFICATION	1.9073656048900943E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999837090261172	WITHOUT_CLASSIFICATION	1.6290973882793177E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999866435899633	WITHOUT_CLASSIFICATION	1.3356410036767963E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999880185077716	WITHOUT_CLASSIFICATION	1.1981492228435721E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999884280044667	WITHOUT_CLASSIFICATION	1.1571995533212312E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999872793092262	WITHOUT_CLASSIFICATION	1.2720690773794351E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.999989498503297	WITHOUT_CLASSIFICATION	1.0501496703049728E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999917758838041	WITHOUT_CLASSIFICATION	8.224116196064465E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999884639223308	WITHOUT_CLASSIFICATION	1.153607766912456E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.999989560723904	WITHOUT_CLASSIFICATION	1.0439276095991497E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999747659480861	WITHOUT_CLASSIFICATION	2.5234051913869026E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999667807321699	WITHOUT_CLASSIFICATION	3.321926783002714E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999838246308849	WITHOUT_CLASSIFICATION	1.6175369115103808E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999817498631564	WITHOUT_CLASSIFICATION	1.825013684354557E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.999988461065618	WITHOUT_CLASSIFICATION	1.1538934382113273E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999912691095129	WITHOUT_CLASSIFICATION	8.730890487092538E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.999986891016165	WITHOUT_CLASSIFICATION	1.3108983834946107E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999736169330721	WITHOUT_CLASSIFICATION	2.638306692794076E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999871376992678	WITHOUT_CLASSIFICATION	1.2862300732244959E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999851282758181	WITHOUT_CLASSIFICATION	1.4871724181913848E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999839906864254	WITHOUT_CLASSIFICATION	1.6009313574618185E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999999176518951	WITHOUT_CLASSIFICATION	8.23481049788468E-8	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999996801716754	WITHOUT_CLASSIFICATION	3.198283246336937E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999857814631488	WITHOUT_CLASSIFICATION	1.421853685127904E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999857814631488	WITHOUT_CLASSIFICATION	1.421853685127904E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999857814631488	WITHOUT_CLASSIFICATION	1.421853685127904E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999857814631488	WITHOUT_CLASSIFICATION	1.421853685127904E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999857814631488	WITHOUT_CLASSIFICATION	1.421853685127904E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999857814631488	WITHOUT_CLASSIFICATION	1.421853685127904E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999857814631488	WITHOUT_CLASSIFICATION	1.421853685127904E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9990874649658847	WITHOUT_CLASSIFICATION	9.125350341151952E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9990874649658847	WITHOUT_CLASSIFICATION	9.125350341151952E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9990874649658847	WITHOUT_CLASSIFICATION	9.125350341151952E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9990874649658847	WITHOUT_CLASSIFICATION	9.125350341151952E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999530454524886	WITHOUT_CLASSIFICATION	4.695454751132801E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999530454524886	WITHOUT_CLASSIFICATION	4.695454751132801E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9999962937732676	WITHOUT_CLASSIFICATION	3.7062267323971117E-6	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996610578751	WITHOUT_CLASSIFICATION	3.389421248611742E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996610578751	WITHOUT_CLASSIFICATION	3.389421248611742E-7	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999997624042798	WITHOUT_CLASSIFICATION	2.3759572010936796E-7	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999997608759721	WITHOUT_CLASSIFICATION	2.3912402797259064E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999992461241467	WITHOUT_CLASSIFICATION	7.538758532059413E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999992461241467	WITHOUT_CLASSIFICATION	7.538758532059413E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999992461241467	WITHOUT_CLASSIFICATION	7.538758532059413E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999992461241467	WITHOUT_CLASSIFICATION	7.538758532059413E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999992461241467	WITHOUT_CLASSIFICATION	7.538758532059413E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999992461241467	WITHOUT_CLASSIFICATION	7.538758532059413E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999992461241467	WITHOUT_CLASSIFICATION	7.538758532059413E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997487509514	WITHOUT_CLASSIFICATION	2.5124904860078773E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998083388714	WITHOUT_CLASSIFICATION	1.9166112860610242E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999778993610794	WITHOUT_CLASSIFICATION	2.2100638920575428E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999778993610794	WITHOUT_CLASSIFICATION	2.2100638920575428E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.999999868816582	WITHOUT_CLASSIFICATION	1.311834181229752E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999994709144775	WITHOUT_CLASSIFICATION	5.290855224723175E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999994709144775	WITHOUT_CLASSIFICATION	5.290855224723175E-7	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999999970983018	WITHOUT_CLASSIFICATION	2.9016981154870535E-9	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9691164598061422	WITHOUT_CLASSIFICATION	0.03088354019385781	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999966845076699	WITHOUT_CLASSIFICATION	3.315492330037359E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9982552353691735	WITHOUT_CLASSIFICATION	0.0017447646308264946	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999998425043244	WITHOUT_CLASSIFICATION	1.5749567561895983E-7	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999993509009206	WITHOUT_CLASSIFICATION	6.490990793753295E-7	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999990586740332	WITHOUT_CLASSIFICATION	9.413259668126475E-7	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999984873118289	WITHOUT_CLASSIFICATION	1.5126881709694267E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999907007396	WITHOUT_CLASSIFICATION	9.29926031600589E-9	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.99987979253273	WITHOUT_CLASSIFICATION	1.2020746726993833E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999877639992145	WITHOUT_CLASSIFICATION	1.2236000785473541E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999967221654151	WITHOUT_CLASSIFICATION	3.277834584837041E-6	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999998708851204	WITHOUT_CLASSIFICATION	1.2911487969144648E-7	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999941793681087	WITHOUT_CLASSIFICATION	5.820631891235984E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999985848030519	WITHOUT_CLASSIFICATION	1.415196948062967E-6	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999988850340822	WITHOUT_CLASSIFICATION	1.1149659178332873E-6	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999999971673188	WITHOUT_CLASSIFICATION	2.8326812395210487E-9	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9998932243058886	WITHOUT_CLASSIFICATION	1.067756941115527E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999970723826384	WITHOUT_CLASSIFICATION	2.9276173615073654E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999970723826384	WITHOUT_CLASSIFICATION	2.9276173615073654E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999935676611356	WITHOUT_CLASSIFICATION	6.432338864412488E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999831567873	WITHOUT_CLASSIFICATION	1.6843212670197246E-8	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.999990040740171	WITHOUT_CLASSIFICATION	9.959259829028346E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999905372168502	WITHOUT_CLASSIFICATION	9.46278314981369E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999650135830928	WITHOUT_CLASSIFICATION	3.498641690724797E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999650135830928	WITHOUT_CLASSIFICATION	3.498641690724797E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999650135830928	WITHOUT_CLASSIFICATION	3.498641690724797E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999995400423269	WITHOUT_CLASSIFICATION	4.599576730690782E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9995921992648623	WITHOUT_CLASSIFICATION	4.078007351377763E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.999999348446144	WITHOUT_CLASSIFICATION	6.515538560553158E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999932119592004	WITHOUT_CLASSIFICATION	6.78804079961972E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999993137249901	WITHOUT_CLASSIFICATION	6.862750099238565E-7	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999999498403679	WITHOUT_CLASSIFICATION	5.0159632100347076E-8	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9995581051857628	WITHOUT_CLASSIFICATION	4.418948142371209E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999926007541439	WITHOUT_CLASSIFICATION	7.399245856154483E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999996778931575	WITHOUT_CLASSIFICATION	3.2210684252536006E-7	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999998246215199	WITHOUT_CLASSIFICATION	1.753784801074677E-7	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999996509916802	WITHOUT_CLASSIFICATION	3.4900831978575267E-7	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999982580143418	WITHOUT_CLASSIFICATION	1.741985658113223E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.7523700736219281	WITHOUT_CLASSIFICATION	0.24762992637807188	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9998438102230224	WITHOUT_CLASSIFICATION	1.5618977697750072E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.99999999977694	WITHOUT_CLASSIFICATION	2.2305995109582203E-10	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.999999881577328	WITHOUT_CLASSIFICATION	1.1842267202628267E-7	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999963205928966	WITHOUT_CLASSIFICATION	3.6794071034921493E-6	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999868429213694	WITHOUT_CLASSIFICATION	1.3157078630546764E-5	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999950894923921	WITHOUT_CLASSIFICATION	4.910507607870477E-6	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.539663293134564	WITHOUT_CLASSIFICATION	0.46033670686543615	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9170989579668839	DEFECT	0.08290104203311617	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9988521919651984	WITHOUT_CLASSIFICATION	0.001147808034801702	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9022866836457463	DEFECT	0.09771331635425376	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9985789776320814	DEFECT	0.0014210223679186936	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.5857509012027358	WITHOUT_CLASSIFICATION	0.4142490987972644	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.6787204859964425	WITHOUT_CLASSIFICATION	0.3212795140035576	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9780381700384448	WITHOUT_CLASSIFICATION	0.02196182996155525	DEFECT
// FIXME: not correct exception	DEFECT	0.9932791105617935	DEFECT	0.006720889438206553	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9917248762563887	WITHOUT_CLASSIFICATION	0.00827512374361122	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9996033183822595	WITHOUT_CLASSIFICATION	3.966816177404809E-4	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9828441939570522	WITHOUT_CLASSIFICATION	0.01715580604294766	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9996656404090853	WITHOUT_CLASSIFICATION	3.343595909146263E-4	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.652334122568794	DEFECT	0.3476658774312061	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.920494161527161	WITHOUT_CLASSIFICATION	0.079505838472839	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9706490582876893	WITHOUT_CLASSIFICATION	0.029350941712310605	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9706490582876893	WITHOUT_CLASSIFICATION	0.029350941712310605	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9968810907032091	WITHOUT_CLASSIFICATION	0.003118909296790983	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9738504402777763	WITHOUT_CLASSIFICATION	0.026149559722223693	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.5916108648525862	WITHOUT_CLASSIFICATION	0.40838913514741393	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998477400300647	WITHOUT_CLASSIFICATION	1.522599699353505E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998477400300647	WITHOUT_CLASSIFICATION	1.522599699353505E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9530957364419331	DEFECT	0.04690426355806697	WITHOUT_CLASSIFICATION
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9541698704851769	DEFECT	0.04583012951482316	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.7496925419167431	WITHOUT_CLASSIFICATION	0.250307458083257	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.900613385833337	WITHOUT_CLASSIFICATION	0.09938661416666296	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.6172910162133903	WITHOUT_CLASSIFICATION	0.3827089837866097	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.6300147411583118	WITHOUT_CLASSIFICATION	0.36998525884168826	DEFECT
// TODO: proper sign	DEFECT	0.9990702551052594	WITHOUT_CLASSIFICATION	9.297448947406406E-4	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9962286618794445	DEFECT	0.0037713381205555815	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.8270921452119995	DEFECT	0.1729078547880006	WITHOUT_CLASSIFICATION
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9976130705884435	DEFECT	0.0023869294115565496	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9536433970290541	DEFECT	0.04635660297094594	WITHOUT_CLASSIFICATION
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9856166146766728	DEFECT	0.014383385323327167	WITHOUT_CLASSIFICATION
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.8807010385893571	WITHOUT_CLASSIFICATION	0.1192989614106429	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9808208713967592	WITHOUT_CLASSIFICATION	0.019179128603240787	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.6659814300628534	DEFECT	0.33401856993714657	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9436270691617701	WITHOUT_CLASSIFICATION	0.05637293083823002	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.5259383606602722	WITHOUT_CLASSIFICATION	0.4740616393397279	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9986763598419085	DEFECT	0.0013236401580914677	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9927460384881477	WITHOUT_CLASSIFICATION	0.007253961511852312	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9999939031160038	WITHOUT_CLASSIFICATION	6.096883996160531E-6	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.533994991003725	WITHOUT_CLASSIFICATION	0.466005008996275	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.533994991003725	WITHOUT_CLASSIFICATION	0.466005008996275	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.6495514876163799	DEFECT	0.35044851238362007	WITHOUT_CLASSIFICATION
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9996618318154556	WITHOUT_CLASSIFICATION	3.3816818454432423E-4	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9999782879076542	DEFECT	2.1712092345723213E-5	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9822682442879981	WITHOUT_CLASSIFICATION	0.017731755712001973	DEFECT
// FIXME: This is wrong	DEFECT	0.9356712095411743	DEFECT	0.06432879045882568	WITHOUT_CLASSIFICATION
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9264857492121411	DEFECT	0.07351425078785884	WITHOUT_CLASSIFICATION
// XXX Wrong, but will have to do for now	DEFECT	0.9998789166873769	WITHOUT_CLASSIFICATION	1.2108331262304577E-4	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.943509135721766	DEFECT	0.056490864278234	WITHOUT_CLASSIFICATION
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9917775039394044	WITHOUT_CLASSIFICATION	0.008222496060595582	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9998645954439083	WITHOUT_CLASSIFICATION	1.3540455609178142E-4	DEFECT
// FIXME: Broken but behaving	DEFECT	0.999743490320795	DEFECT	2.5650967920496894E-4	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8191246828330393	WITHOUT_CLASSIFICATION	0.18087531716696073	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8191246828330393	WITHOUT_CLASSIFICATION	0.18087531716696073	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9998743569284356	DEFECT	1.2564307156437567E-4	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6389344646741583	WITHOUT_CLASSIFICATION	0.36106553532584174	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9917778634094765	DEFECT	0.008222136590523543	WITHOUT_CLASSIFICATION
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9996660118820784	WITHOUT_CLASSIFICATION	3.339881179216822E-4	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9953251002851022	DEFECT	0.004674899714897853	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9911318171886487	DEFECT	0.00886818281135123	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.995784048136445	WITHOUT_CLASSIFICATION	0.004215951863554921	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9995976536983641	DEFECT	4.023463016358886E-4	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.6495514876163799	DEFECT	0.35044851238362007	WITHOUT_CLASSIFICATION
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9999702509916991	WITHOUT_CLASSIFICATION	2.9749008300828753E-5	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9718912517017085	DEFECT	0.028108748298291433	WITHOUT_CLASSIFICATION
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9990243094872794	WITHOUT_CLASSIFICATION	9.756905127207534E-4	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.900613385833337	WITHOUT_CLASSIFICATION	0.09938661416666296	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9109081707429781	WITHOUT_CLASSIFICATION	0.0890918292570219	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9762170943154219	DEFECT	0.02378290568457804	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9436270691617701	WITHOUT_CLASSIFICATION	0.05637293083823002	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9987228143445575	WITHOUT_CLASSIFICATION	0.0012771856554425294	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// FIXME: Broken but behaving	DEFECT	0.999743490320795	DEFECT	2.5650967920496894E-4	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.9411944168820133	DEFECT	0.05880558311798674	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// TODO: don't require pop	DEFECT	0.850815456667941	WITHOUT_CLASSIFICATION	0.14918454333205886	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.943509135721766	DEFECT	0.056490864278234	WITHOUT_CLASSIFICATION
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.7675920498577053	WITHOUT_CLASSIFICATION	0.23240795014229468	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8191246828330393	WITHOUT_CLASSIFICATION	0.18087531716696073	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8191246828330393	WITHOUT_CLASSIFICATION	0.18087531716696073	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6389344646741583	WITHOUT_CLASSIFICATION	0.36106553532584174	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6389344646741583	WITHOUT_CLASSIFICATION	0.36106553532584174	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6389344646741583	WITHOUT_CLASSIFICATION	0.36106553532584174	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6389344646741583	WITHOUT_CLASSIFICATION	0.36106553532584174	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6389344646741583	WITHOUT_CLASSIFICATION	0.36106553532584174	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6389344646741583	WITHOUT_CLASSIFICATION	0.36106553532584174	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9993096234780098	WITHOUT_CLASSIFICATION	6.903765219902203E-4	DEFECT
