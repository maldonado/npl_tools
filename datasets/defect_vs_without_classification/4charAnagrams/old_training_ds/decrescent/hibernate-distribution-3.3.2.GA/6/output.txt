//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999904907618	WITHOUT_CLASSIFICATION	9.509238200858288E-9	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999976362622934	WITHOUT_CLASSIFICATION	2.3637377065498664E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999976362622934	WITHOUT_CLASSIFICATION	2.3637377065498664E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999976362622934	WITHOUT_CLASSIFICATION	2.3637377065498664E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999976362622934	WITHOUT_CLASSIFICATION	2.3637377065498664E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999976362622934	WITHOUT_CLASSIFICATION	2.3637377065498664E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999976362622934	WITHOUT_CLASSIFICATION	2.3637377065498664E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999976362622934	WITHOUT_CLASSIFICATION	2.3637377065498664E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999978190655744	WITHOUT_CLASSIFICATION	2.180934425562283E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999978190655744	WITHOUT_CLASSIFICATION	2.180934425562283E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999995238629076	WITHOUT_CLASSIFICATION	4.761370923961164E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999997646651169	WITHOUT_CLASSIFICATION	2.3533488306988346E-7	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999999545940472	WITHOUT_CLASSIFICATION	4.5405952766085384E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999910735911436	WITHOUT_CLASSIFICATION	8.926408856453021E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999910735911436	WITHOUT_CLASSIFICATION	8.926408856453021E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999872144243	WITHOUT_CLASSIFICATION	1.2785575653001387E-8	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992454126302	WITHOUT_CLASSIFICATION	7.545873698198013E-7	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999996728627581	WITHOUT_CLASSIFICATION	3.271372418663172E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999962326696801	WITHOUT_CLASSIFICATION	3.7673303200358077E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999919842391591	WITHOUT_CLASSIFICATION	8.015760840773248E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999919842391591	WITHOUT_CLASSIFICATION	8.015760840773248E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999220333112481	WITHOUT_CLASSIFICATION	7.796668875185288E-5	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999796178786	WITHOUT_CLASSIFICATION	2.0382121477692965E-8	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9996773883823787	WITHOUT_CLASSIFICATION	3.2261161762117804E-4	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999926563724985	WITHOUT_CLASSIFICATION	7.3436275015891275E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999509940425	WITHOUT_CLASSIFICATION	4.900595761012309E-8	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999990207972673	WITHOUT_CLASSIFICATION	9.792027326917367E-7	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999765283490561	WITHOUT_CLASSIFICATION	2.3471650943845968E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999993414530163	WITHOUT_CLASSIFICATION	6.585469837947259E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999981341419282	WITHOUT_CLASSIFICATION	1.8658580719104813E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9935288677646075	WITHOUT_CLASSIFICATION	0.006471132235392523	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999996548776381	WITHOUT_CLASSIFICATION	3.45122361917476E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999993319986625	WITHOUT_CLASSIFICATION	6.680013375367584E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999987299521761	WITHOUT_CLASSIFICATION	1.270047823885168E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999993337107688	WITHOUT_CLASSIFICATION	6.662892311904974E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999993337107688	WITHOUT_CLASSIFICATION	6.662892311904974E-7	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999951851678657	WITHOUT_CLASSIFICATION	4.814832134365492E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999918819174534	WITHOUT_CLASSIFICATION	8.118082546631517E-6	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999515014844	WITHOUT_CLASSIFICATION	4.849851573146556E-8	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999986224957281	WITHOUT_CLASSIFICATION	1.3775042718582636E-6	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999975158679	WITHOUT_CLASSIFICATION	2.4841320909816713E-9	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5213658845087823	WITHOUT_CLASSIFICATION	0.47863411549121787	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5213658845087823	WITHOUT_CLASSIFICATION	0.47863411549121787	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999999304550614	WITHOUT_CLASSIFICATION	6.954493859975247E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999979062228173	WITHOUT_CLASSIFICATION	2.0937771827045764E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999936636053	WITHOUT_CLASSIFICATION	6.336394695518186E-9	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999986865346234	WITHOUT_CLASSIFICATION	1.3134653765977492E-6	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999954283378689	WITHOUT_CLASSIFICATION	4.57166213097865E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999020409805	WITHOUT_CLASSIFICATION	9.795901945123126E-8	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998392892138	WITHOUT_CLASSIFICATION	1.607107861969747E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999984891713	WITHOUT_CLASSIFICATION	1.5108286999997981E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999329036248581	WITHOUT_CLASSIFICATION	6.709637514183088E-5	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9614450110678775	WITHOUT_CLASSIFICATION	0.03855498893212248	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999835635171475	WITHOUT_CLASSIFICATION	1.64364828525135E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999329036248581	WITHOUT_CLASSIFICATION	6.709637514183088E-5	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999835635171475	WITHOUT_CLASSIFICATION	1.64364828525135E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999945823466033	WITHOUT_CLASSIFICATION	5.417653396633424E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999999312649269	WITHOUT_CLASSIFICATION	6.873507298227139E-8	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999986506016522	WITHOUT_CLASSIFICATION	1.3493983477625304E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999974409219886	WITHOUT_CLASSIFICATION	2.5590780113224296E-6	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999825350854	WITHOUT_CLASSIFICATION	1.7464914586120797E-8	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999945479304	WITHOUT_CLASSIFICATION	5.4520696550639266E-9	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999862122543446	WITHOUT_CLASSIFICATION	1.378774565544906E-5	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9998997035737254	WITHOUT_CLASSIFICATION	1.0029642627460431E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999994724357428	WITHOUT_CLASSIFICATION	5.275642571389775E-7	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999999364948781	WITHOUT_CLASSIFICATION	6.35051219296928E-8	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999935370949732	WITHOUT_CLASSIFICATION	6.462905026855745E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999931478177904	WITHOUT_CLASSIFICATION	6.852182209673516E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999027082155	WITHOUT_CLASSIFICATION	9.729178459708845E-8	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999991785271621	WITHOUT_CLASSIFICATION	8.214728378389452E-7	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999997220490914	WITHOUT_CLASSIFICATION	2.7795090863571616E-7	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999972982563619	WITHOUT_CLASSIFICATION	2.7017436380916214E-6	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.999999407622593	WITHOUT_CLASSIFICATION	5.923774070300773E-7	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999960927797743	WITHOUT_CLASSIFICATION	3.907220225729478E-6	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997427671359	WITHOUT_CLASSIFICATION	2.57232864133259E-7	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999856019715	WITHOUT_CLASSIFICATION	1.4398028504705427E-7	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999998696702548	WITHOUT_CLASSIFICATION	1.3032974514558488E-7	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999999634522	WITHOUT_CLASSIFICATION	3.6547816316255794E-11	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999903783104	WITHOUT_CLASSIFICATION	9.621689516306797E-9	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999861918393868	WITHOUT_CLASSIFICATION	1.3808160613148778E-5	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999319245861248	WITHOUT_CLASSIFICATION	6.807541387513044E-5	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999996503734144	WITHOUT_CLASSIFICATION	3.496265855536216E-7	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999988732884	WITHOUT_CLASSIFICATION	1.1267116097595536E-9	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999657668426	WITHOUT_CLASSIFICATION	3.4233157431133384E-8	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999604858062	WITHOUT_CLASSIFICATION	3.951419391307382E-8	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999959897868	WITHOUT_CLASSIFICATION	4.010213108609018E-9	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999884189025	WITHOUT_CLASSIFICATION	1.1581097542639418E-8	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999983767021	WITHOUT_CLASSIFICATION	1.6232978833538925E-9	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999745566269658	WITHOUT_CLASSIFICATION	2.544337303418682E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999977631120824	WITHOUT_CLASSIFICATION	2.2368879175937098E-6	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999957333336722	WITHOUT_CLASSIFICATION	4.266666327742132E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999208304968	WITHOUT_CLASSIFICATION	7.916950322775008E-8	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999977631120824	WITHOUT_CLASSIFICATION	2.2368879175937098E-6	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998275929609	WITHOUT_CLASSIFICATION	1.724070391349108E-7	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999969549223039	WITHOUT_CLASSIFICATION	3.0450776960626345E-6	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999973182464077	WITHOUT_CLASSIFICATION	2.6817535922038746E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999995224579872	WITHOUT_CLASSIFICATION	4.775420129115862E-7	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999466465369	WITHOUT_CLASSIFICATION	5.3353463036199224E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999964901957962	WITHOUT_CLASSIFICATION	3.5098042039128575E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999964901957962	WITHOUT_CLASSIFICATION	3.5098042039128575E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999850144856014	WITHOUT_CLASSIFICATION	1.49855143987181E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999999876260619	WITHOUT_CLASSIFICATION	1.2373938100182337E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.999983225005261	WITHOUT_CLASSIFICATION	1.677499473896473E-5	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999986014954	WITHOUT_CLASSIFICATION	1.3985046609129E-9	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999989185617685	WITHOUT_CLASSIFICATION	1.0814382315541641E-6	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999932474739	WITHOUT_CLASSIFICATION	6.752526143702566E-9	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999997598954766	WITHOUT_CLASSIFICATION	2.4010452343905475E-7	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999902742989173	WITHOUT_CLASSIFICATION	9.725701082688995E-6	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999829284522	WITHOUT_CLASSIFICATION	1.7071547860744687E-8	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999496209245	WITHOUT_CLASSIFICATION	5.0379075491232905E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999923930951	WITHOUT_CLASSIFICATION	7.606904874998336E-9	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999923930951	WITHOUT_CLASSIFICATION	7.606904874998336E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999718752375509	WITHOUT_CLASSIFICATION	2.8124762449064666E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999969260053958	WITHOUT_CLASSIFICATION	3.073994604090686E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999998987236172	WITHOUT_CLASSIFICATION	1.0127638283718117E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999923930951	WITHOUT_CLASSIFICATION	7.606904874998336E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999718752375509	WITHOUT_CLASSIFICATION	2.8124762449064666E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999718752375509	WITHOUT_CLASSIFICATION	2.8124762449064666E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999909905684	WITHOUT_CLASSIFICATION	9.009431653332707E-9	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999974084015917	WITHOUT_CLASSIFICATION	2.591598408373561E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999986228827944	WITHOUT_CLASSIFICATION	1.3771172055695148E-6	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999829177791	WITHOUT_CLASSIFICATION	1.7082220846581705E-8	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999962705925889	WITHOUT_CLASSIFICATION	3.7294074110135095E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999962705925889	WITHOUT_CLASSIFICATION	3.7294074110135095E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999046566116	WITHOUT_CLASSIFICATION	9.534338830439742E-8	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999974197966309	WITHOUT_CLASSIFICATION	2.5802033691220906E-6	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.999998328957091	WITHOUT_CLASSIFICATION	1.6710429090202257E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999988407593042	WITHOUT_CLASSIFICATION	1.1592406957766568E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999988407593042	WITHOUT_CLASSIFICATION	1.1592406957766568E-6	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999995532735971	WITHOUT_CLASSIFICATION	4.467264029020142E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999225552046268	WITHOUT_CLASSIFICATION	7.744479537319447E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999145717469058	WITHOUT_CLASSIFICATION	8.54282530943128E-5	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999961343956	WITHOUT_CLASSIFICATION	3.865604451123114E-9	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999940795855	WITHOUT_CLASSIFICATION	5.920414432592072E-9	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999998591804491	WITHOUT_CLASSIFICATION	1.4081955091946495E-7	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999630193859057	WITHOUT_CLASSIFICATION	3.698061409429686E-5	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999998088330891	WITHOUT_CLASSIFICATION	1.9116691093337017E-7	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.999999164510402	WITHOUT_CLASSIFICATION	8.354895980225967E-7	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999145717469058	WITHOUT_CLASSIFICATION	8.54282530943128E-5	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999223575959687	WITHOUT_CLASSIFICATION	7.764240403126846E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999955661434405	WITHOUT_CLASSIFICATION	4.433856559462159E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999955661434405	WITHOUT_CLASSIFICATION	4.433856559462159E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999616408267	WITHOUT_CLASSIFICATION	3.8359173237973654E-8	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999997794234371	WITHOUT_CLASSIFICATION	2.2057656279603527E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999644933033793	WITHOUT_CLASSIFICATION	3.5506696620720095E-5	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999163215499396	WITHOUT_CLASSIFICATION	8.367845006040882E-5	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999999244582014	WITHOUT_CLASSIFICATION	7.554179857419676E-8	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999682254885238	WITHOUT_CLASSIFICATION	3.177451147609556E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9993266134557798	WITHOUT_CLASSIFICATION	6.733865442202867E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999995952608	WITHOUT_CLASSIFICATION	4.047392467177156E-10	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997328333745	WITHOUT_CLASSIFICATION	2.6716662550015047E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997328333745	WITHOUT_CLASSIFICATION	2.6716662550015047E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999991439148851	WITHOUT_CLASSIFICATION	8.560851150613275E-7	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999904907618	WITHOUT_CLASSIFICATION	9.509238200858288E-9	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999992069780448	WITHOUT_CLASSIFICATION	7.930219551482391E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999976362622934	WITHOUT_CLASSIFICATION	2.3637377065498664E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999998281086829	WITHOUT_CLASSIFICATION	1.7189131701341457E-7	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999978190655744	WITHOUT_CLASSIFICATION	2.180934425562283E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999983547527099	WITHOUT_CLASSIFICATION	1.6452472901018834E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999999328472616	WITHOUT_CLASSIFICATION	6.715273841899215E-8	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999249956791	WITHOUT_CLASSIFICATION	7.500432082293451E-8	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999988194331105	WITHOUT_CLASSIFICATION	1.1805668894582336E-6	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999410825291492	WITHOUT_CLASSIFICATION	5.8917470850933315E-5	DEFECT
// new	WITHOUT_CLASSIFICATION	0.999995546815433	WITHOUT_CLASSIFICATION	4.4531845669299635E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999864442577749	WITHOUT_CLASSIFICATION	1.3555742225012869E-5	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999991576081798	WITHOUT_CLASSIFICATION	8.423918201655189E-7	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999997646651169	WITHOUT_CLASSIFICATION	2.3533488306988346E-7	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999995763449314	WITHOUT_CLASSIFICATION	4.236550685934448E-7	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999995763449314	WITHOUT_CLASSIFICATION	4.236550685934448E-7	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999997727758104	WITHOUT_CLASSIFICATION	2.272241895013309E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999881860936312	WITHOUT_CLASSIFICATION	1.1813906368898648E-5	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999989225607645	WITHOUT_CLASSIFICATION	1.0774392354942132E-6	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999997901224892	WITHOUT_CLASSIFICATION	2.098775108952694E-7	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999991606894878	WITHOUT_CLASSIFICATION	8.393105121603896E-7	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.99999996967174	WITHOUT_CLASSIFICATION	3.0328260009316524E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999910735911436	WITHOUT_CLASSIFICATION	8.926408856453021E-6	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999990887565501	WITHOUT_CLASSIFICATION	9.112434498953191E-7	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999987142537786	WITHOUT_CLASSIFICATION	1.285746221327772E-6	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999988223195925	WITHOUT_CLASSIFICATION	1.1776804075570533E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999994305062078	WITHOUT_CLASSIFICATION	5.694937922517163E-7	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999986389380076	WITHOUT_CLASSIFICATION	1.3610619924106549E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999969400122445	WITHOUT_CLASSIFICATION	3.0599877555634972E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999459475144	WITHOUT_CLASSIFICATION	5.4052485547922365E-8	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999947417208	WITHOUT_CLASSIFICATION	5.2582791931534044E-8	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999997578410129	WITHOUT_CLASSIFICATION	2.4215898706970464E-7	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999802712687015	WITHOUT_CLASSIFICATION	1.972873129843349E-5	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999967081099337	WITHOUT_CLASSIFICATION	3.2918900664376873E-6	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999998496573446	WITHOUT_CLASSIFICATION	1.5034265548405705E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999976362622934	WITHOUT_CLASSIFICATION	2.3637377065498664E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999976362622934	WITHOUT_CLASSIFICATION	2.3637377065498664E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999978190655744	WITHOUT_CLASSIFICATION	2.180934425562283E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999978190655744	WITHOUT_CLASSIFICATION	2.180934425562283E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999864442577749	WITHOUT_CLASSIFICATION	1.3555742225012869E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999995763449314	WITHOUT_CLASSIFICATION	4.236550685934448E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999459475144	WITHOUT_CLASSIFICATION	5.4052485547922365E-8	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999872144243	WITHOUT_CLASSIFICATION	1.2785575653001387E-8	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999992776635156	WITHOUT_CLASSIFICATION	7.223364843227817E-7	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9998695872732486	WITHOUT_CLASSIFICATION	1.3041272675151303E-4	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999827529309835	WITHOUT_CLASSIFICATION	1.7247069016541267E-5	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999973893827097	WITHOUT_CLASSIFICATION	2.6106172902752208E-6	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999965724498419	WITHOUT_CLASSIFICATION	3.427550158146848E-6	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999963532699678	WITHOUT_CLASSIFICATION	3.6467300321319163E-6	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998572477910384	WITHOUT_CLASSIFICATION	1.427522089616579E-4	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999684354744041	WITHOUT_CLASSIFICATION	3.156452559585737E-5	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999999550799797	WITHOUT_CLASSIFICATION	4.49200201239077E-8	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999998968454345	WITHOUT_CLASSIFICATION	1.0315456549567491E-6	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999998968454345	WITHOUT_CLASSIFICATION	1.0315456549567491E-6	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999988697671	WITHOUT_CLASSIFICATION	1.1302328636930275E-9	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999987522919207	WITHOUT_CLASSIFICATION	1.2477080793695451E-6	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999925937491728	WITHOUT_CLASSIFICATION	7.406250827159239E-6	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999751145672784	WITHOUT_CLASSIFICATION	2.488543272163189E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999994973248	WITHOUT_CLASSIFICATION	5.026753157586883E-10	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999300368766	WITHOUT_CLASSIFICATION	6.996312332180986E-8	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999999106799361	WITHOUT_CLASSIFICATION	8.932006385656805E-8	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992454126302	WITHOUT_CLASSIFICATION	7.545873698198013E-7	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999932644401147	WITHOUT_CLASSIFICATION	6.7355598852463E-6	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999995028964516	WITHOUT_CLASSIFICATION	4.971035484566586E-7	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999995028964516	WITHOUT_CLASSIFICATION	4.971035484566586E-7	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999506897596	WITHOUT_CLASSIFICATION	4.9310240433303555E-8	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999994306239849	WITHOUT_CLASSIFICATION	5.693760150567873E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999999466068404	WITHOUT_CLASSIFICATION	5.339315960182418E-7	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999971037762077	WITHOUT_CLASSIFICATION	2.8962237922284967E-6	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999957204300535	WITHOUT_CLASSIFICATION	4.279569946521528E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999978190655744	WITHOUT_CLASSIFICATION	2.180934425562283E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999864442577749	WITHOUT_CLASSIFICATION	1.3555742225012869E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999997646651169	WITHOUT_CLASSIFICATION	2.3533488306988346E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999459475144	WITHOUT_CLASSIFICATION	5.4052485547922365E-8	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999459475144	WITHOUT_CLASSIFICATION	5.4052485547922365E-8	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995685727209	WITHOUT_CLASSIFICATION	4.3142727908409764E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995685727209	WITHOUT_CLASSIFICATION	4.3142727908409764E-7	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999998471961151	WITHOUT_CLASSIFICATION	1.5280388493061617E-7	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999972795969173	WITHOUT_CLASSIFICATION	2.7204030826374996E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999972795969173	WITHOUT_CLASSIFICATION	2.7204030826374996E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999997001812546	WITHOUT_CLASSIFICATION	2.998187453823852E-7	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999984069682495	WITHOUT_CLASSIFICATION	1.5930317505965007E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999997873332235	WITHOUT_CLASSIFICATION	2.1266677657698806E-7	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999983148327941	WITHOUT_CLASSIFICATION	1.6851672058916804E-6	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999729105943104	WITHOUT_CLASSIFICATION	2.70894056896913E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999962326696801	WITHOUT_CLASSIFICATION	3.7673303200358077E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999962326696801	WITHOUT_CLASSIFICATION	3.7673303200358077E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999844624524644	WITHOUT_CLASSIFICATION	1.553754753563662E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999917646305897	WITHOUT_CLASSIFICATION	8.235369410398675E-6	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999987431634425	WITHOUT_CLASSIFICATION	1.2568365575019084E-6	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.999996447231621	WITHOUT_CLASSIFICATION	3.55276837909222E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999998637820224	WITHOUT_CLASSIFICATION	1.362179775534584E-7	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999987268817464	WITHOUT_CLASSIFICATION	1.2731182536516495E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999919842391591	WITHOUT_CLASSIFICATION	8.015760840773248E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999869942016922	WITHOUT_CLASSIFICATION	1.3005798307675331E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999869942016922	WITHOUT_CLASSIFICATION	1.3005798307675331E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999220333112481	WITHOUT_CLASSIFICATION	7.796668875185288E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999220333112481	WITHOUT_CLASSIFICATION	7.796668875185288E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999941098268353	WITHOUT_CLASSIFICATION	5.890173164658664E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999941098268353	WITHOUT_CLASSIFICATION	5.890173164658664E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999649912082	WITHOUT_CLASSIFICATION	3.5008791740762164E-8	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999649912082	WITHOUT_CLASSIFICATION	3.5008791740762164E-8	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999962326696801	WITHOUT_CLASSIFICATION	3.7673303200358077E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999919842391591	WITHOUT_CLASSIFICATION	8.015760840773248E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999869942016922	WITHOUT_CLASSIFICATION	1.3005798307675331E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999869942016922	WITHOUT_CLASSIFICATION	1.3005798307675331E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999220333112481	WITHOUT_CLASSIFICATION	7.796668875185288E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999941098268353	WITHOUT_CLASSIFICATION	5.890173164658664E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999941098268353	WITHOUT_CLASSIFICATION	5.890173164658664E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999649912082	WITHOUT_CLASSIFICATION	3.5008791740762164E-8	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999992394687615	WITHOUT_CLASSIFICATION	7.605312386187397E-7	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999983858981794	WITHOUT_CLASSIFICATION	1.61410182071117E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999798935499973	WITHOUT_CLASSIFICATION	2.0106450002675934E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999979178837493	WITHOUT_CLASSIFICATION	2.082116250694052E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999999777005066	WITHOUT_CLASSIFICATION	2.229949338194518E-8	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999945415561178	WITHOUT_CLASSIFICATION	5.45844388220556E-6	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998486735112301	WITHOUT_CLASSIFICATION	1.5132648876996338E-4	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9863143892797023	WITHOUT_CLASSIFICATION	0.013685610720297763	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9992542693934142	WITHOUT_CLASSIFICATION	7.457306065858106E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999744423241	WITHOUT_CLASSIFICATION	2.555767591951691E-8	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999968704393289	WITHOUT_CLASSIFICATION	3.129560670982706E-6	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999996719331216	WITHOUT_CLASSIFICATION	3.28066878495556E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999850144856014	WITHOUT_CLASSIFICATION	1.49855143987181E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999945415561178	WITHOUT_CLASSIFICATION	5.45844388220556E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998648999877932	WITHOUT_CLASSIFICATION	1.3510001220685172E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998648999877932	WITHOUT_CLASSIFICATION	1.3510001220685172E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999648359464408	WITHOUT_CLASSIFICATION	3.516405355909708E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998739418823	WITHOUT_CLASSIFICATION	1.2605811772799097E-7	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998739418823	WITHOUT_CLASSIFICATION	1.2605811772799097E-7	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999925866010753	WITHOUT_CLASSIFICATION	7.413398924768272E-6	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999981201721463	WITHOUT_CLASSIFICATION	1.879827853698038E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999832968638723	WITHOUT_CLASSIFICATION	1.6703136127658962E-5	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999995123904164	WITHOUT_CLASSIFICATION	4.87609583583262E-7	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999995123904164	WITHOUT_CLASSIFICATION	4.87609583583262E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999509940425	WITHOUT_CLASSIFICATION	4.900595761012309E-8	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999989493121542	WITHOUT_CLASSIFICATION	1.0506878457573252E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999989493121542	WITHOUT_CLASSIFICATION	1.0506878457573252E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999994033767727	WITHOUT_CLASSIFICATION	5.966232273575299E-7	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999996638014127	WITHOUT_CLASSIFICATION	3.36198587342753E-7	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999985256526681	WITHOUT_CLASSIFICATION	1.4743473319260377E-6	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999998488644592	WITHOUT_CLASSIFICATION	1.5113554080374737E-6	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999984228910253	WITHOUT_CLASSIFICATION	1.577108974685002E-6	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999926761414017	WITHOUT_CLASSIFICATION	7.323858598213476E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999990207972673	WITHOUT_CLASSIFICATION	9.792027326917367E-7	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999971948423616	WITHOUT_CLASSIFICATION	2.8051576383751273E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9955209219960259	WITHOUT_CLASSIFICATION	0.004479078003974156	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999899509368054	WITHOUT_CLASSIFICATION	1.0049063194511102E-5	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999987539453227	WITHOUT_CLASSIFICATION	1.2460546773264501E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999981341419282	WITHOUT_CLASSIFICATION	1.8658580719104813E-6	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999277961633	WITHOUT_CLASSIFICATION	7.220383671588149E-8	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999997374945379	WITHOUT_CLASSIFICATION	2.62505462155759E-7	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.999999745715355	WITHOUT_CLASSIFICATION	2.5428464501648293E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999981341419282	WITHOUT_CLASSIFICATION	1.8658580719104813E-6	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999995452968586	WITHOUT_CLASSIFICATION	4.547031413662035E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999987619023515	WITHOUT_CLASSIFICATION	1.2380976485872223E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999996530897122	WITHOUT_CLASSIFICATION	3.469102877656202E-7	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999847973252128	WITHOUT_CLASSIFICATION	1.5202674787211926E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999901328474813	WITHOUT_CLASSIFICATION	9.86715251878733E-6	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999990060834628	WITHOUT_CLASSIFICATION	9.939165372222556E-7	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999998502149224	WITHOUT_CLASSIFICATION	1.497850775983441E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999993319986625	WITHOUT_CLASSIFICATION	6.680013375367584E-7	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999994544578789	WITHOUT_CLASSIFICATION	5.455421211738645E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999987299521761	WITHOUT_CLASSIFICATION	1.270047823885168E-6	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999994809042347	WITHOUT_CLASSIFICATION	5.190957652825179E-7	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.999999954397935	WITHOUT_CLASSIFICATION	4.5602064926360105E-8	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.999995523680403	WITHOUT_CLASSIFICATION	4.476319597021457E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999990207972673	WITHOUT_CLASSIFICATION	9.792027326917367E-7	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999994544578789	WITHOUT_CLASSIFICATION	5.455421211738645E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999994809042347	WITHOUT_CLASSIFICATION	5.190957652825179E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.999995523680403	WITHOUT_CLASSIFICATION	4.476319597021457E-6	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998045260508	WITHOUT_CLASSIFICATION	1.9547394922874132E-7	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999902758561273	WITHOUT_CLASSIFICATION	9.72414387263762E-6	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999209748079	WITHOUT_CLASSIFICATION	7.902519203016324E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999993337107688	WITHOUT_CLASSIFICATION	6.662892311904974E-7	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999995669061084	WITHOUT_CLASSIFICATION	4.330938916040735E-7	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999856658921233	WITHOUT_CLASSIFICATION	1.433410787664695E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999913062584566	WITHOUT_CLASSIFICATION	8.693741543469417E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999981752106855	WITHOUT_CLASSIFICATION	1.8247893145457116E-6	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999976857182981	WITHOUT_CLASSIFICATION	2.314281701914377E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999981773773	WITHOUT_CLASSIFICATION	1.8226227479006488E-9	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999897818191	WITHOUT_CLASSIFICATION	1.0218180902775862E-7	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999964879259474	WITHOUT_CLASSIFICATION	3.512074052651941E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999986938825	WITHOUT_CLASSIFICATION	1.3061174593690652E-9	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999722782365	WITHOUT_CLASSIFICATION	2.772176349585089E-7	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999817225825044	WITHOUT_CLASSIFICATION	1.8277417495611373E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999996150199145	WITHOUT_CLASSIFICATION	3.8498008550254575E-7	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999918819174534	WITHOUT_CLASSIFICATION	8.118082546631517E-6	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999999219518514	WITHOUT_CLASSIFICATION	7.804814859897644E-7	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999958007396131	WITHOUT_CLASSIFICATION	4.199260386900381E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999994544578789	WITHOUT_CLASSIFICATION	5.455421211738645E-7	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998683328697	WITHOUT_CLASSIFICATION	1.3166713025516643E-7	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999967769713	WITHOUT_CLASSIFICATION	3.223028835263447E-9	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999998473584373	WITHOUT_CLASSIFICATION	1.5264156267344598E-7	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999999955466342	WITHOUT_CLASSIFICATION	4.4533657748682704E-9	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999999859958528	WITHOUT_CLASSIFICATION	1.4004147114125968E-8	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999791336236007	WITHOUT_CLASSIFICATION	2.086637639929288E-5	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999999990417381	WITHOUT_CLASSIFICATION	9.582619075068048E-9	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999963410535	WITHOUT_CLASSIFICATION	3.6589465255127004E-9	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999827123642546	WITHOUT_CLASSIFICATION	1.728763574539907E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999977466950101	WITHOUT_CLASSIFICATION	2.253304989964294E-6	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999991417560568	WITHOUT_CLASSIFICATION	8.58243943266109E-7	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999995718278449	WITHOUT_CLASSIFICATION	4.2817215505059226E-7	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999969731158125	WITHOUT_CLASSIFICATION	3.026884187602974E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999986224957281	WITHOUT_CLASSIFICATION	1.3775042718582636E-6	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999730311835	WITHOUT_CLASSIFICATION	2.696881656622752E-8	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999998864856832	WITHOUT_CLASSIFICATION	1.1351431679408314E-6	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999891208584197	WITHOUT_CLASSIFICATION	1.0879141580352983E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999969688823307	WITHOUT_CLASSIFICATION	3.0311176694181E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999989295671672	WITHOUT_CLASSIFICATION	1.0704328328976807E-6	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999984474953651	WITHOUT_CLASSIFICATION	1.5525046349095793E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999996037	WITHOUT_CLASSIFICATION	3.9629339353740596E-13	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999994026255087	WITHOUT_CLASSIFICATION	5.973744913026574E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999647963749	WITHOUT_CLASSIFICATION	3.520362509974829E-8	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999970773300834	WITHOUT_CLASSIFICATION	2.9226699167126153E-6	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999651908167827	WITHOUT_CLASSIFICATION	3.48091832173406E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999651908167827	WITHOUT_CLASSIFICATION	3.48091832173406E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999862992457089	WITHOUT_CLASSIFICATION	1.3700754291096706E-5	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999995946575526	WITHOUT_CLASSIFICATION	4.053424474275796E-7	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999995262460635	WITHOUT_CLASSIFICATION	4.737539365359297E-7	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999984476286099	WITHOUT_CLASSIFICATION	1.5523713901048209E-6	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999997176648728	WITHOUT_CLASSIFICATION	2.823351272243098E-7	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9989661192825815	WITHOUT_CLASSIFICATION	0.0010338807174184305	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999888427880255	WITHOUT_CLASSIFICATION	1.1157211974501073E-5	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999998716142364	WITHOUT_CLASSIFICATION	1.2838576350459374E-7	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999998158054283	WITHOUT_CLASSIFICATION	1.8419457169911936E-6	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999987404575957	WITHOUT_CLASSIFICATION	1.2595424042552272E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999950334231552	WITHOUT_CLASSIFICATION	4.966576844700502E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999636474848744	WITHOUT_CLASSIFICATION	3.63525151255507E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9989847624595923	WITHOUT_CLASSIFICATION	0.0010152375404075948	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999808264334378	WITHOUT_CLASSIFICATION	1.917356656222666E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992367782697	WITHOUT_CLASSIFICATION	7.63221730303014E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997639092139	WITHOUT_CLASSIFICATION	2.3609078610610403E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999819346783332	WITHOUT_CLASSIFICATION	1.80653216667861E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999997060226228	WITHOUT_CLASSIFICATION	2.9397737718866915E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9997804996825844	WITHOUT_CLASSIFICATION	2.1950031741566382E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999481132337826	WITHOUT_CLASSIFICATION	5.188676621742354E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999920919650137	WITHOUT_CLASSIFICATION	7.908034986326928E-6	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999920919650137	WITHOUT_CLASSIFICATION	7.908034986326928E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.999993913190324	WITHOUT_CLASSIFICATION	6.0868096759372525E-6	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.999993913190324	WITHOUT_CLASSIFICATION	6.0868096759372525E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999647963749	WITHOUT_CLASSIFICATION	3.520362509974829E-8	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999878903900391	WITHOUT_CLASSIFICATION	1.210960996082417E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999963100362259	WITHOUT_CLASSIFICATION	3.6899637740692283E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.99999965255082	WITHOUT_CLASSIFICATION	3.4744918000384505E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999991439148851	WITHOUT_CLASSIFICATION	8.560851150613275E-7	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999963100362259	WITHOUT_CLASSIFICATION	3.6899637740692283E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.99999965255082	WITHOUT_CLASSIFICATION	3.4744918000384505E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990887152608	WITHOUT_CLASSIFICATION	9.112847391335173E-7	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999994816520357	WITHOUT_CLASSIFICATION	5.183479644248856E-7	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999914070345598	WITHOUT_CLASSIFICATION	8.592965440193368E-6	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999999168628657	WITHOUT_CLASSIFICATION	8.313713438474576E-8	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996955622557712	WITHOUT_CLASSIFICATION	3.044377442287397E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999949019751136	WITHOUT_CLASSIFICATION	5.0980248862757355E-6	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999997767315242	WITHOUT_CLASSIFICATION	2.2326847578540422E-7	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999993832126235	WITHOUT_CLASSIFICATION	6.167873764366856E-7	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999767811797029	WITHOUT_CLASSIFICATION	2.321882029707362E-5	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999999911628	WITHOUT_CLASSIFICATION	8.837189321707936E-11	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999986274635683	WITHOUT_CLASSIFICATION	1.3725364317670875E-6	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999567873243	WITHOUT_CLASSIFICATION	4.32126755402989E-8	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999989130546	WITHOUT_CLASSIFICATION	1.0869455367543638E-9	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999924280066151	WITHOUT_CLASSIFICATION	7.571993384807091E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999991439148851	WITHOUT_CLASSIFICATION	8.560851150613275E-7	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999977507442009	WITHOUT_CLASSIFICATION	2.2492557991025873E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999891407245758	WITHOUT_CLASSIFICATION	1.0859275424275211E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999891407245758	WITHOUT_CLASSIFICATION	1.0859275424275211E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999849238660397	WITHOUT_CLASSIFICATION	1.5076133960419278E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990887152608	WITHOUT_CLASSIFICATION	9.112847391335173E-7	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9996419508588723	WITHOUT_CLASSIFICATION	3.5804914112761414E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9979867379646533	WITHOUT_CLASSIFICATION	0.002013262035346726	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9998460657083625	WITHOUT_CLASSIFICATION	1.5393429163748808E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999986520046843	WITHOUT_CLASSIFICATION	1.3479953157801613E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997144367237921	WITHOUT_CLASSIFICATION	2.855632762079135E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990887152608	WITHOUT_CLASSIFICATION	9.112847391335173E-7	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999986520046843	WITHOUT_CLASSIFICATION	1.3479953157801613E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997144367237921	WITHOUT_CLASSIFICATION	2.855632762079135E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999986721546643	WITHOUT_CLASSIFICATION	1.327845335779418E-6	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999998839499201	WITHOUT_CLASSIFICATION	1.160500798494513E-7	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9997392089089964	WITHOUT_CLASSIFICATION	2.6079109100357405E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990887152608	WITHOUT_CLASSIFICATION	9.112847391335173E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990887152608	WITHOUT_CLASSIFICATION	9.112847391335173E-7	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999988868283116	WITHOUT_CLASSIFICATION	1.1131716882853897E-6	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999993343919017	WITHOUT_CLASSIFICATION	6.656080984256894E-7	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999978019839015	WITHOUT_CLASSIFICATION	2.198016098432494E-6	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999991219214188	WITHOUT_CLASSIFICATION	8.78078581157278E-7	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999953834689828	WITHOUT_CLASSIFICATION	4.616531017291612E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999872433195	WITHOUT_CLASSIFICATION	1.2756680493493929E-8	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999998167009627	WITHOUT_CLASSIFICATION	1.832990372736556E-7	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999658611781	WITHOUT_CLASSIFICATION	3.4138821890090753E-8	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999993508544569	WITHOUT_CLASSIFICATION	6.491455430534831E-7	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999959292883585	WITHOUT_CLASSIFICATION	4.070711641580582E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999877152089492	WITHOUT_CLASSIFICATION	1.2284791050722801E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999999687575697	WITHOUT_CLASSIFICATION	3.1242430299342626E-7	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998393750733	WITHOUT_CLASSIFICATION	1.6062492671454346E-7	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999993253769768	WITHOUT_CLASSIFICATION	6.746230231820331E-7	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977936407736	WITHOUT_CLASSIFICATION	2.206359226433832E-6	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999986194839615	WITHOUT_CLASSIFICATION	1.3805160384856858E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999986865346234	WITHOUT_CLASSIFICATION	1.3134653765977492E-6	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999698816512014	WITHOUT_CLASSIFICATION	3.01183487985494E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9990487585067397	WITHOUT_CLASSIFICATION	9.512414932602988E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999818332947	WITHOUT_CLASSIFICATION	1.8166705232133828E-8	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999984396860376	WITHOUT_CLASSIFICATION	1.5603139623244146E-6	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999800792801627	WITHOUT_CLASSIFICATION	1.9920719837194066E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999800792801627	WITHOUT_CLASSIFICATION	1.9920719837194066E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999986865346234	WITHOUT_CLASSIFICATION	1.3134653765977492E-6	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998130120025277	WITHOUT_CLASSIFICATION	1.8698799747223974E-4	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999981482557148	WITHOUT_CLASSIFICATION	1.8517442852022552E-5	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998800160486377	WITHOUT_CLASSIFICATION	1.1998395136233572E-4	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999993914374988	WITHOUT_CLASSIFICATION	6.085625012164368E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999897033063609	WITHOUT_CLASSIFICATION	1.0296693639097004E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999996464571445	WITHOUT_CLASSIFICATION	3.5354285558835804E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9998180328985521	WITHOUT_CLASSIFICATION	1.8196710144792043E-4	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999999763483456	WITHOUT_CLASSIFICATION	2.3651654480901683E-8	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999155706	WITHOUT_CLASSIFICATION	8.442929332739447E-11	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999536914741	WITHOUT_CLASSIFICATION	4.630852594667586E-8	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9996721567448579	WITHOUT_CLASSIFICATION	3.2784325514210414E-4	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9992953888348769	WITHOUT_CLASSIFICATION	7.046111651230437E-4	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999783743496787	WITHOUT_CLASSIFICATION	2.1625650321271196E-5	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999998852076	WITHOUT_CLASSIFICATION	1.1479240125926557E-9	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982159363272	WITHOUT_CLASSIFICATION	1.7840636728797982E-6	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9998656323635537	WITHOUT_CLASSIFICATION	1.343676364462364E-4	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999998858894353	WITHOUT_CLASSIFICATION	1.1411056470197048E-6	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999962103677932	WITHOUT_CLASSIFICATION	3.7896322068066933E-6	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991161831538	WITHOUT_CLASSIFICATION	8.838168461150306E-7	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999959375688509	WITHOUT_CLASSIFICATION	4.062431149199445E-6	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999998265674258	WITHOUT_CLASSIFICATION	1.7343257410830974E-7	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999988771280659	WITHOUT_CLASSIFICATION	1.1228719341109392E-6	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998785324496462	WITHOUT_CLASSIFICATION	1.214675503538372E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961331041114	WITHOUT_CLASSIFICATION	3.86689588863864E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960247195895	WITHOUT_CLASSIFICATION	3.975280410478097E-6	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984677338236	WITHOUT_CLASSIFICATION	1.532266176294717E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980256225312	WITHOUT_CLASSIFICATION	1.9743774689412176E-6	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985639095892	WITHOUT_CLASSIFICATION	1.4360904108016716E-6	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997826212502	WITHOUT_CLASSIFICATION	2.1737874980415504E-6	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981034157343	WITHOUT_CLASSIFICATION	1.8965842657047822E-6	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999997123484609	WITHOUT_CLASSIFICATION	2.8765153916275493E-7	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999999801701711	WITHOUT_CLASSIFICATION	1.9829828889784934E-7	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991639815767	WITHOUT_CLASSIFICATION	8.360184232212187E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998981655239	WITHOUT_CLASSIFICATION	1.018344759836861E-7	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991702895717	WITHOUT_CLASSIFICATION	8.297104282335667E-7	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982240011837	WITHOUT_CLASSIFICATION	1.7759988162653392E-6	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969527678699	WITHOUT_CLASSIFICATION	3.04723213007339E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997556257919	WITHOUT_CLASSIFICATION	2.4437420810450605E-7	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995997660456	WITHOUT_CLASSIFICATION	4.002339544038117E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957478990318	WITHOUT_CLASSIFICATION	4.252100968214899E-6	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999762891378804	WITHOUT_CLASSIFICATION	2.3710862119669475E-5	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943302969235	WITHOUT_CLASSIFICATION	5.669703076362031E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9285094073714936	WITHOUT_CLASSIFICATION	0.07149059262850645	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999863720148617	WITHOUT_CLASSIFICATION	1.362798513830479E-5	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999999816938	WITHOUT_CLASSIFICATION	1.830625685187722E-11	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998013292792	WITHOUT_CLASSIFICATION	1.986707207341159E-7	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999993295570339	WITHOUT_CLASSIFICATION	6.704429659971551E-7	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999988104516165	WITHOUT_CLASSIFICATION	1.189548383470067E-6	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999988088454823	WITHOUT_CLASSIFICATION	1.191154517695549E-6	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999997909952518	WITHOUT_CLASSIFICATION	2.090047480546807E-7	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999984945544238	WITHOUT_CLASSIFICATION	1.5054455762047691E-6	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999988972460063	WITHOUT_CLASSIFICATION	1.1027539936741767E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999997120217622	WITHOUT_CLASSIFICATION	2.8797823785040003E-7	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999984701548097	WITHOUT_CLASSIFICATION	1.5298451903059836E-6	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999990248412741	WITHOUT_CLASSIFICATION	9.751587258344984E-7	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.995255639264137	WITHOUT_CLASSIFICATION	0.004744360735863086	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999756711633283	WITHOUT_CLASSIFICATION	2.4328836671589254E-5	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.999995077258805	WITHOUT_CLASSIFICATION	4.922741195022497E-6	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999925876100047	WITHOUT_CLASSIFICATION	7.412389995291388E-5	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992177228062	WITHOUT_CLASSIFICATION	7.822771938043175E-7	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843959770003	WITHOUT_CLASSIFICATION	1.5604022999644583E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998279878828	WITHOUT_CLASSIFICATION	1.7201211721604373E-6	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925060454037	WITHOUT_CLASSIFICATION	7.493954596369727E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999845685513843	WITHOUT_CLASSIFICATION	1.543144861565866E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999997331253877	WITHOUT_CLASSIFICATION	2.668746122734361E-7	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999989571018841	WITHOUT_CLASSIFICATION	1.0428981158866417E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999829134692534	WITHOUT_CLASSIFICATION	1.7086530746568045E-5	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999322925978	WITHOUT_CLASSIFICATION	6.770740224473725E-8	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999996275152825	WITHOUT_CLASSIFICATION	3.7248471748549395E-7	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999842218224725	WITHOUT_CLASSIFICATION	1.5778177527546405E-5	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999987594335631	WITHOUT_CLASSIFICATION	1.2405664368526323E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999927486665	WITHOUT_CLASSIFICATION	7.251333511507125E-9	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999928771288588	WITHOUT_CLASSIFICATION	7.122871141186535E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999996971829036	WITHOUT_CLASSIFICATION	3.028170964337668E-7	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999995096526191	WITHOUT_CLASSIFICATION	4.903473810017766E-7	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999919583381451	WITHOUT_CLASSIFICATION	8.041661854818682E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998013292792	WITHOUT_CLASSIFICATION	1.986707207341159E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999454130532234	WITHOUT_CLASSIFICATION	5.4586946776680894E-5	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999768654724	WITHOUT_CLASSIFICATION	2.3134527601777906E-8	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999976437480858	WITHOUT_CLASSIFICATION	2.3562519142233453E-6	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998734212871615	WITHOUT_CLASSIFICATION	1.2657871283845107E-4	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999701590127544	WITHOUT_CLASSIFICATION	2.984098724559676E-5	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.999999792997848	WITHOUT_CLASSIFICATION	2.0700215194752502E-7	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999158171333898	WITHOUT_CLASSIFICATION	8.418286661015336E-5	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9987705845926078	WITHOUT_CLASSIFICATION	0.0012294154073921348	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999977670234415	WITHOUT_CLASSIFICATION	2.232976558633393E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999574712056739	WITHOUT_CLASSIFICATION	4.2528794326088246E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999699414463774	WITHOUT_CLASSIFICATION	3.0058553622565227E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999978556962258	WITHOUT_CLASSIFICATION	2.1443037742012502E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999447041519	WITHOUT_CLASSIFICATION	5.529584806946428E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999995950836242	WITHOUT_CLASSIFICATION	4.049163758526181E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999940216170013	WITHOUT_CLASSIFICATION	5.97838299866714E-6	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999995946880556	WITHOUT_CLASSIFICATION	4.053119443935088E-6	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999890388782804	WITHOUT_CLASSIFICATION	1.096112171960691E-5	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999535232595367	WITHOUT_CLASSIFICATION	4.647674046335618E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999952089561	WITHOUT_CLASSIFICATION	4.791043875234852E-9	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999997803436533	WITHOUT_CLASSIFICATION	2.1965634656260895E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999951732211	WITHOUT_CLASSIFICATION	4.8267788650155745E-9	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999995329900181	WITHOUT_CLASSIFICATION	4.670099819105318E-7	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999832997096207	WITHOUT_CLASSIFICATION	1.670029037929583E-5	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999944702007617	WITHOUT_CLASSIFICATION	5.529799238341109E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999954154482396	WITHOUT_CLASSIFICATION	4.584551760471204E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999909952768	WITHOUT_CLASSIFICATION	9.00472318713008E-9	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9935288677646075	WITHOUT_CLASSIFICATION	0.006471132235392523	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999977676215348	WITHOUT_CLASSIFICATION	2.2323784651839134E-6	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998472786591	WITHOUT_CLASSIFICATION	1.5272134092167608E-7	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999881595979015	WITHOUT_CLASSIFICATION	1.1840402098507999E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998013292792	WITHOUT_CLASSIFICATION	1.986707207341159E-7	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9994689809438587	WITHOUT_CLASSIFICATION	5.310190561412917E-4	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999199644135	WITHOUT_CLASSIFICATION	8.00355865432908E-8	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993559415259096	WITHOUT_CLASSIFICATION	6.440584740904414E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998013292792	WITHOUT_CLASSIFICATION	1.986707207341159E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999995187075097	WITHOUT_CLASSIFICATION	4.812924903563212E-7	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999951732211	WITHOUT_CLASSIFICATION	4.8267788650155745E-9	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9980801046545548	WITHOUT_CLASSIFICATION	0.0019198953454452156	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9997402373830278	WITHOUT_CLASSIFICATION	2.597626169722124E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999864191942	WITHOUT_CLASSIFICATION	1.3580805882955745E-8	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999574712056739	WITHOUT_CLASSIFICATION	4.2528794326088246E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999699414463774	WITHOUT_CLASSIFICATION	3.0058553622565227E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999978556962258	WITHOUT_CLASSIFICATION	2.1443037742012502E-5	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.999999989342782	WITHOUT_CLASSIFICATION	1.0657218065314352E-8	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999993975111933	WITHOUT_CLASSIFICATION	6.024888068150057E-7	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999996000565916	WITHOUT_CLASSIFICATION	3.999434083156477E-7	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999948985789455	WITHOUT_CLASSIFICATION	5.101421054453895E-6	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999998849895505	WITHOUT_CLASSIFICATION	1.1501044953713224E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998013292792	WITHOUT_CLASSIFICATION	1.986707207341159E-7	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999447041519	WITHOUT_CLASSIFICATION	5.529584806946428E-8	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999995950836242	WITHOUT_CLASSIFICATION	4.049163758526181E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999047133558	WITHOUT_CLASSIFICATION	9.528664425481676E-8	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865025892978	WITHOUT_CLASSIFICATION	1.349741070222979E-5	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999998978080955	WITHOUT_CLASSIFICATION	1.0219190451831687E-7	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999606455624	WITHOUT_CLASSIFICATION	3.935443753738511E-8	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999997032413277	WITHOUT_CLASSIFICATION	2.967586723192371E-7	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999993197667778	WITHOUT_CLASSIFICATION	6.802332221494301E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957478990318	WITHOUT_CLASSIFICATION	4.252100968214899E-6	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999845658233819	WITHOUT_CLASSIFICATION	1.543417661800607E-5	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999998969695547	WITHOUT_CLASSIFICATION	1.0303044527600732E-7	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999998728346225	WITHOUT_CLASSIFICATION	1.2716537756927544E-7	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999090227375	WITHOUT_CLASSIFICATION	9.097726249868036E-8	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999969430609	WITHOUT_CLASSIFICATION	3.0569391904345555E-9	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980256225312	WITHOUT_CLASSIFICATION	1.9743774689412176E-6	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985639095892	WITHOUT_CLASSIFICATION	1.4360904108016716E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998981655239	WITHOUT_CLASSIFICATION	1.018344759836861E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999969430609	WITHOUT_CLASSIFICATION	3.0569391904345555E-9	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999358396511	WITHOUT_CLASSIFICATION	6.416034895102386E-8	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999992752310566	WITHOUT_CLASSIFICATION	7.247689434137912E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999696581446496	WITHOUT_CLASSIFICATION	3.0341855350394595E-5	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898742871252	WITHOUT_CLASSIFICATION	1.0125712874800701E-5	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9998963938734966	WITHOUT_CLASSIFICATION	1.0360612650344433E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999121029916078	WITHOUT_CLASSIFICATION	8.789700839216494E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991702895717	WITHOUT_CLASSIFICATION	8.297104282335667E-7	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997556257919	WITHOUT_CLASSIFICATION	2.4437420810450605E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999927486665	WITHOUT_CLASSIFICATION	7.251333511507125E-9	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999994082547904	WITHOUT_CLASSIFICATION	5.917452096347341E-7	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999988688300114	WITHOUT_CLASSIFICATION	1.1311699885800023E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999998970811949	WITHOUT_CLASSIFICATION	1.0291880507422976E-7	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999869904924	WITHOUT_CLASSIFICATION	1.3009507545411313E-8	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999997749643889	WITHOUT_CLASSIFICATION	2.250356110300131E-7	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999757507602	WITHOUT_CLASSIFICATION	2.4249239812566215E-8	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999938091814539	WITHOUT_CLASSIFICATION	6.190818546095044E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999752978922035	WITHOUT_CLASSIFICATION	2.470210779640046E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999155706	WITHOUT_CLASSIFICATION	8.442929332739447E-11	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999926001446544	WITHOUT_CLASSIFICATION	7.399855345575962E-6	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999834665019	WITHOUT_CLASSIFICATION	1.6533498039241537E-8	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999972275405054	WITHOUT_CLASSIFICATION	2.7724594947032537E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999995906723003	WITHOUT_CLASSIFICATION	4.0932769976073177E-7	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999999868719563	WITHOUT_CLASSIFICATION	1.312804369613687E-7	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999985949310072	WITHOUT_CLASSIFICATION	1.4050689929002015E-6	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992811626954	WITHOUT_CLASSIFICATION	7.188373046150015E-7	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988729692086	WITHOUT_CLASSIFICATION	1.1270307914114794E-5	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999405825063	WITHOUT_CLASSIFICATION	5.941749368184085E-8	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999977989478874	WITHOUT_CLASSIFICATION	2.2010521127100126E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9997627945021573	WITHOUT_CLASSIFICATION	2.3720549784259459E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995811848204	WITHOUT_CLASSIFICATION	4.1881517959656236E-7	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998837950904	WITHOUT_CLASSIFICATION	1.1620490959784871E-7	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999924281053	WITHOUT_CLASSIFICATION	7.571894702751735E-8	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999169315621	WITHOUT_CLASSIFICATION	8.306843784793112E-8	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999999507436015	WITHOUT_CLASSIFICATION	4.925639851592734E-7	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999999887961255	WITHOUT_CLASSIFICATION	1.1203874501020395E-8	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999409872592	WITHOUT_CLASSIFICATION	5.901274072745003E-8	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998739869010923	WITHOUT_CLASSIFICATION	1.2601309890770005E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999891729605	WITHOUT_CLASSIFICATION	1.0827039553772956E-8	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997955070992	WITHOUT_CLASSIFICATION	2.0449290080411136E-6	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999999149293721	WITHOUT_CLASSIFICATION	8.507062790108692E-8	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999990079443365	WITHOUT_CLASSIFICATION	9.920556635095763E-7	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999972592398532	WITHOUT_CLASSIFICATION	2.7407601468570395E-6	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999888391251757	WITHOUT_CLASSIFICATION	1.1160874824386677E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999993114247854	WITHOUT_CLASSIFICATION	6.885752146067101E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999973638387186	WITHOUT_CLASSIFICATION	2.63616128139235E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999993912216453	WITHOUT_CLASSIFICATION	6.087783548437679E-7	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999981229929874	WITHOUT_CLASSIFICATION	1.8770070125434492E-6	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999999828130359	WITHOUT_CLASSIFICATION	1.718696408747417E-7	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999998915249739	WITHOUT_CLASSIFICATION	1.0847502609574993E-7	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9996232433263983	WITHOUT_CLASSIFICATION	3.7675667360166334E-4	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999992776534772	WITHOUT_CLASSIFICATION	7.223465228032892E-7	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999940612908	WITHOUT_CLASSIFICATION	5.938709264973114E-9	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999265656198	WITHOUT_CLASSIFICATION	7.343438027664252E-8	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999990515332152	WITHOUT_CLASSIFICATION	9.484667848076282E-7	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999497329288	WITHOUT_CLASSIFICATION	5.026707124992684E-8	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999998808797541	WITHOUT_CLASSIFICATION	1.1912024578487534E-7	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999999435039135	WITHOUT_CLASSIFICATION	5.649608649593093E-7	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999832338935	WITHOUT_CLASSIFICATION	1.676610653723573E-8	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999727205627	WITHOUT_CLASSIFICATION	2.7279437247806962E-8	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999999167441117	WITHOUT_CLASSIFICATION	8.325588828807952E-7	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9895964597788546	WITHOUT_CLASSIFICATION	0.010403540221145475	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999137005088	WITHOUT_CLASSIFICATION	8.629949125885698E-8	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999647883015289	WITHOUT_CLASSIFICATION	3.5211698471129146E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999999994699496	WITHOUT_CLASSIFICATION	5.300504063162876E-9	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999998256469788	WITHOUT_CLASSIFICATION	1.7435302128258062E-7	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999994521495714	WITHOUT_CLASSIFICATION	5.478504286462761E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999981316001545	WITHOUT_CLASSIFICATION	1.868399845449414E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999983635597467	WITHOUT_CLASSIFICATION	1.6364402532651297E-6	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999990800070615	WITHOUT_CLASSIFICATION	9.199929384255049E-7	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999986487534204	WITHOUT_CLASSIFICATION	1.351246579641391E-6	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999997279090496	WITHOUT_CLASSIFICATION	2.720909505154144E-7	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999972530506778	WITHOUT_CLASSIFICATION	2.746949322355446E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999907260345214	WITHOUT_CLASSIFICATION	9.273965478595174E-6	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999462045074987	WITHOUT_CLASSIFICATION	5.379549250132419E-5	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999975958159584	WITHOUT_CLASSIFICATION	2.4041840416659435E-6	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999962612042229	WITHOUT_CLASSIFICATION	3.7387957770807107E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999976350953718	WITHOUT_CLASSIFICATION	2.364904628175381E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999996293159978	WITHOUT_CLASSIFICATION	3.706840022037041E-7	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999915284673987	WITHOUT_CLASSIFICATION	8.471532601227976E-6	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999991429442114	WITHOUT_CLASSIFICATION	8.570557884880177E-7	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9994935920807347	WITHOUT_CLASSIFICATION	5.064079192652772E-4	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9994448576104142	WITHOUT_CLASSIFICATION	5.551423895857475E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999933097067173	WITHOUT_CLASSIFICATION	6.690293282799255E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9755045850914376	WITHOUT_CLASSIFICATION	0.024495414908562378	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999899227634	WITHOUT_CLASSIFICATION	1.0077236504798269E-8	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9993713320217918	WITHOUT_CLASSIFICATION	6.286679782081804E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999651920630198	WITHOUT_CLASSIFICATION	3.480793698026751E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999788901936595	WITHOUT_CLASSIFICATION	2.1109806340596175E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999989530714014	WITHOUT_CLASSIFICATION	1.0469285986677928E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999760189193	WITHOUT_CLASSIFICATION	2.398108063431735E-8	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999960128929151	WITHOUT_CLASSIFICATION	3.987107084918091E-6	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999985947193367	WITHOUT_CLASSIFICATION	1.405280663260911E-6	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999629896150138	WITHOUT_CLASSIFICATION	3.7010384986109364E-5	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999947343369388	WITHOUT_CLASSIFICATION	5.265663061199158E-6	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999988326913134	WITHOUT_CLASSIFICATION	1.167308686511217E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999658870856	WITHOUT_CLASSIFICATION	3.411291444263132E-8	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999939723644	WITHOUT_CLASSIFICATION	6.027635639957892E-9	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999991843745616	WITHOUT_CLASSIFICATION	8.156254384359394E-7	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999843860067472	WITHOUT_CLASSIFICATION	1.561399325279977E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993663266119	WITHOUT_CLASSIFICATION	6.336733881745669E-7	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999996439776331	WITHOUT_CLASSIFICATION	3.560223670152293E-7	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999993244718549	WITHOUT_CLASSIFICATION	6.755281451448816E-7	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999811840907683	WITHOUT_CLASSIFICATION	1.881590923174028E-5	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998232105475096	WITHOUT_CLASSIFICATION	1.7678945249038439E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999993048641311	WITHOUT_CLASSIFICATION	6.951358688936325E-7	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999645970651637	WITHOUT_CLASSIFICATION	3.5402934836312565E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999991919434853	WITHOUT_CLASSIFICATION	8.080565146683698E-7	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999998772777215	WITHOUT_CLASSIFICATION	1.2272227843852437E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9992082807513899	WITHOUT_CLASSIFICATION	7.9171924861003E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999834430823967	WITHOUT_CLASSIFICATION	1.65569176032471E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999999217825193	WITHOUT_CLASSIFICATION	7.82174806774393E-8	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9992082807513899	WITHOUT_CLASSIFICATION	7.9171924861003E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999999996872735	WITHOUT_CLASSIFICATION	3.1272648798995055E-9	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999997690077382	WITHOUT_CLASSIFICATION	2.3099226187114467E-7	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.999999615698795	WITHOUT_CLASSIFICATION	3.8430120499549685E-7	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999819571318335	WITHOUT_CLASSIFICATION	1.804286816650741E-5	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999054933231	WITHOUT_CLASSIFICATION	9.450667686874406E-8	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999965423687	WITHOUT_CLASSIFICATION	3.4576313439472984E-9	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999942140099336	WITHOUT_CLASSIFICATION	5.785990066470437E-6	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999857123922	WITHOUT_CLASSIFICATION	1.428760780545437E-8	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999213722267	WITHOUT_CLASSIFICATION	7.862777321030559E-8	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999994308454935	WITHOUT_CLASSIFICATION	5.69154506462009E-7	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999958085656057	WITHOUT_CLASSIFICATION	4.191434394309827E-6	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999983193080474	WITHOUT_CLASSIFICATION	1.6806919527119573E-6	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999696155509	WITHOUT_CLASSIFICATION	3.0384449128885384E-8	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999986302465	WITHOUT_CLASSIFICATION	1.3697535385167324E-9	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999987949563958	WITHOUT_CLASSIFICATION	1.205043604179282E-6	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999986739626657	WITHOUT_CLASSIFICATION	1.3260373342706529E-6	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999793354966295	WITHOUT_CLASSIFICATION	2.0664503370509924E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999793354966295	WITHOUT_CLASSIFICATION	2.0664503370509924E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999981284413577	WITHOUT_CLASSIFICATION	1.8715586422377352E-6	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9999142879676463	WITHOUT_CLASSIFICATION	8.571203235380407E-5	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999259676341786	WITHOUT_CLASSIFICATION	7.403236582134572E-5	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999961116711426	WITHOUT_CLASSIFICATION	3.8883288574443955E-6	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999992294425122	WITHOUT_CLASSIFICATION	7.705574879254282E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9445413278727833	WITHOUT_CLASSIFICATION	0.055458672127216675	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9999060394450776	WITHOUT_CLASSIFICATION	9.396055492229089E-5	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999938337797	WITHOUT_CLASSIFICATION	6.166220309585564E-8	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.999999307665268	WITHOUT_CLASSIFICATION	6.923347319358028E-7	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999890722645836	WITHOUT_CLASSIFICATION	1.0927735416400637E-4	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999772910683019	WITHOUT_CLASSIFICATION	2.2708931698104664E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999976380335	WITHOUT_CLASSIFICATION	2.3619665007979828E-9	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999998900285592	WITHOUT_CLASSIFICATION	1.0997144095370204E-7	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999946374170147	WITHOUT_CLASSIFICATION	5.362582985298243E-6	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999953947551	WITHOUT_CLASSIFICATION	4.605244847107845E-9	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999985949310072	WITHOUT_CLASSIFICATION	1.4050689929002015E-6	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999994339511906	WITHOUT_CLASSIFICATION	5.660488093011041E-7	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999999679386375	WITHOUT_CLASSIFICATION	3.206136250244463E-7	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9993273815436571	WITHOUT_CLASSIFICATION	6.726184563429596E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.999999206468613	WITHOUT_CLASSIFICATION	7.9353138706837E-7	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999590853608	WITHOUT_CLASSIFICATION	4.0914639220320695E-8	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999948685103084	WITHOUT_CLASSIFICATION	5.131489691566436E-6	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999761880516	WITHOUT_CLASSIFICATION	2.3811948301341624E-8	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999660764654	WITHOUT_CLASSIFICATION	3.3923534733624073E-8	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999039195945	WITHOUT_CLASSIFICATION	9.608040547505091E-8	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999997584159532	WITHOUT_CLASSIFICATION	2.415840468295851E-7	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999991157291	WITHOUT_CLASSIFICATION	8.842707693373358E-10	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999944240275779	WITHOUT_CLASSIFICATION	5.575972422025169E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999961801694286	WITHOUT_CLASSIFICATION	3.81983057143538E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999819820636187	WITHOUT_CLASSIFICATION	1.8017936381267715E-5	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999929147209984	WITHOUT_CLASSIFICATION	7.085279001604181E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999993590934796	WITHOUT_CLASSIFICATION	6.40906520362547E-7	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9998884912240488	WITHOUT_CLASSIFICATION	1.1150877595125207E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999981870548639	WITHOUT_CLASSIFICATION	1.8129451360879935E-6	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999953219475218	WITHOUT_CLASSIFICATION	4.6780524781209274E-6	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999981929153565	WITHOUT_CLASSIFICATION	1.8070846435071317E-6	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.999995390479413	WITHOUT_CLASSIFICATION	4.60952058708284E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999851920038987	WITHOUT_CLASSIFICATION	1.4807996101312884E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999991101121932	WITHOUT_CLASSIFICATION	8.898878068040382E-7	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999398971019879	WITHOUT_CLASSIFICATION	6.010289801198635E-5	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999996482312257	WITHOUT_CLASSIFICATION	3.5176877443686855E-7	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999997863458847	WITHOUT_CLASSIFICATION	2.1365411519073065E-7	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9967208486185096	WITHOUT_CLASSIFICATION	0.003279151381490386	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999996882214492	WITHOUT_CLASSIFICATION	3.1177855084012014E-7	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999995941831264	WITHOUT_CLASSIFICATION	4.058168736017188E-6	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999999789958866	WITHOUT_CLASSIFICATION	2.100411341016062E-7	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910066493123	WITHOUT_CLASSIFICATION	8.99335068769039E-6	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999981977835752	WITHOUT_CLASSIFICATION	1.8022164247944057E-5	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959179025417	WITHOUT_CLASSIFICATION	4.082097458282535E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9990456715571703	WITHOUT_CLASSIFICATION	9.543284428297986E-4	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999780409738975	WITHOUT_CLASSIFICATION	2.1959026102419794E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999752978922035	WITHOUT_CLASSIFICATION	2.470210779640046E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999752978922035	WITHOUT_CLASSIFICATION	2.470210779640046E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996269677484	WITHOUT_CLASSIFICATION	3.730322517208428E-7	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.999996727163662	WITHOUT_CLASSIFICATION	3.2728363379700147E-6	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9966308789469812	WITHOUT_CLASSIFICATION	0.0033691210530187067	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995601639765805	WITHOUT_CLASSIFICATION	4.398360234194794E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9966308789469812	WITHOUT_CLASSIFICATION	0.0033691210530187067	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999984722419478	WITHOUT_CLASSIFICATION	1.527758052226121E-6	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999992836838069	WITHOUT_CLASSIFICATION	7.163161930640179E-7	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999998374942739	WITHOUT_CLASSIFICATION	1.6250572613614244E-7	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999996969759887	WITHOUT_CLASSIFICATION	3.030240113685907E-7	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999291521193	WITHOUT_CLASSIFICATION	7.084788070612584E-8	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999994798733132	WITHOUT_CLASSIFICATION	5.20126686857663E-7	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999660283696	WITHOUT_CLASSIFICATION	3.3971630292608136E-8	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999883753939425	WITHOUT_CLASSIFICATION	1.162460605747136E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999854380939	WITHOUT_CLASSIFICATION	1.4561906184465419E-8	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999990225679946	WITHOUT_CLASSIFICATION	9.774320054859095E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999945263144674	WITHOUT_CLASSIFICATION	5.47368553265789E-6	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999998766382356	WITHOUT_CLASSIFICATION	1.2336176435580297E-7	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999992311247496	WITHOUT_CLASSIFICATION	7.688752502400855E-7	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.999795799787456	WITHOUT_CLASSIFICATION	2.0420021254386353E-4	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999653355656	WITHOUT_CLASSIFICATION	3.466443445454905E-8	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999999705948633	WITHOUT_CLASSIFICATION	2.940513670895912E-7	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999955306296511	WITHOUT_CLASSIFICATION	4.469370348920624E-6	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999955306296511	WITHOUT_CLASSIFICATION	4.469370348920624E-6	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999969452927878	WITHOUT_CLASSIFICATION	3.05470721219447E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999998881561333	WITHOUT_CLASSIFICATION	1.1184386673094128E-7	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999998997565964	WITHOUT_CLASSIFICATION	1.002434036000026E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999411960842	WITHOUT_CLASSIFICATION	5.880391580343595E-8	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999994593411665	WITHOUT_CLASSIFICATION	5.406588335123721E-7	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999997131077868	WITHOUT_CLASSIFICATION	2.8689221324282426E-7	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999989446827414	WITHOUT_CLASSIFICATION	1.055317258601603E-6	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999981187801342	WITHOUT_CLASSIFICATION	1.8812198657467905E-6	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999065975668	WITHOUT_CLASSIFICATION	9.340243332975165E-8	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999995573911931	WITHOUT_CLASSIFICATION	4.426088069021118E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999994360449372	WITHOUT_CLASSIFICATION	5.639550627909036E-7	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999864910476	WITHOUT_CLASSIFICATION	1.3508952426036425E-8	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999718997694	WITHOUT_CLASSIFICATION	2.810023057626685E-8	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999988305194272	WITHOUT_CLASSIFICATION	1.1694805728481049E-6	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999996771328364	WITHOUT_CLASSIFICATION	3.228671635560756E-7	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999587189152	WITHOUT_CLASSIFICATION	4.128108481381098E-8	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999993748504177	WITHOUT_CLASSIFICATION	6.251495823156303E-7	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999992096800548	WITHOUT_CLASSIFICATION	7.903199450923057E-7	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999981188541355	WITHOUT_CLASSIFICATION	1.8811458645366278E-6	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999970515853	WITHOUT_CLASSIFICATION	2.9484146480743488E-9	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999991774806475	WITHOUT_CLASSIFICATION	8.225193525173525E-7	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999716807885	WITHOUT_CLASSIFICATION	2.8319211596433834E-8	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999997869295205	WITHOUT_CLASSIFICATION	2.1307047943618137E-7	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999979146735	WITHOUT_CLASSIFICATION	2.0853264455429846E-9	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999985478852047	WITHOUT_CLASSIFICATION	1.4521147953137916E-6	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999987034552686	WITHOUT_CLASSIFICATION	1.2965447312888905E-6	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999957063839426	WITHOUT_CLASSIFICATION	4.293616057346591E-6	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999494456543235	WITHOUT_CLASSIFICATION	5.055434567633144E-5	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999941004080586	WITHOUT_CLASSIFICATION	5.899591941388813E-6	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999568901213077	WITHOUT_CLASSIFICATION	4.310987869224185E-5	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999999233215419	WITHOUT_CLASSIFICATION	7.667845810391479E-7	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999998010416757	WITHOUT_CLASSIFICATION	1.9895832425386817E-7	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999752006717447	WITHOUT_CLASSIFICATION	2.4799328255288142E-5	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999997302524593	WITHOUT_CLASSIFICATION	2.697475407582498E-7	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999856463130374	WITHOUT_CLASSIFICATION	1.4353686962656308E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999918234086	WITHOUT_CLASSIFICATION	8.176591422033489E-9	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998815674026	WITHOUT_CLASSIFICATION	1.1843259733967287E-7	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.999999358222206	WITHOUT_CLASSIFICATION	6.417777939467988E-7	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999628648412099	WITHOUT_CLASSIFICATION	3.713515879018613E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999965038759332	WITHOUT_CLASSIFICATION	3.4961240667071464E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999982673217633	WITHOUT_CLASSIFICATION	1.7326782366484494E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996379049566	WITHOUT_CLASSIFICATION	3.620950434169359E-6	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999978718499362	WITHOUT_CLASSIFICATION	2.128150063872432E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998445706051253	WITHOUT_CLASSIFICATION	1.5542939487475698E-4	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996096046607	WITHOUT_CLASSIFICATION	3.903953392390663E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.999760217868519	WITHOUT_CLASSIFICATION	2.3978213148094111E-4	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9715615425568067	WITHOUT_CLASSIFICATION	0.028438457443193267	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999961518329	WITHOUT_CLASSIFICATION	3.84816708086389E-9	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999994123736184	WITHOUT_CLASSIFICATION	5.876263815318884E-7	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999981912847032	WITHOUT_CLASSIFICATION	1.8087152967351816E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979687756487	WITHOUT_CLASSIFICATION	2.03122435117036E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999766269383	WITHOUT_CLASSIFICATION	2.337306174582155E-8	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9982811328851493	WITHOUT_CLASSIFICATION	0.0017188671148507233	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999998084314337	WITHOUT_CLASSIFICATION	1.9156856622720597E-7	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999958347265018	WITHOUT_CLASSIFICATION	4.165273498223364E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999995187075097	WITHOUT_CLASSIFICATION	4.812924903563212E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999995187075097	WITHOUT_CLASSIFICATION	4.812924903563212E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999997619187243	WITHOUT_CLASSIFICATION	2.380812756673661E-7	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999979215610227	WITHOUT_CLASSIFICATION	2.0784389772965324E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999947719222247	WITHOUT_CLASSIFICATION	5.228077775186696E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999824003576988	WITHOUT_CLASSIFICATION	1.7599642301244962E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999992657432225	WITHOUT_CLASSIFICATION	7.342567775198712E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999973992126866	WITHOUT_CLASSIFICATION	2.6007873133570394E-6	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999994692144116	WITHOUT_CLASSIFICATION	5.307855882728984E-7	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999999958356313	WITHOUT_CLASSIFICATION	4.16436873307804E-9	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999945746070849	WITHOUT_CLASSIFICATION	5.4253929151757945E-6	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999927380134	WITHOUT_CLASSIFICATION	7.2619865899337445E-9	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999910881727884	WITHOUT_CLASSIFICATION	8.911827211554026E-6	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999758436329907	WITHOUT_CLASSIFICATION	2.4156367009340562E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999998970047293	WITHOUT_CLASSIFICATION	1.029952707083059E-6	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999711405267	WITHOUT_CLASSIFICATION	2.885947334554367E-8	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999986351581454	WITHOUT_CLASSIFICATION	1.3648418546706913E-6	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999405459568695	WITHOUT_CLASSIFICATION	5.945404313056579E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999992103001253	WITHOUT_CLASSIFICATION	7.896998748010666E-7	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999980388782471	WITHOUT_CLASSIFICATION	1.961121752841683E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999231448872045	WITHOUT_CLASSIFICATION	7.685511279549699E-5	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999667993123477	WITHOUT_CLASSIFICATION	3.3200687652333784E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999999989227479	WITHOUT_CLASSIFICATION	1.0772521058401723E-8	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999706178959575	WITHOUT_CLASSIFICATION	2.938210404244279E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999635212426533	WITHOUT_CLASSIFICATION	3.6478757346628524E-5	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998498490495887	WITHOUT_CLASSIFICATION	1.5015095041115165E-4	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9996222457086346	WITHOUT_CLASSIFICATION	3.7775429136550703E-4	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.99617920832649	WITHOUT_CLASSIFICATION	0.0038207916735099753	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999995646065973	WITHOUT_CLASSIFICATION	4.353934026990564E-6	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996472389447413	WITHOUT_CLASSIFICATION	3.527610552586672E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999986493878116	WITHOUT_CLASSIFICATION	1.3506121884810546E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999635212426533	WITHOUT_CLASSIFICATION	3.6478757346628524E-5	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999997508310314	WITHOUT_CLASSIFICATION	2.491689685904597E-6	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999971642432126	WITHOUT_CLASSIFICATION	2.835756787413981E-6	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9999780003542127	WITHOUT_CLASSIFICATION	2.1999645787292555E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999934464108159	WITHOUT_CLASSIFICATION	6.553589184043603E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999976339414	WITHOUT_CLASSIFICATION	2.3660585344702605E-9	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999998928399467	WITHOUT_CLASSIFICATION	1.0716005333925155E-7	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999932550280548	WITHOUT_CLASSIFICATION	6.744971945241128E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998611059561	WITHOUT_CLASSIFICATION	1.388940439462166E-7	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999999875034287	WITHOUT_CLASSIFICATION	1.2496571303468918E-7	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999934464108159	WITHOUT_CLASSIFICATION	6.553589184043603E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999628300974	WITHOUT_CLASSIFICATION	3.716990262273308E-8	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998615488126	WITHOUT_CLASSIFICATION	1.3845118733411322E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999387752765443	WITHOUT_CLASSIFICATION	6.122472345569994E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999882292467722	WITHOUT_CLASSIFICATION	1.1770753227794841E-5	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999997421243394	WITHOUT_CLASSIFICATION	2.5787566062308433E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999994360449372	WITHOUT_CLASSIFICATION	5.639550627909036E-7	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999586047792	WITHOUT_CLASSIFICATION	4.1395220732207035E-8	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999996925681418	WITHOUT_CLASSIFICATION	3.0743185824044545E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999992338736152	WITHOUT_CLASSIFICATION	7.661263847829426E-7	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998168813622069	WITHOUT_CLASSIFICATION	1.8311863779307485E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999753838605	WITHOUT_CLASSIFICATION	2.4616139404176126E-8	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999992003519705	WITHOUT_CLASSIFICATION	7.996480294225498E-7	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999980159819	WITHOUT_CLASSIFICATION	1.984018145686903E-9	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999994214194674	WITHOUT_CLASSIFICATION	5.785805325289259E-7	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999999914346727	WITHOUT_CLASSIFICATION	8.565327304298986E-8	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999996077601451	WITHOUT_CLASSIFICATION	3.922398549544044E-7	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999807898006872	WITHOUT_CLASSIFICATION	1.9210199312850405E-5	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999935885668	WITHOUT_CLASSIFICATION	6.411433121290564E-9	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999996246731677	WITHOUT_CLASSIFICATION	3.753268322606161E-7	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999789279237196	WITHOUT_CLASSIFICATION	2.1072076280361667E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999988246284	WITHOUT_CLASSIFICATION	1.1753715374903593E-9	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999994831545604	WITHOUT_CLASSIFICATION	5.168454395959622E-7	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999994840870391	WITHOUT_CLASSIFICATION	5.159129609340869E-7	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999989941324374	WITHOUT_CLASSIFICATION	1.0058675626135827E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999995314721154	WITHOUT_CLASSIFICATION	4.685278845083372E-7	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999591894751122	WITHOUT_CLASSIFICATION	4.081052488788389E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999818151672182	WITHOUT_CLASSIFICATION	1.81848327817746E-5	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999731672986	WITHOUT_CLASSIFICATION	2.683270146452423E-8	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999950204957173	WITHOUT_CLASSIFICATION	4.97950428260313E-6	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999998414998517	WITHOUT_CLASSIFICATION	1.585001483301307E-7	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999798493013424	WITHOUT_CLASSIFICATION	2.0150698657535036E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999994402050761	WITHOUT_CLASSIFICATION	5.597949238607296E-7	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999954492418361	WITHOUT_CLASSIFICATION	4.550758163926319E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997241185777	WITHOUT_CLASSIFICATION	2.758814222759579E-7	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992293004637	WITHOUT_CLASSIFICATION	7.706995363100523E-6	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9988836670201859	WITHOUT_CLASSIFICATION	0.0011163329798140234	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999989185830784	WITHOUT_CLASSIFICATION	1.0814169215368999E-6	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999838796199718	WITHOUT_CLASSIFICATION	1.6120380028144517E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999942219163	WITHOUT_CLASSIFICATION	5.77808374925458E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999942219163	WITHOUT_CLASSIFICATION	5.77808374925458E-9	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999988351717	WITHOUT_CLASSIFICATION	1.164828419171267E-9	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999792285428428	WITHOUT_CLASSIFICATION	2.0771457157168845E-5	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999989732521419	WITHOUT_CLASSIFICATION	1.0267478580384447E-6	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999730494937218	WITHOUT_CLASSIFICATION	2.6950506278267598E-5	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999972126631337	WITHOUT_CLASSIFICATION	2.7873368663821322E-6	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9995714807871707	WITHOUT_CLASSIFICATION	4.285192128293477E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999953824632575	WITHOUT_CLASSIFICATION	4.61753674255844E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999969147942234	WITHOUT_CLASSIFICATION	3.085205776593567E-6	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999169079734	WITHOUT_CLASSIFICATION	8.30920265451156E-8	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999992106037173	WITHOUT_CLASSIFICATION	7.893962826119482E-7	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9946533487038323	WITHOUT_CLASSIFICATION	0.005346651296167816	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999925137216	WITHOUT_CLASSIFICATION	7.486278330270752E-9	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999981196924042	WITHOUT_CLASSIFICATION	1.8803075957981003E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999942219163	WITHOUT_CLASSIFICATION	5.77808374925458E-9	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999898883615481	WITHOUT_CLASSIFICATION	1.0111638451783805E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999941632613403	WITHOUT_CLASSIFICATION	5.836738659826896E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9988292209267866	WITHOUT_CLASSIFICATION	0.0011707790732134282	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999999534908645	WITHOUT_CLASSIFICATION	4.650913543184098E-8	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999988998078334	WITHOUT_CLASSIFICATION	1.1001921666131532E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999980206933445	WITHOUT_CLASSIFICATION	1.97930665549717E-6	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999955171429314	WITHOUT_CLASSIFICATION	4.4828570685932504E-6	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999993829763	WITHOUT_CLASSIFICATION	6.17023666255781E-10	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999992179851627	WITHOUT_CLASSIFICATION	7.820148373539392E-7	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999999725156199	WITHOUT_CLASSIFICATION	2.7484380098081097E-8	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999992809364067	WITHOUT_CLASSIFICATION	7.190635933770838E-7	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997241185777	WITHOUT_CLASSIFICATION	2.758814222759579E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999942219163	WITHOUT_CLASSIFICATION	5.77808374925458E-9	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999853760230789	WITHOUT_CLASSIFICATION	1.4623976921013911E-5	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999568019056	WITHOUT_CLASSIFICATION	4.319809437228062E-8	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995393283667	WITHOUT_CLASSIFICATION	4.606716332706754E-7	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999900491044139	WITHOUT_CLASSIFICATION	9.950895585956672E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999973006122	WITHOUT_CLASSIFICATION	2.6993877638651773E-9	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999934685651722	WITHOUT_CLASSIFICATION	6.531434827861845E-6	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992314037646	WITHOUT_CLASSIFICATION	7.685962354916839E-7	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999021081837	WITHOUT_CLASSIFICATION	9.789181636269238E-8	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999083059553	WITHOUT_CLASSIFICATION	9.16940447479652E-8	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999887664661121	WITHOUT_CLASSIFICATION	1.12335338878238E-5	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999998734244084	WITHOUT_CLASSIFICATION	1.265755915908342E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999968093524547	WITHOUT_CLASSIFICATION	3.1906475453024054E-5	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999995252037	WITHOUT_CLASSIFICATION	4.747963835703112E-10	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999998162924411	WITHOUT_CLASSIFICATION	1.8370755885970316E-7	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999984722419478	WITHOUT_CLASSIFICATION	1.527758052226121E-6	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999987571871505	WITHOUT_CLASSIFICATION	1.2428128494716552E-6	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999996821829441	WITHOUT_CLASSIFICATION	3.178170558850114E-7	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998747973093005	WITHOUT_CLASSIFICATION	1.2520269069951783E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999997792152839	WITHOUT_CLASSIFICATION	2.2078471603859667E-7	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999958637646279	WITHOUT_CLASSIFICATION	4.136235372045387E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999987007922109	WITHOUT_CLASSIFICATION	1.2992077891386072E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999987007922109	WITHOUT_CLASSIFICATION	1.2992077891386072E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999979084655006	WITHOUT_CLASSIFICATION	2.091534499325213E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999996444995293	WITHOUT_CLASSIFICATION	3.5550047074847144E-7	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999995204127186	WITHOUT_CLASSIFICATION	4.795872813985965E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999472281257045	WITHOUT_CLASSIFICATION	5.277187429558013E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999983529618709	WITHOUT_CLASSIFICATION	1.6470381290923257E-6	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999943013653212	WITHOUT_CLASSIFICATION	5.698634678855901E-6	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999997777200383	WITHOUT_CLASSIFICATION	2.2227996161051185E-7	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999521726261983	WITHOUT_CLASSIFICATION	4.7827373801734765E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999521726261983	WITHOUT_CLASSIFICATION	4.7827373801734765E-5	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999691370242431	WITHOUT_CLASSIFICATION	3.0862975756934484E-5	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999998833890061	WITHOUT_CLASSIFICATION	1.1661099388188029E-7	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999928930342549	WITHOUT_CLASSIFICATION	7.106965745050739E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999623723314232	WITHOUT_CLASSIFICATION	3.762766857673269E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999623723314232	WITHOUT_CLASSIFICATION	3.762766857673269E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999623723314232	WITHOUT_CLASSIFICATION	3.762766857673269E-5	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999637680649767	WITHOUT_CLASSIFICATION	3.6231935023381786E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999993982452103	WITHOUT_CLASSIFICATION	6.017547897465403E-7	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999022419918	WITHOUT_CLASSIFICATION	9.775800822561982E-8	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.6983297106969018	WITHOUT_CLASSIFICATION	0.3016702893030982	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999859575376534	WITHOUT_CLASSIFICATION	1.4042462346588188E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999942219163	WITHOUT_CLASSIFICATION	5.77808374925458E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999942219163	WITHOUT_CLASSIFICATION	5.77808374925458E-9	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999993344354654	WITHOUT_CLASSIFICATION	6.655645346004859E-6	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999985479988	WITHOUT_CLASSIFICATION	1.4520011807559372E-9	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9997268676730068	WITHOUT_CLASSIFICATION	2.7313232699312495E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999814895464	WITHOUT_CLASSIFICATION	1.8510453584831493E-8	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9995719310919011	WITHOUT_CLASSIFICATION	4.28068908098855E-4	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999981689859815	WITHOUT_CLASSIFICATION	1.831014018509045E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.997713028849909	WITHOUT_CLASSIFICATION	0.0022869711500910334	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999788661129638	WITHOUT_CLASSIFICATION	2.113388703618795E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999896457719869	WITHOUT_CLASSIFICATION	1.03542280130704E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999998746965189	WITHOUT_CLASSIFICATION	1.2530348102077302E-7	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999813368795131	WITHOUT_CLASSIFICATION	1.866312048693917E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999998508214626	WITHOUT_CLASSIFICATION	1.4917853734930723E-7	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999998508214626	WITHOUT_CLASSIFICATION	1.4917853734930723E-7	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999999882936901	WITHOUT_CLASSIFICATION	1.1706309888854703E-7	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999999882936901	WITHOUT_CLASSIFICATION	1.1706309888854703E-7	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999999141578114	WITHOUT_CLASSIFICATION	8.58421885965877E-8	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999997595096747	WITHOUT_CLASSIFICATION	2.4049032534749264E-7	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999997595096747	WITHOUT_CLASSIFICATION	2.4049032534749264E-7	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999999020169335	WITHOUT_CLASSIFICATION	9.798306657965172E-8	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999996643477969	WITHOUT_CLASSIFICATION	3.35652203056837E-7	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999276730039	WITHOUT_CLASSIFICATION	7.232699608953283E-8	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999987007922109	WITHOUT_CLASSIFICATION	1.2992077891386072E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999490398465	WITHOUT_CLASSIFICATION	5.096015353213417E-8	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999996643477969	WITHOUT_CLASSIFICATION	3.35652203056837E-7	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999994056528875	WITHOUT_CLASSIFICATION	5.943471125219478E-7	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999963718166016	WITHOUT_CLASSIFICATION	3.62818339837879E-6	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999999634278925	WITHOUT_CLASSIFICATION	3.657210751969081E-8	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999999733274835	WITHOUT_CLASSIFICATION	2.6672516573843598E-8	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999995252346	WITHOUT_CLASSIFICATION	4.747653946623088E-10	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999999456638404	WITHOUT_CLASSIFICATION	5.433615966190066E-8	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999996790054864	WITHOUT_CLASSIFICATION	3.209945136724636E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9966542939495271	WITHOUT_CLASSIFICATION	0.0033457060504728515	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9969386262639783	WITHOUT_CLASSIFICATION	0.00306137373602177	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997554376283302	WITHOUT_CLASSIFICATION	2.4456237166982516E-4	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999996485992065	WITHOUT_CLASSIFICATION	3.5140079349136874E-7	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999663942959324	WITHOUT_CLASSIFICATION	3.360570406758038E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999995273913179	WITHOUT_CLASSIFICATION	4.726086820063575E-7	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999999691180737	WITHOUT_CLASSIFICATION	3.088192629322313E-8	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9568900168856754	WITHOUT_CLASSIFICATION	0.04310998311432453	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999949909750316	WITHOUT_CLASSIFICATION	5.009024968292605E-6	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999662671574	WITHOUT_CLASSIFICATION	3.3732842696527975E-8	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998670376389	WITHOUT_CLASSIFICATION	1.3296236109783523E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998670376389	WITHOUT_CLASSIFICATION	1.3296236109783523E-7	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999998244751377	WITHOUT_CLASSIFICATION	1.7552486235777884E-7	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999992982967316	WITHOUT_CLASSIFICATION	7.017032683493426E-7	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999999734870919	WITHOUT_CLASSIFICATION	2.6512908202871936E-8	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999991180384558	WITHOUT_CLASSIFICATION	8.81961544318947E-7	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999996847794823	WITHOUT_CLASSIFICATION	3.152205176325244E-7	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999856378716332	WITHOUT_CLASSIFICATION	1.436212836678873E-4	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999630543998	WITHOUT_CLASSIFICATION	3.694560016303798E-8	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999979769341861	WITHOUT_CLASSIFICATION	2.023065813787242E-6	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999979804628858	WITHOUT_CLASSIFICATION	2.0195371142033794E-6	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999916521906	WITHOUT_CLASSIFICATION	8.347809479724943E-9	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999288239909	WITHOUT_CLASSIFICATION	7.11760090514774E-8	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999968093524547	WITHOUT_CLASSIFICATION	3.1906475453024054E-5	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999325967271	WITHOUT_CLASSIFICATION	6.740327282564804E-8	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999631443065231	WITHOUT_CLASSIFICATION	3.6855693476785116E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999965921436692	WITHOUT_CLASSIFICATION	3.407856330809286E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999938480566251	WITHOUT_CLASSIFICATION	6.151943374958965E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996055224448	WITHOUT_CLASSIFICATION	3.944775552049101E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996055224448	WITHOUT_CLASSIFICATION	3.944775552049101E-7	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999992730139038	WITHOUT_CLASSIFICATION	7.26986096275786E-7	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999460054705632	WITHOUT_CLASSIFICATION	5.39945294367909E-4	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9976982214342279	WITHOUT_CLASSIFICATION	0.0023017785657721604	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.998508747210874	WITHOUT_CLASSIFICATION	0.0014912527891259276	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998749313147562	WITHOUT_CLASSIFICATION	1.2506868524365963E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999962614059253	WITHOUT_CLASSIFICATION	3.738594074683259E-6	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999997618461716	WITHOUT_CLASSIFICATION	2.3815382857814955E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999923598036684	WITHOUT_CLASSIFICATION	7.640196331704181E-6	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999863156341178	WITHOUT_CLASSIFICATION	1.368436588230259E-5	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999993433364845	WITHOUT_CLASSIFICATION	6.566635154950621E-7	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999998788744992	WITHOUT_CLASSIFICATION	1.2112550079350163E-6	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999923598036684	WITHOUT_CLASSIFICATION	7.640196331704181E-6	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998379653665663	WITHOUT_CLASSIFICATION	1.620346334336114E-4	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999409410296	WITHOUT_CLASSIFICATION	5.9058970423248365E-8	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999999910192769	WITHOUT_CLASSIFICATION	8.980723093870925E-8	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999970350883074	WITHOUT_CLASSIFICATION	2.9649116926657635E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999993023407205	WITHOUT_CLASSIFICATION	6.976592794674678E-7	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998218045878	WITHOUT_CLASSIFICATION	1.781954122866432E-7	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999935068085	WITHOUT_CLASSIFICATION	6.493191503924421E-9	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999997613866006	WITHOUT_CLASSIFICATION	2.386133994495069E-7	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999999506958617	WITHOUT_CLASSIFICATION	4.930413831650931E-7	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999263553925627	WITHOUT_CLASSIFICATION	7.364460743726245E-5	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998826406552452	WITHOUT_CLASSIFICATION	1.1735934475480065E-4	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999934255894929	WITHOUT_CLASSIFICATION	6.574410507180249E-6	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999505492956	WITHOUT_CLASSIFICATION	4.9450704436024644E-8	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999992205392225	WITHOUT_CLASSIFICATION	7.794607774107568E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999919746864108	WITHOUT_CLASSIFICATION	8.025313589200234E-6	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999836580538	WITHOUT_CLASSIFICATION	1.6341946313032475E-8	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999715823432	WITHOUT_CLASSIFICATION	2.8417656725917274E-8	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999641103496543	WITHOUT_CLASSIFICATION	3.588965034576669E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999061890722812	WITHOUT_CLASSIFICATION	9.381092771875322E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999966960318	WITHOUT_CLASSIFICATION	3.3039682180349812E-9	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999998045236777	WITHOUT_CLASSIFICATION	1.9547632230005802E-6	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999959885983878	WITHOUT_CLASSIFICATION	4.011401612241153E-6	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9970176202939087	WITHOUT_CLASSIFICATION	0.0029823797060913385	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999886675510745	WITHOUT_CLASSIFICATION	1.1332448925534773E-5	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999999996218097	WITHOUT_CLASSIFICATION	3.781902912927343E-9	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999955661434405	WITHOUT_CLASSIFICATION	4.433856559462159E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999991552842927	WITHOUT_CLASSIFICATION	8.447157071974315E-7	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999998347350896	WITHOUT_CLASSIFICATION	1.6526491055044741E-7	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999996912835517	WITHOUT_CLASSIFICATION	3.087164483201539E-7	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999998247097821	WITHOUT_CLASSIFICATION	1.7529021797327937E-7	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999296892993	WITHOUT_CLASSIFICATION	7.03107006373263E-8	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999511268790217	WITHOUT_CLASSIFICATION	4.887312097845477E-5	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9990769005494702	WITHOUT_CLASSIFICATION	9.230994505297361E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999974690447	WITHOUT_CLASSIFICATION	2.530955315862854E-9	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996907184597	WITHOUT_CLASSIFICATION	3.092815403255369E-7	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998694659035	WITHOUT_CLASSIFICATION	1.3053409643822388E-7	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999430192416	WITHOUT_CLASSIFICATION	5.698075831092741E-8	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999995821260361	WITHOUT_CLASSIFICATION	4.178739639599709E-7	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999880175455	WITHOUT_CLASSIFICATION	1.1982454469143133E-8	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999100791987472	WITHOUT_CLASSIFICATION	8.992080125279905E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999571308794	WITHOUT_CLASSIFICATION	4.2869120529648124E-8	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999976818556029	WITHOUT_CLASSIFICATION	2.318144397139688E-6	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999999948745503	WITHOUT_CLASSIFICATION	5.125449694085349E-8	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999908779912	WITHOUT_CLASSIFICATION	9.122008786941429E-9	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999084630863	WITHOUT_CLASSIFICATION	9.153691373644787E-8	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999997531814027	WITHOUT_CLASSIFICATION	2.4681859729383793E-7	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999964056442173	WITHOUT_CLASSIFICATION	3.5943557827404336E-6	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999999960352622	WITHOUT_CLASSIFICATION	3.964737794767459E-8	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999937046101883	WITHOUT_CLASSIFICATION	6.295389811691275E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999912628704054	WITHOUT_CLASSIFICATION	8.737129594697937E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996230639538	WITHOUT_CLASSIFICATION	3.769360461357266E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999995298133663	WITHOUT_CLASSIFICATION	4.701866337143037E-7	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999957486873	WITHOUT_CLASSIFICATION	4.2513127427189916E-9	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9998861599836893	WITHOUT_CLASSIFICATION	1.1384001631059144E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999583771765	WITHOUT_CLASSIFICATION	4.162282360948089E-8	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999990277104719	WITHOUT_CLASSIFICATION	9.722895280715814E-7	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999622887696449	WITHOUT_CLASSIFICATION	3.771123035517508E-5	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999972917941391	WITHOUT_CLASSIFICATION	2.708205860899188E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999999273495953	WITHOUT_CLASSIFICATION	7.265040472285865E-8	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999552887632464	WITHOUT_CLASSIFICATION	4.471123675372389E-5	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999993228199896	WITHOUT_CLASSIFICATION	6.771800103949902E-7	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999992994876262	WITHOUT_CLASSIFICATION	7.005123737487764E-7	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9989013735921533	WITHOUT_CLASSIFICATION	0.001098626407846675	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9519146503026624	DEFECT	0.048085349697337645	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.99995195103172	WITHOUT_CLASSIFICATION	4.804896827999714E-5	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999943331996793	WITHOUT_CLASSIFICATION	5.6668003206415775E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996230639538	WITHOUT_CLASSIFICATION	3.769360461357266E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999984337012211	WITHOUT_CLASSIFICATION	1.5662987789064592E-6	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999762408797404	WITHOUT_CLASSIFICATION	2.3759120259647693E-5	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999994465463886	WITHOUT_CLASSIFICATION	5.534536114787109E-7	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998900926456	WITHOUT_CLASSIFICATION	1.0990735448929214E-7	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9997984112401462	WITHOUT_CLASSIFICATION	2.015887598536804E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9997989740208473	WITHOUT_CLASSIFICATION	2.0102597915270235E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999863156341178	WITHOUT_CLASSIFICATION	1.368436588230259E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997246545546	WITHOUT_CLASSIFICATION	2.753454454247128E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996907184597	WITHOUT_CLASSIFICATION	3.092815403255369E-7	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9915325093620756	WITHOUT_CLASSIFICATION	0.008467490637924428	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999995969354244	WITHOUT_CLASSIFICATION	4.030645756841691E-7	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999964775636	WITHOUT_CLASSIFICATION	3.5224363933290354E-8	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999640137578	WITHOUT_CLASSIFICATION	3.5986242161057074E-8	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999999455220534	WITHOUT_CLASSIFICATION	5.447794659748941E-7	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9995339836734819	WITHOUT_CLASSIFICATION	4.66016326518177E-4	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999996593997587	WITHOUT_CLASSIFICATION	3.4060024132697006E-7	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999997443517064	WITHOUT_CLASSIFICATION	2.55648293606664E-6	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9890287123789503	WITHOUT_CLASSIFICATION	0.01097128762104957	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999995312705601	WITHOUT_CLASSIFICATION	4.6872943992937346E-7	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998956603647	WITHOUT_CLASSIFICATION	1.0433963524448666E-7	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999997684455655	WITHOUT_CLASSIFICATION	2.3155443459907027E-7	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999937588281	WITHOUT_CLASSIFICATION	6.241171902562319E-8	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999937588281	WITHOUT_CLASSIFICATION	6.241171902562319E-8	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998984332317	WITHOUT_CLASSIFICATION	1.015667683202572E-7	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998960847861	WITHOUT_CLASSIFICATION	1.039152139320264E-7	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999939817321	WITHOUT_CLASSIFICATION	6.018267788100197E-9	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999999999801675	WITHOUT_CLASSIFICATION	1.9832503684282982E-10	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998745424653	WITHOUT_CLASSIFICATION	1.2545753466827177E-7	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999992174118829	WITHOUT_CLASSIFICATION	7.825881171013722E-7	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999972661532414	WITHOUT_CLASSIFICATION	2.7338467585924296E-5	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999998564239177	WITHOUT_CLASSIFICATION	1.4357608229968346E-6	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999996216495476	WITHOUT_CLASSIFICATION	3.7835045242102894E-7	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999929418239555	WITHOUT_CLASSIFICATION	7.058176044483524E-6	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9998725076354156	WITHOUT_CLASSIFICATION	1.2749236458446173E-4	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999829968149536	WITHOUT_CLASSIFICATION	1.7003185046271488E-5	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999744128237972	WITHOUT_CLASSIFICATION	2.5587176202842953E-5	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998901633973	WITHOUT_CLASSIFICATION	1.0983660271632977E-7	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9996935793787459	WITHOUT_CLASSIFICATION	3.0642062125402924E-4	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999479296826256	WITHOUT_CLASSIFICATION	5.207031737454922E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.99999339086052	WITHOUT_CLASSIFICATION	6.609139480096901E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999985690948	WITHOUT_CLASSIFICATION	1.4309051688674516E-9	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999989303644843	WITHOUT_CLASSIFICATION	1.0696355157035184E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999616080759	WITHOUT_CLASSIFICATION	3.839192405307264E-8	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9990285937237254	WITHOUT_CLASSIFICATION	9.714062762747057E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999687272408	WITHOUT_CLASSIFICATION	3.127275924724829E-8	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999982753360612	WITHOUT_CLASSIFICATION	1.7246639388333083E-6	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999862451859897	WITHOUT_CLASSIFICATION	1.375481401033378E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999999605708223	WITHOUT_CLASSIFICATION	3.9429177593089765E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995126465835	WITHOUT_CLASSIFICATION	4.873534165718513E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9996721567448579	WITHOUT_CLASSIFICATION	3.2784325514210414E-4	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999972687578793	WITHOUT_CLASSIFICATION	2.7312421206401546E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999965727806095	WITHOUT_CLASSIFICATION	3.4272193905871817E-6	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999877563423055	WITHOUT_CLASSIFICATION	1.2243657694499194E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9935288677646075	WITHOUT_CLASSIFICATION	0.006471132235392523	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999052631988684	WITHOUT_CLASSIFICATION	9.473680113160907E-5	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999565871907	WITHOUT_CLASSIFICATION	4.3412809293839946E-8	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999887239918148	WITHOUT_CLASSIFICATION	1.1276008185101321E-5	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999997747339952	WITHOUT_CLASSIFICATION	2.2526600472066327E-7	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999982998998989	WITHOUT_CLASSIFICATION	1.7001001011127715E-6	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999934847736669	WITHOUT_CLASSIFICATION	6.51522633306617E-6	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999969544594536	WITHOUT_CLASSIFICATION	3.045540546506404E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999630890034	WITHOUT_CLASSIFICATION	3.6910996656578473E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996209820481	WITHOUT_CLASSIFICATION	3.7901795193277655E-7	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954745159869	WITHOUT_CLASSIFICATION	4.5254840130808896E-6	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999538669453	WITHOUT_CLASSIFICATION	4.613305466325177E-8	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999347589429739	WITHOUT_CLASSIFICATION	6.524105702615896E-5	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999984412844025	WITHOUT_CLASSIFICATION	1.5587155975094496E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999992666029962	WITHOUT_CLASSIFICATION	7.333970038476184E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999696581446496	WITHOUT_CLASSIFICATION	3.0341855350394595E-5	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9983258852103443	WITHOUT_CLASSIFICATION	0.0016741147896557637	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999506093751	WITHOUT_CLASSIFICATION	4.9390624941150406E-8	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999609846056	WITHOUT_CLASSIFICATION	3.901539426939352E-8	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998627054131	WITHOUT_CLASSIFICATION	1.3729458686091428E-7	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805752997737	WITHOUT_CLASSIFICATION	1.942470022634672E-5	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999947537739	WITHOUT_CLASSIFICATION	5.246226119437954E-9	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999114902767	WITHOUT_CLASSIFICATION	8.850972335329488E-8	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999994022113504	WITHOUT_CLASSIFICATION	5.977886495261371E-7	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999995031909771	WITHOUT_CLASSIFICATION	4.968090228539618E-7	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9998611899057385	WITHOUT_CLASSIFICATION	1.3881009426151597E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999947197517279	WITHOUT_CLASSIFICATION	5.280248271975374E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.999999849423642	WITHOUT_CLASSIFICATION	1.505763580991279E-7	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.99999708478616	WITHOUT_CLASSIFICATION	2.915213839977138E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999606808550973	WITHOUT_CLASSIFICATION	3.931914490277659E-5	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999787955213542	WITHOUT_CLASSIFICATION	2.1204478645760822E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999996787841766	WITHOUT_CLASSIFICATION	3.2121582339198993E-6	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999994874062447	WITHOUT_CLASSIFICATION	5.125937552785258E-7	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999954864967	WITHOUT_CLASSIFICATION	4.51350339395244E-9	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999983973751502	WITHOUT_CLASSIFICATION	1.6026248499025299E-6	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999901589963813	WITHOUT_CLASSIFICATION	9.841003618656996E-6	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998328857068	WITHOUT_CLASSIFICATION	1.6711429318588935E-7	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999999512147001	WITHOUT_CLASSIFICATION	4.878529990714527E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998485464887	WITHOUT_CLASSIFICATION	1.5145351130614505E-7	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999200732878	WITHOUT_CLASSIFICATION	7.992671227725866E-8	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998485464887	WITHOUT_CLASSIFICATION	1.5145351130614505E-7	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999911017319002	WITHOUT_CLASSIFICATION	8.89826809979667E-6	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999980129310098	WITHOUT_CLASSIFICATION	1.987068990151789E-6	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999984633000677	WITHOUT_CLASSIFICATION	1.5366999322355575E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999403842205	WITHOUT_CLASSIFICATION	5.961577954622382E-8	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999993287353791	WITHOUT_CLASSIFICATION	6.712646208817854E-7	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999998384733793	WITHOUT_CLASSIFICATION	1.6152662062303703E-7	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999961824779748	WITHOUT_CLASSIFICATION	3.817522025097595E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999998967898193	WITHOUT_CLASSIFICATION	1.0321018072557202E-7	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9996011408003732	WITHOUT_CLASSIFICATION	3.9885919962682006E-4	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998800593753	WITHOUT_CLASSIFICATION	1.1994062455688363E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999999842516731	WITHOUT_CLASSIFICATION	1.5748326897679353E-7	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999953531245119	WITHOUT_CLASSIFICATION	4.646875488000518E-6	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999996869929	WITHOUT_CLASSIFICATION	3.1300709269286513E-10	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999713943497771	WITHOUT_CLASSIFICATION	2.8605650222920667E-5	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9998726235445901	WITHOUT_CLASSIFICATION	1.2737645540999998E-4	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999537649897	WITHOUT_CLASSIFICATION	4.623501024899391E-8	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999997524385441	WITHOUT_CLASSIFICATION	2.4756145589186715E-7	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999996167107776	WITHOUT_CLASSIFICATION	3.8328922234361985E-7	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999971156913	WITHOUT_CLASSIFICATION	2.884308733050603E-9	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999852886104	WITHOUT_CLASSIFICATION	1.4711389539465432E-8	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999970793863541	WITHOUT_CLASSIFICATION	2.9206136459892374E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999969210501835	WITHOUT_CLASSIFICATION	3.0789498165872972E-6	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9976019521423537	WITHOUT_CLASSIFICATION	0.002398047857646341	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999867133791298	WITHOUT_CLASSIFICATION	1.3286620870186316E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999999803165687	WITHOUT_CLASSIFICATION	1.9683431290037804E-7	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996846219996409	WITHOUT_CLASSIFICATION	3.153780003590457E-4	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999616337289085	WITHOUT_CLASSIFICATION	3.836627109155928E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999933648956226	WITHOUT_CLASSIFICATION	6.635104377276185E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999944971155	WITHOUT_CLASSIFICATION	5.502884507188575E-8	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9998839571278121	WITHOUT_CLASSIFICATION	1.1604287218792613E-4	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999861581692422	WITHOUT_CLASSIFICATION	1.3841830757835706E-5	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9897354459248756	WITHOUT_CLASSIFICATION	0.010264554075124352	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9975089381887222	WITHOUT_CLASSIFICATION	0.0024910618112778025	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999682664416486	WITHOUT_CLASSIFICATION	3.173355835150273E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999788496446885	WITHOUT_CLASSIFICATION	2.1150355311518874E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999962545544937	WITHOUT_CLASSIFICATION	3.7454455063568265E-6	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999956007017782	WITHOUT_CLASSIFICATION	4.39929822183578E-6	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999689114399	WITHOUT_CLASSIFICATION	3.1088560051450316E-8	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999483634151456	WITHOUT_CLASSIFICATION	5.163658485439281E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999998020378859	WITHOUT_CLASSIFICATION	1.979621141026111E-7	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999997819138088	WITHOUT_CLASSIFICATION	2.1808619116230744E-7	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999522390032125	WITHOUT_CLASSIFICATION	4.776099678757412E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993559415259096	WITHOUT_CLASSIFICATION	6.440584740904414E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996846219996409	WITHOUT_CLASSIFICATION	3.153780003590457E-4	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999343451349367	WITHOUT_CLASSIFICATION	6.565486506325849E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999964607934838	WITHOUT_CLASSIFICATION	3.5392065160753184E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9988496486429501	WITHOUT_CLASSIFICATION	0.0011503513570497803	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999917994538912	WITHOUT_CLASSIFICATION	8.200546108802507E-5	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999994591549167	WITHOUT_CLASSIFICATION	5.408450833109853E-7	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999990805396357	WITHOUT_CLASSIFICATION	9.194603643710183E-7	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999998676754142	WITHOUT_CLASSIFICATION	1.323245859255558E-7	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9704995143154379	DEFECT	0.029500485684562053	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998865475807	WITHOUT_CLASSIFICATION	1.1345241938134624E-7	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999671860044127	WITHOUT_CLASSIFICATION	3.281399558724754E-5	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999965592027066	WITHOUT_CLASSIFICATION	3.4407972934652875E-6	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999999984007256	WITHOUT_CLASSIFICATION	1.5992744041437594E-8	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999796369837898	WITHOUT_CLASSIFICATION	2.0363016210201887E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999804982367642	WITHOUT_CLASSIFICATION	1.9501763235881792E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.999999801822301	WITHOUT_CLASSIFICATION	1.9817769899911282E-7	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999994551413	WITHOUT_CLASSIFICATION	5.448587342384312E-10	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999457347332	WITHOUT_CLASSIFICATION	5.426526686627092E-8	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999486029797	WITHOUT_CLASSIFICATION	5.139702024082683E-8	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999971300524138	WITHOUT_CLASSIFICATION	2.8699475861591836E-6	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999343451349367	WITHOUT_CLASSIFICATION	6.565486506325849E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999872053416303	WITHOUT_CLASSIFICATION	1.2794658369568845E-5	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9996563962076301	WITHOUT_CLASSIFICATION	3.4360379236978166E-4	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999989374266736	WITHOUT_CLASSIFICATION	1.0625733264474162E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997574225803	WITHOUT_CLASSIFICATION	2.4257741966445044E-7	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9998595430640448	WITHOUT_CLASSIFICATION	1.404569359553021E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997541077973091	WITHOUT_CLASSIFICATION	2.4589220269082115E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997541077973091	WITHOUT_CLASSIFICATION	2.4589220269082115E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999994745125686	WITHOUT_CLASSIFICATION	5.254874314122211E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997541077973091	WITHOUT_CLASSIFICATION	2.4589220269082115E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997541077973091	WITHOUT_CLASSIFICATION	2.4589220269082115E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9938878703089034	WITHOUT_CLASSIFICATION	0.006112129691096626	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9989264852474251	WITHOUT_CLASSIFICATION	0.0010735147525748024	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999641663561	WITHOUT_CLASSIFICATION	3.583364403893476E-8	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999999796195231	WITHOUT_CLASSIFICATION	2.0380476904825054E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9966178737595749	WITHOUT_CLASSIFICATION	0.0033821262404251217	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999995565729589	WITHOUT_CLASSIFICATION	4.434270410470935E-7	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9924445113433615	WITHOUT_CLASSIFICATION	0.007555488656638407	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999998951387187	WITHOUT_CLASSIFICATION	1.0486128135979026E-7	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999755798528145	WITHOUT_CLASSIFICATION	2.442014718551852E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999957711903958	WITHOUT_CLASSIFICATION	4.228809604129453E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999949299706989	WITHOUT_CLASSIFICATION	5.070029301052855E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999506919590349	WITHOUT_CLASSIFICATION	4.930804096510453E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999989799613784	WITHOUT_CLASSIFICATION	1.0200386215460557E-6	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999984476728113	WITHOUT_CLASSIFICATION	1.5523271886612158E-6	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999999663782967	WITHOUT_CLASSIFICATION	3.362170329801911E-7	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.992711850347546	WITHOUT_CLASSIFICATION	0.007288149652453944	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996269677484	WITHOUT_CLASSIFICATION	3.730322517208428E-7	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998990133070276	WITHOUT_CLASSIFICATION	1.0098669297250913E-4	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9995598454999852	WITHOUT_CLASSIFICATION	4.4015450001477844E-4	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999980064338141	WITHOUT_CLASSIFICATION	1.9935661858801468E-6	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999995717212876	WITHOUT_CLASSIFICATION	4.282787123705893E-7	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999976218423533	WITHOUT_CLASSIFICATION	2.378157646742199E-6	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996269677484	WITHOUT_CLASSIFICATION	3.730322517208428E-7	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999616337289085	WITHOUT_CLASSIFICATION	3.836627109155928E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999698508074613	WITHOUT_CLASSIFICATION	3.014919253879977E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999169315621	WITHOUT_CLASSIFICATION	8.306843784793112E-8	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999409872592	WITHOUT_CLASSIFICATION	5.901274072745003E-8	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999978370443217	WITHOUT_CLASSIFICATION	2.162955678297155E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.99997161168264	WITHOUT_CLASSIFICATION	2.8388317359938195E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999997313490215	WITHOUT_CLASSIFICATION	2.686509785307188E-7	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9995604909920599	WITHOUT_CLASSIFICATION	4.3950900794009523E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998390035066	WITHOUT_CLASSIFICATION	1.6099649322944072E-7	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999999988046154	WITHOUT_CLASSIFICATION	1.1953845970173789E-8	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999822258375625	WITHOUT_CLASSIFICATION	1.7774162437496684E-5	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999919427171902	WITHOUT_CLASSIFICATION	8.057282809738177E-6	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999996000289989	WITHOUT_CLASSIFICATION	3.999710011409698E-7	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999947935405	WITHOUT_CLASSIFICATION	5.2064595181260465E-9	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998175070002061	WITHOUT_CLASSIFICATION	1.8249299979399586E-4	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999978100005	WITHOUT_CLASSIFICATION	2.1899994450805463E-9	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999993751293357	WITHOUT_CLASSIFICATION	6.248706643107234E-6	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999903498620647	WITHOUT_CLASSIFICATION	9.650137935298345E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999996178885521	WITHOUT_CLASSIFICATION	3.821114478902463E-7	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999982547271142	WITHOUT_CLASSIFICATION	1.7452728857586498E-6	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9997734465648697	WITHOUT_CLASSIFICATION	2.265534351302682E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999999555099822	WITHOUT_CLASSIFICATION	4.449001770247741E-8	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999997253655213	WITHOUT_CLASSIFICATION	2.7463447879068975E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998390035066	WITHOUT_CLASSIFICATION	1.6099649322944072E-7	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999459703561	WITHOUT_CLASSIFICATION	5.4029643992461E-8	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999999119519719	WITHOUT_CLASSIFICATION	8.804802813227563E-8	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999925548380475	WITHOUT_CLASSIFICATION	7.445161952458836E-6	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999999322520108	WITHOUT_CLASSIFICATION	6.774798913511918E-8	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999971095323	WITHOUT_CLASSIFICATION	2.8904676916022645E-8	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999985888433011	WITHOUT_CLASSIFICATION	1.4111566989754988E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999974655342974	WITHOUT_CLASSIFICATION	2.5344657026991125E-6	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999999408971129	WITHOUT_CLASSIFICATION	5.9102887203818094E-8	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999997200250171	WITHOUT_CLASSIFICATION	2.799749828453618E-7	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999784200342341	WITHOUT_CLASSIFICATION	2.1579965765969297E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999737115126	WITHOUT_CLASSIFICATION	2.6288487415219475E-8	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999976914971007	WITHOUT_CLASSIFICATION	2.308502899297965E-6	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999981268053645	WITHOUT_CLASSIFICATION	1.8731946354367522E-6	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999999594463	WITHOUT_CLASSIFICATION	4.0553629775438145E-11	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999991439148851	WITHOUT_CLASSIFICATION	8.560851150613275E-7	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999717356503709	WITHOUT_CLASSIFICATION	2.8264349629113248E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994012859431	WITHOUT_CLASSIFICATION	5.987140569917786E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999737115126	WITHOUT_CLASSIFICATION	2.6288487415219475E-8	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999778604663	WITHOUT_CLASSIFICATION	2.2139533668003698E-8	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9996907123381572	WITHOUT_CLASSIFICATION	3.0928766184281357E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999996693479348	WITHOUT_CLASSIFICATION	3.306520651655563E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999999241162643	WITHOUT_CLASSIFICATION	7.588373571587247E-8	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999634426356376	WITHOUT_CLASSIFICATION	3.655736436240351E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999461971523	WITHOUT_CLASSIFICATION	5.380284778120119E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999991439148851	WITHOUT_CLASSIFICATION	8.560851150613275E-7	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999967115653875	WITHOUT_CLASSIFICATION	3.2884346125005833E-6	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983177455442	WITHOUT_CLASSIFICATION	1.6822544557742339E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999763964145	WITHOUT_CLASSIFICATION	2.3603585569455017E-8	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992416395156	WITHOUT_CLASSIFICATION	7.583604843792272E-7	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989893516567	WITHOUT_CLASSIFICATION	1.0106483434291334E-6	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998990634844	WITHOUT_CLASSIFICATION	1.009365155385468E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999104344072	WITHOUT_CLASSIFICATION	8.956559279069704E-8	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999104344072	WITHOUT_CLASSIFICATION	8.956559279069704E-8	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999892955191515	WITHOUT_CLASSIFICATION	1.070448084850173E-5	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999993293867462	WITHOUT_CLASSIFICATION	6.706132538713831E-7	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999993753452275	WITHOUT_CLASSIFICATION	6.246547723772651E-7	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999835996617455	WITHOUT_CLASSIFICATION	1.6400338254421504E-5	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9810877128864963	WITHOUT_CLASSIFICATION	0.01891228711350368	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998711111884	WITHOUT_CLASSIFICATION	1.2888881170817525E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967924403066	WITHOUT_CLASSIFICATION	3.2075596934798783E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989709335179	WITHOUT_CLASSIFICATION	1.0290664820630707E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999993030648386	WITHOUT_CLASSIFICATION	6.969351614206949E-7	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964740416261	WITHOUT_CLASSIFICATION	3.525958373915024E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998711111884	WITHOUT_CLASSIFICATION	1.2888881170817525E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967924403066	WITHOUT_CLASSIFICATION	3.2075596934798783E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989709335179	WITHOUT_CLASSIFICATION	1.0290664820630707E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999998430799603	WITHOUT_CLASSIFICATION	1.5692003973590766E-7	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999986985801409	WITHOUT_CLASSIFICATION	1.3014198591616942E-6	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.99998401666965	WITHOUT_CLASSIFICATION	1.598333035005559E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999998754681793	WITHOUT_CLASSIFICATION	1.2453182069995638E-6	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999693171389	WITHOUT_CLASSIFICATION	3.0682861214616585E-8	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9996006631843101	WITHOUT_CLASSIFICATION	3.993368156899481E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999927119553125	WITHOUT_CLASSIFICATION	7.288044687477874E-6	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999998535634365	WITHOUT_CLASSIFICATION	1.4643656350062154E-7	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999937483173749	WITHOUT_CLASSIFICATION	6.2516826251455675E-6	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999994744807424	WITHOUT_CLASSIFICATION	5.255192576260563E-7	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999955511144	WITHOUT_CLASSIFICATION	4.448885696032166E-9	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9994072490745545	WITHOUT_CLASSIFICATION	5.927509254455251E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997868319812214	WITHOUT_CLASSIFICATION	2.1316801877853422E-4	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999997776157337	WITHOUT_CLASSIFICATION	2.223842663593757E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999986119249727	WITHOUT_CLASSIFICATION	1.3880750272371477E-6	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999806682653612	WITHOUT_CLASSIFICATION	1.933173463873483E-5	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999999564041875	WITHOUT_CLASSIFICATION	4.3595812581410147E-8	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999993801437133	WITHOUT_CLASSIFICATION	6.198562866944215E-6	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999994877136504	WITHOUT_CLASSIFICATION	5.122863495252993E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999999882572499	WITHOUT_CLASSIFICATION	1.1742750094602928E-7	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999991603295355	WITHOUT_CLASSIFICATION	8.3967046455363E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998507755946414	WITHOUT_CLASSIFICATION	1.4922440535853414E-4	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999588146313	WITHOUT_CLASSIFICATION	4.118536865844045E-8	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999999509914377	WITHOUT_CLASSIFICATION	4.900856229012449E-7	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999915150294	WITHOUT_CLASSIFICATION	8.484970561012314E-9	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999889774374265	WITHOUT_CLASSIFICATION	1.1022562573486541E-5	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980537962715	WITHOUT_CLASSIFICATION	1.946203728429108E-6	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975968890212	WITHOUT_CLASSIFICATION	2.4031109787610296E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999888090125	WITHOUT_CLASSIFICATION	1.1190987350140443E-8	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990870243047	WITHOUT_CLASSIFICATION	9.129756951734459E-7	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999952272294903	WITHOUT_CLASSIFICATION	4.7727705096932425E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993663266119	WITHOUT_CLASSIFICATION	6.336733881745669E-7	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993663266119	WITHOUT_CLASSIFICATION	6.336733881745669E-7	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999958248955	WITHOUT_CLASSIFICATION	4.175104535479005E-9	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999006829157	WITHOUT_CLASSIFICATION	9.931708430993984E-8	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999997343179975	WITHOUT_CLASSIFICATION	2.656820025167103E-7	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999968093524547	WITHOUT_CLASSIFICATION	3.1906475453024054E-5	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999999764679272	WITHOUT_CLASSIFICATION	2.353207278719554E-8	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999965129190257	WITHOUT_CLASSIFICATION	3.487080974303066E-6	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9999528778238985	WITHOUT_CLASSIFICATION	4.712217610137676E-5	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999999907042606	WITHOUT_CLASSIFICATION	9.295739329208254E-9	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999991919434853	WITHOUT_CLASSIFICATION	8.080565146683698E-7	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999482937532	WITHOUT_CLASSIFICATION	5.170624693745719E-8	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998285140614	WITHOUT_CLASSIFICATION	1.7148593861052268E-7	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986982636427	WITHOUT_CLASSIFICATION	1.3017363572560507E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999103613925	WITHOUT_CLASSIFICATION	8.963860748420963E-8	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999631107952	WITHOUT_CLASSIFICATION	3.6889204743994346E-8	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998308384684	WITHOUT_CLASSIFICATION	1.691615315127118E-7	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998717618065	WITHOUT_CLASSIFICATION	1.2823819359152043E-7	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998453404145	WITHOUT_CLASSIFICATION	1.5465958551555474E-7	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994335244423	WITHOUT_CLASSIFICATION	5.664755577140965E-7	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992108212303	WITHOUT_CLASSIFICATION	7.891787696285913E-7	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999754709923	WITHOUT_CLASSIFICATION	2.4529007676120955E-8	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999991703624682	WITHOUT_CLASSIFICATION	8.29637531782279E-7	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9988999634969371	WITHOUT_CLASSIFICATION	0.001100036503062899	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999884973265146	WITHOUT_CLASSIFICATION	1.1502673485236109E-5	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999985688432637	WITHOUT_CLASSIFICATION	1.4311567362860796E-6	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999791475357	WITHOUT_CLASSIFICATION	2.085246437674936E-8	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999996397189808	WITHOUT_CLASSIFICATION	3.602810192219804E-7	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999953543319	WITHOUT_CLASSIFICATION	4.645668057279469E-9	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999949261083712	WITHOUT_CLASSIFICATION	5.073891628835366E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999884973265146	WITHOUT_CLASSIFICATION	1.1502673485236109E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999884973265146	WITHOUT_CLASSIFICATION	1.1502673485236109E-5	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999997656618371	WITHOUT_CLASSIFICATION	2.343381628989073E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999999720076866	WITHOUT_CLASSIFICATION	2.799231340944818E-7	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999997398331	WITHOUT_CLASSIFICATION	2.6016690169899373E-9	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999978203777627	WITHOUT_CLASSIFICATION	2.1796222373484193E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999995273913179	WITHOUT_CLASSIFICATION	4.726086820063575E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999999882572499	WITHOUT_CLASSIFICATION	1.1742750094602928E-7	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999952434193	WITHOUT_CLASSIFICATION	4.756580623743768E-9	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9998305981919562	WITHOUT_CLASSIFICATION	1.6940180804376969E-4	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999996966563699	WITHOUT_CLASSIFICATION	3.033436300982469E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985212490012	WITHOUT_CLASSIFICATION	1.478750998769099E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999958510423969	WITHOUT_CLASSIFICATION	4.1489576032249E-6	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926872075788	WITHOUT_CLASSIFICATION	7.312792421227981E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991802774612	WITHOUT_CLASSIFICATION	8.197225388087611E-7	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991802774612	WITHOUT_CLASSIFICATION	8.197225388087611E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999362666223	WITHOUT_CLASSIFICATION	6.373337768089906E-8	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999362666223	WITHOUT_CLASSIFICATION	6.373337768089906E-8	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983491376883	WITHOUT_CLASSIFICATION	1.6508623117616282E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991001253269	WITHOUT_CLASSIFICATION	8.99874673218033E-7	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999846557858342	WITHOUT_CLASSIFICATION	1.534421416583242E-5	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993423371656	WITHOUT_CLASSIFICATION	6.576628343460881E-7	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999804777494914	WITHOUT_CLASSIFICATION	1.9522250508670116E-5	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998703874168853	WITHOUT_CLASSIFICATION	1.296125831147434E-4	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999643201326682	WITHOUT_CLASSIFICATION	3.567986733178867E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921584107959	WITHOUT_CLASSIFICATION	7.841589204092827E-6	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999932629524296	WITHOUT_CLASSIFICATION	6.737047570353065E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.999999988494866	WITHOUT_CLASSIFICATION	1.1505133928266278E-8	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999905164532	WITHOUT_CLASSIFICATION	9.483546803526736E-9	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999752978922035	WITHOUT_CLASSIFICATION	2.470210779640046E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999996849260124	WITHOUT_CLASSIFICATION	3.1507398761352157E-7	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999945396312536	WITHOUT_CLASSIFICATION	5.460368746439502E-6	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.999999073441805	WITHOUT_CLASSIFICATION	9.26558194958374E-7	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999936823397138	WITHOUT_CLASSIFICATION	6.317660286247153E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.999999467682397	WITHOUT_CLASSIFICATION	5.323176031012884E-7	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.999999467682397	WITHOUT_CLASSIFICATION	5.323176031012884E-7	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999958214593	WITHOUT_CLASSIFICATION	4.178540800582288E-9	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.99987797092287	WITHOUT_CLASSIFICATION	1.2202907712998788E-4	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999964396377	WITHOUT_CLASSIFICATION	3.560362380985571E-9	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999792464451576	WITHOUT_CLASSIFICATION	2.0753554842448342E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979307548963	WITHOUT_CLASSIFICATION	2.0692451037064202E-6	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992208023416	WITHOUT_CLASSIFICATION	7.79197658503084E-7	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999993176117407	WITHOUT_CLASSIFICATION	6.823882592758743E-7	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998793444473528	WITHOUT_CLASSIFICATION	1.206555526471663E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999995764928094	WITHOUT_CLASSIFICATION	4.2350719069557206E-7	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999824413152	WITHOUT_CLASSIFICATION	1.7558684873130082E-8	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999985088201877	WITHOUT_CLASSIFICATION	1.491179812249937E-6	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9992384461306958	WITHOUT_CLASSIFICATION	7.615538693042225E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977936407736	WITHOUT_CLASSIFICATION	2.206359226433832E-6	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999926518972897	WITHOUT_CLASSIFICATION	7.348102710208922E-6	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999991664666736	WITHOUT_CLASSIFICATION	8.335333263651076E-7	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998854458716586	WITHOUT_CLASSIFICATION	1.1455412834138945E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999368551843	WITHOUT_CLASSIFICATION	6.314481573354937E-8	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999649926502084	WITHOUT_CLASSIFICATION	3.500734979148995E-5	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999142900817943	WITHOUT_CLASSIFICATION	8.570991820572466E-5	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999989649106421	WITHOUT_CLASSIFICATION	1.0350893579637199E-6	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999985445052	WITHOUT_CLASSIFICATION	1.4554948132022654E-9	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999588336985733	WITHOUT_CLASSIFICATION	4.116630142665786E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999995469904703	WITHOUT_CLASSIFICATION	4.5300952966951135E-7	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999857236666	WITHOUT_CLASSIFICATION	1.4276333568395257E-8	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998997218046	WITHOUT_CLASSIFICATION	1.0027819550169813E-7	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999373872428252	WITHOUT_CLASSIFICATION	6.261275717479677E-5	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999497717925322	WITHOUT_CLASSIFICATION	5.0228207467756564E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999589488875372	WITHOUT_CLASSIFICATION	4.105111246280159E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999995656301	WITHOUT_CLASSIFICATION	4.3436989520808215E-9	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999981870548639	WITHOUT_CLASSIFICATION	1.8129451360879935E-6	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999973567101728	WITHOUT_CLASSIFICATION	2.6432898272344284E-6	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999997243716037	WITHOUT_CLASSIFICATION	2.7562839629202774E-6	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999663619232105	WITHOUT_CLASSIFICATION	3.363807678950884E-5	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999958110418437	WITHOUT_CLASSIFICATION	4.18895815636736E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999710216306282	WITHOUT_CLASSIFICATION	2.89783693717167E-5	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999932179925937	WITHOUT_CLASSIFICATION	6.782007406325289E-6	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999992103001253	WITHOUT_CLASSIFICATION	7.896998748010666E-7	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999996685652544	WITHOUT_CLASSIFICATION	3.314347457068298E-7	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999448645834	WITHOUT_CLASSIFICATION	5.51354166826523E-8	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.999999942518988	WITHOUT_CLASSIFICATION	5.748101191132477E-8	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999996798051463	WITHOUT_CLASSIFICATION	3.201948536482619E-7	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999993476228305	WITHOUT_CLASSIFICATION	6.523771694979262E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.999202949027082	WITHOUT_CLASSIFICATION	7.970509729179938E-4	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999984017376804	WITHOUT_CLASSIFICATION	1.5982623196160522E-6	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999998937295964	WITHOUT_CLASSIFICATION	1.062704036006729E-6	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998678578640868	WITHOUT_CLASSIFICATION	1.3214213591313879E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999999088273088	WITHOUT_CLASSIFICATION	9.11726911483647E-8	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999955306296511	WITHOUT_CLASSIFICATION	4.469370348920624E-6	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999939670590671	WITHOUT_CLASSIFICATION	6.032940933034165E-6	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999995850609256	WITHOUT_CLASSIFICATION	4.149390743428609E-7	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999984891907227	WITHOUT_CLASSIFICATION	1.5108092773052475E-6	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999993444238257	WITHOUT_CLASSIFICATION	6.55576174300974E-6	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999999477225627	WITHOUT_CLASSIFICATION	5.227743729892338E-7	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999578501020315	WITHOUT_CLASSIFICATION	4.214989796844419E-5	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999984513654692	WITHOUT_CLASSIFICATION	1.548634530756655E-6	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.999990207330157	WITHOUT_CLASSIFICATION	9.79266984308215E-6	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999983756939586	WITHOUT_CLASSIFICATION	1.6243060414188526E-6	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999904863805076	WITHOUT_CLASSIFICATION	9.513619492509908E-6	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999705682874	WITHOUT_CLASSIFICATION	2.943171262537063E-8	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999964689919064	WITHOUT_CLASSIFICATION	3.531008093496856E-6	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999960389458183	WITHOUT_CLASSIFICATION	3.961054181686146E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999994399204261	WITHOUT_CLASSIFICATION	5.600795740390457E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999968928678	WITHOUT_CLASSIFICATION	3.1071320921977885E-9	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999998614439758	WITHOUT_CLASSIFICATION	1.385560242187347E-7	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999637815535	WITHOUT_CLASSIFICATION	3.6218446481665944E-8	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999993161869072	WITHOUT_CLASSIFICATION	6.838130928197948E-7	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999850656648215	WITHOUT_CLASSIFICATION	1.493433517851266E-5	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999997986003293	WITHOUT_CLASSIFICATION	2.0139967067647538E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999635212426533	WITHOUT_CLASSIFICATION	3.6478757346628524E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999635212426533	WITHOUT_CLASSIFICATION	3.6478757346628524E-5	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999143578521	WITHOUT_CLASSIFICATION	8.564214794905261E-8	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999001455097	WITHOUT_CLASSIFICATION	9.98544902903897E-8	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999983775156328	WITHOUT_CLASSIFICATION	1.622484367102158E-6	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999984169608306	WITHOUT_CLASSIFICATION	1.5830391694396959E-6	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999937605917618	WITHOUT_CLASSIFICATION	6.239408238108566E-6	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999994006848534	WITHOUT_CLASSIFICATION	5.993151466290264E-7	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999998225923935	WITHOUT_CLASSIFICATION	1.774076064189754E-7	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999896510971277	WITHOUT_CLASSIFICATION	1.0348902872323946E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998832643776528	WITHOUT_CLASSIFICATION	1.1673562234711857E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999998132223774	WITHOUT_CLASSIFICATION	1.8677762261807368E-7	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999996013454496	WITHOUT_CLASSIFICATION	3.986545503780453E-7	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999997913165605	WITHOUT_CLASSIFICATION	2.0868343950108196E-6	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999994830559775	WITHOUT_CLASSIFICATION	5.169440225367559E-7	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999958807834	WITHOUT_CLASSIFICATION	4.11921663731486E-9	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999970872359109	WITHOUT_CLASSIFICATION	2.9127640891797615E-6	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999909387936291	WITHOUT_CLASSIFICATION	9.061206370865641E-6	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999973864131673	WITHOUT_CLASSIFICATION	2.6135868327668176E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.997969247211065	WITHOUT_CLASSIFICATION	0.0020307527889349697	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999993345952362	WITHOUT_CLASSIFICATION	6.65404763811561E-7	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999999921566253	WITHOUT_CLASSIFICATION	7.843374706037703E-8	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999952697369272	WITHOUT_CLASSIFICATION	4.730263072876241E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999997885323124	WITHOUT_CLASSIFICATION	2.1146768766758727E-7	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999731816196019	WITHOUT_CLASSIFICATION	2.6818380398008496E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999924258304518	WITHOUT_CLASSIFICATION	7.574169548329471E-6	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999977044800483	WITHOUT_CLASSIFICATION	2.2955199517009864E-5	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.999993385829228	WITHOUT_CLASSIFICATION	6.614170771929863E-6	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999974469771525	WITHOUT_CLASSIFICATION	2.55302284750282E-6	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999780179703753	WITHOUT_CLASSIFICATION	2.1982029624703458E-5	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999998531048752	WITHOUT_CLASSIFICATION	1.468951248200924E-7	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999968250486	WITHOUT_CLASSIFICATION	3.174951354373763E-9	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999999827114207	WITHOUT_CLASSIFICATION	1.728857934411075E-8	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999129053795	WITHOUT_CLASSIFICATION	8.709462041775519E-8	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999998223929747	WITHOUT_CLASSIFICATION	1.7760702534607246E-7	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999987944692359	WITHOUT_CLASSIFICATION	1.2055307640073518E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999715663408645	WITHOUT_CLASSIFICATION	2.8433659135447734E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999715663408645	WITHOUT_CLASSIFICATION	2.8433659135447734E-5	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999953850867457	WITHOUT_CLASSIFICATION	4.614913254377775E-6	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999973040970476	WITHOUT_CLASSIFICATION	2.6959029524465155E-6	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999815948670071	WITHOUT_CLASSIFICATION	1.8405132992844873E-5	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999995125940877	WITHOUT_CLASSIFICATION	4.874059122963028E-6	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999969721	WITHOUT_CLASSIFICATION	3.027976282329474E-12	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999639141220905	WITHOUT_CLASSIFICATION	3.608587790947387E-5	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999951000875396	WITHOUT_CLASSIFICATION	4.899912460380514E-6	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999984250558237	WITHOUT_CLASSIFICATION	1.574944176306083E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998564545207024	WITHOUT_CLASSIFICATION	1.4354547929755466E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999989276899441	WITHOUT_CLASSIFICATION	1.0723100559145388E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9993576795259961	WITHOUT_CLASSIFICATION	6.423204740039036E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999935721209103	WITHOUT_CLASSIFICATION	6.4278790896458226E-6	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999932854201489	WITHOUT_CLASSIFICATION	6.714579851058373E-6	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999980090136191	WITHOUT_CLASSIFICATION	1.9909863808038336E-6	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999998648658757	WITHOUT_CLASSIFICATION	1.3513412421161577E-7	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995389168073993	WITHOUT_CLASSIFICATION	4.610831926006706E-4	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995389168073993	WITHOUT_CLASSIFICATION	4.610831926006706E-4	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999332658989664	WITHOUT_CLASSIFICATION	6.673410103364873E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999799044553944	WITHOUT_CLASSIFICATION	2.009554460558369E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999910072178306	WITHOUT_CLASSIFICATION	8.992782169369627E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999662363678	WITHOUT_CLASSIFICATION	3.376363218546946E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999752978922035	WITHOUT_CLASSIFICATION	2.470210779640046E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996472389447413	WITHOUT_CLASSIFICATION	3.527610552586672E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999506748285	WITHOUT_CLASSIFICATION	4.932517146254299E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999996032296836	WITHOUT_CLASSIFICATION	3.9677031640923053E-7	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999996032296836	WITHOUT_CLASSIFICATION	3.9677031640923053E-7	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999987274347951	WITHOUT_CLASSIFICATION	1.2725652049016726E-5	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999997765566084	WITHOUT_CLASSIFICATION	2.2344339165138804E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999999109681952	WITHOUT_CLASSIFICATION	8.903180475721691E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9996816071826982	WITHOUT_CLASSIFICATION	3.1839281730188516E-4	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.999999895886864	WITHOUT_CLASSIFICATION	1.0411313605972015E-7	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999882292467722	WITHOUT_CLASSIFICATION	1.1770753227794841E-5	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999988743375943	WITHOUT_CLASSIFICATION	1.1256624057811109E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999276730039	WITHOUT_CLASSIFICATION	7.232699608953283E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999942219163	WITHOUT_CLASSIFICATION	5.77808374925458E-9	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999881270819309	WITHOUT_CLASSIFICATION	1.1872918069237761E-5	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9988292209267866	WITHOUT_CLASSIFICATION	0.0011707790732134282	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999900491044139	WITHOUT_CLASSIFICATION	9.950895585956672E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999998947846811	WITHOUT_CLASSIFICATION	1.0521531888395323E-7	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999999141578114	WITHOUT_CLASSIFICATION	8.58421885965877E-8	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999965727806095	WITHOUT_CLASSIFICATION	3.4272193905871817E-6	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999034257732	WITHOUT_CLASSIFICATION	9.657422691352672E-8	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999997160549666	WITHOUT_CLASSIFICATION	2.839450333799204E-7	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999961388405717	WITHOUT_CLASSIFICATION	3.861159428316222E-6	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999885573494263	WITHOUT_CLASSIFICATION	1.1442650573751792E-5	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999994741985636	WITHOUT_CLASSIFICATION	5.258014363977854E-6	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999998837612998	WITHOUT_CLASSIFICATION	1.1623870020120506E-7	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999999020169335	WITHOUT_CLASSIFICATION	9.798306657965172E-8	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999949154206859	WITHOUT_CLASSIFICATION	5.0845793141050875E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999750244630122	WITHOUT_CLASSIFICATION	2.4975536987763094E-5	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999996742907168	WITHOUT_CLASSIFICATION	3.257092831974949E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999874450185543	WITHOUT_CLASSIFICATION	1.2554981445667648E-5	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999986105632882	WITHOUT_CLASSIFICATION	1.3894367117687197E-6	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999999562899	WITHOUT_CLASSIFICATION	4.3710105094000513E-11	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999990043869134	WITHOUT_CLASSIFICATION	9.956130866392573E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996055224448	WITHOUT_CLASSIFICATION	3.944775552049101E-7	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999832013282979	WITHOUT_CLASSIFICATION	1.6798671702181002E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999990956751934	WITHOUT_CLASSIFICATION	9.043248065350893E-7	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9974451810683177	WITHOUT_CLASSIFICATION	0.0025548189316822677	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999998191542728	WITHOUT_CLASSIFICATION	1.8084572713666423E-7	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999998043385102	WITHOUT_CLASSIFICATION	1.9566148978409805E-7	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999665803871656	WITHOUT_CLASSIFICATION	3.3419612834422396E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999896688447284	WITHOUT_CLASSIFICATION	1.0331155271553454E-5	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999954877249249	WITHOUT_CLASSIFICATION	4.512275075188786E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999446253425	WITHOUT_CLASSIFICATION	5.5374657568187714E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997225093324	WITHOUT_CLASSIFICATION	2.7749066751471896E-7	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999745727172	WITHOUT_CLASSIFICATION	2.54272829029891E-8	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999517548654935	WITHOUT_CLASSIFICATION	4.8245134506596436E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999906336034551	WITHOUT_CLASSIFICATION	9.366396544948008E-6	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999107030537	WITHOUT_CLASSIFICATION	8.9296946257338E-8	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.99999999998289	WITHOUT_CLASSIFICATION	1.711001472566668E-11	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999731022078722	WITHOUT_CLASSIFICATION	2.689779212787383E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999446253425	WITHOUT_CLASSIFICATION	5.5374657568187714E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997225093324	WITHOUT_CLASSIFICATION	2.7749066751471896E-7	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999986217702298	WITHOUT_CLASSIFICATION	1.3782297701192525E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999999201599617	WITHOUT_CLASSIFICATION	7.984003830267183E-7	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999122260561	WITHOUT_CLASSIFICATION	8.777394396138481E-8	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999968771554038	WITHOUT_CLASSIFICATION	3.1228445963060372E-6	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999995693109757	WITHOUT_CLASSIFICATION	4.306890243019381E-7	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9996722872903017	WITHOUT_CLASSIFICATION	3.277127096983545E-4	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999420710661422	WITHOUT_CLASSIFICATION	5.7928933857787674E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.999992882446786	WITHOUT_CLASSIFICATION	7.117553214068006E-6	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999987748640005	WITHOUT_CLASSIFICATION	1.2251359995626384E-6	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9864382404211908	WITHOUT_CLASSIFICATION	0.01356175957880926	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999987653505	WITHOUT_CLASSIFICATION	1.2346494902943573E-9	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9864382404211908	WITHOUT_CLASSIFICATION	0.01356175957880926	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999966862722642	WITHOUT_CLASSIFICATION	3.3137277357878673E-6	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999985039905673	WITHOUT_CLASSIFICATION	1.4960094326971844E-6	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999758209824713	WITHOUT_CLASSIFICATION	2.4179017528605104E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999908824381	WITHOUT_CLASSIFICATION	9.11756196098937E-9	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999170144938514	WITHOUT_CLASSIFICATION	8.298550614860626E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999725631435243	WITHOUT_CLASSIFICATION	2.7436856475575235E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999725631435243	WITHOUT_CLASSIFICATION	2.7436856475575235E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999869348937481	WITHOUT_CLASSIFICATION	1.3065106251850435E-5	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999992950123044	WITHOUT_CLASSIFICATION	7.049876956469328E-7	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999970300016617	WITHOUT_CLASSIFICATION	2.969998338168971E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999661113496359	WITHOUT_CLASSIFICATION	3.388865036422984E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999898650679862	WITHOUT_CLASSIFICATION	1.0134932013882478E-5	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999856906867597	WITHOUT_CLASSIFICATION	1.4309313240344034E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999996432381698	WITHOUT_CLASSIFICATION	3.5676183016574957E-7	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997400344967	WITHOUT_CLASSIFICATION	2.599655033084282E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.999995523680403	WITHOUT_CLASSIFICATION	4.476319597021457E-6	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9999896317920934	WITHOUT_CLASSIFICATION	1.0368207906539483E-5	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999999111734048	WITHOUT_CLASSIFICATION	8.882659517843857E-8	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999798754868732	WITHOUT_CLASSIFICATION	2.0124513126881902E-5	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999808473672217	WITHOUT_CLASSIFICATION	1.91526327783627E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999998237981879	WITHOUT_CLASSIFICATION	1.7620181218464E-7	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999996705739719	WITHOUT_CLASSIFICATION	3.294260280823548E-7	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999871609065462	WITHOUT_CLASSIFICATION	1.2839093453794377E-5	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999953965031709	WITHOUT_CLASSIFICATION	4.603496829090104E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998090612959	WITHOUT_CLASSIFICATION	1.9093870410977912E-7	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999989996490861	WITHOUT_CLASSIFICATION	1.0003509138905075E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999595510937215	WITHOUT_CLASSIFICATION	4.044890627854486E-5	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999902134318	WITHOUT_CLASSIFICATION	9.786568269876569E-9	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999992867554277	WITHOUT_CLASSIFICATION	7.132445723423795E-7	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999995192706501	WITHOUT_CLASSIFICATION	4.807293499202928E-7	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999593728635	WITHOUT_CLASSIFICATION	4.0627136426393495E-8	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999993318879926	WITHOUT_CLASSIFICATION	6.681120073614307E-7	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999952220763717	WITHOUT_CLASSIFICATION	4.777923628306222E-6	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999862567266	WITHOUT_CLASSIFICATION	1.3743273379556113E-8	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9996539171264563	WITHOUT_CLASSIFICATION	3.460828735436474E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999997656728543	WITHOUT_CLASSIFICATION	2.3432714558321914E-7	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999999126094136	WITHOUT_CLASSIFICATION	8.739058644905756E-8	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998280861295951	WITHOUT_CLASSIFICATION	1.7191387040503314E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998621445704484	WITHOUT_CLASSIFICATION	1.3785542955157252E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999996432381698	WITHOUT_CLASSIFICATION	3.5676183016574957E-7	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9997181381878367	WITHOUT_CLASSIFICATION	2.818618121632772E-4	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999980851925552	WITHOUT_CLASSIFICATION	1.9148074448803092E-6	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9821872896875258	WITHOUT_CLASSIFICATION	0.017812710312474223	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999989174793594	WITHOUT_CLASSIFICATION	1.082520640565798E-6	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999994668277015	WITHOUT_CLASSIFICATION	5.331722985613737E-7	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999999320830407	WITHOUT_CLASSIFICATION	6.791695928381124E-8	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999661113496359	WITHOUT_CLASSIFICATION	3.388865036422984E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999661113496359	WITHOUT_CLASSIFICATION	3.388865036422984E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999999750372908	WITHOUT_CLASSIFICATION	2.4962709204973023E-8	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999996955217887	WITHOUT_CLASSIFICATION	3.044782112734035E-7	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999969295845125	WITHOUT_CLASSIFICATION	3.0704154874412303E-6	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999998331221637	WITHOUT_CLASSIFICATION	1.6687783640859012E-7	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999904137310182	WITHOUT_CLASSIFICATION	9.586268981886421E-6	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9992006464089169	WITHOUT_CLASSIFICATION	7.993535910830854E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9998081646433096	WITHOUT_CLASSIFICATION	1.9183535669044702E-4	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999996823280604	WITHOUT_CLASSIFICATION	3.1767193969164534E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999991778372046	WITHOUT_CLASSIFICATION	8.22162795411429E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998777705497	WITHOUT_CLASSIFICATION	1.222294502851868E-7	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999973714097788	WITHOUT_CLASSIFICATION	2.6285902210569262E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999957040184319	WITHOUT_CLASSIFICATION	4.2959815681069665E-5	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999997678327996	WITHOUT_CLASSIFICATION	2.3216720044443912E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998777705497	WITHOUT_CLASSIFICATION	1.222294502851868E-7	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.99999979353116	WITHOUT_CLASSIFICATION	2.0646883997545256E-7	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999916566477182	WITHOUT_CLASSIFICATION	8.343352281829308E-6	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999875817991726	WITHOUT_CLASSIFICATION	1.2418200827560115E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.993603605625844	WITHOUT_CLASSIFICATION	0.006396394374155998	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999957040184319	WITHOUT_CLASSIFICATION	4.2959815681069665E-5	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999732933895124	WITHOUT_CLASSIFICATION	2.6706610487616495E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999950719325829	WITHOUT_CLASSIFICATION	4.928067417086014E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999953669797	WITHOUT_CLASSIFICATION	4.633020297913445E-8	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998695152095597	WITHOUT_CLASSIFICATION	1.3048479044030606E-4	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.99998530864822	WITHOUT_CLASSIFICATION	1.469135177999881E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.999999898843145	WITHOUT_CLASSIFICATION	1.0115685497051239E-7	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999987612817363	WITHOUT_CLASSIFICATION	1.2387182637226468E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999975501669752	WITHOUT_CLASSIFICATION	2.4498330247060775E-6	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999997847645586	WITHOUT_CLASSIFICATION	2.1523544130285525E-7	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999552818596	WITHOUT_CLASSIFICATION	4.471814040334019E-8	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9924731493571435	WITHOUT_CLASSIFICATION	0.007526850642856585	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999393356087	WITHOUT_CLASSIFICATION	6.06643912319743E-8	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998777705497	WITHOUT_CLASSIFICATION	1.222294502851868E-7	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999732933895124	WITHOUT_CLASSIFICATION	2.6706610487616495E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999953669797	WITHOUT_CLASSIFICATION	4.633020297913445E-8	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999850294409397	WITHOUT_CLASSIFICATION	1.4970559060409255E-5	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999984897938572	WITHOUT_CLASSIFICATION	1.5102061427652557E-6	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.999999001910021	WITHOUT_CLASSIFICATION	9.980899790006655E-7	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999957040184319	WITHOUT_CLASSIFICATION	4.2959815681069665E-5	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999997846267498	WITHOUT_CLASSIFICATION	2.1537325028929636E-7	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999996296608435	WITHOUT_CLASSIFICATION	3.7033915648916664E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999981341419282	WITHOUT_CLASSIFICATION	1.8658580719104813E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999993337107688	WITHOUT_CLASSIFICATION	6.662892311904974E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999975501669752	WITHOUT_CLASSIFICATION	2.4498330247060775E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.99999979353116	WITHOUT_CLASSIFICATION	2.0646883997545256E-7	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999953173124364	WITHOUT_CLASSIFICATION	4.682687563624973E-6	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999984136893875	WITHOUT_CLASSIFICATION	1.5863106125365544E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999996787980172	WITHOUT_CLASSIFICATION	3.212019827235397E-7	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999987953306632	WITHOUT_CLASSIFICATION	1.2046693368281147E-6	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999998265757456	WITHOUT_CLASSIFICATION	1.7342425448975572E-7	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999999864313934	WITHOUT_CLASSIFICATION	1.3568606606200225E-7	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999813937984743	WITHOUT_CLASSIFICATION	1.8606201525784566E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999908824381	WITHOUT_CLASSIFICATION	9.11756196098937E-9	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999647703371	WITHOUT_CLASSIFICATION	3.522966285356079E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880751308545	WITHOUT_CLASSIFICATION	1.192486914543449E-5	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999987806912	WITHOUT_CLASSIFICATION	1.21930876611071E-9	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9968777251783423	WITHOUT_CLASSIFICATION	0.0031222748216577943	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999914019141472	WITHOUT_CLASSIFICATION	8.598085852793654E-5	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.999988193074696	WITHOUT_CLASSIFICATION	1.180692530407419E-5	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999993506842989	WITHOUT_CLASSIFICATION	6.493157011315893E-7	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999992045716087	WITHOUT_CLASSIFICATION	7.954283912728497E-7	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999711599554	WITHOUT_CLASSIFICATION	2.8840044478603797E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999993337107688	WITHOUT_CLASSIFICATION	6.662892311904974E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880751308545	WITHOUT_CLASSIFICATION	1.192486914543449E-5	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.999996501845855	WITHOUT_CLASSIFICATION	3.4981541450712264E-6	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999975116302992	WITHOUT_CLASSIFICATION	2.4883697008674417E-6	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999986978499658	WITHOUT_CLASSIFICATION	1.3021500343035313E-6	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999995432893224	WITHOUT_CLASSIFICATION	4.567106776992869E-7	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999886128422607	WITHOUT_CLASSIFICATION	1.138715773937046E-5	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999813883023	WITHOUT_CLASSIFICATION	1.8611697734937154E-8	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999886109959072	WITHOUT_CLASSIFICATION	1.1389004092901232E-5	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9995858877150364	WITHOUT_CLASSIFICATION	4.141122849635679E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999774783299279	WITHOUT_CLASSIFICATION	2.2521670072111167E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9985411460750008	WITHOUT_CLASSIFICATION	0.001458853924999251	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999997535895698	WITHOUT_CLASSIFICATION	2.4641043010946886E-7	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999471539364488	WITHOUT_CLASSIFICATION	5.2846063551159095E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999998313067631	WITHOUT_CLASSIFICATION	1.6869323692003924E-7	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999930957256147	WITHOUT_CLASSIFICATION	6.904274385383307E-6	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999993688160067	WITHOUT_CLASSIFICATION	6.311839932368439E-7	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998782292528	WITHOUT_CLASSIFICATION	1.2177074710741878E-7	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999988960509222	WITHOUT_CLASSIFICATION	1.1039490778094767E-6	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999914767911	WITHOUT_CLASSIFICATION	8.523208891540004E-9	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999998865732227	WITHOUT_CLASSIFICATION	1.134267772089528E-7	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999907263305498	WITHOUT_CLASSIFICATION	9.273669450218853E-6	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999924032015113	WITHOUT_CLASSIFICATION	7.596798488630132E-6	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999999917495532	WITHOUT_CLASSIFICATION	8.25044685095993E-9	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999705477155	WITHOUT_CLASSIFICATION	2.9452284532976876E-8	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999534433307	WITHOUT_CLASSIFICATION	4.655666928072366E-8	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999999959213484	WITHOUT_CLASSIFICATION	4.078651606437802E-8	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9986841193480014	WITHOUT_CLASSIFICATION	0.0013158806519985682	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999983872271734	WITHOUT_CLASSIFICATION	1.6127728265995017E-6	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9993829405532615	WITHOUT_CLASSIFICATION	6.170594467384216E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999021051311159	WITHOUT_CLASSIFICATION	9.789486888409412E-5	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9398153500776364	WITHOUT_CLASSIFICATION	0.06018464992236355	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999865259559455	WITHOUT_CLASSIFICATION	1.3474044054588057E-5	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999263553925627	WITHOUT_CLASSIFICATION	7.364460743726245E-5	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999998665490574	WITHOUT_CLASSIFICATION	1.334509426662621E-7	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997246545546	WITHOUT_CLASSIFICATION	2.753454454247128E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999731840040406	WITHOUT_CLASSIFICATION	2.681599595941816E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999535548018	WITHOUT_CLASSIFICATION	4.6445198341470546E-8	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999690573013	WITHOUT_CLASSIFICATION	3.0942698649132E-8	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999856436631277	WITHOUT_CLASSIFICATION	1.435633687235067E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999535548018	WITHOUT_CLASSIFICATION	4.6445198341470546E-8	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999731840040406	WITHOUT_CLASSIFICATION	2.681599595941816E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999690573013	WITHOUT_CLASSIFICATION	3.0942698649132E-8	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.999999773709194	WITHOUT_CLASSIFICATION	2.2629080596610662E-7	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999999453974177	WITHOUT_CLASSIFICATION	5.4602582338851886E-8	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999999478942267	WITHOUT_CLASSIFICATION	5.21057732868279E-7	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999661029112585	WITHOUT_CLASSIFICATION	3.3897088741452776E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997233913079	WITHOUT_CLASSIFICATION	2.766086921047096E-7	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7380910278187814	DEFECT	0.2619089721812186	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999757394458398	WITHOUT_CLASSIFICATION	2.4260554160097118E-5	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999626922836147	WITHOUT_CLASSIFICATION	3.7307716385277814E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999857717446	WITHOUT_CLASSIFICATION	1.422825535399339E-8	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9997161941798808	WITHOUT_CLASSIFICATION	2.8380582011930757E-4	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999937198016646	WITHOUT_CLASSIFICATION	6.280198335326248E-6	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999974391901197	WITHOUT_CLASSIFICATION	2.5608098802025344E-6	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997848852065261	WITHOUT_CLASSIFICATION	2.15114793473856E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999715457521532	WITHOUT_CLASSIFICATION	2.845424784689159E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999997976748822	WITHOUT_CLASSIFICATION	2.0232511773259544E-7	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999985510769476	WITHOUT_CLASSIFICATION	1.448923052459764E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999991862906779	WITHOUT_CLASSIFICATION	8.137093221559534E-7	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999991499895962	WITHOUT_CLASSIFICATION	8.500104038041644E-7	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999968791807945	WITHOUT_CLASSIFICATION	3.1208192054751782E-6	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999942261036	WITHOUT_CLASSIFICATION	5.773896432666433E-9	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.999995331108647	WITHOUT_CLASSIFICATION	4.6688913529787104E-6	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999987698786	WITHOUT_CLASSIFICATION	1.2301214851988391E-9	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999990660351216	WITHOUT_CLASSIFICATION	9.33964878397517E-6	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999965834755	WITHOUT_CLASSIFICATION	3.416524444990099E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999949504049	WITHOUT_CLASSIFICATION	5.049594987963187E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999949504049	WITHOUT_CLASSIFICATION	5.049594987963187E-9	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999870679311	WITHOUT_CLASSIFICATION	1.2932068915493961E-8	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999870679311	WITHOUT_CLASSIFICATION	1.2932068915493961E-8	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.999996135606699	WITHOUT_CLASSIFICATION	3.8643933010599724E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999991862906779	WITHOUT_CLASSIFICATION	8.137093221559534E-7	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999999855879406	WITHOUT_CLASSIFICATION	1.441205942308245E-8	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999994350597	WITHOUT_CLASSIFICATION	5.649404162969891E-10	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999782571684	WITHOUT_CLASSIFICATION	2.174283171239985E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999782571684	WITHOUT_CLASSIFICATION	2.174283171239985E-8	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999956158405816	WITHOUT_CLASSIFICATION	4.3841594184051285E-6	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999997918028798	WITHOUT_CLASSIFICATION	2.0819712011189001E-7	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999965881731	WITHOUT_CLASSIFICATION	3.4118269930730957E-9	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999998932845735	WITHOUT_CLASSIFICATION	1.0671542653284025E-7	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9989033079341644	WITHOUT_CLASSIFICATION	0.0010966920658355816	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9271973587762181	WITHOUT_CLASSIFICATION	0.07280264122378183	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999880538551646	WITHOUT_CLASSIFICATION	1.194614483533792E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999983802990344	WITHOUT_CLASSIFICATION	1.619700965605858E-5	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999821620530104	WITHOUT_CLASSIFICATION	1.783794698960057E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999952241992274	WITHOUT_CLASSIFICATION	4.775800772628778E-6	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999977206245428	WITHOUT_CLASSIFICATION	2.2793754571307945E-6	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999987960521072	WITHOUT_CLASSIFICATION	1.2039478927568717E-6	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999997017274511	WITHOUT_CLASSIFICATION	2.982725489029025E-7	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.999999407945793	WITHOUT_CLASSIFICATION	5.920542069600078E-7	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999999161696895	WITHOUT_CLASSIFICATION	8.383031050585225E-8	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999999414575713	WITHOUT_CLASSIFICATION	5.854242871307881E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983544783656	WITHOUT_CLASSIFICATION	1.6455216343972414E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999994345363263	WITHOUT_CLASSIFICATION	5.654636736758882E-7	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999998278820933	WITHOUT_CLASSIFICATION	1.7211790675393927E-7	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999979684291714	WITHOUT_CLASSIFICATION	2.031570828531222E-6	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999997070182659	WITHOUT_CLASSIFICATION	2.9298173410990015E-7	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.999997644268407	WITHOUT_CLASSIFICATION	2.3557315929172257E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999999910049214	WITHOUT_CLASSIFICATION	8.995078605040909E-8	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999998433558724	WITHOUT_CLASSIFICATION	1.566441275486923E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999968093524547	WITHOUT_CLASSIFICATION	3.1906475453024054E-5	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999495004702	WITHOUT_CLASSIFICATION	5.04995298757913E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880751308545	WITHOUT_CLASSIFICATION	1.192486914543449E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999471539364488	WITHOUT_CLASSIFICATION	5.2846063551159095E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999981284713707	WITHOUT_CLASSIFICATION	1.8715286293214265E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9995034134523922	WITHOUT_CLASSIFICATION	4.965865476077711E-4	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985594294432	WITHOUT_CLASSIFICATION	1.4405705567755336E-6	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999826135498986	WITHOUT_CLASSIFICATION	1.7386450101385467E-5	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999943057937556	WITHOUT_CLASSIFICATION	5.694206244393252E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999943057937556	WITHOUT_CLASSIFICATION	5.694206244393252E-6	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999662738114539	WITHOUT_CLASSIFICATION	3.372618854617821E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999955792989119	WITHOUT_CLASSIFICATION	4.4207010880454615E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9997780619564536	WITHOUT_CLASSIFICATION	2.2193804354639587E-4	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9997780619564536	WITHOUT_CLASSIFICATION	2.2193804354639587E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999622887696449	WITHOUT_CLASSIFICATION	3.771123035517508E-5	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999263888724588	WITHOUT_CLASSIFICATION	7.361112754126848E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999476826112047	WITHOUT_CLASSIFICATION	5.231738879518632E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999995273913179	WITHOUT_CLASSIFICATION	4.726086820063575E-7	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999980463729592	WITHOUT_CLASSIFICATION	1.9536270407499342E-6	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999995831955326	WITHOUT_CLASSIFICATION	4.168044674272346E-7	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999997084617436	WITHOUT_CLASSIFICATION	2.9153825634987405E-7	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999992394687615	WITHOUT_CLASSIFICATION	7.605312386187397E-7	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999928692822694	WITHOUT_CLASSIFICATION	7.130717730562337E-6	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999928692822694	WITHOUT_CLASSIFICATION	7.130717730562337E-6	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999854113263212	WITHOUT_CLASSIFICATION	1.4588673678773363E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998981156792	WITHOUT_CLASSIFICATION	1.0188432067738966E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998981156792	WITHOUT_CLASSIFICATION	1.0188432067738966E-7	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999987664641323	WITHOUT_CLASSIFICATION	1.2335358676505928E-6	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999815044512	WITHOUT_CLASSIFICATION	1.849554871211401E-8	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9972111510628144	WITHOUT_CLASSIFICATION	0.0027888489371855588	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999997508181496	WITHOUT_CLASSIFICATION	2.491818503206537E-7	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998796760465	WITHOUT_CLASSIFICATION	1.2032395349125793E-7	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998183471503	WITHOUT_CLASSIFICATION	1.8165284972259237E-7	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999999804000625	WITHOUT_CLASSIFICATION	1.9599937441600124E-8	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999986847442087	WITHOUT_CLASSIFICATION	1.3152557913505725E-6	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999451951088	WITHOUT_CLASSIFICATION	5.4804891208766756E-8	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9928640221020043	WITHOUT_CLASSIFICATION	0.007135977897995692	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99999048970308	WITHOUT_CLASSIFICATION	9.510296919955367E-6	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999964492578911	WITHOUT_CLASSIFICATION	3.5507421088887404E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999897033063609	WITHOUT_CLASSIFICATION	1.0296693639097004E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999897033063609	WITHOUT_CLASSIFICATION	1.0296693639097004E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999897033063609	WITHOUT_CLASSIFICATION	1.0296693639097004E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999897033063609	WITHOUT_CLASSIFICATION	1.0296693639097004E-5	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999898442004101	WITHOUT_CLASSIFICATION	1.015579958988136E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9828178449452268	WITHOUT_CLASSIFICATION	0.01718215505477316	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999977386661274	WITHOUT_CLASSIFICATION	2.2613338725668924E-6	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999855318805724	WITHOUT_CLASSIFICATION	1.4468119427555074E-5	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999999865136415	WITHOUT_CLASSIFICATION	1.3486358485689366E-7	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9998676344911153	WITHOUT_CLASSIFICATION	1.3236550888477637E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999752978922035	WITHOUT_CLASSIFICATION	2.470210779640046E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999980519480258	WITHOUT_CLASSIFICATION	1.9480519742459357E-6	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999989961698541	WITHOUT_CLASSIFICATION	1.003830145935334E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999752978922035	WITHOUT_CLASSIFICATION	2.470210779640046E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999752978922035	WITHOUT_CLASSIFICATION	2.470210779640046E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999847433781	WITHOUT_CLASSIFICATION	1.525662183455456E-8	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.999999244342484	WITHOUT_CLASSIFICATION	7.556575159999517E-7	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.999999056568767	WITHOUT_CLASSIFICATION	9.434312331504153E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999970946385941	WITHOUT_CLASSIFICATION	2.9053614057797898E-6	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999248018658744	WITHOUT_CLASSIFICATION	7.519813412559413E-5	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999996158342345	WITHOUT_CLASSIFICATION	3.8416576556983027E-7	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999997305965729	WITHOUT_CLASSIFICATION	2.694034271020575E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999970946385941	WITHOUT_CLASSIFICATION	2.9053614057797898E-6	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9997638657819463	WITHOUT_CLASSIFICATION	2.3613421805365384E-4	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999889738510487	WITHOUT_CLASSIFICATION	1.1026148951326414E-5	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999996133353424	WITHOUT_CLASSIFICATION	3.866646576417205E-7	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999963099376974	WITHOUT_CLASSIFICATION	3.6900623025865033E-6	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999868605494138	WITHOUT_CLASSIFICATION	1.3139450586260089E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998876490192281	WITHOUT_CLASSIFICATION	1.1235098077190123E-4	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999448420338	WITHOUT_CLASSIFICATION	5.515796617743169E-8	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999757056903339	WITHOUT_CLASSIFICATION	2.429430966612628E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999864400828	WITHOUT_CLASSIFICATION	1.3559917086880262E-8	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999993177899794	WITHOUT_CLASSIFICATION	6.822100205722138E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999988863819	WITHOUT_CLASSIFICATION	1.1136180978263385E-8	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998817215575	WITHOUT_CLASSIFICATION	1.1827844252461414E-7	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9954155018772284	WITHOUT_CLASSIFICATION	0.004584498122771588	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999854851997699	WITHOUT_CLASSIFICATION	1.4514800230083277E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999995484581546	WITHOUT_CLASSIFICATION	4.5154184544192727E-7	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999969148487511	WITHOUT_CLASSIFICATION	3.085151248895192E-6	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999722182505	WITHOUT_CLASSIFICATION	2.7781749555160918E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998846985571409	WITHOUT_CLASSIFICATION	1.15301442859044E-4	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999581931307	WITHOUT_CLASSIFICATION	4.1806869335150496E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998846985571409	WITHOUT_CLASSIFICATION	1.15301442859044E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999670106272	WITHOUT_CLASSIFICATION	3.29893728649291E-8	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999958561868233	WITHOUT_CLASSIFICATION	4.1438131766595096E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9998144165889857	WITHOUT_CLASSIFICATION	1.8558341101431518E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999997506158506	WITHOUT_CLASSIFICATION	2.493841494139341E-7	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999722182505	WITHOUT_CLASSIFICATION	2.7781749555160918E-8	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999581931307	WITHOUT_CLASSIFICATION	4.1806869335150496E-8	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999670106272	WITHOUT_CLASSIFICATION	3.29893728649291E-8	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998727856484	WITHOUT_CLASSIFICATION	1.2721435152842237E-7	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999758827654404	WITHOUT_CLASSIFICATION	2.4117234559675895E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999962820690933	WITHOUT_CLASSIFICATION	3.7179309067345306E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999890397092506	WITHOUT_CLASSIFICATION	1.0960290749400303E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9969386618948478	WITHOUT_CLASSIFICATION	0.003061338105152073	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999857432568	WITHOUT_CLASSIFICATION	1.4256743287938746E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983544783656	WITHOUT_CLASSIFICATION	1.6455216343972414E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999958561868233	WITHOUT_CLASSIFICATION	4.1438131766595096E-6	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.99998571617635	WITHOUT_CLASSIFICATION	1.4283823649978E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9982416006972192	WITHOUT_CLASSIFICATION	0.0017583993027808266	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999500207237	WITHOUT_CLASSIFICATION	4.99792761489932E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983544783656	WITHOUT_CLASSIFICATION	1.6455216343972414E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880751308545	WITHOUT_CLASSIFICATION	1.192486914543449E-5	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999078766106	WITHOUT_CLASSIFICATION	9.212338935618508E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983544783656	WITHOUT_CLASSIFICATION	1.6455216343972414E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999949019558	WITHOUT_CLASSIFICATION	5.098044202004088E-9	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996209820481	WITHOUT_CLASSIFICATION	3.7901795193277655E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880751308545	WITHOUT_CLASSIFICATION	1.192486914543449E-5	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9994840059965231	WITHOUT_CLASSIFICATION	5.159940034769936E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999710820489	WITHOUT_CLASSIFICATION	2.891795112902975E-8	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999506093751	WITHOUT_CLASSIFICATION	4.9390624941150406E-8	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999973992518613	WITHOUT_CLASSIFICATION	2.600748138640764E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9997670241002005	WITHOUT_CLASSIFICATION	2.3297589979951104E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999838693267586	WITHOUT_CLASSIFICATION	1.613067324142524E-5	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999999122333771	WITHOUT_CLASSIFICATION	8.776662294281095E-8	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999990412087657	WITHOUT_CLASSIFICATION	9.587912343432794E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999635212426533	WITHOUT_CLASSIFICATION	3.6478757346628524E-5	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999987393285099	WITHOUT_CLASSIFICATION	1.2606714900039226E-6	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9972111510628144	WITHOUT_CLASSIFICATION	0.0027888489371855588	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999986840498772	WITHOUT_CLASSIFICATION	1.3159501227834005E-6	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9855252743485509	WITHOUT_CLASSIFICATION	0.014474725651449149	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999998866838824	WITHOUT_CLASSIFICATION	1.1331611759100904E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999347589429739	WITHOUT_CLASSIFICATION	6.524105702615896E-5	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999996094083832	WITHOUT_CLASSIFICATION	3.9059161686051506E-7	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999298582101	WITHOUT_CLASSIFICATION	7.014179003854785E-8	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9949567630137813	WITHOUT_CLASSIFICATION	0.00504323698621856	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998064598732153	WITHOUT_CLASSIFICATION	1.9354012678476999E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999733654807	WITHOUT_CLASSIFICATION	2.6634519291856778E-8	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999821797558772	WITHOUT_CLASSIFICATION	1.7820244122857385E-5	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9969039625679286	WITHOUT_CLASSIFICATION	0.003096037432071458	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998870530168599	WITHOUT_CLASSIFICATION	1.1294698314011738E-4	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999552539377062	WITHOUT_CLASSIFICATION	4.4746062293748435E-5	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999885539059	WITHOUT_CLASSIFICATION	1.144609414773825E-8	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999998333792015	WITHOUT_CLASSIFICATION	1.666207985289358E-7	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998648999877932	WITHOUT_CLASSIFICATION	1.3510001220685172E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999978698845934	WITHOUT_CLASSIFICATION	2.1301154066112075E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999997481911844	WITHOUT_CLASSIFICATION	2.518088155970147E-7	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999983312318806	WITHOUT_CLASSIFICATION	1.668768119337044E-6	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999994716052355	WITHOUT_CLASSIFICATION	5.283947645213606E-7	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9989726322257769	WITHOUT_CLASSIFICATION	0.0010273677742231352	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.99973136054597	WITHOUT_CLASSIFICATION	2.686394540300758E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998328857068	WITHOUT_CLASSIFICATION	1.6711429318588935E-7	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999748236283349	WITHOUT_CLASSIFICATION	2.5176371665164906E-5	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.999997877762595	WITHOUT_CLASSIFICATION	2.1222374049570205E-6	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999606580428478	WITHOUT_CLASSIFICATION	3.9341957152153293E-5	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999332193785146	WITHOUT_CLASSIFICATION	6.678062148536403E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9982641686468744	WITHOUT_CLASSIFICATION	0.0017358313531256608	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999992515999505	WITHOUT_CLASSIFICATION	7.48400049480829E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880751308545	WITHOUT_CLASSIFICATION	1.192486914543449E-5	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999906336073111	WITHOUT_CLASSIFICATION	9.366392688883482E-6	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999801754201904	WITHOUT_CLASSIFICATION	1.9824579809681416E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999801754201904	WITHOUT_CLASSIFICATION	1.9824579809681416E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999586508631528	WITHOUT_CLASSIFICATION	4.1349136847212514E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999838693267586	WITHOUT_CLASSIFICATION	1.613067324142524E-5	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9993824274890009	WITHOUT_CLASSIFICATION	6.175725109991803E-4	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999861958535	WITHOUT_CLASSIFICATION	1.3804146483404717E-8	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999224688248997	WITHOUT_CLASSIFICATION	7.753117510033491E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999668659717672	WITHOUT_CLASSIFICATION	3.313402823280878E-5	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999931771885382	WITHOUT_CLASSIFICATION	6.82281146179127E-6	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9999677420828516	WITHOUT_CLASSIFICATION	3.225791714847465E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999824345274384	WITHOUT_CLASSIFICATION	1.7565472561649373E-5	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999707008979	WITHOUT_CLASSIFICATION	2.9299102114402E-8	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999999539632417	WITHOUT_CLASSIFICATION	4.603675831198549E-7	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999993984644757	WITHOUT_CLASSIFICATION	6.015355242533142E-7	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999997056873213	WITHOUT_CLASSIFICATION	2.943126787020707E-7	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999376941326	WITHOUT_CLASSIFICATION	6.230586734157984E-8	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999417946498	WITHOUT_CLASSIFICATION	5.820535010422419E-8	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998494990607	WITHOUT_CLASSIFICATION	1.5050093920130717E-7	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999992761828482	WITHOUT_CLASSIFICATION	7.238171518064303E-7	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999831511688	WITHOUT_CLASSIFICATION	1.684883122625764E-8	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999880821924	WITHOUT_CLASSIFICATION	1.1917807548295983E-8	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999998778785167	WITHOUT_CLASSIFICATION	1.2212148330578148E-7	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999994351705941	WITHOUT_CLASSIFICATION	5.6482940596241E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999853023682101	WITHOUT_CLASSIFICATION	1.4697631789884967E-5	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999997967939577	WITHOUT_CLASSIFICATION	2.0320604234620634E-7	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999973042946362	WITHOUT_CLASSIFICATION	2.6957053638272665E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9982641686468744	WITHOUT_CLASSIFICATION	0.0017358313531256608	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999990509867677	WITHOUT_CLASSIFICATION	9.490132324405585E-7	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999989940979721	WITHOUT_CLASSIFICATION	1.0059020278892153E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999991787551553	WITHOUT_CLASSIFICATION	8.212448446027187E-7	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999718882884971	WITHOUT_CLASSIFICATION	2.8111711502803803E-5	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.990670351806234	WITHOUT_CLASSIFICATION	0.00932964819376606	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999951535321466	WITHOUT_CLASSIFICATION	4.846467853453284E-6	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999944633163707	WITHOUT_CLASSIFICATION	5.536683629402544E-6	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999999597620345	WITHOUT_CLASSIFICATION	4.0237965630632717E-8	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998111724898	WITHOUT_CLASSIFICATION	1.8882751019373785E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999989354888045	WITHOUT_CLASSIFICATION	1.0645111956069656E-6	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999997141350416	WITHOUT_CLASSIFICATION	2.858649583708228E-7	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999941273132437	WITHOUT_CLASSIFICATION	5.872686756365664E-6	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9952682864581387	WITHOUT_CLASSIFICATION	0.0047317135418612835	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9833000878166257	WITHOUT_CLASSIFICATION	0.016699912183374306	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999994416472	WITHOUT_CLASSIFICATION	5.583527927465921E-9	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999994416472	WITHOUT_CLASSIFICATION	5.583527927465921E-9	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999926804925203	WITHOUT_CLASSIFICATION	7.319507479711491E-6	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999972107402	WITHOUT_CLASSIFICATION	2.7892597660428275E-9	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999720976910144	WITHOUT_CLASSIFICATION	2.790230898559412E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999720976910144	WITHOUT_CLASSIFICATION	2.790230898559412E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.999999990715939	WITHOUT_CLASSIFICATION	9.284060866606486E-9	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999506919590349	WITHOUT_CLASSIFICATION	4.930804096510453E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999822566930929	WITHOUT_CLASSIFICATION	1.7743306907001165E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999999597766	WITHOUT_CLASSIFICATION	4.022331423130521E-11	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999986117501533	WITHOUT_CLASSIFICATION	1.3882498467251573E-6	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999495963747	WITHOUT_CLASSIFICATION	5.040362528447496E-7	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999994893747428	WITHOUT_CLASSIFICATION	5.106252571520971E-7	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999994893747428	WITHOUT_CLASSIFICATION	5.106252571520971E-7	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998927139815	WITHOUT_CLASSIFICATION	1.0728601863066297E-7	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999987690332348	WITHOUT_CLASSIFICATION	1.2309667650831697E-6	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999995688148798	WITHOUT_CLASSIFICATION	4.3118512020085683E-7	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999875205732701	WITHOUT_CLASSIFICATION	1.247942672984917E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999875205732701	WITHOUT_CLASSIFICATION	1.247942672984917E-5	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999995928967549	WITHOUT_CLASSIFICATION	4.071032450840661E-7	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999953246213432	WITHOUT_CLASSIFICATION	4.675378656851031E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9983861649968931	WITHOUT_CLASSIFICATION	0.001613835003106812	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999999938078848	WITHOUT_CLASSIFICATION	6.1921152450605626E-9	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999982287584552	WITHOUT_CLASSIFICATION	1.77124154482904E-6	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999528347548	WITHOUT_CLASSIFICATION	4.716524507593002E-8	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999996928778418	WITHOUT_CLASSIFICATION	3.071221582022193E-6	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999998161003242	WITHOUT_CLASSIFICATION	1.8389967581584775E-7	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999973500826	WITHOUT_CLASSIFICATION	2.649917292953056E-9	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999588146311948	WITHOUT_CLASSIFICATION	4.118536880523695E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999994932682801	WITHOUT_CLASSIFICATION	5.067317200024211E-7	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9998259801784323	WITHOUT_CLASSIFICATION	1.7401982156769547E-4	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999996107338207	WITHOUT_CLASSIFICATION	3.89266179337939E-7	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999165482859116	WITHOUT_CLASSIFICATION	8.345171408838831E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999994228033093	WITHOUT_CLASSIFICATION	5.771966907936113E-7	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999976616419813	WITHOUT_CLASSIFICATION	2.338358018617569E-6	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999224037979	WITHOUT_CLASSIFICATION	7.75962021013939E-8	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999855544622154	WITHOUT_CLASSIFICATION	1.4445537784762558E-5	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999792782001554	WITHOUT_CLASSIFICATION	2.0721799844545556E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999968719952985	WITHOUT_CLASSIFICATION	3.128004701575558E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999900046959722	WITHOUT_CLASSIFICATION	9.995304027761606E-6	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999858476430605	WITHOUT_CLASSIFICATION	1.4152356939507542E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999970654490742	WITHOUT_CLASSIFICATION	2.9345509259367058E-6	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999994317033315	WITHOUT_CLASSIFICATION	5.68296668499409E-6	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9999965875575294	WITHOUT_CLASSIFICATION	3.412442470586294E-6	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999934706525301	WITHOUT_CLASSIFICATION	6.5293474699486714E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999998835588902	WITHOUT_CLASSIFICATION	1.1644110975587709E-7	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999429845715905	WITHOUT_CLASSIFICATION	5.701542840948711E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999993991724	WITHOUT_CLASSIFICATION	6.008276144703458E-10	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999986119249727	WITHOUT_CLASSIFICATION	1.3880750272371477E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998507755946414	WITHOUT_CLASSIFICATION	1.4922440535853414E-4	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999998718025249	WITHOUT_CLASSIFICATION	1.2819747510203652E-7	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999514269435	WITHOUT_CLASSIFICATION	4.8573056495182415E-8	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999836974509687	WITHOUT_CLASSIFICATION	1.630254903122906E-5	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999996808443403	WITHOUT_CLASSIFICATION	3.1915565976731077E-7	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999982824490849	WITHOUT_CLASSIFICATION	1.717550915097661E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999938246437159	WITHOUT_CLASSIFICATION	6.175356284124497E-6	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999995581934953	WITHOUT_CLASSIFICATION	4.4180650465371137E-7	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999991506662451	WITHOUT_CLASSIFICATION	8.49333754875274E-7	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999995839808231	WITHOUT_CLASSIFICATION	4.1601917692375303E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9992381135457822	WITHOUT_CLASSIFICATION	7.618864542177434E-4	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9933563677366027	WITHOUT_CLASSIFICATION	0.006643632263397285	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999987474287195	WITHOUT_CLASSIFICATION	1.2525712805034415E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999998249817023	WITHOUT_CLASSIFICATION	1.7501829775350056E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999992480221637	WITHOUT_CLASSIFICATION	7.519778362830327E-7	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999977862201632	WITHOUT_CLASSIFICATION	2.2137798368143227E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.999128880061147	WITHOUT_CLASSIFICATION	8.71119938852966E-4	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999999109584192	WITHOUT_CLASSIFICATION	8.90415807888773E-7	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999926160141583	WITHOUT_CLASSIFICATION	7.383985841675713E-6	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999998637850838	WITHOUT_CLASSIFICATION	1.362149161609942E-7	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998308104626928	WITHOUT_CLASSIFICATION	1.69189537307223E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999998895844364	WITHOUT_CLASSIFICATION	1.1041556357780841E-7	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999837813279	WITHOUT_CLASSIFICATION	1.621867209230688E-8	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999997850727	WITHOUT_CLASSIFICATION	2.1492729327993742E-10	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999413090665499	WITHOUT_CLASSIFICATION	5.869093345009116E-5	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999987267887372	WITHOUT_CLASSIFICATION	1.273211262697574E-6	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9982453800429821	WITHOUT_CLASSIFICATION	0.0017546199570178396	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999997368407302	WITHOUT_CLASSIFICATION	2.6315926979834866E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9997343882622337	WITHOUT_CLASSIFICATION	2.65611737766295E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999963094970831	WITHOUT_CLASSIFICATION	3.69050291696785E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999981452481445	WITHOUT_CLASSIFICATION	1.8547518554704615E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999981452481445	WITHOUT_CLASSIFICATION	1.8547518554704615E-6	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999690666735	WITHOUT_CLASSIFICATION	3.093332652555403E-8	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999974603195031	WITHOUT_CLASSIFICATION	2.5396804968667193E-6	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999987163085	WITHOUT_CLASSIFICATION	1.2836914939828785E-9	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999996965858	WITHOUT_CLASSIFICATION	3.034142270410317E-10	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999990822024614	WITHOUT_CLASSIFICATION	9.177975387566353E-7	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999997880821365	WITHOUT_CLASSIFICATION	2.119178634256658E-7	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999984487056	WITHOUT_CLASSIFICATION	1.5512944377866848E-9	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999939652109	WITHOUT_CLASSIFICATION	6.034789170301442E-9	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999984686383472	WITHOUT_CLASSIFICATION	1.531361652738968E-6	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999900272986181	WITHOUT_CLASSIFICATION	9.972701382026819E-6	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999969079227742	WITHOUT_CLASSIFICATION	3.0920772256872993E-6	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999491151988323	WITHOUT_CLASSIFICATION	5.0884801167630104E-5	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999998374495095	WITHOUT_CLASSIFICATION	1.6255049049041968E-6	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999999582284	WITHOUT_CLASSIFICATION	4.177162879795256E-11	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994012859431	WITHOUT_CLASSIFICATION	5.987140569917786E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994012859431	WITHOUT_CLASSIFICATION	5.987140569917786E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999997036981656	WITHOUT_CLASSIFICATION	2.963018344123489E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998388223543989	WITHOUT_CLASSIFICATION	1.6117764560104854E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999656982748	WITHOUT_CLASSIFICATION	3.4301725296376365E-8	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999997312917651	WITHOUT_CLASSIFICATION	2.6870823482547117E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999737115126	WITHOUT_CLASSIFICATION	2.6288487415219475E-8	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993606782653	WITHOUT_CLASSIFICATION	6.393217346510686E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999963049926507	WITHOUT_CLASSIFICATION	3.69500734938568E-6	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9954728107519442	WITHOUT_CLASSIFICATION	0.004527189248055797	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999997107185	WITHOUT_CLASSIFICATION	2.8928147804149365E-10	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999964333075613	WITHOUT_CLASSIFICATION	3.5666924386590217E-6	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999933393591	WITHOUT_CLASSIFICATION	6.660640891308003E-9	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999995723331783	WITHOUT_CLASSIFICATION	4.276668217686569E-7	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999994523594717	WITHOUT_CLASSIFICATION	5.47640528203765E-7	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999723707612	WITHOUT_CLASSIFICATION	2.7629238795562674E-8	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.999977020629039	WITHOUT_CLASSIFICATION	2.2979370960954044E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999454130532234	WITHOUT_CLASSIFICATION	5.4586946776680894E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999864191942	WITHOUT_CLASSIFICATION	1.3580805882955745E-8	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999997671406174	WITHOUT_CLASSIFICATION	2.3285938256071373E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999924704693768	WITHOUT_CLASSIFICATION	7.529530623146024E-6	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999998487524602	WITHOUT_CLASSIFICATION	1.5124753979417087E-7	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999995575777652	WITHOUT_CLASSIFICATION	4.424222348004736E-7	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999980617508638	WITHOUT_CLASSIFICATION	1.9382491361704047E-6	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999801706689	WITHOUT_CLASSIFICATION	1.9829331124506886E-8	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999997503569898	WITHOUT_CLASSIFICATION	2.496430101934052E-7	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9994072490745545	WITHOUT_CLASSIFICATION	5.927509254455251E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999550497305688	WITHOUT_CLASSIFICATION	4.4950269431164765E-5	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999923477697706	WITHOUT_CLASSIFICATION	7.652230229353621E-6	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9996664633378038	WITHOUT_CLASSIFICATION	3.335366621961996E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999993725487848	WITHOUT_CLASSIFICATION	6.274512151909025E-7	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999483014496	WITHOUT_CLASSIFICATION	5.1698550481279966E-8	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999964872404624	WITHOUT_CLASSIFICATION	3.512759537473458E-6	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999474113819974	WITHOUT_CLASSIFICATION	5.25886180025132E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999972699668	WITHOUT_CLASSIFICATION	2.7300331474832162E-9	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999953972156708	WITHOUT_CLASSIFICATION	4.602784329212698E-6	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999993961784115	WITHOUT_CLASSIFICATION	6.038215884074707E-7	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999796476365	WITHOUT_CLASSIFICATION	2.0352363485032707E-7	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999963256403	WITHOUT_CLASSIFICATION	3.6743596525918857E-9	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999999987380118	WITHOUT_CLASSIFICATION	1.2619882003675018E-8	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999850039507222	WITHOUT_CLASSIFICATION	1.4996049277842505E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9998185892402778	WITHOUT_CLASSIFICATION	1.814107597222918E-4	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997720463698109	WITHOUT_CLASSIFICATION	2.27953630189168E-4	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997720463698109	WITHOUT_CLASSIFICATION	2.27953630189168E-4	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999918758705	WITHOUT_CLASSIFICATION	8.124129550607645E-9	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9996426474903464	WITHOUT_CLASSIFICATION	3.5735250965361555E-4	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999704490759261	WITHOUT_CLASSIFICATION	2.955092407385237E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999769726336243	WITHOUT_CLASSIFICATION	2.3027366375764232E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999997445031621	WITHOUT_CLASSIFICATION	2.554968379323089E-7	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999666118423	WITHOUT_CLASSIFICATION	3.3388157628854976E-8	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997367825014183	WITHOUT_CLASSIFICATION	2.6321749858177493E-4	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999312040055	WITHOUT_CLASSIFICATION	6.879599446501838E-8	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9976123087778543	WITHOUT_CLASSIFICATION	0.0023876912221456096	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998344467192	WITHOUT_CLASSIFICATION	1.6555328076403768E-7	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999340920187	WITHOUT_CLASSIFICATION	6.590798136342496E-8	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999884973265146	WITHOUT_CLASSIFICATION	1.1502673485236109E-5	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999950045229139	WITHOUT_CLASSIFICATION	4.995477086148759E-6	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999881171134	WITHOUT_CLASSIFICATION	1.1882886585446366E-8	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999956646435818	WITHOUT_CLASSIFICATION	4.335356418209988E-6	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999995684335296	WITHOUT_CLASSIFICATION	4.315664705266156E-7	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9997939255931566	WITHOUT_CLASSIFICATION	2.0607440684346202E-4	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999963765179796	WITHOUT_CLASSIFICATION	3.6234820204546357E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9981880180487128	WITHOUT_CLASSIFICATION	0.0018119819512871437	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999695743979424	WITHOUT_CLASSIFICATION	3.042560205753876E-5	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9986039278626597	WITHOUT_CLASSIFICATION	0.0013960721373402572	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999839105648148	WITHOUT_CLASSIFICATION	1.6089435185125787E-5	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999999092908	WITHOUT_CLASSIFICATION	9.070923782214575E-11	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9993837111876144	WITHOUT_CLASSIFICATION	6.162888123857238E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999743858627657	WITHOUT_CLASSIFICATION	2.561413723434128E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999282632400299	WITHOUT_CLASSIFICATION	7.173675997015376E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999998425820987	WITHOUT_CLASSIFICATION	1.5741790121307402E-7	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999833584647	WITHOUT_CLASSIFICATION	1.6641535218002003E-8	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999659029999314	WITHOUT_CLASSIFICATION	3.409700006868467E-5	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999537162466982	WITHOUT_CLASSIFICATION	4.62837533018634E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999988865766428	WITHOUT_CLASSIFICATION	1.11342335724527E-6	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999976985015918	WITHOUT_CLASSIFICATION	2.301498408151178E-6	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999969619954	WITHOUT_CLASSIFICATION	3.0380046441127636E-9	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999995312705601	WITHOUT_CLASSIFICATION	4.6872943992937346E-7	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999990530208	WITHOUT_CLASSIFICATION	9.469792159256055E-10	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999867133791298	WITHOUT_CLASSIFICATION	1.3286620870186316E-5	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999640322332	WITHOUT_CLASSIFICATION	3.596776678449688E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999785888182	WITHOUT_CLASSIFICATION	2.141118183292766E-8	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9998988543668729	WITHOUT_CLASSIFICATION	1.0114563312717765E-4	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999942292045151	WITHOUT_CLASSIFICATION	5.7707954849755795E-6	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997469561098	WITHOUT_CLASSIFICATION	2.530438901207965E-7	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9989135260772012	WITHOUT_CLASSIFICATION	0.0010864739227988433	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999967466557	WITHOUT_CLASSIFICATION	3.2533443012192617E-9	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999925043899	WITHOUT_CLASSIFICATION	7.495610036112056E-9	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998154602647	WITHOUT_CLASSIFICATION	1.8453973532809011E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9998579400479795	WITHOUT_CLASSIFICATION	1.420599520205736E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999989605567609	WITHOUT_CLASSIFICATION	1.039443239151498E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999998374495095	WITHOUT_CLASSIFICATION	1.6255049049041968E-6	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999472559945	WITHOUT_CLASSIFICATION	5.274400538553067E-8	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999992646853	WITHOUT_CLASSIFICATION	7.353148231820715E-10	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999316295928347	WITHOUT_CLASSIFICATION	6.837040716535603E-5	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999459528973	WITHOUT_CLASSIFICATION	5.404710272096302E-8	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999989348078	WITHOUT_CLASSIFICATION	1.0651921190322E-9	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999432589330658	WITHOUT_CLASSIFICATION	5.674106693417445E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999932013457575	WITHOUT_CLASSIFICATION	6.798654242446733E-6	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.999757119052693	WITHOUT_CLASSIFICATION	2.4288094730699736E-4	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999905164532	WITHOUT_CLASSIFICATION	9.483546803526736E-9	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997402700856468	WITHOUT_CLASSIFICATION	2.5972991435315514E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9997712775543456	WITHOUT_CLASSIFICATION	2.2872244565445894E-4	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997574225803	WITHOUT_CLASSIFICATION	2.4257741966445044E-7	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999992908935427	WITHOUT_CLASSIFICATION	7.091064574473144E-7	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999947304918949	WITHOUT_CLASSIFICATION	5.269508105154271E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999355454765	WITHOUT_CLASSIFICATION	6.445452341262006E-8	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999999529626833	WITHOUT_CLASSIFICATION	4.70373167036992E-7	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999964480831776	WITHOUT_CLASSIFICATION	3.5519168223880517E-6	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999042622141	WITHOUT_CLASSIFICATION	9.573778583221389E-8	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998307616938046	WITHOUT_CLASSIFICATION	1.6923830619532942E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999355454765	WITHOUT_CLASSIFICATION	6.445452341262006E-8	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9909397551380389	WITHOUT_CLASSIFICATION	0.009060244861961145	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999966505502971	WITHOUT_CLASSIFICATION	3.3494497030097185E-6	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999977878992	WITHOUT_CLASSIFICATION	2.2121008257912496E-9	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999305184566	WITHOUT_CLASSIFICATION	6.948154349833823E-8	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999987780965642	WITHOUT_CLASSIFICATION	1.2219034357303992E-6	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999933472101908	WITHOUT_CLASSIFICATION	6.652789809262805E-6	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999999989198	WITHOUT_CLASSIFICATION	1.080203104043728E-11	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999981535047975	WITHOUT_CLASSIFICATION	1.8464952024239641E-6	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999652998358	WITHOUT_CLASSIFICATION	3.470016420195415E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9981285797825008	WITHOUT_CLASSIFICATION	0.0018714202174992403	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999952440189093	WITHOUT_CLASSIFICATION	4.755981090685336E-6	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999690443171971	WITHOUT_CLASSIFICATION	3.095568280287299E-5	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999818383959116	WITHOUT_CLASSIFICATION	1.8161604088366932E-5	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999300720552	WITHOUT_CLASSIFICATION	6.992794486238288E-8	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999985304947754	WITHOUT_CLASSIFICATION	1.4695052245930816E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999973042946362	WITHOUT_CLASSIFICATION	2.6957053638272665E-6	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999990631025323	WITHOUT_CLASSIFICATION	9.36897467776182E-7	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999997222153609	WITHOUT_CLASSIFICATION	2.7778463900890786E-7	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999529712345652	WITHOUT_CLASSIFICATION	4.7028765434946794E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998988352768622	WITHOUT_CLASSIFICATION	1.0116472313779178E-4	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999992699136	WITHOUT_CLASSIFICATION	7.300864364711735E-10	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999999591385477	WITHOUT_CLASSIFICATION	4.086145230603565E-7	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999866131804506	WITHOUT_CLASSIFICATION	1.3386819549299078E-5	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999998924447	WITHOUT_CLASSIFICATION	1.0755532681724425E-10	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999537955722	WITHOUT_CLASSIFICATION	4.620442791464956E-8	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999972827335607	WITHOUT_CLASSIFICATION	2.717266439324319E-6	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9933863377448627	WITHOUT_CLASSIFICATION	0.006613662255137278	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999368551843	WITHOUT_CLASSIFICATION	6.314481573354937E-8	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.999843179810089	WITHOUT_CLASSIFICATION	1.568201899110216E-4	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.7247639236032138	DEFECT	0.2752360763967863	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999575808656	WITHOUT_CLASSIFICATION	4.241913438103855E-8	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9988980543565072	WITHOUT_CLASSIFICATION	0.001101945643492682	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9972015342422599	WITHOUT_CLASSIFICATION	0.002798465757740116	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999969582073923	WITHOUT_CLASSIFICATION	3.0417926077336116E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999994431314	WITHOUT_CLASSIFICATION	5.56868584332711E-10	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999986248059	WITHOUT_CLASSIFICATION	1.3751941364595166E-9	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999759391313	WITHOUT_CLASSIFICATION	2.4060868715280933E-8	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999979018337857	WITHOUT_CLASSIFICATION	2.0981662144025386E-6	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999922107605	WITHOUT_CLASSIFICATION	7.789239515210081E-9	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999977044800483	WITHOUT_CLASSIFICATION	2.2955199517009864E-5	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999986544602679	WITHOUT_CLASSIFICATION	1.3455397320843442E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999986544602679	WITHOUT_CLASSIFICATION	1.3455397320843442E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999639141220905	WITHOUT_CLASSIFICATION	3.608587790947387E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999989276899441	WITHOUT_CLASSIFICATION	1.0723100559145388E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999662363678	WITHOUT_CLASSIFICATION	3.376363218546946E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5213658845087823	WITHOUT_CLASSIFICATION	0.47863411549121787	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999995273913179	WITHOUT_CLASSIFICATION	4.726086820063575E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999995273913179	WITHOUT_CLASSIFICATION	4.726086820063575E-7	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999954775980753	WITHOUT_CLASSIFICATION	4.522401924702422E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999034257732	WITHOUT_CLASSIFICATION	9.657422691352672E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999649783088198	WITHOUT_CLASSIFICATION	3.502169118009208E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999949154206859	WITHOUT_CLASSIFICATION	5.0845793141050875E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999999971011903	WITHOUT_CLASSIFICATION	2.8988097045493576E-8	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999806450185367	WITHOUT_CLASSIFICATION	1.9354981463361264E-5	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.99999419152979	WITHOUT_CLASSIFICATION	5.808470209989281E-6	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999999998114052	WITHOUT_CLASSIFICATION	1.885948059714779E-9	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999254261511163	WITHOUT_CLASSIFICATION	7.457384888372051E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998863157982	WITHOUT_CLASSIFICATION	1.1368420192156123E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998863157982	WITHOUT_CLASSIFICATION	1.1368420192156123E-7	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999972307097152	WITHOUT_CLASSIFICATION	2.7692902848298816E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999975501669752	WITHOUT_CLASSIFICATION	2.4498330247060775E-6	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.999999898843145	WITHOUT_CLASSIFICATION	1.0115685497051239E-7	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999946654218584	WITHOUT_CLASSIFICATION	5.334578141595281E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880751308545	WITHOUT_CLASSIFICATION	1.192486914543449E-5	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999998821699516	WITHOUT_CLASSIFICATION	1.17830048435806E-7	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999647703371	WITHOUT_CLASSIFICATION	3.522966285356079E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880751308545	WITHOUT_CLASSIFICATION	1.192486914543449E-5	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999966130598	WITHOUT_CLASSIFICATION	3.3869402197911576E-9	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999099081899051	WITHOUT_CLASSIFICATION	9.009181009486774E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998510186395123	WITHOUT_CLASSIFICATION	1.489813604877381E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999882900193	WITHOUT_CLASSIFICATION	1.1709980560934758E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9981285797825008	WITHOUT_CLASSIFICATION	0.0018714202174992403	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999984304170052	WITHOUT_CLASSIFICATION	1.5695829948049889E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9995472579455579	WITHOUT_CLASSIFICATION	4.5274205444209516E-4	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999889689375907	WITHOUT_CLASSIFICATION	1.103106240935772E-5	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999999301432362	WITHOUT_CLASSIFICATION	6.985676382081192E-8	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999275208486	WITHOUT_CLASSIFICATION	7.247915140500219E-7	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999987377881291	WITHOUT_CLASSIFICATION	1.2622118709508172E-6	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999989116178352	WITHOUT_CLASSIFICATION	1.0883821648182964E-6	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999795584984	WITHOUT_CLASSIFICATION	2.0441501609826835E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999799486103557	WITHOUT_CLASSIFICATION	2.0051389644409753E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9978526075727504	WITHOUT_CLASSIFICATION	0.002147392427249684	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9978526075727504	WITHOUT_CLASSIFICATION	0.002147392427249684	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999970946385941	WITHOUT_CLASSIFICATION	2.9053614057797898E-6	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999998968792049	WITHOUT_CLASSIFICATION	1.0312079507247379E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999752978922035	WITHOUT_CLASSIFICATION	2.470210779640046E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999952717973684	WITHOUT_CLASSIFICATION	4.7282026316739195E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999995224579872	WITHOUT_CLASSIFICATION	4.775420129115862E-7	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999686394555	WITHOUT_CLASSIFICATION	3.136054456511176E-8	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999995484581546	WITHOUT_CLASSIFICATION	4.5154184544192727E-7	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9984227398013099	WITHOUT_CLASSIFICATION	0.0015772601986900594	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998727856484	WITHOUT_CLASSIFICATION	1.2721435152842237E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999974409219886	WITHOUT_CLASSIFICATION	2.5590780113224296E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983544783656	WITHOUT_CLASSIFICATION	1.6455216343972414E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.5022642262956609	DEFECT	0.49773577370433897	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999975945969718	WITHOUT_CLASSIFICATION	2.4054030282106608E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999027082155	WITHOUT_CLASSIFICATION	9.729178459708845E-8	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999997526452463	WITHOUT_CLASSIFICATION	2.473547536762675E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999903783104	WITHOUT_CLASSIFICATION	9.621689516306797E-9	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999934477676611	WITHOUT_CLASSIFICATION	6.552232338917134E-6	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999861918393868	WITHOUT_CLASSIFICATION	1.3808160613148778E-5	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999661591543067	WITHOUT_CLASSIFICATION	3.3840845693304907E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999253782660904	WITHOUT_CLASSIFICATION	7.462173390965251E-5	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999994822859728	WITHOUT_CLASSIFICATION	5.177140271215319E-7	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999998536635559	WITHOUT_CLASSIFICATION	1.463364439745581E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9983861649968931	WITHOUT_CLASSIFICATION	0.001613835003106812	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999992327342	WITHOUT_CLASSIFICATION	7.672657523431238E-10	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999964901957962	WITHOUT_CLASSIFICATION	3.5098042039128575E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999964901957962	WITHOUT_CLASSIFICATION	3.5098042039128575E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999225552046268	WITHOUT_CLASSIFICATION	7.744479537319447E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999644933033793	WITHOUT_CLASSIFICATION	3.5506696620720095E-5	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999999371562	WITHOUT_CLASSIFICATION	6.284383687633599E-11	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999959818768254	WITHOUT_CLASSIFICATION	4.0181231745850415E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999991439148851	WITHOUT_CLASSIFICATION	8.560851150613275E-7	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999741023620426	WITHOUT_CLASSIFICATION	2.5897637957267582E-5	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9981984608345886	WITHOUT_CLASSIFICATION	0.001801539165411359	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999860665751314	WITHOUT_CLASSIFICATION	1.393342486854804E-5	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.914565268723836	WITHOUT_CLASSIFICATION	0.08543473127616394	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.949819995949307	DEFECT	0.05018000405069294	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.5922627302537642	DEFECT	0.4077372697462358	WITHOUT_CLASSIFICATION
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.8153944947890254	DEFECT	0.18460550521097469	WITHOUT_CLASSIFICATION
/*	DEFECT	0.9935288677646075	WITHOUT_CLASSIFICATION	0.006471132235392523	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9891818296480434	WITHOUT_CLASSIFICATION	0.010818170351956629	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9963486746190956	DEFECT	0.003651325380904461	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.5912647268081255	WITHOUT_CLASSIFICATION	0.4087352731918745	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9999918457549017	DEFECT	8.154245098348417E-6	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.7544983565265849	DEFECT	0.24550164347341494	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8095642251611691	DEFECT	0.19043577483883092	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8095642251611691	DEFECT	0.19043577483883092	WITHOUT_CLASSIFICATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.8874968140486746	WITHOUT_CLASSIFICATION	0.11250318595132539	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999133295922169	WITHOUT_CLASSIFICATION	8.667040778309887E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9675393078548751	DEFECT	0.03246069214512494	WITHOUT_CLASSIFICATION
// this call is side-effecty	DEFECT	0.9999854881636865	WITHOUT_CLASSIFICATION	1.4511836313499544E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9770583742878073	WITHOUT_CLASSIFICATION	0.022941625712192687	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9745354220501046	WITHOUT_CLASSIFICATION	0.02546457794989544	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9694081909762245	DEFECT	0.030591809023775514	WITHOUT_CLASSIFICATION
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9924990981164258	WITHOUT_CLASSIFICATION	0.007500901883574191	DEFECT
//TODO: is this completely correct?	DEFECT	0.8822911604666512	WITHOUT_CLASSIFICATION	0.11770883953334874	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.999987164251562	WITHOUT_CLASSIFICATION	1.2835748438002176E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.8485347139564283	DEFECT	0.15146528604357168	WITHOUT_CLASSIFICATION
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9997412089439653	WITHOUT_CLASSIFICATION	2.5879105603474094E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9416847417128267	DEFECT	0.05831525828717337	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9892285294133479	DEFECT	0.010771470586651993	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9984372183268697	WITHOUT_CLASSIFICATION	0.001562781673130299	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.8873300148837485	WITHOUT_CLASSIFICATION	0.11266998511625158	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.7057774285921123	DEFECT	0.2942225714078877	WITHOUT_CLASSIFICATION
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.8809712144370426	WITHOUT_CLASSIFICATION	0.11902878556295733	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.7593855899105829	WITHOUT_CLASSIFICATION	0.24061441008941697	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8095642251611691	DEFECT	0.19043577483883092	WITHOUT_CLASSIFICATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9998638070122827	DEFECT	1.3619298771722248E-4	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.8976248197429215	WITHOUT_CLASSIFICATION	0.10237518025707845	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.6738326327733006	WITHOUT_CLASSIFICATION	0.32616736722669937	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9048377533351689	WITHOUT_CLASSIFICATION	0.09516224666483103	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.999986610522764	WITHOUT_CLASSIFICATION	1.3389477235808619E-5	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9999867452345712	WITHOUT_CLASSIFICATION	1.3254765428774893E-5	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9907464862484345	WITHOUT_CLASSIFICATION	0.00925351375156544	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9907052685634975	DEFECT	0.00929473143650246	WITHOUT_CLASSIFICATION
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.5051624438684117	DEFECT	0.4948375561315884	WITHOUT_CLASSIFICATION
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9936027461914815	WITHOUT_CLASSIFICATION	0.006397253808518466	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9998838675713355	WITHOUT_CLASSIFICATION	1.1613242866444898E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.8690285652899686	DEFECT	0.1309714347100314	WITHOUT_CLASSIFICATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9991526958914637	WITHOUT_CLASSIFICATION	8.473041085363302E-4	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9611140388555859	WITHOUT_CLASSIFICATION	0.0388859611444141	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.7168464857298452	WITHOUT_CLASSIFICATION	0.2831535142701548	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.8616244673717811	WITHOUT_CLASSIFICATION	0.1383755326282189	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.8825621690266626	DEFECT	0.11743783097333729	WITHOUT_CLASSIFICATION
