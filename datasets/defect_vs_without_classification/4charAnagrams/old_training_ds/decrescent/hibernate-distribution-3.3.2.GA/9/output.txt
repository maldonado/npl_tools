//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999914302649	WITHOUT_CLASSIFICATION	8.569735021944835E-9	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588741385	WITHOUT_CLASSIFICATION	1.141125861508603E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588741385	WITHOUT_CLASSIFICATION	1.141125861508603E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588741385	WITHOUT_CLASSIFICATION	1.141125861508603E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588741385	WITHOUT_CLASSIFICATION	1.141125861508603E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588741385	WITHOUT_CLASSIFICATION	1.141125861508603E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588741385	WITHOUT_CLASSIFICATION	1.141125861508603E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588741385	WITHOUT_CLASSIFICATION	1.141125861508603E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897564846	WITHOUT_CLASSIFICATION	1.8102435153494011E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897564846	WITHOUT_CLASSIFICATION	1.8102435153494011E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999908714069901	WITHOUT_CLASSIFICATION	9.128593009944936E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995252756972	WITHOUT_CLASSIFICATION	4.7472430270020624E-7	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999999793327632	WITHOUT_CLASSIFICATION	2.0667236867801763E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999907820855235	WITHOUT_CLASSIFICATION	9.217914476526847E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999907820855235	WITHOUT_CLASSIFICATION	9.217914476526847E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999953339307	WITHOUT_CLASSIFICATION	4.6660692969091106E-9	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992110173479	WITHOUT_CLASSIFICATION	7.889826521233888E-7	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999998531134197	WITHOUT_CLASSIFICATION	1.4688658030182542E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999997845527134	WITHOUT_CLASSIFICATION	2.154472866015651E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970045733831	WITHOUT_CLASSIFICATION	2.995426616950654E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970045733831	WITHOUT_CLASSIFICATION	2.995426616950654E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999872254650635	WITHOUT_CLASSIFICATION	1.2774534936627021E-5	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999747997599	WITHOUT_CLASSIFICATION	2.520024009911705E-8	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999110069608117	WITHOUT_CLASSIFICATION	8.899303918822459E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999970441872398	WITHOUT_CLASSIFICATION	2.9558127603317564E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999103051893	WITHOUT_CLASSIFICATION	8.969481069858777E-8	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999995072331223	WITHOUT_CLASSIFICATION	4.927668777093823E-7	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999899064019022	WITHOUT_CLASSIFICATION	1.0093598097655403E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999995951921178	WITHOUT_CLASSIFICATION	4.048078822262106E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999974694789333	WITHOUT_CLASSIFICATION	2.530521066675652E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934718488226272	WITHOUT_CLASSIFICATION	0.00652815117737287	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999997331653802	WITHOUT_CLASSIFICATION	2.6683461978141356E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999996121272233	WITHOUT_CLASSIFICATION	3.878727766528591E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999995618500059	WITHOUT_CLASSIFICATION	4.3814999407460594E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999995510859511	WITHOUT_CLASSIFICATION	4.4891404887406053E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999995510859511	WITHOUT_CLASSIFICATION	4.4891404887406053E-7	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.99999896592218	WITHOUT_CLASSIFICATION	1.0340778200372915E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999954596748887	WITHOUT_CLASSIFICATION	4.5403251113228565E-6	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999774748249	WITHOUT_CLASSIFICATION	2.2525175007226466E-8	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999991502537853	WITHOUT_CLASSIFICATION	8.497462146422181E-7	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999676810698	WITHOUT_CLASSIFICATION	3.231893027262422E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5246656784017598	WITHOUT_CLASSIFICATION	0.4753343215982401	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5246656784017598	WITHOUT_CLASSIFICATION	0.4753343215982401	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998913687473	WITHOUT_CLASSIFICATION	1.0863125258942953E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998665340060615	WITHOUT_CLASSIFICATION	1.3346599393838926E-4	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999874925521	WITHOUT_CLASSIFICATION	1.2507447743447617E-8	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999998892530371	WITHOUT_CLASSIFICATION	1.1074696289289319E-6	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999926241305841	WITHOUT_CLASSIFICATION	7.375869415965472E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998122868724	WITHOUT_CLASSIFICATION	1.8771312756691255E-7	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985910063174	WITHOUT_CLASSIFICATION	1.4089936825455762E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999994763692016	WITHOUT_CLASSIFICATION	5.236307983163211E-7	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999705368577912	WITHOUT_CLASSIFICATION	2.9463142208697196E-5	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9870292195831004	WITHOUT_CLASSIFICATION	0.01297078041689957	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999923887623448	WITHOUT_CLASSIFICATION	7.611237655252818E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999705368577912	WITHOUT_CLASSIFICATION	2.9463142208697196E-5	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999923887623448	WITHOUT_CLASSIFICATION	7.611237655252818E-6	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999975532890311	WITHOUT_CLASSIFICATION	2.4467109689714E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999998090202714	WITHOUT_CLASSIFICATION	1.9097972859094185E-7	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999994531190156	WITHOUT_CLASSIFICATION	5.46880984513792E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999945037619478	WITHOUT_CLASSIFICATION	5.496238052269755E-6	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999610810789	WITHOUT_CLASSIFICATION	3.891892117233015E-8	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999978863912	WITHOUT_CLASSIFICATION	2.1136088605729152E-9	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999902876106342	WITHOUT_CLASSIFICATION	9.712389365707495E-6	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999265811016621	WITHOUT_CLASSIFICATION	7.341889833789144E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998967390945	WITHOUT_CLASSIFICATION	1.0326090537815714E-7	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999998697396979	WITHOUT_CLASSIFICATION	1.3026030212055223E-7	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999969783567247	WITHOUT_CLASSIFICATION	3.0216432753382397E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.999996697876246	WITHOUT_CLASSIFICATION	3.3021237540716125E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998838823845	WITHOUT_CLASSIFICATION	1.1611761556506839E-7	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999990126788207	WITHOUT_CLASSIFICATION	9.873211792607635E-7	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999997110229222	WITHOUT_CLASSIFICATION	2.889770777925842E-7	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999996315210777	WITHOUT_CLASSIFICATION	3.684789222122303E-7	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999981130380231	WITHOUT_CLASSIFICATION	1.8869619769667403E-6	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999982580001379	WITHOUT_CLASSIFICATION	1.741999862153155E-6	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999546054286	WITHOUT_CLASSIFICATION	4.5394571523243006E-8	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999758702414	WITHOUT_CLASSIFICATION	2.4129758702985893E-8	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999999576488777	WITHOUT_CLASSIFICATION	4.235112234185533E-8	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999964063357	WITHOUT_CLASSIFICATION	3.593664285935348E-9	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999883129512	WITHOUT_CLASSIFICATION	1.1687048736833782E-8	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999983483776158	WITHOUT_CLASSIFICATION	1.6516223840992878E-6	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999762903463189	WITHOUT_CLASSIFICATION	2.3709653681108526E-5	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999998780274659	WITHOUT_CLASSIFICATION	1.2197253418157E-7	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999998966052	WITHOUT_CLASSIFICATION	1.0339489526544658E-10	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999902437773	WITHOUT_CLASSIFICATION	9.756222642257165E-9	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999570610074	WITHOUT_CLASSIFICATION	4.29389925918414E-8	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999971258832	WITHOUT_CLASSIFICATION	2.8741167917164274E-9	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999851365261	WITHOUT_CLASSIFICATION	1.4863473797019534E-8	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999968510858	WITHOUT_CLASSIFICATION	3.1489142917824894E-9	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999605913149469	WITHOUT_CLASSIFICATION	3.9408685053185056E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999990645256698	WITHOUT_CLASSIFICATION	9.354743303174804E-7	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999925606205116	WITHOUT_CLASSIFICATION	7.439379488418242E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998833701284	WITHOUT_CLASSIFICATION	1.166298716608867E-7	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999990645256698	WITHOUT_CLASSIFICATION	9.354743303174804E-7	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999996862558673	WITHOUT_CLASSIFICATION	3.1374413265511726E-7	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999703568652183	WITHOUT_CLASSIFICATION	2.9643134781772837E-5	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999956135229419	WITHOUT_CLASSIFICATION	4.386477058241572E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999993290231278	WITHOUT_CLASSIFICATION	6.709768722131684E-7	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999998989926713	WITHOUT_CLASSIFICATION	1.0100732875216728E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992623988916	WITHOUT_CLASSIFICATION	7.376011084459394E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992623988916	WITHOUT_CLASSIFICATION	7.376011084459394E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999993143530505	WITHOUT_CLASSIFICATION	6.856469495023722E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998438321582	WITHOUT_CLASSIFICATION	1.5616784174142896E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999963564244954	WITHOUT_CLASSIFICATION	3.6435755045730477E-6	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999999395115	WITHOUT_CLASSIFICATION	6.048851053091823E-10	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999997396107956	WITHOUT_CLASSIFICATION	2.6038920446389574E-7	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999999996152933	WITHOUT_CLASSIFICATION	3.847066929550854E-9	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999993276956993	WITHOUT_CLASSIFICATION	6.723043005952209E-7	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999805860130596	WITHOUT_CLASSIFICATION	1.9413986940384742E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999962298174	WITHOUT_CLASSIFICATION	3.770182628198343E-9	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999835279585	WITHOUT_CLASSIFICATION	1.6472041526189347E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999964110853	WITHOUT_CLASSIFICATION	3.5889147192374355E-9	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999964110853	WITHOUT_CLASSIFICATION	3.5889147192374355E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999734481670297	WITHOUT_CLASSIFICATION	2.6551832970297888E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999968736663686	WITHOUT_CLASSIFICATION	3.126333631415859E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999999214817894	WITHOUT_CLASSIFICATION	7.851821065985016E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999964110853	WITHOUT_CLASSIFICATION	3.5889147192374355E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999734481670297	WITHOUT_CLASSIFICATION	2.6551832970297888E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999734481670297	WITHOUT_CLASSIFICATION	2.6551832970297888E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999950766434	WITHOUT_CLASSIFICATION	4.92335666455875E-9	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.99999848226028	WITHOUT_CLASSIFICATION	1.517739720049467E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999962894025461	WITHOUT_CLASSIFICATION	3.7105974539043153E-6	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999981230384	WITHOUT_CLASSIFICATION	1.876961470309488E-9	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999981424564467	WITHOUT_CLASSIFICATION	1.8575435532325062E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999981424564467	WITHOUT_CLASSIFICATION	1.8575435532325062E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999999944005515	WITHOUT_CLASSIFICATION	5.5994484985488966E-8	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999993360458002	WITHOUT_CLASSIFICATION	6.639541997898427E-7	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999989800976222	WITHOUT_CLASSIFICATION	1.0199023777438802E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996467355042	WITHOUT_CLASSIFICATION	3.5326449579090397E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996467355042	WITHOUT_CLASSIFICATION	3.5326449579090397E-7	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999998569202183	WITHOUT_CLASSIFICATION	1.43079781696874E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999848635028837	WITHOUT_CLASSIFICATION	1.5136497116308804E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999742938221111	WITHOUT_CLASSIFICATION	2.5706177888888374E-5	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999815230026	WITHOUT_CLASSIFICATION	1.8476997435557692E-8	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999939594081	WITHOUT_CLASSIFICATION	6.040592002005917E-9	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999697544836	WITHOUT_CLASSIFICATION	3.024551639002725E-8	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999905465043908	WITHOUT_CLASSIFICATION	9.453495609126727E-6	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999999914972053	WITHOUT_CLASSIFICATION	8.502794694747463E-8	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999987463623056	WITHOUT_CLASSIFICATION	1.2536376943960293E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999742938221111	WITHOUT_CLASSIFICATION	2.5706177888888374E-5	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999777010047548	WITHOUT_CLASSIFICATION	2.2298995245311147E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999972731748333	WITHOUT_CLASSIFICATION	2.7268251667209562E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999972731748333	WITHOUT_CLASSIFICATION	2.7268251667209562E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999984774654457	WITHOUT_CLASSIFICATION	1.5225345543892354E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999992119117055	WITHOUT_CLASSIFICATION	7.8808829451945E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999938132437048	WITHOUT_CLASSIFICATION	6.186756295189456E-6	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999918548976591	WITHOUT_CLASSIFICATION	8.145102340867542E-6	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999997426752872	WITHOUT_CLASSIFICATION	2.573247127965198E-7	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999850321815981	WITHOUT_CLASSIFICATION	1.4967818401946497E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.999667313636768	WITHOUT_CLASSIFICATION	3.326863632319871E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999996168952	WITHOUT_CLASSIFICATION	3.8310479138197653E-10	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999199494216	WITHOUT_CLASSIFICATION	8.005057838038174E-8	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999199494216	WITHOUT_CLASSIFICATION	8.005057838038174E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526311054	WITHOUT_CLASSIFICATION	2.14736889446665E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999914302649	WITHOUT_CLASSIFICATION	8.569735021944835E-9	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997718642172	WITHOUT_CLASSIFICATION	2.281357827964338E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588741385	WITHOUT_CLASSIFICATION	1.141125861508603E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999995040117093	WITHOUT_CLASSIFICATION	4.959882906088208E-7	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897564846	WITHOUT_CLASSIFICATION	1.8102435153494011E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999989449452589	WITHOUT_CLASSIFICATION	1.0550547410673132E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999999932924207	WITHOUT_CLASSIFICATION	6.707579306628922E-8	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999377410839	WITHOUT_CLASSIFICATION	6.225891621708823E-8	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999993218215996	WITHOUT_CLASSIFICATION	6.781784005152826E-7	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9998455340835282	WITHOUT_CLASSIFICATION	1.5446591647187206E-4	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999979424516922	WITHOUT_CLASSIFICATION	2.0575483078736173E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999959128571688	WITHOUT_CLASSIFICATION	4.087142831188623E-6	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999996889985695	WITHOUT_CLASSIFICATION	3.110014304880265E-7	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995252756972	WITHOUT_CLASSIFICATION	4.7472430270020624E-7	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999988403320023	WITHOUT_CLASSIFICATION	1.1596679978242259E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999988403320023	WITHOUT_CLASSIFICATION	1.1596679978242259E-6	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999998844441601	WITHOUT_CLASSIFICATION	1.1555583993695835E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999896463156029	WITHOUT_CLASSIFICATION	1.0353684397054524E-5	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999994570099118	WITHOUT_CLASSIFICATION	5.429900882731197E-7	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999969301205242	WITHOUT_CLASSIFICATION	3.0698794758840426E-6	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999994394127448	WITHOUT_CLASSIFICATION	5.605872551385282E-7	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999704588568	WITHOUT_CLASSIFICATION	2.9541143217860254E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999907820855235	WITHOUT_CLASSIFICATION	9.217914476526847E-6	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998393397009	WITHOUT_CLASSIFICATION	1.6066029908181053E-7	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999976741345645	WITHOUT_CLASSIFICATION	2.325865435443109E-6	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999999508592314	WITHOUT_CLASSIFICATION	4.914076860127939E-7	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999996051634659	WITHOUT_CLASSIFICATION	3.948365341610768E-7	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999948503604159	WITHOUT_CLASSIFICATION	5.149639584044563E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999982458902962	WITHOUT_CLASSIFICATION	1.7541097038862436E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999601741407	WITHOUT_CLASSIFICATION	3.9825859333291034E-8	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998402957081	WITHOUT_CLASSIFICATION	1.597042919835756E-7	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999172239609	WITHOUT_CLASSIFICATION	8.277603918231191E-8	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999818162907628	WITHOUT_CLASSIFICATION	1.8183709237257094E-5	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999989438169935	WITHOUT_CLASSIFICATION	1.0561830064814477E-6	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999204312562	WITHOUT_CLASSIFICATION	7.956874386486643E-8	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588741385	WITHOUT_CLASSIFICATION	1.141125861508603E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588741385	WITHOUT_CLASSIFICATION	1.141125861508603E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897564846	WITHOUT_CLASSIFICATION	1.8102435153494011E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897564846	WITHOUT_CLASSIFICATION	1.8102435153494011E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999959128571688	WITHOUT_CLASSIFICATION	4.087142831188623E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999988403320023	WITHOUT_CLASSIFICATION	1.1596679978242259E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999601741407	WITHOUT_CLASSIFICATION	3.9825859333291034E-8	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999953339307	WITHOUT_CLASSIFICATION	4.6660692969091106E-9	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999996564187429	WITHOUT_CLASSIFICATION	3.4358125706205084E-7	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999267611350949	WITHOUT_CLASSIFICATION	7.323886490515514E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999940752463755	WITHOUT_CLASSIFICATION	5.92475362452518E-6	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999929298949315	WITHOUT_CLASSIFICATION	7.070105068473864E-6	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999873320777052	WITHOUT_CLASSIFICATION	1.2667922294699323E-5	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999980742446266	WITHOUT_CLASSIFICATION	1.9257553734863283E-6	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999121227443112	WITHOUT_CLASSIFICATION	8.787725568892285E-5	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999874234756936	WITHOUT_CLASSIFICATION	1.2576524306291005E-5	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999998771118453	WITHOUT_CLASSIFICATION	1.2288815465932522E-7	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999980567250126	WITHOUT_CLASSIFICATION	1.9432749873805157E-6	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999980567250126	WITHOUT_CLASSIFICATION	1.9432749873805157E-6	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999999993763468	WITHOUT_CLASSIFICATION	6.236531971862487E-9	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999994077040484	WITHOUT_CLASSIFICATION	5.922959516752757E-7	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999898618839146	WITHOUT_CLASSIFICATION	1.0138116085419907E-5	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999903402416495	WITHOUT_CLASSIFICATION	9.659758350540029E-6	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999939659344	WITHOUT_CLASSIFICATION	6.0340656774708095E-9	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999412304522	WITHOUT_CLASSIFICATION	5.876954778076356E-8	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999999375870674	WITHOUT_CLASSIFICATION	6.241293258019811E-8	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992110173479	WITHOUT_CLASSIFICATION	7.889826521233888E-7	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999898352771536	WITHOUT_CLASSIFICATION	1.0164722846405345E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993185996235	WITHOUT_CLASSIFICATION	6.814003764737653E-7	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993185996235	WITHOUT_CLASSIFICATION	6.814003764737653E-7	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999407050744	WITHOUT_CLASSIFICATION	5.9294925599705694E-8	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999997386819389	WITHOUT_CLASSIFICATION	2.6131806105012267E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999995398328095	WITHOUT_CLASSIFICATION	4.601671904271517E-7	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999943097977922	WITHOUT_CLASSIFICATION	5.690202207849003E-6	DEFECT
// int	WITHOUT_CLASSIFICATION	0.999988007933276	WITHOUT_CLASSIFICATION	1.199206672398031E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897564846	WITHOUT_CLASSIFICATION	1.8102435153494011E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999959128571688	WITHOUT_CLASSIFICATION	4.087142831188623E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995252756972	WITHOUT_CLASSIFICATION	4.7472430270020624E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999601741407	WITHOUT_CLASSIFICATION	3.9825859333291034E-8	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999601741407	WITHOUT_CLASSIFICATION	3.9825859333291034E-8	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996109453055	WITHOUT_CLASSIFICATION	3.890546944559355E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996109453055	WITHOUT_CLASSIFICATION	3.890546944559355E-7	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999997538981594	WITHOUT_CLASSIFICATION	2.4610184049597397E-7	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999983773606123	WITHOUT_CLASSIFICATION	1.6226393876858868E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999983773606123	WITHOUT_CLASSIFICATION	1.6226393876858868E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999997855480272	WITHOUT_CLASSIFICATION	2.144519728052921E-7	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.999998696730014	WITHOUT_CLASSIFICATION	1.3032699860273857E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999999098042649	WITHOUT_CLASSIFICATION	9.019573513490924E-8	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999993571890301	WITHOUT_CLASSIFICATION	6.428109698750483E-7	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999848026592933	WITHOUT_CLASSIFICATION	1.5197340706500764E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999997845527134	WITHOUT_CLASSIFICATION	2.154472866015651E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999997845527134	WITHOUT_CLASSIFICATION	2.154472866015651E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999869520657637	WITHOUT_CLASSIFICATION	1.3047934236353694E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999923919433107	WITHOUT_CLASSIFICATION	7.608056689224968E-6	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999998758746299	WITHOUT_CLASSIFICATION	1.2412537008375314E-7	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999971802400612	WITHOUT_CLASSIFICATION	2.8197599387517665E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.999999912678942	WITHOUT_CLASSIFICATION	8.732105798672454E-8	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999986831776497	WITHOUT_CLASSIFICATION	1.3168223502763936E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970045733831	WITHOUT_CLASSIFICATION	2.995426616950654E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999991554537671	WITHOUT_CLASSIFICATION	8.445462328969496E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999991554537671	WITHOUT_CLASSIFICATION	8.445462328969496E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999872254650635	WITHOUT_CLASSIFICATION	1.2774534936627021E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999872254650635	WITHOUT_CLASSIFICATION	1.2774534936627021E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999968028564848	WITHOUT_CLASSIFICATION	3.1971435151663956E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999968028564848	WITHOUT_CLASSIFICATION	3.1971435151663956E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999957270937	WITHOUT_CLASSIFICATION	4.272906320678322E-9	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999957270937	WITHOUT_CLASSIFICATION	4.272906320678322E-9	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999997845527134	WITHOUT_CLASSIFICATION	2.154472866015651E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970045733831	WITHOUT_CLASSIFICATION	2.995426616950654E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999991554537671	WITHOUT_CLASSIFICATION	8.445462328969496E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999991554537671	WITHOUT_CLASSIFICATION	8.445462328969496E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999872254650635	WITHOUT_CLASSIFICATION	1.2774534936627021E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999968028564848	WITHOUT_CLASSIFICATION	3.1971435151663956E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999968028564848	WITHOUT_CLASSIFICATION	3.1971435151663956E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999957270937	WITHOUT_CLASSIFICATION	4.272906320678322E-9	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999988854689962	WITHOUT_CLASSIFICATION	1.114531003818765E-6	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999986683258534	WITHOUT_CLASSIFICATION	1.3316741466382674E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.999994471918876	WITHOUT_CLASSIFICATION	5.528081123996471E-6	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999988297403986	WITHOUT_CLASSIFICATION	1.1702596014610387E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999999522911736	WITHOUT_CLASSIFICATION	4.7708826492784656E-8	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999980659407777	WITHOUT_CLASSIFICATION	1.9340592224101528E-6	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999598086715669	WITHOUT_CLASSIFICATION	4.019132843305259E-5	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9593207418346567	WITHOUT_CLASSIFICATION	0.04067925816534332	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9995841854927375	WITHOUT_CLASSIFICATION	4.158145072623753E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999999852421166	WITHOUT_CLASSIFICATION	1.475788340393631E-7	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999979594123879	WITHOUT_CLASSIFICATION	2.040587612004862E-6	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999056279949	WITHOUT_CLASSIFICATION	9.437200514083717E-8	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999993143530505	WITHOUT_CLASSIFICATION	6.856469495023722E-6	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999980659407777	WITHOUT_CLASSIFICATION	1.9340592224101528E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999518496625326	WITHOUT_CLASSIFICATION	4.815033746751623E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999518496625326	WITHOUT_CLASSIFICATION	4.815033746751623E-5	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999696827862603	WITHOUT_CLASSIFICATION	3.0317213739767128E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999922077965	WITHOUT_CLASSIFICATION	7.792203499332813E-8	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999922077965	WITHOUT_CLASSIFICATION	7.792203499332813E-8	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999958560252796	WITHOUT_CLASSIFICATION	4.1439747203828405E-6	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999961833763078	WITHOUT_CLASSIFICATION	3.816623692194998E-6	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999943457349618	WITHOUT_CLASSIFICATION	5.654265038183671E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999998113382594	WITHOUT_CLASSIFICATION	1.8866174047467682E-7	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999998113382594	WITHOUT_CLASSIFICATION	1.8866174047467682E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999103051893	WITHOUT_CLASSIFICATION	8.969481069858777E-8	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999926945251751	WITHOUT_CLASSIFICATION	7.305474824871204E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999926945251751	WITHOUT_CLASSIFICATION	7.305474824871204E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999995238648289	WITHOUT_CLASSIFICATION	4.7613517095650865E-7	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999998060800004	WITHOUT_CLASSIFICATION	1.9391999964698563E-7	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999994540344782	WITHOUT_CLASSIFICATION	5.459655216977945E-7	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999985995170849	WITHOUT_CLASSIFICATION	1.4004829150506423E-6	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999988697417338	WITHOUT_CLASSIFICATION	1.1302582661818108E-6	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999974812189245	WITHOUT_CLASSIFICATION	2.518781075545935E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999995072331223	WITHOUT_CLASSIFICATION	4.927668777093823E-7	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999985218559662	WITHOUT_CLASSIFICATION	1.4781440338637333E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9967082675875655	WITHOUT_CLASSIFICATION	0.0032917324124344823	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999953061860027	WITHOUT_CLASSIFICATION	4.693813997201257E-6	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999985874718197	WITHOUT_CLASSIFICATION	1.4125281802424767E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999974694789333	WITHOUT_CLASSIFICATION	2.530521066675652E-6	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998952082754	WITHOUT_CLASSIFICATION	1.0479172453036623E-7	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999997802013014	WITHOUT_CLASSIFICATION	2.197986985994534E-7	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999813880052	WITHOUT_CLASSIFICATION	1.861199482419828E-8	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999974694789333	WITHOUT_CLASSIFICATION	2.530521066675652E-6	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999999716203705	WITHOUT_CLASSIFICATION	2.8379629505588373E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997945836346	WITHOUT_CLASSIFICATION	2.0541636532694214E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999997764642302	WITHOUT_CLASSIFICATION	2.2353576971289674E-7	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999894241158658	WITHOUT_CLASSIFICATION	1.0575884134156964E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999905121725493	WITHOUT_CLASSIFICATION	9.48782745070425E-6	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999987288047643	WITHOUT_CLASSIFICATION	1.271195235745834E-6	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999998361659679	WITHOUT_CLASSIFICATION	1.6383403213623143E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999996121272233	WITHOUT_CLASSIFICATION	3.878727766528591E-7	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993462428979	WITHOUT_CLASSIFICATION	6.537571021077492E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999995618500059	WITHOUT_CLASSIFICATION	4.3814999407460594E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999991105804729	WITHOUT_CLASSIFICATION	8.894195271335873E-7	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999611843916	WITHOUT_CLASSIFICATION	3.881560828176235E-8	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999967236000992	WITHOUT_CLASSIFICATION	3.276399900775502E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999995072331223	WITHOUT_CLASSIFICATION	4.927668777093823E-7	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993462428979	WITHOUT_CLASSIFICATION	6.537571021077492E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999991105804729	WITHOUT_CLASSIFICATION	8.894195271335873E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999967236000992	WITHOUT_CLASSIFICATION	3.276399900775502E-6	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998571077898	WITHOUT_CLASSIFICATION	1.4289221009309096E-7	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999958065571112	WITHOUT_CLASSIFICATION	4.193442888823721E-6	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999713099136	WITHOUT_CLASSIFICATION	2.8690086448522976E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999995510859511	WITHOUT_CLASSIFICATION	4.4891404887406053E-7	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999997468611901	WITHOUT_CLASSIFICATION	2.5313880987357755E-7	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999886902836342	WITHOUT_CLASSIFICATION	1.130971636566371E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999962008547747	WITHOUT_CLASSIFICATION	3.799145225344967E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999998877034215	WITHOUT_CLASSIFICATION	1.1229657851021695E-7	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999987941959436	WITHOUT_CLASSIFICATION	1.2058040563093282E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999994967113	WITHOUT_CLASSIFICATION	5.032886951071278E-9	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999245892621	WITHOUT_CLASSIFICATION	7.541073780052766E-8	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999987922534086	WITHOUT_CLASSIFICATION	1.207746591384289E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999992532698	WITHOUT_CLASSIFICATION	7.467303265900109E-10	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999996429392117	WITHOUT_CLASSIFICATION	3.5706078831955625E-7	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999922134228698	WITHOUT_CLASSIFICATION	7.786577130221702E-6	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999997010353967	WITHOUT_CLASSIFICATION	2.9896460333024337E-7	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999954596748887	WITHOUT_CLASSIFICATION	4.5403251113228565E-6	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999993922955005	WITHOUT_CLASSIFICATION	6.077044994409342E-7	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999967686047984	WITHOUT_CLASSIFICATION	3.231395201531575E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993462428979	WITHOUT_CLASSIFICATION	6.537571021077492E-7	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999637240614	WITHOUT_CLASSIFICATION	3.6275938564610874E-8	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999921132574	WITHOUT_CLASSIFICATION	7.88674263731073E-9	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999441855323	WITHOUT_CLASSIFICATION	5.5814467753176515E-8	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.999999981503156	WITHOUT_CLASSIFICATION	1.8496843934973678E-8	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999999767161797	WITHOUT_CLASSIFICATION	2.328382040923096E-8	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999889488886976	WITHOUT_CLASSIFICATION	1.105111130234181E-5	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999804318435	WITHOUT_CLASSIFICATION	1.95681564947739E-8	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999999999147157	WITHOUT_CLASSIFICATION	8.528431143969559E-10	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999930213786145	WITHOUT_CLASSIFICATION	6.978621385601533E-6	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999979434495618	WITHOUT_CLASSIFICATION	2.0565504381425717E-6	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999994138435836	WITHOUT_CLASSIFICATION	5.861564163581536E-7	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999994869650053	WITHOUT_CLASSIFICATION	5.130349946291971E-7	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.999998314679318	WITHOUT_CLASSIFICATION	1.6853206820004536E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999991502537853	WITHOUT_CLASSIFICATION	8.497462146422181E-7	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999445269938	WITHOUT_CLASSIFICATION	5.547300622500999E-8	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999996829944974	WITHOUT_CLASSIFICATION	3.1700550264468995E-7	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999927767347698	WITHOUT_CLASSIFICATION	7.223265230134547E-6	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999997542244766	WITHOUT_CLASSIFICATION	2.4577552341079095E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999991306808467	WITHOUT_CLASSIFICATION	8.693191533606614E-7	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999880889789441	WITHOUT_CLASSIFICATION	1.191102105585344E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999999998879	WITHOUT_CLASSIFICATION	1.1210343422338008E-12	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999850223888938	WITHOUT_CLASSIFICATION	1.4977611106399014E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999744302936	WITHOUT_CLASSIFICATION	2.5569706319517602E-8	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999963937001564	WITHOUT_CLASSIFICATION	3.6062998435374175E-6	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999881397896522	WITHOUT_CLASSIFICATION	1.1860210347866182E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999881397896522	WITHOUT_CLASSIFICATION	1.1860210347866182E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999722822584949	WITHOUT_CLASSIFICATION	2.7717741505017716E-5	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999994093956419	WITHOUT_CLASSIFICATION	5.906043580861442E-7	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999997500008889	WITHOUT_CLASSIFICATION	2.499991110607582E-7	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999987470818004	WITHOUT_CLASSIFICATION	1.2529181996540733E-6	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999997705469963	WITHOUT_CLASSIFICATION	2.2945300362642377E-7	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9994657518260349	WITHOUT_CLASSIFICATION	5.342481739651121E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999868880949173	WITHOUT_CLASSIFICATION	1.3111905082616879E-5	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999998973460441	WITHOUT_CLASSIFICATION	1.0265395588973543E-7	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999971059788899	WITHOUT_CLASSIFICATION	2.8940211101285075E-6	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999984705771107	WITHOUT_CLASSIFICATION	1.5294228894329603E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999979185087633	WITHOUT_CLASSIFICATION	2.0814912366169134E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999954393975602	WITHOUT_CLASSIFICATION	4.56060243984886E-6	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9992616944184632	WITHOUT_CLASSIFICATION	7.383055815368138E-4	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999894624093132	WITHOUT_CLASSIFICATION	1.0537590686769407E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990221644821	WITHOUT_CLASSIFICATION	9.778355178968944E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997802959191	WITHOUT_CLASSIFICATION	2.19704080898345E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999925743528091	WITHOUT_CLASSIFICATION	7.425647190922992E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999996752437396	WITHOUT_CLASSIFICATION	3.2475626040124475E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999871902207769	WITHOUT_CLASSIFICATION	1.2809779223194701E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999806002457342	WITHOUT_CLASSIFICATION	1.9399754265833722E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999976912518114	WITHOUT_CLASSIFICATION	2.308748188689403E-6	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999976912518114	WITHOUT_CLASSIFICATION	2.308748188689403E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999949457827332	WITHOUT_CLASSIFICATION	5.05421726675857E-6	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999949457827332	WITHOUT_CLASSIFICATION	5.05421726675857E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999744302936	WITHOUT_CLASSIFICATION	2.5569706319517602E-8	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999647563646279	WITHOUT_CLASSIFICATION	3.524363537205009E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999966310635822	WITHOUT_CLASSIFICATION	3.368936417892242E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996303187659	WITHOUT_CLASSIFICATION	3.6968123405751866E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526311054	WITHOUT_CLASSIFICATION	2.14736889446665E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999966310635822	WITHOUT_CLASSIFICATION	3.368936417892242E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996303187659	WITHOUT_CLASSIFICATION	3.6968123405751866E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987213881523	WITHOUT_CLASSIFICATION	1.2786118478361647E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999075344577	WITHOUT_CLASSIFICATION	9.246554231847196E-8	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999945963746828	WITHOUT_CLASSIFICATION	5.403625317217453E-6	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999999435723552	WITHOUT_CLASSIFICATION	5.642764477363135E-8	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996766195499629	WITHOUT_CLASSIFICATION	3.233804500370622E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999969860687483	WITHOUT_CLASSIFICATION	3.013931251752056E-6	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999996481680261	WITHOUT_CLASSIFICATION	3.5183197387638174E-7	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999991807868364	WITHOUT_CLASSIFICATION	8.192131635893956E-7	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9995958117688314	WITHOUT_CLASSIFICATION	4.0418823116867046E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999995964814	WITHOUT_CLASSIFICATION	4.0351853940417377E-10	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999991186436827	WITHOUT_CLASSIFICATION	8.813563171555916E-7	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999997248484008	WITHOUT_CLASSIFICATION	2.7515159914218973E-7	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999909776399	WITHOUT_CLASSIFICATION	9.022360158697913E-9	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999920712580485	WITHOUT_CLASSIFICATION	7.928741951545615E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526311054	WITHOUT_CLASSIFICATION	2.14736889446665E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999795245267881	WITHOUT_CLASSIFICATION	2.0475473211943873E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999857456939863	WITHOUT_CLASSIFICATION	1.4254306013693246E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999857456939863	WITHOUT_CLASSIFICATION	1.4254306013693246E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999951271158608	WITHOUT_CLASSIFICATION	4.872884139258749E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987213881523	WITHOUT_CLASSIFICATION	1.2786118478361647E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999308330563871	WITHOUT_CLASSIFICATION	6.916694361290142E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999087551370823	WITHOUT_CLASSIFICATION	9.124486291772406E-5	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999422001874881	WITHOUT_CLASSIFICATION	5.779981251199259E-5	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999978599815592	WITHOUT_CLASSIFICATION	2.140018440716426E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998197898862817	WITHOUT_CLASSIFICATION	1.80210113718318E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987213881523	WITHOUT_CLASSIFICATION	1.2786118478361647E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999978599815592	WITHOUT_CLASSIFICATION	2.140018440716426E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998197898862817	WITHOUT_CLASSIFICATION	1.80210113718318E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999992254070551	WITHOUT_CLASSIFICATION	7.745929448484445E-7	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999998398532324	WITHOUT_CLASSIFICATION	1.601467676784423E-7	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998627861408937	WITHOUT_CLASSIFICATION	1.372138591062092E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987213881523	WITHOUT_CLASSIFICATION	1.2786118478361647E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987213881523	WITHOUT_CLASSIFICATION	1.2786118478361647E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999992640683226	WITHOUT_CLASSIFICATION	7.359316773424854E-7	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999995055815768	WITHOUT_CLASSIFICATION	4.944184232303123E-7	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999983343609046	WITHOUT_CLASSIFICATION	1.665639095354735E-6	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999992801552189	WITHOUT_CLASSIFICATION	7.198447810482562E-7	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999989200969377	WITHOUT_CLASSIFICATION	1.07990306228162E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999890860163	WITHOUT_CLASSIFICATION	1.0913983787203298E-8	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999286003264	WITHOUT_CLASSIFICATION	7.139967356017096E-8	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999893144688	WITHOUT_CLASSIFICATION	1.0685531116747545E-8	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.99999963400062	WITHOUT_CLASSIFICATION	3.659993800642239E-7	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999928579537523	WITHOUT_CLASSIFICATION	7.142046247783376E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999867080418022	WITHOUT_CLASSIFICATION	1.3291958197712082E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999989755928389	WITHOUT_CLASSIFICATION	1.0244071611609781E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999999819130004	WITHOUT_CLASSIFICATION	1.808699960876408E-7	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999997576216499	WITHOUT_CLASSIFICATION	2.4237835001656593E-7	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810507724907	WITHOUT_CLASSIFICATION	1.8949227509281685E-5	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999973211229018	WITHOUT_CLASSIFICATION	2.678877098244252E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999998892530371	WITHOUT_CLASSIFICATION	1.1074696289289319E-6	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999530285732083	WITHOUT_CLASSIFICATION	4.6971426791723085E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9994664719187031	WITHOUT_CLASSIFICATION	5.335280812969035E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999707939581	WITHOUT_CLASSIFICATION	2.9206042005077357E-8	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999989958076574	WITHOUT_CLASSIFICATION	1.0041923426311054E-6	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999888488628583	WITHOUT_CLASSIFICATION	1.1151137141671134E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999888488628583	WITHOUT_CLASSIFICATION	1.1151137141671134E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999998892530371	WITHOUT_CLASSIFICATION	1.1074696289289319E-6	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999854405351514	WITHOUT_CLASSIFICATION	1.4559464848514774E-5	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999992954939428	WITHOUT_CLASSIFICATION	7.045060571678931E-7	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999766448790625	WITHOUT_CLASSIFICATION	2.3355120937509653E-5	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999994386448812	WITHOUT_CLASSIFICATION	5.613551189464549E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999991498255924	WITHOUT_CLASSIFICATION	8.501744075999353E-6	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998773638205	WITHOUT_CLASSIFICATION	1.226361794802477E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999820685653715	WITHOUT_CLASSIFICATION	1.7931434628467986E-5	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999999625056605	WITHOUT_CLASSIFICATION	3.7494339576329526E-8	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999999988082	WITHOUT_CLASSIFICATION	1.1918130923919783E-11	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999718431913	WITHOUT_CLASSIFICATION	2.8156808646225828E-8	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999540823357355	WITHOUT_CLASSIFICATION	4.5917664264484205E-5	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9984317105142864	WITHOUT_CLASSIFICATION	0.0015682894857136827	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999764380661327	WITHOUT_CLASSIFICATION	2.3561933867397163E-5	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999999418829	WITHOUT_CLASSIFICATION	5.811709183837299E-10	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996633312109	WITHOUT_CLASSIFICATION	3.36668789098873E-7	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999365867840552	WITHOUT_CLASSIFICATION	6.341321594486881E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999994217726342	WITHOUT_CLASSIFICATION	5.782273658627913E-7	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999943202316943	WITHOUT_CLASSIFICATION	5.679768305689336E-6	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988224534684	WITHOUT_CLASSIFICATION	1.1775465316543282E-6	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999992363204315	WITHOUT_CLASSIFICATION	7.636795684637982E-7	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999997900239321	WITHOUT_CLASSIFICATION	2.0997606788487415E-7	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998819680681	WITHOUT_CLASSIFICATION	1.1803193194175526E-7	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751269809726	WITHOUT_CLASSIFICATION	2.4873019027466825E-5	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976023901874	WITHOUT_CLASSIFICATION	2.3976098126372823E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992563446586	WITHOUT_CLASSIFICATION	7.436553414798633E-7	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985967085612	WITHOUT_CLASSIFICATION	1.4032914388675183E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993843570472	WITHOUT_CLASSIFICATION	6.156429529287545E-7	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993296297237	WITHOUT_CLASSIFICATION	6.703702763106971E-7	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999942346058	WITHOUT_CLASSIFICATION	5.765394199008987E-7	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987457951727	WITHOUT_CLASSIFICATION	1.2542048272965562E-6	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999999644924754	WITHOUT_CLASSIFICATION	3.550752459228426E-8	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999134609134	WITHOUT_CLASSIFICATION	8.65390865891549E-8	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996682720481	WITHOUT_CLASSIFICATION	3.3172795192750505E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999624181047	WITHOUT_CLASSIFICATION	3.758189534953594E-8	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999877371084	WITHOUT_CLASSIFICATION	1.226289159268013E-7	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989272132959	WITHOUT_CLASSIFICATION	1.0727867041215462E-6	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986043165856	WITHOUT_CLASSIFICATION	1.39568341445771E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997779309973	WITHOUT_CLASSIFICATION	2.2206900266735268E-7	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996697300471	WITHOUT_CLASSIFICATION	3.3026995289564506E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988508632847	WITHOUT_CLASSIFICATION	1.1491367153507064E-6	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999972004102275	WITHOUT_CLASSIFICATION	2.7995897725400767E-6	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996431196985	WITHOUT_CLASSIFICATION	3.5688030149058384E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9110326661785387	WITHOUT_CLASSIFICATION	0.08896733382146123	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940722071334	WITHOUT_CLASSIFICATION	5.9277928665127035E-6	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999999979107	WITHOUT_CLASSIFICATION	2.089337730494197E-12	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999996405016623	WITHOUT_CLASSIFICATION	3.5949833763480785E-7	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999997039263686	WITHOUT_CLASSIFICATION	2.960736313717816E-7	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999996409780072	WITHOUT_CLASSIFICATION	3.5902199278735336E-7	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999995641338435	WITHOUT_CLASSIFICATION	4.358661566053481E-7	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999997679684304	WITHOUT_CLASSIFICATION	2.3203156954841476E-7	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999973861583956	WITHOUT_CLASSIFICATION	2.6138416043886153E-6	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999982681889791	WITHOUT_CLASSIFICATION	1.731811020932044E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999988852302234	WITHOUT_CLASSIFICATION	1.1147697766743491E-6	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999988746308489	WITHOUT_CLASSIFICATION	1.1253691510260057E-6	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.999999791956307	WITHOUT_CLASSIFICATION	2.0804369307499294E-7	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9991809140221262	WITHOUT_CLASSIFICATION	8.190859778739138E-4	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999719805296752	WITHOUT_CLASSIFICATION	2.8019470324868953E-5	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999982510959075	WITHOUT_CLASSIFICATION	1.748904092641193E-6	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999692259788852	WITHOUT_CLASSIFICATION	3.077402111484047E-5	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992672559523	WITHOUT_CLASSIFICATION	7.327440475183915E-7	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943910792686	WITHOUT_CLASSIFICATION	5.608920731534012E-6	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995531742872	WITHOUT_CLASSIFICATION	4.4682571276394944E-7	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973189216727	WITHOUT_CLASSIFICATION	2.6810783273616813E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999838374542946	WITHOUT_CLASSIFICATION	1.616254570534956E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999996686778906	WITHOUT_CLASSIFICATION	3.313221094650624E-7	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999988808851331	WITHOUT_CLASSIFICATION	1.1191148667900803E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999964667996917	WITHOUT_CLASSIFICATION	3.533200308371425E-6	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999266932631	WITHOUT_CLASSIFICATION	7.330673691583846E-8	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999998535556051	WITHOUT_CLASSIFICATION	1.464443950513074E-7	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999966924660529	WITHOUT_CLASSIFICATION	3.3075339470551246E-6	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999998454509909	WITHOUT_CLASSIFICATION	1.5454900909977668E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999991811024	WITHOUT_CLASSIFICATION	8.188976707085664E-10	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999962746530454	WITHOUT_CLASSIFICATION	3.72534695453507E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999995950566257	WITHOUT_CLASSIFICATION	4.0494337430750365E-7	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999985551403399	WITHOUT_CLASSIFICATION	1.4448596601115624E-6	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999954441675559	WITHOUT_CLASSIFICATION	4.555832444056827E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999996405016623	WITHOUT_CLASSIFICATION	3.5949833763480785E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999849417335338	WITHOUT_CLASSIFICATION	1.5058266466188127E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999756483501	WITHOUT_CLASSIFICATION	2.435164986527556E-8	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999980944861792	WITHOUT_CLASSIFICATION	1.905513820887248E-6	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999447874487251	WITHOUT_CLASSIFICATION	5.521255127489777E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999909662154738	WITHOUT_CLASSIFICATION	9.033784526227241E-6	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999999100363302	WITHOUT_CLASSIFICATION	8.996366977683369E-8	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999311397506394	WITHOUT_CLASSIFICATION	6.886024936068094E-5	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9996639733307797	WITHOUT_CLASSIFICATION	3.3602666922027876E-4	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999964205981866	WITHOUT_CLASSIFICATION	3.5794018134301975E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999890877905145	WITHOUT_CLASSIFICATION	1.0912209485404726E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999873788897637	WITHOUT_CLASSIFICATION	1.2621110236214029E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999947719008351	WITHOUT_CLASSIFICATION	5.228099164966339E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999690994936	WITHOUT_CLASSIFICATION	3.0900506354848255E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999996569127201	WITHOUT_CLASSIFICATION	3.4308728000759483E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999984565209794	WITHOUT_CLASSIFICATION	1.5434790205692047E-6	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999961360569755	WITHOUT_CLASSIFICATION	3.863943024566034E-6	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999984861653619	WITHOUT_CLASSIFICATION	1.5138346381173478E-6	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999800083110206	WITHOUT_CLASSIFICATION	1.9991688979291132E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999763617545	WITHOUT_CLASSIFICATION	2.363824554457007E-8	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999998639557958	WITHOUT_CLASSIFICATION	1.3604420418271392E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999855322269	WITHOUT_CLASSIFICATION	1.4467773046285832E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999994418123933	WITHOUT_CLASSIFICATION	5.581876066065015E-7	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999992869807127	WITHOUT_CLASSIFICATION	7.130192872962522E-6	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999998216897048	WITHOUT_CLASSIFICATION	1.783102951964928E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999954352691149	WITHOUT_CLASSIFICATION	4.564730885067091E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999900845028	WITHOUT_CLASSIFICATION	9.91549720349733E-9	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934718488226272	WITHOUT_CLASSIFICATION	0.00652815117737287	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999994501949557	WITHOUT_CLASSIFICATION	5.498050443425334E-7	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999376558231	WITHOUT_CLASSIFICATION	6.234417692709276E-8	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999969431587891	WITHOUT_CLASSIFICATION	3.056841210932638E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999996405016623	WITHOUT_CLASSIFICATION	3.5949833763480785E-7	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9990726780459058	WITHOUT_CLASSIFICATION	9.273219540941361E-4	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999320533315	WITHOUT_CLASSIFICATION	6.794666853871181E-8	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997834207781733	WITHOUT_CLASSIFICATION	2.1657922182669606E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999996405016623	WITHOUT_CLASSIFICATION	3.5949833763480785E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993703787587	WITHOUT_CLASSIFICATION	6.296212412676395E-7	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999855322269	WITHOUT_CLASSIFICATION	1.4467773046285832E-8	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9995490860875822	WITHOUT_CLASSIFICATION	4.5091391241774845E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999298080706428	WITHOUT_CLASSIFICATION	7.019192935726101E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999728317184	WITHOUT_CLASSIFICATION	2.7168281571314213E-8	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999890877905145	WITHOUT_CLASSIFICATION	1.0912209485404726E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999873788897637	WITHOUT_CLASSIFICATION	1.2621110236214029E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999947719008351	WITHOUT_CLASSIFICATION	5.228099164966339E-6	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999936305826	WITHOUT_CLASSIFICATION	6.369417528284802E-9	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999991667477336	WITHOUT_CLASSIFICATION	8.332522663277109E-7	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999999087293268	WITHOUT_CLASSIFICATION	9.12706732538725E-8	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999977601265576	WITHOUT_CLASSIFICATION	2.239873442401353E-6	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999997556612518	WITHOUT_CLASSIFICATION	2.443387481458351E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999996405016623	WITHOUT_CLASSIFICATION	3.5949833763480785E-7	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999690994936	WITHOUT_CLASSIFICATION	3.0900506354848255E-8	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999996569127201	WITHOUT_CLASSIFICATION	3.4308728000759483E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999886667622	WITHOUT_CLASSIFICATION	1.1333237715955086E-8	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984845986088	WITHOUT_CLASSIFICATION	1.5154013910959508E-6	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999205781978	WITHOUT_CLASSIFICATION	7.94218022315171E-8	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999604766653	WITHOUT_CLASSIFICATION	3.952333474104352E-8	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999998006224384	WITHOUT_CLASSIFICATION	1.9937756162221605E-7	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.99999949162652	WITHOUT_CLASSIFICATION	5.083734799956254E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988508632847	WITHOUT_CLASSIFICATION	1.1491367153507064E-6	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999914730366065	WITHOUT_CLASSIFICATION	8.526963393476594E-6	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999999940288636	WITHOUT_CLASSIFICATION	5.97113640110674E-8	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999998510238797	WITHOUT_CLASSIFICATION	1.4897612032477976E-7	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999862043542	WITHOUT_CLASSIFICATION	1.3795645765587481E-8	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999999978438612	WITHOUT_CLASSIFICATION	2.156138802509745E-8	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993843570472	WITHOUT_CLASSIFICATION	6.156429529287545E-7	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993296297237	WITHOUT_CLASSIFICATION	6.703702763106971E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999624181047	WITHOUT_CLASSIFICATION	3.758189534953594E-8	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999999978438612	WITHOUT_CLASSIFICATION	2.156138802509745E-8	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999846685294	WITHOUT_CLASSIFICATION	1.533147059540578E-8	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999997002887847	WITHOUT_CLASSIFICATION	2.997112153002391E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912024408466	WITHOUT_CLASSIFICATION	8.79755915348288E-6	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958517058064	WITHOUT_CLASSIFICATION	4.148294193557307E-6	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9998773128129994	WITHOUT_CLASSIFICATION	1.2268718700061864E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999346968034717	WITHOUT_CLASSIFICATION	6.53031965282298E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999877371084	WITHOUT_CLASSIFICATION	1.226289159268013E-7	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997779309973	WITHOUT_CLASSIFICATION	2.2206900266735268E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999991811024	WITHOUT_CLASSIFICATION	8.188976707085664E-10	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999996311530729	WITHOUT_CLASSIFICATION	3.688469271117153E-7	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999982829441285	WITHOUT_CLASSIFICATION	1.717055871546448E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999848912232	WITHOUT_CLASSIFICATION	1.5108776807160408E-8	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999244751142	WITHOUT_CLASSIFICATION	7.552488586496977E-8	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999721988685	WITHOUT_CLASSIFICATION	2.780113151671798E-8	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.99999998520386	WITHOUT_CLASSIFICATION	1.4796139979131726E-8	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999935936738058	WITHOUT_CLASSIFICATION	6.406326194232386E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867802279463	WITHOUT_CLASSIFICATION	1.3219772053745321E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999999988082	WITHOUT_CLASSIFICATION	1.1918130923919783E-11	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.99999271226309	WITHOUT_CLASSIFICATION	7.287736909998829E-6	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999948211795	WITHOUT_CLASSIFICATION	5.178820488309081E-9	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999978808056968	WITHOUT_CLASSIFICATION	2.1191943032058495E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999998440913564	WITHOUT_CLASSIFICATION	1.559086436148174E-7	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999690525148	WITHOUT_CLASSIFICATION	3.0947485304270505E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999988104954012	WITHOUT_CLASSIFICATION	1.1895045988343414E-6	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995096447162	WITHOUT_CLASSIFICATION	4.903552837536113E-7	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876859659581	WITHOUT_CLASSIFICATION	1.2314034041805163E-5	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998639093679	WITHOUT_CLASSIFICATION	1.36090632018495E-7	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999976778025488	WITHOUT_CLASSIFICATION	2.322197451336952E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9995887600924047	WITHOUT_CLASSIFICATION	4.112399075952816E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985730110863	WITHOUT_CLASSIFICATION	1.4269889136922828E-6	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996281684261	WITHOUT_CLASSIFICATION	3.71831573843937E-7	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993644776851	WITHOUT_CLASSIFICATION	6.355223148453507E-7	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994229719695	WITHOUT_CLASSIFICATION	5.770280304854046E-7	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999995351585338	WITHOUT_CLASSIFICATION	4.648414662089544E-7	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999999938778231	WITHOUT_CLASSIFICATION	6.122176875457218E-9	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990320271416	WITHOUT_CLASSIFICATION	9.679728584378264E-7	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999638101103334	WITHOUT_CLASSIFICATION	3.618988966660924E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999871540521	WITHOUT_CLASSIFICATION	1.2845947883398984E-8	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992211410461	WITHOUT_CLASSIFICATION	7.788589538079874E-7	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999999137525222	WITHOUT_CLASSIFICATION	8.624747789915451E-8	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999993560077852	WITHOUT_CLASSIFICATION	6.439922149007188E-7	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999990406576613	WITHOUT_CLASSIFICATION	9.593423385794615E-7	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999967699844947	WITHOUT_CLASSIFICATION	3.2300155053494534E-6	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999937271955743	WITHOUT_CLASSIFICATION	6.272804425566718E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999970891757892	WITHOUT_CLASSIFICATION	2.9108242108645255E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999995593175716	WITHOUT_CLASSIFICATION	4.406824283646164E-7	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999986424566599	WITHOUT_CLASSIFICATION	1.3575433401296716E-6	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999999233037652	WITHOUT_CLASSIFICATION	7.66962346967473E-8	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999571919672	WITHOUT_CLASSIFICATION	4.280803270094815E-8	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998124954188657	WITHOUT_CLASSIFICATION	1.8750458113417145E-4	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999995603508277	WITHOUT_CLASSIFICATION	4.3964917232873265E-7	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999683389639	WITHOUT_CLASSIFICATION	3.1661036169097806E-8	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999937259296	WITHOUT_CLASSIFICATION	6.274070400080654E-9	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999990151551658	WITHOUT_CLASSIFICATION	9.848448342440339E-7	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999936989601	WITHOUT_CLASSIFICATION	6.301039953226208E-9	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999762283827	WITHOUT_CLASSIFICATION	2.377161738413302E-8	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999992203290211	WITHOUT_CLASSIFICATION	7.796709788966753E-7	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999979265013	WITHOUT_CLASSIFICATION	2.0734987228170608E-9	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.999999996683965	WITHOUT_CLASSIFICATION	3.3160348929653902E-9	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999995763772469	WITHOUT_CLASSIFICATION	4.236227531361904E-7	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999331265547136	WITHOUT_CLASSIFICATION	6.687344528640773E-4	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999375136924	WITHOUT_CLASSIFICATION	6.248630760222915E-8	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999988169301382	WITHOUT_CLASSIFICATION	1.1830698618112515E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999786768712	WITHOUT_CLASSIFICATION	2.1323128896626484E-8	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999062510523	WITHOUT_CLASSIFICATION	9.374894771952666E-8	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998176131617	WITHOUT_CLASSIFICATION	1.8238683822849783E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999968673359954	WITHOUT_CLASSIFICATION	3.132664004571448E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999987756258044	WITHOUT_CLASSIFICATION	1.2243741956068447E-6	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999994695777638	WITHOUT_CLASSIFICATION	5.304222362471892E-7	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999994607312122	WITHOUT_CLASSIFICATION	5.392687878066032E-7	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999995810509491	WITHOUT_CLASSIFICATION	4.189490508434447E-7	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999963509257148	WITHOUT_CLASSIFICATION	3.649074285256909E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999804256461721	WITHOUT_CLASSIFICATION	1.9574353828025567E-5	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999207534365591	WITHOUT_CLASSIFICATION	7.924656344088797E-5	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999999373883673	WITHOUT_CLASSIFICATION	6.261163271120393E-7	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999935013493132	WITHOUT_CLASSIFICATION	6.498650686769819E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999983998511115	WITHOUT_CLASSIFICATION	1.6001488885730917E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999992999608707	WITHOUT_CLASSIFICATION	7.000391292616726E-7	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999623150352158	WITHOUT_CLASSIFICATION	3.7684964784180586E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999993243979133	WITHOUT_CLASSIFICATION	6.756020866968526E-7	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.999799249616513	WITHOUT_CLASSIFICATION	2.0075038348695438E-4	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9986213188892383	WITHOUT_CLASSIFICATION	0.001378681110761706	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999974735946072	WITHOUT_CLASSIFICATION	2.5264053927486977E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9947483646953652	WITHOUT_CLASSIFICATION	0.005251635304634827	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999992871257	WITHOUT_CLASSIFICATION	7.128742724368895E-10	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9995647601351848	WITHOUT_CLASSIFICATION	4.352398648151862E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999880992072636	WITHOUT_CLASSIFICATION	1.1900792736422895E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999932629298921	WITHOUT_CLASSIFICATION	6.737070107872527E-6	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999968330252524	WITHOUT_CLASSIFICATION	3.1669747475104533E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999386068013	WITHOUT_CLASSIFICATION	6.139319879409017E-8	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999862990524396	WITHOUT_CLASSIFICATION	1.370094756034546E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999924575651506	WITHOUT_CLASSIFICATION	7.542434849317928E-6	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999955718440111	WITHOUT_CLASSIFICATION	4.4281559888354026E-6	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999974091974979	WITHOUT_CLASSIFICATION	2.590802502026071E-6	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999968801502701	WITHOUT_CLASSIFICATION	3.1198497298349065E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999919245829	WITHOUT_CLASSIFICATION	8.075417149362483E-9	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999996217508	WITHOUT_CLASSIFICATION	3.7824921575677987E-10	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999995642358271	WITHOUT_CLASSIFICATION	4.357641729213801E-7	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999679875783468	WITHOUT_CLASSIFICATION	3.201242165318431E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998836352662	WITHOUT_CLASSIFICATION	1.1636473386759263E-7	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999996895832429	WITHOUT_CLASSIFICATION	3.10416757060723E-7	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999999547739686	WITHOUT_CLASSIFICATION	4.5226031398833617E-7	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.99998356290101	WITHOUT_CLASSIFICATION	1.6437098990097303E-5	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997845311635317	WITHOUT_CLASSIFICATION	2.1546883646830894E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999995910126998	WITHOUT_CLASSIFICATION	4.08987300179806E-7	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999899781520243	WITHOUT_CLASSIFICATION	1.0021847975719935E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999995783513096	WITHOUT_CLASSIFICATION	4.216486903164496E-7	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999719785129	WITHOUT_CLASSIFICATION	2.8021487128468117E-8	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994458177253344	WITHOUT_CLASSIFICATION	5.541822746656557E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999623485994448	WITHOUT_CLASSIFICATION	3.7651400555311544E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999997582912948	WITHOUT_CLASSIFICATION	2.4170870519669526E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994458177253344	WITHOUT_CLASSIFICATION	5.541822746656557E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999897992966	WITHOUT_CLASSIFICATION	1.0200703382800107E-8	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999992647401587	WITHOUT_CLASSIFICATION	7.352598412567438E-7	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999999234073076	WITHOUT_CLASSIFICATION	7.65926923979796E-8	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999799204522304	WITHOUT_CLASSIFICATION	2.0079547769647463E-5	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999997302038373	WITHOUT_CLASSIFICATION	2.6979616280827875E-7	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.999999998760971	WITHOUT_CLASSIFICATION	1.2390290306084954E-9	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999961153603352	WITHOUT_CLASSIFICATION	3.884639664851272E-6	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999908854015	WITHOUT_CLASSIFICATION	9.114598484457455E-9	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999983755868691	WITHOUT_CLASSIFICATION	1.6244131308669059E-6	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999996351350596	WITHOUT_CLASSIFICATION	3.6486494027334243E-7	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999983589398602	WITHOUT_CLASSIFICATION	1.6410601397635593E-6	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999991324762996	WITHOUT_CLASSIFICATION	8.675237003846794E-7	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.999999955733021	WITHOUT_CLASSIFICATION	4.42669789119544E-8	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999992245123	WITHOUT_CLASSIFICATION	7.754876701575429E-10	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999995596827697	WITHOUT_CLASSIFICATION	4.403172303805703E-7	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999990444064762	WITHOUT_CLASSIFICATION	9.555935237142545E-7	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999890954351851	WITHOUT_CLASSIFICATION	1.0904564814790886E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999890954351851	WITHOUT_CLASSIFICATION	1.0904564814790886E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999989916115021	WITHOUT_CLASSIFICATION	1.0083884979186528E-6	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9999492380966342	WITHOUT_CLASSIFICATION	5.0761903365809E-5	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999929909334822	WITHOUT_CLASSIFICATION	7.009066517809373E-5	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999934692888953	WITHOUT_CLASSIFICATION	6.530711104716616E-6	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999996368579724	WITHOUT_CLASSIFICATION	3.631420275592325E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8607871674059197	WITHOUT_CLASSIFICATION	0.13921283259408035	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998837820837204	WITHOUT_CLASSIFICATION	1.1621791627964713E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999821642445	WITHOUT_CLASSIFICATION	1.7835755611112523E-8	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999993659774046	WITHOUT_CLASSIFICATION	6.340225954854724E-7	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999920678898971	WITHOUT_CLASSIFICATION	7.932110102905162E-5	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999873492312049	WITHOUT_CLASSIFICATION	1.2650768795105675E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999997466027	WITHOUT_CLASSIFICATION	2.5339725391729223E-10	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999695536058	WITHOUT_CLASSIFICATION	3.044639411448089E-8	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999992244421222	WITHOUT_CLASSIFICATION	7.755578777702077E-7	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999999977555265	WITHOUT_CLASSIFICATION	2.2444734946881123E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999988104954012	WITHOUT_CLASSIFICATION	1.1895045988343414E-6	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999995442041032	WITHOUT_CLASSIFICATION	4.557958968236919E-7	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999997145066521	WITHOUT_CLASSIFICATION	2.854933478613945E-7	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9995543255893176	WITHOUT_CLASSIFICATION	4.456744106825187E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999990651916286	WITHOUT_CLASSIFICATION	9.348083712827274E-7	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999967746238841	WITHOUT_CLASSIFICATION	3.2253761158571117E-6	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999953344855577	WITHOUT_CLASSIFICATION	4.66551444234451E-6	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999963324843	WITHOUT_CLASSIFICATION	3.667515716957984E-9	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999665705294	WITHOUT_CLASSIFICATION	3.342947065303432E-8	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999831773544	WITHOUT_CLASSIFICATION	1.6822645583142685E-8	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999999953262915	WITHOUT_CLASSIFICATION	4.673708494195113E-8	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999998698292	WITHOUT_CLASSIFICATION	1.301707926298128E-10	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999961592487646	WITHOUT_CLASSIFICATION	3.8407512353574055E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999989110106196	WITHOUT_CLASSIFICATION	1.0889893805192347E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999949305745256	WITHOUT_CLASSIFICATION	5.069425474341487E-6	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999988741458113	WITHOUT_CLASSIFICATION	1.1258541886723497E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999991184907663	WITHOUT_CLASSIFICATION	8.81509233632188E-7	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9999625994993263	WITHOUT_CLASSIFICATION	3.7400500673629225E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999997296729801	WITHOUT_CLASSIFICATION	2.703270198978679E-6	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999941992685664	WITHOUT_CLASSIFICATION	5.800731433612518E-6	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999961669047143	WITHOUT_CLASSIFICATION	3.833095285731442E-6	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999989510693379	WITHOUT_CLASSIFICATION	1.048930662171536E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999760100142924	WITHOUT_CLASSIFICATION	2.398998570755866E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999998364900862	WITHOUT_CLASSIFICATION	1.6350991389631509E-7	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998278780027351	WITHOUT_CLASSIFICATION	1.7212199726501434E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999954034300119	WITHOUT_CLASSIFICATION	4.596569988059051E-6	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999999231371139	WITHOUT_CLASSIFICATION	7.686288605949994E-8	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9953672874331609	WITHOUT_CLASSIFICATION	0.004632712566839043	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998340823698	WITHOUT_CLASSIFICATION	1.6591763029163657E-7	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999947509856546	WITHOUT_CLASSIFICATION	5.249014345371693E-6	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999998381686671	WITHOUT_CLASSIFICATION	1.6183133278196134E-7	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975208459801	WITHOUT_CLASSIFICATION	2.479154019874074E-6	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941702947488	WITHOUT_CLASSIFICATION	5.82970525117873E-6	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976387834445	WITHOUT_CLASSIFICATION	2.361216555597094E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9998952654670363	WITHOUT_CLASSIFICATION	1.0473453296358673E-4	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999961608625355	WITHOUT_CLASSIFICATION	3.839137464522798E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867802279463	WITHOUT_CLASSIFICATION	1.3219772053745321E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867802279463	WITHOUT_CLASSIFICATION	1.3219772053745321E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998001836282	WITHOUT_CLASSIFICATION	1.998163716707346E-7	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.999999887576088	WITHOUT_CLASSIFICATION	1.1242391199294076E-7	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9989563095638752	WITHOUT_CLASSIFICATION	0.001043690436124777	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998832457748204	WITHOUT_CLASSIFICATION	1.1675422517968564E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9989563095638752	WITHOUT_CLASSIFICATION	0.001043690436124777	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999971727165989	WITHOUT_CLASSIFICATION	2.8272834010484734E-6	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999999299802718	WITHOUT_CLASSIFICATION	7.001972820936018E-7	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999999039849045	WITHOUT_CLASSIFICATION	9.601509553480357E-8	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999993057587947	WITHOUT_CLASSIFICATION	6.942412052178696E-7	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999986139732268	WITHOUT_CLASSIFICATION	1.386026773282267E-6	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999976473425249	WITHOUT_CLASSIFICATION	2.3526574750406677E-6	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999999866635868	WITHOUT_CLASSIFICATION	1.3336413200596613E-7	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999828691936448	WITHOUT_CLASSIFICATION	1.7130806355254886E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999503967296	WITHOUT_CLASSIFICATION	4.960327032030358E-8	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999997112170662	WITHOUT_CLASSIFICATION	2.8878293375728914E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999994581106733	WITHOUT_CLASSIFICATION	5.418893266819904E-7	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999999960703322	WITHOUT_CLASSIFICATION	3.929667796490239E-8	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999989722423446	WITHOUT_CLASSIFICATION	1.0277576554450071E-6	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9992852397895439	WITHOUT_CLASSIFICATION	7.14760210456083E-4	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999833136205	WITHOUT_CLASSIFICATION	1.6686379557641553E-8	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999523495021	WITHOUT_CLASSIFICATION	4.765049788035265E-8	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999963907106648	WITHOUT_CLASSIFICATION	3.609289335178345E-6	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999963907106648	WITHOUT_CLASSIFICATION	3.609289335178345E-6	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999961379052545	WITHOUT_CLASSIFICATION	3.862094745450703E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999300915915	WITHOUT_CLASSIFICATION	6.99084085498521E-8	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999986583932434	WITHOUT_CLASSIFICATION	1.3416067565352451E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999920658537	WITHOUT_CLASSIFICATION	7.934146321788742E-9	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999998505093207	WITHOUT_CLASSIFICATION	1.4949067922583608E-7	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999997138015664	WITHOUT_CLASSIFICATION	2.861984336347104E-7	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999641666924067	WITHOUT_CLASSIFICATION	3.58333075932578E-5	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999991178137004	WITHOUT_CLASSIFICATION	8.821862996506804E-7	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999161261185	WITHOUT_CLASSIFICATION	8.387388152388104E-8	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999997673985768	WITHOUT_CLASSIFICATION	2.3260142324983478E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997054565941	WITHOUT_CLASSIFICATION	2.945434058583186E-7	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999996743979	WITHOUT_CLASSIFICATION	3.2560205122831107E-10	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999781887273	WITHOUT_CLASSIFICATION	2.1811272675655E-8	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999996382612634	WITHOUT_CLASSIFICATION	3.6173873659048067E-7	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999997789554889	WITHOUT_CLASSIFICATION	2.2104451107819629E-7	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999357296977	WITHOUT_CLASSIFICATION	6.42703023033646E-8	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999102120933	WITHOUT_CLASSIFICATION	8.978790671349848E-8	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999998251338102	WITHOUT_CLASSIFICATION	1.7486618974613292E-7	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999979450389974	WITHOUT_CLASSIFICATION	2.054961002646758E-6	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999972049454	WITHOUT_CLASSIFICATION	2.795054685551179E-9	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999989022688381	WITHOUT_CLASSIFICATION	1.0977311618726775E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999813304657	WITHOUT_CLASSIFICATION	1.866953425431666E-8	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999292068761	WITHOUT_CLASSIFICATION	7.079312390834316E-8	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999988631875	WITHOUT_CLASSIFICATION	1.1368125292555857E-9	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999991647437839	WITHOUT_CLASSIFICATION	8.352562161046011E-7	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999987401470578	WITHOUT_CLASSIFICATION	1.259852942252755E-6	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999920156997384	WITHOUT_CLASSIFICATION	7.984300261660169E-6	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998780478948096	WITHOUT_CLASSIFICATION	1.2195210519035621E-4	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999977676547015	WITHOUT_CLASSIFICATION	2.232345298484463E-6	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999643791445504	WITHOUT_CLASSIFICATION	3.5620855449554456E-5	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999996374499249	WITHOUT_CLASSIFICATION	3.625500751103638E-7	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999996577132699	WITHOUT_CLASSIFICATION	3.422867301147611E-7	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999571411094955	WITHOUT_CLASSIFICATION	4.285889050451436E-4	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999998120433471	WITHOUT_CLASSIFICATION	1.879566529911285E-7	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999984546694162	WITHOUT_CLASSIFICATION	1.5453305837940195E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999848930943	WITHOUT_CLASSIFICATION	1.5106905716108534E-8	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999995772619341	WITHOUT_CLASSIFICATION	4.227380658334149E-7	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999988091111286	WITHOUT_CLASSIFICATION	1.1908888713693393E-6	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999873255735704	WITHOUT_CLASSIFICATION	1.2674426429669309E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999997060197866	WITHOUT_CLASSIFICATION	2.9398021339850856E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999855146507419	WITHOUT_CLASSIFICATION	1.4485349258115133E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984147518948	WITHOUT_CLASSIFICATION	1.585248105260156E-6	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999987375677244	WITHOUT_CLASSIFICATION	1.2624322756730404E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998658802111371	WITHOUT_CLASSIFICATION	1.3411978886291673E-4	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998436176617	WITHOUT_CLASSIFICATION	1.56382338236868E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999657687110611	WITHOUT_CLASSIFICATION	3.423128893889354E-5	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9753380834609728	WITHOUT_CLASSIFICATION	0.024661916539027204	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999972952434	WITHOUT_CLASSIFICATION	2.704756655652312E-9	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998307093481	WITHOUT_CLASSIFICATION	1.6929065201868627E-7	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999989570525949	WITHOUT_CLASSIFICATION	1.042947405096982E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988560701083	WITHOUT_CLASSIFICATION	1.1439298917322078E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999941904153	WITHOUT_CLASSIFICATION	5.809584676505292E-9	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9990397861435295	WITHOUT_CLASSIFICATION	9.602138564703321E-4	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999999162540886	WITHOUT_CLASSIFICATION	8.374591147524079E-8	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999986118334674	WITHOUT_CLASSIFICATION	1.3881665326264796E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993703787587	WITHOUT_CLASSIFICATION	6.296212412676395E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993703787587	WITHOUT_CLASSIFICATION	6.296212412676395E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999991689282138	WITHOUT_CLASSIFICATION	8.31071786115823E-7	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999233214371239	WITHOUT_CLASSIFICATION	7.667856287602582E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999978179526132	WITHOUT_CLASSIFICATION	2.1820473868866273E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999837073869663	WITHOUT_CLASSIFICATION	1.6292613033663694E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999995133074363	WITHOUT_CLASSIFICATION	4.866925636887607E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999987448830825	WITHOUT_CLASSIFICATION	1.2551169175290529E-6	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999997075805219	WITHOUT_CLASSIFICATION	2.924194780847288E-7	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999998558035372	WITHOUT_CLASSIFICATION	1.4419646282907234E-7	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999985381772074	WITHOUT_CLASSIFICATION	1.4618227925963817E-6	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999826491869	WITHOUT_CLASSIFICATION	1.7350813066602996E-8	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999893515307687	WITHOUT_CLASSIFICATION	1.0648469231215056E-5	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.999972130656083	WITHOUT_CLASSIFICATION	2.7869343916874678E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999998968854945	WITHOUT_CLASSIFICATION	1.0311450550367007E-6	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999999983406814	WITHOUT_CLASSIFICATION	1.65931859783167E-8	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999996854432499	WITHOUT_CLASSIFICATION	3.145567500139889E-7	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999885122455674	WITHOUT_CLASSIFICATION	1.1487754432598399E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999995487832182	WITHOUT_CLASSIFICATION	4.512167817591779E-7	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999985341265504	WITHOUT_CLASSIFICATION	1.4658734496698317E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999145624465777	WITHOUT_CLASSIFICATION	8.543755342226852E-5	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999781083179667	WITHOUT_CLASSIFICATION	2.1891682033349808E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999974585719	WITHOUT_CLASSIFICATION	2.5414279425279433E-9	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999942833436564	WITHOUT_CLASSIFICATION	5.71665634367475E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999677059363018	WITHOUT_CLASSIFICATION	3.2294063698303366E-5	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9996514480284581	WITHOUT_CLASSIFICATION	3.4855197154191116E-4	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9983848092600053	WITHOUT_CLASSIFICATION	0.001615190739994796	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9783885602343608	WITHOUT_CLASSIFICATION	0.02161143976563913	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999987694783724	WITHOUT_CLASSIFICATION	1.2305216276227445E-6	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994057336776636	WITHOUT_CLASSIFICATION	5.942663223363956E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999993493386905	WITHOUT_CLASSIFICATION	6.506613095036344E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999677059363018	WITHOUT_CLASSIFICATION	3.2294063698303366E-5	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999906216808778	WITHOUT_CLASSIFICATION	9.378319122175222E-6	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999703667242102	WITHOUT_CLASSIFICATION	2.9633275789754622E-5	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9999872183110375	WITHOUT_CLASSIFICATION	1.2781688962580732E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.999997935794882	WITHOUT_CLASSIFICATION	2.064205117912096E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999959411876	WITHOUT_CLASSIFICATION	4.058812321291754E-9	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999115413362	WITHOUT_CLASSIFICATION	8.845866394021616E-8	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999989587170225	WITHOUT_CLASSIFICATION	1.0412829774626725E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998281105119	WITHOUT_CLASSIFICATION	1.7188948819951658E-7	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999997863345714	WITHOUT_CLASSIFICATION	2.1366542858359304E-7	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.999997935794882	WITHOUT_CLASSIFICATION	2.064205117912096E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999826480703	WITHOUT_CLASSIFICATION	1.73519297387328E-8	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998049796565	WITHOUT_CLASSIFICATION	1.9502034352964526E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999199747972134	WITHOUT_CLASSIFICATION	8.002520278665545E-5	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999894337068923	WITHOUT_CLASSIFICATION	1.0566293107682514E-5	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999590305888	WITHOUT_CLASSIFICATION	4.0969411154992884E-8	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997054565941	WITHOUT_CLASSIFICATION	2.945434058583186E-7	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999804435501	WITHOUT_CLASSIFICATION	1.955644986839411E-8	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999998067645662	WITHOUT_CLASSIFICATION	1.932354337947588E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999151180032	WITHOUT_CLASSIFICATION	8.488199681191622E-8	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998029384937994	WITHOUT_CLASSIFICATION	1.9706150620068714E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999998943923782	WITHOUT_CLASSIFICATION	1.056076218767546E-7	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999982684502757	WITHOUT_CLASSIFICATION	1.731549724263228E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999954472636	WITHOUT_CLASSIFICATION	4.5527363584874685E-9	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999998066795106	WITHOUT_CLASSIFICATION	1.9332048948813004E-7	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998408000506	WITHOUT_CLASSIFICATION	1.5919994950469844E-7	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999990147372693	WITHOUT_CLASSIFICATION	9.852627307927526E-7	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999660102282645	WITHOUT_CLASSIFICATION	3.398977173546237E-5	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999968994863	WITHOUT_CLASSIFICATION	3.1005137754890726E-9	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999139301254	WITHOUT_CLASSIFICATION	8.606987457219892E-8	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999697632271308	WITHOUT_CLASSIFICATION	3.023677286927686E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999989609633	WITHOUT_CLASSIFICATION	1.039036813960105E-9	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999999564507817	WITHOUT_CLASSIFICATION	4.354921830047687E-7	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999997242636569	WITHOUT_CLASSIFICATION	2.757363431439411E-7	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999988570827067	WITHOUT_CLASSIFICATION	1.142917293203676E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999994121587181	WITHOUT_CLASSIFICATION	5.87841281826095E-7	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999888034333012	WITHOUT_CLASSIFICATION	1.1196566698791742E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999923538149785	WITHOUT_CLASSIFICATION	7.646185021483956E-6	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999820951293	WITHOUT_CLASSIFICATION	1.790487069210579E-8	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999985123623132	WITHOUT_CLASSIFICATION	1.4876376867956035E-6	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999997194364502	WITHOUT_CLASSIFICATION	2.805635498505585E-7	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999835043082846	WITHOUT_CLASSIFICATION	1.6495691715336103E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999992086209945	WITHOUT_CLASSIFICATION	7.913790054876683E-7	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999345321401389	WITHOUT_CLASSIFICATION	6.546785986104845E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998914227067	WITHOUT_CLASSIFICATION	1.0857729327366405E-7	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977116343495	WITHOUT_CLASSIFICATION	2.288365650531642E-6	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9996535172709202	WITHOUT_CLASSIFICATION	3.464827290797391E-4	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999980019507809	WITHOUT_CLASSIFICATION	1.9980492190919676E-6	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999986432058489	WITHOUT_CLASSIFICATION	1.3567941512181969E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981698133	WITHOUT_CLASSIFICATION	1.830186772178613E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981698133	WITHOUT_CLASSIFICATION	1.830186772178613E-9	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999983307887	WITHOUT_CLASSIFICATION	1.6692113059013431E-9	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999920771373544	WITHOUT_CLASSIFICATION	7.92286264565298E-6	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999997395921805	WITHOUT_CLASSIFICATION	2.604078196219975E-7	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999995626575292	WITHOUT_CLASSIFICATION	4.3734247081090815E-6	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999989245073866	WITHOUT_CLASSIFICATION	1.0754926134687433E-6	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9981234299454468	WITHOUT_CLASSIFICATION	0.00187657005455313	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999987873458109	WITHOUT_CLASSIFICATION	1.212654189040248E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999873169778121	WITHOUT_CLASSIFICATION	1.2683022187930264E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998772183356	WITHOUT_CLASSIFICATION	1.2278166441049693E-7	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999184978677	WITHOUT_CLASSIFICATION	8.150213222477737E-8	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9946255178628193	WITHOUT_CLASSIFICATION	0.005374482137180797	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999945217612	WITHOUT_CLASSIFICATION	5.4782387498276084E-9	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999971580252551	WITHOUT_CLASSIFICATION	2.841974744826034E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981698133	WITHOUT_CLASSIFICATION	1.830186772178613E-9	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999952328490199	WITHOUT_CLASSIFICATION	4.767150979990888E-6	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999990643910791	WITHOUT_CLASSIFICATION	9.356089209057082E-7	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995286172835349	WITHOUT_CLASSIFICATION	4.713827164650438E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999999924724664	WITHOUT_CLASSIFICATION	7.527533530748694E-9	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999993557708947	WITHOUT_CLASSIFICATION	6.442291053004997E-7	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999946326625322	WITHOUT_CLASSIFICATION	5.367337467845533E-6	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999996802409658	WITHOUT_CLASSIFICATION	3.197590342009461E-6	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999986829198	WITHOUT_CLASSIFICATION	1.3170802262851513E-9	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999993688562884	WITHOUT_CLASSIFICATION	6.311437116274147E-7	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999999895282135	WITHOUT_CLASSIFICATION	1.0471786442273658E-8	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999997980038486	WITHOUT_CLASSIFICATION	2.0199615137947928E-7	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998914227067	WITHOUT_CLASSIFICATION	1.0857729327366405E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981698133	WITHOUT_CLASSIFICATION	1.830186772178613E-9	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999902071541485	WITHOUT_CLASSIFICATION	9.792845851395765E-6	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999882299518	WITHOUT_CLASSIFICATION	1.1770048197237241E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999996524856749	WITHOUT_CLASSIFICATION	3.475143251131093E-7	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999969697500266	WITHOUT_CLASSIFICATION	3.03024997347386E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999999986381685	WITHOUT_CLASSIFICATION	1.3618314977454052E-8	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999777822491638	WITHOUT_CLASSIFICATION	2.2217750836294778E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999493205911	WITHOUT_CLASSIFICATION	5.06794088946491E-7	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999542897704	WITHOUT_CLASSIFICATION	4.57102296276822E-8	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999947836714	WITHOUT_CLASSIFICATION	5.216328674059491E-9	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999935362555491	WITHOUT_CLASSIFICATION	6.463744450832743E-6	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999985719614454	WITHOUT_CLASSIFICATION	1.4280385546161475E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999919590785863	WITHOUT_CLASSIFICATION	8.040921413756718E-6	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999998847631	WITHOUT_CLASSIFICATION	1.152369346088055E-10	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999999595384848	WITHOUT_CLASSIFICATION	4.046151525187603E-8	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999971727165989	WITHOUT_CLASSIFICATION	2.8272834010484734E-6	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999156697057	WITHOUT_CLASSIFICATION	8.433029427497069E-8	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999998354860712	WITHOUT_CLASSIFICATION	1.6451392890386882E-7	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999805154900545	WITHOUT_CLASSIFICATION	1.94845099454235E-5	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999998918623115	WITHOUT_CLASSIFICATION	1.0813768849355504E-7	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999995789390097	WITHOUT_CLASSIFICATION	4.2106099025636953E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999983499243581	WITHOUT_CLASSIFICATION	1.650075641919458E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999983499243581	WITHOUT_CLASSIFICATION	1.650075641919458E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999986973196157	WITHOUT_CLASSIFICATION	1.3026803843564025E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999494427467	WITHOUT_CLASSIFICATION	5.0557253365413374E-8	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999949721705192	WITHOUT_CLASSIFICATION	5.027829480751559E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999963521158017	WITHOUT_CLASSIFICATION	3.647884198300984E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999934200913655	WITHOUT_CLASSIFICATION	6.57990863457219E-6	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.999990820651818	WITHOUT_CLASSIFICATION	9.179348181931339E-6	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999994224335954	WITHOUT_CLASSIFICATION	5.775664046199125E-7	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999943893575374	WITHOUT_CLASSIFICATION	5.610642462594744E-6	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999943893575374	WITHOUT_CLASSIFICATION	5.610642462594744E-6	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999992537098375	WITHOUT_CLASSIFICATION	7.462901625062461E-6	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999997071269179	WITHOUT_CLASSIFICATION	2.92873082136585E-7	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999825413509874	WITHOUT_CLASSIFICATION	1.7458649012534183E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999927011401352	WITHOUT_CLASSIFICATION	7.298859864765489E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999927011401352	WITHOUT_CLASSIFICATION	7.298859864765489E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999927011401352	WITHOUT_CLASSIFICATION	7.298859864765489E-6	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999148918158045	WITHOUT_CLASSIFICATION	8.510818419548891E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999477653461	WITHOUT_CLASSIFICATION	5.2234653937362555E-8	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999563045376	WITHOUT_CLASSIFICATION	4.369546237884196E-8	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9459956123029583	WITHOUT_CLASSIFICATION	0.05400438769704175	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999986547335393	WITHOUT_CLASSIFICATION	1.3452664606941464E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981698133	WITHOUT_CLASSIFICATION	1.830186772178613E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981698133	WITHOUT_CLASSIFICATION	1.830186772178613E-9	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999991139580868	WITHOUT_CLASSIFICATION	8.860419131970986E-7	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999998974272	WITHOUT_CLASSIFICATION	1.0257286827044443E-10	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999214481343992	WITHOUT_CLASSIFICATION	7.855186560073497E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999999995965288	WITHOUT_CLASSIFICATION	4.034712003488565E-9	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9996873468973351	WITHOUT_CLASSIFICATION	3.1265310266491593E-4	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999991980552677	WITHOUT_CLASSIFICATION	8.01944732349173E-7	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9993897865113628	WITHOUT_CLASSIFICATION	6.102134886371698E-4	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999940201384612	WITHOUT_CLASSIFICATION	5.979861538840875E-6	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999975188050739	WITHOUT_CLASSIFICATION	2.4811949260705202E-6	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999995078102972	WITHOUT_CLASSIFICATION	4.921897028218319E-7	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999874157112566	WITHOUT_CLASSIFICATION	1.2584288743408295E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999997967347312	WITHOUT_CLASSIFICATION	2.032652688323887E-7	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999997967347312	WITHOUT_CLASSIFICATION	2.032652688323887E-7	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999998610682904	WITHOUT_CLASSIFICATION	1.389317095663944E-7	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999998610682904	WITHOUT_CLASSIFICATION	1.389317095663944E-7	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999998912358188	WITHOUT_CLASSIFICATION	1.0876418123548267E-7	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999997373367046	WITHOUT_CLASSIFICATION	2.626632954253365E-7	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999997373367046	WITHOUT_CLASSIFICATION	2.626632954253365E-7	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.99999993028869	WITHOUT_CLASSIFICATION	6.97113099390074E-8	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998094629928	WITHOUT_CLASSIFICATION	1.9053700723558957E-7	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997886586338	WITHOUT_CLASSIFICATION	2.1134136622911242E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999983499243581	WITHOUT_CLASSIFICATION	1.650075641919458E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999999768342616	WITHOUT_CLASSIFICATION	2.3165738394997327E-7	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998094629928	WITHOUT_CLASSIFICATION	1.9053700723558957E-7	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999978864500862	WITHOUT_CLASSIFICATION	2.1135499137754462E-6	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999992999818876	WITHOUT_CLASSIFICATION	7.0001811240732515E-6	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999999546038216	WITHOUT_CLASSIFICATION	4.539617836310698E-8	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999999771619809	WITHOUT_CLASSIFICATION	2.2838019153327487E-8	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999967842733	WITHOUT_CLASSIFICATION	3.2157267433498275E-9	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999999459158331	WITHOUT_CLASSIFICATION	5.4084166826426035E-8	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999996109239568	WITHOUT_CLASSIFICATION	3.8907604315149987E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9992382450293867	WITHOUT_CLASSIFICATION	7.617549706132735E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.997395726544289	WITHOUT_CLASSIFICATION	0.002604273455711034	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999840576725866	WITHOUT_CLASSIFICATION	1.5942327413440504E-5	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999996430602645	WITHOUT_CLASSIFICATION	3.5693973546955865E-7	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999222300031692	WITHOUT_CLASSIFICATION	7.776999683088969E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999992078625534	WITHOUT_CLASSIFICATION	7.92137446652548E-7	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999999533092903	WITHOUT_CLASSIFICATION	4.669070969927945E-8	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9809238204770481	WITHOUT_CLASSIFICATION	0.01907617952295191	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999985381488575	WITHOUT_CLASSIFICATION	1.4618511424799271E-6	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999752113224	WITHOUT_CLASSIFICATION	2.478867764946725E-8	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998253597758	WITHOUT_CLASSIFICATION	1.7464022410040482E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998253597758	WITHOUT_CLASSIFICATION	1.7464022410040482E-7	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999998809468121	WITHOUT_CLASSIFICATION	1.1905318779402445E-7	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999998560611907	WITHOUT_CLASSIFICATION	1.4393880921279455E-7	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999999774502941	WITHOUT_CLASSIFICATION	2.254970588687813E-8	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999995943975931	WITHOUT_CLASSIFICATION	4.056024069416901E-7	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999998341323262	WITHOUT_CLASSIFICATION	1.6586767383072824E-7	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999879026509019	WITHOUT_CLASSIFICATION	1.2097349098112195E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999964993759	WITHOUT_CLASSIFICATION	3.5006240791321517E-9	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999999569431421	WITHOUT_CLASSIFICATION	4.3056857904833806E-7	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999938324597563	WITHOUT_CLASSIFICATION	6.1675402438121075E-6	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999798798109	WITHOUT_CLASSIFICATION	2.0120189001977804E-8	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999318466927	WITHOUT_CLASSIFICATION	6.815330735976134E-8	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999919590785863	WITHOUT_CLASSIFICATION	8.040921413756718E-6	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999831249332	WITHOUT_CLASSIFICATION	1.6875066757878357E-8	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999180382876817	WITHOUT_CLASSIFICATION	8.196171231831755E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999970588379867	WITHOUT_CLASSIFICATION	2.9411620131519688E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999976678486098	WITHOUT_CLASSIFICATION	2.3321513901256242E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999780052736	WITHOUT_CLASSIFICATION	2.1994726399855185E-8	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999780052736	WITHOUT_CLASSIFICATION	2.1994726399855185E-8	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999993093023247	WITHOUT_CLASSIFICATION	6.906976753002883E-7	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9997752417110224	WITHOUT_CLASSIFICATION	2.2475828897753806E-4	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9991350622499408	WITHOUT_CLASSIFICATION	8.649377500593132E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9985840405705572	WITHOUT_CLASSIFICATION	0.0014159594294427303	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9997742370239245	WITHOUT_CLASSIFICATION	2.2576297607534778E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999885181154069	WITHOUT_CLASSIFICATION	1.1481884593092978E-5	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999999366354961	WITHOUT_CLASSIFICATION	6.336450392195535E-8	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999930931771827	WITHOUT_CLASSIFICATION	6.906822817287161E-6	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999925122386243	WITHOUT_CLASSIFICATION	7.487761375810954E-6	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999990728457954	WITHOUT_CLASSIFICATION	9.271542046082159E-7	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999993850090704	WITHOUT_CLASSIFICATION	6.149909296941365E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999930931771827	WITHOUT_CLASSIFICATION	6.906822817287161E-6	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999803365111765	WITHOUT_CLASSIFICATION	1.966348882345279E-5	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999998795030766	WITHOUT_CLASSIFICATION	1.2049692334688822E-7	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999990806753619	WITHOUT_CLASSIFICATION	9.193246380467033E-7	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999959888527833	WITHOUT_CLASSIFICATION	4.011147216746989E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999997707032044	WITHOUT_CLASSIFICATION	2.2929679544643328E-7	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999795314971	WITHOUT_CLASSIFICATION	2.0468502808394543E-8	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999999999216034	WITHOUT_CLASSIFICATION	7.839660126543854E-10	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999993604007383	WITHOUT_CLASSIFICATION	6.395992616412329E-7	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999998982152216	WITHOUT_CLASSIFICATION	1.0178477845115206E-7	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998862404968262	WITHOUT_CLASSIFICATION	1.1375950317379003E-4	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999603585854998	WITHOUT_CLASSIFICATION	3.964141450014174E-5	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999952570000945	WITHOUT_CLASSIFICATION	4.742999905480297E-6	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999807709791	WITHOUT_CLASSIFICATION	1.9229020904566938E-8	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999997738331874	WITHOUT_CLASSIFICATION	2.2616681258510127E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999935287610652	WITHOUT_CLASSIFICATION	6.471238934737155E-6	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999948551991	WITHOUT_CLASSIFICATION	5.144800871731952E-9	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999980802274	WITHOUT_CLASSIFICATION	1.9197725357883785E-9	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999860173085087	WITHOUT_CLASSIFICATION	1.3982691491262571E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999702753083608	WITHOUT_CLASSIFICATION	2.972469163925182E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999994697176	WITHOUT_CLASSIFICATION	5.302823265711576E-10	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999987984983852	WITHOUT_CLASSIFICATION	1.2015016147485656E-6	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999996823539195	WITHOUT_CLASSIFICATION	3.1764608066189093E-7	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9986963241727101	WITHOUT_CLASSIFICATION	0.0013036758272898716	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999954414444551	WITHOUT_CLASSIFICATION	4.558555544921435E-6	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999977993066	WITHOUT_CLASSIFICATION	2.2006933771441295E-9	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999972731748333	WITHOUT_CLASSIFICATION	2.7268251667209562E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999997018235204	WITHOUT_CLASSIFICATION	2.981764796365312E-7	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999406929191	WITHOUT_CLASSIFICATION	5.930708088809133E-8	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999764011953	WITHOUT_CLASSIFICATION	2.3598804633966057E-8	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.999999938880008	WITHOUT_CLASSIFICATION	6.111999202282415E-8	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999999994811573	WITHOUT_CLASSIFICATION	5.188426993944531E-9	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999632096260248	WITHOUT_CLASSIFICATION	3.6790373975267785E-5	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998101997332779	WITHOUT_CLASSIFICATION	1.8980026672205688E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999961644033	WITHOUT_CLASSIFICATION	3.835596689839851E-9	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999829240472	WITHOUT_CLASSIFICATION	1.707595266658253E-8	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999996654720222	WITHOUT_CLASSIFICATION	3.345279776709338E-7	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998865065192	WITHOUT_CLASSIFICATION	1.1349348084046324E-7	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999994024662041	WITHOUT_CLASSIFICATION	5.975337958709523E-7	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999948465197	WITHOUT_CLASSIFICATION	5.153480320230001E-9	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999872201435419	WITHOUT_CLASSIFICATION	1.2779856458063074E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999701301934	WITHOUT_CLASSIFICATION	2.9869806632162215E-8	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999981436590383	WITHOUT_CLASSIFICATION	1.8563409617493609E-6	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999843260546	WITHOUT_CLASSIFICATION	1.567394526069184E-8	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999893507607	WITHOUT_CLASSIFICATION	1.0649239276874917E-8	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999993323115475	WITHOUT_CLASSIFICATION	6.676884524500324E-7	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999994412416748	WITHOUT_CLASSIFICATION	5.587583252110303E-7	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999911964228924	WITHOUT_CLASSIFICATION	8.803577107615248E-6	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999999597674577	WITHOUT_CLASSIFICATION	4.0232542332102964E-8	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999996255997774	WITHOUT_CLASSIFICATION	3.7440022260058906E-7	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999946966428545	WITHOUT_CLASSIFICATION	5.303357145533384E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994766384684	WITHOUT_CLASSIFICATION	5.233615315236421E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999766197704	WITHOUT_CLASSIFICATION	2.338022957355518E-8	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999974415021	WITHOUT_CLASSIFICATION	2.558497805953431E-9	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997923736667923	WITHOUT_CLASSIFICATION	2.0762633320764795E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999975900689	WITHOUT_CLASSIFICATION	2.4099311376785564E-9	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999999142453567	WITHOUT_CLASSIFICATION	8.575464328639733E-7	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999840984425025	WITHOUT_CLASSIFICATION	1.5901557497572584E-5	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999820849449291	WITHOUT_CLASSIFICATION	1.7915055070801913E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999996941341192	WITHOUT_CLASSIFICATION	3.0586588080025535E-7	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999975325130771	WITHOUT_CLASSIFICATION	2.4674869229406634E-6	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999998984726052	WITHOUT_CLASSIFICATION	1.0152739480092957E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999990744597215	WITHOUT_CLASSIFICATION	9.2554027861486E-7	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9998244602370224	WITHOUT_CLASSIFICATION	1.7553976297765816E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9796663270856152	DEFECT	0.020333672914384808	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998127535362297	WITHOUT_CLASSIFICATION	1.8724646377020108E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999707408181807	WITHOUT_CLASSIFICATION	2.9259181819231084E-5	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994766384684	WITHOUT_CLASSIFICATION	5.233615315236421E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999998591247547	WITHOUT_CLASSIFICATION	1.4087524530016271E-6	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999959373159567	WITHOUT_CLASSIFICATION	4.062684043300059E-6	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999973569276451	WITHOUT_CLASSIFICATION	2.6430723548684214E-6	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998896046806	WITHOUT_CLASSIFICATION	1.1039531946640936E-7	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998949509997146	WITHOUT_CLASSIFICATION	1.0504900028536108E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998835685734218	WITHOUT_CLASSIFICATION	1.1643142657824272E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999925122386243	WITHOUT_CLASSIFICATION	7.487761375810954E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999993980261096	WITHOUT_CLASSIFICATION	6.019738903530754E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999829240472	WITHOUT_CLASSIFICATION	1.707595266658253E-8	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9963694222662469	WITHOUT_CLASSIFICATION	0.003630577733752997	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998905961274	WITHOUT_CLASSIFICATION	1.0940387258896393E-7	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999941027055	WITHOUT_CLASSIFICATION	5.897294488573899E-9	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999948223691	WITHOUT_CLASSIFICATION	5.177630827093811E-9	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999998909665655	WITHOUT_CLASSIFICATION	1.0903343446041747E-7	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.998122966168025	WITHOUT_CLASSIFICATION	0.00187703383197505	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999400049392	WITHOUT_CLASSIFICATION	5.999506079511575E-8	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999996301074163	WITHOUT_CLASSIFICATION	3.6989258359875895E-7	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9797057817543722	WITHOUT_CLASSIFICATION	0.020294218245627826	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999994181289504	WITHOUT_CLASSIFICATION	5.818710495190216E-7	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997609847125	WITHOUT_CLASSIFICATION	2.390152874736519E-7	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999666409285	WITHOUT_CLASSIFICATION	3.335907154877649E-8	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999650088286	WITHOUT_CLASSIFICATION	3.499117141180783E-8	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999650088286	WITHOUT_CLASSIFICATION	3.499117141180783E-8	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999419354972	WITHOUT_CLASSIFICATION	5.80645028170842E-8	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997779931046	WITHOUT_CLASSIFICATION	2.2200689549005E-7	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999971491195	WITHOUT_CLASSIFICATION	2.8508805190420874E-9	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999989497206	WITHOUT_CLASSIFICATION	1.0502794236430518E-9	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999857922152	WITHOUT_CLASSIFICATION	1.4207784775551176E-8	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999987547160737	WITHOUT_CLASSIFICATION	1.2452839263748857E-6	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999946898802691	WITHOUT_CLASSIFICATION	5.310119730883979E-6	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999939804122133	WITHOUT_CLASSIFICATION	6.0195877865862615E-6	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999997415359515	WITHOUT_CLASSIFICATION	2.5846404846859675E-7	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999994670733124	WITHOUT_CLASSIFICATION	5.32926687558092E-7	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999486476439927	WITHOUT_CLASSIFICATION	5.1352356007239746E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999919067847809	WITHOUT_CLASSIFICATION	8.093215219073994E-6	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999970457633351	WITHOUT_CLASSIFICATION	2.954236664922225E-6	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999396642938	WITHOUT_CLASSIFICATION	6.033570623868677E-8	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999866018074426	WITHOUT_CLASSIFICATION	1.339819255740578E-4	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999873532780531	WITHOUT_CLASSIFICATION	1.2646721946902851E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999986201082586	WITHOUT_CLASSIFICATION	1.3798917414137518E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999997341684	WITHOUT_CLASSIFICATION	2.658316058047603E-10	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999980918936291	WITHOUT_CLASSIFICATION	1.9081063709899766E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999998946168559	WITHOUT_CLASSIFICATION	1.053831441401168E-7	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9997058172813265	WITHOUT_CLASSIFICATION	2.9418271867356585E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999937102555	WITHOUT_CLASSIFICATION	6.289744602638689E-9	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999982934494365	WITHOUT_CLASSIFICATION	1.7065505635805882E-6	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999891909704595	WITHOUT_CLASSIFICATION	1.0809029540582834E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999999508265709	WITHOUT_CLASSIFICATION	4.917342901977379E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992082099842	WITHOUT_CLASSIFICATION	7.91790015869397E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999540823357355	WITHOUT_CLASSIFICATION	4.5917664264484205E-5	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999973097348874	WITHOUT_CLASSIFICATION	2.690265112584374E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999981660516525	WITHOUT_CLASSIFICATION	1.8339483475084034E-6	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999672210372647	WITHOUT_CLASSIFICATION	3.2778962735377425E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934718488226272	WITHOUT_CLASSIFICATION	0.00652815117737287	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999263784144974	WITHOUT_CLASSIFICATION	7.362158550262837E-5	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999998602243256	WITHOUT_CLASSIFICATION	1.3977567446083339E-7	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999991250803694	WITHOUT_CLASSIFICATION	8.749196305377877E-7	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999995768632579	WITHOUT_CLASSIFICATION	4.231367419669463E-7	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997838627934	WITHOUT_CLASSIFICATION	2.1613720664293173E-7	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999940467679906	WITHOUT_CLASSIFICATION	5.9532320093301815E-6	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999975426325071	WITHOUT_CLASSIFICATION	2.457367492852318E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999290441396	WITHOUT_CLASSIFICATION	7.095586034642377E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996589290463	WITHOUT_CLASSIFICATION	3.410709537758862E-7	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990881370141	WITHOUT_CLASSIFICATION	9.118629859003208E-7	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999821205586	WITHOUT_CLASSIFICATION	1.7879441357481215E-8	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999869908110648	WITHOUT_CLASSIFICATION	1.3009188935196407E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999776708155702	WITHOUT_CLASSIFICATION	2.232918442978836E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999988245509176	WITHOUT_CLASSIFICATION	1.1754490824088153E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912024408466	WITHOUT_CLASSIFICATION	8.79755915348288E-6	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9988587234412257	WITHOUT_CLASSIFICATION	0.0011412765587742763	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998813983377	WITHOUT_CLASSIFICATION	1.1860166223545466E-7	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999997915560728	WITHOUT_CLASSIFICATION	2.0844392712209036E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998400868576	WITHOUT_CLASSIFICATION	1.5991314236571206E-7	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920189207018	WITHOUT_CLASSIFICATION	7.981079298214E-6	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999999995371875	WITHOUT_CLASSIFICATION	4.628124965437599E-9	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.99999992885463	WITHOUT_CLASSIFICATION	7.11453701126108E-8	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999995618093097	WITHOUT_CLASSIFICATION	4.3819069026654724E-7	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999998313723887	WITHOUT_CLASSIFICATION	1.6862761135950594E-7	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999764020424019	WITHOUT_CLASSIFICATION	2.3597957598021858E-5	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999971285814779	WITHOUT_CLASSIFICATION	2.8714185221651306E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999999140937303	WITHOUT_CLASSIFICATION	8.590626960418778E-8	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999979116846337	WITHOUT_CLASSIFICATION	2.0883153664128612E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999984111292322	WITHOUT_CLASSIFICATION	1.5888707677990723E-5	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999767922017454	WITHOUT_CLASSIFICATION	2.3207798254632242E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999963410632975	WITHOUT_CLASSIFICATION	3.658936702392041E-6	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999997848796173	WITHOUT_CLASSIFICATION	2.15120382698567E-6	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999942298161	WITHOUT_CLASSIFICATION	5.770183871251872E-9	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.99999406863417	WITHOUT_CLASSIFICATION	5.931365830095187E-6	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999987564210391	WITHOUT_CLASSIFICATION	1.243578960907448E-6	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999030489843	WITHOUT_CLASSIFICATION	9.695101564447447E-8	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999999915951808	WITHOUT_CLASSIFICATION	8.404819192178346E-8	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999493964904	WITHOUT_CLASSIFICATION	5.060350948973764E-8	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999485089415	WITHOUT_CLASSIFICATION	5.149105851680251E-8	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999493964904	WITHOUT_CLASSIFICATION	5.060350948973764E-8	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999944272048921	WITHOUT_CLASSIFICATION	5.572795107932492E-6	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999986100994027	WITHOUT_CLASSIFICATION	1.389900597329353E-6	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999993957592115	WITHOUT_CLASSIFICATION	6.042407885071214E-7	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998941776737	WITHOUT_CLASSIFICATION	1.0582232629053423E-7	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999984244734169	WITHOUT_CLASSIFICATION	1.5755265831056262E-6	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999998036872059	WITHOUT_CLASSIFICATION	1.9631279413811713E-7	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999999740517417	WITHOUT_CLASSIFICATION	2.5948258296377536E-7	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999681848263	WITHOUT_CLASSIFICATION	3.1815173721294906E-8	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999580612892953	WITHOUT_CLASSIFICATION	4.1938710704657727E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999999874364942	WITHOUT_CLASSIFICATION	1.256350580797116E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999856731341	WITHOUT_CLASSIFICATION	1.432686581644335E-8	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999998949008716	WITHOUT_CLASSIFICATION	1.050991284080322E-6	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999987766175	WITHOUT_CLASSIFICATION	1.2233825382188395E-9	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999535067493188	WITHOUT_CLASSIFICATION	4.649325068119033E-5	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999733277872447	WITHOUT_CLASSIFICATION	2.6672212755243552E-5	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999680647605	WITHOUT_CLASSIFICATION	3.1935239412767845E-8	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999998231017038	WITHOUT_CLASSIFICATION	1.768982963347163E-7	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999999128557046	WITHOUT_CLASSIFICATION	8.714429539238834E-7	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999944891729	WITHOUT_CLASSIFICATION	5.510827112271704E-9	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999775418168	WITHOUT_CLASSIFICATION	2.2458183102251002E-8	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999997581865732	WITHOUT_CLASSIFICATION	2.418134268049238E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999965932365622	WITHOUT_CLASSIFICATION	3.4067634377579183E-6	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9987865189210429	WITHOUT_CLASSIFICATION	0.0012134810789570885	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999979486989682	WITHOUT_CLASSIFICATION	2.0513010317738232E-6	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999997331287415	WITHOUT_CLASSIFICATION	2.6687125856885173E-7	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993058437430755	WITHOUT_CLASSIFICATION	6.941562569245411E-4	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999665761668818	WITHOUT_CLASSIFICATION	3.3423833118220606E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999979249335613	WITHOUT_CLASSIFICATION	2.075066438724322E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999698599552	WITHOUT_CLASSIFICATION	3.014004473165098E-8	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999415483975149	WITHOUT_CLASSIFICATION	5.845160248496765E-5	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999932342173735	WITHOUT_CLASSIFICATION	6.765782626451468E-6	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9336286365229657	WITHOUT_CLASSIFICATION	0.0663713634770344	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9995420645421601	WITHOUT_CLASSIFICATION	4.5793545783987433E-4	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999930235886904	WITHOUT_CLASSIFICATION	6.976411309628338E-6	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999819661825589	WITHOUT_CLASSIFICATION	1.8033817441210507E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.999996087937241	WITHOUT_CLASSIFICATION	3.91206275899391E-6	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999884618232882	WITHOUT_CLASSIFICATION	1.1538176711814656E-5	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999981359397	WITHOUT_CLASSIFICATION	1.8640602970599864E-8	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999528348821575	WITHOUT_CLASSIFICATION	4.716511784245323E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999996928783852	WITHOUT_CLASSIFICATION	3.071216147770407E-7	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999998466606453	WITHOUT_CLASSIFICATION	1.5333935462149564E-7	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999823287887065	WITHOUT_CLASSIFICATION	1.767121129338565E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997834207781733	WITHOUT_CLASSIFICATION	2.1657922182669606E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993058437430755	WITHOUT_CLASSIFICATION	6.941562569245411E-4	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.999964519479862	WITHOUT_CLASSIFICATION	3.548052013805267E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999981083129786	WITHOUT_CLASSIFICATION	1.8916870214494017E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998613178492892	WITHOUT_CLASSIFICATION	1.3868215071075448E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999953865458651	WITHOUT_CLASSIFICATION	4.613454134911671E-5	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999996260401	WITHOUT_CLASSIFICATION	3.739599000016039E-7	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999990425346369	WITHOUT_CLASSIFICATION	9.574653631057933E-7	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999187342867	WITHOUT_CLASSIFICATION	8.12657132480865E-8	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7111920047120878	DEFECT	0.2888079952879121	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998654983622	WITHOUT_CLASSIFICATION	1.3450163784955314E-7	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999524413620211	WITHOUT_CLASSIFICATION	4.755863797885429E-5	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999959129556103	WITHOUT_CLASSIFICATION	4.087044389714739E-6	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999923556686	WITHOUT_CLASSIFICATION	7.644331482921932E-9	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999777852683992	WITHOUT_CLASSIFICATION	2.2214731600857943E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999564273391557	WITHOUT_CLASSIFICATION	4.357266084426134E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999996254907638	WITHOUT_CLASSIFICATION	3.7450923609533283E-7	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999999995959821	WITHOUT_CLASSIFICATION	4.04017895807282E-9	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999115763257	WITHOUT_CLASSIFICATION	8.842367425332283E-8	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999636528778	WITHOUT_CLASSIFICATION	3.634712217617543E-8	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999997167945933	WITHOUT_CLASSIFICATION	2.8320540664755395E-7	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.999964519479862	WITHOUT_CLASSIFICATION	3.548052013805267E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999957867157528	WITHOUT_CLASSIFICATION	4.2132842472516765E-6	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.999735194059254	WITHOUT_CLASSIFICATION	2.6480594074600725E-4	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999973127778912	WITHOUT_CLASSIFICATION	2.6872221088118227E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999997744168428	WITHOUT_CLASSIFICATION	2.2558315720158372E-6	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999342734305884	WITHOUT_CLASSIFICATION	6.572656941162206E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997799695081099	WITHOUT_CLASSIFICATION	2.200304918901099E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997799695081099	WITHOUT_CLASSIFICATION	2.200304918901099E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999884105065644	WITHOUT_CLASSIFICATION	1.1589493435535536E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997799695081099	WITHOUT_CLASSIFICATION	2.200304918901099E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997799695081099	WITHOUT_CLASSIFICATION	2.200304918901099E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9946068449183354	WITHOUT_CLASSIFICATION	0.0053931550816646205	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999973935271006	WITHOUT_CLASSIFICATION	2.6064728994020568E-5	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999760661471	WITHOUT_CLASSIFICATION	2.393385283236262E-8	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999999846519913	WITHOUT_CLASSIFICATION	1.5348008689703054E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9979346275445131	WITHOUT_CLASSIFICATION	0.002065372455486964	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999996500373094	WITHOUT_CLASSIFICATION	3.499626906128949E-7	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9991407439194013	WITHOUT_CLASSIFICATION	8.592560805988001E-4	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999967366456	WITHOUT_CLASSIFICATION	3.2633543358609514E-9	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999864194149807	WITHOUT_CLASSIFICATION	1.3580585019343313E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999965545237394	WITHOUT_CLASSIFICATION	3.445476260566132E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999988649770241	WITHOUT_CLASSIFICATION	1.135022976016032E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999487117280607	WITHOUT_CLASSIFICATION	5.1288271939454354E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999987525687705	WITHOUT_CLASSIFICATION	1.2474312295198053E-6	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999974308098891	WITHOUT_CLASSIFICATION	2.569190110869106E-6	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999998064249372	WITHOUT_CLASSIFICATION	1.9357506275604795E-7	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9982312263026795	WITHOUT_CLASSIFICATION	0.0017687736973204609	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998001836282	WITHOUT_CLASSIFICATION	1.998163716707346E-7	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999308307695899	WITHOUT_CLASSIFICATION	6.916923041001382E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999123930841866	WITHOUT_CLASSIFICATION	8.76069158135508E-5	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999971205981066	WITHOUT_CLASSIFICATION	2.8794018933377496E-6	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999994522476149	WITHOUT_CLASSIFICATION	5.477523850385255E-7	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999992197811552	WITHOUT_CLASSIFICATION	7.802188447061481E-7	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998001836282	WITHOUT_CLASSIFICATION	1.998163716707346E-7	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999665761668818	WITHOUT_CLASSIFICATION	3.3423833118220606E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999875030834021	WITHOUT_CLASSIFICATION	1.2496916597960715E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994229719695	WITHOUT_CLASSIFICATION	5.770280304854046E-7	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990320271416	WITHOUT_CLASSIFICATION	9.679728584378264E-7	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999988512966669	WITHOUT_CLASSIFICATION	1.1487033331791066E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999926411917243	WITHOUT_CLASSIFICATION	7.3588082757195174E-6	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.999999560979841	WITHOUT_CLASSIFICATION	4.3902015910218305E-7	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997444073349241	WITHOUT_CLASSIFICATION	2.5559266507594957E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998157359324	WITHOUT_CLASSIFICATION	1.8426406764758392E-7	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999999984355747	WITHOUT_CLASSIFICATION	1.5644253016857232E-8	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999900278016156	WITHOUT_CLASSIFICATION	9.972198384425173E-6	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999989661324006	WITHOUT_CLASSIFICATION	1.0338675994073338E-6	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999986944212738	WITHOUT_CLASSIFICATION	1.3055787262415932E-6	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999993374366	WITHOUT_CLASSIFICATION	6.625634428739275E-10	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.999925007555441	WITHOUT_CLASSIFICATION	7.49924445589324E-5	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999616322632	WITHOUT_CLASSIFICATION	3.836773675714273E-8	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999899503040871	WITHOUT_CLASSIFICATION	1.0049695912882948E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999444284755407	WITHOUT_CLASSIFICATION	5.5571524459442374E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999998398236429	WITHOUT_CLASSIFICATION	1.6017635715936778E-7	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999993558160779	WITHOUT_CLASSIFICATION	6.441839221043817E-7	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998981374200978	WITHOUT_CLASSIFICATION	1.0186257990210088E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999999964270568	WITHOUT_CLASSIFICATION	3.572943201647001E-8	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999980081200784	WITHOUT_CLASSIFICATION	1.9918799216437627E-6	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998157359324	WITHOUT_CLASSIFICATION	1.8426406764758392E-7	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999586551086	WITHOUT_CLASSIFICATION	4.134489142934977E-8	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999999696394816	WITHOUT_CLASSIFICATION	3.036051849065824E-8	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999988968800093	WITHOUT_CLASSIFICATION	1.1031199907860251E-6	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999998853977914	WITHOUT_CLASSIFICATION	1.1460220859221289E-7	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999806150094	WITHOUT_CLASSIFICATION	1.9384990585114853E-8	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.999998664426329	WITHOUT_CLASSIFICATION	1.3355736710623326E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999972870317504	WITHOUT_CLASSIFICATION	2.712968249687998E-6	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999999370220547	WITHOUT_CLASSIFICATION	6.297794536270629E-8	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999998556020617	WITHOUT_CLASSIFICATION	1.4439793829941527E-7	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999894669483678	WITHOUT_CLASSIFICATION	1.0533051632305786E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999695478103	WITHOUT_CLASSIFICATION	3.0452189657353396E-8	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999948782834526	WITHOUT_CLASSIFICATION	5.121716547358512E-6	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999986358357615	WITHOUT_CLASSIFICATION	1.3641642384180867E-6	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999999705114	WITHOUT_CLASSIFICATION	2.948867461991375E-11	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526311054	WITHOUT_CLASSIFICATION	2.14736889446665E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999625597710924	WITHOUT_CLASSIFICATION	3.744022890756187E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998900072047	WITHOUT_CLASSIFICATION	1.0999279529686598E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999695478103	WITHOUT_CLASSIFICATION	3.0452189657353396E-8	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999999921158108	WITHOUT_CLASSIFICATION	7.884189202183515E-8	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9993406551018478	WITHOUT_CLASSIFICATION	6.593448981522328E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999997965756867	WITHOUT_CLASSIFICATION	2.0342431335997757E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999999244707815	WITHOUT_CLASSIFICATION	7.552921856840024E-8	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999868012072248	WITHOUT_CLASSIFICATION	1.3198792775152572E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999733389812	WITHOUT_CLASSIFICATION	2.6661018894785232E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526311054	WITHOUT_CLASSIFICATION	2.14736889446665E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999989492508001	WITHOUT_CLASSIFICATION	1.050749199867147E-6	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989874964397	WITHOUT_CLASSIFICATION	1.0125035602895246E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999769524636	WITHOUT_CLASSIFICATION	2.3047536349357594E-8	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996196732471	WITHOUT_CLASSIFICATION	3.803267528523692E-7	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990459897058	WITHOUT_CLASSIFICATION	9.540102942190014E-7	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999110007457	WITHOUT_CLASSIFICATION	8.899925432856737E-8	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999051782479	WITHOUT_CLASSIFICATION	9.482175217928882E-8	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999051782479	WITHOUT_CLASSIFICATION	9.482175217928882E-8	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999948798425375	WITHOUT_CLASSIFICATION	5.12015746243393E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999993761968096	WITHOUT_CLASSIFICATION	6.23803190499385E-7	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999994996055382	WITHOUT_CLASSIFICATION	5.003944617457606E-7	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999893609071018	WITHOUT_CLASSIFICATION	1.0639092898270158E-5	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9490668423479061	WITHOUT_CLASSIFICATION	0.05093315765209387	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999112772802	WITHOUT_CLASSIFICATION	8.872271976312373E-8	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983812769694	WITHOUT_CLASSIFICATION	1.6187230306270485E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972926137651	WITHOUT_CLASSIFICATION	2.7073862347627802E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999044112589	WITHOUT_CLASSIFICATION	9.55887411472987E-8	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969936260713	WITHOUT_CLASSIFICATION	3.0063739286475618E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999112772802	WITHOUT_CLASSIFICATION	8.872271976312373E-8	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983812769694	WITHOUT_CLASSIFICATION	1.6187230306270485E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972926137651	WITHOUT_CLASSIFICATION	2.7073862347627802E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999998706651234	WITHOUT_CLASSIFICATION	1.2933487656212872E-7	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999989737423749	WITHOUT_CLASSIFICATION	1.0262576250098046E-6	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999965920652059	WITHOUT_CLASSIFICATION	3.407934794149742E-6	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999911672583939	WITHOUT_CLASSIFICATION	8.832741606157573E-6	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999649487664	WITHOUT_CLASSIFICATION	3.505123363304761E-8	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999727985879481	WITHOUT_CLASSIFICATION	2.7201412051966782E-5	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999530854546417	WITHOUT_CLASSIFICATION	4.69145453582182E-5	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999998253255434	WITHOUT_CLASSIFICATION	1.746744564541144E-7	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999937247982913	WITHOUT_CLASSIFICATION	6.275201708744506E-6	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999995512043816	WITHOUT_CLASSIFICATION	4.4879561852247764E-7	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999999981273997	WITHOUT_CLASSIFICATION	1.8726002927019283E-8	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9968067183659504	WITHOUT_CLASSIFICATION	0.00319328163404958	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997128100573677	WITHOUT_CLASSIFICATION	2.871899426324198E-4	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999256917009	WITHOUT_CLASSIFICATION	7.430829910925965E-8	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999751174456	WITHOUT_CLASSIFICATION	2.488255439831714E-7	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999911569808807	WITHOUT_CLASSIFICATION	8.843019119281418E-6	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999996347562948	WITHOUT_CLASSIFICATION	3.6524370518109633E-7	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999888788755749	WITHOUT_CLASSIFICATION	1.1121124425057401E-5	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999995332197341	WITHOUT_CLASSIFICATION	4.667802659933473E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999985034445292	WITHOUT_CLASSIFICATION	1.496555470802909E-6	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999992648904706	WITHOUT_CLASSIFICATION	7.351095293306076E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9828384052593935	WITHOUT_CLASSIFICATION	0.017161594740606478	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999992616433229	WITHOUT_CLASSIFICATION	7.383566770723313E-7	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999995672153268	WITHOUT_CLASSIFICATION	4.327846732025714E-7	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.999999996021842	WITHOUT_CLASSIFICATION	3.9781580513796695E-9	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999960123897027	WITHOUT_CLASSIFICATION	3.987610297230327E-6	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922437816995	WITHOUT_CLASSIFICATION	7.756218300487826E-6	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989149804293	WITHOUT_CLASSIFICATION	1.085019570717512E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999998861145803	WITHOUT_CLASSIFICATION	1.1388541967490933E-7	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995644632681	WITHOUT_CLASSIFICATION	4.355367318999672E-7	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864228211814	WITHOUT_CLASSIFICATION	1.3577178818522808E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998836352662	WITHOUT_CLASSIFICATION	1.1636473386759263E-7	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998836352662	WITHOUT_CLASSIFICATION	1.1636473386759263E-7	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999956192841	WITHOUT_CLASSIFICATION	4.380715983037932E-9	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999998591046364	WITHOUT_CLASSIFICATION	1.4089536356224127E-7	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999977792323296	WITHOUT_CLASSIFICATION	2.220767670490053E-6	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999919590785863	WITHOUT_CLASSIFICATION	8.040921413756718E-6	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.999999973343513	WITHOUT_CLASSIFICATION	2.6656487059414733E-8	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.99999789148644	WITHOUT_CLASSIFICATION	2.1085135599981554E-6	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9999749688534822	WITHOUT_CLASSIFICATION	2.503114651773119E-5	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999999919399013	WITHOUT_CLASSIFICATION	8.06009868349363E-9	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999995783513096	WITHOUT_CLASSIFICATION	4.216486903164496E-7	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999325297805	WITHOUT_CLASSIFICATION	6.747021952789279E-8	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998169083959	WITHOUT_CLASSIFICATION	1.8309160414311776E-7	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991211736069	WITHOUT_CLASSIFICATION	8.788263930350568E-7	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998708466138	WITHOUT_CLASSIFICATION	1.2915338611491547E-7	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999136240525	WITHOUT_CLASSIFICATION	8.637594747307284E-8	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998135320658	WITHOUT_CLASSIFICATION	1.864679342012322E-7	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997960107643	WITHOUT_CLASSIFICATION	2.0398923560742116E-7	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998549568725	WITHOUT_CLASSIFICATION	1.4504312754205187E-7	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996011481765	WITHOUT_CLASSIFICATION	3.9885182340482256E-7	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994391507241	WITHOUT_CLASSIFICATION	5.608492758668092E-7	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999875546312	WITHOUT_CLASSIFICATION	1.2445368813154074E-8	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999987298553454	WITHOUT_CLASSIFICATION	1.2701446545603145E-6	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9769932527688487	WITHOUT_CLASSIFICATION	0.023006747231151318	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999806850693455	WITHOUT_CLASSIFICATION	1.9314930654547084E-5	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999994877148778	WITHOUT_CLASSIFICATION	5.122851221529656E-7	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999849468033	WITHOUT_CLASSIFICATION	1.505319666326345E-8	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999995460360417	WITHOUT_CLASSIFICATION	4.539639583550218E-7	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999986098317	WITHOUT_CLASSIFICATION	1.3901683285368399E-9	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999994079990608	WITHOUT_CLASSIFICATION	5.920009391889941E-7	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999806850693455	WITHOUT_CLASSIFICATION	1.9314930654547084E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999806850693455	WITHOUT_CLASSIFICATION	1.9314930654547084E-5	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999998128331062	WITHOUT_CLASSIFICATION	1.8716689379282226E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999992553653513	WITHOUT_CLASSIFICATION	7.446346486330754E-7	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999567920085	WITHOUT_CLASSIFICATION	4.320799141856014E-8	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999991355531441	WITHOUT_CLASSIFICATION	8.64446855852412E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999992078625534	WITHOUT_CLASSIFICATION	7.92137446652548E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999985034445292	WITHOUT_CLASSIFICATION	1.496555470802909E-6	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999986832085	WITHOUT_CLASSIFICATION	1.3167914517134478E-9	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999152855849169	WITHOUT_CLASSIFICATION	8.4714415083008E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999997188008683	WITHOUT_CLASSIFICATION	2.811991317013872E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987573280751	WITHOUT_CLASSIFICATION	1.2426719249516684E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999984018924021	WITHOUT_CLASSIFICATION	1.5981075979864035E-6	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920611547054	WITHOUT_CLASSIFICATION	7.938845294635726E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997777578475	WITHOUT_CLASSIFICATION	2.2224215240720903E-7	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997777578475	WITHOUT_CLASSIFICATION	2.2224215240720903E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999999980580756	WITHOUT_CLASSIFICATION	1.94192439857861E-8	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999999980580756	WITHOUT_CLASSIFICATION	1.94192439857861E-8	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994373083666	WITHOUT_CLASSIFICATION	5.626916334966255E-7	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992890064582	WITHOUT_CLASSIFICATION	7.109935417996607E-7	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999986364078904	WITHOUT_CLASSIFICATION	1.3635921094882948E-6	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996927444761	WITHOUT_CLASSIFICATION	3.072555238372554E-7	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999916682044399	WITHOUT_CLASSIFICATION	8.331795560093931E-6	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998641346354081	WITHOUT_CLASSIFICATION	1.358653645919547E-4	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997554507689347	WITHOUT_CLASSIFICATION	2.445492310653907E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936741538085	WITHOUT_CLASSIFICATION	6.32584619155883E-6	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999984571828228	WITHOUT_CLASSIFICATION	1.5428171771701512E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999604262562	WITHOUT_CLASSIFICATION	3.957374383970564E-8	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999814788963	WITHOUT_CLASSIFICATION	1.8521103672475167E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867802279463	WITHOUT_CLASSIFICATION	1.3219772053745321E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999997093129814	WITHOUT_CLASSIFICATION	2.9068701856336865E-7	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999993000690024	WITHOUT_CLASSIFICATION	6.99930997691741E-7	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.99999937032754	WITHOUT_CLASSIFICATION	6.296724598983087E-7	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999967677596237	WITHOUT_CLASSIFICATION	3.232240376323062E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999996868905681	WITHOUT_CLASSIFICATION	3.1310943188657343E-7	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999996868905681	WITHOUT_CLASSIFICATION	3.1310943188657343E-7	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999893054586	WITHOUT_CLASSIFICATION	1.0694541290661928E-8	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.999966478131772	WITHOUT_CLASSIFICATION	3.352186822803001E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999973279103	WITHOUT_CLASSIFICATION	2.6720895354744536E-9	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999234445687732	WITHOUT_CLASSIFICATION	7.65554312267875E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945614531478	WITHOUT_CLASSIFICATION	5.438546852155894E-6	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990393105314	WITHOUT_CLASSIFICATION	9.606894687098897E-7	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999999448604582	WITHOUT_CLASSIFICATION	5.513954179760097E-7	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997678828778601	WITHOUT_CLASSIFICATION	2.3211712213988387E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999986506285066	WITHOUT_CLASSIFICATION	1.349371493397603E-6	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999899447997	WITHOUT_CLASSIFICATION	1.0055200394238165E-8	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999994994895944	WITHOUT_CLASSIFICATION	5.00510405595812E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9986102239402389	WITHOUT_CLASSIFICATION	0.0013897760597611569	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810507724907	WITHOUT_CLASSIFICATION	1.8949227509281685E-5	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999911155531955	WITHOUT_CLASSIFICATION	8.884446804530514E-6	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999996107943957	WITHOUT_CLASSIFICATION	3.89205604295241E-7	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998036442743614	WITHOUT_CLASSIFICATION	1.9635572563870803E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999552669904	WITHOUT_CLASSIFICATION	4.4733009569572185E-8	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999918454748064	WITHOUT_CLASSIFICATION	8.15452519366086E-6	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999988511055145	WITHOUT_CLASSIFICATION	1.1488944855009433E-5	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999992211646795	WITHOUT_CLASSIFICATION	7.788353203211994E-7	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999999999900965	WITHOUT_CLASSIFICATION	9.90349919073169E-11	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999482492604849	WITHOUT_CLASSIFICATION	5.175073951518955E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992559475787	WITHOUT_CLASSIFICATION	7.440524213301673E-7	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999958865354	WITHOUT_CLASSIFICATION	4.113464588477167E-9	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998386059292	WITHOUT_CLASSIFICATION	1.613940708042875E-7	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999909955478853	WITHOUT_CLASSIFICATION	9.004452114608103E-6	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999666837199075	WITHOUT_CLASSIFICATION	3.331628009253095E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999320817294826	WITHOUT_CLASSIFICATION	6.791827051745824E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999937090597	WITHOUT_CLASSIFICATION	6.290940311608438E-9	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999997296729801	WITHOUT_CLASSIFICATION	2.703270198978679E-6	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9997949134830025	WITHOUT_CLASSIFICATION	2.050865169974711E-4	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999975983314069	WITHOUT_CLASSIFICATION	2.4016685930552703E-6	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999506676410526	WITHOUT_CLASSIFICATION	4.9332358947433816E-5	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999983691178035	WITHOUT_CLASSIFICATION	1.6308821964451829E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998779952153851	WITHOUT_CLASSIFICATION	1.2200478461489089E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999861140942242	WITHOUT_CLASSIFICATION	1.3885905775863812E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999995487832182	WITHOUT_CLASSIFICATION	4.512167817591779E-7	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999997792054767	WITHOUT_CLASSIFICATION	2.2079452337857436E-7	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999934464354	WITHOUT_CLASSIFICATION	6.553564602085902E-8	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999999561254694	WITHOUT_CLASSIFICATION	4.387453053391604E-8	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999998653042008	WITHOUT_CLASSIFICATION	1.3469579923417726E-7	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999997759247876	WITHOUT_CLASSIFICATION	2.2407521242881784E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9991879930753621	WITHOUT_CLASSIFICATION	8.120069246379091E-4	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999989142340135	WITHOUT_CLASSIFICATION	1.0857659865055126E-6	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999963777753136	WITHOUT_CLASSIFICATION	3.6222246863976513E-6	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999376136101095	WITHOUT_CLASSIFICATION	6.238638989053939E-5	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999998982685924	WITHOUT_CLASSIFICATION	1.0173140763998217E-7	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999963907106648	WITHOUT_CLASSIFICATION	3.609289335178345E-6	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999896888701257	WITHOUT_CLASSIFICATION	1.0311129874208218E-5	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999997931546145	WITHOUT_CLASSIFICATION	2.0684538546010527E-7	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999973414834077	WITHOUT_CLASSIFICATION	2.658516592216545E-6	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.99998834454918	WITHOUT_CLASSIFICATION	1.1655450820069465E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999999151065994	WITHOUT_CLASSIFICATION	8.48934007163825E-8	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998623439310811	WITHOUT_CLASSIFICATION	1.3765606891890858E-4	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999979425881899	WITHOUT_CLASSIFICATION	2.0574118101750252E-6	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999984979912656	WITHOUT_CLASSIFICATION	1.5020087342852232E-6	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999996413847654	WITHOUT_CLASSIFICATION	3.5861523462630324E-7	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999923783651332	WITHOUT_CLASSIFICATION	7.621634866795761E-6	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999336271636	WITHOUT_CLASSIFICATION	6.63728364862162E-8	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999953183291856	WITHOUT_CLASSIFICATION	4.681670814386663E-6	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999976741352441	WITHOUT_CLASSIFICATION	2.3258647557899452E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999521795099	WITHOUT_CLASSIFICATION	4.7820490039740276E-8	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999594930893	WITHOUT_CLASSIFICATION	4.050691062475343E-8	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999564324794	WITHOUT_CLASSIFICATION	4.3567520605352636E-7	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999801944982	WITHOUT_CLASSIFICATION	1.980550177494751E-8	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999309132427783	WITHOUT_CLASSIFICATION	6.908675722172922E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999984854475439	WITHOUT_CLASSIFICATION	1.5145524560913137E-6	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999999718033463	WITHOUT_CLASSIFICATION	2.8196653706E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999677059363018	WITHOUT_CLASSIFICATION	3.2294063698303366E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999677059363018	WITHOUT_CLASSIFICATION	3.2294063698303366E-5	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999261312609	WITHOUT_CLASSIFICATION	7.386873909599421E-8	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999996300264469	WITHOUT_CLASSIFICATION	3.699735530569476E-7	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999993110121559	WITHOUT_CLASSIFICATION	6.88987844066679E-7	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999999032490897	WITHOUT_CLASSIFICATION	9.675091029419964E-7	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999985823975052	WITHOUT_CLASSIFICATION	1.4176024948502145E-6	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999999547913012	WITHOUT_CLASSIFICATION	4.520869888971503E-8	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999994006120136	WITHOUT_CLASSIFICATION	5.993879863136342E-7	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999982694389897	WITHOUT_CLASSIFICATION	1.7305610103242993E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999403290491227	WITHOUT_CLASSIFICATION	5.96709508774198E-5	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999996914996406	WITHOUT_CLASSIFICATION	3.085003592975603E-7	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999997658091211	WITHOUT_CLASSIFICATION	2.3419087894100746E-7	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996348611218	WITHOUT_CLASSIFICATION	3.6513887823693365E-7	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999997200365228	WITHOUT_CLASSIFICATION	2.7996347721690284E-7	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.99999999297418	WITHOUT_CLASSIFICATION	7.0258200312684504E-9	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999941359863114	WITHOUT_CLASSIFICATION	5.864013688607037E-6	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999969899213026	WITHOUT_CLASSIFICATION	3.0100786974280565E-6	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.999998639644645	WITHOUT_CLASSIFICATION	1.3603553550827383E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9994426708245396	WITHOUT_CLASSIFICATION	5.573291754603866E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999982868896569	WITHOUT_CLASSIFICATION	1.7131103431245495E-6	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999999825796436	WITHOUT_CLASSIFICATION	1.742035634400315E-8	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999987178641662	WITHOUT_CLASSIFICATION	1.2821358338554855E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999995346072259	WITHOUT_CLASSIFICATION	4.6539277412849433E-7	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999863871450179	WITHOUT_CLASSIFICATION	1.3612854982048722E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999607165409575	WITHOUT_CLASSIFICATION	3.928345904243163E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999891028140243	WITHOUT_CLASSIFICATION	1.0897185975610897E-5	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999814390694779	WITHOUT_CLASSIFICATION	1.856093052205519E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999993389332067	WITHOUT_CLASSIFICATION	6.610667933488548E-7	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999835045772181	WITHOUT_CLASSIFICATION	1.6495422781910877E-5	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999997103911501	WITHOUT_CLASSIFICATION	2.8960884995085125E-7	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999947444912	WITHOUT_CLASSIFICATION	5.255508855127409E-9	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999998143256652	WITHOUT_CLASSIFICATION	1.8567433477967773E-7	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999999929462804	WITHOUT_CLASSIFICATION	7.053719604135007E-8	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999998146744462	WITHOUT_CLASSIFICATION	1.853255537044514E-7	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999991376512898	WITHOUT_CLASSIFICATION	8.623487102037383E-7	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999910533580612	WITHOUT_CLASSIFICATION	8.946641938933263E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999910533580612	WITHOUT_CLASSIFICATION	8.946641938933263E-6	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999906379623067	WITHOUT_CLASSIFICATION	9.36203769319315E-6	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999920122084321	WITHOUT_CLASSIFICATION	7.987791567963435E-6	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999966191023193	WITHOUT_CLASSIFICATION	3.3808976806710374E-6	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999983915818973	WITHOUT_CLASSIFICATION	1.6084181027087476E-6	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999989586	WITHOUT_CLASSIFICATION	1.0413593385672148E-12	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999855008868718	WITHOUT_CLASSIFICATION	1.4499113128191791E-5	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999757537637681	WITHOUT_CLASSIFICATION	2.4246236231778515E-5	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999996900767314	WITHOUT_CLASSIFICATION	3.0992326856178466E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998065428627467	WITHOUT_CLASSIFICATION	1.9345713725334905E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994503308028	WITHOUT_CLASSIFICATION	5.496691971597607E-7	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9977020943847603	WITHOUT_CLASSIFICATION	0.002297905615239604	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999964161781432	WITHOUT_CLASSIFICATION	3.5838218568243595E-6	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999969739751061	WITHOUT_CLASSIFICATION	3.0260248939520107E-6	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999997210602702	WITHOUT_CLASSIFICATION	2.789397297602031E-7	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999996654263374	WITHOUT_CLASSIFICATION	3.34573662472054E-7	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993897711037045	WITHOUT_CLASSIFICATION	6.102288962955576E-4	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993897711037045	WITHOUT_CLASSIFICATION	6.102288962955576E-4	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999767336337461	WITHOUT_CLASSIFICATION	2.3266366253995797E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999510350926358	WITHOUT_CLASSIFICATION	4.896490736411866E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999956976580934	WITHOUT_CLASSIFICATION	4.302341906580744E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999373110399	WITHOUT_CLASSIFICATION	6.268896009362315E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867802279463	WITHOUT_CLASSIFICATION	1.3219772053745321E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994057336776636	WITHOUT_CLASSIFICATION	5.942663223363956E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998636969256	WITHOUT_CLASSIFICATION	1.3630307440963443E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999997766035199	WITHOUT_CLASSIFICATION	2.2339648019006728E-7	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999997766035199	WITHOUT_CLASSIFICATION	2.2339648019006728E-7	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999954775218993	WITHOUT_CLASSIFICATION	4.522478100752944E-6	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999994550028333	WITHOUT_CLASSIFICATION	5.449971667589194E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999993202065403	WITHOUT_CLASSIFICATION	6.797934596765105E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9975792379117714	WITHOUT_CLASSIFICATION	0.0024207620882285568	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999997512966197	WITHOUT_CLASSIFICATION	2.487033804047213E-7	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999894337068923	WITHOUT_CLASSIFICATION	1.0566293107682514E-5	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999983377397157	WITHOUT_CLASSIFICATION	1.6622602843355164E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997886586338	WITHOUT_CLASSIFICATION	2.1134136622911242E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981698133	WITHOUT_CLASSIFICATION	1.830186772178613E-9	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999950776244348	WITHOUT_CLASSIFICATION	4.9223755651939475E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995286172835349	WITHOUT_CLASSIFICATION	4.713827164650438E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999969697500266	WITHOUT_CLASSIFICATION	3.03024997347386E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999931298659	WITHOUT_CLASSIFICATION	6.870134121510399E-9	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999998912358188	WITHOUT_CLASSIFICATION	1.0876418123548267E-7	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999981660516525	WITHOUT_CLASSIFICATION	1.8339483475084034E-6	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999436126921	WITHOUT_CLASSIFICATION	5.638730806223311E-8	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999997237598824	WITHOUT_CLASSIFICATION	2.762401176018961E-7	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999989051789868	WITHOUT_CLASSIFICATION	1.0948210132477525E-6	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999925209447159	WITHOUT_CLASSIFICATION	7.479055284112127E-6	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999937272223152	WITHOUT_CLASSIFICATION	6.2727776848461235E-6	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999998765845687	WITHOUT_CLASSIFICATION	1.2341543130004294E-7	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.99999993028869	WITHOUT_CLASSIFICATION	6.97113099390074E-8	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998533335114236	WITHOUT_CLASSIFICATION	1.4666648857642213E-4	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999946627404271	WITHOUT_CLASSIFICATION	5.337259572851017E-6	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999985734432539	WITHOUT_CLASSIFICATION	1.4265567460806236E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999963567704403	WITHOUT_CLASSIFICATION	3.6432295597435525E-6	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999997287674872	WITHOUT_CLASSIFICATION	2.712325127717365E-7	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999999977022	WITHOUT_CLASSIFICATION	2.2978200830791906E-12	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999992944334604	WITHOUT_CLASSIFICATION	7.055665397044116E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999780052736	WITHOUT_CLASSIFICATION	2.1994726399855185E-8	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999986038357061	WITHOUT_CLASSIFICATION	1.3961642939100873E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999995887379171	WITHOUT_CLASSIFICATION	4.112620829737618E-7	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9948193895612716	WITHOUT_CLASSIFICATION	0.0051806104387284325	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.999999950393936	WITHOUT_CLASSIFICATION	4.960606406026411E-8	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999999727641897	WITHOUT_CLASSIFICATION	2.7235810312004697E-8	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999847247732373	WITHOUT_CLASSIFICATION	1.5275226762749764E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999949417747714	WITHOUT_CLASSIFICATION	5.058225228556208E-6	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999975371822611	WITHOUT_CLASSIFICATION	2.462817738823531E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999454234514	WITHOUT_CLASSIFICATION	5.457654860928779E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996512302896	WITHOUT_CLASSIFICATION	3.487697104685281E-7	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999885096919	WITHOUT_CLASSIFICATION	1.1490308274659201E-8	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999737005298044	WITHOUT_CLASSIFICATION	2.6299470195637488E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999812484885655	WITHOUT_CLASSIFICATION	1.875151143453322E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999899487649	WITHOUT_CLASSIFICATION	1.0051235022964535E-8	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999812896	WITHOUT_CLASSIFICATION	1.871037492750719E-11	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999937481508321	WITHOUT_CLASSIFICATION	6.251849167893667E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999454234514	WITHOUT_CLASSIFICATION	5.457654860928779E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996512302896	WITHOUT_CLASSIFICATION	3.487697104685281E-7	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999993029835395	WITHOUT_CLASSIFICATION	6.970164604745704E-7	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999992341138232	WITHOUT_CLASSIFICATION	7.658861768100483E-7	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999998836174352	WITHOUT_CLASSIFICATION	1.1638256489377197E-7	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999918053293211	WITHOUT_CLASSIFICATION	8.194670678972206E-6	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999993753236927	WITHOUT_CLASSIFICATION	6.24676307370227E-7	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9998750142996966	WITHOUT_CLASSIFICATION	1.2498570030334514E-4	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999228911247455	WITHOUT_CLASSIFICATION	7.710887525447538E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999959127646781	WITHOUT_CLASSIFICATION	4.0872353218271625E-6	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999998370701506	WITHOUT_CLASSIFICATION	1.6292984943961293E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9909607488262071	WITHOUT_CLASSIFICATION	0.009039251173792843	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999998643869	WITHOUT_CLASSIFICATION	1.356131851607358E-10	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9909607488262071	WITHOUT_CLASSIFICATION	0.009039251173792843	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999878982996321	WITHOUT_CLASSIFICATION	1.2101700367885176E-5	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999997615956884	WITHOUT_CLASSIFICATION	2.384043115664399E-7	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999882295788196	WITHOUT_CLASSIFICATION	1.1770421180402706E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999736115421	WITHOUT_CLASSIFICATION	2.6388457852706253E-8	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998743149535969	WITHOUT_CLASSIFICATION	1.2568504640312331E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999806899438326	WITHOUT_CLASSIFICATION	1.9310056167427063E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999806899438326	WITHOUT_CLASSIFICATION	1.9310056167427063E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999594937054666	WITHOUT_CLASSIFICATION	4.050629453352172E-5	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999959762211821	WITHOUT_CLASSIFICATION	4.023778817924274E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999991342054053	WITHOUT_CLASSIFICATION	8.6579459468782E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999443924766599	WITHOUT_CLASSIFICATION	5.5607523340081975E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999893658720727	WITHOUT_CLASSIFICATION	1.0634127927359654E-5	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999996209154257	WITHOUT_CLASSIFICATION	3.79084574293911E-7	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999997798590614	WITHOUT_CLASSIFICATION	2.2014093860242063E-7	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999998673898389	WITHOUT_CLASSIFICATION	1.326101611052385E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999967236000992	WITHOUT_CLASSIFICATION	3.276399900775502E-6	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9999941747482862	WITHOUT_CLASSIFICATION	5.825251713759078E-6	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999999522876669	WITHOUT_CLASSIFICATION	4.7712333225671826E-8	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999968421529692	WITHOUT_CLASSIFICATION	3.1578470307334795E-6	DEFECT
//types	WITHOUT_CLASSIFICATION	0.999987633240216	WITHOUT_CLASSIFICATION	1.236675978408486E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999998798022091	WITHOUT_CLASSIFICATION	1.2019779099991158E-7	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999998512631979	WITHOUT_CLASSIFICATION	1.4873680204037776E-7	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999984069900816	WITHOUT_CLASSIFICATION	1.5930099184274912E-6	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999974684271425	WITHOUT_CLASSIFICATION	2.531572857433262E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997464415415	WITHOUT_CLASSIFICATION	2.535584584143491E-7	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999962010676512	WITHOUT_CLASSIFICATION	3.7989323488646273E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999739784418454	WITHOUT_CLASSIFICATION	2.602155815457003E-5	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999880211871	WITHOUT_CLASSIFICATION	1.1978813059463363E-8	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999991718589065	WITHOUT_CLASSIFICATION	8.281410935268633E-7	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999990325928471	WITHOUT_CLASSIFICATION	9.67407152966762E-7	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999588896205	WITHOUT_CLASSIFICATION	4.1110379595524626E-8	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999997331802066	WITHOUT_CLASSIFICATION	2.66819793330522E-7	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999971827200411	WITHOUT_CLASSIFICATION	2.8172799588021665E-6	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999710639957	WITHOUT_CLASSIFICATION	2.8936004174826783E-8	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9996821861781369	WITHOUT_CLASSIFICATION	3.178138218630353E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999997768753786	WITHOUT_CLASSIFICATION	2.2312462132418236E-7	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999998956006093	WITHOUT_CLASSIFICATION	1.0439939072032099E-7	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998517311159921	WITHOUT_CLASSIFICATION	1.482688840079978E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999557506902763	WITHOUT_CLASSIFICATION	4.424930972372416E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999997798590614	WITHOUT_CLASSIFICATION	2.2014093860242063E-7	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998426565485888	WITHOUT_CLASSIFICATION	1.5734345141115694E-4	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.99999820522803	WITHOUT_CLASSIFICATION	1.7947719699320575E-6	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9916470222442191	WITHOUT_CLASSIFICATION	0.00835297775578092	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999993823913763	WITHOUT_CLASSIFICATION	6.176086236517178E-7	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999993271981819	WITHOUT_CLASSIFICATION	6.728018181691374E-7	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999999632030104	WITHOUT_CLASSIFICATION	3.6796989556630145E-8	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999443924766599	WITHOUT_CLASSIFICATION	5.5607523340081975E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999443924766599	WITHOUT_CLASSIFICATION	5.5607523340081975E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999999860812693	WITHOUT_CLASSIFICATION	1.3918730658548291E-8	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999997875351699	WITHOUT_CLASSIFICATION	2.124648300438551E-7	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999897701374199	WITHOUT_CLASSIFICATION	1.0229862580229534E-5	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999999188166555	WITHOUT_CLASSIFICATION	8.118334445627252E-8	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999968099153166	WITHOUT_CLASSIFICATION	3.1900846833499125E-6	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999702349703303	WITHOUT_CLASSIFICATION	2.9765029669702144E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999422591904827	WITHOUT_CLASSIFICATION	5.7740809517166157E-5	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999097021108	WITHOUT_CLASSIFICATION	9.02978891840526E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999906370126361	WITHOUT_CLASSIFICATION	9.36298736378834E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999110822072	WITHOUT_CLASSIFICATION	8.89177927844701E-8	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999991743760176	WITHOUT_CLASSIFICATION	8.256239824564573E-7	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999729698949649	WITHOUT_CLASSIFICATION	2.7030105035176104E-5	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.999999764510466	WITHOUT_CLASSIFICATION	2.3548953390878848E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999110822072	WITHOUT_CLASSIFICATION	8.89177927844701E-8	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999999794915338	WITHOUT_CLASSIFICATION	2.050846620471701E-7	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999958124169012	WITHOUT_CLASSIFICATION	4.1875830987724126E-6	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999908822152036	WITHOUT_CLASSIFICATION	9.117784796414547E-6	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.978845578812484	WITHOUT_CLASSIFICATION	0.021154421187515954	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999729698949649	WITHOUT_CLASSIFICATION	2.7030105035176104E-5	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999967915648497	WITHOUT_CLASSIFICATION	3.2084351503056E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999950331509483	WITHOUT_CLASSIFICATION	4.966849051617923E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999459103291	WITHOUT_CLASSIFICATION	5.408967085263777E-8	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999449183189019	WITHOUT_CLASSIFICATION	5.508168109820157E-5	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999851936731211	WITHOUT_CLASSIFICATION	1.4806326879019044E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999117386397	WITHOUT_CLASSIFICATION	8.826136039303848E-8	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999993315115642	WITHOUT_CLASSIFICATION	6.684884357963373E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999981317652427	WITHOUT_CLASSIFICATION	1.8682347573234678E-6	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999996542897729	WITHOUT_CLASSIFICATION	3.457102270814733E-7	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999560074055	WITHOUT_CLASSIFICATION	4.3992594457688766E-8	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9956842221455704	WITHOUT_CLASSIFICATION	0.0043157778544295955	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999999950383649	WITHOUT_CLASSIFICATION	4.9616351073426184E-8	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999110822072	WITHOUT_CLASSIFICATION	8.89177927844701E-8	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999967915648497	WITHOUT_CLASSIFICATION	3.2084351503056E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999459103291	WITHOUT_CLASSIFICATION	5.408967085263777E-8	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999923611935562	WITHOUT_CLASSIFICATION	7.638806443890262E-6	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999918914080175	WITHOUT_CLASSIFICATION	8.108591982456564E-6	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999992456132918	WITHOUT_CLASSIFICATION	7.543867081886485E-7	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999729698949649	WITHOUT_CLASSIFICATION	2.7030105035176104E-5	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999998842786093	WITHOUT_CLASSIFICATION	1.1572139072026501E-7	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999997429613127	WITHOUT_CLASSIFICATION	2.570386873514164E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999974694789333	WITHOUT_CLASSIFICATION	2.530521066675652E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999995510859511	WITHOUT_CLASSIFICATION	4.4891404887406053E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999981317652427	WITHOUT_CLASSIFICATION	1.8682347573234678E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999999794915338	WITHOUT_CLASSIFICATION	2.050846620471701E-7	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999952365972172	WITHOUT_CLASSIFICATION	4.763402782722211E-6	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999985296958457	WITHOUT_CLASSIFICATION	1.4703041542432496E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999996660895558	WITHOUT_CLASSIFICATION	3.339104441295555E-7	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999998129473145	WITHOUT_CLASSIFICATION	1.8705268555166353E-7	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999999264649505	WITHOUT_CLASSIFICATION	7.353504946601766E-8	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999999323403158	WITHOUT_CLASSIFICATION	6.765968417401314E-8	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999832594412288	WITHOUT_CLASSIFICATION	1.6740558771170087E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999736115421	WITHOUT_CLASSIFICATION	2.6388457852706253E-8	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999741891464	WITHOUT_CLASSIFICATION	2.581085360472158E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951391197575	WITHOUT_CLASSIFICATION	4.860880242613747E-6	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999981964628	WITHOUT_CLASSIFICATION	1.8035371528559102E-9	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9978696020654175	WITHOUT_CLASSIFICATION	0.002130397934582385	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999951483893379	WITHOUT_CLASSIFICATION	4.851610662097193E-5	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999924322566852	WITHOUT_CLASSIFICATION	7.56774331474194E-6	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999976694270742	WITHOUT_CLASSIFICATION	2.330572925708269E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999993819924705	WITHOUT_CLASSIFICATION	6.180075294871415E-7	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999811820227	WITHOUT_CLASSIFICATION	1.8817977196247885E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999995510859511	WITHOUT_CLASSIFICATION	4.4891404887406053E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951391197575	WITHOUT_CLASSIFICATION	4.860880242613747E-6	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999986005469513	WITHOUT_CLASSIFICATION	1.3994530485749688E-6	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999982712103077	WITHOUT_CLASSIFICATION	1.728789692214769E-6	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999993278825616	WITHOUT_CLASSIFICATION	6.721174383230922E-7	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999999451445811	WITHOUT_CLASSIFICATION	5.485541890124281E-7	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999971035674704	WITHOUT_CLASSIFICATION	2.8964325296803547E-6	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999868725798	WITHOUT_CLASSIFICATION	1.3127420213092197E-8	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999914557510303	WITHOUT_CLASSIFICATION	8.544248969598545E-6	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998149332890943	WITHOUT_CLASSIFICATION	1.8506671090556405E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999745517580726	WITHOUT_CLASSIFICATION	2.544824192740153E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9984243565114946	WITHOUT_CLASSIFICATION	0.0015756434885053755	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999998528234827	WITHOUT_CLASSIFICATION	1.4717651735516646E-7	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999802466900312	WITHOUT_CLASSIFICATION	1.975330996884791E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999998280524026	WITHOUT_CLASSIFICATION	1.719475973982318E-7	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999739205191627	WITHOUT_CLASSIFICATION	2.607948083731772E-5	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998691017525	WITHOUT_CLASSIFICATION	1.3089824737401924E-7	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998789275216	WITHOUT_CLASSIFICATION	1.2107247839539236E-7	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999998526563675	WITHOUT_CLASSIFICATION	1.473436324914673E-7	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999872124271	WITHOUT_CLASSIFICATION	1.278757291129874E-8	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999999741827811	WITHOUT_CLASSIFICATION	2.5817218958635562E-8	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999976658614868	WITHOUT_CLASSIFICATION	2.334138513316106E-6	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.999995687809881	WITHOUT_CLASSIFICATION	4.3121901189676995E-6	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999999959965894	WITHOUT_CLASSIFICATION	4.003410626422809E-9	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999357444775	WITHOUT_CLASSIFICATION	6.425552237639335E-8	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999644269609	WITHOUT_CLASSIFICATION	3.5573039067212044E-8	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999795714364	WITHOUT_CLASSIFICATION	2.042856364648792E-8	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9957760404003333	WITHOUT_CLASSIFICATION	0.004223959599666774	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999984608713596	WITHOUT_CLASSIFICATION	1.5391286403614715E-6	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998181582899284	WITHOUT_CLASSIFICATION	1.818417100716163E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999569693141561	WITHOUT_CLASSIFICATION	4.303068584391222E-5	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9697544291362037	WITHOUT_CLASSIFICATION	0.030245570863796277	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999949349110611	WITHOUT_CLASSIFICATION	5.065088938891098E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998862404968262	WITHOUT_CLASSIFICATION	1.1375950317379003E-4	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999407994754	WITHOUT_CLASSIFICATION	5.9200524448021086E-8	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999993980261096	WITHOUT_CLASSIFICATION	6.019738903530754E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999751755838063	WITHOUT_CLASSIFICATION	2.4824416193726782E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998863376853	WITHOUT_CLASSIFICATION	1.1366231459767388E-7	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999560513483	WITHOUT_CLASSIFICATION	4.3948651717399945E-8	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999975655313578	WITHOUT_CLASSIFICATION	2.4344686423110217E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998863376853	WITHOUT_CLASSIFICATION	1.1366231459767388E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999751755838063	WITHOUT_CLASSIFICATION	2.4824416193726782E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999560513483	WITHOUT_CLASSIFICATION	4.3948651717399945E-8	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999998062426211	WITHOUT_CLASSIFICATION	1.9375737884556448E-7	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999999860520572	WITHOUT_CLASSIFICATION	1.3947942943570409E-8	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999974514577258	WITHOUT_CLASSIFICATION	2.5485422741298058E-6	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999798495519691	WITHOUT_CLASSIFICATION	2.0150448030969243E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999652354371	WITHOUT_CLASSIFICATION	3.4764562888052255E-7	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8075897894594956	DEFECT	0.19241021054050444	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999766508956093	WITHOUT_CLASSIFICATION	2.334910439069954E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999833973457044	WITHOUT_CLASSIFICATION	1.6602654295547865E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999983471353	WITHOUT_CLASSIFICATION	1.6528646652554716E-9	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999917980775747	WITHOUT_CLASSIFICATION	8.201922425302018E-5	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999944276936173	WITHOUT_CLASSIFICATION	5.572306382610887E-6	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999989010785725	WITHOUT_CLASSIFICATION	1.0989214275663134E-6	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997707571215773	WITHOUT_CLASSIFICATION	2.2924287842276958E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999814789421111	WITHOUT_CLASSIFICATION	1.8521057888976816E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999997573036091	WITHOUT_CLASSIFICATION	2.4269639086368297E-7	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999994007636336	WITHOUT_CLASSIFICATION	5.992363665002872E-7	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999994152833699	WITHOUT_CLASSIFICATION	5.84716630208373E-7	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999598793028	WITHOUT_CLASSIFICATION	4.012069715567139E-8	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999996455530819	WITHOUT_CLASSIFICATION	3.544469181008074E-7	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999974434024	WITHOUT_CLASSIFICATION	2.556597563886609E-9	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999923318458653	WITHOUT_CLASSIFICATION	7.668154134684245E-6	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999995997011	WITHOUT_CLASSIFICATION	4.002989585263037E-10	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999615160259332	WITHOUT_CLASSIFICATION	3.8483974066700655E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999981317039	WITHOUT_CLASSIFICATION	1.8682959877144197E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999989471604	WITHOUT_CLASSIFICATION	1.0528396551395215E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999989471604	WITHOUT_CLASSIFICATION	1.0528396551395215E-9	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999968393953	WITHOUT_CLASSIFICATION	3.160604753446689E-9	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999968393953	WITHOUT_CLASSIFICATION	3.160604753446689E-9	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999979846981598	WITHOUT_CLASSIFICATION	2.0153018402113477E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999994152833699	WITHOUT_CLASSIFICATION	5.84716630208373E-7	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999999992485831	WITHOUT_CLASSIFICATION	7.514168977171482E-9	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999997809028	WITHOUT_CLASSIFICATION	2.19097122812508E-10	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999709763008	WITHOUT_CLASSIFICATION	2.902369912079242E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999709763008	WITHOUT_CLASSIFICATION	2.902369912079242E-8	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999990153725216	WITHOUT_CLASSIFICATION	9.84627478411905E-7	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999998753620888	WITHOUT_CLASSIFICATION	1.246379112348396E-7	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999978164109	WITHOUT_CLASSIFICATION	2.183589199955284E-9	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.999999917151074	WITHOUT_CLASSIFICATION	8.284892602075972E-8	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9991341312412005	WITHOUT_CLASSIFICATION	8.658687587994794E-4	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9850250535670846	WITHOUT_CLASSIFICATION	0.014974946432915448	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999848203404815	WITHOUT_CLASSIFICATION	1.517965951854447E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999950170057453	WITHOUT_CLASSIFICATION	4.982994254672737E-6	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999862218389489	WITHOUT_CLASSIFICATION	1.3778161051069014E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999987206032284	WITHOUT_CLASSIFICATION	1.2793967717127844E-6	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999975285714662	WITHOUT_CLASSIFICATION	2.4714285338929377E-6	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999979367514709	WITHOUT_CLASSIFICATION	2.0632485290308817E-6	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999996556999935	WITHOUT_CLASSIFICATION	3.4430000642958753E-7	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999995466178966	WITHOUT_CLASSIFICATION	4.533821035124084E-7	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999999285340638	WITHOUT_CLASSIFICATION	7.146593614530466E-8	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999997869261537	WITHOUT_CLASSIFICATION	2.1307384625032295E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986709806453	WITHOUT_CLASSIFICATION	1.3290193546628846E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999996486502878	WITHOUT_CLASSIFICATION	3.51349712227275E-7	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999997506218118	WITHOUT_CLASSIFICATION	2.4937818819241875E-7	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999979250710517	WITHOUT_CLASSIFICATION	2.0749289483274665E-6	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999995412330587	WITHOUT_CLASSIFICATION	4.5876694138529495E-7	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999961733703324	WITHOUT_CLASSIFICATION	3.826629667581612E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999996546098594	WITHOUT_CLASSIFICATION	3.4539014068873104E-7	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999998352643181	WITHOUT_CLASSIFICATION	1.6473568187666484E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999919590785863	WITHOUT_CLASSIFICATION	8.040921413756718E-6	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999914320743	WITHOUT_CLASSIFICATION	8.567925691804922E-9	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951391197575	WITHOUT_CLASSIFICATION	4.860880242613747E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999802466900312	WITHOUT_CLASSIFICATION	1.975330996884791E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999983904340743	WITHOUT_CLASSIFICATION	1.6095659256724908E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9998463095827761	WITHOUT_CLASSIFICATION	1.5369041722382003E-4	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987358882755	WITHOUT_CLASSIFICATION	1.2641117245470137E-6	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935840495514	WITHOUT_CLASSIFICATION	6.415950448672624E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999977285160446	WITHOUT_CLASSIFICATION	2.2714839553473556E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999977285160446	WITHOUT_CLASSIFICATION	2.2714839553473556E-6	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999910571202778	WITHOUT_CLASSIFICATION	8.942879722119494E-6	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999971906395836	WITHOUT_CLASSIFICATION	2.809360416355791E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999231770615277	WITHOUT_CLASSIFICATION	7.682293847235333E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999231770615277	WITHOUT_CLASSIFICATION	7.682293847235333E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999840984425025	WITHOUT_CLASSIFICATION	1.5901557497572584E-5	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999851269096146	WITHOUT_CLASSIFICATION	1.48730903853497E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999180726045735	WITHOUT_CLASSIFICATION	8.19273954264483E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999992078625534	WITHOUT_CLASSIFICATION	7.92137446652548E-7	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999990996011794	WITHOUT_CLASSIFICATION	9.003988205302257E-7	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999973575808636	WITHOUT_CLASSIFICATION	2.642419136516452E-6	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999998400147433	WITHOUT_CLASSIFICATION	1.5998525671115308E-7	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999988854689962	WITHOUT_CLASSIFICATION	1.114531003818765E-6	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999812464885556	WITHOUT_CLASSIFICATION	1.8753511444469026E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999812464885556	WITHOUT_CLASSIFICATION	1.8753511444469026E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999990789444199	WITHOUT_CLASSIFICATION	9.210555801616249E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998629600809	WITHOUT_CLASSIFICATION	1.370399190247387E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998629600809	WITHOUT_CLASSIFICATION	1.370399190247387E-7	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999954599363386	WITHOUT_CLASSIFICATION	4.540063661338873E-6	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999190823231	WITHOUT_CLASSIFICATION	8.091767684215492E-8	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9980950533812984	WITHOUT_CLASSIFICATION	0.0019049466187016056	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999998730402465	WITHOUT_CLASSIFICATION	1.2695975359386986E-7	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998883661645	WITHOUT_CLASSIFICATION	1.1163383543924113E-7	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998936496749	WITHOUT_CLASSIFICATION	1.0635032502899808E-7	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999999717531767	WITHOUT_CLASSIFICATION	2.824682336834514E-8	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999996300569726	WITHOUT_CLASSIFICATION	3.6994302743500606E-7	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999831695112	WITHOUT_CLASSIFICATION	1.6830488699862937E-8	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.990092590021557	WITHOUT_CLASSIFICATION	0.009907409978442944	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999942218271106	WITHOUT_CLASSIFICATION	5.778172889441794E-6	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999977087882196	WITHOUT_CLASSIFICATION	2.291211780366018E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999991498255924	WITHOUT_CLASSIFICATION	8.501744075999353E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999991498255924	WITHOUT_CLASSIFICATION	8.501744075999353E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999991498255924	WITHOUT_CLASSIFICATION	8.501744075999353E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999991498255924	WITHOUT_CLASSIFICATION	8.501744075999353E-6	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999944720664631	WITHOUT_CLASSIFICATION	5.527933536868034E-6	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9859103808633636	WITHOUT_CLASSIFICATION	0.014089619136636373	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999997003371322	WITHOUT_CLASSIFICATION	2.9966286780542765E-6	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.999994056749495	WITHOUT_CLASSIFICATION	5.943250504994782E-6	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999529250574	WITHOUT_CLASSIFICATION	4.70749426615792E-8	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999045160180989	WITHOUT_CLASSIFICATION	9.548398190108016E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867802279463	WITHOUT_CLASSIFICATION	1.3219772053745321E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999998173041201	WITHOUT_CLASSIFICATION	1.8269587987944063E-7	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999979612938072	WITHOUT_CLASSIFICATION	2.038706192762181E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867802279463	WITHOUT_CLASSIFICATION	1.3219772053745321E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867802279463	WITHOUT_CLASSIFICATION	1.3219772053745321E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999960666688	WITHOUT_CLASSIFICATION	3.933331198767725E-9	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998333901443	WITHOUT_CLASSIFICATION	1.666098557135858E-7	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999995351047274	WITHOUT_CLASSIFICATION	4.6489527255342336E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999923770388413	WITHOUT_CLASSIFICATION	7.622961158746018E-6	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999903435841007	WITHOUT_CLASSIFICATION	9.656415899372657E-6	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999993133439525	WITHOUT_CLASSIFICATION	6.866560475173638E-7	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999994067089003	WITHOUT_CLASSIFICATION	5.932910997087303E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999923770388413	WITHOUT_CLASSIFICATION	7.622961158746018E-6	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999431838416736	WITHOUT_CLASSIFICATION	5.681615832635205E-5	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999599457033608	WITHOUT_CLASSIFICATION	4.005429663927874E-5	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999979014716077	WITHOUT_CLASSIFICATION	2.098528392268248E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999977893364711	WITHOUT_CLASSIFICATION	2.2106635289471875E-6	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999531427299587	WITHOUT_CLASSIFICATION	4.685727004121529E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999389644664306	WITHOUT_CLASSIFICATION	6.103553356951046E-5	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999998863744622	WITHOUT_CLASSIFICATION	1.136255376914818E-7	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999833744623677	WITHOUT_CLASSIFICATION	1.6625537632217826E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999804742478	WITHOUT_CLASSIFICATION	1.9525752186535756E-8	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999998461830478	WITHOUT_CLASSIFICATION	1.538169520926923E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999905681047	WITHOUT_CLASSIFICATION	9.431895251545172E-9	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998662484502	WITHOUT_CLASSIFICATION	1.3375154987202672E-7	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9964310766105652	WITHOUT_CLASSIFICATION	0.00356892338943476	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999973455351576	WITHOUT_CLASSIFICATION	2.6544648423432532E-6	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999994862054168	WITHOUT_CLASSIFICATION	5.137945832280364E-7	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998566832546767	WITHOUT_CLASSIFICATION	1.4331674532331998E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999931194693	WITHOUT_CLASSIFICATION	6.8805307199298554E-9	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999601393679408	WITHOUT_CLASSIFICATION	3.986063205924443E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999534880244	WITHOUT_CLASSIFICATION	4.651197552415816E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999601393679408	WITHOUT_CLASSIFICATION	3.986063205924443E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999464192474	WITHOUT_CLASSIFICATION	5.3580752734940275E-8	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999992152449251	WITHOUT_CLASSIFICATION	7.847550748681149E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.999947953881278	WITHOUT_CLASSIFICATION	5.204611872196107E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999996595029418	WITHOUT_CLASSIFICATION	3.404970582340549E-7	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999931194693	WITHOUT_CLASSIFICATION	6.8805307199298554E-9	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999534880244	WITHOUT_CLASSIFICATION	4.651197552415816E-8	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999464192474	WITHOUT_CLASSIFICATION	5.3580752734940275E-8	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999065419263	WITHOUT_CLASSIFICATION	9.345807381175405E-8	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999625037959278	WITHOUT_CLASSIFICATION	3.7496204072224026E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999953466547844	WITHOUT_CLASSIFICATION	4.653345215552287E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999870854283955	WITHOUT_CLASSIFICATION	1.2914571604475121E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9994946265626097	WITHOUT_CLASSIFICATION	5.053734373904036E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999999997080733	WITHOUT_CLASSIFICATION	2.919266987778169E-9	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986709806453	WITHOUT_CLASSIFICATION	1.3290193546628846E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999992152449251	WITHOUT_CLASSIFICATION	7.847550748681149E-7	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999992134058757	WITHOUT_CLASSIFICATION	7.86594124190155E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9978269407061464	WITHOUT_CLASSIFICATION	0.0021730592938536348	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999282960584	WITHOUT_CLASSIFICATION	7.170394163691272E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986709806453	WITHOUT_CLASSIFICATION	1.3290193546628846E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951391197575	WITHOUT_CLASSIFICATION	4.860880242613747E-6	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999352918744	WITHOUT_CLASSIFICATION	6.470812563296811E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986709806453	WITHOUT_CLASSIFICATION	1.3290193546628846E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999988388253	WITHOUT_CLASSIFICATION	1.1611746722284888E-9	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996589290463	WITHOUT_CLASSIFICATION	3.410709537758862E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951391197575	WITHOUT_CLASSIFICATION	4.860880242613747E-6	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9982895189418162	WITHOUT_CLASSIFICATION	0.001710481058183787	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999682285492	WITHOUT_CLASSIFICATION	3.1771450850516474E-8	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998813983377	WITHOUT_CLASSIFICATION	1.1860166223545466E-7	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999988321652946	WITHOUT_CLASSIFICATION	1.1678347054236656E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999393834265754	WITHOUT_CLASSIFICATION	6.061657342459143E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999902045306694	WITHOUT_CLASSIFICATION	9.795469330572373E-6	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999998959615247	WITHOUT_CLASSIFICATION	1.0403847536956946E-7	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999963714780503	WITHOUT_CLASSIFICATION	3.6285219495491746E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999677059363018	WITHOUT_CLASSIFICATION	3.2294063698303366E-5	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999991728601771	WITHOUT_CLASSIFICATION	8.271398228967568E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9980950533812984	WITHOUT_CLASSIFICATION	0.0019049466187016056	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999934101486715	WITHOUT_CLASSIFICATION	6.589851328584717E-6	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9951209470036089	WITHOUT_CLASSIFICATION	0.004879052996391184	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999992782937225	WITHOUT_CLASSIFICATION	7.217062774597009E-7	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999869908110648	WITHOUT_CLASSIFICATION	1.3009188935196407E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999997169213827	WITHOUT_CLASSIFICATION	2.8307861742534594E-7	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999039814609	WITHOUT_CLASSIFICATION	9.601853909721206E-8	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998241125007629	WITHOUT_CLASSIFICATION	1.7588749923706085E-4	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9997257834242972	WITHOUT_CLASSIFICATION	2.742165757028761E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999938400846	WITHOUT_CLASSIFICATION	6.1599153795446835E-9	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999953233522793	WITHOUT_CLASSIFICATION	4.676647720666057E-6	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9979630729584329	WITHOUT_CLASSIFICATION	0.002036927041567036	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9985204593386647	WITHOUT_CLASSIFICATION	0.00147954066133525	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9995437548689086	WITHOUT_CLASSIFICATION	4.562451310913567E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999730023776	WITHOUT_CLASSIFICATION	2.699762243226576E-8	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999999126118982	WITHOUT_CLASSIFICATION	8.738810184542943E-8	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999518496625326	WITHOUT_CLASSIFICATION	4.815033746751623E-5	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999977483866802	WITHOUT_CLASSIFICATION	2.2516133197327567E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999990728293875	WITHOUT_CLASSIFICATION	9.271706124688579E-7	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999957213625751	WITHOUT_CLASSIFICATION	4.278637424953352E-6	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999984276737044	WITHOUT_CLASSIFICATION	1.5723262956101464E-6	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9996480478954712	WITHOUT_CLASSIFICATION	3.519521045288241E-4	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9997857039042606	WITHOUT_CLASSIFICATION	2.1429609573952386E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999030489843	WITHOUT_CLASSIFICATION	9.695101564447447E-8	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.99999061023378	WITHOUT_CLASSIFICATION	9.38976622003322E-6	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999969791251148	WITHOUT_CLASSIFICATION	3.0208748852593683E-6	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999885470287991	WITHOUT_CLASSIFICATION	1.145297120089028E-5	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999925806813224	WITHOUT_CLASSIFICATION	7.419318677564071E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9989488758680288	WITHOUT_CLASSIFICATION	0.0010511241319711162	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995932646437	WITHOUT_CLASSIFICATION	4.067353562869334E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951391197575	WITHOUT_CLASSIFICATION	4.860880242613747E-6	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999902921844844	WITHOUT_CLASSIFICATION	9.707815515621066E-6	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999903414782463	WITHOUT_CLASSIFICATION	9.658521753703432E-6	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999903414782463	WITHOUT_CLASSIFICATION	9.658521753703432E-6	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9996957096222808	WITHOUT_CLASSIFICATION	3.042903777190928E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999902045306694	WITHOUT_CLASSIFICATION	9.795469330572373E-6	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.99993887923136	WITHOUT_CLASSIFICATION	6.112076863992998E-5	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999891148756	WITHOUT_CLASSIFICATION	1.0885124427469122E-8	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999435058557998	WITHOUT_CLASSIFICATION	5.6494144200218374E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999900627889331	WITHOUT_CLASSIFICATION	9.937211066958072E-6	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999930222946936	WITHOUT_CLASSIFICATION	6.977705306347886E-6	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9999781752091781	WITHOUT_CLASSIFICATION	2.1824790821896937E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999922577574565	WITHOUT_CLASSIFICATION	7.742242543514393E-6	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999961146127	WITHOUT_CLASSIFICATION	3.885387390738324E-9	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999998542059834	WITHOUT_CLASSIFICATION	1.4579401660505497E-6	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999993862950552	WITHOUT_CLASSIFICATION	6.137049446366488E-7	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998232348323	WITHOUT_CLASSIFICATION	1.767651677359682E-7	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999650088685	WITHOUT_CLASSIFICATION	3.499113157584747E-8	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999250063388	WITHOUT_CLASSIFICATION	7.499366120604991E-8	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999059709374	WITHOUT_CLASSIFICATION	9.402906262478413E-8	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997242180061	WITHOUT_CLASSIFICATION	2.7578199390661973E-7	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999893257536	WITHOUT_CLASSIFICATION	1.0674246238358402E-8	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999966922384	WITHOUT_CLASSIFICATION	3.3077616741559067E-9	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999998341252357	WITHOUT_CLASSIFICATION	1.658747643497886E-7	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999999860333544	WITHOUT_CLASSIFICATION	1.3966645597036887E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999914268986918	WITHOUT_CLASSIFICATION	8.573101308133568E-6	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999990705674027	WITHOUT_CLASSIFICATION	9.294325973965559E-7	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999857344673881	WITHOUT_CLASSIFICATION	1.4265532611886449E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9989488758680288	WITHOUT_CLASSIFICATION	0.0010511241319711162	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999987285948504	WITHOUT_CLASSIFICATION	1.271405149619275E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999242882209115	WITHOUT_CLASSIFICATION	7.57117790885268E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999979475539696	WITHOUT_CLASSIFICATION	2.0524460303268822E-6	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999854051988315	WITHOUT_CLASSIFICATION	1.459480116851156E-5	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9987198355631929	WITHOUT_CLASSIFICATION	0.0012801644368070591	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999984934348577	WITHOUT_CLASSIFICATION	1.5065651423617401E-6	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999980630708643	WITHOUT_CLASSIFICATION	1.936929135825268E-6	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999999696357582	WITHOUT_CLASSIFICATION	3.03642417101341E-8	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998673753983	WITHOUT_CLASSIFICATION	1.3262460176497768E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999995592636474	WITHOUT_CLASSIFICATION	4.407363526414749E-7	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999175238442	WITHOUT_CLASSIFICATION	8.247615579695511E-8	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999970209842007	WITHOUT_CLASSIFICATION	2.979015799264581E-6	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9991590462528337	WITHOUT_CLASSIFICATION	8.409537471663779E-4	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9934821222487328	WITHOUT_CLASSIFICATION	0.006517877751267193	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999975950121	WITHOUT_CLASSIFICATION	2.4049879807148305E-9	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999975950121	WITHOUT_CLASSIFICATION	2.4049879807148305E-9	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999823362808874	WITHOUT_CLASSIFICATION	1.7663719112543716E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999962470751	WITHOUT_CLASSIFICATION	3.752924930449526E-9	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9990334490561646	WITHOUT_CLASSIFICATION	9.665509438352686E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9990334490561646	WITHOUT_CLASSIFICATION	9.665509438352686E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999922619276	WITHOUT_CLASSIFICATION	7.738072422235392E-9	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999487117280607	WITHOUT_CLASSIFICATION	5.1288271939454354E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999092677433281	WITHOUT_CLASSIFICATION	9.073225667184658E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999997602961	WITHOUT_CLASSIFICATION	2.3970393420990335E-10	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999995117480719	WITHOUT_CLASSIFICATION	4.88251928202635E-7	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999966636205313	WITHOUT_CLASSIFICATION	3.336379468644461E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999997177061777	WITHOUT_CLASSIFICATION	2.822938223203694E-7	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999997177061777	WITHOUT_CLASSIFICATION	2.822938223203694E-7	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999989229069106	WITHOUT_CLASSIFICATION	1.0770930893534904E-6	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999995230270942	WITHOUT_CLASSIFICATION	4.769729058491511E-7	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999994238197832	WITHOUT_CLASSIFICATION	5.7618021675408E-7	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999931435501974	WITHOUT_CLASSIFICATION	6.856449802617262E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999931435501974	WITHOUT_CLASSIFICATION	6.856449802617262E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999993179380501	WITHOUT_CLASSIFICATION	6.820619499605155E-7	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.99999904480018	WITHOUT_CLASSIFICATION	9.551998200094893E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998395084350776	WITHOUT_CLASSIFICATION	1.6049156492231747E-4	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999999858504314	WITHOUT_CLASSIFICATION	1.4149568764360006E-8	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999929137534616	WITHOUT_CLASSIFICATION	7.086246538454451E-6	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999675903982	WITHOUT_CLASSIFICATION	3.240960180178999E-8	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999820993131491	WITHOUT_CLASSIFICATION	1.790068685083947E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999997272710559	WITHOUT_CLASSIFICATION	2.7272894402402213E-7	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999962579504	WITHOUT_CLASSIFICATION	3.742049569147831E-9	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999906697593519	WITHOUT_CLASSIFICATION	9.33024064798368E-6	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999988229945196	WITHOUT_CLASSIFICATION	1.177005480409734E-6	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9996647685814077	WITHOUT_CLASSIFICATION	3.3523141859232683E-4	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999998478850863	WITHOUT_CLASSIFICATION	1.5211491357626704E-7	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999841107324084	WITHOUT_CLASSIFICATION	1.5889267591571436E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999994800312256	WITHOUT_CLASSIFICATION	5.199687744540428E-7	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999811597797313	WITHOUT_CLASSIFICATION	1.8840220268570184E-5	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999999969495195	WITHOUT_CLASSIFICATION	3.0504804972472906E-8	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999924573654131	WITHOUT_CLASSIFICATION	7.54263458691883E-6	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.999989235085666	WITHOUT_CLASSIFICATION	1.0764914334090688E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999985505835648	WITHOUT_CLASSIFICATION	1.4494164351796358E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999963064577213	WITHOUT_CLASSIFICATION	3.693542278586758E-6	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999913668643082	WITHOUT_CLASSIFICATION	8.633135691771328E-6	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999970956361381	WITHOUT_CLASSIFICATION	2.9043638618799006E-6	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999889845628601	WITHOUT_CLASSIFICATION	1.1015437139959547E-5	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.999988397492653	WITHOUT_CLASSIFICATION	1.1602507347091983E-5	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999974330003403	WITHOUT_CLASSIFICATION	2.5669996597097593E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999997268650219	WITHOUT_CLASSIFICATION	2.7313497802021435E-7	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999818202679583	WITHOUT_CLASSIFICATION	1.8179732041644408E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999998384402	WITHOUT_CLASSIFICATION	1.6155980743339488E-10	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999751174456	WITHOUT_CLASSIFICATION	2.488255439831714E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9828384052593935	WITHOUT_CLASSIFICATION	0.017161594740606478	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999760419309	WITHOUT_CLASSIFICATION	2.3958068966731137E-8	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999723979943	WITHOUT_CLASSIFICATION	2.760200570151931E-8	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999918086779526	WITHOUT_CLASSIFICATION	8.191322047480277E-6	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999996788518816	WITHOUT_CLASSIFICATION	3.211481184796109E-7	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999799800738253	WITHOUT_CLASSIFICATION	2.001992617471945E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999851680537056	WITHOUT_CLASSIFICATION	1.4831946294339904E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999997433926805	WITHOUT_CLASSIFICATION	2.56607319466617E-7	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999997834290806	WITHOUT_CLASSIFICATION	2.165709192962114E-7	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996911617749	WITHOUT_CLASSIFICATION	3.0883822514530524E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999459511216737	WITHOUT_CLASSIFICATION	5.40488783262857E-5	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.997363599285932	WITHOUT_CLASSIFICATION	0.002636400714067902	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999984771923295	WITHOUT_CLASSIFICATION	1.5228076704185234E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999998775403953	WITHOUT_CLASSIFICATION	1.224596047711333E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999994225341499	WITHOUT_CLASSIFICATION	5.774658500663409E-7	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999982123214939	WITHOUT_CLASSIFICATION	1.7876785062130576E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9996151134565839	WITHOUT_CLASSIFICATION	3.8488654341613504E-4	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999992333154112	WITHOUT_CLASSIFICATION	7.6668458885824E-7	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999968125348233	WITHOUT_CLASSIFICATION	3.1874651767550798E-6	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999373958464	WITHOUT_CLASSIFICATION	6.260415365101865E-8	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998746944304857	WITHOUT_CLASSIFICATION	1.253055695142221E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999998942873348	WITHOUT_CLASSIFICATION	1.0571266506822966E-7	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999998146183835	WITHOUT_CLASSIFICATION	1.8538161648215783E-7	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999995706674	WITHOUT_CLASSIFICATION	4.2933267752565603E-10	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999194314356419	WITHOUT_CLASSIFICATION	8.056856435820388E-5	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999996301060473	WITHOUT_CLASSIFICATION	3.6989395270648914E-7	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9993117442401627	WITHOUT_CLASSIFICATION	6.882557598373702E-4	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999967199186205	WITHOUT_CLASSIFICATION	3.2800813795009756E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998562814922675	WITHOUT_CLASSIFICATION	1.4371850773262605E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999990843167894	WITHOUT_CLASSIFICATION	9.156832106239438E-7	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999964494036441	WITHOUT_CLASSIFICATION	3.5505963560421452E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999964494036441	WITHOUT_CLASSIFICATION	3.5505963560421452E-6	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999903922363	WITHOUT_CLASSIFICATION	9.607763708362104E-9	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999964204429574	WITHOUT_CLASSIFICATION	3.5795570426188383E-6	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999999727868	WITHOUT_CLASSIFICATION	2.7213237532849973E-11	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999986105892	WITHOUT_CLASSIFICATION	1.3894107960071416E-9	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999628360367457	WITHOUT_CLASSIFICATION	3.716396325435501E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999995501439366	WITHOUT_CLASSIFICATION	4.498560633095019E-7	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999777588304	WITHOUT_CLASSIFICATION	2.2241169565250098E-8	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999980173047	WITHOUT_CLASSIFICATION	1.9826953481724937E-9	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999617778242484	WITHOUT_CLASSIFICATION	3.822217575157323E-5	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.999977561803669	WITHOUT_CLASSIFICATION	2.243819633089754E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999952270536427	WITHOUT_CLASSIFICATION	4.772946357250312E-6	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999778337263457	WITHOUT_CLASSIFICATION	2.2166273654328115E-5	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999981072970062	WITHOUT_CLASSIFICATION	1.8927029938988752E-6	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999999999900036	WITHOUT_CLASSIFICATION	9.996400579464676E-11	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998900072047	WITHOUT_CLASSIFICATION	1.0999279529686598E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998900072047	WITHOUT_CLASSIFICATION	1.0999279529686598E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999998627750426	WITHOUT_CLASSIFICATION	1.3722495749758529E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995248333555751	WITHOUT_CLASSIFICATION	4.751666444249435E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999999990046612	WITHOUT_CLASSIFICATION	9.953388023901603E-9	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999998761166626	WITHOUT_CLASSIFICATION	1.2388333726244358E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999695478103	WITHOUT_CLASSIFICATION	3.0452189657353396E-8	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996777270316	WITHOUT_CLASSIFICATION	3.2227296837051636E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.999997266957767	WITHOUT_CLASSIFICATION	2.7330422329163052E-6	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9966895111587166	WITHOUT_CLASSIFICATION	0.003310488841283238	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999999999963724	WITHOUT_CLASSIFICATION	3.62759661234053E-11	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999124380581	WITHOUT_CLASSIFICATION	8.756194195646658E-8	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999927707067	WITHOUT_CLASSIFICATION	7.22929327959524E-9	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999187090419	WITHOUT_CLASSIFICATION	8.129095802250953E-8	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999959568277	WITHOUT_CLASSIFICATION	4.043172292997585E-8	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999647409267	WITHOUT_CLASSIFICATION	3.525907344088149E-8	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999983957636324	WITHOUT_CLASSIFICATION	1.6042363676530293E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999849417335338	WITHOUT_CLASSIFICATION	1.5058266466188127E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999728317184	WITHOUT_CLASSIFICATION	2.7168281571314213E-8	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999987773298958	WITHOUT_CLASSIFICATION	1.2226701041109697E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999968914258371	WITHOUT_CLASSIFICATION	3.1085741628242485E-6	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999999941915381	WITHOUT_CLASSIFICATION	5.808461891775464E-8	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999974986098689	WITHOUT_CLASSIFICATION	2.501390131067397E-6	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998400950109	WITHOUT_CLASSIFICATION	1.599049891737734E-7	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999605193832	WITHOUT_CLASSIFICATION	3.948061685545221E-8	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999997954385685	WITHOUT_CLASSIFICATION	2.0456143156390655E-7	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9968067183659504	WITHOUT_CLASSIFICATION	0.00319328163404958	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998913812701284	WITHOUT_CLASSIFICATION	1.0861872987158558E-4	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999924714806179	WITHOUT_CLASSIFICATION	7.5285193821712576E-6	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997418266208375	WITHOUT_CLASSIFICATION	2.581733791623958E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999999962595299	WITHOUT_CLASSIFICATION	3.740470101017456E-8	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999998460517069	WITHOUT_CLASSIFICATION	1.5394829306089058E-7	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999985819495446	WITHOUT_CLASSIFICATION	1.4180504554413548E-6	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.999916274000993	WITHOUT_CLASSIFICATION	8.372599900694488E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999987722331	WITHOUT_CLASSIFICATION	1.2277668555028503E-9	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999963529701825	WITHOUT_CLASSIFICATION	3.647029817476753E-6	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999202044018324	WITHOUT_CLASSIFICATION	7.97955981676649E-5	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998650101778	WITHOUT_CLASSIFICATION	1.3498982216243258E-7	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999620227914	WITHOUT_CLASSIFICATION	3.797720850342501E-8	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999867207775	WITHOUT_CLASSIFICATION	1.3279222497829173E-8	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999710661182518	WITHOUT_CLASSIFICATION	2.893388174813749E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999936257364332	WITHOUT_CLASSIFICATION	6.374263566794456E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999359964407927	WITHOUT_CLASSIFICATION	6.400355920739573E-5	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999359964407927	WITHOUT_CLASSIFICATION	6.400355920739573E-5	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999960856291	WITHOUT_CLASSIFICATION	3.914370868865105E-9	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999073431440416	WITHOUT_CLASSIFICATION	9.265685595840763E-5	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999863235734758	WITHOUT_CLASSIFICATION	1.3676426524067829E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999877813639284	WITHOUT_CLASSIFICATION	1.2218636071618059E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999990658818851	WITHOUT_CLASSIFICATION	9.341181147810695E-7	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999999617496289	WITHOUT_CLASSIFICATION	3.825037110277596E-7	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998122925824863	WITHOUT_CLASSIFICATION	1.8770741751363777E-4	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999892476132	WITHOUT_CLASSIFICATION	1.0752386794992851E-8	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9983378096728244	WITHOUT_CLASSIFICATION	0.001662190327175665	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997958696276	WITHOUT_CLASSIFICATION	2.0413037239086263E-7	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999391856367	WITHOUT_CLASSIFICATION	6.081436340985357E-8	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999806850693455	WITHOUT_CLASSIFICATION	1.9314930654547084E-5	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9998864164786444	WITHOUT_CLASSIFICATION	1.1358352135557307E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999859015607	WITHOUT_CLASSIFICATION	1.4098439174793113E-8	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999993202553363	WITHOUT_CLASSIFICATION	6.797446636396422E-7	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999998990669386	WITHOUT_CLASSIFICATION	1.0093306128916767E-7	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9989704398178829	WITHOUT_CLASSIFICATION	0.0010295601821170498	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999989966380405	WITHOUT_CLASSIFICATION	1.0033619594557094E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999953659688904	WITHOUT_CLASSIFICATION	4.634031109591179E-5	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999947465816148	WITHOUT_CLASSIFICATION	5.253418385257563E-6	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998924868597018	WITHOUT_CLASSIFICATION	1.0751314029821453E-4	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999988167073053	WITHOUT_CLASSIFICATION	1.183292694731579E-6	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999997082403	WITHOUT_CLASSIFICATION	2.917597491404949E-10	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997484675134047	WITHOUT_CLASSIFICATION	2.5153248659524766E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999688096871446	WITHOUT_CLASSIFICATION	3.1190312855331835E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999510673220271	WITHOUT_CLASSIFICATION	4.8932677972917903E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999996138179605	WITHOUT_CLASSIFICATION	3.861820394890632E-7	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999179518169	WITHOUT_CLASSIFICATION	8.204818309155345E-8	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999982923657524	WITHOUT_CLASSIFICATION	1.7076342475028504E-6	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999565459675501	WITHOUT_CLASSIFICATION	4.3454032449822574E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999998252169288	WITHOUT_CLASSIFICATION	1.7478307118342316E-7	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999990274506055	WITHOUT_CLASSIFICATION	9.725493944620076E-7	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999972078043	WITHOUT_CLASSIFICATION	2.7921956465879443E-9	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999994181289504	WITHOUT_CLASSIFICATION	5.818710495190216E-7	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999986446054	WITHOUT_CLASSIFICATION	1.3553945454627388E-9	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999979486989682	WITHOUT_CLASSIFICATION	2.0513010317738232E-6	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999696485684	WITHOUT_CLASSIFICATION	3.0351431611117007E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999933175916	WITHOUT_CLASSIFICATION	6.682408446966386E-9	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999859345929556	WITHOUT_CLASSIFICATION	1.4065407044311705E-5	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999951417800668	WITHOUT_CLASSIFICATION	4.8582199332634E-6	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999480267705	WITHOUT_CLASSIFICATION	5.197322949834833E-7	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998111745846991	WITHOUT_CLASSIFICATION	1.888254153007336E-4	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999956731785	WITHOUT_CLASSIFICATION	4.3268213593289435E-9	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999987340824	WITHOUT_CLASSIFICATION	1.2659175645742085E-9	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999811119787	WITHOUT_CLASSIFICATION	1.8888021224139953E-8	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9997925262607462	WITHOUT_CLASSIFICATION	2.0747373925390514E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999979655618364	WITHOUT_CLASSIFICATION	2.0344381635968296E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999981072970062	WITHOUT_CLASSIFICATION	1.8927029938988752E-6	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999065632942	WITHOUT_CLASSIFICATION	9.343670579482753E-8	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999998771545	WITHOUT_CLASSIFICATION	1.2284548942562294E-10	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999609955214115	WITHOUT_CLASSIFICATION	3.900447858852207E-5	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999143000265	WITHOUT_CLASSIFICATION	8.569997341871254E-8	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.99999999900758	WITHOUT_CLASSIFICATION	9.92420053002777E-10	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999980020783546	WITHOUT_CLASSIFICATION	1.997921645392941E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999764286258641	WITHOUT_CLASSIFICATION	2.3571374135877612E-5	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999835981678915	WITHOUT_CLASSIFICATION	1.6401832108569495E-5	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999814788963	WITHOUT_CLASSIFICATION	1.8521103672475167E-8	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999614492032972	WITHOUT_CLASSIFICATION	3.855079670274462E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999766545454418	WITHOUT_CLASSIFICATION	2.3345454558187404E-5	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999997744168428	WITHOUT_CLASSIFICATION	2.2558315720158372E-6	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999990325479583	WITHOUT_CLASSIFICATION	9.67452041700384E-7	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999983324925161	WITHOUT_CLASSIFICATION	1.6675074839196068E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999133460217	WITHOUT_CLASSIFICATION	8.665397830468862E-8	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999986011471123	WITHOUT_CLASSIFICATION	1.398852887762752E-6	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999957594854717	WITHOUT_CLASSIFICATION	4.240514528320462E-6	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999212865969	WITHOUT_CLASSIFICATION	7.871340318052471E-8	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999398995650436	WITHOUT_CLASSIFICATION	6.010043495640004E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999133460217	WITHOUT_CLASSIFICATION	8.665397830468862E-8	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9977274421179868	WITHOUT_CLASSIFICATION	0.00227255788201327	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999915987172646	WITHOUT_CLASSIFICATION	8.401282735444538E-6	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999994353899	WITHOUT_CLASSIFICATION	5.646102031999179E-10	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999996527110518	WITHOUT_CLASSIFICATION	3.4728894822471787E-7	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999972570700194	WITHOUT_CLASSIFICATION	2.7429299805995167E-6	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999967013718276	WITHOUT_CLASSIFICATION	3.2986281723245832E-6	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999141571	WITHOUT_CLASSIFICATION	8.584281868518233E-11	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999985819873043	WITHOUT_CLASSIFICATION	1.418012695676956E-6	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999082402591	WITHOUT_CLASSIFICATION	9.175974090400157E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9995730703757977	WITHOUT_CLASSIFICATION	4.2692962420239067E-4	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999992502914237	WITHOUT_CLASSIFICATION	7.497085764542535E-7	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999965165287505	WITHOUT_CLASSIFICATION	3.4834712493712774E-6	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999538216286099	WITHOUT_CLASSIFICATION	4.6178371390139193E-5	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999497280717	WITHOUT_CLASSIFICATION	5.0271928335508876E-8	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999976235974194	WITHOUT_CLASSIFICATION	2.3764025805471704E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999857344673881	WITHOUT_CLASSIFICATION	1.4265532611886449E-5	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998944437585	WITHOUT_CLASSIFICATION	1.0555624154890863E-7	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999215333758	WITHOUT_CLASSIFICATION	7.84666241707587E-8	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999893509991691	WITHOUT_CLASSIFICATION	1.0649000830916247E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998054538805498	WITHOUT_CLASSIFICATION	1.9454611945027856E-4	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999996901668	WITHOUT_CLASSIFICATION	3.0983310600728656E-10	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999990857828693	WITHOUT_CLASSIFICATION	9.142171308117161E-7	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999996280356673	WITHOUT_CLASSIFICATION	3.719643326533091E-7	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999806479	WITHOUT_CLASSIFICATION	1.935208606968204E-11	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999849323692	WITHOUT_CLASSIFICATION	1.506763080971766E-8	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999921618486615	WITHOUT_CLASSIFICATION	7.838151338576885E-6	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.7042125080089798	WITHOUT_CLASSIFICATION	0.2957874919910201	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999552669904	WITHOUT_CLASSIFICATION	4.4733009569572185E-8	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9988050890269693	WITHOUT_CLASSIFICATION	0.001194910973030702	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.5704721595376636	DEFECT	0.42952784046233644	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999475185841	WITHOUT_CLASSIFICATION	5.24814158905791E-8	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9996581925206676	WITHOUT_CLASSIFICATION	3.418074793324585E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9990534827164967	WITHOUT_CLASSIFICATION	9.465172835033109E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.99999947390075	WITHOUT_CLASSIFICATION	5.260992500372103E-7	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999981005597	WITHOUT_CLASSIFICATION	1.8994401960440574E-9	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999821033914	WITHOUT_CLASSIFICATION	1.7896608616132764E-8	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999997324077651	WITHOUT_CLASSIFICATION	2.67592234837615E-7	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999987768728917	WITHOUT_CLASSIFICATION	1.2231271082459126E-6	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999887093743	WITHOUT_CLASSIFICATION	1.1290625641090142E-8	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999891028140243	WITHOUT_CLASSIFICATION	1.0897185975610897E-5	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999995381869925	WITHOUT_CLASSIFICATION	4.6181300742971223E-7	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999995381869925	WITHOUT_CLASSIFICATION	4.6181300742971223E-7	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999855008868718	WITHOUT_CLASSIFICATION	1.4499113128191791E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994503308028	WITHOUT_CLASSIFICATION	5.496691971597607E-7	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999373110399	WITHOUT_CLASSIFICATION	6.268896009362315E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5246656784017598	WITHOUT_CLASSIFICATION	0.4753343215982401	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999992078625534	WITHOUT_CLASSIFICATION	7.92137446652548E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999992078625534	WITHOUT_CLASSIFICATION	7.92137446652548E-7	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999978213197822	WITHOUT_CLASSIFICATION	2.1786802178674927E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999436126921	WITHOUT_CLASSIFICATION	5.638730806223311E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878127474455	WITHOUT_CLASSIFICATION	1.2187252554527993E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998533335114236	WITHOUT_CLASSIFICATION	1.4666648857642213E-4	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999924512529	WITHOUT_CLASSIFICATION	7.548747132799785E-9	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999926541051132	WITHOUT_CLASSIFICATION	7.345894886915493E-6	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999983628003455	WITHOUT_CLASSIFICATION	1.6371996545306414E-6	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999961316169	WITHOUT_CLASSIFICATION	3.8683830614525695E-9	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999946229216211	WITHOUT_CLASSIFICATION	5.3770783789032995E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994823311379	WITHOUT_CLASSIFICATION	5.176688621632945E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994823311379	WITHOUT_CLASSIFICATION	5.176688621632945E-7	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999978701478642	WITHOUT_CLASSIFICATION	2.129852135693149E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999981317652427	WITHOUT_CLASSIFICATION	1.8682347573234678E-6	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999117386397	WITHOUT_CLASSIFICATION	8.826136039303848E-8	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999478424557523	WITHOUT_CLASSIFICATION	5.215754424774044E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951391197575	WITHOUT_CLASSIFICATION	4.860880242613747E-6	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999999482139685	WITHOUT_CLASSIFICATION	5.178603138337859E-8	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999741891464	WITHOUT_CLASSIFICATION	2.581085360472158E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951391197575	WITHOUT_CLASSIFICATION	4.860880242613747E-6	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999984208203	WITHOUT_CLASSIFICATION	1.579179584598739E-9	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999500738514188	WITHOUT_CLASSIFICATION	4.9926148581195994E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999613852086991	WITHOUT_CLASSIFICATION	3.861479130085896E-5	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999989714690901	WITHOUT_CLASSIFICATION	1.0285309098495152E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9995730703757977	WITHOUT_CLASSIFICATION	4.2692962420239067E-4	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999997482636902	WITHOUT_CLASSIFICATION	2.517363097618431E-7	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9993364771445109	WITHOUT_CLASSIFICATION	6.635228554891522E-4	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999924853198235	WITHOUT_CLASSIFICATION	7.514680176485581E-6	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999999030623736	WITHOUT_CLASSIFICATION	9.69376263320289E-8	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999992706584029	WITHOUT_CLASSIFICATION	7.293415970060014E-7	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999986228096012	WITHOUT_CLASSIFICATION	1.3771903988476852E-6	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999986313526614	WITHOUT_CLASSIFICATION	1.3686473385172295E-6	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999951530167	WITHOUT_CLASSIFICATION	4.846983156624711E-9	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999915926926575	WITHOUT_CLASSIFICATION	8.40730734248125E-6	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9985546500483433	WITHOUT_CLASSIFICATION	0.001445349951656575	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9985546500483433	WITHOUT_CLASSIFICATION	0.001445349951656575	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999923770388413	WITHOUT_CLASSIFICATION	7.622961158746018E-6	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999193265019	WITHOUT_CLASSIFICATION	8.067349816065177E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867802279463	WITHOUT_CLASSIFICATION	1.3219772053745321E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999982805323981	WITHOUT_CLASSIFICATION	1.7194676018010362E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999993290231278	WITHOUT_CLASSIFICATION	6.709768722131684E-7	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999888564679	WITHOUT_CLASSIFICATION	1.1143532153935826E-8	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999994862054168	WITHOUT_CLASSIFICATION	5.137945832280364E-7	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999970797691431	WITHOUT_CLASSIFICATION	2.920230856897007E-5	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999065419263	WITHOUT_CLASSIFICATION	9.345807381175405E-8	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999945037619478	WITHOUT_CLASSIFICATION	5.496238052269755E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986709806453	WITHOUT_CLASSIFICATION	1.3290193546628846E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.7132422233901015	DEFECT	0.2867577766098985	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999992926428048	WITHOUT_CLASSIFICATION	7.073571951299018E-7	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998838823845	WITHOUT_CLASSIFICATION	1.1611761556506839E-7	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999997797631501	WITHOUT_CLASSIFICATION	2.202368498160658E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999883129512	WITHOUT_CLASSIFICATION	1.1687048736833782E-8	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999985927209658	WITHOUT_CLASSIFICATION	1.4072790342145643E-6	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999983483776158	WITHOUT_CLASSIFICATION	1.6516223840992878E-6	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9996900954306102	WITHOUT_CLASSIFICATION	3.0990456938987954E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9976904821479261	WITHOUT_CLASSIFICATION	0.002309517852073866	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999981936036295	WITHOUT_CLASSIFICATION	1.8063963704585626E-6	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.999999442345956	WITHOUT_CLASSIFICATION	5.57654044088553E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998395084350776	WITHOUT_CLASSIFICATION	1.6049156492231747E-4	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999013511796	WITHOUT_CLASSIFICATION	9.864882040947596E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992623988916	WITHOUT_CLASSIFICATION	7.376011084459394E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992623988916	WITHOUT_CLASSIFICATION	7.376011084459394E-7	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999848635028837	WITHOUT_CLASSIFICATION	1.5136497116308804E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999938132437048	WITHOUT_CLASSIFICATION	6.186756295189456E-6	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999999931343	WITHOUT_CLASSIFICATION	6.865715700236145E-12	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999982597704659	WITHOUT_CLASSIFICATION	1.740229534060917E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526311054	WITHOUT_CLASSIFICATION	2.14736889446665E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999831951363787	WITHOUT_CLASSIFICATION	1.6804863621236716E-5	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9998894520642547	WITHOUT_CLASSIFICATION	1.105479357453518E-4	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999963196220897	WITHOUT_CLASSIFICATION	3.680377910421012E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9863674242450741	WITHOUT_CLASSIFICATION	0.013632575754925942	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9721955813748443	DEFECT	0.027804418625155685	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.5085139858134157	DEFECT	0.49148601418658433	WITHOUT_CLASSIFICATION
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.7778164018998576	DEFECT	0.22218359810014235	WITHOUT_CLASSIFICATION
/*	DEFECT	0.9934718488226272	WITHOUT_CLASSIFICATION	0.00652815117737287	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9974102876653812	WITHOUT_CLASSIFICATION	0.0025897123346188444	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9934269457766897	DEFECT	0.006573054223310286	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.9992546488101015	DEFECT	7.453511898985805E-4	WITHOUT_CLASSIFICATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9999989370255374	DEFECT	1.062974462619058E-6	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.5712676850123686	DEFECT	0.4287323149876314	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7708144383462114	DEFECT	0.22918556165378864	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7708144383462114	DEFECT	0.22918556165378864	WITHOUT_CLASSIFICATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9131206693851669	WITHOUT_CLASSIFICATION	0.08687933061483315	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999690688819137	WITHOUT_CLASSIFICATION	3.093111808631169E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9819781999990276	DEFECT	0.018021800000972407	WITHOUT_CLASSIFICATION
// this call is side-effecty	DEFECT	0.9999825679251444	WITHOUT_CLASSIFICATION	1.743207485550833E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9978664622760562	WITHOUT_CLASSIFICATION	0.002133537723943735	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.8046025223381419	WITHOUT_CLASSIFICATION	0.19539747766185822	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.706099271046092	DEFECT	0.2939007289539079	WITHOUT_CLASSIFICATION
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9939707492596404	WITHOUT_CLASSIFICATION	0.0060292507403597005	DEFECT
//TODO: is this completely correct?	DEFECT	0.5051226239477896	WITHOUT_CLASSIFICATION	0.4948773760522105	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999666698622502	WITHOUT_CLASSIFICATION	3.333013774976742E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.5314450065366962	WITHOUT_CLASSIFICATION	0.46855499346330387	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.999472005594892	WITHOUT_CLASSIFICATION	5.27994405108001E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9749887845582471	DEFECT	0.02501121544175289	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9999229605240574	DEFECT	7.703947594258624E-5	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.996746942394323	WITHOUT_CLASSIFICATION	0.0032530576056768365	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.8593765697734669	WITHOUT_CLASSIFICATION	0.1406234302265332	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.5383166710042765	DEFECT	0.46168332899572356	WITHOUT_CLASSIFICATION
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.8288600385365336	WITHOUT_CLASSIFICATION	0.17113996146346638	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.7503017299324474	WITHOUT_CLASSIFICATION	0.24969827006755255	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7708144383462114	DEFECT	0.22918556165378864	WITHOUT_CLASSIFICATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9999692871792415	DEFECT	3.071282075847653E-5	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9090725472325673	WITHOUT_CLASSIFICATION	0.09092745276743278	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.6348791475300819	WITHOUT_CLASSIFICATION	0.36512085246991816	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9388751449695404	WITHOUT_CLASSIFICATION	0.06112485503045959	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999925867862209	WITHOUT_CLASSIFICATION	7.413213779140331E-6	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9993991823052347	WITHOUT_CLASSIFICATION	6.008176947652913E-4	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9966004756235634	WITHOUT_CLASSIFICATION	0.0033995243764366125	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9957309724855686	DEFECT	0.004269027514431362	WITHOUT_CLASSIFICATION
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.8652391055976087	WITHOUT_CLASSIFICATION	0.13476089440239117	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9965573470086412	WITHOUT_CLASSIFICATION	0.0034426529913587755	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9999395418721637	WITHOUT_CLASSIFICATION	6.045812783619438E-5	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.6935923213843614	DEFECT	0.3064076786156385	WITHOUT_CLASSIFICATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.999280085036047	WITHOUT_CLASSIFICATION	7.199149639528297E-4	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.7133587378634332	WITHOUT_CLASSIFICATION	0.28664126213656665	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9730668366296785	WITHOUT_CLASSIFICATION	0.02693316337032146	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.5379040301719815	WITHOUT_CLASSIFICATION	0.4620959698280185	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.8355468175602649	DEFECT	0.16445318243973506	WITHOUT_CLASSIFICATION
