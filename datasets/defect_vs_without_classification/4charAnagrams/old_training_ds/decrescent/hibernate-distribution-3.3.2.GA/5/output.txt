//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999999982181945	WITHOUT_CLASSIFICATION	1.781805500282179E-8	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999956325656706	WITHOUT_CLASSIFICATION	4.36743432942806E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999956325656706	WITHOUT_CLASSIFICATION	4.36743432942806E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999956325656706	WITHOUT_CLASSIFICATION	4.36743432942806E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999956325656706	WITHOUT_CLASSIFICATION	4.36743432942806E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999956325656706	WITHOUT_CLASSIFICATION	4.36743432942806E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999956325656706	WITHOUT_CLASSIFICATION	4.36743432942806E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999956325656706	WITHOUT_CLASSIFICATION	4.36743432942806E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999964156066471	WITHOUT_CLASSIFICATION	3.5843933528724596E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999964156066471	WITHOUT_CLASSIFICATION	3.5843933528724596E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999921391944337	WITHOUT_CLASSIFICATION	7.860805566274005E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999997341481087	WITHOUT_CLASSIFICATION	2.6585189128144315E-7	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999999191616892	WITHOUT_CLASSIFICATION	8.08383108170202E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999946331906872	WITHOUT_CLASSIFICATION	5.366809312829003E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999946331906872	WITHOUT_CLASSIFICATION	5.366809312829003E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999745105368	WITHOUT_CLASSIFICATION	2.548946311856146E-8	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992186255562	WITHOUT_CLASSIFICATION	7.813744439085408E-7	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999999661816397	WITHOUT_CLASSIFICATION	3.381836029184623E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999980219294692	WITHOUT_CLASSIFICATION	1.9780705308522797E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999894883682477	WITHOUT_CLASSIFICATION	1.0511631752318397E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999894883682477	WITHOUT_CLASSIFICATION	1.0511631752318397E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998569520504357	WITHOUT_CLASSIFICATION	1.4304794956425775E-4	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999431876179	WITHOUT_CLASSIFICATION	5.681238201062124E-8	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9996689255789007	WITHOUT_CLASSIFICATION	3.3107442109917115E-4	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999851436317407	WITHOUT_CLASSIFICATION	1.4856368259305303E-5	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999723281955	WITHOUT_CLASSIFICATION	2.7671804542907728E-8	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999983874545725	WITHOUT_CLASSIFICATION	1.6125454274807682E-6	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999720168311599	WITHOUT_CLASSIFICATION	2.798316884001875E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999990320808445	WITHOUT_CLASSIFICATION	9.679191554400673E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999973891493736	WITHOUT_CLASSIFICATION	2.610850626393031E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9878208083202911	WITHOUT_CLASSIFICATION	0.012179191679708967	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999999516302967	WITHOUT_CLASSIFICATION	4.836970330714701E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999990910999504	WITHOUT_CLASSIFICATION	9.089000496509687E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999982154575777	WITHOUT_CLASSIFICATION	1.7845424223142403E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999990800973841	WITHOUT_CLASSIFICATION	9.199026158273786E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999990800973841	WITHOUT_CLASSIFICATION	9.199026158273786E-7	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999974604068262	WITHOUT_CLASSIFICATION	2.539593173783443E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999902711478103	WITHOUT_CLASSIFICATION	9.728852189709225E-6	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999999916754053	WITHOUT_CLASSIFICATION	8.324594696276746E-8	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999980377027896	WITHOUT_CLASSIFICATION	1.962297210430753E-6	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999867208811	WITHOUT_CLASSIFICATION	1.3279118930386472E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5258102552350031	WITHOUT_CLASSIFICATION	0.47418974476499687	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5258102552350031	WITHOUT_CLASSIFICATION	0.47418974476499687	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999993319014397	WITHOUT_CLASSIFICATION	6.68098560312263E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999763665716388	WITHOUT_CLASSIFICATION	2.363342836117301E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999873077458	WITHOUT_CLASSIFICATION	1.269225438461959E-8	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999992450927728	WITHOUT_CLASSIFICATION	7.549072270708967E-7	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999961082780634	WITHOUT_CLASSIFICATION	3.891721936616624E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998683197117	WITHOUT_CLASSIFICATION	1.3168028831448947E-7	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979577432198	WITHOUT_CLASSIFICATION	2.042256780208767E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999983516063976	WITHOUT_CLASSIFICATION	1.6483936023380873E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.999892508319702	WITHOUT_CLASSIFICATION	1.0749168029801694E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9097097665396495	WITHOUT_CLASSIFICATION	0.09029023346035052	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999873325425641	WITHOUT_CLASSIFICATION	1.2667457435927594E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.999892508319702	WITHOUT_CLASSIFICATION	1.0749168029801694E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999873325425641	WITHOUT_CLASSIFICATION	1.2667457435927594E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999992974099335	WITHOUT_CLASSIFICATION	7.025900665045495E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999998370545029	WITHOUT_CLASSIFICATION	1.6294549702775627E-7	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999986128795119	WITHOUT_CLASSIFICATION	1.38712048820231E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999960761501981	WITHOUT_CLASSIFICATION	3.9238498019109985E-6	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999062446935	WITHOUT_CLASSIFICATION	9.375530657735169E-8	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999953626323	WITHOUT_CLASSIFICATION	4.63736769284109E-9	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999844885978924	WITHOUT_CLASSIFICATION	1.5511402107565867E-5	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999261320274264	WITHOUT_CLASSIFICATION	7.386797257357283E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999989253923725	WITHOUT_CLASSIFICATION	1.0746076276523393E-6	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999999617428004	WITHOUT_CLASSIFICATION	3.8257199597842376E-8	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999972161255973	WITHOUT_CLASSIFICATION	2.7838744026274975E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999940087696579	WITHOUT_CLASSIFICATION	5.991230342067287E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999997886559805	WITHOUT_CLASSIFICATION	2.1134401941043432E-7	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999983075063299	WITHOUT_CLASSIFICATION	1.6924936700897542E-6	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999997467736677	WITHOUT_CLASSIFICATION	2.5322633234561E-7	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999972210736177	WITHOUT_CLASSIFICATION	2.778926382438946E-6	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999996203287878	WITHOUT_CLASSIFICATION	3.7967121219682633E-7	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999956738694972	WITHOUT_CLASSIFICATION	4.326130502838867E-6	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998667110974	WITHOUT_CLASSIFICATION	1.3328890266669112E-7	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999911928292	WITHOUT_CLASSIFICATION	8.807170808999792E-8	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999998484366336	WITHOUT_CLASSIFICATION	1.5156336639663548E-7	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999999782063	WITHOUT_CLASSIFICATION	2.179359521165952E-11	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999827823195	WITHOUT_CLASSIFICATION	1.721768050322218E-8	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999672512219288	WITHOUT_CLASSIFICATION	3.2748778071187265E-5	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999067185299902	WITHOUT_CLASSIFICATION	9.328147000968696E-5	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999990850686764	WITHOUT_CLASSIFICATION	9.149313235136924E-7	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999960335666	WITHOUT_CLASSIFICATION	3.966433422133528E-9	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999187212278	WITHOUT_CLASSIFICATION	8.127877209205617E-8	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999711411031	WITHOUT_CLASSIFICATION	2.885889689768425E-8	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999965553571	WITHOUT_CLASSIFICATION	3.444642948808545E-9	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999811337702	WITHOUT_CLASSIFICATION	1.8866229732705445E-8	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999983376019	WITHOUT_CLASSIFICATION	1.6623980648279443E-9	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999921578773404	WITHOUT_CLASSIFICATION	7.842122659641711E-6	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999948587457372	WITHOUT_CLASSIFICATION	5.141254262732221E-6	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999939899239026	WITHOUT_CLASSIFICATION	6.01007609732222E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999044902315	WITHOUT_CLASSIFICATION	9.550976847672876E-8	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999948587457372	WITHOUT_CLASSIFICATION	5.141254262732221E-6	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999191726581	WITHOUT_CLASSIFICATION	8.082734199425666E-8	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999942336780023	WITHOUT_CLASSIFICATION	5.76632199770833E-6	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999937289760269	WITHOUT_CLASSIFICATION	6.2710239731272474E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999991364543629	WITHOUT_CLASSIFICATION	8.635456371842495E-7	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999406882272	WITHOUT_CLASSIFICATION	5.931177278321477E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999925975501254	WITHOUT_CLASSIFICATION	7.402449874557463E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999925975501254	WITHOUT_CLASSIFICATION	7.402449874557463E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999890796617982	WITHOUT_CLASSIFICATION	1.0920338201888706E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999997246927501	WITHOUT_CLASSIFICATION	2.753072499363057E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999731337940897	WITHOUT_CLASSIFICATION	2.6866205910252062E-5	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999981271664	WITHOUT_CLASSIFICATION	1.8728335297891457E-9	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999988965039203	WITHOUT_CLASSIFICATION	1.1034960797821728E-6	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999936270917	WITHOUT_CLASSIFICATION	6.372908350474344E-9	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999992461436142	WITHOUT_CLASSIFICATION	7.538563857505681E-7	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999910161071139	WITHOUT_CLASSIFICATION	8.98389288609509E-6	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999555529855	WITHOUT_CLASSIFICATION	4.4447014577574587E-8	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999137802371	WITHOUT_CLASSIFICATION	8.621976286048059E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999744041536	WITHOUT_CLASSIFICATION	2.559584642552069E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999744041536	WITHOUT_CLASSIFICATION	2.559584642552069E-8	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999364520728096	WITHOUT_CLASSIFICATION	6.354792719041236E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999945700171208	WITHOUT_CLASSIFICATION	5.4299828792486465E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999996753898013	WITHOUT_CLASSIFICATION	3.246101987814539E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999744041536	WITHOUT_CLASSIFICATION	2.559584642552069E-8	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999364520728096	WITHOUT_CLASSIFICATION	6.354792719041236E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999364520728096	WITHOUT_CLASSIFICATION	6.354792719041236E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999824879265	WITHOUT_CLASSIFICATION	1.7512073538439887E-8	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999976044331884	WITHOUT_CLASSIFICATION	2.395566811558984E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999991988531964	WITHOUT_CLASSIFICATION	8.011468036061091E-6	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999700536747	WITHOUT_CLASSIFICATION	2.9946325308807874E-8	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999923232089902	WITHOUT_CLASSIFICATION	7.67679100966397E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999923232089902	WITHOUT_CLASSIFICATION	7.67679100966397E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999063912419	WITHOUT_CLASSIFICATION	9.360875802363448E-8	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999974027886039	WITHOUT_CLASSIFICATION	2.597211396102069E-6	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.999998485017392	WITHOUT_CLASSIFICATION	1.5149826080248883E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999973295771797	WITHOUT_CLASSIFICATION	2.6704228203401893E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999973295771797	WITHOUT_CLASSIFICATION	2.6704228203401893E-6	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999959179049291	WITHOUT_CLASSIFICATION	4.082095070759246E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998725590710582	WITHOUT_CLASSIFICATION	1.2744092894170276E-4	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999461814725211	WITHOUT_CLASSIFICATION	5.3818527478845445E-5	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999867497005	WITHOUT_CLASSIFICATION	1.3250299471929048E-8	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999893635481	WITHOUT_CLASSIFICATION	1.0636451956685543E-8	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999997407495564	WITHOUT_CLASSIFICATION	2.592504435629565E-7	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999606971937327	WITHOUT_CLASSIFICATION	3.930280626731123E-5	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999997253120751	WITHOUT_CLASSIFICATION	2.7468792486175085E-7	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999996831789637	WITHOUT_CLASSIFICATION	3.1682103626645756E-7	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999461814725211	WITHOUT_CLASSIFICATION	5.3818527478845445E-5	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999445560268224	WITHOUT_CLASSIFICATION	5.544397317765586E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999939269546321	WITHOUT_CLASSIFICATION	6.0730453678870265E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999939269546321	WITHOUT_CLASSIFICATION	6.0730453678870265E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999998487700918	WITHOUT_CLASSIFICATION	1.5122990818832022E-7	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999993227545867	WITHOUT_CLASSIFICATION	6.772454133816349E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999753783164568	WITHOUT_CLASSIFICATION	2.46216835432687E-5	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999191313759515	WITHOUT_CLASSIFICATION	8.086862404858948E-5	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999999951120438	WITHOUT_CLASSIFICATION	4.887956191590075E-8	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999703439117723	WITHOUT_CLASSIFICATION	2.9656088227677424E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9993962546760218	WITHOUT_CLASSIFICATION	6.037453239782532E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999989743155	WITHOUT_CLASSIFICATION	1.0256845061393383E-9	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998655932982	WITHOUT_CLASSIFICATION	1.3440670183741867E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998655932982	WITHOUT_CLASSIFICATION	1.3440670183741867E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999989358905479	WITHOUT_CLASSIFICATION	1.0641094521160519E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999999982181945	WITHOUT_CLASSIFICATION	1.781805500282179E-8	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999994239881435	WITHOUT_CLASSIFICATION	5.760118565124286E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999956325656706	WITHOUT_CLASSIFICATION	4.36743432942806E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999997804132699	WITHOUT_CLASSIFICATION	2.1958673028606449E-7	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999964156066471	WITHOUT_CLASSIFICATION	3.5843933528724596E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999976831287842	WITHOUT_CLASSIFICATION	2.3168712157657683E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999999586639766	WITHOUT_CLASSIFICATION	4.133602329969714E-8	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999999907740884	WITHOUT_CLASSIFICATION	9.225911595073179E-8	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999968018912511	WITHOUT_CLASSIFICATION	3.1981087490023884E-6	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999133148913233	WITHOUT_CLASSIFICATION	8.668510867667291E-5	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999947373255492	WITHOUT_CLASSIFICATION	5.262674450819335E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999799127198945	WITHOUT_CLASSIFICATION	2.008728010554339E-5	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999998362461329	WITHOUT_CLASSIFICATION	1.6375386709232427E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999997341481087	WITHOUT_CLASSIFICATION	2.6585189128144315E-7	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.999999451404282	WITHOUT_CLASSIFICATION	5.485957179537558E-7	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.999999451404282	WITHOUT_CLASSIFICATION	5.485957179537558E-7	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999995640338813	WITHOUT_CLASSIFICATION	4.359661186792254E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999892949514045	WITHOUT_CLASSIFICATION	1.0705048595432127E-5	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.999999050052014	WITHOUT_CLASSIFICATION	9.499479860710785E-7	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999996945259463	WITHOUT_CLASSIFICATION	3.054740536883644E-7	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.999998891975276	WITHOUT_CLASSIFICATION	1.1080247239261418E-6	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999193411439	WITHOUT_CLASSIFICATION	8.06588560889019E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999946331906872	WITHOUT_CLASSIFICATION	5.366809312829003E-6	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999984875731107	WITHOUT_CLASSIFICATION	1.512426889349061E-6	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999981751358368	WITHOUT_CLASSIFICATION	1.824864163251504E-6	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999977065704677	WITHOUT_CLASSIFICATION	2.2934295322526283E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999987786910717	WITHOUT_CLASSIFICATION	1.2213089282481881E-6	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999980602176873	WITHOUT_CLASSIFICATION	1.93978231272558E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999938396314645	WITHOUT_CLASSIFICATION	6.160368535468278E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999451429993	WITHOUT_CLASSIFICATION	5.485700077016108E-8	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998466505192	WITHOUT_CLASSIFICATION	1.533494807570228E-7	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999994721777092	WITHOUT_CLASSIFICATION	5.278222907798033E-7	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999849050153964	WITHOUT_CLASSIFICATION	1.5094984603529718E-5	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999950237304821	WITHOUT_CLASSIFICATION	4.97626951791902E-6	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999998699488846	WITHOUT_CLASSIFICATION	1.3005111548171446E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999956325656706	WITHOUT_CLASSIFICATION	4.36743432942806E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999956325656706	WITHOUT_CLASSIFICATION	4.36743432942806E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999964156066471	WITHOUT_CLASSIFICATION	3.5843933528724596E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999964156066471	WITHOUT_CLASSIFICATION	3.5843933528724596E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999799127198945	WITHOUT_CLASSIFICATION	2.008728010554339E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.999999451404282	WITHOUT_CLASSIFICATION	5.485957179537558E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999451429993	WITHOUT_CLASSIFICATION	5.485700077016108E-8	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999745105368	WITHOUT_CLASSIFICATION	2.548946311856146E-8	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999996849012055	WITHOUT_CLASSIFICATION	3.150987944679502E-7	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999289118930725	WITHOUT_CLASSIFICATION	7.108810692753218E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999930099929815	WITHOUT_CLASSIFICATION	6.990007018584891E-6	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999951581557319	WITHOUT_CLASSIFICATION	4.841844268052483E-6	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999953188564004	WITHOUT_CLASSIFICATION	4.681143599653809E-6	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999914007360151	WITHOUT_CLASSIFICATION	8.5992639849651E-6	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999435094632384	WITHOUT_CLASSIFICATION	5.649053676155295E-5	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999432084657371	WITHOUT_CLASSIFICATION	5.6791534262728945E-5	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999999258163865	WITHOUT_CLASSIFICATION	7.418361354874734E-8	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999983192067532	WITHOUT_CLASSIFICATION	1.6807932468578503E-6	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999983192067532	WITHOUT_CLASSIFICATION	1.6807932468578503E-6	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999981825187	WITHOUT_CLASSIFICATION	1.8174813092418756E-9	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999984369191101	WITHOUT_CLASSIFICATION	1.5630808899483024E-6	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999888728015064	WITHOUT_CLASSIFICATION	1.1127198493581794E-5	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999595669287235	WITHOUT_CLASSIFICATION	4.0433071276508835E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999999998989152	WITHOUT_CLASSIFICATION	1.0108480216977743E-9	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999998771352665	WITHOUT_CLASSIFICATION	1.2286473339508094E-7	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999999297792632	WITHOUT_CLASSIFICATION	7.022073679344063E-8	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992186255562	WITHOUT_CLASSIFICATION	7.813744439085408E-7	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999958549004425	WITHOUT_CLASSIFICATION	4.145099557439926E-6	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997599334601	WITHOUT_CLASSIFICATION	2.4006653980001865E-7	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997599334601	WITHOUT_CLASSIFICATION	2.4006653980001865E-7	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999713356762	WITHOUT_CLASSIFICATION	2.8664323850946833E-8	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999997329971099	WITHOUT_CLASSIFICATION	2.6700289013725613E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999997598019295	WITHOUT_CLASSIFICATION	2.401980706012141E-7	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999985816950024	WITHOUT_CLASSIFICATION	1.418304997543379E-6	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999926008440477	WITHOUT_CLASSIFICATION	7.399155952248921E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999964156066471	WITHOUT_CLASSIFICATION	3.5843933528724596E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999799127198945	WITHOUT_CLASSIFICATION	2.008728010554339E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999997341481087	WITHOUT_CLASSIFICATION	2.6585189128144315E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999451429993	WITHOUT_CLASSIFICATION	5.485700077016108E-8	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999451429993	WITHOUT_CLASSIFICATION	5.485700077016108E-8	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994612660555	WITHOUT_CLASSIFICATION	5.387339444037455E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994612660555	WITHOUT_CLASSIFICATION	5.387339444037455E-7	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999997465704634	WITHOUT_CLASSIFICATION	2.534295366113503E-7	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999948222726566	WITHOUT_CLASSIFICATION	5.1777273434125095E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999948222726566	WITHOUT_CLASSIFICATION	5.1777273434125095E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999995813967771	WITHOUT_CLASSIFICATION	4.1860322287623175E-7	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999969479092566	WITHOUT_CLASSIFICATION	3.052090743331688E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999998893374223	WITHOUT_CLASSIFICATION	1.1066257773244097E-7	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999981171603427	WITHOUT_CLASSIFICATION	1.8828396573532133E-6	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999453475687887	WITHOUT_CLASSIFICATION	5.4652431211317404E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999980219294692	WITHOUT_CLASSIFICATION	1.9780705308522797E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999980219294692	WITHOUT_CLASSIFICATION	1.9780705308522797E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999847772779593	WITHOUT_CLASSIFICATION	1.522272204065722E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999973903888645	WITHOUT_CLASSIFICATION	2.609611135483531E-6	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999988923761185	WITHOUT_CLASSIFICATION	1.1076238814443153E-6	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999972162954781	WITHOUT_CLASSIFICATION	2.783704522003592E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999996710722879	WITHOUT_CLASSIFICATION	3.289277120804901E-7	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999975884425093	WITHOUT_CLASSIFICATION	2.4115574907126576E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999894883682477	WITHOUT_CLASSIFICATION	1.0511631752318397E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999810877461098	WITHOUT_CLASSIFICATION	1.891225389019899E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999810877461098	WITHOUT_CLASSIFICATION	1.891225389019899E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998569520504357	WITHOUT_CLASSIFICATION	1.4304794956425775E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998569520504357	WITHOUT_CLASSIFICATION	1.4304794956425775E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999985224901843	WITHOUT_CLASSIFICATION	1.477509815738904E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999985224901843	WITHOUT_CLASSIFICATION	1.477509815738904E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999630179215	WITHOUT_CLASSIFICATION	3.698207849974196E-8	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999630179215	WITHOUT_CLASSIFICATION	3.698207849974196E-8	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999980219294692	WITHOUT_CLASSIFICATION	1.9780705308522797E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999894883682477	WITHOUT_CLASSIFICATION	1.0511631752318397E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999810877461098	WITHOUT_CLASSIFICATION	1.891225389019899E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999810877461098	WITHOUT_CLASSIFICATION	1.891225389019899E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998569520504357	WITHOUT_CLASSIFICATION	1.4304794956425775E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999985224901843	WITHOUT_CLASSIFICATION	1.477509815738904E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999985224901843	WITHOUT_CLASSIFICATION	1.477509815738904E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999630179215	WITHOUT_CLASSIFICATION	3.698207849974196E-8	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999992168577915	WITHOUT_CLASSIFICATION	7.831422084756344E-7	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999988478375565	WITHOUT_CLASSIFICATION	1.1521624435469889E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999771876758347	WITHOUT_CLASSIFICATION	2.2812324165428134E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999894007382191	WITHOUT_CLASSIFICATION	1.0599261780915367E-5	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999999798238329	WITHOUT_CLASSIFICATION	2.017616703885362E-8	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999917738823422	WITHOUT_CLASSIFICATION	8.226117657747647E-6	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998938314652012	WITHOUT_CLASSIFICATION	1.0616853479892585E-4	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9888421615706595	WITHOUT_CLASSIFICATION	0.011157838429340603	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9980117832622208	WITHOUT_CLASSIFICATION	0.001988216737779196	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999526172564	WITHOUT_CLASSIFICATION	4.738274358299424E-8	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999928137323324	WITHOUT_CLASSIFICATION	7.18626766758703E-6	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999996732711796	WITHOUT_CLASSIFICATION	3.267288204354068E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999890796617982	WITHOUT_CLASSIFICATION	1.0920338201888706E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999917738823422	WITHOUT_CLASSIFICATION	8.226117657747647E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998195969951754	WITHOUT_CLASSIFICATION	1.804030048246291E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998195969951754	WITHOUT_CLASSIFICATION	1.804030048246291E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999941998118459	WITHOUT_CLASSIFICATION	5.800188154105554E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999874651704	WITHOUT_CLASSIFICATION	1.2534829598275018E-7	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999874651704	WITHOUT_CLASSIFICATION	1.2534829598275018E-7	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999935200907992	WITHOUT_CLASSIFICATION	6.479909200742452E-6	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999703187419265	WITHOUT_CLASSIFICATION	2.968125807352844E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999660844698216	WITHOUT_CLASSIFICATION	3.39155301783761E-5	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999997319598222	WITHOUT_CLASSIFICATION	2.680401778952837E-7	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999997319598222	WITHOUT_CLASSIFICATION	2.680401778952837E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999723281955	WITHOUT_CLASSIFICATION	2.7671804542907728E-8	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999989472763141	WITHOUT_CLASSIFICATION	1.052723685872489E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999989472763141	WITHOUT_CLASSIFICATION	1.052723685872489E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999975575844905	WITHOUT_CLASSIFICATION	2.442415509432403E-6	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999990258024983	WITHOUT_CLASSIFICATION	9.741975016372033E-7	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999980295789718	WITHOUT_CLASSIFICATION	1.9704210282368692E-6	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999978680566295	WITHOUT_CLASSIFICATION	2.1319433705074886E-6	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999975134356638	WITHOUT_CLASSIFICATION	2.4865643362046875E-6	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999895997975212	WITHOUT_CLASSIFICATION	1.0400202478740375E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999983874545725	WITHOUT_CLASSIFICATION	1.6125454274807682E-6	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999959528211377	WITHOUT_CLASSIFICATION	4.04717886225609E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9960376261861805	WITHOUT_CLASSIFICATION	0.003962373813819452	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999870881881971	WITHOUT_CLASSIFICATION	1.2911811802900195E-5	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999982463895116	WITHOUT_CLASSIFICATION	1.7536104883134528E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999973891493736	WITHOUT_CLASSIFICATION	2.610850626393031E-6	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999908485318	WITHOUT_CLASSIFICATION	9.151468360112304E-9	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999989133733632	WITHOUT_CLASSIFICATION	1.0866266368185328E-6	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999998265685627	WITHOUT_CLASSIFICATION	1.734314373681252E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999973891493736	WITHOUT_CLASSIFICATION	2.610850626393031E-6	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999994144729335	WITHOUT_CLASSIFICATION	5.855270664764315E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.999998656363524	WITHOUT_CLASSIFICATION	1.3436364760819696E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999995247130562	WITHOUT_CLASSIFICATION	4.7528694387697285E-7	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999763281015155	WITHOUT_CLASSIFICATION	2.367189848445585E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999854249225574	WITHOUT_CLASSIFICATION	1.4575077442662602E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999987962126025	WITHOUT_CLASSIFICATION	1.2037873974708816E-6	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999997964368856	WITHOUT_CLASSIFICATION	2.0356311436057557E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999990910999504	WITHOUT_CLASSIFICATION	9.089000496509687E-7	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992295510307	WITHOUT_CLASSIFICATION	7.704489692405147E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999982154575777	WITHOUT_CLASSIFICATION	1.7845424223142403E-6	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999991955858182	WITHOUT_CLASSIFICATION	8.044141817692653E-7	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999455343114	WITHOUT_CLASSIFICATION	5.446568857565206E-8	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.999992897191892	WITHOUT_CLASSIFICATION	7.1028081079243025E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999983874545725	WITHOUT_CLASSIFICATION	1.6125454274807682E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992295510307	WITHOUT_CLASSIFICATION	7.704489692405147E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999991955858182	WITHOUT_CLASSIFICATION	8.044141817692653E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.999992897191892	WITHOUT_CLASSIFICATION	7.1028081079243025E-6	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997384645046	WITHOUT_CLASSIFICATION	2.615354954315391E-7	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999895073408009	WITHOUT_CLASSIFICATION	1.0492659199143126E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999425063666	WITHOUT_CLASSIFICATION	5.749363343152205E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999990800973841	WITHOUT_CLASSIFICATION	9.199026158273786E-7	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999993233127575	WITHOUT_CLASSIFICATION	6.766872424176198E-7	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999683638522796	WITHOUT_CLASSIFICATION	3.1636147720462503E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999939802813589	WITHOUT_CLASSIFICATION	6.019718641142391E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999998156666384	WITHOUT_CLASSIFICATION	1.8433336160110624E-6	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999957167362021	WITHOUT_CLASSIFICATION	4.283263797795723E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999984026126	WITHOUT_CLASSIFICATION	1.597387379473161E-9	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998278771792	WITHOUT_CLASSIFICATION	1.7212282091024783E-7	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999980868227697	WITHOUT_CLASSIFICATION	1.913177230285395E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.999999999086582	WITHOUT_CLASSIFICATION	9.134179336723273E-10	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999536817438	WITHOUT_CLASSIFICATION	4.6318256188256065E-7	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999764178454718	WITHOUT_CLASSIFICATION	2.3582154528260148E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999999506302568	WITHOUT_CLASSIFICATION	4.936974320305142E-7	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999902711478103	WITHOUT_CLASSIFICATION	9.728852189709225E-6	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999999570255686	WITHOUT_CLASSIFICATION	4.2974431413021375E-7	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999934217146149	WITHOUT_CLASSIFICATION	6.578285385055523E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992295510307	WITHOUT_CLASSIFICATION	7.704489692405147E-7	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999073359042	WITHOUT_CLASSIFICATION	9.266409589451017E-8	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999961795362	WITHOUT_CLASSIFICATION	3.820463814376559E-9	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.999999865327659	WITHOUT_CLASSIFICATION	1.3467234099981177E-7	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999999906304488	WITHOUT_CLASSIFICATION	9.36955115768962E-9	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999999866100873	WITHOUT_CLASSIFICATION	1.338991265325378E-8	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999773101015433	WITHOUT_CLASSIFICATION	2.268989845663711E-5	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999922805699	WITHOUT_CLASSIFICATION	7.71943001621945E-9	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999905750211	WITHOUT_CLASSIFICATION	9.42497885933325E-9	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999825511606311	WITHOUT_CLASSIFICATION	1.7448839368868623E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.999996597978343	WITHOUT_CLASSIFICATION	3.402021657172355E-6	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999986551669936	WITHOUT_CLASSIFICATION	1.3448330063544402E-6	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999992546637152	WITHOUT_CLASSIFICATION	7.45336284856871E-7	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999954793802394	WITHOUT_CLASSIFICATION	4.520619760636169E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999980377027896	WITHOUT_CLASSIFICATION	1.962297210430753E-6	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999619964011	WITHOUT_CLASSIFICATION	3.8003599030197686E-8	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999997708278272	WITHOUT_CLASSIFICATION	2.2917217279913514E-6	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999825775579471	WITHOUT_CLASSIFICATION	1.7422442052916296E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999995157245074	WITHOUT_CLASSIFICATION	4.842754925924824E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999988319700995	WITHOUT_CLASSIFICATION	1.1680299004937551E-6	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999607536938582	WITHOUT_CLASSIFICATION	3.924630614182474E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999993615	WITHOUT_CLASSIFICATION	6.385179627094456E-13	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999791166477822	WITHOUT_CLASSIFICATION	2.0883352217820986E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999598023028	WITHOUT_CLASSIFICATION	4.019769722238236E-8	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999987716620601	WITHOUT_CLASSIFICATION	1.2283379399188516E-6	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999753083411673	WITHOUT_CLASSIFICATION	2.4691658832596214E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999753083411673	WITHOUT_CLASSIFICATION	2.4691658832596214E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999856421985812	WITHOUT_CLASSIFICATION	1.4357801418871172E-5	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999996270950074	WITHOUT_CLASSIFICATION	3.729049925454482E-7	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999999535601022	WITHOUT_CLASSIFICATION	4.6439897810239215E-7	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999990177711763	WITHOUT_CLASSIFICATION	9.8222882367798E-7	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999997323612113	WITHOUT_CLASSIFICATION	2.676387887191151E-7	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9995800228536721	WITHOUT_CLASSIFICATION	4.199771463279485E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999909598806308	WITHOUT_CLASSIFICATION	9.040119369159503E-6	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999998420556062	WITHOUT_CLASSIFICATION	1.5794439383619082E-7	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999989040360653	WITHOUT_CLASSIFICATION	1.0959639347940227E-6	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999983089277356	WITHOUT_CLASSIFICATION	1.6910722644763815E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999953632958686	WITHOUT_CLASSIFICATION	4.636704131469965E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999591937640906	WITHOUT_CLASSIFICATION	4.080623590943418E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9987974152970515	WITHOUT_CLASSIFICATION	0.001202584702948504	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999880867803427	WITHOUT_CLASSIFICATION	1.1913219657388894E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985097659072	WITHOUT_CLASSIFICATION	1.490234092778053E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997470243951	WITHOUT_CLASSIFICATION	2.5297560489693713E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999734231880266	WITHOUT_CLASSIFICATION	2.6576811973458127E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999994520060096	WITHOUT_CLASSIFICATION	5.479939903615817E-7	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9996725212019804	WITHOUT_CLASSIFICATION	3.2747879801970167E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999583976199228	WITHOUT_CLASSIFICATION	4.160238007726946E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999824306418136	WITHOUT_CLASSIFICATION	1.756935818641264E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999824306418136	WITHOUT_CLASSIFICATION	1.756935818641264E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999914225880994	WITHOUT_CLASSIFICATION	8.577411900702044E-6	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999914225880994	WITHOUT_CLASSIFICATION	8.577411900702044E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999598023028	WITHOUT_CLASSIFICATION	4.019769722238236E-8	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999966712378398	WITHOUT_CLASSIFICATION	3.328762160178206E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999947893697921	WITHOUT_CLASSIFICATION	5.210630207836706E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998359171068	WITHOUT_CLASSIFICATION	1.640828932110152E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999989358905479	WITHOUT_CLASSIFICATION	1.0641094521160519E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999947893697921	WITHOUT_CLASSIFICATION	5.210630207836706E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998359171068	WITHOUT_CLASSIFICATION	1.640828932110152E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991176593679	WITHOUT_CLASSIFICATION	8.823406319866771E-7	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999994949516424	WITHOUT_CLASSIFICATION	5.050483575840761E-7	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999863411040206	WITHOUT_CLASSIFICATION	1.3658895979519516E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999997963176183	WITHOUT_CLASSIFICATION	2.036823816162514E-7	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996602382302402	WITHOUT_CLASSIFICATION	3.397617697598563E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999943566173812	WITHOUT_CLASSIFICATION	5.6433826188737775E-6	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999999685784893	WITHOUT_CLASSIFICATION	3.1421510700105525E-7	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999993154301164	WITHOUT_CLASSIFICATION	6.845698834834955E-7	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999566191816412	WITHOUT_CLASSIFICATION	4.338081835876418E-5	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999998840534	WITHOUT_CLASSIFICATION	1.1594658755027899E-10	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999996527682411	WITHOUT_CLASSIFICATION	3.472317589057419E-6	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999998011687304	WITHOUT_CLASSIFICATION	1.9883126962209325E-7	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999978114207	WITHOUT_CLASSIFICATION	2.188579378962782E-9	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999928408699685	WITHOUT_CLASSIFICATION	7.159130031431401E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999989358905479	WITHOUT_CLASSIFICATION	1.0641094521160519E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999778377409421	WITHOUT_CLASSIFICATION	2.2162259057902336E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999806591953427	WITHOUT_CLASSIFICATION	1.934080465725135E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999806591953427	WITHOUT_CLASSIFICATION	1.934080465725135E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999864243339849	WITHOUT_CLASSIFICATION	1.3575666014993935E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991176593679	WITHOUT_CLASSIFICATION	8.823406319866771E-7	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9994237493621883	WITHOUT_CLASSIFICATION	5.76250637811787E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9970832733730481	WITHOUT_CLASSIFICATION	0.002916726626951799	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9995710631740757	WITHOUT_CLASSIFICATION	4.2893682592424066E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999960165031917	WITHOUT_CLASSIFICATION	3.983496808261683E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9996469165141576	WITHOUT_CLASSIFICATION	3.5308348584238544E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991176593679	WITHOUT_CLASSIFICATION	8.823406319866771E-7	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999960165031917	WITHOUT_CLASSIFICATION	3.983496808261683E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9996469165141576	WITHOUT_CLASSIFICATION	3.5308348584238544E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999979062604715	WITHOUT_CLASSIFICATION	2.0937395286174406E-6	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999998639601382	WITHOUT_CLASSIFICATION	1.3603986180068555E-7	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9997411069659893	WITHOUT_CLASSIFICATION	2.5889303401073656E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991176593679	WITHOUT_CLASSIFICATION	8.823406319866771E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991176593679	WITHOUT_CLASSIFICATION	8.823406319866771E-7	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999972035909507	WITHOUT_CLASSIFICATION	2.7964090493686094E-6	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.999998663674485	WITHOUT_CLASSIFICATION	1.3363255150182497E-6	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999984801107724	WITHOUT_CLASSIFICATION	1.519889227653542E-6	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999992025961235	WITHOUT_CLASSIFICATION	7.974038764845594E-7	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999957779988667	WITHOUT_CLASSIFICATION	4.222001133336057E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999784380306	WITHOUT_CLASSIFICATION	2.156196948641606E-8	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999995755193718	WITHOUT_CLASSIFICATION	4.244806281300951E-7	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999606212194	WITHOUT_CLASSIFICATION	3.937878070058008E-8	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999989636433104	WITHOUT_CLASSIFICATION	1.036356689540366E-6	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999929671718021	WITHOUT_CLASSIFICATION	7.032828197891868E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999746232049552	WITHOUT_CLASSIFICATION	2.537679504481102E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999994712148744	WITHOUT_CLASSIFICATION	5.287851254619561E-7	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999999843808605	WITHOUT_CLASSIFICATION	1.5619139503755376E-7	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999983050275246	WITHOUT_CLASSIFICATION	1.6949724753420332E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968156211303	WITHOUT_CLASSIFICATION	3.184378869728964E-6	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999992727534273	WITHOUT_CLASSIFICATION	7.27246572679642E-7	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999992450927728	WITHOUT_CLASSIFICATION	7.549072270708967E-7	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999662959453608	WITHOUT_CLASSIFICATION	3.3704054639169465E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9989694266572732	WITHOUT_CLASSIFICATION	0.001030573342726769	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999853375073	WITHOUT_CLASSIFICATION	1.4662492732499025E-8	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999979239550953	WITHOUT_CLASSIFICATION	2.0760449046065145E-6	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999768958044859	WITHOUT_CLASSIFICATION	2.3104195514171138E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999768958044859	WITHOUT_CLASSIFICATION	2.3104195514171138E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999992450927728	WITHOUT_CLASSIFICATION	7.549072270708967E-7	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9996242719884143	WITHOUT_CLASSIFICATION	3.7572801158580006E-4	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999912341088542	WITHOUT_CLASSIFICATION	8.76589114585439E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998029368545421	WITHOUT_CLASSIFICATION	1.9706314545789237E-4	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999994656869959	WITHOUT_CLASSIFICATION	5.343130040453652E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999873687054771	WITHOUT_CLASSIFICATION	1.2631294522883443E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999997655403715	WITHOUT_CLASSIFICATION	2.3445962855411198E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999143403619755	WITHOUT_CLASSIFICATION	8.565963802459126E-5	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999999845095435	WITHOUT_CLASSIFICATION	1.5490456513609536E-8	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999998918178	WITHOUT_CLASSIFICATION	1.0818214001615493E-10	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999540920818	WITHOUT_CLASSIFICATION	4.590791823635297E-8	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9996493287802796	WITHOUT_CLASSIFICATION	3.506712197203931E-4	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9998818553014142	WITHOUT_CLASSIFICATION	1.1814469858582824E-4	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999648291517654	WITHOUT_CLASSIFICATION	3.5170848234493086E-5	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999987518192	WITHOUT_CLASSIFICATION	1.2481808336846484E-9	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998225517949	WITHOUT_CLASSIFICATION	1.7744820510077803E-6	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999194826610082	WITHOUT_CLASSIFICATION	8.051733899177492E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.99999887571149	WITHOUT_CLASSIFICATION	1.1242885099742885E-6	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999964919419742	WITHOUT_CLASSIFICATION	3.5080580257656856E-6	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986046422615	WITHOUT_CLASSIFICATION	1.3953577383823045E-6	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999950958556565	WITHOUT_CLASSIFICATION	4.904144343540628E-6	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999999768232602	WITHOUT_CLASSIFICATION	2.317673981336862E-7	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999980051652839	WITHOUT_CLASSIFICATION	1.9948347160639867E-6	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997455216795373	WITHOUT_CLASSIFICATION	2.5447832046261156E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909106813422	WITHOUT_CLASSIFICATION	9.08931865779084E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974039613615	WITHOUT_CLASSIFICATION	2.5960386386130583E-6	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989950327001	WITHOUT_CLASSIFICATION	1.0049673000242951E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963622019569	WITHOUT_CLASSIFICATION	3.6377980431261413E-6	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974118396744	WITHOUT_CLASSIFICATION	2.5881603257230405E-6	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970765118059	WITHOUT_CLASSIFICATION	2.923488194002326E-6	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960041558378	WITHOUT_CLASSIFICATION	3.995844162178067E-6	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999997393970492	WITHOUT_CLASSIFICATION	2.606029507401732E-7	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999997722436778	WITHOUT_CLASSIFICATION	2.2775632230722374E-7	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982459999145	WITHOUT_CLASSIFICATION	1.7540000855341176E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997417388201	WITHOUT_CLASSIFICATION	2.5826117988563136E-7	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982827403573	WITHOUT_CLASSIFICATION	1.7172596426625038E-6	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995307971903	WITHOUT_CLASSIFICATION	4.692028097075727E-6	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966695530754	WITHOUT_CLASSIFICATION	3.330446924632198E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995194391722	WITHOUT_CLASSIFICATION	4.805608277704035E-7	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992386597878	WITHOUT_CLASSIFICATION	7.61340212255546E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918914139839	WITHOUT_CLASSIFICATION	8.108586016011603E-6	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999456636687067	WITHOUT_CLASSIFICATION	5.4336331293171664E-5	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922609173787	WITHOUT_CLASSIFICATION	7.739082621381755E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8955940444239905	WITHOUT_CLASSIFICATION	0.10440595557600948	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999772284200202	WITHOUT_CLASSIFICATION	2.2771579979839107E-5	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999999999929687	WITHOUT_CLASSIFICATION	7.031294840719043E-11	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997137688129	WITHOUT_CLASSIFICATION	2.862311869876931E-7	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999991194344405	WITHOUT_CLASSIFICATION	8.805655594292263E-7	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999986775368104	WITHOUT_CLASSIFICATION	1.322463189558456E-6	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999986531129592	WITHOUT_CLASSIFICATION	1.3468870408736782E-6	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999996770241532	WITHOUT_CLASSIFICATION	3.2297584683966537E-7	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999980391890207	WITHOUT_CLASSIFICATION	1.9608109792256797E-6	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999987385114628	WITHOUT_CLASSIFICATION	1.2614885371737501E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999996415289831	WITHOUT_CLASSIFICATION	3.5847101684166963E-7	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999980449105843	WITHOUT_CLASSIFICATION	1.955089415714567E-6	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999984805272659	WITHOUT_CLASSIFICATION	1.5194727340283447E-6	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9937615019602178	WITHOUT_CLASSIFICATION	0.006238498039782196	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999596767533188	WITHOUT_CLASSIFICATION	4.032324668127452E-5	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999929063728594	WITHOUT_CLASSIFICATION	7.0936271405903345E-6	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998243031592782	WITHOUT_CLASSIFICATION	1.7569684072187355E-4	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992362967697	WITHOUT_CLASSIFICATION	7.637032304204506E-7	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999792586998745	WITHOUT_CLASSIFICATION	2.074130012552611E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988102042618	WITHOUT_CLASSIFICATION	1.1897957381008368E-6	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932911269136	WITHOUT_CLASSIFICATION	6.708873086470738E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999837972092379	WITHOUT_CLASSIFICATION	1.62027907620992E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999143502617	WITHOUT_CLASSIFICATION	8.564973825214524E-8	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999991388821947	WITHOUT_CLASSIFICATION	8.611178053012439E-7	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999881825532009	WITHOUT_CLASSIFICATION	1.1817446799146723E-5	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999426711039	WITHOUT_CLASSIFICATION	5.73288960653108E-8	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999993789579023	WITHOUT_CLASSIFICATION	6.21042097802062E-7	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999886207067721	WITHOUT_CLASSIFICATION	1.1379293227971646E-5	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999983979632366	WITHOUT_CLASSIFICATION	1.602036763404631E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999975866566	WITHOUT_CLASSIFICATION	2.4133434101272104E-9	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999920819357649	WITHOUT_CLASSIFICATION	7.91806423513866E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999996011596601	WITHOUT_CLASSIFICATION	3.9884033991143466E-7	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999985672389498	WITHOUT_CLASSIFICATION	1.4327610502106957E-6	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999882126900781	WITHOUT_CLASSIFICATION	1.1787309921786572E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997137688129	WITHOUT_CLASSIFICATION	2.862311869876931E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999176503409828	WITHOUT_CLASSIFICATION	8.23496590173033E-5	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999176432414	WITHOUT_CLASSIFICATION	8.235675867330398E-8	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999977861309305	WITHOUT_CLASSIFICATION	2.213869069444165E-6	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997690185274485	WITHOUT_CLASSIFICATION	2.3098147255143464E-4	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999793735231584	WITHOUT_CLASSIFICATION	2.0626476841681906E-5	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999996533367229	WITHOUT_CLASSIFICATION	3.4666327702614874E-7	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999336605623136	WITHOUT_CLASSIFICATION	6.633943768649262E-5	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.997732498315164	WITHOUT_CLASSIFICATION	0.002267501684835998	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999981768557347	WITHOUT_CLASSIFICATION	1.8231442653046908E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999971351434199	WITHOUT_CLASSIFICATION	2.8648565800943177E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999834467464596	WITHOUT_CLASSIFICATION	1.6553253540359852E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999840233361135	WITHOUT_CLASSIFICATION	1.5976663886519812E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999805538918	WITHOUT_CLASSIFICATION	1.9446108170055075E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999992142183571	WITHOUT_CLASSIFICATION	7.857816429091846E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999960645861724	WITHOUT_CLASSIFICATION	3.935413827658658E-6	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999967487968181	WITHOUT_CLASSIFICATION	3.251203182022438E-6	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999836376781019	WITHOUT_CLASSIFICATION	1.636232189810711E-5	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999084654312447	WITHOUT_CLASSIFICATION	9.153456875536523E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999905337167	WITHOUT_CLASSIFICATION	9.466283292557895E-9	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999995938992211	WITHOUT_CLASSIFICATION	4.061007788797026E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999923196712	WITHOUT_CLASSIFICATION	7.68032873686962E-9	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999991454919909	WITHOUT_CLASSIFICATION	8.545080091618671E-7	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999971338208709	WITHOUT_CLASSIFICATION	2.8661791291029143E-5	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999952547918748	WITHOUT_CLASSIFICATION	4.745208125286063E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999954987517515	WITHOUT_CLASSIFICATION	4.5012482483997656E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999885589729	WITHOUT_CLASSIFICATION	1.1441027131257235E-8	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9878208083202911	WITHOUT_CLASSIFICATION	0.012179191679708967	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999970561293177	WITHOUT_CLASSIFICATION	2.9438706822844985E-6	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998163532577	WITHOUT_CLASSIFICATION	1.8364674228226253E-7	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999782638938642	WITHOUT_CLASSIFICATION	2.1736106135805507E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997137688129	WITHOUT_CLASSIFICATION	2.862311869876931E-7	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9987186422986469	WITHOUT_CLASSIFICATION	0.0012813577013529916	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999997957122589	WITHOUT_CLASSIFICATION	2.0428774103844714E-7	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9979290151077975	WITHOUT_CLASSIFICATION	0.0020709848922024128	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997137688129	WITHOUT_CLASSIFICATION	2.862311869876931E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993509366691	WITHOUT_CLASSIFICATION	6.490633309328029E-7	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999923196712	WITHOUT_CLASSIFICATION	7.68032873686962E-9	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9976136813767095	WITHOUT_CLASSIFICATION	0.0023863186232905872	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9996189227513844	WITHOUT_CLASSIFICATION	3.8107724861558175E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999991153177	WITHOUT_CLASSIFICATION	8.846822981782372E-9	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999971351434199	WITHOUT_CLASSIFICATION	2.8648565800943177E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999834467464596	WITHOUT_CLASSIFICATION	1.6553253540359852E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999840233361135	WITHOUT_CLASSIFICATION	1.5976663886519812E-5	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999836356762	WITHOUT_CLASSIFICATION	1.636432381651569E-8	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999992624822448	WITHOUT_CLASSIFICATION	7.375177553071067E-7	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999993416111211	WITHOUT_CLASSIFICATION	6.583888788966026E-7	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999912355825762	WITHOUT_CLASSIFICATION	8.764417423708335E-6	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999124019657	WITHOUT_CLASSIFICATION	8.759803426874559E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997137688129	WITHOUT_CLASSIFICATION	2.862311869876931E-7	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999805538918	WITHOUT_CLASSIFICATION	1.9446108170055075E-8	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999992142183571	WITHOUT_CLASSIFICATION	7.857816429091846E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997264489731	WITHOUT_CLASSIFICATION	2.735510269174501E-7	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999658379665358	WITHOUT_CLASSIFICATION	3.4162033464130666E-5	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999998958257745	WITHOUT_CLASSIFICATION	1.0417422548134609E-7	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999314004592	WITHOUT_CLASSIFICATION	6.859954076871723E-8	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999996023587695	WITHOUT_CLASSIFICATION	3.976412304735611E-7	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999992642847808	WITHOUT_CLASSIFICATION	7.357152192631552E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918914139839	WITHOUT_CLASSIFICATION	8.108586016011603E-6	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999762104332305	WITHOUT_CLASSIFICATION	2.3789566769547983E-5	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999998111080018	WITHOUT_CLASSIFICATION	1.8889199823844437E-7	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999998623562053	WITHOUT_CLASSIFICATION	1.3764379468050077E-7	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999999984062762	WITHOUT_CLASSIFICATION	1.5937237964180895E-8	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999961022038	WITHOUT_CLASSIFICATION	3.897796258909214E-9	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963622019569	WITHOUT_CLASSIFICATION	3.6377980431261413E-6	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974118396744	WITHOUT_CLASSIFICATION	2.5881603257230405E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997417388201	WITHOUT_CLASSIFICATION	2.5826117988563136E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999961022038	WITHOUT_CLASSIFICATION	3.897796258909214E-9	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999421949949	WITHOUT_CLASSIFICATION	5.7805005026895214E-8	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999990623153026	WITHOUT_CLASSIFICATION	9.376846973509327E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999447206393643	WITHOUT_CLASSIFICATION	5.5279360635710846E-5	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801469908015	WITHOUT_CLASSIFICATION	1.9853009198474845E-5	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999861598795734	WITHOUT_CLASSIFICATION	1.384012042659832E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.999859528526479	WITHOUT_CLASSIFICATION	1.4047147352107018E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982827403573	WITHOUT_CLASSIFICATION	1.7172596426625038E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995194391722	WITHOUT_CLASSIFICATION	4.805608277704035E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999975866566	WITHOUT_CLASSIFICATION	2.4133434101272104E-9	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999990253466692	WITHOUT_CLASSIFICATION	9.746533308356972E-7	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999990229199666	WITHOUT_CLASSIFICATION	9.770800333527264E-7	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999999911339812	WITHOUT_CLASSIFICATION	8.866018796726696E-8	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999712225979	WITHOUT_CLASSIFICATION	2.8777402177702482E-8	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999998145394983	WITHOUT_CLASSIFICATION	1.8546050166571889E-7	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999587056101	WITHOUT_CLASSIFICATION	4.1294389960844775E-8	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999975085847995	WITHOUT_CLASSIFICATION	2.4914152004839773E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999775039352524	WITHOUT_CLASSIFICATION	2.2496064747591155E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999998918178	WITHOUT_CLASSIFICATION	1.0818214001615493E-10	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999953342929743	WITHOUT_CLASSIFICATION	4.665707025746949E-6	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999635840779	WITHOUT_CLASSIFICATION	3.64159220643735E-8	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999955211445791	WITHOUT_CLASSIFICATION	4.478855420888043E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999990070101126	WITHOUT_CLASSIFICATION	9.929898873545114E-7	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999083717821	WITHOUT_CLASSIFICATION	9.162821787217872E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999990922262156	WITHOUT_CLASSIFICATION	9.077737843337329E-7	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992644079395	WITHOUT_CLASSIFICATION	7.355920606029946E-7	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816515124331	WITHOUT_CLASSIFICATION	1.8348487566846507E-5	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998932082214	WITHOUT_CLASSIFICATION	1.0679177859333572E-7	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999956219786184	WITHOUT_CLASSIFICATION	4.37802138165726E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998247583636221	WITHOUT_CLASSIFICATION	1.7524163637798164E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993867136079	WITHOUT_CLASSIFICATION	6.132863921522614E-7	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997797245276	WITHOUT_CLASSIFICATION	2.202754723497225E-7	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998806188505	WITHOUT_CLASSIFICATION	1.1938114950745372E-7	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998692035605	WITHOUT_CLASSIFICATION	1.3079643939534432E-7	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999991104669913	WITHOUT_CLASSIFICATION	8.895330088211313E-7	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999999848486185	WITHOUT_CLASSIFICATION	1.5151381410705802E-8	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998966775379	WITHOUT_CLASSIFICATION	1.033224621444942E-7	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999377356938114	WITHOUT_CLASSIFICATION	6.226430618867824E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999976671407	WITHOUT_CLASSIFICATION	2.3328592957098988E-8	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961711081996	WITHOUT_CLASSIFICATION	3.828891800373447E-6	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999998727102049	WITHOUT_CLASSIFICATION	1.2728979513204205E-7	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999971772257383	WITHOUT_CLASSIFICATION	2.822774261721035E-6	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999924489590487	WITHOUT_CLASSIFICATION	7.551040951306865E-6	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999820179759956	WITHOUT_CLASSIFICATION	1.7982024004381495E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999927324050678	WITHOUT_CLASSIFICATION	7.267594932170555E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999965311882081	WITHOUT_CLASSIFICATION	3.4688117919000223E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999990782649867	WITHOUT_CLASSIFICATION	9.217350132582475E-7	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999967429020602	WITHOUT_CLASSIFICATION	3.2570979397536323E-6	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999996600390917	WITHOUT_CLASSIFICATION	3.399609083647356E-7	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999997866876724	WITHOUT_CLASSIFICATION	2.1331232765781208E-7	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9993506790859333	WITHOUT_CLASSIFICATION	6.493209140667356E-4	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999987000898765	WITHOUT_CLASSIFICATION	1.2999101235437897E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999999981563523	WITHOUT_CLASSIFICATION	1.843647704186029E-8	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999407949267	WITHOUT_CLASSIFICATION	5.920507321640487E-8	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999987010468271	WITHOUT_CLASSIFICATION	1.2989531729455432E-6	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998796109765	WITHOUT_CLASSIFICATION	1.203890234619122E-7	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999998252489181	WITHOUT_CLASSIFICATION	1.7475108198983246E-7	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999994458923884	WITHOUT_CLASSIFICATION	5.541076115899915E-7	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999682553471	WITHOUT_CLASSIFICATION	3.174465298421331E-8	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999198585883	WITHOUT_CLASSIFICATION	8.014141173520277E-8	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999991485416563	WITHOUT_CLASSIFICATION	8.514583437510627E-7	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9941824232314289	WITHOUT_CLASSIFICATION	0.005817576768571196	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999175070756	WITHOUT_CLASSIFICATION	8.249292437948131E-8	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999797136295429	WITHOUT_CLASSIFICATION	2.02863704571993E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999899360112	WITHOUT_CLASSIFICATION	1.0063988806916942E-8	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999997556696881	WITHOUT_CLASSIFICATION	2.4433031179668444E-7	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999991374625722	WITHOUT_CLASSIFICATION	8.625374277653434E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999975009220569	WITHOUT_CLASSIFICATION	2.4990779431758975E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999961501585378	WITHOUT_CLASSIFICATION	3.849841462219127E-6	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999991239845782	WITHOUT_CLASSIFICATION	8.760154217337358E-7	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999992377118893	WITHOUT_CLASSIFICATION	7.622881107277564E-7	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999997100568142	WITHOUT_CLASSIFICATION	2.8994318572504064E-7	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999996957430174	WITHOUT_CLASSIFICATION	3.0425698259624433E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999901054795785	WITHOUT_CLASSIFICATION	9.89452042148941E-6	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999409724492283	WITHOUT_CLASSIFICATION	5.9027550771717665E-5	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999965012571815	WITHOUT_CLASSIFICATION	3.4987428185332675E-6	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999955157469114	WITHOUT_CLASSIFICATION	4.484253088660742E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999979463333963	WITHOUT_CLASSIFICATION	2.0536666035424594E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999995637609955	WITHOUT_CLASSIFICATION	4.362390045377729E-7	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999896640621223	WITHOUT_CLASSIFICATION	1.033593787759312E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999989367105697	WITHOUT_CLASSIFICATION	1.0632894303188567E-6	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.999514757577021	WITHOUT_CLASSIFICATION	4.852424229789708E-4	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9994852921896646	WITHOUT_CLASSIFICATION	5.147078103353653E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999994663362562	WITHOUT_CLASSIFICATION	5.336637438015926E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.927507032658344	WITHOUT_CLASSIFICATION	0.07249296734165592	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999832891973	WITHOUT_CLASSIFICATION	1.6710802763896084E-8	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9991855341085224	WITHOUT_CLASSIFICATION	8.144658914777113E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999801270110124	WITHOUT_CLASSIFICATION	1.9872988987720446E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999878437473806	WITHOUT_CLASSIFICATION	1.2156252619485904E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999974541824699	WITHOUT_CLASSIFICATION	2.545817530110448E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999999951476804	WITHOUT_CLASSIFICATION	4.8523195990687376E-8	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999990499918802	WITHOUT_CLASSIFICATION	9.500081197578292E-7	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999965840308263	WITHOUT_CLASSIFICATION	3.4159691738200256E-6	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999435085211935	WITHOUT_CLASSIFICATION	5.6491478806451706E-5	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999951390964639	WITHOUT_CLASSIFICATION	4.860903536116257E-6	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999986698148529	WITHOUT_CLASSIFICATION	1.3301851471700669E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999824926439	WITHOUT_CLASSIFICATION	1.7507356149263898E-8	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999907813967	WITHOUT_CLASSIFICATION	9.21860335024149E-9	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999992261152725	WITHOUT_CLASSIFICATION	7.738847274222018E-7	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999864179534155	WITHOUT_CLASSIFICATION	1.358204658460738E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999991821827975	WITHOUT_CLASSIFICATION	8.178172026067942E-7	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999993107313498	WITHOUT_CLASSIFICATION	6.892686502192552E-7	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999993279578125	WITHOUT_CLASSIFICATION	6.720421875222303E-7	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999658958834072	WITHOUT_CLASSIFICATION	3.410411659266647E-5	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997841806277795	WITHOUT_CLASSIFICATION	2.158193722204454E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999982826049033	WITHOUT_CLASSIFICATION	1.717395096614862E-6	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999634979689972	WITHOUT_CLASSIFICATION	3.65020310026813E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999995547022358	WITHOUT_CLASSIFICATION	4.452977642476875E-7	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999995269835462	WITHOUT_CLASSIFICATION	4.7301645373595684E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994865155228	WITHOUT_CLASSIFICATION	5.134844772000747E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999626225593956	WITHOUT_CLASSIFICATION	3.7377440604426125E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999998434954684	WITHOUT_CLASSIFICATION	1.5650453163686362E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994865155228	WITHOUT_CLASSIFICATION	5.134844772000747E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999928591611	WITHOUT_CLASSIFICATION	7.140838811876568E-9	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999999346720374	WITHOUT_CLASSIFICATION	6.532796264891792E-8	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999995411533209	WITHOUT_CLASSIFICATION	4.588466790597231E-7	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999979452946028	WITHOUT_CLASSIFICATION	2.0547053972068705E-5	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999998951719122	WITHOUT_CLASSIFICATION	1.0482808783372359E-7	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999873684033	WITHOUT_CLASSIFICATION	1.2631596539471233E-8	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999913932794826	WITHOUT_CLASSIFICATION	8.6067205173934E-6	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999741127268	WITHOUT_CLASSIFICATION	2.5887273215200168E-8	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999998620573384	WITHOUT_CLASSIFICATION	1.3794266156189616E-7	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999991906601983	WITHOUT_CLASSIFICATION	8.093398017499068E-7	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999895590606405	WITHOUT_CLASSIFICATION	1.0440939359640984E-5	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999936399849861	WITHOUT_CLASSIFICATION	6.360015013872003E-6	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999793256784	WITHOUT_CLASSIFICATION	2.0674321622279253E-8	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999985413998	WITHOUT_CLASSIFICATION	1.4586001814320015E-9	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999993660673495	WITHOUT_CLASSIFICATION	6.339326506169388E-7	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999988160522366	WITHOUT_CLASSIFICATION	1.183947763371995E-6	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999900845963713	WITHOUT_CLASSIFICATION	9.915403628716586E-6	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999900845963713	WITHOUT_CLASSIFICATION	9.915403628716586E-6	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999987949480158	WITHOUT_CLASSIFICATION	1.20505198421123E-6	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9999364124401006	WITHOUT_CLASSIFICATION	6.358755989938436E-5	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999461821619012	WITHOUT_CLASSIFICATION	5.381783809881092E-5	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999934333453524	WITHOUT_CLASSIFICATION	6.566654647647611E-6	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999987730984818	WITHOUT_CLASSIFICATION	1.2269015181822534E-6	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.963478977710417	WITHOUT_CLASSIFICATION	0.03652102228958295	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9999383141268123	WITHOUT_CLASSIFICATION	6.168587318765756E-5	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999703750855	WITHOUT_CLASSIFICATION	2.9624914519564694E-8	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999989688419536	WITHOUT_CLASSIFICATION	1.0311580463728138E-6	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9996295052942255	WITHOUT_CLASSIFICATION	3.704947057745466E-4	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999517116166434	WITHOUT_CLASSIFICATION	4.82883833565868E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999961393504	WITHOUT_CLASSIFICATION	3.860649631382061E-9	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999672412819	WITHOUT_CLASSIFICATION	3.27587180038065E-8	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999973056584559	WITHOUT_CLASSIFICATION	2.694341544069986E-6	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999970268796	WITHOUT_CLASSIFICATION	2.9731204229221396E-9	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999990922262156	WITHOUT_CLASSIFICATION	9.077737843337329E-7	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999996067730419	WITHOUT_CLASSIFICATION	3.93226957989483E-7	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998011459282	WITHOUT_CLASSIFICATION	1.9885407183937747E-7	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9998503241981266	WITHOUT_CLASSIFICATION	1.4967580187341838E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999988743578974	WITHOUT_CLASSIFICATION	1.125642102738833E-6	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999707698621	WITHOUT_CLASSIFICATION	2.923013782568854E-8	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999925800697264	WITHOUT_CLASSIFICATION	7.419930273604332E-6	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999819923068	WITHOUT_CLASSIFICATION	1.8007693177689764E-8	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998902871208	WITHOUT_CLASSIFICATION	1.0971287923880525E-7	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999999930871987	WITHOUT_CLASSIFICATION	6.912801297240408E-8	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998259117315	WITHOUT_CLASSIFICATION	1.7408826835247215E-7	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999977314339	WITHOUT_CLASSIFICATION	2.2685661056878702E-9	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999966607998664	WITHOUT_CLASSIFICATION	3.3392001336856004E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.999995470764366	WITHOUT_CLASSIFICATION	4.529235634076428E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999849135364594	WITHOUT_CLASSIFICATION	1.508646354061667E-5	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999976489301994	WITHOUT_CLASSIFICATION	2.351069800629254E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999994737484225	WITHOUT_CLASSIFICATION	5.262515774669212E-7	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9998559802797159	WITHOUT_CLASSIFICATION	1.4401972028412922E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999989190320778	WITHOUT_CLASSIFICATION	1.0809679222135023E-6	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999976246112169	WITHOUT_CLASSIFICATION	2.3753887831538972E-6	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999998010105812	WITHOUT_CLASSIFICATION	1.989894187911923E-6	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.999994731557256	WITHOUT_CLASSIFICATION	5.268442744032044E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999813664857301	WITHOUT_CLASSIFICATION	1.863351426992648E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999988268950467	WITHOUT_CLASSIFICATION	1.1731049532461022E-6	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999170151044455	WITHOUT_CLASSIFICATION	8.298489555451984E-5	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999997260784058	WITHOUT_CLASSIFICATION	2.739215941886619E-7	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999996243345021	WITHOUT_CLASSIFICATION	3.756654978926713E-7	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9867211768620497	WITHOUT_CLASSIFICATION	0.01327882313795028	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999996691950799	WITHOUT_CLASSIFICATION	3.308049201392133E-7	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999952027476178	WITHOUT_CLASSIFICATION	4.797252382235913E-6	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999997182301987	WITHOUT_CLASSIFICATION	2.8176980126360315E-7	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881304548167	WITHOUT_CLASSIFICATION	1.1869545183245126E-5	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727396749477	WITHOUT_CLASSIFICATION	2.7260325052180468E-5	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937023634404	WITHOUT_CLASSIFICATION	6.297636559583878E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9991054262986474	WITHOUT_CLASSIFICATION	8.945737013524664E-4	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999761222063052	WITHOUT_CLASSIFICATION	2.3877793694870276E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999775039352524	WITHOUT_CLASSIFICATION	2.2496064747591155E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999775039352524	WITHOUT_CLASSIFICATION	2.2496064747591155E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991919196367	WITHOUT_CLASSIFICATION	8.080803633362392E-7	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.999987349361634	WITHOUT_CLASSIFICATION	1.2650638365820246E-5	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9975453422114096	WITHOUT_CLASSIFICATION	0.002454657788590449	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995326586131028	WITHOUT_CLASSIFICATION	4.6734138689720234E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9975453422114096	WITHOUT_CLASSIFICATION	0.002454657788590449	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999988492601435	WITHOUT_CLASSIFICATION	1.1507398564891387E-6	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999984096389684	WITHOUT_CLASSIFICATION	1.5903610317044553E-6	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999998531368963	WITHOUT_CLASSIFICATION	1.468631037685074E-7	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999986775414498	WITHOUT_CLASSIFICATION	1.3224585502423294E-6	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998742185117	WITHOUT_CLASSIFICATION	1.2578148828038382E-7	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999983321183866	WITHOUT_CLASSIFICATION	1.6678816134120083E-6	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999328381228	WITHOUT_CLASSIFICATION	6.716187709620802E-8	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999906568994861	WITHOUT_CLASSIFICATION	9.343100513953121E-6	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999534565354	WITHOUT_CLASSIFICATION	4.6543464745688E-8	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999970105974177	WITHOUT_CLASSIFICATION	2.9894025823521247E-6	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999982546691469	WITHOUT_CLASSIFICATION	1.7453308531242496E-6	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999996779905271	WITHOUT_CLASSIFICATION	3.220094728751969E-7	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999991113222032	WITHOUT_CLASSIFICATION	8.886777967972073E-7	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999574211481024	WITHOUT_CLASSIFICATION	4.257885189752991E-5	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999655511255	WITHOUT_CLASSIFICATION	3.4448874526016294E-8	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999990977555958	WITHOUT_CLASSIFICATION	9.022444041772363E-7	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999935551353019	WITHOUT_CLASSIFICATION	6.444864698153794E-6	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999935551353019	WITHOUT_CLASSIFICATION	6.444864698153794E-6	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999966534921075	WITHOUT_CLASSIFICATION	3.346507892517192E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999997623829094	WITHOUT_CLASSIFICATION	2.3761709057952164E-7	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999987859117093	WITHOUT_CLASSIFICATION	1.2140882906318286E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999354118531	WITHOUT_CLASSIFICATION	6.458814699626349E-8	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999986576305655	WITHOUT_CLASSIFICATION	1.3423694345329617E-6	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999996223586176	WITHOUT_CLASSIFICATION	3.7764138237930196E-7	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999971626261241	WITHOUT_CLASSIFICATION	2.837373875750716E-6	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999976592147316	WITHOUT_CLASSIFICATION	2.340785268499413E-6	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.99999987010592	WITHOUT_CLASSIFICATION	1.2989408005187948E-7	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999997123396444	WITHOUT_CLASSIFICATION	2.8766035567576536E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999989612552322	WITHOUT_CLASSIFICATION	1.0387447678082483E-6	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999927608451	WITHOUT_CLASSIFICATION	7.23915494736287E-9	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999469910323	WITHOUT_CLASSIFICATION	5.3008967762580164E-8	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999998796760191	WITHOUT_CLASSIFICATION	1.2032398090142224E-6	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999999468236498	WITHOUT_CLASSIFICATION	5.317635019311996E-7	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999417500738	WITHOUT_CLASSIFICATION	5.8249926200121915E-8	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999994627803345	WITHOUT_CLASSIFICATION	5.372196654909022E-7	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999992809563047	WITHOUT_CLASSIFICATION	7.190436952362506E-7	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999985311131562	WITHOUT_CLASSIFICATION	1.4688868437625734E-6	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999984119534	WITHOUT_CLASSIFICATION	1.588046579371919E-9	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999987295447299	WITHOUT_CLASSIFICATION	1.270455270146098E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999736972311	WITHOUT_CLASSIFICATION	2.6302768866331203E-8	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999998316179585	WITHOUT_CLASSIFICATION	1.683820414596636E-7	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999974610193	WITHOUT_CLASSIFICATION	2.5389807730655894E-9	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999982036205645	WITHOUT_CLASSIFICATION	1.7963794355259707E-6	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999995800452205	WITHOUT_CLASSIFICATION	4.1995477942021963E-7	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999969827427815	WITHOUT_CLASSIFICATION	3.0172572185639837E-6	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999323771165329	WITHOUT_CLASSIFICATION	6.762288346703515E-5	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999916367306521	WITHOUT_CLASSIFICATION	8.363269347898026E-6	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999588260715212	WITHOUT_CLASSIFICATION	4.1173928478767185E-5	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999972748828223	WITHOUT_CLASSIFICATION	2.725117177653319E-6	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999993939719716	WITHOUT_CLASSIFICATION	6.060280284510004E-7	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999816279759094	WITHOUT_CLASSIFICATION	1.8372024090567543E-5	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999999405624762	WITHOUT_CLASSIFICATION	5.943752381175687E-7	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999979539057086	WITHOUT_CLASSIFICATION	2.0460942913944726E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999636375758	WITHOUT_CLASSIFICATION	3.6362424273372937E-8	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999997358217332	WITHOUT_CLASSIFICATION	2.641782668256417E-7	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999979217182033	WITHOUT_CLASSIFICATION	2.078281796733605E-6	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999636489171432	WITHOUT_CLASSIFICATION	3.635108285676007E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999960769872457	WITHOUT_CLASSIFICATION	3.923012754279167E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999982586453853	WITHOUT_CLASSIFICATION	1.7413546148025687E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937361863016	WITHOUT_CLASSIFICATION	6.26381369840853E-6	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999971996448611	WITHOUT_CLASSIFICATION	2.8003551389452058E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998825380559758	WITHOUT_CLASSIFICATION	1.1746194402422644E-4	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996472712365	WITHOUT_CLASSIFICATION	3.5272876352636715E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9991619840410347	WITHOUT_CLASSIFICATION	8.380159589653686E-4	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9679260494645142	WITHOUT_CLASSIFICATION	0.03207395053548568	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999956520196	WITHOUT_CLASSIFICATION	4.347980434091568E-9	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999994701890151	WITHOUT_CLASSIFICATION	5.29810984823326E-7	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999974559975819	WITHOUT_CLASSIFICATION	2.544002418083665E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966751507265	WITHOUT_CLASSIFICATION	3.3248492734101404E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999768570662	WITHOUT_CLASSIFICATION	2.314293375995312E-8	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999053514700706	WITHOUT_CLASSIFICATION	9.464852992939171E-4	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999998864277444	WITHOUT_CLASSIFICATION	1.1357225563771512E-7	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999956139963592	WITHOUT_CLASSIFICATION	4.386003640853905E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993509366691	WITHOUT_CLASSIFICATION	6.490633309328029E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993509366691	WITHOUT_CLASSIFICATION	6.490633309328029E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999133784866	WITHOUT_CLASSIFICATION	8.662151336181061E-8	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999973378496744	WITHOUT_CLASSIFICATION	2.662150325599016E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999964830137237	WITHOUT_CLASSIFICATION	3.5169862764025547E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999902830647367	WITHOUT_CLASSIFICATION	9.716935263225247E-6	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999980982951948	WITHOUT_CLASSIFICATION	1.9017048051966219E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999947190005226	WITHOUT_CLASSIFICATION	5.280999477429891E-6	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999988432267727	WITHOUT_CLASSIFICATION	1.1567732273655191E-6	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999999925184917	WITHOUT_CLASSIFICATION	7.481508320108796E-9	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999941577605007	WITHOUT_CLASSIFICATION	5.8422394993318785E-6	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999855195032	WITHOUT_CLASSIFICATION	1.448049665689563E-8	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999874218449332	WITHOUT_CLASSIFICATION	1.2578155066748017E-5	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999925533485857	WITHOUT_CLASSIFICATION	7.446651414249035E-6	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999984417998045	WITHOUT_CLASSIFICATION	1.5582001955274183E-6	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999999982318082	WITHOUT_CLASSIFICATION	1.7681917943721757E-8	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999982513377079	WITHOUT_CLASSIFICATION	1.7486622921194402E-6	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999874119551339	WITHOUT_CLASSIFICATION	1.258804486610783E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999982568586654	WITHOUT_CLASSIFICATION	1.7431413345938594E-6	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999984735291284	WITHOUT_CLASSIFICATION	1.5264708716362505E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9997921947057028	WITHOUT_CLASSIFICATION	2.0780529429718136E-4	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999755763628874	WITHOUT_CLASSIFICATION	2.4423637112593558E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999625751307	WITHOUT_CLASSIFICATION	3.742486928315241E-8	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999484376130772	WITHOUT_CLASSIFICATION	5.156238692286728E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999563970346537	WITHOUT_CLASSIFICATION	4.360296534643435E-5	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9996346245441426	WITHOUT_CLASSIFICATION	3.6537545585729964E-4	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9988673912774966	WITHOUT_CLASSIFICATION	0.0011326087225033714	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9774897631476004	WITHOUT_CLASSIFICATION	0.022510236852399626	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999973528636776	WITHOUT_CLASSIFICATION	2.647136322311515E-6	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995810889385354	WITHOUT_CLASSIFICATION	4.189110614647383E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999984067863259	WITHOUT_CLASSIFICATION	1.5932136741008019E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999563970346537	WITHOUT_CLASSIFICATION	4.360296534643435E-5	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999943535820277	WITHOUT_CLASSIFICATION	5.646417972328113E-6	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999975680834007	WITHOUT_CLASSIFICATION	2.4319165993325927E-6	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9999734757166845	WITHOUT_CLASSIFICATION	2.6524283315517092E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999915304276337	WITHOUT_CLASSIFICATION	8.469572366324471E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999959134475	WITHOUT_CLASSIFICATION	4.0865525557569414E-9	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999998941926552	WITHOUT_CLASSIFICATION	1.0580734480046852E-7	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999861218199384	WITHOUT_CLASSIFICATION	1.3878180061645339E-5	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998110255731	WITHOUT_CLASSIFICATION	1.8897442686041574E-7	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999999042885079	WITHOUT_CLASSIFICATION	9.571149207522001E-8	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999915304276337	WITHOUT_CLASSIFICATION	8.469572366324471E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999021584351	WITHOUT_CLASSIFICATION	9.784156484697071E-8	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998634942311	WITHOUT_CLASSIFICATION	1.3650576890568148E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9988899247880598	WITHOUT_CLASSIFICATION	0.0011100752119401667	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999859981389415	WITHOUT_CLASSIFICATION	1.4001861058425594E-5	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999992889043692	WITHOUT_CLASSIFICATION	7.110956307755716E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999989612552322	WITHOUT_CLASSIFICATION	1.0387447678082483E-6	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999542846945	WITHOUT_CLASSIFICATION	4.57153055019481E-8	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999995316664523	WITHOUT_CLASSIFICATION	4.683335476685236E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999984845406831	WITHOUT_CLASSIFICATION	1.515459316927903E-6	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9997677654254093	WITHOUT_CLASSIFICATION	2.322345745906194E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999999955043841	WITHOUT_CLASSIFICATION	4.4956158911950856E-8	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999990494645673	WITHOUT_CLASSIFICATION	9.50535432829415E-7	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999989313195	WITHOUT_CLASSIFICATION	1.0686804690868272E-9	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999992198550705	WITHOUT_CLASSIFICATION	7.801449295616656E-7	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999999052578055	WITHOUT_CLASSIFICATION	9.474219450040194E-8	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999999529736566	WITHOUT_CLASSIFICATION	4.7026343393378595E-7	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999807633677257	WITHOUT_CLASSIFICATION	1.9236632274276277E-5	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999930625458	WITHOUT_CLASSIFICATION	6.937454183817703E-9	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999994820439774	WITHOUT_CLASSIFICATION	5.179560225086095E-7	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999715981214191	WITHOUT_CLASSIFICATION	2.840187858090568E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999969939087	WITHOUT_CLASSIFICATION	3.0060911541545773E-9	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999992732640286	WITHOUT_CLASSIFICATION	7.267359714636777E-7	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999999502363954	WITHOUT_CLASSIFICATION	4.976360460749617E-7	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999982496357994	WITHOUT_CLASSIFICATION	1.7503642006286979E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999989696390786	WITHOUT_CLASSIFICATION	1.0303609213598746E-6	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999468944187229	WITHOUT_CLASSIFICATION	5.3105581277222754E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999776222180193	WITHOUT_CLASSIFICATION	2.237778198069401E-5	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999808381534	WITHOUT_CLASSIFICATION	1.91618465420874E-8	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999934243146135	WITHOUT_CLASSIFICATION	6.575685386483643E-6	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999997108227697	WITHOUT_CLASSIFICATION	2.89177230314121E-7	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999572812918031	WITHOUT_CLASSIFICATION	4.271870819687203E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999993179660748	WITHOUT_CLASSIFICATION	6.820339251692332E-7	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999941784160312	WITHOUT_CLASSIFICATION	5.821583968859034E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995258950783	WITHOUT_CLASSIFICATION	4.7410492166851324E-7	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818734797477	WITHOUT_CLASSIFICATION	1.812652025235592E-5	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.998440384364769	WITHOUT_CLASSIFICATION	0.0015596156352310111	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999989994857869	WITHOUT_CLASSIFICATION	1.0005142132198487E-6	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999868257395907	WITHOUT_CLASSIFICATION	1.3174260409336784E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999899820292	WITHOUT_CLASSIFICATION	1.0017970880962729E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999899820292	WITHOUT_CLASSIFICATION	1.0017970880962729E-8	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999989927904	WITHOUT_CLASSIFICATION	1.0072096696866043E-9	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999796718284338	WITHOUT_CLASSIFICATION	2.0328171566083483E-5	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999991403149886	WITHOUT_CLASSIFICATION	8.596850114867998E-7	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999606144286634	WITHOUT_CLASSIFICATION	3.9385571336609394E-5	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999998152715863	WITHOUT_CLASSIFICATION	1.847284136941744E-6	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9992958786115579	WITHOUT_CLASSIFICATION	7.041213884421751E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999918317930833	WITHOUT_CLASSIFICATION	8.168206916753417E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999935766557171	WITHOUT_CLASSIFICATION	6.423344282879669E-6	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999999773331315	WITHOUT_CLASSIFICATION	2.2666868498535528E-7	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999975222498939	WITHOUT_CLASSIFICATION	2.4777501059762038E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9961784730387875	WITHOUT_CLASSIFICATION	0.003821526961212543	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999934431475	WITHOUT_CLASSIFICATION	6.556852439883614E-9	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999953922030529	WITHOUT_CLASSIFICATION	4.607796947121418E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999899820292	WITHOUT_CLASSIFICATION	1.0017970880962729E-8	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999993912453729	WITHOUT_CLASSIFICATION	6.087546270967852E-6	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999952277910816	WITHOUT_CLASSIFICATION	4.772208918426738E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992678509757403	WITHOUT_CLASSIFICATION	7.321490242596318E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999999562142403	WITHOUT_CLASSIFICATION	4.378575967431952E-8	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999984942777295	WITHOUT_CLASSIFICATION	1.5057222705692444E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999981734495835	WITHOUT_CLASSIFICATION	1.8265504164603217E-6	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999843513088872	WITHOUT_CLASSIFICATION	1.5648691112851728E-5	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999992278609	WITHOUT_CLASSIFICATION	7.721390240279269E-10	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999998593967871	WITHOUT_CLASSIFICATION	1.4060321289564449E-6	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999999687515243	WITHOUT_CLASSIFICATION	3.1248475633972376E-8	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999982649351581	WITHOUT_CLASSIFICATION	1.7350648419281376E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995258950783	WITHOUT_CLASSIFICATION	4.7410492166851324E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999899820292	WITHOUT_CLASSIFICATION	1.0017970880962729E-8	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999529811061411	WITHOUT_CLASSIFICATION	4.701889385904528E-5	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999426482712	WITHOUT_CLASSIFICATION	5.735172874727717E-8	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999993332044961	WITHOUT_CLASSIFICATION	6.66795503948647E-7	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999892804929815	WITHOUT_CLASSIFICATION	1.0719507018554252E-5	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999987026069	WITHOUT_CLASSIFICATION	1.2973930769158082E-9	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999898495319582	WITHOUT_CLASSIFICATION	1.0150468041768724E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981656935244	WITHOUT_CLASSIFICATION	1.8343064756274056E-6	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999914066478	WITHOUT_CLASSIFICATION	8.593352195682608E-8	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999994419601428	WITHOUT_CLASSIFICATION	5.580398572061817E-7	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999667521317038	WITHOUT_CLASSIFICATION	3.324786829624017E-5	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999998034254244	WITHOUT_CLASSIFICATION	1.9657457559639046E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999599458900644	WITHOUT_CLASSIFICATION	4.005410993546148E-5	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999992247859	WITHOUT_CLASSIFICATION	7.752141318235968E-10	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999999788379362	WITHOUT_CLASSIFICATION	2.1162063807071306E-7	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999988492601435	WITHOUT_CLASSIFICATION	1.1507398564891387E-6	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999977787934463	WITHOUT_CLASSIFICATION	2.2212065537142452E-6	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999998607287519	WITHOUT_CLASSIFICATION	1.3927124803099394E-7	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9997909968784524	WITHOUT_CLASSIFICATION	2.0900312154761876E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999996308890078	WITHOUT_CLASSIFICATION	3.691109923056552E-7	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999943530540318	WITHOUT_CLASSIFICATION	5.646945968225447E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999980323468016	WITHOUT_CLASSIFICATION	1.9676531984182243E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999980323468016	WITHOUT_CLASSIFICATION	1.9676531984182243E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999931193928814	WITHOUT_CLASSIFICATION	6.880607118574506E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999992162027258	WITHOUT_CLASSIFICATION	7.837972741448418E-7	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999970661611602	WITHOUT_CLASSIFICATION	2.9338388397889576E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999573645770552	WITHOUT_CLASSIFICATION	4.263542294474712E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999995866135641	WITHOUT_CLASSIFICATION	4.1338643590688014E-6	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999929816806093	WITHOUT_CLASSIFICATION	7.018319390598083E-6	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999997979136367	WITHOUT_CLASSIFICATION	2.0208636329276166E-7	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999166717771838	WITHOUT_CLASSIFICATION	8.332822281623245E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999166717771838	WITHOUT_CLASSIFICATION	8.332822281623245E-5	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999761855876425	WITHOUT_CLASSIFICATION	2.3814412357652513E-5	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999999176483969	WITHOUT_CLASSIFICATION	8.235160302627432E-8	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999812502903669	WITHOUT_CLASSIFICATION	1.874970963307392E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999567844249553	WITHOUT_CLASSIFICATION	4.321557504482081E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999567844249553	WITHOUT_CLASSIFICATION	4.321557504482081E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999567844249553	WITHOUT_CLASSIFICATION	4.321557504482081E-5	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999764155809752	WITHOUT_CLASSIFICATION	2.3584419024756855E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999983402332148	WITHOUT_CLASSIFICATION	1.6597667852114123E-6	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999354089628	WITHOUT_CLASSIFICATION	6.459103726516818E-8	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.6489357716026821	WITHOUT_CLASSIFICATION	0.35106422839731777	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999908570392916	WITHOUT_CLASSIFICATION	9.142960708385027E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999899820292	WITHOUT_CLASSIFICATION	1.0017970880962729E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999899820292	WITHOUT_CLASSIFICATION	1.0017970880962729E-8	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999837626598485	WITHOUT_CLASSIFICATION	1.6237340151613193E-5	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.99999999519166	WITHOUT_CLASSIFICATION	4.808339947010217E-9	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999601527113887	WITHOUT_CLASSIFICATION	3.9847288611307E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999690153644	WITHOUT_CLASSIFICATION	3.098463564371903E-8	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.999404073446625	WITHOUT_CLASSIFICATION	5.959265533751093E-4	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999978494874788	WITHOUT_CLASSIFICATION	2.1505125211013475E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9992774109526834	WITHOUT_CLASSIFICATION	7.225890473166271E-4	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999701393847548	WITHOUT_CLASSIFICATION	2.9860615245233847E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999898525074083	WITHOUT_CLASSIFICATION	1.014749259167902E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997875103721	WITHOUT_CLASSIFICATION	2.1248962788482032E-7	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999820253707721	WITHOUT_CLASSIFICATION	1.7974629227860677E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999999744946687	WITHOUT_CLASSIFICATION	2.550533130846589E-7	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999999744946687	WITHOUT_CLASSIFICATION	2.550533130846589E-7	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999997796820271	WITHOUT_CLASSIFICATION	2.203179728241736E-7	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999997796820271	WITHOUT_CLASSIFICATION	2.203179728241736E-7	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999998327842174	WITHOUT_CLASSIFICATION	1.6721578249770503E-7	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999995219432551	WITHOUT_CLASSIFICATION	4.780567447885245E-7	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999995219432551	WITHOUT_CLASSIFICATION	4.780567447885245E-7	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999997825174473	WITHOUT_CLASSIFICATION	2.1748255288236354E-7	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999992084377783	WITHOUT_CLASSIFICATION	7.915622215883685E-7	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998321155931	WITHOUT_CLASSIFICATION	1.6788440678675857E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999980323468016	WITHOUT_CLASSIFICATION	1.9676531984182243E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999150715201	WITHOUT_CLASSIFICATION	8.492847986990594E-8	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999992084377783	WITHOUT_CLASSIFICATION	7.915622215883685E-7	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.999998584152075	WITHOUT_CLASSIFICATION	1.415847925076096E-6	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999961023794275	WITHOUT_CLASSIFICATION	3.897620572468494E-6	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999999356062783	WITHOUT_CLASSIFICATION	6.43937217151657E-8	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999999554920808	WITHOUT_CLASSIFICATION	4.450791927379467E-8	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999992407093	WITHOUT_CLASSIFICATION	7.592907529187589E-10	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999999488761623	WITHOUT_CLASSIFICATION	5.112383776188644E-8	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999995728296996	WITHOUT_CLASSIFICATION	4.271703003304452E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9971900059278485	WITHOUT_CLASSIFICATION	0.002809994072151526	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9956009085026652	WITHOUT_CLASSIFICATION	0.004399091497334748	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9998300098263893	WITHOUT_CLASSIFICATION	1.699901736106182E-4	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999993883592646	WITHOUT_CLASSIFICATION	6.116407354883104E-7	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999523825083941	WITHOUT_CLASSIFICATION	4.761749160586293E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999013980023	WITHOUT_CLASSIFICATION	9.860199769917062E-7	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999999112512608	WITHOUT_CLASSIFICATION	8.874873915990262E-8	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9463314746779393	WITHOUT_CLASSIFICATION	0.05366852532206079	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999938200249471	WITHOUT_CLASSIFICATION	6.179975052962966E-6	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999633163408	WITHOUT_CLASSIFICATION	3.6683659181109865E-8	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998062459498	WITHOUT_CLASSIFICATION	1.937540502196098E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998062459498	WITHOUT_CLASSIFICATION	1.937540502196098E-7	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999995584480299	WITHOUT_CLASSIFICATION	4.4155197003989793E-7	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999993824176322	WITHOUT_CLASSIFICATION	6.175823678104514E-7	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999999923657625	WITHOUT_CLASSIFICATION	7.634237493985791E-8	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999984919892575	WITHOUT_CLASSIFICATION	1.5080107425270915E-6	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999994324114214	WITHOUT_CLASSIFICATION	5.675885786419584E-7	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9998419421015329	WITHOUT_CLASSIFICATION	1.5805789846712648E-4	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999485350936	WITHOUT_CLASSIFICATION	5.1464906353706296E-8	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999998002845755	WITHOUT_CLASSIFICATION	1.9971542449083337E-6	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999978708704343	WITHOUT_CLASSIFICATION	2.1291295656156223E-6	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999889964651	WITHOUT_CLASSIFICATION	1.1003534862936625E-8	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999998481120699	WITHOUT_CLASSIFICATION	1.5188793015178553E-7	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999599458900644	WITHOUT_CLASSIFICATION	4.005410993546148E-5	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999642716629	WITHOUT_CLASSIFICATION	3.5728337044480445E-8	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999959111806596	WITHOUT_CLASSIFICATION	4.088819340400918E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999969093380034	WITHOUT_CLASSIFICATION	3.0906619966110577E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999936726744448	WITHOUT_CLASSIFICATION	6.32732555517873E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996744005495	WITHOUT_CLASSIFICATION	3.2559945054049566E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996744005495	WITHOUT_CLASSIFICATION	3.2559945054049566E-7	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999993141961245	WITHOUT_CLASSIFICATION	6.858038754796151E-7	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9994527519267072	WITHOUT_CLASSIFICATION	5.472480732927996E-4	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9992352721419338	WITHOUT_CLASSIFICATION	7.647278580662117E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9993081207041373	WITHOUT_CLASSIFICATION	6.918792958627728E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.999909492784786	WITHOUT_CLASSIFICATION	9.050721521389637E-5	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.999994551673893	WITHOUT_CLASSIFICATION	5.448326107036875E-6	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999994195510831	WITHOUT_CLASSIFICATION	5.804489169169889E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999884911567675	WITHOUT_CLASSIFICATION	1.1508843232471538E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999899762847744	WITHOUT_CLASSIFICATION	1.0023715225689826E-5	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999995847506822	WITHOUT_CLASSIFICATION	4.152493177586286E-7	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999985321944864	WITHOUT_CLASSIFICATION	1.4678055136185248E-6	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999884911567675	WITHOUT_CLASSIFICATION	1.1508843232471538E-5	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998184393042028	WITHOUT_CLASSIFICATION	1.815606957972114E-4	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999701519294	WITHOUT_CLASSIFICATION	2.9848070603166126E-8	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999224964361	WITHOUT_CLASSIFICATION	7.750356392309127E-8	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999955614494117	WITHOUT_CLASSIFICATION	4.438550588281452E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999994763529152	WITHOUT_CLASSIFICATION	5.23647084709077E-7	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999997178434618	WITHOUT_CLASSIFICATION	2.821565382568103E-7	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999887381603	WITHOUT_CLASSIFICATION	1.126183965972588E-8	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999995131078082	WITHOUT_CLASSIFICATION	4.868921916727624E-7	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999995662604715	WITHOUT_CLASSIFICATION	4.337395284645869E-7	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999953435349739	WITHOUT_CLASSIFICATION	4.6564650260954434E-5	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998587476010744	WITHOUT_CLASSIFICATION	1.41252398925526E-4	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999963030656369	WITHOUT_CLASSIFICATION	3.6969343631258386E-6	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999487206925	WITHOUT_CLASSIFICATION	5.12793075596202E-8	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999994010308048	WITHOUT_CLASSIFICATION	5.989691951922381E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999913574936558	WITHOUT_CLASSIFICATION	8.642506344164576E-6	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999809374059	WITHOUT_CLASSIFICATION	1.906259405257781E-8	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999389521003	WITHOUT_CLASSIFICATION	6.104789973444534E-8	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999414510263089	WITHOUT_CLASSIFICATION	5.854897369105038E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998729471141353	WITHOUT_CLASSIFICATION	1.2705288586469218E-4	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999924975987	WITHOUT_CLASSIFICATION	7.502401269843143E-9	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999973283154651	WITHOUT_CLASSIFICATION	2.6716845349392683E-6	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.999993359296	WITHOUT_CLASSIFICATION	6.640703999946133E-6	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9948855633445636	WITHOUT_CLASSIFICATION	0.005114436655436485	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999849544396072	WITHOUT_CLASSIFICATION	1.504556039263986E-5	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999980553995	WITHOUT_CLASSIFICATION	1.94460043799648E-9	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999939269546321	WITHOUT_CLASSIFICATION	6.0730453678870265E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999991786023601	WITHOUT_CLASSIFICATION	8.21397639854134E-7	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999997493987494	WITHOUT_CLASSIFICATION	2.50601250698331E-7	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999996715237814	WITHOUT_CLASSIFICATION	3.284762186132437E-7	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.999999904712547	WITHOUT_CLASSIFICATION	9.528745295681092E-8	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999999930137603	WITHOUT_CLASSIFICATION	6.986239703438605E-8	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999334493050228	WITHOUT_CLASSIFICATION	6.655069497722528E-5	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.998325130689804	WITHOUT_CLASSIFICATION	0.00167486931019592	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999944469309	WITHOUT_CLASSIFICATION	5.5530691502171166E-9	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999995893634929	WITHOUT_CLASSIFICATION	4.1063650712771993E-7	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999999040461005	WITHOUT_CLASSIFICATION	9.595389948602318E-8	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999117377469	WITHOUT_CLASSIFICATION	8.826225314038379E-8	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999996717772247	WITHOUT_CLASSIFICATION	3.282227752728352E-7	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999999978942096	WITHOUT_CLASSIFICATION	2.1057904064579405E-8	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998557158948577	WITHOUT_CLASSIFICATION	1.4428410514238395E-4	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999999892086434	WITHOUT_CLASSIFICATION	1.0791356592043835E-7	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999947051853753	WITHOUT_CLASSIFICATION	5.294814624730695E-6	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999013383256	WITHOUT_CLASSIFICATION	9.866167430364124E-8	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999951765224	WITHOUT_CLASSIFICATION	4.823477628052117E-9	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999998934430535	WITHOUT_CLASSIFICATION	1.0655694648265943E-7	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999997945859137	WITHOUT_CLASSIFICATION	2.0541408615435154E-7	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999997011016092	WITHOUT_CLASSIFICATION	2.9889839079606945E-6	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999999517468761	WITHOUT_CLASSIFICATION	4.825312385840477E-8	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.99999516865214	WITHOUT_CLASSIFICATION	4.831347859938388E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999937797713155	WITHOUT_CLASSIFICATION	6.220228684426715E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992441300879	WITHOUT_CLASSIFICATION	7.558699122017034E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999995097638728	WITHOUT_CLASSIFICATION	4.902361272572374E-7	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999969365491	WITHOUT_CLASSIFICATION	3.0634509772425703E-9	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999385802857227	WITHOUT_CLASSIFICATION	6.141971427723931E-5	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999574409317	WITHOUT_CLASSIFICATION	4.255906816410139E-8	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999976129164814	WITHOUT_CLASSIFICATION	2.3870835186609408E-6	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999625968404353	WITHOUT_CLASSIFICATION	3.7403159564738336E-5	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999801005455194	WITHOUT_CLASSIFICATION	1.9899454480510087E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999999466820448	WITHOUT_CLASSIFICATION	5.331795509470656E-8	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999884401573592	WITHOUT_CLASSIFICATION	1.1559842640795235E-4	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999998626077264	WITHOUT_CLASSIFICATION	1.3739227360601946E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999995533272303	WITHOUT_CLASSIFICATION	4.4667276962959795E-7	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.99824677081337	WITHOUT_CLASSIFICATION	0.001753229186630073	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.7699238502683396	DEFECT	0.23007614973166043	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999607663748843	WITHOUT_CLASSIFICATION	3.923362511567318E-5	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999940763637655	WITHOUT_CLASSIFICATION	5.923636234578031E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992441300879	WITHOUT_CLASSIFICATION	7.558699122017034E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999995407984085	WITHOUT_CLASSIFICATION	4.592015915298135E-7	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.99995885037191	WITHOUT_CLASSIFICATION	4.114962809006353E-5	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998748585088	WITHOUT_CLASSIFICATION	1.2514149127258775E-7	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998547149632	WITHOUT_CLASSIFICATION	1.452850366717163E-7	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998637992229124	WITHOUT_CLASSIFICATION	1.3620077708762093E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999267979883281	WITHOUT_CLASSIFICATION	7.320201167192124E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999899762847744	WITHOUT_CLASSIFICATION	1.0023715225689826E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999996271394586	WITHOUT_CLASSIFICATION	3.728605414496379E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999995893634929	WITHOUT_CLASSIFICATION	4.1063650712771993E-7	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9918062653168245	WITHOUT_CLASSIFICATION	0.008193734683175505	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999999174634531	WITHOUT_CLASSIFICATION	8.25365469014357E-7	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999610528045	WITHOUT_CLASSIFICATION	3.894719549894585E-8	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999600482005	WITHOUT_CLASSIFICATION	3.995179954594888E-8	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999992874283894	WITHOUT_CLASSIFICATION	7.125716106266622E-7	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9996199440330249	WITHOUT_CLASSIFICATION	3.8005596697507593E-4	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999988563663191	WITHOUT_CLASSIFICATION	1.143633680869495E-6	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999961393886405	WITHOUT_CLASSIFICATION	3.860611359428429E-6	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9942524021162359	WITHOUT_CLASSIFICATION	0.005747597883764226	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999992858928841	WITHOUT_CLASSIFICATION	7.141071158342379E-7	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998952734833	WITHOUT_CLASSIFICATION	1.0472651671583092E-7	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999997761714403	WITHOUT_CLASSIFICATION	2.2382855955012466E-7	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997748434107	WITHOUT_CLASSIFICATION	2.2515658935789535E-7	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997748434107	WITHOUT_CLASSIFICATION	2.2515658935789535E-7	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998850205216	WITHOUT_CLASSIFICATION	1.1497947832448599E-7	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999999055393514	WITHOUT_CLASSIFICATION	9.44606486207822E-8	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999750609182	WITHOUT_CLASSIFICATION	2.4939081880127307E-8	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999999999463129	WITHOUT_CLASSIFICATION	5.368709771524838E-10	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998986655607	WITHOUT_CLASSIFICATION	1.013344392921079E-7	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999992660015179	WITHOUT_CLASSIFICATION	7.339984820016857E-7	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999510494445827	WITHOUT_CLASSIFICATION	4.895055541730175E-5	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999970340525566	WITHOUT_CLASSIFICATION	2.9659474433679004E-6	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999998709349819	WITHOUT_CLASSIFICATION	1.2906501817941376E-7	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999995536083579	WITHOUT_CLASSIFICATION	4.4639164210004505E-6	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999340733055148	WITHOUT_CLASSIFICATION	6.592669448527196E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999880088038889	WITHOUT_CLASSIFICATION	1.1991196111143196E-5	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999835638538427	WITHOUT_CLASSIFICATION	1.6436146157289318E-5	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997897711826	WITHOUT_CLASSIFICATION	2.102288173148318E-7	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998084186814343	WITHOUT_CLASSIFICATION	1.915813185657215E-4	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999645086609679	WITHOUT_CLASSIFICATION	3.54913390321041E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999918534582332	WITHOUT_CLASSIFICATION	8.146541766782772E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999971513402	WITHOUT_CLASSIFICATION	2.848659667150458E-9	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999885107809153	WITHOUT_CLASSIFICATION	1.1489219084553233E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999788887816	WITHOUT_CLASSIFICATION	2.1111218381286362E-8	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9997425811916258	WITHOUT_CLASSIFICATION	2.574188083741696E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999712943398	WITHOUT_CLASSIFICATION	2.8705660158190596E-8	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999998523489657	WITHOUT_CLASSIFICATION	1.4765103430190194E-6	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999829035089262	WITHOUT_CLASSIFICATION	1.7096491073776146E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999999299426511	WITHOUT_CLASSIFICATION	7.005734887412708E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992282541942	WITHOUT_CLASSIFICATION	7.717458058219692E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9996493287802796	WITHOUT_CLASSIFICATION	3.506712197203931E-4	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999962026947826	WITHOUT_CLASSIFICATION	3.7973052172978276E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999959095533532	WITHOUT_CLASSIFICATION	4.0904466467943465E-6	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998124144068464	WITHOUT_CLASSIFICATION	1.8758559315350351E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9878208083202911	WITHOUT_CLASSIFICATION	0.012179191679708967	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999306642542718	WITHOUT_CLASSIFICATION	6.933574572822345E-5	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999998892272096	WITHOUT_CLASSIFICATION	1.1077279032067733E-7	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999868717583298	WITHOUT_CLASSIFICATION	1.3128241670298103E-5	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999998432089282	WITHOUT_CLASSIFICATION	1.5679107177871202E-7	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999993527907064	WITHOUT_CLASSIFICATION	6.472092935479031E-7	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999932827056975	WITHOUT_CLASSIFICATION	6.717294302354827E-6	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999963577221069	WITHOUT_CLASSIFICATION	3.642277893103534E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999653586465	WITHOUT_CLASSIFICATION	3.464135339707212E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999992918793252	WITHOUT_CLASSIFICATION	7.081206746782262E-7	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931130658352	WITHOUT_CLASSIFICATION	6.886934164791174E-6	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999515813138	WITHOUT_CLASSIFICATION	4.8418686202849896E-8	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999649157530837	WITHOUT_CLASSIFICATION	3.508424691630744E-5	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999900581503977	WITHOUT_CLASSIFICATION	9.941849602235134E-6	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999995693156093	WITHOUT_CLASSIFICATION	4.30684390635616E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999447206393643	WITHOUT_CLASSIFICATION	5.5279360635710846E-5	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9982605431984914	WITHOUT_CLASSIFICATION	0.0017394568015086256	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999452561489	WITHOUT_CLASSIFICATION	5.474385106489638E-8	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999755200033	WITHOUT_CLASSIFICATION	2.4479996750273317E-8	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998389378226	WITHOUT_CLASSIFICATION	1.6106217746558524E-7	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999969321069019	WITHOUT_CLASSIFICATION	3.067893098103295E-5	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999999995558703	WITHOUT_CLASSIFICATION	4.441296956568756E-9	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999036815221	WITHOUT_CLASSIFICATION	9.631847781987511E-8	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999994376518611	WITHOUT_CLASSIFICATION	5.62348138943348E-7	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999997906718565	WITHOUT_CLASSIFICATION	2.093281435044083E-7	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9998720485568824	WITHOUT_CLASSIFICATION	1.2795144311764743E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999941245630468	WITHOUT_CLASSIFICATION	5.875436953133132E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999997713396688	WITHOUT_CLASSIFICATION	2.286603312328687E-7	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999989662193511	WITHOUT_CLASSIFICATION	1.0337806488023656E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999667726539555	WITHOUT_CLASSIFICATION	3.322734604450008E-5	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999713807077938	WITHOUT_CLASSIFICATION	2.8619292206247295E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999981429338398	WITHOUT_CLASSIFICATION	1.8570661601623504E-6	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999995121577133	WITHOUT_CLASSIFICATION	4.878422866896069E-7	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999927908264	WITHOUT_CLASSIFICATION	7.209173613021523E-9	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999987271792363	WITHOUT_CLASSIFICATION	1.272820763671212E-6	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999828199870332	WITHOUT_CLASSIFICATION	1.7180012966817048E-5	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997526990226	WITHOUT_CLASSIFICATION	2.4730097732405495E-7	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999991391443285	WITHOUT_CLASSIFICATION	8.608556715058583E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998618193641	WITHOUT_CLASSIFICATION	1.3818063598631419E-7	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999010879987	WITHOUT_CLASSIFICATION	9.891200119246757E-8	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998618193641	WITHOUT_CLASSIFICATION	1.3818063598631419E-7	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999900612304684	WITHOUT_CLASSIFICATION	9.938769531460564E-6	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999982013014468	WITHOUT_CLASSIFICATION	1.7986985532541475E-6	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999986423530383	WITHOUT_CLASSIFICATION	1.3576469616729917E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999474133605	WITHOUT_CLASSIFICATION	5.258663946224266E-8	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999995760029551	WITHOUT_CLASSIFICATION	4.2399704494276346E-7	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999998278798837	WITHOUT_CLASSIFICATION	1.7212011626342164E-7	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999914437772767	WITHOUT_CLASSIFICATION	8.556222723367133E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999998652974328	WITHOUT_CLASSIFICATION	1.3470256727927198E-7	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9996637501806037	WITHOUT_CLASSIFICATION	3.362498193962532E-4	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998997157392	WITHOUT_CLASSIFICATION	1.0028426071882067E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999996784886414	WITHOUT_CLASSIFICATION	3.2151135867100915E-7	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999944761709324	WITHOUT_CLASSIFICATION	5.523829067547297E-6	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999999999594149	WITHOUT_CLASSIFICATION	4.0585095344102626E-10	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998434928283342	WITHOUT_CLASSIFICATION	1.5650717166588765E-4	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9998528098569408	WITHOUT_CLASSIFICATION	1.4719014305923702E-4	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999473072906	WITHOUT_CLASSIFICATION	5.2692709320575955E-8	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999993831157522	WITHOUT_CLASSIFICATION	6.168842477862187E-7	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999995147222039	WITHOUT_CLASSIFICATION	4.852777959691775E-7	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999970489581	WITHOUT_CLASSIFICATION	2.951041787372799E-9	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999648726969	WITHOUT_CLASSIFICATION	3.5127303148214614E-8	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999972575583883	WITHOUT_CLASSIFICATION	2.742441611608754E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999956678684065	WITHOUT_CLASSIFICATION	4.332131593488818E-6	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9970786300530775	WITHOUT_CLASSIFICATION	0.0029213699469223696	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999947605830758	WITHOUT_CLASSIFICATION	5.239416924275884E-6	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999995838813714	WITHOUT_CLASSIFICATION	4.161186285714201E-7	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996525613884073	WITHOUT_CLASSIFICATION	3.474386115926435E-4	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999611225103144	WITHOUT_CLASSIFICATION	3.8877489685575964E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999944765665528	WITHOUT_CLASSIFICATION	5.5234334471719776E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998922106177	WITHOUT_CLASSIFICATION	1.077893822776866E-7	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9998551116844843	WITHOUT_CLASSIFICATION	1.4488831551564462E-4	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999847212745305	WITHOUT_CLASSIFICATION	1.5278725469482863E-5	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9804438661480899	WITHOUT_CLASSIFICATION	0.019556133851910178	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9996273156976293	WITHOUT_CLASSIFICATION	3.726843023707496E-4	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999679676325257	WITHOUT_CLASSIFICATION	3.203236747433811E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999824623442617	WITHOUT_CLASSIFICATION	1.753765573826631E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.999995118270908	WITHOUT_CLASSIFICATION	4.8817290919238164E-6	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.999999068982607	WITHOUT_CLASSIFICATION	9.310173928529114E-7	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999266807136	WITHOUT_CLASSIFICATION	7.331928643336753E-8	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999247083512938	WITHOUT_CLASSIFICATION	7.529164870622466E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999292771953	WITHOUT_CLASSIFICATION	7.072280466972392E-8	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999997868688945	WITHOUT_CLASSIFICATION	2.1313110552994843E-7	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999711714553454	WITHOUT_CLASSIFICATION	2.8828544654541448E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9979290151077975	WITHOUT_CLASSIFICATION	0.0020709848922024128	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996525613884073	WITHOUT_CLASSIFICATION	3.474386115926435E-4	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999342699485527	WITHOUT_CLASSIFICATION	6.573005144724522E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999962172375721	WITHOUT_CLASSIFICATION	3.7827624279089885E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9988169445075713	WITHOUT_CLASSIFICATION	0.0011830554924286577	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999751725930333	WITHOUT_CLASSIFICATION	2.4827406966764956E-5	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999993278498519	WITHOUT_CLASSIFICATION	6.721501480864303E-7	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999995879154566	WITHOUT_CLASSIFICATION	4.1208454341583673E-7	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999998180957094	WITHOUT_CLASSIFICATION	1.8190429072533197E-7	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.8649506362635994	DEFECT	0.13504936373640067	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999997334121083	WITHOUT_CLASSIFICATION	2.665878916210612E-7	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999497414596249	WITHOUT_CLASSIFICATION	5.0258540375165064E-5	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999971103379868	WITHOUT_CLASSIFICATION	2.889662013209601E-6	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.99999999555057	WITHOUT_CLASSIFICATION	4.4494301004195845E-9	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999712434316086	WITHOUT_CLASSIFICATION	2.8756568391416616E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999707921158563	WITHOUT_CLASSIFICATION	2.92078841437729E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999998953886619	WITHOUT_CLASSIFICATION	1.0461133822983232E-7	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999991048866	WITHOUT_CLASSIFICATION	8.951133671030538E-10	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999696918632	WITHOUT_CLASSIFICATION	3.0308136813456144E-8	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999443547811	WITHOUT_CLASSIFICATION	5.564521877849155E-8	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999952924390595	WITHOUT_CLASSIFICATION	4.707560940489019E-6	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999342699485527	WITHOUT_CLASSIFICATION	6.573005144724522E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999909540989458	WITHOUT_CLASSIFICATION	9.045901054287575E-6	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998346680787977	WITHOUT_CLASSIFICATION	1.6533192120232051E-4	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.99999882396743	WITHOUT_CLASSIFICATION	1.1760325699044223E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999290556137	WITHOUT_CLASSIFICATION	7.094438624402111E-8	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999151855811914	WITHOUT_CLASSIFICATION	8.481441880856425E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9996987707472191	WITHOUT_CLASSIFICATION	3.0122925278084874E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9996987707472191	WITHOUT_CLASSIFICATION	3.0122925278084874E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999973308304138	WITHOUT_CLASSIFICATION	2.669169586278524E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9996987707472191	WITHOUT_CLASSIFICATION	3.0122925278084874E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9996987707472191	WITHOUT_CLASSIFICATION	3.0122925278084874E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9952786178201846	WITHOUT_CLASSIFICATION	0.004721382179815473	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9983223950957866	WITHOUT_CLASSIFICATION	0.001677604904213447	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999460465647	WITHOUT_CLASSIFICATION	5.395343515259704E-8	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999997553458146	WITHOUT_CLASSIFICATION	2.446541853159745E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9988538905804424	WITHOUT_CLASSIFICATION	0.001146109419557685	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999995464635195	WITHOUT_CLASSIFICATION	4.535364805042817E-7	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9938582959189158	WITHOUT_CLASSIFICATION	0.0061417040810842205	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999519202896	WITHOUT_CLASSIFICATION	4.807971047554756E-8	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999806354327316	WITHOUT_CLASSIFICATION	1.936456726840612E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.999995185383646	WITHOUT_CLASSIFICATION	4.814616353994935E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999952137752735	WITHOUT_CLASSIFICATION	4.786224726617772E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999594878280735	WITHOUT_CLASSIFICATION	4.051217192638673E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999989497299452	WITHOUT_CLASSIFICATION	1.0502700547721592E-6	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999984653103954	WITHOUT_CLASSIFICATION	1.5346896046552195E-6	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999999349423653	WITHOUT_CLASSIFICATION	6.505763470461856E-7	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9939882536130036	WITHOUT_CLASSIFICATION	0.006011746386996414	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991919196367	WITHOUT_CLASSIFICATION	8.080803633362392E-7	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999025357212513	WITHOUT_CLASSIFICATION	9.746427874869096E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9995719086738082	WITHOUT_CLASSIFICATION	4.280913261918419E-4	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999979871388761	WITHOUT_CLASSIFICATION	2.012861123768273E-6	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999986269091131	WITHOUT_CLASSIFICATION	1.3730908868538187E-6	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.999996685602544	WITHOUT_CLASSIFICATION	3.3143974561163265E-6	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991919196367	WITHOUT_CLASSIFICATION	8.080803633362392E-7	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999611225103144	WITHOUT_CLASSIFICATION	3.8877489685575964E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999764729719655	WITHOUT_CLASSIFICATION	2.352702803462285E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998692035605	WITHOUT_CLASSIFICATION	1.3079643939534432E-7	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998966775379	WITHOUT_CLASSIFICATION	1.033224621444942E-7	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999980603594927	WITHOUT_CLASSIFICATION	1.939640507337427E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999702086163841	WITHOUT_CLASSIFICATION	2.9791383615925006E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999993642517373	WITHOUT_CLASSIFICATION	6.357482628242135E-7	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9992459240630688	WITHOUT_CLASSIFICATION	7.540759369312191E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999999772178204	WITHOUT_CLASSIFICATION	2.2782179594038647E-7	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999768407889	WITHOUT_CLASSIFICATION	2.3159211122175497E-8	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999793656826708	WITHOUT_CLASSIFICATION	2.063431732926079E-5	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999930278303658	WITHOUT_CLASSIFICATION	6.972169634160475E-6	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999993645923704	WITHOUT_CLASSIFICATION	6.354076295498849E-7	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999882454249	WITHOUT_CLASSIFICATION	1.1754575077070514E-8	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998742909900571	WITHOUT_CLASSIFICATION	1.2570900994284567E-4	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999960188541	WITHOUT_CLASSIFICATION	3.981145790722269E-9	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999993507543075	WITHOUT_CLASSIFICATION	6.492456924924824E-6	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998909341489342	WITHOUT_CLASSIFICATION	1.0906585106583795E-4	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999995181421731	WITHOUT_CLASSIFICATION	4.818578268836941E-7	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999969268982168	WITHOUT_CLASSIFICATION	3.0731017831565737E-6	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998597638332797	WITHOUT_CLASSIFICATION	1.4023616672032655E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999999284482284	WITHOUT_CLASSIFICATION	7.155177163075791E-8	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999999206479967	WITHOUT_CLASSIFICATION	7.935200329559527E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999999772178204	WITHOUT_CLASSIFICATION	2.2782179594038647E-7	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999242139248	WITHOUT_CLASSIFICATION	7.578607517460169E-8	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999998417813799	WITHOUT_CLASSIFICATION	1.5821862002687603E-7	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999930688033688	WITHOUT_CLASSIFICATION	6.931196631263476E-6	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999999305822459	WITHOUT_CLASSIFICATION	6.941775414770304E-8	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999272212577	WITHOUT_CLASSIFICATION	7.277874220142812E-8	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999978286067636	WITHOUT_CLASSIFICATION	2.17139323650102E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999957258690602	WITHOUT_CLASSIFICATION	4.274130939777086E-6	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999999348269184	WITHOUT_CLASSIFICATION	6.517308156662806E-8	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999996200313522	WITHOUT_CLASSIFICATION	3.7996864775270947E-7	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999754521087734	WITHOUT_CLASSIFICATION	2.4547891226704673E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99999996345974	WITHOUT_CLASSIFICATION	3.6540260070721214E-8	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999963390623199	WITHOUT_CLASSIFICATION	3.6609376800475963E-6	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999980619789007	WITHOUT_CLASSIFICATION	1.9380210992428294E-6	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999999683347	WITHOUT_CLASSIFICATION	3.1665442631238494E-11	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999989358905479	WITHOUT_CLASSIFICATION	1.0641094521160519E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999736495317892	WITHOUT_CLASSIFICATION	2.6350468210761805E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999991825397346	WITHOUT_CLASSIFICATION	8.174602652269731E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99999996345974	WITHOUT_CLASSIFICATION	3.6540260070721214E-8	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999999984865186	WITHOUT_CLASSIFICATION	1.513481388649744E-8	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9994062654496749	WITHOUT_CLASSIFICATION	5.93734550325204E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995682674744	WITHOUT_CLASSIFICATION	4.31732525576075E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999999068351426	WITHOUT_CLASSIFICATION	9.31648574200179E-8	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999695990087639	WITHOUT_CLASSIFICATION	3.040099123602401E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.999999958297065	WITHOUT_CLASSIFICATION	4.1702935098112265E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999989358905479	WITHOUT_CLASSIFICATION	1.0641094521160519E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999995550408725	WITHOUT_CLASSIFICATION	4.4495912749587E-6	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944550078103	WITHOUT_CLASSIFICATION	5.544992189648597E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999557581775	WITHOUT_CLASSIFICATION	4.424182265411877E-8	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982794938248	WITHOUT_CLASSIFICATION	1.7205061753080269E-6	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998468495575	WITHOUT_CLASSIFICATION	1.5315044250388976E-6	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998186539413	WITHOUT_CLASSIFICATION	1.8134605867421362E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998308518219	WITHOUT_CLASSIFICATION	1.6914817809948858E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998308518219	WITHOUT_CLASSIFICATION	1.6914817809948858E-7	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999958556965353	WITHOUT_CLASSIFICATION	4.1443034647773595E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999993527344491	WITHOUT_CLASSIFICATION	6.472655509599188E-7	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999988944120096	WITHOUT_CLASSIFICATION	1.1055879904628509E-6	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999689149474131	WITHOUT_CLASSIFICATION	3.108505258682653E-5	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9892803925944186	WITHOUT_CLASSIFICATION	0.010719607405581427	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997687297634	WITHOUT_CLASSIFICATION	2.312702367458111E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953700706454	WITHOUT_CLASSIFICATION	4.629929354531673E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982238907	WITHOUT_CLASSIFICATION	1.7761092999858743E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999996437913957	WITHOUT_CLASSIFICATION	3.562086042880352E-7	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963049967499	WITHOUT_CLASSIFICATION	3.695003250155921E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997687297634	WITHOUT_CLASSIFICATION	2.312702367458111E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953700706454	WITHOUT_CLASSIFICATION	4.629929354531673E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982238907	WITHOUT_CLASSIFICATION	1.7761092999858743E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999997863473896	WITHOUT_CLASSIFICATION	2.1365261034468505E-7	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.999998657294629	WITHOUT_CLASSIFICATION	1.3427053709258844E-6	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999706632124311	WITHOUT_CLASSIFICATION	2.933678756893824E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999997576927578	WITHOUT_CLASSIFICATION	2.423072422378877E-7	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999644538283	WITHOUT_CLASSIFICATION	3.554617172641039E-8	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9996153046504392	WITHOUT_CLASSIFICATION	3.846953495607659E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999944298184744	WITHOUT_CLASSIFICATION	5.570181525504549E-6	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999998962051946	WITHOUT_CLASSIFICATION	1.0379480550396298E-7	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999906209858231	WITHOUT_CLASSIFICATION	9.379014176854838E-6	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999999529615542	WITHOUT_CLASSIFICATION	4.7038445800316375E-7	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999999995903015	WITHOUT_CLASSIFICATION	4.096984917528425E-9	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.998694799912878	WITHOUT_CLASSIFICATION	0.001305200087122084	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997338785493886	WITHOUT_CLASSIFICATION	2.661214506114735E-4	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999995935478047	WITHOUT_CLASSIFICATION	4.0645219532866986E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999986964797737	WITHOUT_CLASSIFICATION	1.3035202263538082E-6	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999788584391649	WITHOUT_CLASSIFICATION	2.1141560835096483E-5	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999998889707867	WITHOUT_CLASSIFICATION	1.1102921334790706E-7	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999938228009363	WITHOUT_CLASSIFICATION	6.177199063676926E-6	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999993427343024	WITHOUT_CLASSIFICATION	6.572656975986756E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999997036907146	WITHOUT_CLASSIFICATION	2.963092855263142E-7	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999978939273908	WITHOUT_CLASSIFICATION	2.10607260925373E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9996345216188566	WITHOUT_CLASSIFICATION	3.6547838114344723E-4	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999624145129	WITHOUT_CLASSIFICATION	3.7585487024951144E-8	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999999875960831	WITHOUT_CLASSIFICATION	1.2403916901316707E-7	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999854681797	WITHOUT_CLASSIFICATION	1.4531820395403787E-8	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999845895551706	WITHOUT_CLASSIFICATION	1.541044482942506E-5	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973547242634	WITHOUT_CLASSIFICATION	2.6452757365451754E-6	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962505727912	WITHOUT_CLASSIFICATION	3.7494272087788367E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999845429454	WITHOUT_CLASSIFICATION	1.5457054543546738E-8	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986685248652	WITHOUT_CLASSIFICATION	1.3314751347228396E-6	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999001651919562	WITHOUT_CLASSIFICATION	9.98348080438169E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999991821827975	WITHOUT_CLASSIFICATION	8.178172026067942E-7	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999991821827975	WITHOUT_CLASSIFICATION	8.178172026067942E-7	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999877669328	WITHOUT_CLASSIFICATION	1.2233067138175902E-8	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999998928626969	WITHOUT_CLASSIFICATION	1.0713730317675746E-7	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999990324508223	WITHOUT_CLASSIFICATION	9.675491776475368E-7	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999599458900644	WITHOUT_CLASSIFICATION	4.005410993546148E-5	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999999425842617	WITHOUT_CLASSIFICATION	5.741573830520545E-8	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999964161228111	WITHOUT_CLASSIFICATION	3.583877189023592E-6	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9999302413193354	WITHOUT_CLASSIFICATION	6.975868066457546E-5	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999999831091078	WITHOUT_CLASSIFICATION	1.6890892246951252E-8	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999995547022358	WITHOUT_CLASSIFICATION	4.452977642476875E-7	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999369057883	WITHOUT_CLASSIFICATION	6.309421177874168E-8	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997888863351	WITHOUT_CLASSIFICATION	2.111136648052004E-7	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982027679738	WITHOUT_CLASSIFICATION	1.797232026217232E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998657280693	WITHOUT_CLASSIFICATION	1.3427193058868476E-7	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999407386448	WITHOUT_CLASSIFICATION	5.926135521490082E-8	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997513037042	WITHOUT_CLASSIFICATION	2.486962957971128E-7	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999844556621	WITHOUT_CLASSIFICATION	1.5544337885939374E-7	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997734273122	WITHOUT_CLASSIFICATION	2.2657268778648928E-7	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998919182771	WITHOUT_CLASSIFICATION	1.080817229079062E-6	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988263041669	WITHOUT_CLASSIFICATION	1.173695832979534E-6	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999965737929	WITHOUT_CLASSIFICATION	3.426207089840933E-8	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999994467261193	WITHOUT_CLASSIFICATION	5.532738807346195E-7	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9978881595273513	WITHOUT_CLASSIFICATION	0.0021118404726486214	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999893367701844	WITHOUT_CLASSIFICATION	1.066322981567352E-5	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999997962950698	WITHOUT_CLASSIFICATION	2.0370493019131974E-6	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999284737677	WITHOUT_CLASSIFICATION	7.15262322913637E-8	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999993943520226	WITHOUT_CLASSIFICATION	6.056479774529635E-7	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999930721095	WITHOUT_CLASSIFICATION	6.9278905955820514E-9	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999964434914677	WITHOUT_CLASSIFICATION	3.556508532380526E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999893367701844	WITHOUT_CLASSIFICATION	1.066322981567352E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999893367701844	WITHOUT_CLASSIFICATION	1.066322981567352E-5	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999982445782578	WITHOUT_CLASSIFICATION	1.7554217420901148E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999997293147492	WITHOUT_CLASSIFICATION	2.7068525072877907E-7	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.99999999544112	WITHOUT_CLASSIFICATION	4.558880055983947E-9	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999976278192988	WITHOUT_CLASSIFICATION	2.3721807012133614E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999013980023	WITHOUT_CLASSIFICATION	9.860199769917062E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999997036907146	WITHOUT_CLASSIFICATION	2.963092855263142E-7	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999999994498166	WITHOUT_CLASSIFICATION	5.501834015618726E-9	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9997835505286242	WITHOUT_CLASSIFICATION	2.1644947137567015E-4	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999953809939358	WITHOUT_CLASSIFICATION	4.61900606422948E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970665472747	WITHOUT_CLASSIFICATION	2.9334527251864047E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999946080094403	WITHOUT_CLASSIFICATION	5.391990559702949E-6	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869752085393	WITHOUT_CLASSIFICATION	1.3024791460674589E-5	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999993296553256	WITHOUT_CLASSIFICATION	6.703446744578769E-7	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999993296553256	WITHOUT_CLASSIFICATION	6.703446744578769E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999261723426	WITHOUT_CLASSIFICATION	7.382765746049762E-8	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999261723426	WITHOUT_CLASSIFICATION	7.382765746049762E-8	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980095157837	WITHOUT_CLASSIFICATION	1.9904842163050616E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987273448656	WITHOUT_CLASSIFICATION	1.272655134354748E-6	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999663632221821	WITHOUT_CLASSIFICATION	3.3636777817787366E-5	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999087196001	WITHOUT_CLASSIFICATION	9.128039991045482E-7	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999717890728546	WITHOUT_CLASSIFICATION	2.8210927145426316E-5	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9996460521809833	WITHOUT_CLASSIFICATION	3.539478190166576E-4	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993867748594696	WITHOUT_CLASSIFICATION	6.132251405305113E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999863069139433	WITHOUT_CLASSIFICATION	1.36930860568198E-5	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999943439164699	WITHOUT_CLASSIFICATION	5.656083530102241E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999800370493	WITHOUT_CLASSIFICATION	1.9962950705479192E-8	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999768433059	WITHOUT_CLASSIFICATION	2.315669416561729E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999775039352524	WITHOUT_CLASSIFICATION	2.2496064747591155E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999994296570232	WITHOUT_CLASSIFICATION	5.70342976815966E-7	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999925937351091	WITHOUT_CLASSIFICATION	7.406264890915698E-6	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999977986504034	WITHOUT_CLASSIFICATION	2.2013495966144313E-6	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.99999448390594	WITHOUT_CLASSIFICATION	5.516094059958333E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999994826827308	WITHOUT_CLASSIFICATION	5.173172692636697E-7	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999994826827308	WITHOUT_CLASSIFICATION	5.173172692636697E-7	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999831493028	WITHOUT_CLASSIFICATION	1.6850697178380165E-8	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9998448078757028	WITHOUT_CLASSIFICATION	1.5519212429713084E-4	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999995189633	WITHOUT_CLASSIFICATION	4.810366955861522E-9	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999973419982129	WITHOUT_CLASSIFICATION	2.6580017871102262E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959995197891	WITHOUT_CLASSIFICATION	4.000480210848089E-6	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986641269456	WITHOUT_CLASSIFICATION	1.3358730543261118E-6	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999987354479054	WITHOUT_CLASSIFICATION	1.2645520945409574E-6	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998677285577973	WITHOUT_CLASSIFICATION	1.3227144220279946E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999996484859094	WITHOUT_CLASSIFICATION	3.5151409064605857E-7	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999705318761	WITHOUT_CLASSIFICATION	2.946812400127154E-8	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999966235437836	WITHOUT_CLASSIFICATION	3.3764562163669056E-6	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9994616348396569	WITHOUT_CLASSIFICATION	5.383651603431119E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968156211303	WITHOUT_CLASSIFICATION	3.184378869728964E-6	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999933452041893	WITHOUT_CLASSIFICATION	6.6547958107691255E-6	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999979597075386	WITHOUT_CLASSIFICATION	2.0402924614874127E-6	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998833154418895	WITHOUT_CLASSIFICATION	1.166845581104944E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999194743808	WITHOUT_CLASSIFICATION	8.052561907375573E-8	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999333175860048	WITHOUT_CLASSIFICATION	6.668241399521163E-5	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998535639651583	WITHOUT_CLASSIFICATION	1.4643603484167965E-4	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999968261590034	WITHOUT_CLASSIFICATION	3.173840996517019E-6	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999993168355	WITHOUT_CLASSIFICATION	6.831645015719407E-10	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999864306992315	WITHOUT_CLASSIFICATION	1.356930076847401E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999994714790733	WITHOUT_CLASSIFICATION	5.285209266619713E-7	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999392521842	WITHOUT_CLASSIFICATION	6.074781579813327E-8	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999997901437409	WITHOUT_CLASSIFICATION	2.0985625915852032E-7	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999320018617579	WITHOUT_CLASSIFICATION	6.799813824210286E-5	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999753678484985	WITHOUT_CLASSIFICATION	2.4632151501512288E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999700576334657	WITHOUT_CLASSIFICATION	2.9942366534364403E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999973159891	WITHOUT_CLASSIFICATION	2.6840108543907764E-9	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999989190320778	WITHOUT_CLASSIFICATION	1.0809679222135023E-6	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999958771194255	WITHOUT_CLASSIFICATION	4.122880574535286E-6	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999961144627768	WITHOUT_CLASSIFICATION	3.885537223168283E-6	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999827797623645	WITHOUT_CLASSIFICATION	1.722023763553363E-5	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999988678172209	WITHOUT_CLASSIFICATION	1.1321827790832003E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999971430317356	WITHOUT_CLASSIFICATION	2.85696826439872E-5	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999982953497126	WITHOUT_CLASSIFICATION	1.704650287397968E-6	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999982568586654	WITHOUT_CLASSIFICATION	1.7431413345938594E-6	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999998546245723	WITHOUT_CLASSIFICATION	1.4537542780250763E-7	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998894713381	WITHOUT_CLASSIFICATION	1.1052866182975877E-7	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.999999961955543	WITHOUT_CLASSIFICATION	3.804445713742901E-8	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999996950184024	WITHOUT_CLASSIFICATION	3.0498159763513494E-7	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999992815749221	WITHOUT_CLASSIFICATION	7.184250778175391E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9992649411326764	WITHOUT_CLASSIFICATION	7.350588673235363E-4	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999976848349122	WITHOUT_CLASSIFICATION	2.315165087695092E-6	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999978473832948	WITHOUT_CLASSIFICATION	2.152616705197453E-6	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999000454570643	WITHOUT_CLASSIFICATION	9.995454293567068E-5	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999999576533255	WITHOUT_CLASSIFICATION	4.2346674610172324E-8	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999935551353019	WITHOUT_CLASSIFICATION	6.444864698153794E-6	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999991367192303	WITHOUT_CLASSIFICATION	8.632807696962147E-6	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999993060028399	WITHOUT_CLASSIFICATION	6.939971601107677E-7	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999984448897387	WITHOUT_CLASSIFICATION	1.5551102613199404E-6	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999836117573648	WITHOUT_CLASSIFICATION	1.6388242635214403E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999983586855203	WITHOUT_CLASSIFICATION	1.6413144797345306E-6	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999567543832473	WITHOUT_CLASSIFICATION	4.3245616752684816E-5	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999988350790943	WITHOUT_CLASSIFICATION	1.1649209057200061E-6	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999823896209028	WITHOUT_CLASSIFICATION	1.7610379097105886E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999983845612261	WITHOUT_CLASSIFICATION	1.6154387738485332E-6	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999889712146124	WITHOUT_CLASSIFICATION	1.1028785387671997E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999610494555	WITHOUT_CLASSIFICATION	3.8950544593533525E-8	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999964580862644	WITHOUT_CLASSIFICATION	3.541913735673879E-6	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999922397599247	WITHOUT_CLASSIFICATION	7.760240075400483E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999993508340647	WITHOUT_CLASSIFICATION	6.49165935381855E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999989034466	WITHOUT_CLASSIFICATION	1.0965534158002816E-9	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999997572508573	WITHOUT_CLASSIFICATION	2.4274914262676244E-7	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999542098597	WITHOUT_CLASSIFICATION	4.579014039161517E-8	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999989334969515	WITHOUT_CLASSIFICATION	1.0665030485063691E-6	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999755629849817	WITHOUT_CLASSIFICATION	2.4437015018343408E-5	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999997645175334	WITHOUT_CLASSIFICATION	2.3548246653650901E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999563970346537	WITHOUT_CLASSIFICATION	4.360296534643435E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999563970346537	WITHOUT_CLASSIFICATION	4.360296534643435E-5	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999264285707	WITHOUT_CLASSIFICATION	7.357142921663361E-8	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999997027656341	WITHOUT_CLASSIFICATION	2.972343659586377E-7	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999973350039472	WITHOUT_CLASSIFICATION	2.6649960527319385E-6	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999972211502809	WITHOUT_CLASSIFICATION	2.778849719149623E-6	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999908154479998	WITHOUT_CLASSIFICATION	9.184552000225623E-6	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.99999896170403	WITHOUT_CLASSIFICATION	1.0382959700480698E-6	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999997632074765	WITHOUT_CLASSIFICATION	2.3679252344671839E-7	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999924387007355	WITHOUT_CLASSIFICATION	7.561299264543093E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999017224678509	WITHOUT_CLASSIFICATION	9.827753214916124E-5	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999997127757985	WITHOUT_CLASSIFICATION	2.872242016120227E-7	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999993501673125	WITHOUT_CLASSIFICATION	6.498326874965069E-7	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999994254587651	WITHOUT_CLASSIFICATION	5.745412348633566E-7	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999998767767648	WITHOUT_CLASSIFICATION	1.2322323519979874E-7	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999913235476	WITHOUT_CLASSIFICATION	8.676452401494196E-9	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999984035469416	WITHOUT_CLASSIFICATION	1.5964530584403323E-6	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999946887671012	WITHOUT_CLASSIFICATION	5.311232898801205E-6	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999985558537192	WITHOUT_CLASSIFICATION	1.4441462808469002E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9981304750968164	WITHOUT_CLASSIFICATION	0.0018695249031836854	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999996746779293	WITHOUT_CLASSIFICATION	3.2532207075436563E-7	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999998296000359	WITHOUT_CLASSIFICATION	1.7039996409164035E-7	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.999994441852694	WITHOUT_CLASSIFICATION	5.558147305886518E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999996318715872	WITHOUT_CLASSIFICATION	3.6812841284698124E-7	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.999974015387759	WITHOUT_CLASSIFICATION	2.598461224098638E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999920470380932	WITHOUT_CLASSIFICATION	7.952961906770354E-6	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999429476904573	WITHOUT_CLASSIFICATION	5.70523095425703E-5	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999937394158182	WITHOUT_CLASSIFICATION	6.260584181805605E-6	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999950918425796	WITHOUT_CLASSIFICATION	4.908157420328956E-6	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999896986811906	WITHOUT_CLASSIFICATION	1.0301318809427534E-5	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999999056127217	WITHOUT_CLASSIFICATION	9.4387278272585E-8	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999903152065	WITHOUT_CLASSIFICATION	9.68479350844481E-9	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999999685337577	WITHOUT_CLASSIFICATION	3.1466242298365294E-8	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999998421270765	WITHOUT_CLASSIFICATION	1.5787292343523106E-7	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999998136936755	WITHOUT_CLASSIFICATION	1.863063244775889E-7	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999989397751954	WITHOUT_CLASSIFICATION	1.0602248046233798E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999511116633255	WITHOUT_CLASSIFICATION	4.8888336674477505E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999511116633255	WITHOUT_CLASSIFICATION	4.8888336674477505E-5	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999994593722907	WITHOUT_CLASSIFICATION	5.406277093013355E-6	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999978433840502	WITHOUT_CLASSIFICATION	2.1566159497898302E-6	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999705681943912	WITHOUT_CLASSIFICATION	2.9431805608776547E-5	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999916259266071	WITHOUT_CLASSIFICATION	8.374073392878726E-6	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999868369	WITHOUT_CLASSIFICATION	1.3163194428514494E-11	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999738592994497	WITHOUT_CLASSIFICATION	2.614070055032565E-5	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999898934081437	WITHOUT_CLASSIFICATION	1.0106591856272621E-5	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999974787210023	WITHOUT_CLASSIFICATION	2.521278997722148E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998926162709401	WITHOUT_CLASSIFICATION	1.0738372905995231E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999988238592874	WITHOUT_CLASSIFICATION	1.17614071261034E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999260633744086	WITHOUT_CLASSIFICATION	7.393662559140341E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999821285679248	WITHOUT_CLASSIFICATION	1.7871432075213856E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999989002665538	WITHOUT_CLASSIFICATION	1.099733446197383E-5	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999993761387717	WITHOUT_CLASSIFICATION	6.238612282969165E-6	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999998661692938	WITHOUT_CLASSIFICATION	1.338307061994392E-7	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9987822055746096	WITHOUT_CLASSIFICATION	0.001217794425390345	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9987822055746096	WITHOUT_CLASSIFICATION	0.001217794425390345	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999527861981092	WITHOUT_CLASSIFICATION	4.721380189073378E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999824623134015	WITHOUT_CLASSIFICATION	1.7537686598534895E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999975162716745	WITHOUT_CLASSIFICATION	2.4837283254948542E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999347117559	WITHOUT_CLASSIFICATION	6.528824423858274E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999775039352524	WITHOUT_CLASSIFICATION	2.2496064747591155E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995810889385354	WITHOUT_CLASSIFICATION	4.189110614647383E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999295869954	WITHOUT_CLASSIFICATION	7.041300465565746E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999994773712065	WITHOUT_CLASSIFICATION	5.226287935214374E-7	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999994773712065	WITHOUT_CLASSIFICATION	5.226287935214374E-7	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999757758080146	WITHOUT_CLASSIFICATION	2.4224191985462284E-5	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999997974038185	WITHOUT_CLASSIFICATION	2.025961815990028E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999998941825506	WITHOUT_CLASSIFICATION	1.0581744934923534E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9996374906116043	WITHOUT_CLASSIFICATION	3.625093883955601E-4	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.999999648230914	WITHOUT_CLASSIFICATION	3.5176908591041864E-7	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999859981389415	WITHOUT_CLASSIFICATION	1.4001861058425594E-5	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999975846399676	WITHOUT_CLASSIFICATION	2.4153600323766866E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998321155931	WITHOUT_CLASSIFICATION	1.6788440678675857E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999899820292	WITHOUT_CLASSIFICATION	1.0017970880962729E-8	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999642405899283	WITHOUT_CLASSIFICATION	3.575941007172582E-5	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992678509757403	WITHOUT_CLASSIFICATION	7.321490242596318E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999892804929815	WITHOUT_CLASSIFICATION	1.0719507018554252E-5	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999998784537985	WITHOUT_CLASSIFICATION	1.2154620156698984E-7	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999998327842174	WITHOUT_CLASSIFICATION	1.6721578249770503E-7	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999959095533532	WITHOUT_CLASSIFICATION	4.0904466467943465E-6	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998270606257	WITHOUT_CLASSIFICATION	1.7293937426630318E-7	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999997802857816	WITHOUT_CLASSIFICATION	2.197142184558312E-7	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999973737906866	WITHOUT_CLASSIFICATION	2.6262093133552623E-6	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999875847311417	WITHOUT_CLASSIFICATION	1.2415268858384719E-5	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999909468761161	WITHOUT_CLASSIFICATION	9.053123883974181E-6	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999997834336042	WITHOUT_CLASSIFICATION	2.1656639571673716E-7	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999997825174473	WITHOUT_CLASSIFICATION	2.1748255288236354E-7	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999601300854176	WITHOUT_CLASSIFICATION	3.986991458235843E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999420869111796	WITHOUT_CLASSIFICATION	5.791308882053837E-5	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999924712499032	WITHOUT_CLASSIFICATION	7.528750096730701E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999588246435211	WITHOUT_CLASSIFICATION	4.1175356478931455E-5	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999966920338133	WITHOUT_CLASSIFICATION	3.3079661866579683E-6	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999999859867	WITHOUT_CLASSIFICATION	1.4013332654948225E-11	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999993281026411	WITHOUT_CLASSIFICATION	6.718973588689308E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996744005495	WITHOUT_CLASSIFICATION	3.2559945054049566E-7	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999780758908358	WITHOUT_CLASSIFICATION	2.1924109164217175E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999990264114479	WITHOUT_CLASSIFICATION	9.735885520544916E-7	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9976411150201463	WITHOUT_CLASSIFICATION	0.0023588849798536985	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999997476342474	WITHOUT_CLASSIFICATION	2.523657525896452E-7	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999998716814401	WITHOUT_CLASSIFICATION	1.2831855996500917E-7	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999785913847004	WITHOUT_CLASSIFICATION	2.140861529964751E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999941045704205	WITHOUT_CLASSIFICATION	5.8954295794646824E-6	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999963920568286	WITHOUT_CLASSIFICATION	3.6079431715355038E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999071626368	WITHOUT_CLASSIFICATION	9.283736323053013E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999677618211	WITHOUT_CLASSIFICATION	3.223817901503647E-8	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999580263862	WITHOUT_CLASSIFICATION	4.197361390969054E-8	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999342461776076	WITHOUT_CLASSIFICATION	6.575382239246995E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999858506107714	WITHOUT_CLASSIFICATION	1.4149389228460966E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999674372669	WITHOUT_CLASSIFICATION	3.2562733010796424E-8	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999674839	WITHOUT_CLASSIFICATION	3.2516202374361213E-11	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999854389466685	WITHOUT_CLASSIFICATION	1.4561053331569595E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999071626368	WITHOUT_CLASSIFICATION	9.283736323053013E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999677618211	WITHOUT_CLASSIFICATION	3.223817901503647E-8	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999991345584697	WITHOUT_CLASSIFICATION	8.654415303846346E-7	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999994201689104	WITHOUT_CLASSIFICATION	5.798310896408144E-7	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999216037013	WITHOUT_CLASSIFICATION	7.839629869847554E-8	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999971470048339	WITHOUT_CLASSIFICATION	2.8529951660896856E-6	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999996708327673	WITHOUT_CLASSIFICATION	3.2916723279197903E-7	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9998543495078162	WITHOUT_CLASSIFICATION	1.4565049218396306E-4	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999323143836202	WITHOUT_CLASSIFICATION	6.768561637974468E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999890787761153	WITHOUT_CLASSIFICATION	1.0921223884638368E-5	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999996638276349	WITHOUT_CLASSIFICATION	3.361723650308461E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9887728072507461	WITHOUT_CLASSIFICATION	0.011227192749253873	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999991732031	WITHOUT_CLASSIFICATION	8.267968295128477E-10	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9887728072507461	WITHOUT_CLASSIFICATION	0.011227192749253873	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999972704228095	WITHOUT_CLASSIFICATION	2.729577190537752E-6	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999988392159207	WITHOUT_CLASSIFICATION	1.1607840792569836E-6	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999819651512414	WITHOUT_CLASSIFICATION	1.8034848758622484E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999897360213	WITHOUT_CLASSIFICATION	1.0263978612543846E-8	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9990943262939794	WITHOUT_CLASSIFICATION	9.056737060204896E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999665980066268	WITHOUT_CLASSIFICATION	3.3401993373181673E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999665980066268	WITHOUT_CLASSIFICATION	3.3401993373181673E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999844830291668	WITHOUT_CLASSIFICATION	1.5516970833261755E-5	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999986723431694	WITHOUT_CLASSIFICATION	1.3276568305990688E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999995609626424	WITHOUT_CLASSIFICATION	4.390373576111242E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999531200590046	WITHOUT_CLASSIFICATION	4.687994099541718E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999944054983909	WITHOUT_CLASSIFICATION	5.594501609156653E-6	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999746766906853	WITHOUT_CLASSIFICATION	2.5323309314695356E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999996644083265	WITHOUT_CLASSIFICATION	3.3559167349135723E-7	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999995039573366	WITHOUT_CLASSIFICATION	4.96042663401992E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.999992897191892	WITHOUT_CLASSIFICATION	7.1028081079243025E-6	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9999847985341701	WITHOUT_CLASSIFICATION	1.5201465829786666E-5	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999998866849394	WITHOUT_CLASSIFICATION	1.1331506063330979E-7	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999883112586075	WITHOUT_CLASSIFICATION	1.1688741392503891E-5	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999865936950221	WITHOUT_CLASSIFICATION	1.3406304977862187E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999996799029589	WITHOUT_CLASSIFICATION	3.2009704112216235E-7	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999993845903062	WITHOUT_CLASSIFICATION	6.154096938047E-7	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999959740974272	WITHOUT_CLASSIFICATION	4.025902572765221E-6	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999998217038962	WITHOUT_CLASSIFICATION	1.7829610380330233E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999777634928	WITHOUT_CLASSIFICATION	2.2236507133750272E-8	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999990388082088	WITHOUT_CLASSIFICATION	9.611917911389909E-7	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999470752412182	WITHOUT_CLASSIFICATION	5.292475878182925E-5	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999897476652	WITHOUT_CLASSIFICATION	1.0252334734313006E-8	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999990429244509	WITHOUT_CLASSIFICATION	9.57075549224921E-7	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999994823817666	WITHOUT_CLASSIFICATION	5.176182333030527E-7	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999588641738	WITHOUT_CLASSIFICATION	4.1135826247448575E-8	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999995774117777	WITHOUT_CLASSIFICATION	4.225882223300468E-7	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999954475943854	WITHOUT_CLASSIFICATION	4.55240561458966E-6	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999744529543	WITHOUT_CLASSIFICATION	2.5547045728935178E-8	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9994775225543235	WITHOUT_CLASSIFICATION	5.224774456764567E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999998954556918	WITHOUT_CLASSIFICATION	1.045443083064374E-7	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999999253938514	WITHOUT_CLASSIFICATION	7.460614858308796E-8	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.99984075325955	WITHOUT_CLASSIFICATION	1.5924674045003187E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999245458729977	WITHOUT_CLASSIFICATION	7.54541270022781E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999996644083265	WITHOUT_CLASSIFICATION	3.3559167349135723E-7	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9995084486233132	WITHOUT_CLASSIFICATION	4.91551376686748E-4	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999971883335664	WITHOUT_CLASSIFICATION	2.8116664336570767E-6	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9829877410594277	WITHOUT_CLASSIFICATION	0.01701225894057228	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.999999029818567	WITHOUT_CLASSIFICATION	9.701814329772639E-7	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999993129137269	WITHOUT_CLASSIFICATION	6.870862731041116E-7	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999999139183501	WITHOUT_CLASSIFICATION	8.608164991292893E-8	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999531200590046	WITHOUT_CLASSIFICATION	4.687994099541718E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999531200590046	WITHOUT_CLASSIFICATION	4.687994099541718E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999999442786787	WITHOUT_CLASSIFICATION	5.572132147502652E-8	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999997158373876	WITHOUT_CLASSIFICATION	2.841626124757232E-7	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999969125569098	WITHOUT_CLASSIFICATION	3.087443090143884E-6	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999997230885597	WITHOUT_CLASSIFICATION	2.7691144027489903E-7	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999946146297809	WITHOUT_CLASSIFICATION	5.385370219120298E-6	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9996281123474223	WITHOUT_CLASSIFICATION	3.7188765257767804E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999403012147915	WITHOUT_CLASSIFICATION	5.9698785208427524E-5	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999998818573951	WITHOUT_CLASSIFICATION	1.1814260489362542E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999970808118567	WITHOUT_CLASSIFICATION	2.9191881432748904E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999829556447	WITHOUT_CLASSIFICATION	1.7044355303206674E-7	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999951698932064	WITHOUT_CLASSIFICATION	4.830106793558631E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999527143595629	WITHOUT_CLASSIFICATION	4.728564043701462E-5	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999996764247192	WITHOUT_CLASSIFICATION	3.2357528075168824E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999829556447	WITHOUT_CLASSIFICATION	1.7044355303206674E-7	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996915362264	WITHOUT_CLASSIFICATION	3.084637736309925E-7	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999904648117414	WITHOUT_CLASSIFICATION	9.535188258720478E-6	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999891503476642	WITHOUT_CLASSIFICATION	1.0849652335872776E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9976000037879822	WITHOUT_CLASSIFICATION	0.0023999962120177785	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999527143595629	WITHOUT_CLASSIFICATION	4.728564043701462E-5	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999607192054457	WITHOUT_CLASSIFICATION	3.92807945543521E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999812327437427	WITHOUT_CLASSIFICATION	1.8767256257259568E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996978383863	WITHOUT_CLASSIFICATION	3.0216161378637636E-7	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999500972726291	WITHOUT_CLASSIFICATION	4.9902727370820345E-5	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999809432940369	WITHOUT_CLASSIFICATION	1.9056705963035384E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999998528871927	WITHOUT_CLASSIFICATION	1.4711280733943285E-7	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999978722196133	WITHOUT_CLASSIFICATION	2.127780386626322E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999965125669217	WITHOUT_CLASSIFICATION	3.48743307831532E-6	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999998481054801	WITHOUT_CLASSIFICATION	1.518945199221114E-7	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999750179451	WITHOUT_CLASSIFICATION	2.4982054803562636E-8	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9991381008865534	WITHOUT_CLASSIFICATION	8.618991134465927E-4	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999998299223234	WITHOUT_CLASSIFICATION	1.700776765518964E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999829556447	WITHOUT_CLASSIFICATION	1.7044355303206674E-7	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999607192054457	WITHOUT_CLASSIFICATION	3.92807945543521E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996978383863	WITHOUT_CLASSIFICATION	3.0216161378637636E-7	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999820426410281	WITHOUT_CLASSIFICATION	1.795735897193943E-5	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.99999608923221	WITHOUT_CLASSIFICATION	3.910767790091866E-6	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.999998743554116	WITHOUT_CLASSIFICATION	1.2564458840507275E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999527143595629	WITHOUT_CLASSIFICATION	4.728564043701462E-5	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.99999967130145	WITHOUT_CLASSIFICATION	3.2869855003288733E-7	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999994843208948	WITHOUT_CLASSIFICATION	5.156791051824659E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999973891493736	WITHOUT_CLASSIFICATION	2.610850626393031E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999990800973841	WITHOUT_CLASSIFICATION	9.199026158273786E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999965125669217	WITHOUT_CLASSIFICATION	3.48743307831532E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996915362264	WITHOUT_CLASSIFICATION	3.084637736309925E-7	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999935233204871	WITHOUT_CLASSIFICATION	6.4766795129419756E-6	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999988642131672	WITHOUT_CLASSIFICATION	1.135786832829455E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999996845680762	WITHOUT_CLASSIFICATION	3.154319238350718E-7	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999985937929431	WITHOUT_CLASSIFICATION	1.4062070569050178E-6	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999997430789731	WITHOUT_CLASSIFICATION	2.5692102688409955E-7	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999998354573038	WITHOUT_CLASSIFICATION	1.6454269627114557E-7	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999793871032367	WITHOUT_CLASSIFICATION	2.0612896763255893E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999897360213	WITHOUT_CLASSIFICATION	1.0263978612543846E-8	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999364396304	WITHOUT_CLASSIFICATION	6.356036956562987E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807741411039	WITHOUT_CLASSIFICATION	1.9225858896160025E-5	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999970180309	WITHOUT_CLASSIFICATION	2.981969150694513E-9	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.996287448113585	WITHOUT_CLASSIFICATION	0.0037125518864149494	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999022814324554	WITHOUT_CLASSIFICATION	9.771856754467687E-5	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999892546639773	WITHOUT_CLASSIFICATION	1.074533602265151E-5	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999995561760671	WITHOUT_CLASSIFICATION	4.438239329580505E-7	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999984809361695	WITHOUT_CLASSIFICATION	1.5190638304054135E-6	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999574060555	WITHOUT_CLASSIFICATION	4.259394451543226E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999990800973841	WITHOUT_CLASSIFICATION	9.199026158273786E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807741411039	WITHOUT_CLASSIFICATION	1.9225858896160025E-5	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999958562465876	WITHOUT_CLASSIFICATION	4.143753412340268E-6	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999957436779795	WITHOUT_CLASSIFICATION	4.256322020515201E-6	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999986068621645	WITHOUT_CLASSIFICATION	1.3931378355331261E-6	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999993945821728	WITHOUT_CLASSIFICATION	6.054178271973871E-7	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999824586901714	WITHOUT_CLASSIFICATION	1.7541309828550874E-5	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999874751777	WITHOUT_CLASSIFICATION	1.2524822228924295E-8	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999863631753807	WITHOUT_CLASSIFICATION	1.363682461935635E-5	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9994604295036315	WITHOUT_CLASSIFICATION	5.395704963685389E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999506901213331	WITHOUT_CLASSIFICATION	4.930987866693823E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9971544693417791	WITHOUT_CLASSIFICATION	0.0028455306582209376	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999997220785022	WITHOUT_CLASSIFICATION	2.779214977372615E-7	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999815118532898	WITHOUT_CLASSIFICATION	1.8488146710274636E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999997126489021	WITHOUT_CLASSIFICATION	2.87351097935323E-7	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999906680402578	WITHOUT_CLASSIFICATION	9.331959742187654E-6	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999990673656608	WITHOUT_CLASSIFICATION	9.326343392661604E-7	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998262850144	WITHOUT_CLASSIFICATION	1.7371498552294474E-7	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999983994645026	WITHOUT_CLASSIFICATION	1.6005354974451847E-6	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999915339616	WITHOUT_CLASSIFICATION	8.46603845856159E-9	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999997194646703	WITHOUT_CLASSIFICATION	2.805353297540402E-7	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999905477281534	WITHOUT_CLASSIFICATION	9.452271846605622E-6	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999892968340426	WITHOUT_CLASSIFICATION	1.070316595733246E-5	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999999885141577	WITHOUT_CLASSIFICATION	1.148584232550407E-8	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999693119561	WITHOUT_CLASSIFICATION	3.0688043861572864E-8	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999998783456607	WITHOUT_CLASSIFICATION	1.2165433923328433E-7	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999470703036	WITHOUT_CLASSIFICATION	5.2929696401749825E-8	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9988195282150623	WITHOUT_CLASSIFICATION	0.0011804717849378033	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999967382622609	WITHOUT_CLASSIFICATION	3.261737739074604E-6	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9995675317823273	WITHOUT_CLASSIFICATION	4.324682176727614E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999883224001362	WITHOUT_CLASSIFICATION	1.1677599863793773E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9637543826609015	WITHOUT_CLASSIFICATION	0.0362456173390984	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999852369953068	WITHOUT_CLASSIFICATION	1.4763004693027763E-5	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999953435349739	WITHOUT_CLASSIFICATION	4.6564650260954434E-5	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999994048083201	WITHOUT_CLASSIFICATION	5.951916798829003E-7	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999996271394586	WITHOUT_CLASSIFICATION	3.728605414496379E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999746716894276	WITHOUT_CLASSIFICATION	2.5328310572418374E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999401645232	WITHOUT_CLASSIFICATION	5.983547680295849E-8	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999518047286	WITHOUT_CLASSIFICATION	4.819527138574435E-8	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999955512368657	WITHOUT_CLASSIFICATION	4.448763134256728E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999401645232	WITHOUT_CLASSIFICATION	5.983547680295849E-8	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999746716894276	WITHOUT_CLASSIFICATION	2.5328310572418374E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999518047286	WITHOUT_CLASSIFICATION	4.819527138574435E-8	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999998855582864	WITHOUT_CLASSIFICATION	1.1444171352678962E-7	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999998601602582	WITHOUT_CLASSIFICATION	1.3983974181347485E-7	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999995922407393	WITHOUT_CLASSIFICATION	4.077592605705749E-7	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999633122297712	WITHOUT_CLASSIFICATION	3.6687770228870046E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999365441025	WITHOUT_CLASSIFICATION	6.34558975247657E-8	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5424032637530204	DEFECT	0.45759673624697955	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999491617172072	WITHOUT_CLASSIFICATION	5.083828279284839E-5	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999317857461811	WITHOUT_CLASSIFICATION	6.821425381889652E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999684694617	WITHOUT_CLASSIFICATION	3.1530538252085255E-8	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999333704028182	WITHOUT_CLASSIFICATION	6.662959718179933E-5	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999873972205995	WITHOUT_CLASSIFICATION	1.2602779400484421E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999954474350775	WITHOUT_CLASSIFICATION	4.552564922525557E-6	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9996409391196139	WITHOUT_CLASSIFICATION	3.59060880385972E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999712035692843	WITHOUT_CLASSIFICATION	2.8796430715682877E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998366645714	WITHOUT_CLASSIFICATION	1.6333542867850718E-7	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999976629746913	WITHOUT_CLASSIFICATION	2.337025308800958E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999998090076754	WITHOUT_CLASSIFICATION	1.9099232460121176E-6	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999987198874933	WITHOUT_CLASSIFICATION	1.2801125067666532E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999992685351989	WITHOUT_CLASSIFICATION	7.314648010954009E-7	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999953264248	WITHOUT_CLASSIFICATION	4.673575194984941E-9	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999940502943258	WITHOUT_CLASSIFICATION	5.949705674190174E-6	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999973615208	WITHOUT_CLASSIFICATION	2.6384791834783675E-9	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999843437167433	WITHOUT_CLASSIFICATION	1.5656283256675287E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999943314759	WITHOUT_CLASSIFICATION	5.668524150493123E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999961988031	WITHOUT_CLASSIFICATION	3.801196829094088E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999961988031	WITHOUT_CLASSIFICATION	3.801196829094088E-9	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999801163034	WITHOUT_CLASSIFICATION	1.988369660735819E-8	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999801163034	WITHOUT_CLASSIFICATION	1.988369660735819E-8	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999945787156294	WITHOUT_CLASSIFICATION	5.421284370681972E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999998090076754	WITHOUT_CLASSIFICATION	1.9099232460121176E-6	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999999970325131	WITHOUT_CLASSIFICATION	2.967486902829582E-8	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999976373835	WITHOUT_CLASSIFICATION	2.362616477725798E-9	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999779438125	WITHOUT_CLASSIFICATION	2.205618751234957E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999779438125	WITHOUT_CLASSIFICATION	2.205618751234957E-8	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999944922560191	WITHOUT_CLASSIFICATION	5.507743980898899E-6	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999997438266177	WITHOUT_CLASSIFICATION	2.561733822895705E-7	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999914642788	WITHOUT_CLASSIFICATION	8.535721170943681E-9	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999998618590827	WITHOUT_CLASSIFICATION	1.3814091725389546E-7	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9973433005293174	WITHOUT_CLASSIFICATION	0.0026566994706827265	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9720311468317546	WITHOUT_CLASSIFICATION	0.027968853168245347	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999808366118444	WITHOUT_CLASSIFICATION	1.9163388155515473E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999776357677702	WITHOUT_CLASSIFICATION	2.2364232229764198E-5	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999760573680211	WITHOUT_CLASSIFICATION	2.3942631978994265E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999995520431939	WITHOUT_CLASSIFICATION	4.479568061038532E-6	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999979169118314	WITHOUT_CLASSIFICATION	2.083088168620328E-6	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999982650172728	WITHOUT_CLASSIFICATION	1.7349827271870692E-6	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999996474351207	WITHOUT_CLASSIFICATION	3.5256487922728387E-7	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999995056622606	WITHOUT_CLASSIFICATION	4.943377393200225E-7	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999999491322056	WITHOUT_CLASSIFICATION	5.086779435381448E-8	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999995350215317	WITHOUT_CLASSIFICATION	4.6497846827014737E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969429204973	WITHOUT_CLASSIFICATION	3.0570795026639577E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999990682623379	WITHOUT_CLASSIFICATION	9.31737662154358E-7	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.999999521897514	WITHOUT_CLASSIFICATION	4.781024861239683E-7	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999989152040453	WITHOUT_CLASSIFICATION	1.0847959548128299E-6	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999996956291871	WITHOUT_CLASSIFICATION	3.0437081279959185E-7	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.999996347799055	WITHOUT_CLASSIFICATION	3.652200945045132E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999758019198	WITHOUT_CLASSIFICATION	2.419808014570602E-8	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999998755538549	WITHOUT_CLASSIFICATION	1.2444614498178106E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999599458900644	WITHOUT_CLASSIFICATION	4.005410993546148E-5	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999390467949	WITHOUT_CLASSIFICATION	6.095320518593938E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807741411039	WITHOUT_CLASSIFICATION	1.9225858896160025E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999815118532898	WITHOUT_CLASSIFICATION	1.8488146710274636E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999974270394502	WITHOUT_CLASSIFICATION	2.5729605499683926E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.99980079154676	WITHOUT_CLASSIFICATION	1.992084532398518E-4	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980530968691	WITHOUT_CLASSIFICATION	1.9469031308247565E-6	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790251117416	WITHOUT_CLASSIFICATION	2.097488825834274E-5	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999925969342385	WITHOUT_CLASSIFICATION	7.403065761582102E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999925969342385	WITHOUT_CLASSIFICATION	7.403065761582102E-6	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999767134225772	WITHOUT_CLASSIFICATION	2.3286577422853784E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999900425814388	WITHOUT_CLASSIFICATION	9.957418561200192E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9997979336018655	WITHOUT_CLASSIFICATION	2.0206639813459025E-4	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9997979336018655	WITHOUT_CLASSIFICATION	2.0206639813459025E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999625968404353	WITHOUT_CLASSIFICATION	3.7403159564738336E-5	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999217735665231	WITHOUT_CLASSIFICATION	7.822643347683855E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999498154549986	WITHOUT_CLASSIFICATION	5.018454500144158E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999013980023	WITHOUT_CLASSIFICATION	9.860199769917062E-7	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999980174721986	WITHOUT_CLASSIFICATION	1.982527801465217E-6	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999995882666244	WITHOUT_CLASSIFICATION	4.1173337569665417E-7	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999995151373454	WITHOUT_CLASSIFICATION	4.848626546152166E-7	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999992168577915	WITHOUT_CLASSIFICATION	7.831422084756344E-7	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999871898402157	WITHOUT_CLASSIFICATION	1.2810159784393288E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999871898402157	WITHOUT_CLASSIFICATION	1.2810159784393288E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999714622981847	WITHOUT_CLASSIFICATION	2.8537701815445695E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998519306782	WITHOUT_CLASSIFICATION	1.480693218197764E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998519306782	WITHOUT_CLASSIFICATION	1.480693218197764E-7	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999975687740983	WITHOUT_CLASSIFICATION	2.431225901662961E-6	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999648767576	WITHOUT_CLASSIFICATION	3.512324251771487E-8	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9969152761376251	WITHOUT_CLASSIFICATION	0.003084723862374888	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999997995655469	WITHOUT_CLASSIFICATION	2.004344530825869E-7	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998724341348	WITHOUT_CLASSIFICATION	1.2756586518769007E-7	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998221004065	WITHOUT_CLASSIFICATION	1.778995934381358E-7	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999999616125237	WITHOUT_CLASSIFICATION	3.838747622864194E-8	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999991712896543	WITHOUT_CLASSIFICATION	8.287103455759405E-7	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999847720503	WITHOUT_CLASSIFICATION	1.5227949672379948E-8	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9923476870635222	WITHOUT_CLASSIFICATION	0.0076523129364779036	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999893658148619	WITHOUT_CLASSIFICATION	1.0634185138077502E-5	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999926184228003	WITHOUT_CLASSIFICATION	7.381577199673266E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999873687054771	WITHOUT_CLASSIFICATION	1.2631294522883443E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999873687054771	WITHOUT_CLASSIFICATION	1.2631294522883443E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999873687054771	WITHOUT_CLASSIFICATION	1.2631294522883443E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999873687054771	WITHOUT_CLASSIFICATION	1.2631294522883443E-5	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999886816194612	WITHOUT_CLASSIFICATION	1.1318380538818295E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9828814261868067	WITHOUT_CLASSIFICATION	0.017118573813193254	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999968039222618	WITHOUT_CLASSIFICATION	3.1960777382218203E-6	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999807946291199	WITHOUT_CLASSIFICATION	1.920537088011633E-5	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999997799323932	WITHOUT_CLASSIFICATION	2.2006760666306383E-7	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9998765017463956	WITHOUT_CLASSIFICATION	1.2349825360431893E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999775039352524	WITHOUT_CLASSIFICATION	2.2496064747591155E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999988663570142	WITHOUT_CLASSIFICATION	1.1336429857915796E-6	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999998719114379	WITHOUT_CLASSIFICATION	1.2808856210109004E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999775039352524	WITHOUT_CLASSIFICATION	2.2496064747591155E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999775039352524	WITHOUT_CLASSIFICATION	2.2496064747591155E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999698788138	WITHOUT_CLASSIFICATION	3.01211862212027E-8	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999993675346543	WITHOUT_CLASSIFICATION	6.324653455350292E-7	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999992944901259	WITHOUT_CLASSIFICATION	7.055098741151411E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999969119782885	WITHOUT_CLASSIFICATION	3.088021711403526E-6	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999239466292072	WITHOUT_CLASSIFICATION	7.605337079276612E-5	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999999509472658	WITHOUT_CLASSIFICATION	4.905273418855123E-7	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999995049286327	WITHOUT_CLASSIFICATION	4.95071367290308E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999969119782885	WITHOUT_CLASSIFICATION	3.088021711403526E-6	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9994073437311788	WITHOUT_CLASSIFICATION	5.92656268821208E-4	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999914870127874	WITHOUT_CLASSIFICATION	8.51298721261641E-6	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999996669578681	WITHOUT_CLASSIFICATION	3.330421318109379E-7	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999950230941387	WITHOUT_CLASSIFICATION	4.976905861273548E-6	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999925538427471	WITHOUT_CLASSIFICATION	7.446157252857814E-6	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998189076033075	WITHOUT_CLASSIFICATION	1.810923966924999E-4	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999406943643	WITHOUT_CLASSIFICATION	5.9305635611474906E-8	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999761667443682	WITHOUT_CLASSIFICATION	2.3833255631760433E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999862735187	WITHOUT_CLASSIFICATION	1.3726481398418968E-8	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999990860521034	WITHOUT_CLASSIFICATION	9.139478965941804E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999896314663	WITHOUT_CLASSIFICATION	1.0368533645653667E-8	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999996504322027	WITHOUT_CLASSIFICATION	3.495677972904193E-7	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9966444960545771	WITHOUT_CLASSIFICATION	0.0033555039454228907	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999815024027779	WITHOUT_CLASSIFICATION	1.8497597222146455E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999983559165236	WITHOUT_CLASSIFICATION	1.6440834763518988E-6	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999908815613497	WITHOUT_CLASSIFICATION	9.118438650278814E-6	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999382311308	WITHOUT_CLASSIFICATION	6.176886927635982E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998828364710836	WITHOUT_CLASSIFICATION	1.1716352891647135E-4	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999325972905	WITHOUT_CLASSIFICATION	6.740270949794764E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998828364710836	WITHOUT_CLASSIFICATION	1.1716352891647135E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998403389783	WITHOUT_CLASSIFICATION	1.5966102169971347E-7	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999922161574476	WITHOUT_CLASSIFICATION	7.78384255242391E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9998517373727265	WITHOUT_CLASSIFICATION	1.4826262727345998E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999999674212918	WITHOUT_CLASSIFICATION	3.257870819645977E-7	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999382311308	WITHOUT_CLASSIFICATION	6.176886927635982E-8	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999325972905	WITHOUT_CLASSIFICATION	6.740270949794764E-8	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998403389783	WITHOUT_CLASSIFICATION	1.5966102169971347E-7	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999995450378115	WITHOUT_CLASSIFICATION	4.549621885072817E-7	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999737211881096	WITHOUT_CLASSIFICATION	2.6278811890498392E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999975590913343	WITHOUT_CLASSIFICATION	2.44090866581367E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999917014933317	WITHOUT_CLASSIFICATION	8.298506668374588E-6	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9969436108690467	WITHOUT_CLASSIFICATION	0.003056389130953226	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999739501162	WITHOUT_CLASSIFICATION	2.6049883769077717E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969429204973	WITHOUT_CLASSIFICATION	3.0570795026639577E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999922161574476	WITHOUT_CLASSIFICATION	7.78384255242391E-6	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999812142955036	WITHOUT_CLASSIFICATION	1.8785704496464828E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9985461404581261	WITHOUT_CLASSIFICATION	0.0014538595418740162	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999547165626	WITHOUT_CLASSIFICATION	4.5283437455639754E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969429204973	WITHOUT_CLASSIFICATION	3.0570795026639577E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807741411039	WITHOUT_CLASSIFICATION	1.9225858896160025E-5	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999998960098337	WITHOUT_CLASSIFICATION	1.0399016626125482E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969429204973	WITHOUT_CLASSIFICATION	3.0570795026639577E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999904451622	WITHOUT_CLASSIFICATION	9.554837732299995E-9	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999992918793252	WITHOUT_CLASSIFICATION	7.081206746782262E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807741411039	WITHOUT_CLASSIFICATION	1.9225858896160025E-5	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9993475265136809	WITHOUT_CLASSIFICATION	6.524734863191919E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999399509518	WITHOUT_CLASSIFICATION	6.004904819272755E-8	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999452561489	WITHOUT_CLASSIFICATION	5.474385106489638E-8	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999983046089641	WITHOUT_CLASSIFICATION	1.695391035870271E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9996701170301017	WITHOUT_CLASSIFICATION	3.2988296989832337E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999914384778985	WITHOUT_CLASSIFICATION	8.561522101381886E-6	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999998828772402	WITHOUT_CLASSIFICATION	1.1712275982627891E-7	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999994051070933	WITHOUT_CLASSIFICATION	5.948929066852521E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999563970346537	WITHOUT_CLASSIFICATION	4.360296534643435E-5	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999995458723614	WITHOUT_CLASSIFICATION	4.541276386378931E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9969152761376251	WITHOUT_CLASSIFICATION	0.003084723862374888	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999989945663871	WITHOUT_CLASSIFICATION	1.0054336128528062E-6	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9848785502938157	WITHOUT_CLASSIFICATION	0.015121449706184335	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999999133159214	WITHOUT_CLASSIFICATION	8.668407860643569E-7	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999649157530837	WITHOUT_CLASSIFICATION	3.508424691630744E-5	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999996221328907	WITHOUT_CLASSIFICATION	3.778671093062925E-7	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.99999988899328	WITHOUT_CLASSIFICATION	1.1100672007113528E-7	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9971628774962	WITHOUT_CLASSIFICATION	0.002837122503799974	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999940299113944	WITHOUT_CLASSIFICATION	5.97008860559777E-5	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999697558483	WITHOUT_CLASSIFICATION	3.024415165876265E-8	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999939515843577	WITHOUT_CLASSIFICATION	6.048415642296046E-6	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.996592977545214	WITHOUT_CLASSIFICATION	0.0034070224547859047	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998931880466261	WITHOUT_CLASSIFICATION	1.068119533738162E-4	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999580978911193	WITHOUT_CLASSIFICATION	4.190210888066836E-5	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999850107741	WITHOUT_CLASSIFICATION	1.4989225867727827E-8	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999998301263	WITHOUT_CLASSIFICATION	1.69873700053583E-7	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998195969951754	WITHOUT_CLASSIFICATION	1.804030048246291E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999985804895816	WITHOUT_CLASSIFICATION	1.4195104183745842E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999996990980049	WITHOUT_CLASSIFICATION	3.009019950464551E-7	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999987222728691	WITHOUT_CLASSIFICATION	1.2777271308711605E-6	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999994485690985	WITHOUT_CLASSIFICATION	5.514309014927717E-7	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9988549988228919	WITHOUT_CLASSIFICATION	0.0011450011771082054	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9996665753721239	WITHOUT_CLASSIFICATION	3.334246278760187E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997526990226	WITHOUT_CLASSIFICATION	2.4730097732405495E-7	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999983725692181	WITHOUT_CLASSIFICATION	1.6274307818941503E-5	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.999998184104665	WITHOUT_CLASSIFICATION	1.815895335032387E-6	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999440291662735	WITHOUT_CLASSIFICATION	5.597083372646138E-5	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.999885671022007	WITHOUT_CLASSIFICATION	1.1432897799289085E-4	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9982080098422313	WITHOUT_CLASSIFICATION	0.001791990157768668	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999994031069277	WITHOUT_CLASSIFICATION	5.96893072305468E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807741411039	WITHOUT_CLASSIFICATION	1.9225858896160025E-5	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999891141125263	WITHOUT_CLASSIFICATION	1.0885887473671857E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999762112243352	WITHOUT_CLASSIFICATION	2.378877566475359E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999762112243352	WITHOUT_CLASSIFICATION	2.378877566475359E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9993846192897343	WITHOUT_CLASSIFICATION	6.153807102656615E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999914384778985	WITHOUT_CLASSIFICATION	8.561522101381886E-6	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9995207701551279	WITHOUT_CLASSIFICATION	4.792298448720341E-4	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999881730401	WITHOUT_CLASSIFICATION	1.1826959887453041E-8	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999404062907936	WITHOUT_CLASSIFICATION	5.959370920641196E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999679715882837	WITHOUT_CLASSIFICATION	3.202841171644082E-5	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999932513026972	WITHOUT_CLASSIFICATION	6.748697302763513E-6	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9999557860530612	WITHOUT_CLASSIFICATION	4.421394693876612E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999858240747469	WITHOUT_CLASSIFICATION	1.417592525321127E-5	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999251543472	WITHOUT_CLASSIFICATION	7.484565284649348E-8	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999990105888472	WITHOUT_CLASSIFICATION	9.894111528242495E-7	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.999998891869683	WITHOUT_CLASSIFICATION	1.1081303169512903E-6	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999078005533	WITHOUT_CLASSIFICATION	9.219944674676269E-8	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999925229666	WITHOUT_CLASSIFICATION	7.477033393946097E-9	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999799400509	WITHOUT_CLASSIFICATION	2.0059949192622432E-8	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999995303125283	WITHOUT_CLASSIFICATION	4.6968747161757495E-7	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999996356706976	WITHOUT_CLASSIFICATION	3.6432930231182966E-7	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999686322908	WITHOUT_CLASSIFICATION	3.1367709233274856E-8	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999900679911	WITHOUT_CLASSIFICATION	9.932008971734195E-9	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999995084864612	WITHOUT_CLASSIFICATION	4.915135387301271E-7	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999992706063693	WITHOUT_CLASSIFICATION	7.293936308214782E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999875755036048	WITHOUT_CLASSIFICATION	1.2424496395071244E-5	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999998085862327	WITHOUT_CLASSIFICATION	1.9141376738141684E-7	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999973891793356	WITHOUT_CLASSIFICATION	2.610820664437069E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9982080098422313	WITHOUT_CLASSIFICATION	0.001791990157768668	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999985289444826	WITHOUT_CLASSIFICATION	1.471055517470367E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999854435591364	WITHOUT_CLASSIFICATION	1.45564408635132E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999994453860271	WITHOUT_CLASSIFICATION	5.54613972878145E-7	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999907968504713	WITHOUT_CLASSIFICATION	9.203149528600715E-6	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9919537421850062	WITHOUT_CLASSIFICATION	0.008046257814993806	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999973955302935	WITHOUT_CLASSIFICATION	2.6044697064156397E-6	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999965797225974	WITHOUT_CLASSIFICATION	3.420277402596205E-6	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999998844116597	WITHOUT_CLASSIFICATION	1.1558834032372512E-7	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999995624802864	WITHOUT_CLASSIFICATION	4.3751971351132725E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999978746618963	WITHOUT_CLASSIFICATION	2.12533810372652E-6	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999995782128521	WITHOUT_CLASSIFICATION	4.2178714782747813E-7	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999992295258191	WITHOUT_CLASSIFICATION	7.70474180899725E-6	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9943265287148043	WITHOUT_CLASSIFICATION	0.005673471285195792	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9907770402268626	WITHOUT_CLASSIFICATION	0.009222959773137416	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999725359708	WITHOUT_CLASSIFICATION	2.7464029161822038E-8	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999725359708	WITHOUT_CLASSIFICATION	2.7464029161822038E-8	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999697315624295	WITHOUT_CLASSIFICATION	3.026843757053773E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999940132624	WITHOUT_CLASSIFICATION	5.986737568340646E-9	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997298732414105	WITHOUT_CLASSIFICATION	2.701267585895225E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997298732414105	WITHOUT_CLASSIFICATION	2.701267585895225E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999908562708	WITHOUT_CLASSIFICATION	9.143729186390176E-9	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999594878280735	WITHOUT_CLASSIFICATION	4.051217192638673E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999677929267761	WITHOUT_CLASSIFICATION	3.2207073223854814E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999999404003	WITHOUT_CLASSIFICATION	5.95995619296537E-11	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999973529652354	WITHOUT_CLASSIFICATION	2.6470347645399777E-6	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999990237849551	WITHOUT_CLASSIFICATION	9.762150449622676E-7	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999991591178597	WITHOUT_CLASSIFICATION	8.408821402921028E-7	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999991591178597	WITHOUT_CLASSIFICATION	8.408821402921028E-7	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998044319818	WITHOUT_CLASSIFICATION	1.9556801823306737E-7	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999978028964536	WITHOUT_CLASSIFICATION	2.19710354641496E-6	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999996877648358	WITHOUT_CLASSIFICATION	3.1223516414408965E-7	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999835280384822	WITHOUT_CLASSIFICATION	1.647196151779118E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999835280384822	WITHOUT_CLASSIFICATION	1.647196151779118E-5	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999995947485222	WITHOUT_CLASSIFICATION	4.052514777648488E-7	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999947177012491	WITHOUT_CLASSIFICATION	5.282298750881018E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9977644533990843	WITHOUT_CLASSIFICATION	0.0022355466009157505	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999999903845173	WITHOUT_CLASSIFICATION	9.615482730472568E-9	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999996925383834	WITHOUT_CLASSIFICATION	3.0746161660321734E-6	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999046738663	WITHOUT_CLASSIFICATION	9.532613368322375E-8	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999965609583279	WITHOUT_CLASSIFICATION	3.4390416720113943E-6	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999996990705021	WITHOUT_CLASSIFICATION	3.0092949781551576E-7	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999942201758	WITHOUT_CLASSIFICATION	5.779824093457598E-9	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999702558862743	WITHOUT_CLASSIFICATION	2.974411372567201E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999992681065034	WITHOUT_CLASSIFICATION	7.318934965955253E-7	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9996842505107945	WITHOUT_CLASSIFICATION	3.157494892054913E-4	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999995290772927	WITHOUT_CLASSIFICATION	4.7092270722680446E-7	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999002458346117	WITHOUT_CLASSIFICATION	9.975416538824902E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999992104360824	WITHOUT_CLASSIFICATION	7.895639176209122E-7	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999988352011951	WITHOUT_CLASSIFICATION	1.1647988048851083E-6	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999231556651	WITHOUT_CLASSIFICATION	7.684433495244481E-8	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999780755825148	WITHOUT_CLASSIFICATION	2.1924417485122487E-5	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999515790170482	WITHOUT_CLASSIFICATION	4.842098295173098E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999919706652547	WITHOUT_CLASSIFICATION	8.029334745341593E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999672467223131	WITHOUT_CLASSIFICATION	3.2753277686945144E-5	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999549687208221	WITHOUT_CLASSIFICATION	4.503127917790388E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999936568326023	WITHOUT_CLASSIFICATION	6.343167397724792E-6	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999919781462405	WITHOUT_CLASSIFICATION	8.021853759544981E-6	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9999957344195451	WITHOUT_CLASSIFICATION	4.2655804548688245E-6	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999962516554539	WITHOUT_CLASSIFICATION	3.7483445461265304E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999999342110268	WITHOUT_CLASSIFICATION	6.578897320703893E-8	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999499885778123	WITHOUT_CLASSIFICATION	5.001142218784996E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999991784473	WITHOUT_CLASSIFICATION	8.215527754928895E-10	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999986964797737	WITHOUT_CLASSIFICATION	1.3035202263538082E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9996345216188566	WITHOUT_CLASSIFICATION	3.6547838114344723E-4	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999996991202399	WITHOUT_CLASSIFICATION	3.008797600174445E-7	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998090838331	WITHOUT_CLASSIFICATION	1.9091616680875432E-7	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999816006548553	WITHOUT_CLASSIFICATION	1.8399345144747253E-5	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999994731650559	WITHOUT_CLASSIFICATION	5.268349441509342E-7	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999780436497111	WITHOUT_CLASSIFICATION	2.1956350288937557E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999942341222352	WITHOUT_CLASSIFICATION	5.765877764789058E-6	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999989992741225	WITHOUT_CLASSIFICATION	1.0007258775010562E-6	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999990839701245	WITHOUT_CLASSIFICATION	9.160298754751127E-7	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999994918810823	WITHOUT_CLASSIFICATION	5.081189176960838E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9992382961674283	WITHOUT_CLASSIFICATION	7.61703832571788E-4	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.995651021909408	WITHOUT_CLASSIFICATION	0.004348978090592005	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999986760012088	WITHOUT_CLASSIFICATION	1.3239987911633458E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999998117655516	WITHOUT_CLASSIFICATION	1.882344484827393E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999990803514074	WITHOUT_CLASSIFICATION	9.196485926702596E-7	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999978045193793	WITHOUT_CLASSIFICATION	2.1954806208298996E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9993984961781489	WITHOUT_CLASSIFICATION	6.015038218511131E-4	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999985174662257	WITHOUT_CLASSIFICATION	1.4825337742395112E-6	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999992330467511	WITHOUT_CLASSIFICATION	7.669532489015588E-6	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999997645231187	WITHOUT_CLASSIFICATION	2.35476881385745E-7	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999606725255404	WITHOUT_CLASSIFICATION	3.932747445960447E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999998695330028	WITHOUT_CLASSIFICATION	1.3046699718774455E-7	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999484419266	WITHOUT_CLASSIFICATION	5.1558073259712396E-8	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999997387002	WITHOUT_CLASSIFICATION	2.6129980614045793E-10	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999683029145396	WITHOUT_CLASSIFICATION	3.1697085460409404E-5	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999983597942318	WITHOUT_CLASSIFICATION	1.6402057681956019E-6	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9988394863102283	WITHOUT_CLASSIFICATION	0.0011605136897716729	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999996929748032	WITHOUT_CLASSIFICATION	3.0702519679566466E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9997831696644943	WITHOUT_CLASSIFICATION	2.1683033550556227E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999965569771011	WITHOUT_CLASSIFICATION	3.443022898812142E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999974681845447	WITHOUT_CLASSIFICATION	2.5318154552888085E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999974681845447	WITHOUT_CLASSIFICATION	2.5318154552888085E-6	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999704037917	WITHOUT_CLASSIFICATION	2.9596208261121725E-8	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999938541974751	WITHOUT_CLASSIFICATION	6.14580252497424E-6	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999989414476	WITHOUT_CLASSIFICATION	1.058552426680907E-9	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999989003377	WITHOUT_CLASSIFICATION	1.0996623033365395E-9	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999982601684165	WITHOUT_CLASSIFICATION	1.7398315834539588E-6	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999997016041104	WITHOUT_CLASSIFICATION	2.9839588954526633E-7	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999975416229	WITHOUT_CLASSIFICATION	2.4583770737412096E-9	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999913745223	WITHOUT_CLASSIFICATION	8.625477579155356E-9	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999978285953384	WITHOUT_CLASSIFICATION	2.1714046615332237E-6	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999877497329445	WITHOUT_CLASSIFICATION	1.2250267055602136E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999977949722569	WITHOUT_CLASSIFICATION	2.2050277430909082E-6	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999577720546745	WITHOUT_CLASSIFICATION	4.222794532549307E-5	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999987176780495	WITHOUT_CLASSIFICATION	1.2823219504681903E-6	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999998679742	WITHOUT_CLASSIFICATION	1.3202589240142474E-10	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999991825397346	WITHOUT_CLASSIFICATION	8.174602652269731E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999991825397346	WITHOUT_CLASSIFICATION	8.174602652269731E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999994056396553	WITHOUT_CLASSIFICATION	5.94360344617569E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9996044822380393	WITHOUT_CLASSIFICATION	3.955177619607038E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999547783296	WITHOUT_CLASSIFICATION	4.522167041992903E-8	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999997317057455	WITHOUT_CLASSIFICATION	2.6829425445903987E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99999996345974	WITHOUT_CLASSIFICATION	3.6540260070721214E-8	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990811187955	WITHOUT_CLASSIFICATION	9.188812044449913E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999954320400701	WITHOUT_CLASSIFICATION	4.5679599299200505E-6	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9932808569901473	WITHOUT_CLASSIFICATION	0.006719143009852609	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999992078288	WITHOUT_CLASSIFICATION	7.921712097100056E-10	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999935091726443	WITHOUT_CLASSIFICATION	6.490827355699825E-6	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999811565649	WITHOUT_CLASSIFICATION	1.884343517217397E-8	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999995344019058	WITHOUT_CLASSIFICATION	4.655980941942322E-7	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999943055195987	WITHOUT_CLASSIFICATION	5.694480401284892E-6	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999186115482	WITHOUT_CLASSIFICATION	8.138845170649277E-8	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999833826911734	WITHOUT_CLASSIFICATION	1.661730882670999E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999176503409828	WITHOUT_CLASSIFICATION	8.23496590173033E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999991153177	WITHOUT_CLASSIFICATION	8.846822981782372E-9	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999993288903275	WITHOUT_CLASSIFICATION	6.711096725001639E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999986982060586	WITHOUT_CLASSIFICATION	1.3017939413985611E-5	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999999831739007	WITHOUT_CLASSIFICATION	1.6826099313547633E-7	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999998645996824	WITHOUT_CLASSIFICATION	1.3540031761179622E-7	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999997835817709	WITHOUT_CLASSIFICATION	2.1641822910544488E-6	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999674678504	WITHOUT_CLASSIFICATION	3.2532149641687955E-8	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.999999799829802	WITHOUT_CLASSIFICATION	2.0017019792640525E-7	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.998694799912878	WITHOUT_CLASSIFICATION	0.001305200087122084	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999907916267615	WITHOUT_CLASSIFICATION	9.208373238405349E-6	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999771704143408	WITHOUT_CLASSIFICATION	2.282958565921195E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997301170839298	WITHOUT_CLASSIFICATION	2.698829160702187E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999997785494135	WITHOUT_CLASSIFICATION	2.2145058641143032E-7	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999606953556	WITHOUT_CLASSIFICATION	3.930464444428925E-8	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999965273147131	WITHOUT_CLASSIFICATION	3.4726852869303513E-6	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999645237216975	WITHOUT_CLASSIFICATION	3.5476278302544384E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999993208548	WITHOUT_CLASSIFICATION	6.791452168932281E-10	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999968849592618	WITHOUT_CLASSIFICATION	3.115040738175449E-6	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999994971220775	WITHOUT_CLASSIFICATION	5.028779225339172E-7	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999997673269527	WITHOUT_CLASSIFICATION	2.3267304724223892E-7	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999902298837	WITHOUT_CLASSIFICATION	9.770116240737975E-9	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999642116997	WITHOUT_CLASSIFICATION	3.578830027004179E-8	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999820542705032	WITHOUT_CLASSIFICATION	1.794572949683794E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999166673980708	WITHOUT_CLASSIFICATION	8.333260192913239E-5	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997766397412979	WITHOUT_CLASSIFICATION	2.233602587020741E-4	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997766397412979	WITHOUT_CLASSIFICATION	2.233602587020741E-4	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999854674599	WITHOUT_CLASSIFICATION	1.4532540074930759E-8	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9994931097788782	WITHOUT_CLASSIFICATION	5.068902211217855E-4	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999914300754199	WITHOUT_CLASSIFICATION	8.569924580039976E-6	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999820364437368	WITHOUT_CLASSIFICATION	1.7963556263180528E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999998887025523	WITHOUT_CLASSIFICATION	1.1129744773223459E-7	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999488582039	WITHOUT_CLASSIFICATION	5.1141796035052086E-8	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9994572972917275	WITHOUT_CLASSIFICATION	5.427027082724693E-4	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999107559585	WITHOUT_CLASSIFICATION	8.92440414336349E-8	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9957726768541408	WITHOUT_CLASSIFICATION	0.004227323145859126	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998074897651	WITHOUT_CLASSIFICATION	1.925102348291955E-7	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999301460166	WITHOUT_CLASSIFICATION	6.985398333299254E-8	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999893367701844	WITHOUT_CLASSIFICATION	1.066322981567352E-5	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999840680201959	WITHOUT_CLASSIFICATION	1.5931979804060064E-5	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999858187993	WITHOUT_CLASSIFICATION	1.418120060084718E-8	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999952584897449	WITHOUT_CLASSIFICATION	4.741510255055726E-6	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999988600920299	WITHOUT_CLASSIFICATION	1.1399079701179269E-6	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9997904288195096	WITHOUT_CLASSIFICATION	2.095711804904825E-4	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999890936406723	WITHOUT_CLASSIFICATION	1.090635932768865E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9990328385553148	WITHOUT_CLASSIFICATION	9.671614446851893E-4	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999972606839199	WITHOUT_CLASSIFICATION	2.7393160800931966E-6	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9987409088746272	WITHOUT_CLASSIFICATION	0.0012590911253727607	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999702959192632	WITHOUT_CLASSIFICATION	2.970408073675434E-5	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999999045321	WITHOUT_CLASSIFICATION	9.546780395903184E-11	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9994952224057381	WITHOUT_CLASSIFICATION	5.047775942619029E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999619668935021	WITHOUT_CLASSIFICATION	3.803310649778077E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998636532477606	WITHOUT_CLASSIFICATION	1.3634675223938133E-4	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999998604867107	WITHOUT_CLASSIFICATION	1.395132893445539E-7	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999988216296	WITHOUT_CLASSIFICATION	1.178370369030542E-9	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999397066736088	WITHOUT_CLASSIFICATION	6.02933263912152E-5	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999593583007134	WITHOUT_CLASSIFICATION	4.064169928664409E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999986627531922	WITHOUT_CLASSIFICATION	1.3372468078453088E-6	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999869234774754	WITHOUT_CLASSIFICATION	1.3076522524461035E-5	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999971038501	WITHOUT_CLASSIFICATION	2.896149760060315E-9	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999992858928841	WITHOUT_CLASSIFICATION	7.141071158342379E-7	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999961860454	WITHOUT_CLASSIFICATION	3.813954582353648E-9	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999947605830758	WITHOUT_CLASSIFICATION	5.239416924275884E-6	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999593527296	WITHOUT_CLASSIFICATION	4.064727043939948E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999999980727902	WITHOUT_CLASSIFICATION	1.9272098020772428E-8	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999370293841489	WITHOUT_CLASSIFICATION	6.297061585106727E-5	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999922486868466	WITHOUT_CLASSIFICATION	7.75131315350254E-6	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998170051025	WITHOUT_CLASSIFICATION	1.8299489742666161E-7	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9990576315164601	WITHOUT_CLASSIFICATION	9.423684835397974E-4	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999910640451	WITHOUT_CLASSIFICATION	8.935954833007367E-9	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999748560802	WITHOUT_CLASSIFICATION	2.5143919855958475E-8	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998039047766	WITHOUT_CLASSIFICATION	1.9609522345273366E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9998214580181599	WITHOUT_CLASSIFICATION	1.7854198183999025E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999993860746408	WITHOUT_CLASSIFICATION	6.139253591764291E-7	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999987176780495	WITHOUT_CLASSIFICATION	1.2823219504681903E-6	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999054784032	WITHOUT_CLASSIFICATION	9.452159680311702E-8	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999985494292	WITHOUT_CLASSIFICATION	1.4505707257485876E-9	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998997032862971	WITHOUT_CLASSIFICATION	1.0029671370290071E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999302389737	WITHOUT_CLASSIFICATION	6.976102636495514E-8	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999997339697	WITHOUT_CLASSIFICATION	2.6603030310482703E-10	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999914269185407	WITHOUT_CLASSIFICATION	8.573081459295851E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999790954390514	WITHOUT_CLASSIFICATION	2.0904560948661275E-5	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9992121732221749	WITHOUT_CLASSIFICATION	7.87826777825092E-4	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999768433059	WITHOUT_CLASSIFICATION	2.315669416561729E-8	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9991412199703628	WITHOUT_CLASSIFICATION	8.587800296371993E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9983523635205167	WITHOUT_CLASSIFICATION	0.0016476364794833207	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999290556137	WITHOUT_CLASSIFICATION	7.094438624402111E-8	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999979581071591	WITHOUT_CLASSIFICATION	2.0418928409534433E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999986902675182	WITHOUT_CLASSIFICATION	1.3097324818092022E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999917329756	WITHOUT_CLASSIFICATION	8.26702439551323E-8	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999995871669353	WITHOUT_CLASSIFICATION	4.1283306482422126E-7	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999945270295142	WITHOUT_CLASSIFICATION	5.472970485829555E-6	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999995524257402	WITHOUT_CLASSIFICATION	4.475742597007328E-7	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999831604821507	WITHOUT_CLASSIFICATION	1.6839517849290087E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999917329756	WITHOUT_CLASSIFICATION	8.26702439551323E-8	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9909261926294577	WITHOUT_CLASSIFICATION	0.009073807370542307	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999895803112261	WITHOUT_CLASSIFICATION	1.0419688773875281E-5	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999975932552	WITHOUT_CLASSIFICATION	2.40674483867735E-9	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998206443099	WITHOUT_CLASSIFICATION	1.7935569004101484E-7	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999980784331787	WITHOUT_CLASSIFICATION	1.9215668214002207E-6	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999844563566062	WITHOUT_CLASSIFICATION	1.5543643393822384E-5	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999840468	WITHOUT_CLASSIFICATION	1.5953167114946653E-11	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999991447631827	WITHOUT_CLASSIFICATION	8.552368172998276E-6	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999999935529672	WITHOUT_CLASSIFICATION	6.447032795596295E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9993749648370172	WITHOUT_CLASSIFICATION	6.250351629828798E-4	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999953974908026	WITHOUT_CLASSIFICATION	4.602509197390373E-6	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998509223651293	WITHOUT_CLASSIFICATION	1.4907763487074095E-4	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999904360455638	WITHOUT_CLASSIFICATION	9.56395443613604E-6	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999824635948	WITHOUT_CLASSIFICATION	1.7536405294206176E-8	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999993722936705	WITHOUT_CLASSIFICATION	6.277063294145775E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999973891793356	WITHOUT_CLASSIFICATION	2.610820664437069E-6	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999964558486504	WITHOUT_CLASSIFICATION	3.544151349594831E-6	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998398225951	WITHOUT_CLASSIFICATION	1.6017740489302062E-7	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999369253174109	WITHOUT_CLASSIFICATION	6.307468258921355E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999309934973639	WITHOUT_CLASSIFICATION	6.900650263604553E-5	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999999999498248	WITHOUT_CLASSIFICATION	5.017519167452752E-10	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999996076942052	WITHOUT_CLASSIFICATION	3.9230579483811103E-7	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999838764940405	WITHOUT_CLASSIFICATION	1.6123505959412538E-5	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999365267	WITHOUT_CLASSIFICATION	6.347326364778176E-11	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999126186288	WITHOUT_CLASSIFICATION	8.738137116332826E-8	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999997222947769	WITHOUT_CLASSIFICATION	2.7770522310068297E-6	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9858098684909777	WITHOUT_CLASSIFICATION	0.014190131509022257	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999194743808	WITHOUT_CLASSIFICATION	8.052561907375573E-8	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9997281320118363	WITHOUT_CLASSIFICATION	2.718679881637209E-4	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.771863029298292	DEFECT	0.22813697070170802	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999391504688	WITHOUT_CLASSIFICATION	6.084953111785313E-8	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9981930217389344	WITHOUT_CLASSIFICATION	0.0018069782610654961	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9975127692136825	WITHOUT_CLASSIFICATION	0.002487230786317563	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999997765807837	WITHOUT_CLASSIFICATION	2.2341921630523693E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999998301762	WITHOUT_CLASSIFICATION	1.6982372183756523E-10	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999992032157	WITHOUT_CLASSIFICATION	7.967841898595757E-10	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999752749597	WITHOUT_CLASSIFICATION	2.4725040337268493E-8	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999871509609907	WITHOUT_CLASSIFICATION	1.2849039009221917E-5	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999944578722	WITHOUT_CLASSIFICATION	5.5421277349863496E-9	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999429476904573	WITHOUT_CLASSIFICATION	5.70523095425703E-5	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999967347284974	WITHOUT_CLASSIFICATION	3.2652715025242173E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999967347284974	WITHOUT_CLASSIFICATION	3.2652715025242173E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999738592994497	WITHOUT_CLASSIFICATION	2.614070055032565E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999988238592874	WITHOUT_CLASSIFICATION	1.17614071261034E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999347117559	WITHOUT_CLASSIFICATION	6.528824423858274E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5258102552350031	WITHOUT_CLASSIFICATION	0.47418974476499687	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999013980023	WITHOUT_CLASSIFICATION	9.860199769917062E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999013980023	WITHOUT_CLASSIFICATION	9.860199769917062E-7	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999941165034918	WITHOUT_CLASSIFICATION	5.883496508153394E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998270606257	WITHOUT_CLASSIFICATION	1.7293937426630318E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999547087309495	WITHOUT_CLASSIFICATION	4.529126905056779E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999601300854176	WITHOUT_CLASSIFICATION	3.986991458235843E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999560397265	WITHOUT_CLASSIFICATION	4.396027358243242E-8	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999502777211282	WITHOUT_CLASSIFICATION	4.972227887165487E-5	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999936850387354	WITHOUT_CLASSIFICATION	6.314961264544289E-6	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999999997506101	WITHOUT_CLASSIFICATION	2.493898946208877E-9	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9998013599757906	WITHOUT_CLASSIFICATION	1.9864002420938171E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998893045433	WITHOUT_CLASSIFICATION	1.1069545672346128E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998893045433	WITHOUT_CLASSIFICATION	1.1069545672346128E-7	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999987944514896	WITHOUT_CLASSIFICATION	1.2055485103594839E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999965125669217	WITHOUT_CLASSIFICATION	3.48743307831532E-6	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999998528871927	WITHOUT_CLASSIFICATION	1.4711280733943285E-7	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999656948142717	WITHOUT_CLASSIFICATION	3.430518572830838E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807741411039	WITHOUT_CLASSIFICATION	1.9225858896160025E-5	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999996114617993	WITHOUT_CLASSIFICATION	3.885382007616027E-7	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999364396304	WITHOUT_CLASSIFICATION	6.356036956562987E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807741411039	WITHOUT_CLASSIFICATION	1.9225858896160025E-5	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999965228192	WITHOUT_CLASSIFICATION	3.4771807547067963E-9	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999073235319788	WITHOUT_CLASSIFICATION	9.267646802126364E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998724200173236	WITHOUT_CLASSIFICATION	1.2757998267646926E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999858595848	WITHOUT_CLASSIFICATION	1.4140415206643482E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9993749648370172	WITHOUT_CLASSIFICATION	6.250351629828798E-4	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999961923659315	WITHOUT_CLASSIFICATION	3.8076340684557555E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9994981963554411	WITHOUT_CLASSIFICATION	5.018036445589297E-4	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999623528426504	WITHOUT_CLASSIFICATION	3.7647157349605236E-5	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999999714430267	WITHOUT_CLASSIFICATION	2.8556973356011846E-8	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999988326884623	WITHOUT_CLASSIFICATION	1.1673115375644986E-6	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999998860854064	WITHOUT_CLASSIFICATION	1.139145935973335E-6	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999982744765453	WITHOUT_CLASSIFICATION	1.7255234547306004E-6	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999292825821	WITHOUT_CLASSIFICATION	7.071741795241442E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999732494321708	WITHOUT_CLASSIFICATION	2.6750567829151493E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9970655427200811	WITHOUT_CLASSIFICATION	0.002934457279918992	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9970655427200811	WITHOUT_CLASSIFICATION	0.002934457279918992	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999969119782885	WITHOUT_CLASSIFICATION	3.088021711403526E-6	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999148803113	WITHOUT_CLASSIFICATION	8.511968875024153E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999775039352524	WITHOUT_CLASSIFICATION	2.2496064747591155E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999929560202747	WITHOUT_CLASSIFICATION	7.043979725249311E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999991364543629	WITHOUT_CLASSIFICATION	8.635456371842495E-7	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999237995092	WITHOUT_CLASSIFICATION	7.620049079171872E-8	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999983559165236	WITHOUT_CLASSIFICATION	1.6440834763518988E-6	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9976249961931011	WITHOUT_CLASSIFICATION	0.002375003806898935	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999995450378115	WITHOUT_CLASSIFICATION	4.549621885072817E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999960761501981	WITHOUT_CLASSIFICATION	3.9238498019109985E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969429204973	WITHOUT_CLASSIFICATION	3.0570795026639577E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.8116754149947314	DEFECT	0.18832458500526858	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999991392637306	WITHOUT_CLASSIFICATION	8.607362693964426E-7	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999997886559805	WITHOUT_CLASSIFICATION	2.1134401941043432E-7	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.999999393510144	WITHOUT_CLASSIFICATION	6.064898560284658E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999827823195	WITHOUT_CLASSIFICATION	1.721768050322218E-8	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999880267587156	WITHOUT_CLASSIFICATION	1.1973241284418227E-5	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999672512219288	WITHOUT_CLASSIFICATION	3.2748778071187265E-5	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9997863054604214	WITHOUT_CLASSIFICATION	2.136945395787436E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999199311384233	WITHOUT_CLASSIFICATION	8.006886157672928E-5	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999994657675079	WITHOUT_CLASSIFICATION	5.342324921436895E-7	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999026964246	WITHOUT_CLASSIFICATION	9.730357549565839E-8	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9977644533990843	WITHOUT_CLASSIFICATION	0.0022355466009157505	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999996366206	WITHOUT_CLASSIFICATION	3.633795141655204E-10	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999925975501254	WITHOUT_CLASSIFICATION	7.402449874557463E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999925975501254	WITHOUT_CLASSIFICATION	7.402449874557463E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998725590710582	WITHOUT_CLASSIFICATION	1.2744092894170276E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999753783164568	WITHOUT_CLASSIFICATION	2.46216835432687E-5	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999999162102	WITHOUT_CLASSIFICATION	8.378975032307518E-11	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999977751434974	WITHOUT_CLASSIFICATION	2.2248565024826182E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999989358905479	WITHOUT_CLASSIFICATION	1.0641094521160519E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.999988030455502	WITHOUT_CLASSIFICATION	1.1969544497964061E-5	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9981305192972288	WITHOUT_CLASSIFICATION	0.0018694807027710859	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999845988858734	WITHOUT_CLASSIFICATION	1.54011141265969E-5	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9520445167987349	WITHOUT_CLASSIFICATION	0.04795548320126511	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9478798860317135	DEFECT	0.052120113968286565	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.7264233107120235	DEFECT	0.27357668928797657	WITHOUT_CLASSIFICATION
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.8704518960341626	DEFECT	0.1295481039658374	WITHOUT_CLASSIFICATION
/*	DEFECT	0.9878208083202911	WITHOUT_CLASSIFICATION	0.012179191679708967	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9951133299793287	WITHOUT_CLASSIFICATION	0.004886670020671276	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.995139341392059	DEFECT	0.004860658607941036	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.6702851036025178	WITHOUT_CLASSIFICATION	0.32971489639748225	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9999800159000346	DEFECT	1.9984099965356567E-5	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.6832710672960747	DEFECT	0.3167289327039254	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7529029656764655	DEFECT	0.24709703432353436	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7529029656764655	DEFECT	0.24709703432353436	WITHOUT_CLASSIFICATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9769997754839915	WITHOUT_CLASSIFICATION	0.023000224516008493	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999198973149352	WITHOUT_CLASSIFICATION	8.010268506475559E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9648142750990277	DEFECT	0.03518572490097216	WITHOUT_CLASSIFICATION
// this call is side-effecty	DEFECT	0.9999890961884373	WITHOUT_CLASSIFICATION	1.0903811562717632E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9945681646751214	WITHOUT_CLASSIFICATION	0.005431835324878575	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9652386734086821	WITHOUT_CLASSIFICATION	0.034761326591317906	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.967056444093959	DEFECT	0.03294355590604107	WITHOUT_CLASSIFICATION
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9940610792384807	WITHOUT_CLASSIFICATION	0.005938920761519288	DEFECT
//TODO: is this completely correct?	DEFECT	0.9081927994749399	WITHOUT_CLASSIFICATION	0.09180720052506006	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999920291155361	WITHOUT_CLASSIFICATION	7.970884463934594E-6	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.681983506337568	DEFECT	0.31801649366243195	WITHOUT_CLASSIFICATION
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9997025884332056	WITHOUT_CLASSIFICATION	2.9741156679440473E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9685764720658526	DEFECT	0.0314235279341474	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9512678645882678	DEFECT	0.0487321354117321	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9980844077989609	WITHOUT_CLASSIFICATION	0.0019155922010390687	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9682698020155868	WITHOUT_CLASSIFICATION	0.03173019798441313	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.865001495816072	WITHOUT_CLASSIFICATION	0.13499850418392792	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9845471428859854	WITHOUT_CLASSIFICATION	0.015452857114014451	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.8877787567289664	WITHOUT_CLASSIFICATION	0.1122212432710335	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7529029656764655	DEFECT	0.24709703432353436	WITHOUT_CLASSIFICATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9997505324921487	DEFECT	2.4946750785133674E-4	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9476202411080324	WITHOUT_CLASSIFICATION	0.052379758891967644	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.6479659022586288	WITHOUT_CLASSIFICATION	0.3520340977413712	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9050152578505699	WITHOUT_CLASSIFICATION	0.0949847421494301	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999902473490304	WITHOUT_CLASSIFICATION	9.752650969665273E-6	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9999894567901078	WITHOUT_CLASSIFICATION	1.0543209892221339E-5	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9945462306290398	WITHOUT_CLASSIFICATION	0.00545376937096022	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.971040676860877	DEFECT	0.028959323139122962	WITHOUT_CLASSIFICATION
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.5325455131638613	DEFECT	0.46745448683613855	WITHOUT_CLASSIFICATION
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9930270821615595	WITHOUT_CLASSIFICATION	0.0069729178384404095	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9998026236888266	WITHOUT_CLASSIFICATION	1.973763111733125E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.8343021088633674	DEFECT	0.16569789113663255	WITHOUT_CLASSIFICATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9974763265509833	WITHOUT_CLASSIFICATION	0.002523673449016645	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9768969820357101	WITHOUT_CLASSIFICATION	0.02310301796428986	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.6831655496174477	WITHOUT_CLASSIFICATION	0.31683445038255226	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.9691517347695133	WITHOUT_CLASSIFICATION	0.03084826523048664	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9048171958542335	DEFECT	0.09518280414576645	WITHOUT_CLASSIFICATION
