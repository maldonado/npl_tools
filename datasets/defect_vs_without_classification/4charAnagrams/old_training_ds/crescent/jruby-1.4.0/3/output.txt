// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999871365688396	WITHOUT_CLASSIFICATION	1.2863431160382567E-5	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999895323371298	WITHOUT_CLASSIFICATION	1.046766287021021E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999264795657143	WITHOUT_CLASSIFICATION	7.352043428567002E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999264795657143	WITHOUT_CLASSIFICATION	7.352043428567002E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998831669372096	WITHOUT_CLASSIFICATION	1.1683306279038544E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998831669372096	WITHOUT_CLASSIFICATION	1.1683306279038544E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999129688913614	WITHOUT_CLASSIFICATION	8.703110863859617E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999992532539569	WITHOUT_CLASSIFICATION	7.46746043186776E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999900650669228	WITHOUT_CLASSIFICATION	9.93493307729372E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999905900726913	WITHOUT_CLASSIFICATION	9.409927308726492E-6	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999841949821407	WITHOUT_CLASSIFICATION	1.5805017859303497E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999841949821407	WITHOUT_CLASSIFICATION	1.5805017859303497E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999901973447235	WITHOUT_CLASSIFICATION	9.802655276400754E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998691396088294	WITHOUT_CLASSIFICATION	1.3086039117059145E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998691396088294	WITHOUT_CLASSIFICATION	1.3086039117059145E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999543482835468	WITHOUT_CLASSIFICATION	4.5651716453182385E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999680806722847	WITHOUT_CLASSIFICATION	3.191932771534847E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999043079403213	WITHOUT_CLASSIFICATION	9.569205967872597E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999043079403213	WITHOUT_CLASSIFICATION	9.569205967872597E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999043079403213	WITHOUT_CLASSIFICATION	9.569205967872597E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999043079403213	WITHOUT_CLASSIFICATION	9.569205967872597E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999043079403213	WITHOUT_CLASSIFICATION	9.569205967872597E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999043079403213	WITHOUT_CLASSIFICATION	9.569205967872597E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999043079403213	WITHOUT_CLASSIFICATION	9.569205967872597E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999113914510463	WITHOUT_CLASSIFICATION	8.860854895363201E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999113914510463	WITHOUT_CLASSIFICATION	8.860854895363201E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999113914510463	WITHOUT_CLASSIFICATION	8.860854895363201E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999113914510463	WITHOUT_CLASSIFICATION	8.860854895363201E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999113914510463	WITHOUT_CLASSIFICATION	8.860854895363201E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999113914510463	WITHOUT_CLASSIFICATION	8.860854895363201E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999113914510463	WITHOUT_CLASSIFICATION	8.860854895363201E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998934665720222	WITHOUT_CLASSIFICATION	1.0653342797778733E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998934665720222	WITHOUT_CLASSIFICATION	1.0653342797778733E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998934665720222	WITHOUT_CLASSIFICATION	1.0653342797778733E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998934665720222	WITHOUT_CLASSIFICATION	1.0653342797778733E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998934665720222	WITHOUT_CLASSIFICATION	1.0653342797778733E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998934665720222	WITHOUT_CLASSIFICATION	1.0653342797778733E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998801033819299	WITHOUT_CLASSIFICATION	1.1989661807004532E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998801033819299	WITHOUT_CLASSIFICATION	1.1989661807004532E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998801033819299	WITHOUT_CLASSIFICATION	1.1989661807004532E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998801033819299	WITHOUT_CLASSIFICATION	1.1989661807004532E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998801033819299	WITHOUT_CLASSIFICATION	1.1989661807004532E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998801033819299	WITHOUT_CLASSIFICATION	1.1989661807004532E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999007301637821	WITHOUT_CLASSIFICATION	9.926983621790318E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999007301637821	WITHOUT_CLASSIFICATION	9.926983621790318E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999007301637821	WITHOUT_CLASSIFICATION	9.926983621790318E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999007301637821	WITHOUT_CLASSIFICATION	9.926983621790318E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999007301637821	WITHOUT_CLASSIFICATION	9.926983621790318E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999007301637821	WITHOUT_CLASSIFICATION	9.926983621790318E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999007301637821	WITHOUT_CLASSIFICATION	9.926983621790318E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998494111609452	WITHOUT_CLASSIFICATION	1.5058883905486463E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998494111609452	WITHOUT_CLASSIFICATION	1.5058883905486463E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998494111609452	WITHOUT_CLASSIFICATION	1.5058883905486463E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998494111609452	WITHOUT_CLASSIFICATION	1.5058883905486463E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9998775390506813	WITHOUT_CLASSIFICATION	1.2246094931872933E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9998775390506813	WITHOUT_CLASSIFICATION	1.2246094931872933E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999960736365507	WITHOUT_CLASSIFICATION	3.926363449192835E-6	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999861535939224	WITHOUT_CLASSIFICATION	1.3846406077720087E-5	DEFECT
// name	WITHOUT_CLASSIFICATION	0.999991484245389	WITHOUT_CLASSIFICATION	8.515754610946315E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999959093947827	WITHOUT_CLASSIFICATION	4.0906052172352135E-6	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999954250673162	WITHOUT_CLASSIFICATION	4.574932683814075E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999921610592396	WITHOUT_CLASSIFICATION	7.838940760343003E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999921610592396	WITHOUT_CLASSIFICATION	7.838940760343003E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999921610592396	WITHOUT_CLASSIFICATION	7.838940760343003E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999921610592396	WITHOUT_CLASSIFICATION	7.838940760343003E-6	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9999998303369677	WITHOUT_CLASSIFICATION	1.6966303232447552E-7	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999943469350334	WITHOUT_CLASSIFICATION	5.653064966571606E-6	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999992124966797	WITHOUT_CLASSIFICATION	7.87503320306411E-7	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.999996168689327	WITHOUT_CLASSIFICATION	3.831310673036119E-6	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.999923391375628	WITHOUT_CLASSIFICATION	7.660862437194406E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999987548622663	WITHOUT_CLASSIFICATION	1.2451377337402807E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999902406924193	WITHOUT_CLASSIFICATION	9.759307580720204E-6	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999899945330508	WITHOUT_CLASSIFICATION	1.0005466949090573E-5	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.99999946668645	WITHOUT_CLASSIFICATION	5.333135500944496E-7	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9997258211919213	WITHOUT_CLASSIFICATION	2.7417880807867253E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999934761958288	WITHOUT_CLASSIFICATION	6.523804171189289E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999952755525967	WITHOUT_CLASSIFICATION	4.724447403221171E-6	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999959767543581	WITHOUT_CLASSIFICATION	4.0232456419024845E-6	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999990050585028	WITHOUT_CLASSIFICATION	9.94941497221662E-7	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999972751318155	WITHOUT_CLASSIFICATION	2.724868184438812E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999985133665197	WITHOUT_CLASSIFICATION	1.486633480358103E-6	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999991683121348	WITHOUT_CLASSIFICATION	8.316878653636297E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999921610592396	WITHOUT_CLASSIFICATION	7.838940760343003E-6	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999981947187773	WITHOUT_CLASSIFICATION	1.805281222769819E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999978254972952	WITHOUT_CLASSIFICATION	2.174502704733724E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999963162000797	WITHOUT_CLASSIFICATION	3.6837999202860836E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999717067916405	WITHOUT_CLASSIFICATION	2.829320835954131E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.99999564823672	WITHOUT_CLASSIFICATION	4.351763279916002E-6	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999972535732158	WITHOUT_CLASSIFICATION	2.7464267842127775E-6	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999989697930498	WITHOUT_CLASSIFICATION	1.0302069501346318E-6	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999993978377664	WITHOUT_CLASSIFICATION	6.021622337252701E-7	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.999998836303086	WITHOUT_CLASSIFICATION	1.1636969140602213E-6	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9999994694005645	WITHOUT_CLASSIFICATION	5.305994354061808E-7	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9999590735168888	WITHOUT_CLASSIFICATION	4.092648311115197E-5	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999880258727573	WITHOUT_CLASSIFICATION	1.197412724278676E-5	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.999994434315567	WITHOUT_CLASSIFICATION	5.5656844329953325E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999961511691945	WITHOUT_CLASSIFICATION	3.8488308054639065E-6	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999645785227067	WITHOUT_CLASSIFICATION	3.542147729329681E-5	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999828747086337	WITHOUT_CLASSIFICATION	1.712529136631783E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999954818068029	WITHOUT_CLASSIFICATION	4.518193197057955E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999990202704943	WITHOUT_CLASSIFICATION	9.79729505651062E-7	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999985921194703	WITHOUT_CLASSIFICATION	1.4078805296842272E-6	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999985202947206	WITHOUT_CLASSIFICATION	1.4797052793995206E-6	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9999003338586046	WITHOUT_CLASSIFICATION	9.966614139539134E-5	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999855208872829	WITHOUT_CLASSIFICATION	1.4479112717072777E-5	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999643599155585	WITHOUT_CLASSIFICATION	3.564008444135038E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999431689741013	WITHOUT_CLASSIFICATION	5.683102589862205E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999928277464192	WITHOUT_CLASSIFICATION	7.1722535806962E-6	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999908471313087	WITHOUT_CLASSIFICATION	9.152868691193106E-6	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999985758762002	WITHOUT_CLASSIFICATION	1.4241237997838569E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9898749457536488	WITHOUT_CLASSIFICATION	0.01012505424635131	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999991235952947	WITHOUT_CLASSIFICATION	8.764047053702936E-7	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999946698482336	WITHOUT_CLASSIFICATION	5.330151766362513E-6	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999944472967518	WITHOUT_CLASSIFICATION	5.552703248249336E-6	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999804190016123	WITHOUT_CLASSIFICATION	1.9580998387749016E-5	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999731961012206	WITHOUT_CLASSIFICATION	2.680389877942155E-5	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999928039590921	WITHOUT_CLASSIFICATION	7.196040907975277E-6	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999997966925422	WITHOUT_CLASSIFICATION	2.0330745770965582E-7	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999999108658842	WITHOUT_CLASSIFICATION	8.913411581009578E-8	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999919133790639	WITHOUT_CLASSIFICATION	8.086620936067016E-6	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.999996365485691	WITHOUT_CLASSIFICATION	3.63451430904157E-6	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999967663656043	WITHOUT_CLASSIFICATION	3.233634395842325E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999576971597431	WITHOUT_CLASSIFICATION	4.230284025682922E-5	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.999980583912913	WITHOUT_CLASSIFICATION	1.9416087086991032E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999862597043603	WITHOUT_CLASSIFICATION	1.374029563975856E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999973878557816	WITHOUT_CLASSIFICATION	2.612144218480892E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999952060036605	WITHOUT_CLASSIFICATION	4.793996339479762E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999952060036605	WITHOUT_CLASSIFICATION	4.793996339479762E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999965294992742	WITHOUT_CLASSIFICATION	3.4705007257898235E-6	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999992963934233	WITHOUT_CLASSIFICATION	7.036065767459099E-7	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999940037645918	WITHOUT_CLASSIFICATION	5.996235408244633E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999991647469172	WITHOUT_CLASSIFICATION	8.352530828024606E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999665522910669	WITHOUT_CLASSIFICATION	3.344770893314151E-5	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9999033047918087	WITHOUT_CLASSIFICATION	9.669520819141519E-5	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9998891177406691	WITHOUT_CLASSIFICATION	1.108822593308728E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999821900440653	WITHOUT_CLASSIFICATION	1.7809955934688864E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999862597043603	WITHOUT_CLASSIFICATION	1.374029563975856E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999935344556804	WITHOUT_CLASSIFICATION	6.465544319537902E-6	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999829871095094	WITHOUT_CLASSIFICATION	1.7012890490512582E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999996547465176	WITHOUT_CLASSIFICATION	3.452534823181926E-7	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999931256480752	WITHOUT_CLASSIFICATION	6.874351924814063E-6	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999980240192147	WITHOUT_CLASSIFICATION	1.9759807853092846E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999988691385376	WITHOUT_CLASSIFICATION	1.130861462321254E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999988691385376	WITHOUT_CLASSIFICATION	1.130861462321254E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999988691385376	WITHOUT_CLASSIFICATION	1.130861462321254E-6	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999906947023085	WITHOUT_CLASSIFICATION	9.305297691570535E-6	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.999999824062737	WITHOUT_CLASSIFICATION	1.7593726294795567E-7	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999998648026848	WITHOUT_CLASSIFICATION	1.351973151902E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9999677218919293	WITHOUT_CLASSIFICATION	3.227810807073891E-5	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999988523377398	WITHOUT_CLASSIFICATION	1.147662260300054E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.999982696154171	WITHOUT_CLASSIFICATION	1.730384582904449E-5	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9999471846342742	WITHOUT_CLASSIFICATION	5.281536572564886E-5	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999984218461253	WITHOUT_CLASSIFICATION	1.578153874781872E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999897616226959	WITHOUT_CLASSIFICATION	1.0238377304047171E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999897616226959	WITHOUT_CLASSIFICATION	1.0238377304047171E-5	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999778974338798	WITHOUT_CLASSIFICATION	2.210256612022584E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999998068668654	WITHOUT_CLASSIFICATION	1.9313313455896053E-7	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999771186385762	WITHOUT_CLASSIFICATION	2.2881361423826753E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999771186385762	WITHOUT_CLASSIFICATION	2.2881361423826753E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999998415166175	WITHOUT_CLASSIFICATION	1.5848338248067292E-7	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999981081340777	WITHOUT_CLASSIFICATION	1.891865922318776E-6	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9998468583152345	WITHOUT_CLASSIFICATION	1.5314168476555866E-4	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999984349421638	WITHOUT_CLASSIFICATION	1.5650578362288622E-6	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.999993535749455	WITHOUT_CLASSIFICATION	6.4642505450360545E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999966711547555	WITHOUT_CLASSIFICATION	3.3288452444450235E-6	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999528728655038	WITHOUT_CLASSIFICATION	4.712713449615612E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999897406119671	WITHOUT_CLASSIFICATION	1.0259388032841672E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.999995441465342	WITHOUT_CLASSIFICATION	4.558534657969213E-6	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999992430204933	WITHOUT_CLASSIFICATION	7.56979506729837E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999862597043603	WITHOUT_CLASSIFICATION	1.374029563975856E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999949097962825	WITHOUT_CLASSIFICATION	5.09020371754234E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999991255335952	WITHOUT_CLASSIFICATION	8.744664049229106E-7	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999857873380543	WITHOUT_CLASSIFICATION	1.4212661945564089E-5	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9994152106610255	WITHOUT_CLASSIFICATION	5.847893389744906E-4	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999994387602702	WITHOUT_CLASSIFICATION	5.612397298020982E-7	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999854961590525	WITHOUT_CLASSIFICATION	1.4503840947474447E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9994033640052264	WITHOUT_CLASSIFICATION	5.966359947735527E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9985967772980207	WITHOUT_CLASSIFICATION	0.0014032227019793295	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.99999715867751	WITHOUT_CLASSIFICATION	2.8413224899608208E-6	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999757039722869	WITHOUT_CLASSIFICATION	2.429602771316973E-5	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999989076356808	WITHOUT_CLASSIFICATION	1.092364319246571E-6	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999985021352132	WITHOUT_CLASSIFICATION	1.4978647866780254E-6	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9992966535307467	WITHOUT_CLASSIFICATION	7.033464692532158E-4	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999929260516759	WITHOUT_CLASSIFICATION	7.073948324126781E-6	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.999980732034433	WITHOUT_CLASSIFICATION	1.9267965566945098E-5	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999678572618922	WITHOUT_CLASSIFICATION	3.214273810781359E-5	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999997727261859	WITHOUT_CLASSIFICATION	2.2727381395071794E-7	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.999980148306703	WITHOUT_CLASSIFICATION	1.9851693296995636E-5	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999832747442463	WITHOUT_CLASSIFICATION	1.6725255753685584E-5	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999385212655	WITHOUT_CLASSIFICATION	6.14787345344476E-8	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.999994978384822	WITHOUT_CLASSIFICATION	5.021615178040702E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999991148602846	WITHOUT_CLASSIFICATION	8.851397153191304E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999799625512945	WITHOUT_CLASSIFICATION	2.0037448705502223E-5	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999933948049613	WITHOUT_CLASSIFICATION	6.605195038661274E-6	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999999535411956	WITHOUT_CLASSIFICATION	4.6458804438864105E-8	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999966337343071	WITHOUT_CLASSIFICATION	3.366265692984545E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999858634083935	WITHOUT_CLASSIFICATION	1.4136591606576853E-5	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999860588505226	WITHOUT_CLASSIFICATION	1.3941149477388626E-5	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999993909272303	WITHOUT_CLASSIFICATION	6.090727696280091E-7	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999965474699968	WITHOUT_CLASSIFICATION	3.4525300031717453E-6	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999996801149823	WITHOUT_CLASSIFICATION	3.19885017639639E-7	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999983024884919	WITHOUT_CLASSIFICATION	1.6975115081897363E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999976571028487	WITHOUT_CLASSIFICATION	2.342897151310713E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999982096183043	WITHOUT_CLASSIFICATION	1.7903816956336902E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999884713203694	WITHOUT_CLASSIFICATION	1.1528679630605055E-5	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999282433497081	WITHOUT_CLASSIFICATION	7.175665029190969E-5	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999971705365577	WITHOUT_CLASSIFICATION	2.829463442275634E-6	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999884313270669	WITHOUT_CLASSIFICATION	1.1568672933131691E-5	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999924452526756	WITHOUT_CLASSIFICATION	7.554747324413516E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998630846065484	WITHOUT_CLASSIFICATION	1.369153934516258E-4	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999990476887749	WITHOUT_CLASSIFICATION	9.523112250516014E-7	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999950069837298	WITHOUT_CLASSIFICATION	4.9930162701863754E-6	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999990139007026	WITHOUT_CLASSIFICATION	9.860992974163534E-7	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999955658283363	WITHOUT_CLASSIFICATION	4.434171663706743E-6	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999973461863688	WITHOUT_CLASSIFICATION	2.6538136312143543E-6	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999960628998611	WITHOUT_CLASSIFICATION	3.9371001388096045E-6	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999829752411828	WITHOUT_CLASSIFICATION	1.7024758817192917E-5	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999974850044382	WITHOUT_CLASSIFICATION	2.5149955619368603E-6	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999982101603491	WITHOUT_CLASSIFICATION	1.7898396508984365E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999494684835254	WITHOUT_CLASSIFICATION	5.053151647446015E-5	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999331530530005	WITHOUT_CLASSIFICATION	6.684694699956804E-5	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999995467985471	WITHOUT_CLASSIFICATION	4.5320145295587094E-7	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999980625948043	WITHOUT_CLASSIFICATION	1.9374051958093664E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999996966568165	WITHOUT_CLASSIFICATION	3.0334318349424385E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999912111936866	WITHOUT_CLASSIFICATION	8.788806313374012E-6	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999546729905484	WITHOUT_CLASSIFICATION	4.5327009451640664E-5	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9995748705455629	WITHOUT_CLASSIFICATION	4.251294544370883E-4	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999972679791609	WITHOUT_CLASSIFICATION	2.7320208392285246E-6	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.999999570891271	WITHOUT_CLASSIFICATION	4.291087290060419E-7	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999978235222582	WITHOUT_CLASSIFICATION	2.1764777418620304E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999812135853875	WITHOUT_CLASSIFICATION	1.878641461251758E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999812135853875	WITHOUT_CLASSIFICATION	1.878641461251758E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999742075366639	WITHOUT_CLASSIFICATION	2.579246333604673E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999742075366639	WITHOUT_CLASSIFICATION	2.579246333604673E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999829320900027	WITHOUT_CLASSIFICATION	1.706790999736064E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999829320900027	WITHOUT_CLASSIFICATION	1.706790999736064E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999873630396054	WITHOUT_CLASSIFICATION	1.2636960394563922E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999873630396054	WITHOUT_CLASSIFICATION	1.2636960394563922E-5	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999972888726061	WITHOUT_CLASSIFICATION	2.7111273939734284E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999945564376893	WITHOUT_CLASSIFICATION	5.443562310774991E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999749422036806	WITHOUT_CLASSIFICATION	2.5057796319547016E-5	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999947677756846	WITHOUT_CLASSIFICATION	5.232224315335216E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999997969098303	WITHOUT_CLASSIFICATION	2.03090169698121E-7	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999973384100892	WITHOUT_CLASSIFICATION	2.6615899107972203E-6	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9998939420682056	WITHOUT_CLASSIFICATION	1.0605793179446741E-4	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.999996500189858	WITHOUT_CLASSIFICATION	3.4998101421318602E-6	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999899681700157	WITHOUT_CLASSIFICATION	1.0031829984294749E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999971364015646	WITHOUT_CLASSIFICATION	2.8635984352993265E-6	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999957152043062	WITHOUT_CLASSIFICATION	4.284795693801535E-6	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999897512456938	WITHOUT_CLASSIFICATION	1.0248754306290322E-5	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999855112394306	WITHOUT_CLASSIFICATION	1.4488760569484843E-5	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999994728863761	WITHOUT_CLASSIFICATION	5.271136237411585E-7	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999974420068741	WITHOUT_CLASSIFICATION	2.5579931259171527E-6	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999850226715046	WITHOUT_CLASSIFICATION	1.4977328495348862E-5	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999979941859367	WITHOUT_CLASSIFICATION	2.0058140632589827E-6	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999964382798147	WITHOUT_CLASSIFICATION	3.561720185228334E-6	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999702767003124	WITHOUT_CLASSIFICATION	2.9723299687681125E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9999624668618063	WITHOUT_CLASSIFICATION	3.753313819377814E-5	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999753884045617	WITHOUT_CLASSIFICATION	2.461159543838553E-5	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999867722527165	WITHOUT_CLASSIFICATION	1.3227747283610289E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999953473606605	WITHOUT_CLASSIFICATION	4.652639339393006E-6	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999892690940979	WITHOUT_CLASSIFICATION	1.073090590217441E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999835326908688	WITHOUT_CLASSIFICATION	1.64673091312636E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999931215505151	WITHOUT_CLASSIFICATION	6.878449484923897E-6	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999921648524646	WITHOUT_CLASSIFICATION	7.835147535473556E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999900627526913	WITHOUT_CLASSIFICATION	9.937247308719981E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999900627526913	WITHOUT_CLASSIFICATION	9.937247308719981E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999894379406982	WITHOUT_CLASSIFICATION	1.0562059301804374E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999954071490396	WITHOUT_CLASSIFICATION	4.5928509604741755E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999976817567376	WITHOUT_CLASSIFICATION	2.3182432623918287E-6	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999989714423453	WITHOUT_CLASSIFICATION	1.0285576547216438E-6	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.999982419630314	WITHOUT_CLASSIFICATION	1.7580369686016216E-5	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999803125247778	WITHOUT_CLASSIFICATION	1.9687475222148308E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999906617794725	WITHOUT_CLASSIFICATION	9.33822052756635E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999906617794725	WITHOUT_CLASSIFICATION	9.33822052756635E-6	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999911572490736	WITHOUT_CLASSIFICATION	8.842750926404179E-6	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.7629335023157608	WITHOUT_CLASSIFICATION	0.23706649768423918	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999794430539954	WITHOUT_CLASSIFICATION	2.0556946004604582E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999794430539954	WITHOUT_CLASSIFICATION	2.0556946004604582E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9999987707952839	WITHOUT_CLASSIFICATION	1.2292047160286286E-6	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999823951027835	WITHOUT_CLASSIFICATION	1.760489721639469E-5	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999823951027835	WITHOUT_CLASSIFICATION	1.760489721639469E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999899925356119	WITHOUT_CLASSIFICATION	1.0007464388058599E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999899925356119	WITHOUT_CLASSIFICATION	1.0007464388058599E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999829264800872	WITHOUT_CLASSIFICATION	1.707351991279063E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999829264800872	WITHOUT_CLASSIFICATION	1.707351991279063E-5	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.999982816560052	WITHOUT_CLASSIFICATION	1.7183439948079874E-5	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.999991362019094	WITHOUT_CLASSIFICATION	8.637980906034912E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999875811421164	WITHOUT_CLASSIFICATION	1.2418857883549506E-5	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.999994347647804	WITHOUT_CLASSIFICATION	5.652352195970702E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999990929297176	WITHOUT_CLASSIFICATION	9.07070282433246E-7	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999971652764318	WITHOUT_CLASSIFICATION	2.8347235682535183E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999977171643131	WITHOUT_CLASSIFICATION	2.2828356870253093E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.999996325354092	WITHOUT_CLASSIFICATION	3.6746459080865914E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999977171643131	WITHOUT_CLASSIFICATION	2.2828356870253093E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9998361400487945	WITHOUT_CLASSIFICATION	1.638599512054244E-4	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999992817759359	WITHOUT_CLASSIFICATION	7.182240640849747E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999979535598932	WITHOUT_CLASSIFICATION	2.046440106790666E-6	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999984442427609	WITHOUT_CLASSIFICATION	1.5557572391487563E-6	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999971646636642	WITHOUT_CLASSIFICATION	2.83533633580795E-6	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999952276694183	WITHOUT_CLASSIFICATION	4.772330581694687E-6	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999980216724733	WITHOUT_CLASSIFICATION	1.9783275266942344E-6	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999949401001327	WITHOUT_CLASSIFICATION	5.0598998674039E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999987566495565	WITHOUT_CLASSIFICATION	1.243350443452315E-6	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999885063686162	WITHOUT_CLASSIFICATION	1.1493631383739377E-5	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999957799139473	WITHOUT_CLASSIFICATION	4.220086052819219E-6	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999983019454197	WITHOUT_CLASSIFICATION	1.698054580252799E-6	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999094374747965	WITHOUT_CLASSIFICATION	9.056252520347743E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999969405989203	WITHOUT_CLASSIFICATION	3.0594010795851343E-6	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999912126893775	WITHOUT_CLASSIFICATION	8.787310622433273E-6	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999813449964323	WITHOUT_CLASSIFICATION	1.865500356762664E-5	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999583632453681	WITHOUT_CLASSIFICATION	4.163675463190824E-5	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999824021953517	WITHOUT_CLASSIFICATION	1.7597804648343318E-5	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999971936907349	WITHOUT_CLASSIFICATION	2.8063092650908373E-6	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999788163198806	WITHOUT_CLASSIFICATION	2.118368011946836E-5	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999809669265314	WITHOUT_CLASSIFICATION	1.9033073468591842E-5	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999966396777018	WITHOUT_CLASSIFICATION	3.3603222981301306E-6	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999939559311555	WITHOUT_CLASSIFICATION	6.044068844507302E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9998195496477701	WITHOUT_CLASSIFICATION	1.80450352229879E-4	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.999987435314306	WITHOUT_CLASSIFICATION	1.2564685694023297E-5	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999689688865537	WITHOUT_CLASSIFICATION	3.103111344627351E-5	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999955663552195	WITHOUT_CLASSIFICATION	4.4336447805800876E-6	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999925642233926	WITHOUT_CLASSIFICATION	7.43577660752878E-6	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999385184670974	WITHOUT_CLASSIFICATION	6.148153290265937E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999882790851318	WITHOUT_CLASSIFICATION	1.172091486829398E-5	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999780412969517	WITHOUT_CLASSIFICATION	2.1958703048236966E-5	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999996039788589	WITHOUT_CLASSIFICATION	3.960211410475713E-7	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999484363777146	WITHOUT_CLASSIFICATION	5.1563622285387296E-5	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999766568364583	WITHOUT_CLASSIFICATION	2.3343163541675594E-5	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999909787844109	WITHOUT_CLASSIFICATION	9.021215589132838E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.999977677555729	WITHOUT_CLASSIFICATION	2.2322444271026313E-5	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999809171510602	WITHOUT_CLASSIFICATION	1.9082848939793624E-5	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999858153429447	WITHOUT_CLASSIFICATION	1.4184657055166828E-5	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999952889932948	WITHOUT_CLASSIFICATION	4.711006705252213E-6	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999053118516915	WITHOUT_CLASSIFICATION	9.468814830841919E-5	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999492624320852	WITHOUT_CLASSIFICATION	5.073756791494083E-5	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999947888154375	WITHOUT_CLASSIFICATION	5.211184562530892E-6	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999974117865754	WITHOUT_CLASSIFICATION	2.5882134245567667E-6	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999953050571039	WITHOUT_CLASSIFICATION	4.694942896159772E-6	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999981196937396	WITHOUT_CLASSIFICATION	1.8803062604386566E-6	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999915619666456	WITHOUT_CLASSIFICATION	8.438033354346467E-6	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999872490935594	WITHOUT_CLASSIFICATION	1.2750906440664176E-5	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999974747338362	WITHOUT_CLASSIFICATION	2.5252661639063112E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999981710603788	WITHOUT_CLASSIFICATION	1.8289396212577344E-6	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.999954446867787	WITHOUT_CLASSIFICATION	4.5553132213001075E-5	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9992296376273053	WITHOUT_CLASSIFICATION	7.703623726947105E-4	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999944969438223	WITHOUT_CLASSIFICATION	5.503056177772987E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999778383348508	WITHOUT_CLASSIFICATION	2.2161665149196576E-5	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999921032212777	WITHOUT_CLASSIFICATION	7.896778722186076E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999978278322147	WITHOUT_CLASSIFICATION	2.1721677852963904E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999978278322147	WITHOUT_CLASSIFICATION	2.1721677852963904E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999998415936292	WITHOUT_CLASSIFICATION	1.5840637072629485E-7	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999995646015881	WITHOUT_CLASSIFICATION	4.3539841193356276E-7	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999712665615176	WITHOUT_CLASSIFICATION	2.8733438482319512E-5	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999983933286024	WITHOUT_CLASSIFICATION	1.6066713976414391E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.999996554527046	WITHOUT_CLASSIFICATION	3.4454729540215763E-6	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999981055900807	WITHOUT_CLASSIFICATION	1.8944099192616077E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.999993526401763	WITHOUT_CLASSIFICATION	6.4735982369759345E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999989789473749	WITHOUT_CLASSIFICATION	1.0210526251388847E-6	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999965997107545	WITHOUT_CLASSIFICATION	3.400289245449476E-6	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999957763093512	WITHOUT_CLASSIFICATION	4.223690648733076E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999965597967684	WITHOUT_CLASSIFICATION	3.440203231543045E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999965597967684	WITHOUT_CLASSIFICATION	3.440203231543045E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999957697305824	WITHOUT_CLASSIFICATION	4.23026941766314E-6	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999807604431422	WITHOUT_CLASSIFICATION	1.9239556857791446E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999999410860105	WITHOUT_CLASSIFICATION	5.891398958512912E-8	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999994049705979	WITHOUT_CLASSIFICATION	5.950294021555297E-7	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999997117797885	WITHOUT_CLASSIFICATION	2.8822021151194554E-7	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999531022127806	WITHOUT_CLASSIFICATION	4.689778721945178E-5	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999959830900065	WITHOUT_CLASSIFICATION	4.016909993503333E-6	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999526092469604	WITHOUT_CLASSIFICATION	4.7390753039730255E-5	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999934147124192	WITHOUT_CLASSIFICATION	6.58528758076508E-6	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999991888944897	WITHOUT_CLASSIFICATION	8.111055103042493E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999927687152586	WITHOUT_CLASSIFICATION	7.231284741509793E-6	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999956185229034	WITHOUT_CLASSIFICATION	4.381477096538727E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999977988371974	WITHOUT_CLASSIFICATION	2.201162802579219E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999977988371974	WITHOUT_CLASSIFICATION	2.201162802579219E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9997257396183475	WITHOUT_CLASSIFICATION	2.7426038165238495E-4	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.999913233220685	WITHOUT_CLASSIFICATION	8.676677931492232E-5	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999741850000737	WITHOUT_CLASSIFICATION	2.581499992630192E-5	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999999241533591	WITHOUT_CLASSIFICATION	7.584664083236033E-8	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999974261062158	WITHOUT_CLASSIFICATION	2.5738937842222364E-6	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999864813744065	WITHOUT_CLASSIFICATION	1.351862559362645E-5	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999758183395675	WITHOUT_CLASSIFICATION	2.4181660432552675E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999966733540371	WITHOUT_CLASSIFICATION	3.3266459628859864E-6	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9996091619399974	WITHOUT_CLASSIFICATION	3.908380600025859E-4	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999958184270071	WITHOUT_CLASSIFICATION	4.181572992896185E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999999410860105	WITHOUT_CLASSIFICATION	5.891398958512912E-8	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999931282775694	WITHOUT_CLASSIFICATION	6.871722430694288E-6	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999204674238368	WITHOUT_CLASSIFICATION	7.95325761632499E-5	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999888325428568	WITHOUT_CLASSIFICATION	1.1167457143240654E-5	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999998405001612	WITHOUT_CLASSIFICATION	1.5949983869566174E-7	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999949121840196	WITHOUT_CLASSIFICATION	5.087815980440884E-6	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999977746304727	WITHOUT_CLASSIFICATION	2.2253695274251542E-6	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999924554557665	WITHOUT_CLASSIFICATION	7.544544233445221E-6	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999992642161079	WITHOUT_CLASSIFICATION	7.357838922124044E-7	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999991405272793	WITHOUT_CLASSIFICATION	8.594727206592793E-7	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999980050118682	WITHOUT_CLASSIFICATION	1.9949881318466613E-6	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999966592989368	WITHOUT_CLASSIFICATION	3.34070106315836E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999981880061615	WITHOUT_CLASSIFICATION	1.8119938385284872E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999986768603342	WITHOUT_CLASSIFICATION	1.323139665793934E-6	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.99997023896569	WITHOUT_CLASSIFICATION	2.9761034309956638E-5	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999933656438025	WITHOUT_CLASSIFICATION	6.634356197629327E-6	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999990370325421	WITHOUT_CLASSIFICATION	9.629674578875263E-7	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999794500292224	WITHOUT_CLASSIFICATION	2.054997077758542E-5	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9998938108390573	WITHOUT_CLASSIFICATION	1.0618916094269036E-4	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999695413778499	WITHOUT_CLASSIFICATION	3.04586221501676E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.999993724175329	WITHOUT_CLASSIFICATION	6.275824670960534E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.999999237883527	WITHOUT_CLASSIFICATION	7.621164729363685E-7	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999973711814446	WITHOUT_CLASSIFICATION	2.6288185552637506E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999742682380931	WITHOUT_CLASSIFICATION	2.5731761906939982E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9999797095888671	WITHOUT_CLASSIFICATION	2.0290411132976412E-5	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999913081414332	WITHOUT_CLASSIFICATION	8.691858566810898E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999967723501301	WITHOUT_CLASSIFICATION	3.2276498698711566E-6	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999699778600076	WITHOUT_CLASSIFICATION	3.0022139992265293E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999956606429667	WITHOUT_CLASSIFICATION	4.339357033199196E-6	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999911958537362	WITHOUT_CLASSIFICATION	8.804146263831468E-6	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999998822865409	WITHOUT_CLASSIFICATION	1.1771345908049165E-7	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999870223310048	WITHOUT_CLASSIFICATION	1.2977668995331711E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999870223310048	WITHOUT_CLASSIFICATION	1.2977668995331711E-5	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999776561259106	WITHOUT_CLASSIFICATION	2.2343874089471935E-5	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999864359349094	WITHOUT_CLASSIFICATION	1.3564065090501588E-5	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999815861170733	WITHOUT_CLASSIFICATION	1.8413882926700852E-5	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999938304191338	WITHOUT_CLASSIFICATION	6.169580866267747E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999980616935085	WITHOUT_CLASSIFICATION	1.9383064915050143E-6	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999960449984675	WITHOUT_CLASSIFICATION	3.9550015324567145E-6	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999862597043603	WITHOUT_CLASSIFICATION	1.374029563975856E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999990723213547	WITHOUT_CLASSIFICATION	9.276786453169649E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999551888954004	WITHOUT_CLASSIFICATION	4.481110459971509E-5	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999990175409557	WITHOUT_CLASSIFICATION	9.824590443493988E-7	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.999999446061976	WITHOUT_CLASSIFICATION	5.539380239883003E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999886738451944	WITHOUT_CLASSIFICATION	1.1326154805490046E-5	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999997123209693	WITHOUT_CLASSIFICATION	2.876790307220674E-7	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998630846065484	WITHOUT_CLASSIFICATION	1.369153934516258E-4	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999999143517483	WITHOUT_CLASSIFICATION	8.564825177588779E-8	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999981885531072	WITHOUT_CLASSIFICATION	1.8114468928125782E-6	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.999999873701982	WITHOUT_CLASSIFICATION	1.2629801808379914E-7	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999713592770721	WITHOUT_CLASSIFICATION	2.86407229278311E-5	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999717016458667	WITHOUT_CLASSIFICATION	2.8298354133258866E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999858362613251	WITHOUT_CLASSIFICATION	1.4163738674859508E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999960259808582	WITHOUT_CLASSIFICATION	3.97401914181905E-6	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999960259808582	WITHOUT_CLASSIFICATION	3.97401914181905E-6	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999987319257578	WITHOUT_CLASSIFICATION	1.2680742420912637E-6	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999957803076348	WITHOUT_CLASSIFICATION	4.2196923651904864E-6	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999744477265703	WITHOUT_CLASSIFICATION	2.5552273429653406E-5	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999947962594755	WITHOUT_CLASSIFICATION	5.203740524383909E-6	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999971664192929	WITHOUT_CLASSIFICATION	2.833580707030495E-6	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999906598746368	WITHOUT_CLASSIFICATION	9.340125363263758E-6	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999990741093269	WITHOUT_CLASSIFICATION	9.258906731992398E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999994507279484	WITHOUT_CLASSIFICATION	5.492720516579914E-7	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999992144440576	WITHOUT_CLASSIFICATION	7.855559424858992E-7	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999998572154207	WITHOUT_CLASSIFICATION	1.4278457918724132E-7	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999975868399236	WITHOUT_CLASSIFICATION	2.413160076423939E-6	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999986013504271	WITHOUT_CLASSIFICATION	1.3986495729547174E-6	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999988227408831	WITHOUT_CLASSIFICATION	1.177259116872278E-6	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999995722814766	WITHOUT_CLASSIFICATION	4.277185233812716E-7	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.999978904126897	WITHOUT_CLASSIFICATION	2.1095873102935078E-5	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999453250725068	WITHOUT_CLASSIFICATION	5.4674927493156786E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.999995905855625	WITHOUT_CLASSIFICATION	4.094144375034714E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999993031882572	WITHOUT_CLASSIFICATION	6.968117427583902E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999995664388505	WITHOUT_CLASSIFICATION	4.3356114958163027E-7	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.999999094745385	WITHOUT_CLASSIFICATION	9.052546150970846E-7	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9999802731460856	WITHOUT_CLASSIFICATION	1.9726853914443435E-5	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.999983213171561	WITHOUT_CLASSIFICATION	1.678682843891743E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999903527594545	WITHOUT_CLASSIFICATION	9.647240545449281E-6	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9999826238223744	WITHOUT_CLASSIFICATION	1.7376177625716305E-5	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999641336150261	WITHOUT_CLASSIFICATION	3.586638497387612E-5	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9997406879645573	WITHOUT_CLASSIFICATION	2.59312035442752E-4	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999779512619653	WITHOUT_CLASSIFICATION	2.2048738034757802E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999931590496178	WITHOUT_CLASSIFICATION	6.840950382191211E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999821527061779	WITHOUT_CLASSIFICATION	1.7847293822050763E-5	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9997331584103151	WITHOUT_CLASSIFICATION	2.6684158968493736E-4	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999833543704187	WITHOUT_CLASSIFICATION	1.6645629581263202E-5	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999991564619581	WITHOUT_CLASSIFICATION	8.43538041911428E-7	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999710524684543	WITHOUT_CLASSIFICATION	2.894753154576073E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.999990430705862	WITHOUT_CLASSIFICATION	9.569294138034382E-6	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.999999565347256	WITHOUT_CLASSIFICATION	4.346527440566095E-7	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9999487302146169	WITHOUT_CLASSIFICATION	5.126978538302656E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.999894985811586	WITHOUT_CLASSIFICATION	1.0501418841390643E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999988573876066	WITHOUT_CLASSIFICATION	1.1426123933019143E-6	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999871448343146	WITHOUT_CLASSIFICATION	1.2855165685388169E-5	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999998338211599	WITHOUT_CLASSIFICATION	1.6617884006037322E-7	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999898784334467	WITHOUT_CLASSIFICATION	1.012156655330833E-5	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999653717935755	WITHOUT_CLASSIFICATION	3.4628206424651184E-5	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999859861984133	WITHOUT_CLASSIFICATION	1.4013801586700268E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9998901269656446	WITHOUT_CLASSIFICATION	1.0987303435538324E-4	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999515787945148	WITHOUT_CLASSIFICATION	4.84212054852825E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9998901269656446	WITHOUT_CLASSIFICATION	1.0987303435538324E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9997643233772122	WITHOUT_CLASSIFICATION	2.3567662278771266E-4	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9943701800050528	WITHOUT_CLASSIFICATION	0.005629819994947139	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.999998988444343	WITHOUT_CLASSIFICATION	1.011555657013049E-6	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.67044909899225	DEFECT	0.3295509010077501	WITHOUT_CLASSIFICATION
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999857598582417	WITHOUT_CLASSIFICATION	1.4240141758382188E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999928198134006	WITHOUT_CLASSIFICATION	7.180186599351874E-6	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999960650451813	WITHOUT_CLASSIFICATION	3.9349548185984345E-6	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9999858500894663	WITHOUT_CLASSIFICATION	1.414991053376336E-5	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999991109294523	WITHOUT_CLASSIFICATION	8.890705476891274E-7	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9940538357292912	WITHOUT_CLASSIFICATION	0.005946164270708818	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9999796640603832	WITHOUT_CLASSIFICATION	2.033593961678392E-5	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999913527315318	WITHOUT_CLASSIFICATION	8.647268468108667E-6	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999993090898947	WITHOUT_CLASSIFICATION	6.909101053325299E-7	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999981275460538	WITHOUT_CLASSIFICATION	1.872453946214255E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999904183762393	WITHOUT_CLASSIFICATION	9.581623760711058E-6	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.8040273498220526	WITHOUT_CLASSIFICATION	0.19597265017794738	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999997882203123	WITHOUT_CLASSIFICATION	2.117796876918969E-7	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9998053823206635	WITHOUT_CLASSIFICATION	1.9461767933653335E-4	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999904821801181	WITHOUT_CLASSIFICATION	9.517819881924458E-6	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999592800087119	WITHOUT_CLASSIFICATION	4.071999128816614E-5	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999404184992741	WITHOUT_CLASSIFICATION	5.958150072589437E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999964762568495	WITHOUT_CLASSIFICATION	3.523743150493152E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999652680218071	WITHOUT_CLASSIFICATION	3.473197819302096E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999906932219288	WITHOUT_CLASSIFICATION	9.306778071213721E-6	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999989472699828	WITHOUT_CLASSIFICATION	1.0527300170906806E-6	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.999993076193279	WITHOUT_CLASSIFICATION	6.923806720902632E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999775776736987	WITHOUT_CLASSIFICATION	2.2422326301428043E-5	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999943312807688	WITHOUT_CLASSIFICATION	5.668719231250959E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999934761958288	WITHOUT_CLASSIFICATION	6.523804171189289E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9993631895938964	WITHOUT_CLASSIFICATION	6.368104061035288E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998748824583651	WITHOUT_CLASSIFICATION	1.251175416348592E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999277686346874	WITHOUT_CLASSIFICATION	7.223136531260363E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999403752255522	WITHOUT_CLASSIFICATION	5.962477444767938E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.999993794906785	WITHOUT_CLASSIFICATION	6.205093215003957E-6	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999510396348074	WITHOUT_CLASSIFICATION	4.896036519265401E-5	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999959705851194	WITHOUT_CLASSIFICATION	4.029414880706231E-6	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999978987388854	WITHOUT_CLASSIFICATION	2.101261114545067E-6	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999983258991042	WITHOUT_CLASSIFICATION	1.6741008957527353E-6	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999980403541104	WITHOUT_CLASSIFICATION	1.959645889574071E-6	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9998432397388713	WITHOUT_CLASSIFICATION	1.567602611285561E-4	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.999998331733069	WITHOUT_CLASSIFICATION	1.6682669310347351E-6	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999967883854263	WITHOUT_CLASSIFICATION	3.2116145736793997E-6	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999992954512544	WITHOUT_CLASSIFICATION	7.045487455810305E-7	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999840463403358	WITHOUT_CLASSIFICATION	1.5953659664211488E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999840463403358	WITHOUT_CLASSIFICATION	1.5953659664211488E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999912630577675	WITHOUT_CLASSIFICATION	8.736942232538453E-6	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999915000762298	WITHOUT_CLASSIFICATION	8.499923770242308E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9999888097266039	WITHOUT_CLASSIFICATION	1.119027339616143E-5	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999964277820151	WITHOUT_CLASSIFICATION	3.5722179848280356E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999993072857544	WITHOUT_CLASSIFICATION	6.927142456757995E-7	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999992672522697	WITHOUT_CLASSIFICATION	7.327477302790422E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999006785078025	WITHOUT_CLASSIFICATION	9.932149219744497E-5	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999050637008932	WITHOUT_CLASSIFICATION	9.493629910676597E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.999999847729027	WITHOUT_CLASSIFICATION	1.5227097295018682E-7	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.999998706347489	WITHOUT_CLASSIFICATION	1.2936525109875137E-6	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999996310880965	WITHOUT_CLASSIFICATION	3.6891190346150114E-7	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999683524445414	WITHOUT_CLASSIFICATION	3.164755545868434E-5	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999809393541127	WITHOUT_CLASSIFICATION	1.9060645887259658E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999995674695314	WITHOUT_CLASSIFICATION	4.3253046848675757E-7	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999997450774241	WITHOUT_CLASSIFICATION	2.5492257592965416E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.999997525002636	WITHOUT_CLASSIFICATION	2.4749973640136552E-6	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999919086589297	WITHOUT_CLASSIFICATION	8.091341070241722E-6	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999993047904917	WITHOUT_CLASSIFICATION	6.952095083260667E-7	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999899478174908	WITHOUT_CLASSIFICATION	1.0052182509137296E-5	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999989113876427	WITHOUT_CLASSIFICATION	1.0886123572738748E-6	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9953282950556981	WITHOUT_CLASSIFICATION	0.004671704944301898	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.99632864559481	WITHOUT_CLASSIFICATION	0.0036713544051898087	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999934291726856	WITHOUT_CLASSIFICATION	6.570827314410658E-6	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999997606220321	WITHOUT_CLASSIFICATION	2.3937796788241156E-7	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9999992771250901	WITHOUT_CLASSIFICATION	7.228749098815237E-7	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999998951677901	WITHOUT_CLASSIFICATION	1.0483220987437231E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999922374536585	WITHOUT_CLASSIFICATION	7.762546341512363E-6	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9999162057736619	WITHOUT_CLASSIFICATION	8.37942263380346E-5	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.999998010467098	WITHOUT_CLASSIFICATION	1.9895329019861966E-6	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999845471221683	WITHOUT_CLASSIFICATION	1.5452877831652597E-5	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999984822318965	WITHOUT_CLASSIFICATION	1.517768103507933E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999548474698585	WITHOUT_CLASSIFICATION	4.515253014142968E-5	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999997819270129	WITHOUT_CLASSIFICATION	2.1807298708083736E-7	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999943724322978	WITHOUT_CLASSIFICATION	5.62756770209789E-6	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999994033772478	WITHOUT_CLASSIFICATION	5.966227522280063E-7	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999990783774838	WITHOUT_CLASSIFICATION	9.216225161192349E-7	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998859839565254	WITHOUT_CLASSIFICATION	1.140160434745908E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999308040736844	WITHOUT_CLASSIFICATION	6.919592631550288E-5	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9987777946931824	WITHOUT_CLASSIFICATION	0.0012222053068176176	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999213312783964	WITHOUT_CLASSIFICATION	7.866872160361971E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999963016888436	WITHOUT_CLASSIFICATION	3.6983111564165213E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9999992329813204	WITHOUT_CLASSIFICATION	7.670186795681809E-7	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999996699658383	WITHOUT_CLASSIFICATION	3.3003416159495383E-7	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999995033265195	WITHOUT_CLASSIFICATION	4.966734804750613E-7	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999739387232279	WITHOUT_CLASSIFICATION	2.6061276772003587E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999996979895596	WITHOUT_CLASSIFICATION	3.02010440366555E-7	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999997158497563	WITHOUT_CLASSIFICATION	2.8415024377121645E-7	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999802018785878	WITHOUT_CLASSIFICATION	1.9798121412161028E-5	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999419343020097	WITHOUT_CLASSIFICATION	5.8065697990417276E-5	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999953087274858	WITHOUT_CLASSIFICATION	4.691272514286326E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999980465555187	WITHOUT_CLASSIFICATION	1.953444481307827E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999993958802326	WITHOUT_CLASSIFICATION	6.041197674740401E-7	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999995709749921	WITHOUT_CLASSIFICATION	4.2902500775653326E-7	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999982668125559	WITHOUT_CLASSIFICATION	1.7331874440919865E-6	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999738857556999	WITHOUT_CLASSIFICATION	2.611424430015316E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9998928227333334	WITHOUT_CLASSIFICATION	1.0717726666656828E-4	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999991299011748	WITHOUT_CLASSIFICATION	8.70098825147414E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9997954279746798	WITHOUT_CLASSIFICATION	2.0457202532018294E-4	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999998209609791	WITHOUT_CLASSIFICATION	1.7903902098663365E-7	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999578066347963	WITHOUT_CLASSIFICATION	4.2193365203730275E-5	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999992120535843	WITHOUT_CLASSIFICATION	7.879464156058597E-7	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999936048373694	WITHOUT_CLASSIFICATION	6.395162630585509E-6	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999989619304729	WITHOUT_CLASSIFICATION	1.038069527208706E-6	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999976669931252	WITHOUT_CLASSIFICATION	2.3330068748540054E-6	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9998435735492706	WITHOUT_CLASSIFICATION	1.5642645072932207E-4	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999371190135199	WITHOUT_CLASSIFICATION	6.288098648014591E-5	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999604928147396	WITHOUT_CLASSIFICATION	3.950718526023678E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999931349035613	WITHOUT_CLASSIFICATION	6.8650964387010796E-6	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999933254555678	WITHOUT_CLASSIFICATION	6.674544432126595E-6	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999909522352679	WITHOUT_CLASSIFICATION	9.047764732101166E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999894183650129	WITHOUT_CLASSIFICATION	1.0581634987170474E-5	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999949645163344	WITHOUT_CLASSIFICATION	5.035483665664201E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999998385978904	WITHOUT_CLASSIFICATION	1.6140210949123552E-7	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9998038670092971	WITHOUT_CLASSIFICATION	1.9613299070290338E-4	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9999534021449089	WITHOUT_CLASSIFICATION	4.659785509113786E-5	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9999418068977802	WITHOUT_CLASSIFICATION	5.819310221977459E-5	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9999574785978482	WITHOUT_CLASSIFICATION	4.252140215168703E-5	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9999502672505756	WITHOUT_CLASSIFICATION	4.973274942439796E-5	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9999452442436078	WITHOUT_CLASSIFICATION	5.475575639230428E-5	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9999453188184895	WITHOUT_CLASSIFICATION	5.468118151059823E-5	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9999411322301848	WITHOUT_CLASSIFICATION	5.8867769815253566E-5	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9999454735166194	WITHOUT_CLASSIFICATION	5.452648338048891E-5	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9999540365470022	WITHOUT_CLASSIFICATION	4.596345299790157E-5	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9999445576858716	WITHOUT_CLASSIFICATION	5.5442314128311E-5	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9999477601872695	WITHOUT_CLASSIFICATION	5.223981273056527E-5	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9999443964973218	WITHOUT_CLASSIFICATION	5.5603502678187937E-5	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9999455468559685	WITHOUT_CLASSIFICATION	5.445314403148764E-5	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9999420526658729	WITHOUT_CLASSIFICATION	5.794733412714255E-5	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9999375743861519	WITHOUT_CLASSIFICATION	6.242561384801238E-5	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9999417807691209	WITHOUT_CLASSIFICATION	5.821923087920603E-5	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9999405064086341	WITHOUT_CLASSIFICATION	5.949359136597187E-5	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9999646257914578	WITHOUT_CLASSIFICATION	3.537420854214933E-5	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9999632688446813	WITHOUT_CLASSIFICATION	3.6731155318574054E-5	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999967317517072	WITHOUT_CLASSIFICATION	3.26824829288385E-6	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999995299705615	WITHOUT_CLASSIFICATION	4.700294384896578E-7	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999978826337365	WITHOUT_CLASSIFICATION	2.117366263527645E-6	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999975074216235	WITHOUT_CLASSIFICATION	2.492578376546984E-6	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.999985506840158	WITHOUT_CLASSIFICATION	1.4493159842017486E-5	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999987879423561	WITHOUT_CLASSIFICATION	1.2120576439096532E-6	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.999999158077891	WITHOUT_CLASSIFICATION	8.419221090225372E-7	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9999955266933762	WITHOUT_CLASSIFICATION	4.47330662384159E-6	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999988928204279	WITHOUT_CLASSIFICATION	1.1071795721313144E-6	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999983518632565	WITHOUT_CLASSIFICATION	1.648136743563676E-6	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.576373924969495	DEFECT	0.4236260750305051	WITHOUT_CLASSIFICATION
// integer division	WITHOUT_CLASSIFICATION	0.9999975605252301	WITHOUT_CLASSIFICATION	2.4394747698401897E-6	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.999996209305201	WITHOUT_CLASSIFICATION	3.7906947989364656E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999950733798338	WITHOUT_CLASSIFICATION	4.926620166196535E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999950733798338	WITHOUT_CLASSIFICATION	4.926620166196535E-6	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999987414179695	WITHOUT_CLASSIFICATION	1.258582030482762E-6	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999855726600112	WITHOUT_CLASSIFICATION	1.4427339988867139E-5	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999999785125994	WITHOUT_CLASSIFICATION	2.148740068229203E-8	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999948101861524	WITHOUT_CLASSIFICATION	5.189813847468874E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.999999584298226	WITHOUT_CLASSIFICATION	4.157017739683766E-7	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999954311319418	WITHOUT_CLASSIFICATION	4.568868058238132E-6	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999969064307501	WITHOUT_CLASSIFICATION	3.0935692498235236E-6	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999984333553362	WITHOUT_CLASSIFICATION	1.566644663816662E-6	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999356451820552	WITHOUT_CLASSIFICATION	6.435481794476337E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999944919037757	WITHOUT_CLASSIFICATION	5.5080962244088955E-6	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999675824907296	WITHOUT_CLASSIFICATION	3.241750927032651E-5	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999919830600343	WITHOUT_CLASSIFICATION	8.016939965627424E-6	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999833320611335	WITHOUT_CLASSIFICATION	1.666793886644814E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9999684761898897	WITHOUT_CLASSIFICATION	3.152381011035089E-5	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999950611219454	WITHOUT_CLASSIFICATION	4.938878054599263E-6	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999941512114532	WITHOUT_CLASSIFICATION	5.848788546710104E-6	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999972535732158	WITHOUT_CLASSIFICATION	2.7464267842127775E-6	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999987009645529	WITHOUT_CLASSIFICATION	1.2990354470482007E-6	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9999977711901851	WITHOUT_CLASSIFICATION	2.2288098149672028E-6	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999997499952986	WITHOUT_CLASSIFICATION	2.500047013184715E-7	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.999997975925842	WITHOUT_CLASSIFICATION	2.0240741578782177E-6	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999997716342605	WITHOUT_CLASSIFICATION	2.283657395719565E-7	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999856379018309	WITHOUT_CLASSIFICATION	1.4362098169028659E-5	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999663206068446	WITHOUT_CLASSIFICATION	3.3679393155317886E-5	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999995424917298	WITHOUT_CLASSIFICATION	4.575082701065056E-7	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999966195158669	WITHOUT_CLASSIFICATION	3.380484133154138E-6	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999862072654473	WITHOUT_CLASSIFICATION	1.3792734552654562E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999982695997863	WITHOUT_CLASSIFICATION	1.730400213625965E-6	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999997581192641	WITHOUT_CLASSIFICATION	2.4188073583516947E-7	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999873377872117	WITHOUT_CLASSIFICATION	1.2662212788228225E-5	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.999982820954408	WITHOUT_CLASSIFICATION	1.717904559193988E-5	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999555730885393	WITHOUT_CLASSIFICATION	4.442691146073665E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999958168353444	WITHOUT_CLASSIFICATION	4.183164655596025E-6	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999926674463939	WITHOUT_CLASSIFICATION	7.332553606057109E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999956992262555	WITHOUT_CLASSIFICATION	4.300773744411237E-6	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999870668885815	WITHOUT_CLASSIFICATION	1.2933111418471085E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999691454572621	WITHOUT_CLASSIFICATION	3.085454273787155E-5	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999960244398958	WITHOUT_CLASSIFICATION	3.975560104312336E-6	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999989000866908	WITHOUT_CLASSIFICATION	1.099913309257183E-6	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999998607665931	WITHOUT_CLASSIFICATION	1.392334070094427E-7	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999989806885051	WITHOUT_CLASSIFICATION	1.0193114948797391E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999996063707498	WITHOUT_CLASSIFICATION	3.936292502160451E-7	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999764956069588	WITHOUT_CLASSIFICATION	2.3504393041221467E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.999975488475328	WITHOUT_CLASSIFICATION	2.4511524671938548E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.999975488475328	WITHOUT_CLASSIFICATION	2.4511524671938548E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999992878915797	WITHOUT_CLASSIFICATION	7.121084203440289E-7	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999976767669703	WITHOUT_CLASSIFICATION	2.323233029769594E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999989054988453	WITHOUT_CLASSIFICATION	1.0945011547119028E-6	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.999771830897261	WITHOUT_CLASSIFICATION	2.2816910273894023E-4	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999792555011505	WITHOUT_CLASSIFICATION	2.0744498849454935E-5	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999770608015192	WITHOUT_CLASSIFICATION	2.2939198480860028E-5	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999979224107833	WITHOUT_CLASSIFICATION	2.0775892167234768E-6	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9991003918892978	WITHOUT_CLASSIFICATION	8.996081107021745E-4	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999937727922898	WITHOUT_CLASSIFICATION	6.2272077101716755E-6	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999932196880051	WITHOUT_CLASSIFICATION	6.78031199485029E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999945180425491	WITHOUT_CLASSIFICATION	5.481957450816191E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999982353020365	WITHOUT_CLASSIFICATION	1.7646979635864072E-6	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9999903853274903	WITHOUT_CLASSIFICATION	9.614672509833696E-6	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999951345917366	WITHOUT_CLASSIFICATION	4.865408263452772E-6	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.6601780780837974	WITHOUT_CLASSIFICATION	0.3398219219162026	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999694727217606	WITHOUT_CLASSIFICATION	3.052727823933293E-5	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999987866783866	WITHOUT_CLASSIFICATION	1.213321613473838E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.999991810811054	WITHOUT_CLASSIFICATION	8.18918894592569E-6	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999997098213524	WITHOUT_CLASSIFICATION	2.9017864753359945E-7	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999884313270669	WITHOUT_CLASSIFICATION	1.1568672933131691E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999967301891783	WITHOUT_CLASSIFICATION	3.269810821753983E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999967301891783	WITHOUT_CLASSIFICATION	3.269810821753983E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999998499829374	WITHOUT_CLASSIFICATION	1.5001706258983607E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999998499829374	WITHOUT_CLASSIFICATION	1.5001706258983607E-6	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999945785156317	WITHOUT_CLASSIFICATION	5.421484368341907E-6	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999714774737034	WITHOUT_CLASSIFICATION	2.852252629661799E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999991724816171	WITHOUT_CLASSIFICATION	8.275183829183458E-7	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999986580076302	WITHOUT_CLASSIFICATION	1.3419923697470032E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999875811421164	WITHOUT_CLASSIFICATION	1.2418857883549506E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999995507630843	WITHOUT_CLASSIFICATION	4.4923691567289573E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9999253571766243	WITHOUT_CLASSIFICATION	7.464282337562713E-5	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999907515970856	WITHOUT_CLASSIFICATION	9.248402914328319E-6	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999961405617257	WITHOUT_CLASSIFICATION	3.859438274266288E-6	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999989813986493	WITHOUT_CLASSIFICATION	1.018601350748184E-6	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999482822275426	WITHOUT_CLASSIFICATION	5.1717772457450224E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999952548072658	WITHOUT_CLASSIFICATION	4.745192734187557E-6	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999998804407406	WITHOUT_CLASSIFICATION	1.1955925943291124E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9999807275938596	WITHOUT_CLASSIFICATION	1.9272406140409587E-5	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999622916212627	WITHOUT_CLASSIFICATION	3.770837873723291E-5	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999974019862147	WITHOUT_CLASSIFICATION	2.5980137852262187E-6	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999966649202905	WITHOUT_CLASSIFICATION	3.3350797096217663E-6	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999948159482591	WITHOUT_CLASSIFICATION	5.1840517407848555E-6	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.999905076444271	WITHOUT_CLASSIFICATION	9.492355572909584E-5	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999983604605166	WITHOUT_CLASSIFICATION	1.639539483396651E-6	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.999991326909261	WITHOUT_CLASSIFICATION	8.673090739055848E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999927781746313	WITHOUT_CLASSIFICATION	7.22182536872465E-6	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999488829834454	WITHOUT_CLASSIFICATION	5.111701655455729E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999775776736987	WITHOUT_CLASSIFICATION	2.2422326301428043E-5	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999992672522697	WITHOUT_CLASSIFICATION	7.327477302790422E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999930104468885	WITHOUT_CLASSIFICATION	6.989553111495285E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999796935952233	WITHOUT_CLASSIFICATION	2.030640477664926E-5	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999974919797553	WITHOUT_CLASSIFICATION	2.5080202448383235E-6	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999728974786988	WITHOUT_CLASSIFICATION	2.7102521301165482E-5	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999981245572577	WITHOUT_CLASSIFICATION	1.875442742392979E-6	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999981245572577	WITHOUT_CLASSIFICATION	1.875442742392979E-6	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999980234117741	WITHOUT_CLASSIFICATION	1.9765882259105602E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999998369114156	WITHOUT_CLASSIFICATION	1.6308858442926882E-7	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.999999751442429	WITHOUT_CLASSIFICATION	2.4855757094462954E-7	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999996438350918	WITHOUT_CLASSIFICATION	3.561649082629801E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999979174804277	WITHOUT_CLASSIFICATION	2.0825195722506403E-6	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999952380596925	WITHOUT_CLASSIFICATION	4.7619403075357245E-6	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999994023837881	WITHOUT_CLASSIFICATION	5.976162117680975E-7	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999999466248924	WITHOUT_CLASSIFICATION	5.337510762374662E-8	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999951617381715	WITHOUT_CLASSIFICATION	4.83826182851627E-6	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999990395658825	WITHOUT_CLASSIFICATION	9.604341175630335E-7	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999888200368052	WITHOUT_CLASSIFICATION	1.1179963194817593E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999965808923035	WITHOUT_CLASSIFICATION	3.4191076964600083E-6	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.999916864227384	WITHOUT_CLASSIFICATION	8.31357726160697E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999900095219351	WITHOUT_CLASSIFICATION	9.990478064973899E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999965772062009	WITHOUT_CLASSIFICATION	3.4227937989297307E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999749422036806	WITHOUT_CLASSIFICATION	2.5057796319547016E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999174495837	WITHOUT_CLASSIFICATION	8.255041626150036E-8	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999994802770312	WITHOUT_CLASSIFICATION	5.197229688368442E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999961361701651	WITHOUT_CLASSIFICATION	3.863829834920359E-6	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9997004836016898	WITHOUT_CLASSIFICATION	2.995163983101788E-4	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999995429930771	WITHOUT_CLASSIFICATION	4.570069228252835E-7	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999988550460167	WITHOUT_CLASSIFICATION	1.1449539833106604E-6	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999678996171518	WITHOUT_CLASSIFICATION	3.210038284809018E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999968148261764	WITHOUT_CLASSIFICATION	3.185173823648108E-6	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999911282958418	WITHOUT_CLASSIFICATION	8.871704158246105E-6	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999979766247731	WITHOUT_CLASSIFICATION	2.023375226849438E-6	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999873537603948	WITHOUT_CLASSIFICATION	1.2646239605302625E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9999861738673028	WITHOUT_CLASSIFICATION	1.382613269715949E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999967211546255	WITHOUT_CLASSIFICATION	3.2788453745325177E-6	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999412733040848	WITHOUT_CLASSIFICATION	5.872669591520866E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999977540304186	WITHOUT_CLASSIFICATION	2.245969581429201E-6	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999813521912823	WITHOUT_CLASSIFICATION	1.8647808717789875E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999923823798389	WITHOUT_CLASSIFICATION	7.617620161070232E-6	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999658506812996	WITHOUT_CLASSIFICATION	3.414931870044084E-5	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999970819275789	WITHOUT_CLASSIFICATION	2.9180724212309735E-6	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999980813938487	WITHOUT_CLASSIFICATION	1.9186061513437972E-6	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999932353726224	WITHOUT_CLASSIFICATION	6.76462737757589E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9987673521200506	WITHOUT_CLASSIFICATION	0.0012326478799493505	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999997381741228	WITHOUT_CLASSIFICATION	2.6182587719590335E-7	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999974587559447	WITHOUT_CLASSIFICATION	2.5412440553334508E-6	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999988190709931	WITHOUT_CLASSIFICATION	1.1809290068811298E-6	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999761226906	WITHOUT_CLASSIFICATION	2.3877309369100346E-8	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999898074147862	WITHOUT_CLASSIFICATION	1.0192585213894246E-5	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999935162895519	WITHOUT_CLASSIFICATION	6.483710448088139E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9999482459802572	WITHOUT_CLASSIFICATION	5.1754019742806036E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999998471838815	WITHOUT_CLASSIFICATION	1.5281611852679757E-7	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999939479260743	WITHOUT_CLASSIFICATION	6.052073925722343E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999992460633861	WITHOUT_CLASSIFICATION	7.539366139881347E-7	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999994368733377	WITHOUT_CLASSIFICATION	5.631266622793124E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999927944521455	WITHOUT_CLASSIFICATION	7.205547854453744E-6	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999692763881955	WITHOUT_CLASSIFICATION	3.072361180436789E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998580908627396	WITHOUT_CLASSIFICATION	1.419091372604841E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999294087705042	WITHOUT_CLASSIFICATION	7.059122949580818E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999385693489793	WITHOUT_CLASSIFICATION	6.143065102075635E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999238734010986	WITHOUT_CLASSIFICATION	7.61265989013837E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999748851815006	WITHOUT_CLASSIFICATION	2.5114818499403024E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.999962429366938	WITHOUT_CLASSIFICATION	3.75706330619606E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999916850838324	WITHOUT_CLASSIFICATION	8.314916167638882E-6	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999920459670265	WITHOUT_CLASSIFICATION	7.954032973469377E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999959316224936	WITHOUT_CLASSIFICATION	4.068377506463635E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999226843688166	WITHOUT_CLASSIFICATION	7.731563118338121E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999692763881955	WITHOUT_CLASSIFICATION	3.072361180436789E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999294087705042	WITHOUT_CLASSIFICATION	7.059122949580818E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998580908627396	WITHOUT_CLASSIFICATION	1.419091372604841E-4	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9999580689512256	WITHOUT_CLASSIFICATION	4.193104877433589E-5	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999608631408679	WITHOUT_CLASSIFICATION	3.9136859132187924E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999869392158929	WITHOUT_CLASSIFICATION	1.3060784107160762E-5	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999907951767161	WITHOUT_CLASSIFICATION	9.204823283936313E-6	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999975457641461	WITHOUT_CLASSIFICATION	2.4542358539306483E-6	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999954999653908	WITHOUT_CLASSIFICATION	4.500034609102557E-6	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999961269516007	WITHOUT_CLASSIFICATION	3.8730483993386395E-6	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999974283763615	WITHOUT_CLASSIFICATION	2.5716236385313366E-6	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.999945158402875	WITHOUT_CLASSIFICATION	5.484159712492725E-5	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999837225249012	WITHOUT_CLASSIFICATION	1.627747509878411E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999869893025183	WITHOUT_CLASSIFICATION	1.3010697481774957E-5	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9999915926341131	WITHOUT_CLASSIFICATION	8.407365886901605E-6	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999960838857757	WITHOUT_CLASSIFICATION	3.916114224340513E-6	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999953627279127	WITHOUT_CLASSIFICATION	4.6372720873084535E-6	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999573593856174	WITHOUT_CLASSIFICATION	4.264061438270179E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999865291183248	WITHOUT_CLASSIFICATION	1.3470881675133106E-5	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999884998514482	WITHOUT_CLASSIFICATION	1.150014855172728E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999965153355653	WITHOUT_CLASSIFICATION	3.4846644345545247E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999965153355653	WITHOUT_CLASSIFICATION	3.4846644345545247E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999976375410677	WITHOUT_CLASSIFICATION	2.362458932255886E-6	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999976782548595	WITHOUT_CLASSIFICATION	2.3217451404983137E-6	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999982922370192	WITHOUT_CLASSIFICATION	1.7077629809184985E-6	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.999820082128914	WITHOUT_CLASSIFICATION	1.7991787108591583E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999973112878112	WITHOUT_CLASSIFICATION	2.688712188655043E-6	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999995263806505	WITHOUT_CLASSIFICATION	4.736193495390252E-7	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999990676539183	WITHOUT_CLASSIFICATION	9.323460816903667E-7	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999919982601286	WITHOUT_CLASSIFICATION	8.001739871331624E-6	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999949315505293	WITHOUT_CLASSIFICATION	5.068449470606456E-6	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999992078519566	WITHOUT_CLASSIFICATION	7.921480433106647E-7	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999996291960078	WITHOUT_CLASSIFICATION	3.708039922341434E-7	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999828204591668	WITHOUT_CLASSIFICATION	1.7179540833322946E-5	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999985123414059	WITHOUT_CLASSIFICATION	1.4876585940507168E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999976901636369	WITHOUT_CLASSIFICATION	2.3098363631877086E-6	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999997064250299	WITHOUT_CLASSIFICATION	2.9357497011363095E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999964299135955	WITHOUT_CLASSIFICATION	3.5700864045289824E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999904513359759	WITHOUT_CLASSIFICATION	9.548664024150251E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999989425759843	WITHOUT_CLASSIFICATION	1.0574240157402706E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999989425759843	WITHOUT_CLASSIFICATION	1.0574240157402706E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999955218272252	WITHOUT_CLASSIFICATION	4.478172774854659E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999942805164097	WITHOUT_CLASSIFICATION	5.7194835903108755E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999963874770837	WITHOUT_CLASSIFICATION	3.6125229163007105E-6	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999785114868902	WITHOUT_CLASSIFICATION	2.1488513109774855E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999954200242669	WITHOUT_CLASSIFICATION	4.5799757331019744E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999989425759843	WITHOUT_CLASSIFICATION	1.0574240157402706E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999989425759843	WITHOUT_CLASSIFICATION	1.0574240157402706E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995323161835	WITHOUT_CLASSIFICATION	4.6768381641506556E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995323161835	WITHOUT_CLASSIFICATION	4.6768381641506556E-7	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999970077471693	WITHOUT_CLASSIFICATION	2.992252830799578E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999788873024532	WITHOUT_CLASSIFICATION	2.1112697546721946E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999992606117607	WITHOUT_CLASSIFICATION	7.393882391623311E-7	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9999995182941788	WITHOUT_CLASSIFICATION	4.817058212042892E-7	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.999993857222606	WITHOUT_CLASSIFICATION	6.1427773939834505E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.999993857222606	WITHOUT_CLASSIFICATION	6.1427773939834505E-6	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.999998095000257	WITHOUT_CLASSIFICATION	1.904999742861076E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999954458910292	WITHOUT_CLASSIFICATION	4.5541089707815415E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997196041338	WITHOUT_CLASSIFICATION	2.8039586617405784E-7	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999944789547018	WITHOUT_CLASSIFICATION	5.52104529823344E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999999514387949	WITHOUT_CLASSIFICATION	4.856120510175253E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999675512584257	WITHOUT_CLASSIFICATION	3.244874157426934E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999813081759057	WITHOUT_CLASSIFICATION	1.86918240943791E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999795482500945	WITHOUT_CLASSIFICATION	2.0451749905492637E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.999998899950862	WITHOUT_CLASSIFICATION	1.1000491379422118E-6	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999998508185951	WITHOUT_CLASSIFICATION	1.4918140492814906E-7	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999980625430607	WITHOUT_CLASSIFICATION	1.9374569392759157E-6	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999986224787194	WITHOUT_CLASSIFICATION	1.37752128063306E-6	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999984523380704	WITHOUT_CLASSIFICATION	1.5476619296693276E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999920720900003	WITHOUT_CLASSIFICATION	7.927909999752277E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999964299135955	WITHOUT_CLASSIFICATION	3.5700864045289824E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999989425759843	WITHOUT_CLASSIFICATION	1.0574240157402706E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995323161835	WITHOUT_CLASSIFICATION	4.6768381641506556E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999675512584257	WITHOUT_CLASSIFICATION	3.244874157426934E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999823061527999	WITHOUT_CLASSIFICATION	1.7693847200100087E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999823061527999	WITHOUT_CLASSIFICATION	1.7693847200100087E-5	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999936604491116	WITHOUT_CLASSIFICATION	6.339550888371767E-6	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999500176482	WITHOUT_CLASSIFICATION	4.998235187572185E-8	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.999999160336639	WITHOUT_CLASSIFICATION	8.396633610554277E-7	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999997290471284	WITHOUT_CLASSIFICATION	2.709528715767707E-7	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999993020184167	WITHOUT_CLASSIFICATION	6.9798158325109E-7	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999999783155578	WITHOUT_CLASSIFICATION	2.1684442219834434E-8	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9998926394774167	WITHOUT_CLASSIFICATION	1.0736052258340995E-4	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9997031570689269	WITHOUT_CLASSIFICATION	2.9684293107319783E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999875394826	WITHOUT_CLASSIFICATION	1.246051735432338E-8	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999976465392392	WITHOUT_CLASSIFICATION	2.353460760779871E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999940561270411	WITHOUT_CLASSIFICATION	5.943872958911802E-6	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999998252433772	WITHOUT_CLASSIFICATION	1.7475662283299466E-7	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999962282902817	WITHOUT_CLASSIFICATION	3.771709718357249E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999904513359759	WITHOUT_CLASSIFICATION	9.548664024150251E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999995323161835	WITHOUT_CLASSIFICATION	4.6768381641506556E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999954458910292	WITHOUT_CLASSIFICATION	4.5541089707815415E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997196041338	WITHOUT_CLASSIFICATION	2.8039586617405784E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997196041338	WITHOUT_CLASSIFICATION	2.8039586617405784E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999999514387949	WITHOUT_CLASSIFICATION	4.856120510175253E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999675512584257	WITHOUT_CLASSIFICATION	3.244874157426934E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999675512584257	WITHOUT_CLASSIFICATION	3.244874157426934E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999823061527999	WITHOUT_CLASSIFICATION	1.7693847200100087E-5	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999935640250984	WITHOUT_CLASSIFICATION	6.4359749015598085E-6	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9998731072636411	WITHOUT_CLASSIFICATION	1.2689273635881605E-4	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999879942038814	WITHOUT_CLASSIFICATION	1.200579611866098E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999983849904313	WITHOUT_CLASSIFICATION	1.615009568659568E-6	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999972783322952	WITHOUT_CLASSIFICATION	2.7216677048320357E-6	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9998677621831871	WITHOUT_CLASSIFICATION	1.322378168128876E-4	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999959814385453	WITHOUT_CLASSIFICATION	4.018561454742508E-6	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999926155153285	WITHOUT_CLASSIFICATION	7.384484671541643E-6	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999762172528329	WITHOUT_CLASSIFICATION	2.3782747167096026E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999954458910292	WITHOUT_CLASSIFICATION	4.5541089707815415E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997196041338	WITHOUT_CLASSIFICATION	2.8039586617405784E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997196041338	WITHOUT_CLASSIFICATION	2.8039586617405784E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999999514387949	WITHOUT_CLASSIFICATION	4.856120510175253E-7	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9997031570689269	WITHOUT_CLASSIFICATION	2.9684293107319783E-4	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999976465392392	WITHOUT_CLASSIFICATION	2.353460760779871E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.999992155595891	WITHOUT_CLASSIFICATION	7.844404109034123E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999986438394652	WITHOUT_CLASSIFICATION	1.356160534698239E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999735472905824	WITHOUT_CLASSIFICATION	2.6452709417620487E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999735472905824	WITHOUT_CLASSIFICATION	2.6452709417620487E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999942925281222	WITHOUT_CLASSIFICATION	5.707471877775099E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999901333642002	WITHOUT_CLASSIFICATION	9.86663579980252E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999996979441281	WITHOUT_CLASSIFICATION	3.0205587183742833E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999869400259933	WITHOUT_CLASSIFICATION	1.305997400674205E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999934506375229	WITHOUT_CLASSIFICATION	6.549362477019652E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999934506375229	WITHOUT_CLASSIFICATION	6.549362477019652E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999983751760014	WITHOUT_CLASSIFICATION	1.6248239986618954E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999983751760014	WITHOUT_CLASSIFICATION	1.6248239986618954E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.999990529197699	WITHOUT_CLASSIFICATION	9.470802300915329E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.999990529197699	WITHOUT_CLASSIFICATION	9.470802300915329E-6	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999860920598642	WITHOUT_CLASSIFICATION	1.3907940135819587E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999819861994587	WITHOUT_CLASSIFICATION	1.801380054130363E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9998954516379471	WITHOUT_CLASSIFICATION	1.0454836205284879E-4	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999985408865387	WITHOUT_CLASSIFICATION	1.4591134612792184E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.999990317066995	WITHOUT_CLASSIFICATION	9.682933004907113E-6	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999964831410771	WITHOUT_CLASSIFICATION	3.5168589228562605E-6	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999964358476251	WITHOUT_CLASSIFICATION	3.564152374898315E-6	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.99997949058279	WITHOUT_CLASSIFICATION	2.0509417209921304E-5	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999969603847374	WITHOUT_CLASSIFICATION	3.0396152625141843E-6	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.999998807769234	WITHOUT_CLASSIFICATION	1.1922307659805983E-6	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999993578550598	WITHOUT_CLASSIFICATION	6.421449401934477E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999942938325586	WITHOUT_CLASSIFICATION	5.706167441456415E-6	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999996518508972	WITHOUT_CLASSIFICATION	3.481491027068419E-7	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999860573280326	WITHOUT_CLASSIFICATION	1.3942671967519468E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999860573280326	WITHOUT_CLASSIFICATION	1.3942671967519468E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999998265655364	WITHOUT_CLASSIFICATION	1.734344634416901E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999995507630843	WITHOUT_CLASSIFICATION	4.4923691567289573E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9999889582411376	WITHOUT_CLASSIFICATION	1.1041758862285251E-5	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999970327549953	WITHOUT_CLASSIFICATION	2.9672450046961217E-6	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999983713935757	WITHOUT_CLASSIFICATION	1.6286064243147208E-6	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999980224369764	WITHOUT_CLASSIFICATION	1.9775630235444573E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.999999252251127	WITHOUT_CLASSIFICATION	7.477488731021775E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999969697603522	WITHOUT_CLASSIFICATION	3.03023964770175E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999949326138189	WITHOUT_CLASSIFICATION	5.067386181157616E-6	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.999990857565058	WITHOUT_CLASSIFICATION	9.142434942039314E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999678791471094	WITHOUT_CLASSIFICATION	3.2120852890666076E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.999850636971732	WITHOUT_CLASSIFICATION	1.4936302826786191E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.999984725296037	WITHOUT_CLASSIFICATION	1.527470396304922E-5	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999507407563833	WITHOUT_CLASSIFICATION	4.9259243616641404E-5	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999986996617742	WITHOUT_CLASSIFICATION	1.3003382257480198E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999940995570239	WITHOUT_CLASSIFICATION	5.900442976015258E-6	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999625174377187	WITHOUT_CLASSIFICATION	3.748256228135145E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999938507005173	WITHOUT_CLASSIFICATION	6.149299482688378E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999848815994699	WITHOUT_CLASSIFICATION	1.5118400530129303E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999848815994699	WITHOUT_CLASSIFICATION	1.5118400530129303E-5	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999997767614932	WITHOUT_CLASSIFICATION	2.232385068577822E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999450515340487	WITHOUT_CLASSIFICATION	5.49484659513102E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.999861856246101	WITHOUT_CLASSIFICATION	1.3814375389902255E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.999861856246101	WITHOUT_CLASSIFICATION	1.3814375389902255E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999991345142981	WITHOUT_CLASSIFICATION	8.654857019079428E-7	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999828193049792	WITHOUT_CLASSIFICATION	1.7180695020779984E-5	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999506491639244	WITHOUT_CLASSIFICATION	4.9350836075557155E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999693993081612	WITHOUT_CLASSIFICATION	3.0600691838705294E-5	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999754975896697	WITHOUT_CLASSIFICATION	2.450241033019834E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999785236520703	WITHOUT_CLASSIFICATION	2.1476347929684377E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999785236520703	WITHOUT_CLASSIFICATION	2.1476347929684377E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999977430056738	WITHOUT_CLASSIFICATION	2.2569943262160642E-6	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999773198861595	WITHOUT_CLASSIFICATION	2.268011384054885E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999985491010485	WITHOUT_CLASSIFICATION	1.4508989516489933E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999606353042182	WITHOUT_CLASSIFICATION	3.936469578175317E-5	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999450515340487	WITHOUT_CLASSIFICATION	5.49484659513102E-5	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999753835312123	WITHOUT_CLASSIFICATION	2.461646878766509E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999677497513317	WITHOUT_CLASSIFICATION	3.225024866823902E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999677497513317	WITHOUT_CLASSIFICATION	3.225024866823902E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999905353066846	WITHOUT_CLASSIFICATION	9.46469331532324E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999998752917101	WITHOUT_CLASSIFICATION	1.2470828988119193E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999998752917101	WITHOUT_CLASSIFICATION	1.2470828988119193E-7	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999516540854645	WITHOUT_CLASSIFICATION	4.834591453542173E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999516540854645	WITHOUT_CLASSIFICATION	4.834591453542173E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999516540854645	WITHOUT_CLASSIFICATION	4.834591453542173E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999998752917101	WITHOUT_CLASSIFICATION	1.2470828988119193E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999998752917101	WITHOUT_CLASSIFICATION	1.2470828988119193E-7	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999905353066846	WITHOUT_CLASSIFICATION	9.46469331532324E-6	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999998528911928	WITHOUT_CLASSIFICATION	1.4710880731101593E-7	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999915402063279	WITHOUT_CLASSIFICATION	8.459793672216017E-6	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999972269097656	WITHOUT_CLASSIFICATION	2.773090234405136E-6	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.999986378120753	WITHOUT_CLASSIFICATION	1.3621879247118234E-5	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999984183345982	WITHOUT_CLASSIFICATION	1.5816654018032363E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999990470079325	WITHOUT_CLASSIFICATION	9.529920675775585E-7	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999964308495497	WITHOUT_CLASSIFICATION	3.5691504501670303E-6	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999994631926814	WITHOUT_CLASSIFICATION	5.368073185738307E-7	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999678791471094	WITHOUT_CLASSIFICATION	3.2120852890666076E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999998752917101	WITHOUT_CLASSIFICATION	1.2470828988119193E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999998752917101	WITHOUT_CLASSIFICATION	1.2470828988119193E-7	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999996432777957	WITHOUT_CLASSIFICATION	3.5672220435018516E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999919981156545	WITHOUT_CLASSIFICATION	8.001884345468842E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999938436378456	WITHOUT_CLASSIFICATION	6.156362154389325E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999876098812602	WITHOUT_CLASSIFICATION	1.2390118739832111E-5	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999978749977648	WITHOUT_CLASSIFICATION	2.1250022351877658E-6	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.999987724350131	WITHOUT_CLASSIFICATION	1.2275649869079853E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999997941392439	WITHOUT_CLASSIFICATION	2.0586075618187598E-7	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999714188804	WITHOUT_CLASSIFICATION	2.8581119595698407E-8	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999992874419309	WITHOUT_CLASSIFICATION	7.125580691201948E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.999990029664705	WITHOUT_CLASSIFICATION	9.970335295069512E-6	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999752145286076	WITHOUT_CLASSIFICATION	2.478547139244999E-5	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999971759274684	WITHOUT_CLASSIFICATION	2.8240725315136E-6	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999985655532573	WITHOUT_CLASSIFICATION	1.434446742728625E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999998213922615	WITHOUT_CLASSIFICATION	1.7860773837751603E-7	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999933936976529	WITHOUT_CLASSIFICATION	6.606302347078504E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999988517193357	WITHOUT_CLASSIFICATION	1.1482806642995303E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999988517193357	WITHOUT_CLASSIFICATION	1.1482806642995303E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999988517193357	WITHOUT_CLASSIFICATION	1.1482806642995303E-5	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999902586469928	WITHOUT_CLASSIFICATION	9.741353007262355E-6	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999954481290578	WITHOUT_CLASSIFICATION	4.551870942236059E-6	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999677249290343	WITHOUT_CLASSIFICATION	3.2275070965607426E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9999210161933029	WITHOUT_CLASSIFICATION	7.898380669715019E-5	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999997397763599	WITHOUT_CLASSIFICATION	2.602236400205897E-7	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999997311449476	WITHOUT_CLASSIFICATION	2.6885505235069794E-7	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999911787658	WITHOUT_CLASSIFICATION	8.821234221702554E-9	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.999998296270316	WITHOUT_CLASSIFICATION	1.7037296839835273E-6	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999986623066084	WITHOUT_CLASSIFICATION	1.3376933915011913E-6	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999859965249643	WITHOUT_CLASSIFICATION	1.4003475035679773E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999962225468887	WITHOUT_CLASSIFICATION	3.7774531112823014E-6	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9999469320087728	WITHOUT_CLASSIFICATION	5.306799122717571E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999977430056738	WITHOUT_CLASSIFICATION	2.2569943262160642E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999998752917101	WITHOUT_CLASSIFICATION	1.2470828988119193E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999998752917101	WITHOUT_CLASSIFICATION	1.2470828988119193E-7	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999905353066846	WITHOUT_CLASSIFICATION	9.46469331532324E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999990470079325	WITHOUT_CLASSIFICATION	9.529920675775585E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999919981156545	WITHOUT_CLASSIFICATION	8.001884345468842E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999876098812602	WITHOUT_CLASSIFICATION	1.2390118739832111E-5	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.999987724350131	WITHOUT_CLASSIFICATION	1.2275649869079853E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999938436378456	WITHOUT_CLASSIFICATION	6.156362154389325E-6	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999997941392439	WITHOUT_CLASSIFICATION	2.0586075618187598E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.999990029664705	WITHOUT_CLASSIFICATION	9.970335295069512E-6	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999992874419309	WITHOUT_CLASSIFICATION	7.125580691201948E-7	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999971759274684	WITHOUT_CLASSIFICATION	2.8240725315136E-6	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999930882098286	WITHOUT_CLASSIFICATION	6.911790171393807E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999953517557563	WITHOUT_CLASSIFICATION	4.6482442437779704E-6	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999980224013794	WITHOUT_CLASSIFICATION	1.9775986206077038E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999924002470518	WITHOUT_CLASSIFICATION	7.599752948229141E-6	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999966105100655	WITHOUT_CLASSIFICATION	3.389489934528588E-6	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.999702920055902	WITHOUT_CLASSIFICATION	2.970799440979703E-4	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999954181306612	WITHOUT_CLASSIFICATION	4.581869338821765E-6	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9999433029096104	WITHOUT_CLASSIFICATION	5.6697090389525986E-5	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999560711059015	WITHOUT_CLASSIFICATION	4.392889409859937E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999698237272	WITHOUT_CLASSIFICATION	3.017627281378723E-8	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999955132752115	WITHOUT_CLASSIFICATION	4.486724788466093E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999994504081864	WITHOUT_CLASSIFICATION	5.495918135759257E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993205044055	WITHOUT_CLASSIFICATION	6.794955945580805E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999999153303972	WITHOUT_CLASSIFICATION	8.466960278332325E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999979135841315	WITHOUT_CLASSIFICATION	2.086415868550423E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999949497529561	WITHOUT_CLASSIFICATION	5.050247043862799E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999982642535293	WITHOUT_CLASSIFICATION	1.7357464706314412E-6	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999911992182674	WITHOUT_CLASSIFICATION	8.800781732545896E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999966842465889	WITHOUT_CLASSIFICATION	3.315753411105132E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999955889582663	WITHOUT_CLASSIFICATION	4.411041733648314E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999995151951319	WITHOUT_CLASSIFICATION	4.848048680701144E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999990759224069	WITHOUT_CLASSIFICATION	9.240775930909161E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999990759224069	WITHOUT_CLASSIFICATION	9.240775930909161E-6	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999985083365489	WITHOUT_CLASSIFICATION	1.4916634511302331E-6	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999995407247645	WITHOUT_CLASSIFICATION	4.5927523545925464E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999514988903404	WITHOUT_CLASSIFICATION	4.850110965973174E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999514988903404	WITHOUT_CLASSIFICATION	4.850110965973174E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999514988903404	WITHOUT_CLASSIFICATION	4.850110965973174E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999518626599782	WITHOUT_CLASSIFICATION	4.8137340021950994E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999518626599782	WITHOUT_CLASSIFICATION	4.8137340021950994E-5	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9999540235556882	WITHOUT_CLASSIFICATION	4.597644431180542E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999571463280041	WITHOUT_CLASSIFICATION	4.285367199585136E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999995407247645	WITHOUT_CLASSIFICATION	4.5927523545925464E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999996696099771	WITHOUT_CLASSIFICATION	3.303900228736678E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999514988903404	WITHOUT_CLASSIFICATION	4.850110965973174E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999514988903404	WITHOUT_CLASSIFICATION	4.850110965973174E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999518626599782	WITHOUT_CLASSIFICATION	4.8137340021950994E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999571463280041	WITHOUT_CLASSIFICATION	4.285367199585136E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999986584372795	WITHOUT_CLASSIFICATION	1.341562720483795E-6	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999986584372795	WITHOUT_CLASSIFICATION	1.341562720483795E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999987367679392	WITHOUT_CLASSIFICATION	1.2632320608822973E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999987367679392	WITHOUT_CLASSIFICATION	1.2632320608822973E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999885858075082	WITHOUT_CLASSIFICATION	1.1414192491761486E-5	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999885858075082	WITHOUT_CLASSIFICATION	1.1414192491761486E-5	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.999992897926365	WITHOUT_CLASSIFICATION	7.102073634987292E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999982562756061	WITHOUT_CLASSIFICATION	1.7437243938920652E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999982562756061	WITHOUT_CLASSIFICATION	1.7437243938920652E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999982496331821	WITHOUT_CLASSIFICATION	1.7503668179663102E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999982496331821	WITHOUT_CLASSIFICATION	1.7503668179663102E-6	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999995180658673	WITHOUT_CLASSIFICATION	4.819341327620721E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999983730511562	WITHOUT_CLASSIFICATION	1.6269488438569956E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999983730511562	WITHOUT_CLASSIFICATION	1.6269488438569956E-6	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999991174031337	WITHOUT_CLASSIFICATION	8.825968662323835E-7	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999758891936094	WITHOUT_CLASSIFICATION	2.4110806390581443E-5	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999950699300435	WITHOUT_CLASSIFICATION	4.930069956442021E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999991174031337	WITHOUT_CLASSIFICATION	8.825968662323835E-7	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999932636034334	WITHOUT_CLASSIFICATION	6.736396566592511E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999933772015765	WITHOUT_CLASSIFICATION	6.622798423452913E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999933772015765	WITHOUT_CLASSIFICATION	6.622798423452913E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999933772015765	WITHOUT_CLASSIFICATION	6.622798423452913E-6	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999977611204094	WITHOUT_CLASSIFICATION	2.23887959072816E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999958188390953	WITHOUT_CLASSIFICATION	4.1811609047487E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999828252172884	WITHOUT_CLASSIFICATION	1.717478271149398E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999828252172884	WITHOUT_CLASSIFICATION	1.717478271149398E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999956004764269	WITHOUT_CLASSIFICATION	4.399523573064643E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999864487126672	WITHOUT_CLASSIFICATION	1.3551287332776209E-5	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999861986397323	WITHOUT_CLASSIFICATION	1.3801360267874527E-5	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999854466080694	WITHOUT_CLASSIFICATION	1.4553391930555247E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.999994562864957	WITHOUT_CLASSIFICATION	5.437135043032169E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999976240043328	WITHOUT_CLASSIFICATION	2.3759956673252774E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999976240043328	WITHOUT_CLASSIFICATION	2.3759956673252774E-6	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.999999212806657	WITHOUT_CLASSIFICATION	7.871933430260868E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999483299747474	WITHOUT_CLASSIFICATION	5.1670025252743715E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999483299747474	WITHOUT_CLASSIFICATION	5.1670025252743715E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999933772015765	WITHOUT_CLASSIFICATION	6.622798423452913E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999958188390953	WITHOUT_CLASSIFICATION	4.1811609047487E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999828252172884	WITHOUT_CLASSIFICATION	1.717478271149398E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999956004764269	WITHOUT_CLASSIFICATION	4.399523573064643E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999864487126672	WITHOUT_CLASSIFICATION	1.3551287332776209E-5	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999861986397323	WITHOUT_CLASSIFICATION	1.3801360267874527E-5	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999854466080694	WITHOUT_CLASSIFICATION	1.4553391930555247E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999483299747474	WITHOUT_CLASSIFICATION	5.1670025252743715E-5	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999953616973766	WITHOUT_CLASSIFICATION	4.638302623493217E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999987118227525	WITHOUT_CLASSIFICATION	1.2881772475812551E-6	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999982013945857	WITHOUT_CLASSIFICATION	1.798605414278127E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999989386382394	WITHOUT_CLASSIFICATION	1.0613617605562162E-6	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999869656622583	WITHOUT_CLASSIFICATION	1.303433774167948E-5	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999876631455278	WITHOUT_CLASSIFICATION	1.2336854472282594E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999888981795948	WITHOUT_CLASSIFICATION	1.1101820405204486E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999888981795948	WITHOUT_CLASSIFICATION	1.1101820405204486E-5	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.999996631495343	WITHOUT_CLASSIFICATION	3.3685046569706557E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999925840744803	WITHOUT_CLASSIFICATION	7.415925519636791E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.99993876089372	WITHOUT_CLASSIFICATION	6.123910627998503E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999947361309103	WITHOUT_CLASSIFICATION	5.263869089686314E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999944152546395	WITHOUT_CLASSIFICATION	5.584745360495464E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999944152546395	WITHOUT_CLASSIFICATION	5.584745360495464E-6	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999970029771889	WITHOUT_CLASSIFICATION	2.9970228112592862E-6	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999957492949161	WITHOUT_CLASSIFICATION	4.250705083836445E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999897722316745	WITHOUT_CLASSIFICATION	1.022776832536664E-5	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999897722316745	WITHOUT_CLASSIFICATION	1.022776832536664E-5	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999944776200201	WITHOUT_CLASSIFICATION	5.522379979898378E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999949737917466	WITHOUT_CLASSIFICATION	5.026208253407087E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.999994562864957	WITHOUT_CLASSIFICATION	5.437135043032169E-6	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999936380287445	WITHOUT_CLASSIFICATION	6.3619712555426794E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999711981402956	WITHOUT_CLASSIFICATION	2.8801859704380372E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999993588259876	WITHOUT_CLASSIFICATION	6.4117401240407984E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999998891834797	WITHOUT_CLASSIFICATION	1.1081652031002601E-7	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999919455117187	WITHOUT_CLASSIFICATION	8.054488281420064E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999987779963939	WITHOUT_CLASSIFICATION	1.2220036061644858E-6	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999973336239643	WITHOUT_CLASSIFICATION	2.6663760358060162E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.999894882399069	WITHOUT_CLASSIFICATION	1.0511760093090068E-4	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999941959440372	WITHOUT_CLASSIFICATION	5.804055962790111E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999941959440372	WITHOUT_CLASSIFICATION	5.804055962790111E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999933905401592	WITHOUT_CLASSIFICATION	6.609459840759838E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999933905401592	WITHOUT_CLASSIFICATION	6.609459840759838E-6	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999998695443246	WITHOUT_CLASSIFICATION	1.3045567538762035E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999871973151093	WITHOUT_CLASSIFICATION	1.2802684890743837E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999871973151093	WITHOUT_CLASSIFICATION	1.2802684890743837E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999871973151093	WITHOUT_CLASSIFICATION	1.2802684890743837E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999834796553766	WITHOUT_CLASSIFICATION	1.6520344623474734E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999994710545841	WITHOUT_CLASSIFICATION	5.289454158341142E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999994710545841	WITHOUT_CLASSIFICATION	5.289454158341142E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999995959475789	WITHOUT_CLASSIFICATION	4.040524210366717E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999396676903107	WITHOUT_CLASSIFICATION	6.033230968921321E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999787926344262	WITHOUT_CLASSIFICATION	2.120736557382073E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999966600204012	WITHOUT_CLASSIFICATION	3.3399795986887493E-6	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999969319473276	WITHOUT_CLASSIFICATION	3.0680526723709413E-6	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999940905526288	WITHOUT_CLASSIFICATION	5.909447371230522E-6	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999867949817466	WITHOUT_CLASSIFICATION	1.3205018253396404E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993205044055	WITHOUT_CLASSIFICATION	6.794955945580805E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993205044055	WITHOUT_CLASSIFICATION	6.794955945580805E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999834796553766	WITHOUT_CLASSIFICATION	1.6520344623474734E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999995959475789	WITHOUT_CLASSIFICATION	4.040524210366717E-7	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999966708568948	WITHOUT_CLASSIFICATION	3.329143105144444E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999396676903107	WITHOUT_CLASSIFICATION	6.033230968921321E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999787926344262	WITHOUT_CLASSIFICATION	2.120736557382073E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999995392316325	WITHOUT_CLASSIFICATION	4.607683673941595E-7	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.999992893169726	WITHOUT_CLASSIFICATION	7.1068302741174265E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999567386414082	WITHOUT_CLASSIFICATION	4.3261358591774294E-5	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999262635705375	WITHOUT_CLASSIFICATION	7.373642946253612E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.999998248672041	WITHOUT_CLASSIFICATION	1.7513279589842746E-6	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999989006136615	WITHOUT_CLASSIFICATION	1.0993863384970326E-6	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999994340420435	WITHOUT_CLASSIFICATION	5.659579564768879E-7	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999995392316325	WITHOUT_CLASSIFICATION	4.607683673941595E-7	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999998888582474	WITHOUT_CLASSIFICATION	1.1114175260390754E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999998888582474	WITHOUT_CLASSIFICATION	1.1114175260390754E-6	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.999995955357721	WITHOUT_CLASSIFICATION	4.044642278925927E-6	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999978065544499	WITHOUT_CLASSIFICATION	2.193445550060159E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.999964336433968	WITHOUT_CLASSIFICATION	3.566356603199992E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999984010386388	WITHOUT_CLASSIFICATION	1.598961361279909E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.999998720449945	WITHOUT_CLASSIFICATION	1.2795500550763104E-6	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999989067557464	WITHOUT_CLASSIFICATION	1.0932442535578704E-6	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999994714645046	WITHOUT_CLASSIFICATION	5.285354953878521E-7	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.999998007285073	WITHOUT_CLASSIFICATION	1.9927149269780865E-6	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.999999690268587	WITHOUT_CLASSIFICATION	3.0973141290369585E-7	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999921159398836	WITHOUT_CLASSIFICATION	7.884060116460524E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992016498404	WITHOUT_CLASSIFICATION	7.983501597274545E-7	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999984010386388	WITHOUT_CLASSIFICATION	1.598961361279909E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.999998720449945	WITHOUT_CLASSIFICATION	1.2795500550763104E-6	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999983324572776	WITHOUT_CLASSIFICATION	1.6675427222771656E-6	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999941009573268	WITHOUT_CLASSIFICATION	5.899042673241612E-6	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999997080144618	WITHOUT_CLASSIFICATION	2.91985538221671E-7	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999718546845587	WITHOUT_CLASSIFICATION	2.814531544122423E-5	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999846848542235	WITHOUT_CLASSIFICATION	1.531514577645797E-5	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9997213237690791	WITHOUT_CLASSIFICATION	2.7867623092098215E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9998554983763853	WITHOUT_CLASSIFICATION	1.4450162361456505E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999907737053622	WITHOUT_CLASSIFICATION	9.226294637820658E-6	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999659283233016	WITHOUT_CLASSIFICATION	3.407167669841575E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999601626747612	WITHOUT_CLASSIFICATION	3.9837325238962686E-5	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999074285707203	WITHOUT_CLASSIFICATION	9.257142927974712E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999696846018695	WITHOUT_CLASSIFICATION	3.0315398130514315E-5	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999986940415108	WITHOUT_CLASSIFICATION	1.3059584891808387E-6	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999984552704689	WITHOUT_CLASSIFICATION	1.5447295310486537E-6	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999999601956936	WITHOUT_CLASSIFICATION	3.9804306513457623E-8	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999964874002689	WITHOUT_CLASSIFICATION	3.5125997309664613E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999455245437567	WITHOUT_CLASSIFICATION	5.447545624327756E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999974517176204	WITHOUT_CLASSIFICATION	2.548282379569937E-6	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999996090275093	WITHOUT_CLASSIFICATION	3.9097249076513327E-7	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999988064530926	WITHOUT_CLASSIFICATION	1.1935469073707178E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999455245437567	WITHOUT_CLASSIFICATION	5.447545624327756E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999974517176204	WITHOUT_CLASSIFICATION	2.548282379569937E-6	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999996090275093	WITHOUT_CLASSIFICATION	3.9097249076513327E-7	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9998745366778674	WITHOUT_CLASSIFICATION	1.2546332213258303E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999991226482264	WITHOUT_CLASSIFICATION	8.773517735418589E-7	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999987379987599	WITHOUT_CLASSIFICATION	1.2620012400874333E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999909305101353	WITHOUT_CLASSIFICATION	9.069489864608298E-6	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9999908753398377	WITHOUT_CLASSIFICATION	9.124660162345152E-6	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999994343985578	WITHOUT_CLASSIFICATION	5.656014422437235E-7	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999909607153751	WITHOUT_CLASSIFICATION	9.039284624873359E-6	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999997527329382	WITHOUT_CLASSIFICATION	2.472670618055724E-7	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999932028982392	WITHOUT_CLASSIFICATION	6.7971017607091005E-6	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999978402723405	WITHOUT_CLASSIFICATION	2.1597276595232486E-6	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9069785293315229	WITHOUT_CLASSIFICATION	0.09302147066847709	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999930499328656	WITHOUT_CLASSIFICATION	6.950067134240306E-6	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.999998970377296	WITHOUT_CLASSIFICATION	1.0296227039834367E-6	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999999461135071	WITHOUT_CLASSIFICATION	5.3886492996261076E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.999999336946922	WITHOUT_CLASSIFICATION	6.630530780536739E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999997877221595	WITHOUT_CLASSIFICATION	2.122778404933048E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999993776587458	WITHOUT_CLASSIFICATION	6.22341254083502E-7	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999677288442467	WITHOUT_CLASSIFICATION	3.227115575339864E-5	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.999997849859964	WITHOUT_CLASSIFICATION	2.1501400360327966E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999984191753631	WITHOUT_CLASSIFICATION	1.5808246369059563E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999917511168973	WITHOUT_CLASSIFICATION	8.24888310279357E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999879976898096	WITHOUT_CLASSIFICATION	1.2002310190453357E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999879976898096	WITHOUT_CLASSIFICATION	1.2002310190453357E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999981109581088	WITHOUT_CLASSIFICATION	1.8890418911780534E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999981109581088	WITHOUT_CLASSIFICATION	1.8890418911780534E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999790553799	WITHOUT_CLASSIFICATION	2.0944620167477778E-8	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999790553799	WITHOUT_CLASSIFICATION	2.0944620167477778E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999997464055158	WITHOUT_CLASSIFICATION	2.5359448413142076E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999995980709688	WITHOUT_CLASSIFICATION	4.0192903126499175E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999973904008923	WITHOUT_CLASSIFICATION	2.609599107586801E-6	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999992629281909	WITHOUT_CLASSIFICATION	7.37071809053866E-7	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999990943384919	WITHOUT_CLASSIFICATION	9.05661508221186E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999981773130713	WITHOUT_CLASSIFICATION	1.822686928685179E-6	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999994699012534	WITHOUT_CLASSIFICATION	5.300987464817601E-7	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999970357306188	WITHOUT_CLASSIFICATION	2.9642693810942785E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993205044055	WITHOUT_CLASSIFICATION	6.794955945580805E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999997464055158	WITHOUT_CLASSIFICATION	2.5359448413142076E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999995980709688	WITHOUT_CLASSIFICATION	4.0192903126499175E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999973904008923	WITHOUT_CLASSIFICATION	2.609599107586801E-6	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999990943384919	WITHOUT_CLASSIFICATION	9.05661508221186E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999981773130713	WITHOUT_CLASSIFICATION	1.822686928685179E-6	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999943491608506	WITHOUT_CLASSIFICATION	5.650839149452654E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999885342857744	WITHOUT_CLASSIFICATION	1.1465714225616432E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9998902981944208	WITHOUT_CLASSIFICATION	1.0970180557914056E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9998902981944208	WITHOUT_CLASSIFICATION	1.0970180557914056E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999995071048958	WITHOUT_CLASSIFICATION	4.928951042065434E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999966263518749	WITHOUT_CLASSIFICATION	3.3736481249921363E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999986844033834	WITHOUT_CLASSIFICATION	1.3155966166477652E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999998845665686	WITHOUT_CLASSIFICATION	1.1543343141020993E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999998845665686	WITHOUT_CLASSIFICATION	1.1543343141020993E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999996693250537	WITHOUT_CLASSIFICATION	3.306749462191012E-7	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999993715383648	WITHOUT_CLASSIFICATION	6.284616352437382E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999995853914244	WITHOUT_CLASSIFICATION	4.1460857561432753E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999989279470975	WITHOUT_CLASSIFICATION	1.0720529025250447E-6	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999678011414469	WITHOUT_CLASSIFICATION	3.219885855312468E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999999153303972	WITHOUT_CLASSIFICATION	8.466960278332325E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999979135841315	WITHOUT_CLASSIFICATION	2.086415868550423E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999949497529561	WITHOUT_CLASSIFICATION	5.050247043862799E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999982642535293	WITHOUT_CLASSIFICATION	1.7357464706314412E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999955889582663	WITHOUT_CLASSIFICATION	4.411041733648314E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999995151951319	WITHOUT_CLASSIFICATION	4.848048680701144E-7	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999996693250537	WITHOUT_CLASSIFICATION	3.306749462191012E-7	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999993715383648	WITHOUT_CLASSIFICATION	6.284616352437382E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999989279470975	WITHOUT_CLASSIFICATION	1.0720529025250447E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999996992267369	WITHOUT_CLASSIFICATION	3.007732630265488E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999986844033834	WITHOUT_CLASSIFICATION	1.3155966166477652E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999986844033834	WITHOUT_CLASSIFICATION	1.3155966166477652E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992016498404	WITHOUT_CLASSIFICATION	7.983501597274545E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992016498404	WITHOUT_CLASSIFICATION	7.983501597274545E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999365443215441	WITHOUT_CLASSIFICATION	6.345567845584361E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999365443215441	WITHOUT_CLASSIFICATION	6.345567845584361E-5	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999996109132399	WITHOUT_CLASSIFICATION	3.8908676012573484E-7	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999991856116897	WITHOUT_CLASSIFICATION	8.143883104619722E-7	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999860557886392	WITHOUT_CLASSIFICATION	1.3944211360826508E-5	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999974844450886	WITHOUT_CLASSIFICATION	2.5155549113721987E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999999508173414	WITHOUT_CLASSIFICATION	4.918265854630459E-8	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999995706972064	WITHOUT_CLASSIFICATION	4.293027936176061E-7	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9998921799252615	WITHOUT_CLASSIFICATION	1.0782007473851259E-4	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999992254890021	WITHOUT_CLASSIFICATION	7.745109978267778E-7	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999997370955536	WITHOUT_CLASSIFICATION	2.6290444642976883E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999994525270226	WITHOUT_CLASSIFICATION	5.474729773393812E-7	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999960031761989	WITHOUT_CLASSIFICATION	3.996823801070293E-6	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999977065441817	WITHOUT_CLASSIFICATION	2.2934558182119664E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999991746930118	WITHOUT_CLASSIFICATION	8.253069881088796E-7	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999993939109377	WITHOUT_CLASSIFICATION	6.060890622823148E-7	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.999999973609328	WITHOUT_CLASSIFICATION	2.6390672055568643E-8	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999951097173626	WITHOUT_CLASSIFICATION	4.890282637335421E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.999992632777172	WITHOUT_CLASSIFICATION	7.367222828061262E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999964702436128	WITHOUT_CLASSIFICATION	3.5297563870842827E-6	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999989242488396	WITHOUT_CLASSIFICATION	1.0757511603262589E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999979135841315	WITHOUT_CLASSIFICATION	2.086415868550423E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999982642535293	WITHOUT_CLASSIFICATION	1.7357464706314412E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999990759224069	WITHOUT_CLASSIFICATION	9.240775930909161E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999828252172884	WITHOUT_CLASSIFICATION	1.717478271149398E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999828252172884	WITHOUT_CLASSIFICATION	1.717478271149398E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999996992267369	WITHOUT_CLASSIFICATION	3.007732630265488E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999986844033834	WITHOUT_CLASSIFICATION	1.3155966166477652E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992016498404	WITHOUT_CLASSIFICATION	7.983501597274545E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999365443215441	WITHOUT_CLASSIFICATION	6.345567845584361E-5	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.999997192065215	WITHOUT_CLASSIFICATION	2.807934785014029E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999974752306712	WITHOUT_CLASSIFICATION	2.524769328889098E-6	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999990759672978	WITHOUT_CLASSIFICATION	9.240327021458754E-7	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9999993925824981	WITHOUT_CLASSIFICATION	6.074175018794716E-7	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999766815708316	WITHOUT_CLASSIFICATION	2.3318429168354598E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999766815708316	WITHOUT_CLASSIFICATION	2.3318429168354598E-5	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999997021402819	WITHOUT_CLASSIFICATION	2.9785971809886625E-7	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999813793461724	WITHOUT_CLASSIFICATION	1.862065382761713E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999857397395774	WITHOUT_CLASSIFICATION	1.4260260422623842E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999580104943097	WITHOUT_CLASSIFICATION	4.198950569033467E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999990777188584	WITHOUT_CLASSIFICATION	9.222811416045732E-6	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999990777188584	WITHOUT_CLASSIFICATION	9.222811416045732E-6	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.999999579482852	WITHOUT_CLASSIFICATION	4.205171479646016E-7	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999932039366961	WITHOUT_CLASSIFICATION	6.796063303846656E-6	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999978604382225	WITHOUT_CLASSIFICATION	2.1395617774087387E-6	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999993561454807	WITHOUT_CLASSIFICATION	6.438545192062748E-7	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999993272943124	WITHOUT_CLASSIFICATION	6.727056877221336E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999970856342908	WITHOUT_CLASSIFICATION	2.9143657091838193E-6	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999918442452056	WITHOUT_CLASSIFICATION	8.155754794430322E-6	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999986335225624	WITHOUT_CLASSIFICATION	1.3664774376382592E-6	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9998499386868673	WITHOUT_CLASSIFICATION	1.5006131313261546E-4	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9999982501460725	WITHOUT_CLASSIFICATION	1.7498539275568693E-6	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9999970200686332	WITHOUT_CLASSIFICATION	2.9799313667988284E-6	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.999980602347819	WITHOUT_CLASSIFICATION	1.9397652180959466E-5	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999997290880873	WITHOUT_CLASSIFICATION	2.7091191269136E-7	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999866841538978	WITHOUT_CLASSIFICATION	1.331584610217371E-5	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999941331150548	WITHOUT_CLASSIFICATION	5.866884945187123E-6	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999997208297264	WITHOUT_CLASSIFICATION	2.791702735704044E-7	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999938613958508	WITHOUT_CLASSIFICATION	6.138604149185236E-6	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999965066608125	WITHOUT_CLASSIFICATION	3.4933391875028848E-6	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.999997359214717	WITHOUT_CLASSIFICATION	2.6407852829821025E-6	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999958532070973	WITHOUT_CLASSIFICATION	4.146792902688117E-6	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999969279425028	WITHOUT_CLASSIFICATION	3.072057497167829E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999904272763329	WITHOUT_CLASSIFICATION	9.572723666988849E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999904272763329	WITHOUT_CLASSIFICATION	9.572723666988849E-6	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999970775144796	WITHOUT_CLASSIFICATION	2.9224855203110377E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999852867497199	WITHOUT_CLASSIFICATION	1.4713250280170457E-5	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999969697603522	WITHOUT_CLASSIFICATION	3.03023964770175E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999969697603522	WITHOUT_CLASSIFICATION	3.03023964770175E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.7976872498281736	WITHOUT_CLASSIFICATION	0.20231275017182646	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999979367924168	WITHOUT_CLASSIFICATION	2.0632075832035557E-6	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.999981020076651	WITHOUT_CLASSIFICATION	1.897992334895179E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999956955552723	WITHOUT_CLASSIFICATION	4.304444727720962E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999956955552723	WITHOUT_CLASSIFICATION	4.304444727720962E-6	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.999986035095556	WITHOUT_CLASSIFICATION	1.3964904444120682E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.999985515236731	WITHOUT_CLASSIFICATION	1.4484763268999722E-5	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.999985573615177	WITHOUT_CLASSIFICATION	1.44263848229795E-5	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.999996226104104	WITHOUT_CLASSIFICATION	3.773895895944629E-6	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999994114081882	WITHOUT_CLASSIFICATION	5.885918119682985E-7	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999943875186563	WITHOUT_CLASSIFICATION	5.6124813437406065E-6	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999774591556095	WITHOUT_CLASSIFICATION	2.254084439044938E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999998433593178	WITHOUT_CLASSIFICATION	1.566406822783758E-7	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999967781656416	WITHOUT_CLASSIFICATION	3.221834358494611E-6	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9999978565334391	WITHOUT_CLASSIFICATION	2.1434665608568362E-6	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.999994494977171	WITHOUT_CLASSIFICATION	5.505022829073143E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999964257497874	WITHOUT_CLASSIFICATION	3.5742502126181334E-6	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999982720225139	WITHOUT_CLASSIFICATION	1.7279774860801641E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999913258680688	WITHOUT_CLASSIFICATION	8.674131931169725E-6	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999916423949321	WITHOUT_CLASSIFICATION	8.35760506777412E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9999967813777981	WITHOUT_CLASSIFICATION	3.2186222018554333E-6	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999956383818397	WITHOUT_CLASSIFICATION	4.3616181602608824E-6	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999955021471325	WITHOUT_CLASSIFICATION	4.497852867486741E-6	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999870314956121	WITHOUT_CLASSIFICATION	1.2968504387902847E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999854121197723	WITHOUT_CLASSIFICATION	1.458788022770632E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999986840991003	WITHOUT_CLASSIFICATION	1.315900899770302E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999976696685343	WITHOUT_CLASSIFICATION	2.330331465587401E-6	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.999976225991419	WITHOUT_CLASSIFICATION	2.377400858103666E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999914869027455	WITHOUT_CLASSIFICATION	8.513097254535173E-6	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.99999713233576	WITHOUT_CLASSIFICATION	2.867664239929901E-6	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9999762381730394	WITHOUT_CLASSIFICATION	2.3761826960684722E-5	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9979368437648409	WITHOUT_CLASSIFICATION	0.002063156235159084	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999993739902987	WITHOUT_CLASSIFICATION	6.260097012790747E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999913488051975	WITHOUT_CLASSIFICATION	8.651194802517112E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.999989015163924	WITHOUT_CLASSIFICATION	1.098483607601636E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999993999748523	WITHOUT_CLASSIFICATION	6.000251476437457E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999913258680688	WITHOUT_CLASSIFICATION	8.674131931169725E-6	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999993739902987	WITHOUT_CLASSIFICATION	6.260097012790747E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999913488051975	WITHOUT_CLASSIFICATION	8.651194802517112E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999993999748523	WITHOUT_CLASSIFICATION	6.000251476437457E-7	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.999983817589551	WITHOUT_CLASSIFICATION	1.6182410449052667E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999770947611959	WITHOUT_CLASSIFICATION	2.2905238804039543E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.999978273388248	WITHOUT_CLASSIFICATION	2.1726611752114493E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999996107401027	WITHOUT_CLASSIFICATION	3.8925989737252327E-7	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999979374723642	WITHOUT_CLASSIFICATION	2.0625276357821288E-6	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999993482327626	WITHOUT_CLASSIFICATION	6.517672374474003E-7	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999944561060125	WITHOUT_CLASSIFICATION	5.543893987546811E-6	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999987599474243	WITHOUT_CLASSIFICATION	1.2400525757409385E-6	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999936974948401	WITHOUT_CLASSIFICATION	6.302505159927687E-6	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999822831922888	WITHOUT_CLASSIFICATION	1.771680771128705E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999873951020899	WITHOUT_CLASSIFICATION	1.2604897910129265E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999873951020899	WITHOUT_CLASSIFICATION	1.2604897910129265E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.999978829324419	WITHOUT_CLASSIFICATION	2.117067558111859E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999779574792005	WITHOUT_CLASSIFICATION	2.2042520799521852E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999941810653639	WITHOUT_CLASSIFICATION	5.818934636142429E-6	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999906813915879	WITHOUT_CLASSIFICATION	9.318608412059541E-6	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999836145734372	WITHOUT_CLASSIFICATION	1.6385426562729054E-5	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999990076472023	WITHOUT_CLASSIFICATION	9.923527976305415E-7	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999985862102688	WITHOUT_CLASSIFICATION	1.4137897311658698E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999992139469026	WITHOUT_CLASSIFICATION	7.860530973752622E-7	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999979637070933	WITHOUT_CLASSIFICATION	2.0362929066814734E-6	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999674948232	WITHOUT_CLASSIFICATION	3.25051767827954E-8	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999997325762192	WITHOUT_CLASSIFICATION	2.674237806891955E-7	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999891790725	WITHOUT_CLASSIFICATION	1.0820927506010827E-8	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999994267411508	WITHOUT_CLASSIFICATION	5.732588491852924E-7	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999978533011974	WITHOUT_CLASSIFICATION	2.1466988025543E-6	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999979392076995	WITHOUT_CLASSIFICATION	2.060792300484368E-6	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999992034027771	WITHOUT_CLASSIFICATION	7.965972228738825E-7	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999974001572446	WITHOUT_CLASSIFICATION	2.599842755326986E-6	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999983757188636	WITHOUT_CLASSIFICATION	1.624281136267755E-6	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999969451955207	WITHOUT_CLASSIFICATION	3.0548044792230032E-6	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999818507055886	WITHOUT_CLASSIFICATION	1.8149294411379328E-5	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999972644200625	WITHOUT_CLASSIFICATION	2.73557993752093E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999968296381102	WITHOUT_CLASSIFICATION	3.1703618898134433E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999985589002397	WITHOUT_CLASSIFICATION	1.4410997603485488E-6	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999968739017889	WITHOUT_CLASSIFICATION	3.126098211048559E-6	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999970978274283	WITHOUT_CLASSIFICATION	2.902172571796827E-6	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999962703867955	WITHOUT_CLASSIFICATION	3.729613204402447E-6	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.999999202565363	WITHOUT_CLASSIFICATION	7.97434636914795E-7	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.999999545150868	WITHOUT_CLASSIFICATION	4.548491320116966E-7	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999968790928622	WITHOUT_CLASSIFICATION	3.1209071377493802E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.999996841458093	WITHOUT_CLASSIFICATION	3.158541906897919E-6	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999996589459452	WITHOUT_CLASSIFICATION	3.4105405481627754E-7	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.999993225905674	WITHOUT_CLASSIFICATION	6.774094326076849E-6	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999998495918864	WITHOUT_CLASSIFICATION	1.5040811361482643E-7	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999998883870854	WITHOUT_CLASSIFICATION	1.1161291466534736E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999975659950604	WITHOUT_CLASSIFICATION	2.4340049395736956E-6	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999986880509686	WITHOUT_CLASSIFICATION	1.3119490313988174E-6	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999997068973729	WITHOUT_CLASSIFICATION	2.931026270546109E-7	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999842188148855	WITHOUT_CLASSIFICATION	1.57811851145341E-5	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999993187582604	WITHOUT_CLASSIFICATION	6.812417396373889E-7	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999997389290309	WITHOUT_CLASSIFICATION	2.610709690612744E-7	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999831871577355	WITHOUT_CLASSIFICATION	1.6812842264467343E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999887678784168	WITHOUT_CLASSIFICATION	1.123212158316147E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999957412720437	WITHOUT_CLASSIFICATION	4.258727956232475E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.999995617153092	WITHOUT_CLASSIFICATION	4.382846907943908E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.999999536896832	WITHOUT_CLASSIFICATION	4.631031679954014E-7	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999905931063598	WITHOUT_CLASSIFICATION	9.406893640049336E-6	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9998359523684044	WITHOUT_CLASSIFICATION	1.6404763159563968E-4	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.999997186706526	WITHOUT_CLASSIFICATION	2.8132934739957344E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999999572934389	WITHOUT_CLASSIFICATION	4.270656100561581E-8	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.99999780927294	WITHOUT_CLASSIFICATION	2.1907270599886027E-6	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999982327501056	WITHOUT_CLASSIFICATION	1.767249894450988E-6	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999290617394	WITHOUT_CLASSIFICATION	7.09382606722884E-8	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999998766480703	WITHOUT_CLASSIFICATION	1.2335192967440034E-7	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999846298238285	WITHOUT_CLASSIFICATION	1.537017617150577E-5	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999839476311062	WITHOUT_CLASSIFICATION	1.605236889375663E-5	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999868509212667	WITHOUT_CLASSIFICATION	1.3149078733315766E-5	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999997220362338	WITHOUT_CLASSIFICATION	2.7796376622875494E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999990412998933	WITHOUT_CLASSIFICATION	9.587001067605274E-7	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9999959561790924	WITHOUT_CLASSIFICATION	4.043820907529391E-6	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999042209875618	WITHOUT_CLASSIFICATION	9.577901243812017E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999042209875618	WITHOUT_CLASSIFICATION	9.577901243812017E-5	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.999994192883731	WITHOUT_CLASSIFICATION	5.807116269003377E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999996301016839	WITHOUT_CLASSIFICATION	3.698983161379136E-7	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.999982465645413	WITHOUT_CLASSIFICATION	1.7534354586989242E-5	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999960941065889	WITHOUT_CLASSIFICATION	3.905893411129504E-6	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999985473734704	WITHOUT_CLASSIFICATION	1.4526265295862915E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9999915175959035	WITHOUT_CLASSIFICATION	8.48240409642221E-6	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9999178202692145	WITHOUT_CLASSIFICATION	8.217973078545415E-5	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999970021743432	WITHOUT_CLASSIFICATION	2.9978256568315066E-6	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999983156311236	WITHOUT_CLASSIFICATION	1.6843688763088973E-6	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999992340868432	WITHOUT_CLASSIFICATION	7.659131567787468E-7	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999987142338108	WITHOUT_CLASSIFICATION	1.2857661891879974E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999990568113972	WITHOUT_CLASSIFICATION	9.431886027001893E-7	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999614009286205	WITHOUT_CLASSIFICATION	3.8599071379434956E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.999954525740163	WITHOUT_CLASSIFICATION	4.5474259837095015E-5	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999968629603762	WITHOUT_CLASSIFICATION	3.137039623815803E-6	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999734959019322	WITHOUT_CLASSIFICATION	2.6504098067784876E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999978833773089	WITHOUT_CLASSIFICATION	2.116622691070609E-6	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999946365559794	WITHOUT_CLASSIFICATION	5.363444020665778E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9999974050432596	WITHOUT_CLASSIFICATION	2.594956740373186E-6	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999788226823219	WITHOUT_CLASSIFICATION	2.1177317678149422E-5	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999955387392901	WITHOUT_CLASSIFICATION	4.461260709793488E-6	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999810090675749	WITHOUT_CLASSIFICATION	1.8990932425131415E-5	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999972702616672	WITHOUT_CLASSIFICATION	2.7297383327810457E-6	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999540965745571	WITHOUT_CLASSIFICATION	4.5903425442878895E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999992604419327	WITHOUT_CLASSIFICATION	7.395580672998673E-7	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999474198209533	WITHOUT_CLASSIFICATION	5.258017904674139E-5	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999954302614277	WITHOUT_CLASSIFICATION	4.569738572333995E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999959838902925	WITHOUT_CLASSIFICATION	4.016109707516345E-6	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999967042441553	WITHOUT_CLASSIFICATION	3.2957558446563275E-6	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999972571705052	WITHOUT_CLASSIFICATION	2.742829494672073E-6	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999818227774394	WITHOUT_CLASSIFICATION	1.8177222560559052E-5	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999981684278489	WITHOUT_CLASSIFICATION	1.8315721511183058E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999989374614752	WITHOUT_CLASSIFICATION	1.0625385248790658E-6	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999948891219334	WITHOUT_CLASSIFICATION	5.110878066690507E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999989374614752	WITHOUT_CLASSIFICATION	1.0625385248790658E-6	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999997790186987	WITHOUT_CLASSIFICATION	2.2098130128016096E-7	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999622629101503	WITHOUT_CLASSIFICATION	3.773708984960434E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999622629101503	WITHOUT_CLASSIFICATION	3.773708984960434E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999622629101503	WITHOUT_CLASSIFICATION	3.773708984960434E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999985166149687	WITHOUT_CLASSIFICATION	1.483385031296128E-6	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999985166149687	WITHOUT_CLASSIFICATION	1.483385031296128E-6	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999801337016108	WITHOUT_CLASSIFICATION	1.9866298389169665E-5	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999983489616064	WITHOUT_CLASSIFICATION	1.6510383935838191E-6	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999950749963177	WITHOUT_CLASSIFICATION	4.925003682410201E-6	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999999714543226	WITHOUT_CLASSIFICATION	2.8545677326458677E-8	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999803936636097	WITHOUT_CLASSIFICATION	1.9606336390287816E-5	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999991438594172	WITHOUT_CLASSIFICATION	8.561405827777223E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.999998359701059	WITHOUT_CLASSIFICATION	1.6402989409632393E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999922261395094	WITHOUT_CLASSIFICATION	7.7738604905457E-6	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.99999977440121	WITHOUT_CLASSIFICATION	2.2559878989496472E-7	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.999995005369717	WITHOUT_CLASSIFICATION	4.994630282963641E-6	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999973568882311	WITHOUT_CLASSIFICATION	2.6431117688031012E-6	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9996850112511788	WITHOUT_CLASSIFICATION	3.149887488211457E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999992900615251	WITHOUT_CLASSIFICATION	7.099384748877869E-7	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999990728467139	WITHOUT_CLASSIFICATION	9.271532862249964E-7	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.99999769437505	WITHOUT_CLASSIFICATION	2.305624949889202E-6	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999992923841642	WITHOUT_CLASSIFICATION	7.07615835719943E-7	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999971652072938	WITHOUT_CLASSIFICATION	2.834792706178134E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999958506328475	WITHOUT_CLASSIFICATION	4.149367152559175E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999958506328475	WITHOUT_CLASSIFICATION	4.149367152559175E-6	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999840312867065	WITHOUT_CLASSIFICATION	1.596871329350746E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999995256688926	WITHOUT_CLASSIFICATION	4.743311073329954E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999995256688926	WITHOUT_CLASSIFICATION	4.743311073329954E-7	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999669030790647	WITHOUT_CLASSIFICATION	3.30969209354344E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999889402942557	WITHOUT_CLASSIFICATION	1.1059705744385873E-5	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.999998729609677	WITHOUT_CLASSIFICATION	1.2703903229777238E-6	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999836395096842	WITHOUT_CLASSIFICATION	1.6360490315760445E-5	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999918940232994	WITHOUT_CLASSIFICATION	8.105976700575593E-6	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999944574547106	WITHOUT_CLASSIFICATION	5.542545289345013E-6	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999654453350934	WITHOUT_CLASSIFICATION	3.455466490659673E-5	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999927296229711	WITHOUT_CLASSIFICATION	7.270377028907923E-6	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.999998246353504	WITHOUT_CLASSIFICATION	1.7536464961115247E-6	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999902956033965	WITHOUT_CLASSIFICATION	9.704396603579858E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999922870381317	WITHOUT_CLASSIFICATION	7.712961868340519E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999954617020638	WITHOUT_CLASSIFICATION	4.538297936228469E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999930104468885	WITHOUT_CLASSIFICATION	6.989553111495285E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999993529564767	WITHOUT_CLASSIFICATION	6.470435232628859E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999922261395094	WITHOUT_CLASSIFICATION	7.7738604905457E-6	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9997761568448663	WITHOUT_CLASSIFICATION	2.2384315513378236E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999977417878109	WITHOUT_CLASSIFICATION	2.258212189148157E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999932242200997	WITHOUT_CLASSIFICATION	6.775779900188938E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999932242200997	WITHOUT_CLASSIFICATION	6.775779900188938E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999985820803569	WITHOUT_CLASSIFICATION	1.4179196430715106E-6	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999823695748841	WITHOUT_CLASSIFICATION	1.7630425115961916E-5	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999979935651553	WITHOUT_CLASSIFICATION	2.0064348447109183E-6	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999983112495175	WITHOUT_CLASSIFICATION	1.6887504824207598E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999994798222229	WITHOUT_CLASSIFICATION	5.201777770947169E-7	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999976847071295	WITHOUT_CLASSIFICATION	2.315292870589755E-6	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999995893619662	WITHOUT_CLASSIFICATION	4.106380338377075E-7	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9999794131714499	WITHOUT_CLASSIFICATION	2.0586828550107737E-5	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999930408473473	WITHOUT_CLASSIFICATION	6.959152652752029E-6	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999996422087937	WITHOUT_CLASSIFICATION	3.57791206247139E-7	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999797506847462	WITHOUT_CLASSIFICATION	2.0249315253803245E-5	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999988496119014	WITHOUT_CLASSIFICATION	1.1503880984616565E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9837522575515608	WITHOUT_CLASSIFICATION	0.0162477424484392	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999993743375455	WITHOUT_CLASSIFICATION	6.256624546032772E-7	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999995256426436	WITHOUT_CLASSIFICATION	4.743573563381789E-7	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999917796032624	WITHOUT_CLASSIFICATION	8.220396737655231E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999602428293498	WITHOUT_CLASSIFICATION	3.975717065023152E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999946716660983	WITHOUT_CLASSIFICATION	5.328333901709727E-6	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999784220948227	WITHOUT_CLASSIFICATION	2.1577905177301637E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999903615686705	WITHOUT_CLASSIFICATION	9.638431329572663E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999803001676463	WITHOUT_CLASSIFICATION	1.969983235366386E-5	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999952513577116	WITHOUT_CLASSIFICATION	4.748642288292994E-6	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999923404222073	WITHOUT_CLASSIFICATION	7.659577792637715E-6	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999998871882498	WITHOUT_CLASSIFICATION	1.1281175007766261E-7	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999997360597624	WITHOUT_CLASSIFICATION	2.639402375821277E-7	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999559266264664	WITHOUT_CLASSIFICATION	4.407337353363943E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.999998522236939	WITHOUT_CLASSIFICATION	1.4777630610396248E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9999850375729786	WITHOUT_CLASSIFICATION	1.4962427021445007E-5	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.999999479646537	WITHOUT_CLASSIFICATION	5.203534629298682E-7	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999976456992523	WITHOUT_CLASSIFICATION	2.35430074767109E-6	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999495655668583	WITHOUT_CLASSIFICATION	5.043443314170524E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999990897339334	WITHOUT_CLASSIFICATION	9.102660665493243E-7	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999924797381056	WITHOUT_CLASSIFICATION	7.520261894428736E-6	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9987343610754778	WITHOUT_CLASSIFICATION	0.0012656389245222963	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999976648823818	WITHOUT_CLASSIFICATION	2.335117618269176E-6	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999946020111273	WITHOUT_CLASSIFICATION	5.397988872727213E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9999850375729786	WITHOUT_CLASSIFICATION	1.4962427021445007E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999643530287	WITHOUT_CLASSIFICATION	3.5646971296276166E-8	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999976648823818	WITHOUT_CLASSIFICATION	2.335117618269176E-6	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999999628741124	WITHOUT_CLASSIFICATION	3.7125887644439387E-8	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999983914346012	WITHOUT_CLASSIFICATION	1.608565398726823E-6	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999976388193846	WITHOUT_CLASSIFICATION	2.3611806154028425E-6	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999932929835895	WITHOUT_CLASSIFICATION	6.707016410450248E-6	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999596970074068	WITHOUT_CLASSIFICATION	4.030299259328207E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999995726935149	WITHOUT_CLASSIFICATION	4.2730648516715686E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999995726935149	WITHOUT_CLASSIFICATION	4.2730648516715686E-7	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999977878649775	WITHOUT_CLASSIFICATION	2.212135022401458E-6	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999175310232	WITHOUT_CLASSIFICATION	8.246897675152105E-8	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999969986246471	WITHOUT_CLASSIFICATION	3.0013753529976025E-6	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999969986246471	WITHOUT_CLASSIFICATION	3.0013753529976025E-6	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999998981408906	WITHOUT_CLASSIFICATION	1.018591093770421E-7	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9998394445076575	WITHOUT_CLASSIFICATION	1.6055549234244624E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9997166347795884	WITHOUT_CLASSIFICATION	2.833652204116033E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9997166347795884	WITHOUT_CLASSIFICATION	2.833652204116033E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999885658423862	WITHOUT_CLASSIFICATION	1.1434157613743943E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999920637181889	WITHOUT_CLASSIFICATION	7.936281810960982E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999995623877713	WITHOUT_CLASSIFICATION	4.3761222875433816E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999997630349995	WITHOUT_CLASSIFICATION	2.3696500063650315E-7	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.999989520584106	WITHOUT_CLASSIFICATION	1.0479415894015943E-5	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.999967585070331	WITHOUT_CLASSIFICATION	3.2414929668945774E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999998847630042	WITHOUT_CLASSIFICATION	1.1523699581909422E-7	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999949096101414	WITHOUT_CLASSIFICATION	5.090389858593023E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999735990647842	WITHOUT_CLASSIFICATION	2.6400935215708093E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999945466973609	WITHOUT_CLASSIFICATION	5.453302639122104E-6	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999975716283876	WITHOUT_CLASSIFICATION	2.4283716123971177E-6	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999621044117489	WITHOUT_CLASSIFICATION	3.789558825114267E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999983966757232	WITHOUT_CLASSIFICATION	1.6033242767785308E-6	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999987425216831	WITHOUT_CLASSIFICATION	1.257478316929811E-6	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999456839825028	WITHOUT_CLASSIFICATION	5.431601749731852E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999466924443248	WITHOUT_CLASSIFICATION	5.3307555675299004E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999885300928836	WITHOUT_CLASSIFICATION	1.1469907116462555E-5	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999875676422212	WITHOUT_CLASSIFICATION	1.2432357778860307E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999870993175178	WITHOUT_CLASSIFICATION	1.2900682482078181E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999886166818323	WITHOUT_CLASSIFICATION	1.138331816771283E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.999998154742509	WITHOUT_CLASSIFICATION	1.845257491008955E-6	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999976486478542	WITHOUT_CLASSIFICATION	2.3513521457638624E-6	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999369411869549	WITHOUT_CLASSIFICATION	6.305881304513942E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999768097227695	WITHOUT_CLASSIFICATION	2.3190277230483294E-5	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999838290366686	WITHOUT_CLASSIFICATION	1.61709633314124E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999909767995272	WITHOUT_CLASSIFICATION	9.023200472712988E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999926921404866	WITHOUT_CLASSIFICATION	7.307859513382191E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999908825357664	WITHOUT_CLASSIFICATION	9.117464233517007E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999578066347963	WITHOUT_CLASSIFICATION	4.2193365203730275E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999578066347963	WITHOUT_CLASSIFICATION	4.2193365203730275E-5	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999873151162869	WITHOUT_CLASSIFICATION	1.2684883713030891E-5	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999750200921564	WITHOUT_CLASSIFICATION	2.4979907843544344E-5	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9998972421170405	WITHOUT_CLASSIFICATION	1.0275788295950048E-4	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.999988421074615	WITHOUT_CLASSIFICATION	1.1578925384927427E-5	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999268641931897	WITHOUT_CLASSIFICATION	7.313580681028476E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.999967604833631	WITHOUT_CLASSIFICATION	3.239516636898731E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999982242766824	WITHOUT_CLASSIFICATION	1.775723317625083E-6	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999974102790545	WITHOUT_CLASSIFICATION	2.5897209454978373E-6	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999995368133514	WITHOUT_CLASSIFICATION	4.631866485503496E-7	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999995781890593	WITHOUT_CLASSIFICATION	4.218109406693438E-7	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999967073270144	WITHOUT_CLASSIFICATION	3.2926729857043274E-6	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999646402224837	WITHOUT_CLASSIFICATION	3.5359777516402815E-5	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999912754689504	WITHOUT_CLASSIFICATION	8.724531049521994E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999995331983853	WITHOUT_CLASSIFICATION	4.6680161469972503E-7	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999994381264753	WITHOUT_CLASSIFICATION	5.618735246608105E-7	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.999988593122593	WITHOUT_CLASSIFICATION	1.140687740700519E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999994064951663	WITHOUT_CLASSIFICATION	5.935048337436171E-7	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999994818312932	WITHOUT_CLASSIFICATION	5.181687067548118E-7	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999937626375633	WITHOUT_CLASSIFICATION	6.23736243660747E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999999070950596	WITHOUT_CLASSIFICATION	9.290494036488735E-8	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999992059233684	WITHOUT_CLASSIFICATION	7.940766316503028E-7	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.999928807397385	WITHOUT_CLASSIFICATION	7.119260261502535E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999958015939038	WITHOUT_CLASSIFICATION	4.198406096279446E-6	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999955860469668	WITHOUT_CLASSIFICATION	4.413953033105874E-6	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999992782287218	WITHOUT_CLASSIFICATION	7.217712781506623E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.999983123380129	WITHOUT_CLASSIFICATION	1.6876619871043325E-5	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999864217717391	WITHOUT_CLASSIFICATION	1.3578228260738259E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999908589583855	WITHOUT_CLASSIFICATION	9.141041614577242E-6	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999936466276211	WITHOUT_CLASSIFICATION	6.353372378968394E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999973981310712	WITHOUT_CLASSIFICATION	2.6018689287043604E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999843767903205	WITHOUT_CLASSIFICATION	1.5623209679491437E-5	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999954535030594	WITHOUT_CLASSIFICATION	4.546496940548508E-6	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999982086605271	WITHOUT_CLASSIFICATION	1.791339472875634E-6	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999968994411669	WITHOUT_CLASSIFICATION	3.1005588331821393E-6	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999944222893112	WITHOUT_CLASSIFICATION	5.577710688687747E-6	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999125632434634	WITHOUT_CLASSIFICATION	8.743675653653087E-5	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999946009866237	WITHOUT_CLASSIFICATION	5.399013376189433E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.999988237715953	WITHOUT_CLASSIFICATION	1.1762284047070507E-5	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999992531323914	WITHOUT_CLASSIFICATION	7.46867608704103E-7	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.999999027199324	WITHOUT_CLASSIFICATION	9.728006760624066E-7	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.999978709900522	WITHOUT_CLASSIFICATION	2.129009947805748E-5	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999963880814349	WITHOUT_CLASSIFICATION	3.61191856523772E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999995758895219	WITHOUT_CLASSIFICATION	4.241104781546443E-7	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999995758895219	WITHOUT_CLASSIFICATION	4.241104781546443E-7	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999933754310202	WITHOUT_CLASSIFICATION	6.624568979741849E-6	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999972890550931	WITHOUT_CLASSIFICATION	2.7109449068261856E-6	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999919152671369	WITHOUT_CLASSIFICATION	8.084732863047562E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999931616889194	WITHOUT_CLASSIFICATION	6.838311080564246E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.999997849859964	WITHOUT_CLASSIFICATION	2.1501400360327966E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999984191753631	WITHOUT_CLASSIFICATION	1.5808246369059563E-6	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999993613972696	WITHOUT_CLASSIFICATION	6.386027303602595E-7	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999952413174502	WITHOUT_CLASSIFICATION	4.758682549776795E-6	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9996766071837286	WITHOUT_CLASSIFICATION	3.233928162713158E-4	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999837916129359	WITHOUT_CLASSIFICATION	1.620838706408598E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999938235368127	WITHOUT_CLASSIFICATION	6.176463187297924E-6	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999979234979691	WITHOUT_CLASSIFICATION	2.076502030901642E-6	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999910270863032	WITHOUT_CLASSIFICATION	8.972913696850356E-6	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999966954194127	WITHOUT_CLASSIFICATION	3.304580587224297E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999890242734426	WITHOUT_CLASSIFICATION	1.097572655734688E-5	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999846282811404	WITHOUT_CLASSIFICATION	1.537171885957989E-5	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999949300752696	WITHOUT_CLASSIFICATION	5.069924730367251E-6	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999688616530344	WITHOUT_CLASSIFICATION	3.1138346965458974E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999895788226172	WITHOUT_CLASSIFICATION	1.042117738290411E-5	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999817951409484	WITHOUT_CLASSIFICATION	1.820485905155202E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.999994249092962	WITHOUT_CLASSIFICATION	5.750907038081371E-6	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999934999643514	WITHOUT_CLASSIFICATION	6.500035648609712E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999973773396345	WITHOUT_CLASSIFICATION	2.6226603655487935E-6	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999975574538669	WITHOUT_CLASSIFICATION	2.4425461330904477E-6	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999922619781912	WITHOUT_CLASSIFICATION	7.738021808764595E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.999983818955347	WITHOUT_CLASSIFICATION	1.618104465304149E-5	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999915605090346	WITHOUT_CLASSIFICATION	8.43949096540209E-6	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999958896211976	WITHOUT_CLASSIFICATION	4.1103788023967185E-6	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999988633152412	WITHOUT_CLASSIFICATION	1.1366847587270224E-6	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999940247484638	WITHOUT_CLASSIFICATION	5.975251536195704E-6	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.999988543800156	WITHOUT_CLASSIFICATION	1.1456199843981499E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999995356173391	WITHOUT_CLASSIFICATION	4.643826608296478E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999541959437132	WITHOUT_CLASSIFICATION	4.58040562868639E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999954677538405	WITHOUT_CLASSIFICATION	4.532246159526757E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.999988237715953	WITHOUT_CLASSIFICATION	1.1762284047070507E-5	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999994134561115	WITHOUT_CLASSIFICATION	5.865438884581298E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.999993136873317	WITHOUT_CLASSIFICATION	6.863126683052803E-6	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.999993136873317	WITHOUT_CLASSIFICATION	6.863126683052803E-6	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.999999247204727	WITHOUT_CLASSIFICATION	7.527952729213661E-7	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999979702192672	WITHOUT_CLASSIFICATION	2.0297807328000442E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999842761461557	WITHOUT_CLASSIFICATION	1.5723853844330294E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999988363574185	WITHOUT_CLASSIFICATION	1.1636425815470668E-6	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999906671645221	WITHOUT_CLASSIFICATION	9.332835477943549E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999853270683465	WITHOUT_CLASSIFICATION	1.4672931653522363E-5	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999917744306733	WITHOUT_CLASSIFICATION	8.22556932665395E-6	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.999989257278328	WITHOUT_CLASSIFICATION	1.074272167190227E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999782134832328	WITHOUT_CLASSIFICATION	2.1786516767253685E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.999987289819472	WITHOUT_CLASSIFICATION	1.2710180527901368E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999840490682218	WITHOUT_CLASSIFICATION	1.5950931778209784E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999842372985216	WITHOUT_CLASSIFICATION	1.5762701478317354E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999919163389269	WITHOUT_CLASSIFICATION	8.083661073050896E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999862392849036	WITHOUT_CLASSIFICATION	1.3760715096366623E-5	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999999272970184	WITHOUT_CLASSIFICATION	7.270298172756245E-8	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999997858079853	WITHOUT_CLASSIFICATION	2.141920148239447E-7	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999944965474439	WITHOUT_CLASSIFICATION	5.50345255611903E-6	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999939055722956	WITHOUT_CLASSIFICATION	6.094427704415012E-6	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999920990877676	WITHOUT_CLASSIFICATION	7.900912232331438E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999953906610703	WITHOUT_CLASSIFICATION	4.609338929728223E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999946216784393	WITHOUT_CLASSIFICATION	5.378321560560688E-6	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999910140287381	WITHOUT_CLASSIFICATION	8.98597126187905E-6	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999416213593	WITHOUT_CLASSIFICATION	5.837864064962954E-8	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.999999648431232	WITHOUT_CLASSIFICATION	3.515687679239642E-7	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999984929869755	WITHOUT_CLASSIFICATION	1.5070130244211994E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.999999488879331	WITHOUT_CLASSIFICATION	5.111206690390543E-7	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999979770776041	WITHOUT_CLASSIFICATION	2.022922395797E-6	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999987631086588	WITHOUT_CLASSIFICATION	1.2368913413159598E-6	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999995026853145	WITHOUT_CLASSIFICATION	4.973146856216973E-7	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999974065531596	WITHOUT_CLASSIFICATION	2.593446840480842E-6	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999961196146628	WITHOUT_CLASSIFICATION	3.880385337134131E-6	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999971250566217	WITHOUT_CLASSIFICATION	2.8749433782816463E-6	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.999990870409605	WITHOUT_CLASSIFICATION	9.129590395015554E-6	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999993335814124	WITHOUT_CLASSIFICATION	6.66418587728046E-7	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999941160776237	WITHOUT_CLASSIFICATION	5.883922376405783E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999827984112327	WITHOUT_CLASSIFICATION	1.720158876719026E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999984254782717	WITHOUT_CLASSIFICATION	1.5745217283115586E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.999999488879331	WITHOUT_CLASSIFICATION	5.111206690390543E-7	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999979770776041	WITHOUT_CLASSIFICATION	2.022922395797E-6	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999987631086588	WITHOUT_CLASSIFICATION	1.2368913413159598E-6	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999974065531596	WITHOUT_CLASSIFICATION	2.593446840480842E-6	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999947778598595	WITHOUT_CLASSIFICATION	5.222140140532402E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999998449628041	WITHOUT_CLASSIFICATION	1.5503719588518782E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999743127435541	WITHOUT_CLASSIFICATION	2.568725644598312E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999902276910407	WITHOUT_CLASSIFICATION	9.772308959281379E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999916204577222	WITHOUT_CLASSIFICATION	8.379542277793896E-6	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999883084589629	WITHOUT_CLASSIFICATION	1.169154103703536E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999982360184168	WITHOUT_CLASSIFICATION	1.763981583317597E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999981209215831	WITHOUT_CLASSIFICATION	1.8790784168440613E-6	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999998630629393	WITHOUT_CLASSIFICATION	1.3693706073155238E-7	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.999998802058263	WITHOUT_CLASSIFICATION	1.197941737031508E-6	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999934233774764	WITHOUT_CLASSIFICATION	6.576622523644044E-6	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999960319513215	WITHOUT_CLASSIFICATION	3.968048678456254E-6	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999783772849432	WITHOUT_CLASSIFICATION	2.1622715056738566E-5	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999922265590572	WITHOUT_CLASSIFICATION	7.77344094284041E-6	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999956506678281	WITHOUT_CLASSIFICATION	4.349332171845692E-6	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999835660175113	WITHOUT_CLASSIFICATION	1.6433982488778376E-5	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.999996255961732	WITHOUT_CLASSIFICATION	3.744038268114462E-6	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999996245548515	WITHOUT_CLASSIFICATION	3.7544514863531115E-7	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999971974777335	WITHOUT_CLASSIFICATION	2.802522266519085E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999984254782717	WITHOUT_CLASSIFICATION	1.5745217283115586E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999998449628041	WITHOUT_CLASSIFICATION	1.5503719588518782E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999743127435541	WITHOUT_CLASSIFICATION	2.568725644598312E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999916204577222	WITHOUT_CLASSIFICATION	8.379542277793896E-6	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999883084589629	WITHOUT_CLASSIFICATION	1.169154103703536E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999982360184168	WITHOUT_CLASSIFICATION	1.763981583317597E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999981209215831	WITHOUT_CLASSIFICATION	1.8790784168440613E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.999999715201206	WITHOUT_CLASSIFICATION	2.8479879401821563E-7	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999974494208941	WITHOUT_CLASSIFICATION	2.5505791058474667E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999949349014352	WITHOUT_CLASSIFICATION	5.065098564897905E-6	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999006739291	WITHOUT_CLASSIFICATION	9.932607094325624E-8	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999995849330365	WITHOUT_CLASSIFICATION	4.1506696345679335E-7	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999995849330365	WITHOUT_CLASSIFICATION	4.1506696345679335E-7	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999989572762517	WITHOUT_CLASSIFICATION	1.0427237484236744E-6	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999988205974832	WITHOUT_CLASSIFICATION	1.1794025167692064E-6	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999959381382734	WITHOUT_CLASSIFICATION	4.061861726691256E-6	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999951921967031	WITHOUT_CLASSIFICATION	4.807803296918414E-6	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999996995150788	WITHOUT_CLASSIFICATION	3.0048492112825345E-7	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999973397752537	WITHOUT_CLASSIFICATION	2.660224746285957E-6	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999902498361729	WITHOUT_CLASSIFICATION	9.750163827051597E-6	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999981117552669	WITHOUT_CLASSIFICATION	1.8882447331406921E-6	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999987308396477	WITHOUT_CLASSIFICATION	1.2691603522607506E-6	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999969690577336	WITHOUT_CLASSIFICATION	3.03094226635861E-6	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999995323004062	WITHOUT_CLASSIFICATION	4.6769959389772516E-7	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999995780033852	WITHOUT_CLASSIFICATION	4.2199661469590977E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999641236086187	WITHOUT_CLASSIFICATION	3.5876391381223776E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999868265700487	WITHOUT_CLASSIFICATION	1.317342995132874E-5	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.999998739055569	WITHOUT_CLASSIFICATION	1.2609444309190734E-6	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999984583511936	WITHOUT_CLASSIFICATION	1.541648806441116E-6	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999995643200221	WITHOUT_CLASSIFICATION	4.356799778355142E-7	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.999993033574933	WITHOUT_CLASSIFICATION	6.966425066978218E-6	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999995708702459	WITHOUT_CLASSIFICATION	4.291297541217928E-7	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999981627432901	WITHOUT_CLASSIFICATION	1.8372567098895419E-6	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9678435171223997	WITHOUT_CLASSIFICATION	0.03215648287760029	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999991286068501	WITHOUT_CLASSIFICATION	8.713931497414118E-7	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.999997946222621	WITHOUT_CLASSIFICATION	2.053777378975402E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8118067171180041	WITHOUT_CLASSIFICATION	0.18819328288199588	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999984139704118	WITHOUT_CLASSIFICATION	1.5860295882994078E-6	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999914767861575	WITHOUT_CLASSIFICATION	8.523213842480757E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999997193527217	WITHOUT_CLASSIFICATION	2.8064727823221767E-7	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999993251209679	WITHOUT_CLASSIFICATION	6.748790320784335E-7	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999898063780343	WITHOUT_CLASSIFICATION	1.0193621965774247E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999984139704118	WITHOUT_CLASSIFICATION	1.5860295882994078E-6	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999914767861575	WITHOUT_CLASSIFICATION	8.523213842480757E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999868265700487	WITHOUT_CLASSIFICATION	1.317342995132874E-5	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999980635787614	WITHOUT_CLASSIFICATION	1.936421238595731E-6	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999945524398227	WITHOUT_CLASSIFICATION	5.44756017732839E-6	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999975641142709	WITHOUT_CLASSIFICATION	2.435885729142223E-6	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999930499525627	WITHOUT_CLASSIFICATION	6.950047437294189E-6	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999881998649963	WITHOUT_CLASSIFICATION	1.1800135003654983E-5	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999975850772026	WITHOUT_CLASSIFICATION	2.4149227974388016E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9997340952282869	WITHOUT_CLASSIFICATION	2.659047717131332E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999358621912612	WITHOUT_CLASSIFICATION	6.413780873885122E-5	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9999991931092947	WITHOUT_CLASSIFICATION	8.068907051977338E-7	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999941708291513	WITHOUT_CLASSIFICATION	5.829170848730039E-6	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9999936571578304	WITHOUT_CLASSIFICATION	6.342842169621388E-6	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999980430387767	WITHOUT_CLASSIFICATION	1.956961223252638E-6	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999998746866355	WITHOUT_CLASSIFICATION	1.2531336443350943E-7	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999999263078224	WITHOUT_CLASSIFICATION	7.369217768549249E-8	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999981891329704	WITHOUT_CLASSIFICATION	1.810867029438264E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999986914215002	WITHOUT_CLASSIFICATION	1.3085784996917753E-6	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9999996831847756	WITHOUT_CLASSIFICATION	3.1681522443687597E-7	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999966668027591	WITHOUT_CLASSIFICATION	3.333197240965238E-6	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999750330703	WITHOUT_CLASSIFICATION	2.4966929680400253E-8	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999999147798939	WITHOUT_CLASSIFICATION	8.522010601120525E-8	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999998960381681	WITHOUT_CLASSIFICATION	1.0396183192247004E-7	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999962600119898	WITHOUT_CLASSIFICATION	3.73998801011792E-6	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999998294290827	WITHOUT_CLASSIFICATION	1.7057091723461073E-7	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999999329440054	WITHOUT_CLASSIFICATION	6.705599464787216E-8	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999998286543288	WITHOUT_CLASSIFICATION	1.7134567116011448E-7	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999995732680143	WITHOUT_CLASSIFICATION	4.267319858003564E-7	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999871260995246	WITHOUT_CLASSIFICATION	1.2873900475433554E-5	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999694656695021	WITHOUT_CLASSIFICATION	3.053433049787014E-5	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999926467045902	WITHOUT_CLASSIFICATION	7.353295409838353E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9999821804003094	WITHOUT_CLASSIFICATION	1.7819599690610528E-5	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999998507838711	WITHOUT_CLASSIFICATION	1.492161288242644E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999760623111429	WITHOUT_CLASSIFICATION	2.3937688857097105E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999760623111429	WITHOUT_CLASSIFICATION	2.3937688857097105E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999641236086187	WITHOUT_CLASSIFICATION	3.5876391381223776E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999992342640005	WITHOUT_CLASSIFICATION	7.657359995670986E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999893917365263	WITHOUT_CLASSIFICATION	1.0608263473668763E-5	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999890212637663	WITHOUT_CLASSIFICATION	1.0978736233694465E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999991586090886	WITHOUT_CLASSIFICATION	8.413909113453649E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999991586090886	WITHOUT_CLASSIFICATION	8.413909113453649E-7	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999985599866102	WITHOUT_CLASSIFICATION	1.4400133898570285E-6	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.999967908370029	WITHOUT_CLASSIFICATION	3.209162997095395E-5	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999996880682416	WITHOUT_CLASSIFICATION	3.119317584485894E-7	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999990478629488	WITHOUT_CLASSIFICATION	9.521370513125996E-7	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999995796655463	WITHOUT_CLASSIFICATION	4.203344536914748E-7	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.999999944541307	WITHOUT_CLASSIFICATION	5.545869298922184E-8	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999989407223123	WITHOUT_CLASSIFICATION	1.0592776876028217E-6	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999997532152382	WITHOUT_CLASSIFICATION	2.4678476188543816E-7	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.999984646854561	WITHOUT_CLASSIFICATION	1.5353145438971966E-5	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999971718838284	WITHOUT_CLASSIFICATION	2.8281161715314462E-6	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999941885143105	WITHOUT_CLASSIFICATION	5.81148568950411E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999787977453204	WITHOUT_CLASSIFICATION	2.1202254679659548E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999643104799804	WITHOUT_CLASSIFICATION	3.568952001960821E-5	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999992116614974	WITHOUT_CLASSIFICATION	7.883385026656425E-7	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999506975545663	WITHOUT_CLASSIFICATION	4.930244543380538E-5	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999891973123531	WITHOUT_CLASSIFICATION	1.0802687646762234E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999994882972545	WITHOUT_CLASSIFICATION	5.117027455072519E-7	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999994882972545	WITHOUT_CLASSIFICATION	5.117027455072519E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.999999378152436	WITHOUT_CLASSIFICATION	6.21847563973621E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.999999378152436	WITHOUT_CLASSIFICATION	6.21847563973621E-7	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.999999614054501	WITHOUT_CLASSIFICATION	3.8594549896912307E-7	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999908236485763	WITHOUT_CLASSIFICATION	9.176351423772247E-6	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999976748475039	WITHOUT_CLASSIFICATION	2.3251524960642613E-6	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999999271632587	WITHOUT_CLASSIFICATION	7.283674127529441E-8	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999997734103983	WITHOUT_CLASSIFICATION	2.2658960182952356E-7	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999873007728791	WITHOUT_CLASSIFICATION	1.2699227120930719E-5	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999806688159854	WITHOUT_CLASSIFICATION	1.9331184014718466E-5	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999787977453204	WITHOUT_CLASSIFICATION	2.1202254679659548E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999643104799804	WITHOUT_CLASSIFICATION	3.568952001960821E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999506975545663	WITHOUT_CLASSIFICATION	4.930244543380538E-5	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999967224437135	WITHOUT_CLASSIFICATION	3.2775562864813686E-6	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999993397274807	WITHOUT_CLASSIFICATION	6.602725192868199E-7	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.999999907969749	WITHOUT_CLASSIFICATION	9.203025089419851E-8	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999514877601132	WITHOUT_CLASSIFICATION	4.8512239886815916E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999998644066598	WITHOUT_CLASSIFICATION	1.355933402026628E-7	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999974299785404	WITHOUT_CLASSIFICATION	2.5700214596828936E-6	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999968273577919	WITHOUT_CLASSIFICATION	3.172642208139123E-6	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999964671620509	WITHOUT_CLASSIFICATION	3.532837949016382E-6	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9998326636064845	WITHOUT_CLASSIFICATION	1.673363935155988E-4	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999999202701415	WITHOUT_CLASSIFICATION	7.972985858511252E-8	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999983088528999	WITHOUT_CLASSIFICATION	1.6911471001721018E-6	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.999954051482558	WITHOUT_CLASSIFICATION	4.5948517441990244E-5	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.999990656766629	WITHOUT_CLASSIFICATION	9.343233371078091E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9999954136213823	WITHOUT_CLASSIFICATION	4.586378617712615E-6	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9997289335635805	WITHOUT_CLASSIFICATION	2.710664364195459E-4	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999902476699275	WITHOUT_CLASSIFICATION	9.752330072587119E-6	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999941092243139	WITHOUT_CLASSIFICATION	5.89077568605361E-6	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999897003146963	WITHOUT_CLASSIFICATION	1.0299685303654801E-5	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999842578548555	WITHOUT_CLASSIFICATION	1.574214514460682E-5	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999987330867731	WITHOUT_CLASSIFICATION	1.2669132268917224E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999994050203119	WITHOUT_CLASSIFICATION	5.94979688030993E-7	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999944768613039	WITHOUT_CLASSIFICATION	5.523138695948948E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999955890847512	WITHOUT_CLASSIFICATION	4.4109152488036825E-6	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999999386758001	WITHOUT_CLASSIFICATION	6.132419988848844E-8	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999998251816108	WITHOUT_CLASSIFICATION	1.7481838917594227E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.999999872443114	WITHOUT_CLASSIFICATION	1.2755688608485668E-7	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999993751054164	WITHOUT_CLASSIFICATION	6.248945835859298E-7	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999997446787291	WITHOUT_CLASSIFICATION	2.553212708820161E-7	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.999998152600898	WITHOUT_CLASSIFICATION	1.8473991019691695E-6	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999954696311669	WITHOUT_CLASSIFICATION	4.5303688330737E-6	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999974911865285	WITHOUT_CLASSIFICATION	2.508813471534415E-6	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999947739287973	WITHOUT_CLASSIFICATION	5.226071202665253E-6	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999997942438791	WITHOUT_CLASSIFICATION	2.0575612088212498E-7	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999996713063096	WITHOUT_CLASSIFICATION	3.286936904380455E-7	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.999999417383426	WITHOUT_CLASSIFICATION	5.826165739638282E-7	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999996263041497	WITHOUT_CLASSIFICATION	3.736958502644711E-7	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999976733305213	WITHOUT_CLASSIFICATION	2.326669478810266E-6	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999994421736027	WITHOUT_CLASSIFICATION	5.578263972353741E-7	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999717419921271	WITHOUT_CLASSIFICATION	2.825800787295027E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999970002888121	WITHOUT_CLASSIFICATION	2.999711187903954E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999994080456944	WITHOUT_CLASSIFICATION	5.919543055305513E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999893917365263	WITHOUT_CLASSIFICATION	1.0608263473668763E-5	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999976733305213	WITHOUT_CLASSIFICATION	2.326669478810266E-6	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999832767034893	WITHOUT_CLASSIFICATION	1.672329651078546E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999992345154383	WITHOUT_CLASSIFICATION	7.654845616985025E-7	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999981198994702	WITHOUT_CLASSIFICATION	1.8801005298915082E-6	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999839493433915	WITHOUT_CLASSIFICATION	1.605065660852682E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999839493433915	WITHOUT_CLASSIFICATION	1.605065660852682E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999995316456326	WITHOUT_CLASSIFICATION	4.683543674390556E-7	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.99999984868702	WITHOUT_CLASSIFICATION	1.5131298006409975E-7	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999980950067691	WITHOUT_CLASSIFICATION	1.9049932309071233E-6	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999995665076471	WITHOUT_CLASSIFICATION	4.3349235288082295E-7	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999996490671993	WITHOUT_CLASSIFICATION	3.50932800680667E-7	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999741002414593	WITHOUT_CLASSIFICATION	2.5899758540719278E-5	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999999845088942	WITHOUT_CLASSIFICATION	1.549110591358707E-8	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999954923762251	WITHOUT_CLASSIFICATION	4.507623774861993E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999974574338193	WITHOUT_CLASSIFICATION	2.5425661806259236E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999974574338193	WITHOUT_CLASSIFICATION	2.5425661806259236E-6	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.999997454836615	WITHOUT_CLASSIFICATION	2.5451633851026E-6	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999986000676799	WITHOUT_CLASSIFICATION	1.399932320069552E-6	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999998664440327	WITHOUT_CLASSIFICATION	1.33555967264496E-7	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999798435508515	WITHOUT_CLASSIFICATION	2.015644914852877E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999868606816198	WITHOUT_CLASSIFICATION	1.3139318380221017E-5	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999991773738904	WITHOUT_CLASSIFICATION	8.226261096169167E-7	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999999867250793	WITHOUT_CLASSIFICATION	1.3274920757960386E-8	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999996828333271	WITHOUT_CLASSIFICATION	3.1716667282099836E-7	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999976007871417	WITHOUT_CLASSIFICATION	2.3992128582916683E-6	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999966577484001	WITHOUT_CLASSIFICATION	3.342251599866038E-6	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999974479595641	WITHOUT_CLASSIFICATION	2.552040435916011E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.999993296191921	WITHOUT_CLASSIFICATION	6.7038080789275874E-6	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999894396957592	WITHOUT_CLASSIFICATION	1.0560304240876225E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999536292058433	WITHOUT_CLASSIFICATION	4.637079415678633E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999536292058433	WITHOUT_CLASSIFICATION	4.637079415678633E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999901333642002	WITHOUT_CLASSIFICATION	9.86663579980252E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999981209215831	WITHOUT_CLASSIFICATION	1.8790784168440613E-6	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999977051374368	WITHOUT_CLASSIFICATION	2.294862563187647E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999999505624324	WITHOUT_CLASSIFICATION	4.943756763553261E-8	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999991288381724	WITHOUT_CLASSIFICATION	8.711618275395916E-7	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999995511339168	WITHOUT_CLASSIFICATION	4.488660832451694E-7	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999978555057922	WITHOUT_CLASSIFICATION	2.144494207808675E-6	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999991685775601	WITHOUT_CLASSIFICATION	8.31422439938877E-7	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999996173982799	WITHOUT_CLASSIFICATION	3.8260172008031486E-7	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999917770750655	WITHOUT_CLASSIFICATION	8.222924934554232E-6	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999847476784144	WITHOUT_CLASSIFICATION	1.5252321585704703E-5	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999981794002386	WITHOUT_CLASSIFICATION	1.8205997613848273E-6	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999990613809584	WITHOUT_CLASSIFICATION	9.386190416149423E-7	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999988100322111	WITHOUT_CLASSIFICATION	1.1899677888505364E-6	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.999997690200594	WITHOUT_CLASSIFICATION	2.3097994060588845E-6	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.99999799734559	WITHOUT_CLASSIFICATION	2.002654410009399E-6	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999998217794466	WITHOUT_CLASSIFICATION	1.7822055336771432E-7	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.999994245321861	WITHOUT_CLASSIFICATION	5.75467813901131E-6	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.999963399995456	WITHOUT_CLASSIFICATION	3.660000454394259E-5	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999973913145227	WITHOUT_CLASSIFICATION	2.608685477319459E-6	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999731505783507	WITHOUT_CLASSIFICATION	2.6849421649366325E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999970457477747	WITHOUT_CLASSIFICATION	2.9542522252933496E-6	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999987984441348	WITHOUT_CLASSIFICATION	1.2015558652914064E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9999974507929574	WITHOUT_CLASSIFICATION	2.549207042558446E-6	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.9909018100060518	WITHOUT_CLASSIFICATION	0.009098189993948149	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9999992264788162	WITHOUT_CLASSIFICATION	7.735211836742482E-7	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999995169642727	WITHOUT_CLASSIFICATION	4.830357274235141E-7	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999988956365149	WITHOUT_CLASSIFICATION	1.1043634851567646E-6	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999975187865475	WITHOUT_CLASSIFICATION	2.481213452481269E-6	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999881561821075	WITHOUT_CLASSIFICATION	1.1843817892481374E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.999998594162647	WITHOUT_CLASSIFICATION	1.405837352974422E-6	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999957756561273	WITHOUT_CLASSIFICATION	4.224343872623987E-6	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.999994382184299	WITHOUT_CLASSIFICATION	5.6178157010043325E-6	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999995169684733	WITHOUT_CLASSIFICATION	4.830315265670407E-7	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.999999424638995	WITHOUT_CLASSIFICATION	5.753610050216708E-7	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999997694729038	WITHOUT_CLASSIFICATION	2.3052709612134542E-7	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999983885504901	WITHOUT_CLASSIFICATION	1.6114495098215024E-6	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999982126589789	WITHOUT_CLASSIFICATION	1.78734102103503E-6	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.999997590319846	WITHOUT_CLASSIFICATION	2.409680154035679E-6	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999985059890717	WITHOUT_CLASSIFICATION	1.494010928231407E-6	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999848865827976	WITHOUT_CLASSIFICATION	1.5113417202400318E-5	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999823457933714	WITHOUT_CLASSIFICATION	1.7654206628572712E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999918508254936	WITHOUT_CLASSIFICATION	8.149174506438032E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999983112901409	WITHOUT_CLASSIFICATION	1.6887098589724595E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999742802644701	WITHOUT_CLASSIFICATION	2.5719735529897608E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999991724816171	WITHOUT_CLASSIFICATION	8.275183829183458E-7	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999986580076302	WITHOUT_CLASSIFICATION	1.3419923697470032E-6	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999875394826	WITHOUT_CLASSIFICATION	1.246051735432338E-8	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999983849904313	WITHOUT_CLASSIFICATION	1.615009568659568E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999984139704118	WITHOUT_CLASSIFICATION	1.5860295882994078E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999984139704118	WITHOUT_CLASSIFICATION	1.5860295882994078E-6	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999998604433606	WITHOUT_CLASSIFICATION	1.3955663940324496E-7	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999677843563051	WITHOUT_CLASSIFICATION	3.2215643694992425E-5	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999997755557727	WITHOUT_CLASSIFICATION	2.2444422724490136E-7	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9999919603029288	WITHOUT_CLASSIFICATION	8.039697071122545E-6	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999167176099	WITHOUT_CLASSIFICATION	8.328239013925385E-8	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999952395210339	WITHOUT_CLASSIFICATION	4.760478966202343E-6	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999997496413289	WITHOUT_CLASSIFICATION	2.5035867119551794E-7	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999994937447338	WITHOUT_CLASSIFICATION	5.062552661945525E-7	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999990899992888	WITHOUT_CLASSIFICATION	9.10000711264793E-7	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999993928078017	WITHOUT_CLASSIFICATION	6.071921982990994E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999684682923203	WITHOUT_CLASSIFICATION	3.153170767968002E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999684682923203	WITHOUT_CLASSIFICATION	3.153170767968002E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999684682923203	WITHOUT_CLASSIFICATION	3.153170767968002E-5	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999998715891815	WITHOUT_CLASSIFICATION	1.284108186606521E-7	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.999994861158687	WITHOUT_CLASSIFICATION	5.138841313061215E-6	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999662908833523	WITHOUT_CLASSIFICATION	3.37091166476686E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999946125897227	WITHOUT_CLASSIFICATION	5.3874102772754045E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999946125897227	WITHOUT_CLASSIFICATION	5.3874102772754045E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999997825966099	WITHOUT_CLASSIFICATION	2.1740339005438048E-7	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999958320742329	WITHOUT_CLASSIFICATION	4.167925767037763E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999896368361821	WITHOUT_CLASSIFICATION	1.0363163817880138E-5	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.999998342329839	WITHOUT_CLASSIFICATION	1.6576701609567273E-6	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999992077090352	WITHOUT_CLASSIFICATION	7.922909648667005E-7	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999769713799799	WITHOUT_CLASSIFICATION	2.302862002018584E-5	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999953671795835	WITHOUT_CLASSIFICATION	4.632820416527517E-6	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999987263266606	WITHOUT_CLASSIFICATION	1.2736733394082798E-6	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999907653809114	WITHOUT_CLASSIFICATION	9.234619088715481E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999976520704256	WITHOUT_CLASSIFICATION	2.347929574500547E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999976520704256	WITHOUT_CLASSIFICATION	2.347929574500547E-6	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999852342488255	WITHOUT_CLASSIFICATION	1.476575117451947E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999943281042335	WITHOUT_CLASSIFICATION	5.671895766423497E-6	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999986816273576	WITHOUT_CLASSIFICATION	1.3183726424422395E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999969776783746	WITHOUT_CLASSIFICATION	3.0223216253531084E-6	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999986437829967	WITHOUT_CLASSIFICATION	1.3562170031883227E-6	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999891273766434	WITHOUT_CLASSIFICATION	1.0872623356704488E-5	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999826329174303	WITHOUT_CLASSIFICATION	1.736708256971586E-5	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.999983207100566	WITHOUT_CLASSIFICATION	1.6792899434022098E-5	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999930670671096	WITHOUT_CLASSIFICATION	6.93293289042519E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999884283138891	WITHOUT_CLASSIFICATION	1.1571686110861376E-5	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999985760191579	WITHOUT_CLASSIFICATION	1.423980842033939E-6	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.999987166691261	WITHOUT_CLASSIFICATION	1.2833308739042038E-5	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999864947371147	WITHOUT_CLASSIFICATION	1.3505262885467427E-5	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999984466143328	WITHOUT_CLASSIFICATION	1.5533856673117755E-6	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.999935530309246	WITHOUT_CLASSIFICATION	6.446969075404901E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999996503975418	WITHOUT_CLASSIFICATION	3.4960245821089837E-7	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999958199526403	WITHOUT_CLASSIFICATION	4.180047359679045E-6	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999995020859055	WITHOUT_CLASSIFICATION	4.979140945323605E-7	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999869712684746	WITHOUT_CLASSIFICATION	1.3028731525442726E-5	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999992826266556	WITHOUT_CLASSIFICATION	7.173733443145132E-7	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9999858077706464	WITHOUT_CLASSIFICATION	1.4192229353554632E-5	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999990364248478	WITHOUT_CLASSIFICATION	9.635751522165339E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999954576596175	WITHOUT_CLASSIFICATION	4.54234038252979E-6	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999989834109722	WITHOUT_CLASSIFICATION	1.0165890278506718E-6	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999852378206349	WITHOUT_CLASSIFICATION	1.4762179365224002E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999992677025368	WITHOUT_CLASSIFICATION	7.322974631690793E-7	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999981253580098	WITHOUT_CLASSIFICATION	1.8746419902074457E-6	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999745462528434	WITHOUT_CLASSIFICATION	2.5453747156529797E-5	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9999910195114964	WITHOUT_CLASSIFICATION	8.98048850369704E-6	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.999987468605233	WITHOUT_CLASSIFICATION	1.2531394767092958E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999743233119852	WITHOUT_CLASSIFICATION	2.567668801473327E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999859123638914	WITHOUT_CLASSIFICATION	1.4087636108419937E-5	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999965537302413	WITHOUT_CLASSIFICATION	3.4462697585951284E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999743233119852	WITHOUT_CLASSIFICATION	2.567668801473327E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999698145411618	WITHOUT_CLASSIFICATION	3.0185458838155093E-5	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999989355733401	WITHOUT_CLASSIFICATION	1.0644266599154262E-6	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999745075227158	WITHOUT_CLASSIFICATION	2.54924772843391E-5	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9997080894406979	WITHOUT_CLASSIFICATION	2.9191055930216094E-4	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999810964027692	WITHOUT_CLASSIFICATION	1.890359723071231E-5	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.999997784508209	WITHOUT_CLASSIFICATION	2.21549179106548E-6	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999951898788723	WITHOUT_CLASSIFICATION	4.810121127744829E-6	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999549018869301	WITHOUT_CLASSIFICATION	4.50981130699044E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999708451595454	WITHOUT_CLASSIFICATION	2.9154840454583162E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999272472521551	WITHOUT_CLASSIFICATION	7.275274784492928E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9997961630397074	WITHOUT_CLASSIFICATION	2.038369602925143E-4	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999037014408182	WITHOUT_CLASSIFICATION	9.629855918183525E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9944432150421858	WITHOUT_CLASSIFICATION	0.005556784957814194	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9978981129191145	WITHOUT_CLASSIFICATION	0.002101887080885542	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999661061283664	WITHOUT_CLASSIFICATION	3.389387163361437E-5	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9998852708430064	WITHOUT_CLASSIFICATION	1.147291569936812E-4	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999339522390802	WITHOUT_CLASSIFICATION	6.60477609197132E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999767536283208	WITHOUT_CLASSIFICATION	2.3246371679150237E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999707896024173	WITHOUT_CLASSIFICATION	2.9210397582751623E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999635996872	WITHOUT_CLASSIFICATION	3.640031280001443E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9997253605341487	WITHOUT_CLASSIFICATION	2.746394658512642E-4	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999309128211588	WITHOUT_CLASSIFICATION	6.908717884127933E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999760482254338	WITHOUT_CLASSIFICATION	2.3951774566158782E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999866555177614	WITHOUT_CLASSIFICATION	1.3344482238529184E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999823162575332	WITHOUT_CLASSIFICATION	1.7683742466807894E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999989032431037	WITHOUT_CLASSIFICATION	1.096756896399709E-6	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999725204023358	WITHOUT_CLASSIFICATION	2.7479597664229846E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999983481270565	WITHOUT_CLASSIFICATION	1.6518729435565835E-6	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999871360432233	WITHOUT_CLASSIFICATION	1.2863956776673792E-5	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999849055476625	WITHOUT_CLASSIFICATION	1.5094452337364097E-5	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999952622902807	WITHOUT_CLASSIFICATION	4.737709719357316E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9997558417802058	WITHOUT_CLASSIFICATION	2.441582197940876E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9930624216951934	WITHOUT_CLASSIFICATION	0.006937578304806652	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999985321217688	WITHOUT_CLASSIFICATION	1.467878231181011E-6	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999946848519927	WITHOUT_CLASSIFICATION	5.315148007205599E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999892972038799	WITHOUT_CLASSIFICATION	1.0702796120027033E-5	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999948934207104	WITHOUT_CLASSIFICATION	5.106579289583663E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9998780960628426	WITHOUT_CLASSIFICATION	1.219039371573487E-4	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999909833472869	WITHOUT_CLASSIFICATION	9.016652713131238E-6	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999925714589445	WITHOUT_CLASSIFICATION	7.42854105549679E-6	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999924393153975	WITHOUT_CLASSIFICATION	7.56068460243017E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999926463842742	WITHOUT_CLASSIFICATION	7.3536157258656215E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999934519248006	WITHOUT_CLASSIFICATION	6.548075199467776E-6	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999961242241302	WITHOUT_CLASSIFICATION	3.8757758698497806E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999957243185327	WITHOUT_CLASSIFICATION	4.275681467325612E-6	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999966307173164	WITHOUT_CLASSIFICATION	3.369282683643081E-6	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999925372136386	WITHOUT_CLASSIFICATION	7.462786361479456E-6	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999902288260029	WITHOUT_CLASSIFICATION	9.771173997137616E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999992793374982	WITHOUT_CLASSIFICATION	7.206625017710907E-7	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999976358371039	WITHOUT_CLASSIFICATION	2.364162896138163E-6	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999619207175499	WITHOUT_CLASSIFICATION	3.80792824502787E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999644990330716	WITHOUT_CLASSIFICATION	3.550096692843801E-5	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999998243625442	WITHOUT_CLASSIFICATION	1.7563745580210148E-7	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999992793374982	WITHOUT_CLASSIFICATION	7.206625017710907E-7	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9719583965613064	WITHOUT_CLASSIFICATION	0.028041603438693444	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9719583965613064	WITHOUT_CLASSIFICATION	0.028041603438693444	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999977049115117	WITHOUT_CLASSIFICATION	2.295088488201098E-6	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999846902574623	WITHOUT_CLASSIFICATION	1.530974253779049E-5	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999924254480343	WITHOUT_CLASSIFICATION	7.574551965665526E-6	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999994887088609	WITHOUT_CLASSIFICATION	5.11291139154007E-7	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999997332171634	WITHOUT_CLASSIFICATION	2.6678283661170546E-7	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999846306556384	WITHOUT_CLASSIFICATION	1.5369344361655603E-5	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999931430903481	WITHOUT_CLASSIFICATION	6.856909651874408E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.9375796650879831	DEFECT	0.0624203349120169	WITHOUT_CLASSIFICATION
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999999160610539	WITHOUT_CLASSIFICATION	8.39389460513846E-8	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9999784015734285	WITHOUT_CLASSIFICATION	2.1598426571425205E-5	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999963696947	WITHOUT_CLASSIFICATION	3.6303052015719622E-9	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999971491847773	WITHOUT_CLASSIFICATION	2.8508152226891797E-6	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999161619950003	WITHOUT_CLASSIFICATION	8.383800499958982E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999976809493525	WITHOUT_CLASSIFICATION	2.319050647581426E-6	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9973365983609445	WITHOUT_CLASSIFICATION	0.002663401639055473	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9977622757908635	WITHOUT_CLASSIFICATION	0.0022377242091365644	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999962844862018	WITHOUT_CLASSIFICATION	3.7155137982603713E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998896886672268	WITHOUT_CLASSIFICATION	1.1031133277324457E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998896886672268	WITHOUT_CLASSIFICATION	1.1031133277324457E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998896886672268	WITHOUT_CLASSIFICATION	1.1031133277324457E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998896886672268	WITHOUT_CLASSIFICATION	1.1031133277324457E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998896886672268	WITHOUT_CLASSIFICATION	1.1031133277324457E-4	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999907162541464	WITHOUT_CLASSIFICATION	9.283745853659967E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999824155776355	WITHOUT_CLASSIFICATION	1.758442236453088E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998769773997657	WITHOUT_CLASSIFICATION	1.2302260023424385E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999940407296724	WITHOUT_CLASSIFICATION	5.959270327696065E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999788809978915	WITHOUT_CLASSIFICATION	2.1119002108538664E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999968821349373	WITHOUT_CLASSIFICATION	3.1178650627642943E-6	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999835952284707	WITHOUT_CLASSIFICATION	1.6404771529251617E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999950915019424	WITHOUT_CLASSIFICATION	4.908498057567659E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999978447155675	WITHOUT_CLASSIFICATION	2.1552844325446593E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999917941415811	WITHOUT_CLASSIFICATION	8.205858418885223E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999904533372139	WITHOUT_CLASSIFICATION	9.546662786066262E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999898127033087	WITHOUT_CLASSIFICATION	1.0187296691380715E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999912944566384	WITHOUT_CLASSIFICATION	8.705543361637663E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999902783548579	WITHOUT_CLASSIFICATION	9.721645142072406E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999901835371455	WITHOUT_CLASSIFICATION	9.816462854493057E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999914131649015	WITHOUT_CLASSIFICATION	8.58683509856646E-6	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.999991249241093	WITHOUT_CLASSIFICATION	8.750758907078909E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.999990372820377	WITHOUT_CLASSIFICATION	9.627179623078502E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999895401877551	WITHOUT_CLASSIFICATION	1.045981224484212E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999902681292756	WITHOUT_CLASSIFICATION	9.731870724397756E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.99999036955636	WITHOUT_CLASSIFICATION	9.630443640019468E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999877515391128	WITHOUT_CLASSIFICATION	1.2248460887269779E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999905900726913	WITHOUT_CLASSIFICATION	9.409927308726492E-6	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999904297054091	WITHOUT_CLASSIFICATION	9.570294590957444E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999920704711385	WITHOUT_CLASSIFICATION	7.929528861494233E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999895027584068	WITHOUT_CLASSIFICATION	1.0497241593185371E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999905007857417	WITHOUT_CLASSIFICATION	9.499214258249746E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999902275264394	WITHOUT_CLASSIFICATION	9.772473560634802E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999892884484932	WITHOUT_CLASSIFICATION	1.0711551506852972E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999920094195064	WITHOUT_CLASSIFICATION	7.99058049359474E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999887291560194	WITHOUT_CLASSIFICATION	1.1270843980537852E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999885656558817	WITHOUT_CLASSIFICATION	1.143434411823705E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999878079227997	WITHOUT_CLASSIFICATION	1.2192077200282167E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999873812239213	WITHOUT_CLASSIFICATION	1.2618776078737296E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999895691286435	WITHOUT_CLASSIFICATION	1.0430871356684306E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999874207776104	WITHOUT_CLASSIFICATION	1.2579222389716074E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999877381940788	WITHOUT_CLASSIFICATION	1.2261805921138417E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999865073733726	WITHOUT_CLASSIFICATION	1.349262662737388E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999901001230964	WITHOUT_CLASSIFICATION	9.899876903618739E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999874290822421	WITHOUT_CLASSIFICATION	1.2570917757817611E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999904077057536	WITHOUT_CLASSIFICATION	9.592294246276639E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999885992600772	WITHOUT_CLASSIFICATION	1.1400739922834037E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999895041975924	WITHOUT_CLASSIFICATION	1.049580240768084E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999893164120432	WITHOUT_CLASSIFICATION	1.0683587956676294E-5	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999909176579826	WITHOUT_CLASSIFICATION	9.082342017393685E-6	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999894671756051	WITHOUT_CLASSIFICATION	1.0532824394879487E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999892998287679	WITHOUT_CLASSIFICATION	1.0700171232101409E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999916396674868	WITHOUT_CLASSIFICATION	8.360332513225992E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999891299560523	WITHOUT_CLASSIFICATION	1.0870043947628205E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999904133385198	WITHOUT_CLASSIFICATION	9.586661480234687E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998769773997657	WITHOUT_CLASSIFICATION	1.2302260023424385E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999883191875304	WITHOUT_CLASSIFICATION	1.1680812469620703E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999901469549117	WITHOUT_CLASSIFICATION	9.853045088248465E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999867558188293	WITHOUT_CLASSIFICATION	1.3244181170751458E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999862922988725	WITHOUT_CLASSIFICATION	1.3707701127596086E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999858304641088	WITHOUT_CLASSIFICATION	1.4169535891284858E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999886076683149	WITHOUT_CLASSIFICATION	1.1392331685008263E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.999985140129453	WITHOUT_CLASSIFICATION	1.4859870546851069E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999857455946172	WITHOUT_CLASSIFICATION	1.4254405382719449E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999847628696423	WITHOUT_CLASSIFICATION	1.5237130357811182E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999867465093011	WITHOUT_CLASSIFICATION	1.3253490698827549E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999894487894828	WITHOUT_CLASSIFICATION	1.0551210517255359E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999895821458497	WITHOUT_CLASSIFICATION	1.0417854150460422E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999864558735797	WITHOUT_CLASSIFICATION	1.3544126420403742E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999872004560284	WITHOUT_CLASSIFICATION	1.2799543971480272E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999870303082337	WITHOUT_CLASSIFICATION	1.2969691766210255E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999909939272256	WITHOUT_CLASSIFICATION	9.006072774447958E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999886020820663	WITHOUT_CLASSIFICATION	1.1397917933732281E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999890921383849	WITHOUT_CLASSIFICATION	1.0907861615006661E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999875513952657	WITHOUT_CLASSIFICATION	1.2448604734305133E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999893599627073	WITHOUT_CLASSIFICATION	1.0640037292696591E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999858492133049	WITHOUT_CLASSIFICATION	1.4150786695107246E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999872817937067	WITHOUT_CLASSIFICATION	1.2718206293487515E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999874098482403	WITHOUT_CLASSIFICATION	1.259015175960125E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999887635692122	WITHOUT_CLASSIFICATION	1.1236430787896327E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.999987446901988	WITHOUT_CLASSIFICATION	1.2553098011878605E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.999989371354107	WITHOUT_CLASSIFICATION	1.0628645892990683E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999888384866875	WITHOUT_CLASSIFICATION	1.1161513312522903E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999872339281809	WITHOUT_CLASSIFICATION	1.2766071819101768E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999909938005699	WITHOUT_CLASSIFICATION	9.006199430118466E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999899137718761	WITHOUT_CLASSIFICATION	1.0086228123897566E-5	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999920573288323	WITHOUT_CLASSIFICATION	7.942671167735666E-6	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999888021726128	WITHOUT_CLASSIFICATION	1.1197827387230579E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999898016297559	WITHOUT_CLASSIFICATION	1.0198370244065397E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999903224921866	WITHOUT_CLASSIFICATION	9.677507813479944E-6	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999881996093595	WITHOUT_CLASSIFICATION	1.1800390640646469E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999901351049075	WITHOUT_CLASSIFICATION	9.864895092511127E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999879579700193	WITHOUT_CLASSIFICATION	1.2042029980757649E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999859900499637	WITHOUT_CLASSIFICATION	1.400995003634885E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.999986816700841	WITHOUT_CLASSIFICATION	1.318329915905102E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999879507113912	WITHOUT_CLASSIFICATION	1.2049288608659125E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999868710272142	WITHOUT_CLASSIFICATION	1.3128972785835507E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999865377105431	WITHOUT_CLASSIFICATION	1.346228945684212E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999903615350864	WITHOUT_CLASSIFICATION	9.638464913748175E-6	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999867432915118	WITHOUT_CLASSIFICATION	1.3256708488096835E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999913139091287	WITHOUT_CLASSIFICATION	8.686090871378108E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999901980800179	WITHOUT_CLASSIFICATION	9.801919982179238E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999892320536871	WITHOUT_CLASSIFICATION	1.0767946312978662E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999874745351106	WITHOUT_CLASSIFICATION	1.2525464889445402E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999867022014769	WITHOUT_CLASSIFICATION	1.3297798523016276E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999911773796135	WITHOUT_CLASSIFICATION	8.822620386427454E-6	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999896852728293	WITHOUT_CLASSIFICATION	1.031472717081358E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999909565201697	WITHOUT_CLASSIFICATION	9.043479830344264E-6	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999908624724435	WITHOUT_CLASSIFICATION	9.137527556470904E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.999992079347866	WITHOUT_CLASSIFICATION	7.920652133856997E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.999992637770534	WITHOUT_CLASSIFICATION	7.3622294659748714E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999907328747407	WITHOUT_CLASSIFICATION	9.267125259350524E-6	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999916499895184	WITHOUT_CLASSIFICATION	8.350010481615741E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999905956187187	WITHOUT_CLASSIFICATION	9.404381281195412E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999893390326946	WITHOUT_CLASSIFICATION	1.0660967305404753E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.999990142632999	WITHOUT_CLASSIFICATION	9.857367000922215E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999911708120076	WITHOUT_CLASSIFICATION	8.829187992488765E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999900454818068	WITHOUT_CLASSIFICATION	9.95451819313151E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999912345501936	WITHOUT_CLASSIFICATION	8.765449806363536E-6	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999901246320111	WITHOUT_CLASSIFICATION	9.875367988919206E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.999990337594717	WITHOUT_CLASSIFICATION	9.662405283100738E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.999989391315004	WITHOUT_CLASSIFICATION	1.0608684996026224E-5	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999910946080354	WITHOUT_CLASSIFICATION	8.905391964634046E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999886570299674	WITHOUT_CLASSIFICATION	1.134297003260867E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999895122747434	WITHOUT_CLASSIFICATION	1.0487725256541541E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.999990425267826	WITHOUT_CLASSIFICATION	9.574732173961388E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999895968473133	WITHOUT_CLASSIFICATION	1.0403152686792741E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999884705037951	WITHOUT_CLASSIFICATION	1.1529496204739096E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999889190064137	WITHOUT_CLASSIFICATION	1.1080993586193548E-5	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999890618244164	WITHOUT_CLASSIFICATION	1.0938175583598063E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.999988917340569	WITHOUT_CLASSIFICATION	1.1082659430955662E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999889787113485	WITHOUT_CLASSIFICATION	1.1021288651573618E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999919130175641	WITHOUT_CLASSIFICATION	8.086982435986713E-6	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999897557323201	WITHOUT_CLASSIFICATION	1.0244267679950482E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999885987408094	WITHOUT_CLASSIFICATION	1.1401259190578415E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999901538924421	WITHOUT_CLASSIFICATION	9.846107557945273E-6	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.999987140805588	WITHOUT_CLASSIFICATION	1.2859194411988329E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999900122259291	WITHOUT_CLASSIFICATION	9.987774070971137E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999882954274995	WITHOUT_CLASSIFICATION	1.1704572500449549E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999891637857489	WITHOUT_CLASSIFICATION	1.0836214251057851E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999845672902671	WITHOUT_CLASSIFICATION	1.5432709732908397E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999877632578515	WITHOUT_CLASSIFICATION	1.2236742148514023E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999865143801453	WITHOUT_CLASSIFICATION	1.3485619854732741E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999863293773237	WITHOUT_CLASSIFICATION	1.367062267640893E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999881349042099	WITHOUT_CLASSIFICATION	1.1865095789996505E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999879326955902	WITHOUT_CLASSIFICATION	1.2067304409844006E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999916074546085	WITHOUT_CLASSIFICATION	8.392545391589716E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999894591717489	WITHOUT_CLASSIFICATION	1.0540828251163093E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999884586064378	WITHOUT_CLASSIFICATION	1.1541393562209738E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999855555982922	WITHOUT_CLASSIFICATION	1.4444401707793768E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999909873044646	WITHOUT_CLASSIFICATION	9.012695535370414E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999902968860329	WITHOUT_CLASSIFICATION	9.703113967028945E-6	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999914040254936	WITHOUT_CLASSIFICATION	8.5959745064459E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999893178046647	WITHOUT_CLASSIFICATION	1.0682195335404736E-5	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999903151184755	WITHOUT_CLASSIFICATION	9.68488152458985E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.999990861277172	WITHOUT_CLASSIFICATION	9.138722828047886E-6	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.99998912103662	WITHOUT_CLASSIFICATION	1.0878963379990267E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999881540005995	WITHOUT_CLASSIFICATION	1.1845999400564258E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999900828282956	WITHOUT_CLASSIFICATION	9.917171704330633E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999891426306144	WITHOUT_CLASSIFICATION	1.0857369385495791E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999899794349281	WITHOUT_CLASSIFICATION	1.002056507188231E-5	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999902555333968	WITHOUT_CLASSIFICATION	9.744466603087035E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.99998858745072	WITHOUT_CLASSIFICATION	1.1412549280103918E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999873327956906	WITHOUT_CLASSIFICATION	1.266720430935113E-5	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999882880114566	WITHOUT_CLASSIFICATION	1.1711988543497052E-5	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999917070409411	WITHOUT_CLASSIFICATION	8.292959058893235E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999899903925451	WITHOUT_CLASSIFICATION	1.0009607454879916E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999865031916497	WITHOUT_CLASSIFICATION	1.3496808350229084E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999918498810347	WITHOUT_CLASSIFICATION	8.1501189652814E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999897305343347	WITHOUT_CLASSIFICATION	1.026946566529158E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999895736260599	WITHOUT_CLASSIFICATION	1.042637394009813E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999895729185804	WITHOUT_CLASSIFICATION	1.0427081419548316E-5	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.999988691481106	WITHOUT_CLASSIFICATION	1.1308518893934264E-5	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.999988387899485	WITHOUT_CLASSIFICATION	1.161210051504694E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999883837871368	WITHOUT_CLASSIFICATION	1.1616212863232087E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999899178697931	WITHOUT_CLASSIFICATION	1.0082130206908267E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999886350562259	WITHOUT_CLASSIFICATION	1.1364943773970724E-5	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999879748538346	WITHOUT_CLASSIFICATION	1.2025146165390529E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999881177967727	WITHOUT_CLASSIFICATION	1.1882203227228886E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999899925608966	WITHOUT_CLASSIFICATION	1.0007439103429301E-5	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.99998843567156	WITHOUT_CLASSIFICATION	1.1564328440013266E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999874450559242	WITHOUT_CLASSIFICATION	1.2554944075874953E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999893210137655	WITHOUT_CLASSIFICATION	1.0678986234441568E-5	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999866635134448	WITHOUT_CLASSIFICATION	1.333648655519816E-5	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999854886206815	WITHOUT_CLASSIFICATION	1.4511379318417986E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999892773286133	WITHOUT_CLASSIFICATION	1.0722671386646453E-5	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999901675895209	WITHOUT_CLASSIFICATION	9.83241047917802E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999900731228007	WITHOUT_CLASSIFICATION	9.926877199155166E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.999987302301739	WITHOUT_CLASSIFICATION	1.2697698260864084E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999889555840928	WITHOUT_CLASSIFICATION	1.1044415907074496E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999887848291464	WITHOUT_CLASSIFICATION	1.121517085344359E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999903883461551	WITHOUT_CLASSIFICATION	9.611653844946442E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999876356889563	WITHOUT_CLASSIFICATION	1.2364311043624305E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999874932473097	WITHOUT_CLASSIFICATION	1.250675269034038E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999873449363967	WITHOUT_CLASSIFICATION	1.26550636033251E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999794896028454	WITHOUT_CLASSIFICATION	2.051039715447074E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999829693876077	WITHOUT_CLASSIFICATION	1.703061239241494E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999877656416438	WITHOUT_CLASSIFICATION	1.2234358356250353E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999857334474841	WITHOUT_CLASSIFICATION	1.426655251597141E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999853712505077	WITHOUT_CLASSIFICATION	1.4628749492232677E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999910471273088	WITHOUT_CLASSIFICATION	8.952872691194749E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999889014130278	WITHOUT_CLASSIFICATION	1.10985869721599E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999890321530324	WITHOUT_CLASSIFICATION	1.0967846967624346E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.999985357745556	WITHOUT_CLASSIFICATION	1.464225444403392E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999859273341742	WITHOUT_CLASSIFICATION	1.4072665825750366E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999898131390469	WITHOUT_CLASSIFICATION	1.0186860953105475E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999877359416635	WITHOUT_CLASSIFICATION	1.2264058336598495E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999880289369588	WITHOUT_CLASSIFICATION	1.1971063041101918E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999876870360257	WITHOUT_CLASSIFICATION	1.2312963974212699E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999915435962202	WITHOUT_CLASSIFICATION	8.456403779789069E-6	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999907117053023	WITHOUT_CLASSIFICATION	9.288294697683948E-6	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.999987635387615	WITHOUT_CLASSIFICATION	1.2364612385049256E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.999988680996263	WITHOUT_CLASSIFICATION	1.1319003736948432E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999889123158634	WITHOUT_CLASSIFICATION	1.108768413653549E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999887433639364	WITHOUT_CLASSIFICATION	1.1256636063696087E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999868631783113	WITHOUT_CLASSIFICATION	1.3136821688717333E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999897986001882	WITHOUT_CLASSIFICATION	1.0201399811761178E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999889143678283	WITHOUT_CLASSIFICATION	1.108563217166256E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999888503145167	WITHOUT_CLASSIFICATION	1.1149685483265592E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999868059580959	WITHOUT_CLASSIFICATION	1.3194041904117177E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999868971012582	WITHOUT_CLASSIFICATION	1.3102898741793226E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999868645387788	WITHOUT_CLASSIFICATION	1.3135461221247928E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999895884086705	WITHOUT_CLASSIFICATION	1.0411591329587114E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999859911890254	WITHOUT_CLASSIFICATION	1.4008810974461273E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999859296586481	WITHOUT_CLASSIFICATION	1.4070341351900924E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999823513416035	WITHOUT_CLASSIFICATION	1.7648658396564076E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999874213532283	WITHOUT_CLASSIFICATION	1.2578646771728204E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.999984357825102	WITHOUT_CLASSIFICATION	1.5642174898069033E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999886272900741	WITHOUT_CLASSIFICATION	1.1372709925865147E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.99998655357443	WITHOUT_CLASSIFICATION	1.3446425569971635E-5	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999904686826324	WITHOUT_CLASSIFICATION	9.531317367607964E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.999987800949881	WITHOUT_CLASSIFICATION	1.2199050118891074E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999886777058469	WITHOUT_CLASSIFICATION	1.132229415301735E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999842462043469	WITHOUT_CLASSIFICATION	1.575379565309501E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999898492367914	WITHOUT_CLASSIFICATION	1.015076320872389E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999898682902895	WITHOUT_CLASSIFICATION	1.0131709710516142E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999871726127887	WITHOUT_CLASSIFICATION	1.282738721131453E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999858153833546	WITHOUT_CLASSIFICATION	1.4184616645376614E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999873672658579	WITHOUT_CLASSIFICATION	1.2632734142093046E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999896039699387	WITHOUT_CLASSIFICATION	1.039603006122592E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999872256593844	WITHOUT_CLASSIFICATION	1.2774340615765838E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999839769311605	WITHOUT_CLASSIFICATION	1.6023068839520265E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.999983860487215	WITHOUT_CLASSIFICATION	1.613951278510082E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999854885419329	WITHOUT_CLASSIFICATION	1.4511458066974465E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999870869823506	WITHOUT_CLASSIFICATION	1.2913017649306179E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999859810749017	WITHOUT_CLASSIFICATION	1.4018925098357687E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.999986792743031	WITHOUT_CLASSIFICATION	1.3207256968960351E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999882193917634	WITHOUT_CLASSIFICATION	1.1780608236632903E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999872117661527	WITHOUT_CLASSIFICATION	1.2788233847190883E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999881713234893	WITHOUT_CLASSIFICATION	1.182867651069623E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999882142895993	WITHOUT_CLASSIFICATION	1.1785710400856645E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999851177166391	WITHOUT_CLASSIFICATION	1.488228336082283E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999879544723475	WITHOUT_CLASSIFICATION	1.2045527652685695E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999883977174927	WITHOUT_CLASSIFICATION	1.1602282507357846E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999879788276129	WITHOUT_CLASSIFICATION	1.2021172387028632E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999881732427487	WITHOUT_CLASSIFICATION	1.1826757251308012E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.99998794776041	WITHOUT_CLASSIFICATION	1.2052239590011058E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999862261033742	WITHOUT_CLASSIFICATION	1.377389662580099E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999860349910694	WITHOUT_CLASSIFICATION	1.3965008930620574E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999846801547777	WITHOUT_CLASSIFICATION	1.531984522232839E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999857487055032	WITHOUT_CLASSIFICATION	1.4251294496799955E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999870961687849	WITHOUT_CLASSIFICATION	1.2903831215062487E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999870313410956	WITHOUT_CLASSIFICATION	1.2968658904457771E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999873777315942	WITHOUT_CLASSIFICATION	1.2622268405799311E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999857886565008	WITHOUT_CLASSIFICATION	1.421134349929649E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999873168550896	WITHOUT_CLASSIFICATION	1.2683144910342356E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.99998472553822	WITHOUT_CLASSIFICATION	1.5274461779957913E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999876336018388	WITHOUT_CLASSIFICATION	1.2366398161238505E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999989623742983	WITHOUT_CLASSIFICATION	1.0376257017009692E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999883279060887	WITHOUT_CLASSIFICATION	1.1672093911295887E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.999987291793783	WITHOUT_CLASSIFICATION	1.2708206217040288E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999880587409549	WITHOUT_CLASSIFICATION	1.1941259045084863E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999855012527197	WITHOUT_CLASSIFICATION	1.44987472804253E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999856236397023	WITHOUT_CLASSIFICATION	1.4376360297574174E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.999984973920372	WITHOUT_CLASSIFICATION	1.5026079627912904E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999846613236394	WITHOUT_CLASSIFICATION	1.533867636057946E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999890181106866	WITHOUT_CLASSIFICATION	1.09818893134465E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999848955582492	WITHOUT_CLASSIFICATION	1.5104441750710205E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999882090977935	WITHOUT_CLASSIFICATION	1.179090220641801E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999910576580077	WITHOUT_CLASSIFICATION	8.942341992449288E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999898033563026	WITHOUT_CLASSIFICATION	1.0196643697461455E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999903374492846	WITHOUT_CLASSIFICATION	9.662550715524216E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.999991497354222	WITHOUT_CLASSIFICATION	8.502645778045243E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999933519411914	WITHOUT_CLASSIFICATION	6.64805880861841E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9999646581003557	WITHOUT_CLASSIFICATION	3.5341899644278174E-5	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.999967175102689	WITHOUT_CLASSIFICATION	3.282489731099743E-5	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9998896647181298	WITHOUT_CLASSIFICATION	1.1033528187021156E-4	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999388978370843	WITHOUT_CLASSIFICATION	6.11021629156127E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9999812853906787	WITHOUT_CLASSIFICATION	1.8714609321307427E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999601964088538	WITHOUT_CLASSIFICATION	3.980359114623147E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999529131206296	WITHOUT_CLASSIFICATION	4.708687937031388E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999459487585158	WITHOUT_CLASSIFICATION	5.405124148407209E-5	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9995867598726536	WITHOUT_CLASSIFICATION	4.1324012734642507E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999810075401242	WITHOUT_CLASSIFICATION	1.899245987573217E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999897523507237	WITHOUT_CLASSIFICATION	1.0247649276352355E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999906655564799	WITHOUT_CLASSIFICATION	9.334443520214288E-6	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9999563187228608	WITHOUT_CLASSIFICATION	4.368127713919406E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999676113072078	WITHOUT_CLASSIFICATION	3.2388692792181006E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999605472924222	WITHOUT_CLASSIFICATION	3.945270757781129E-5	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9999257083159303	WITHOUT_CLASSIFICATION	7.429168406970167E-5	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999828338054195	WITHOUT_CLASSIFICATION	1.71661945804929E-5	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999957719109581	WITHOUT_CLASSIFICATION	4.2280890417742505E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999940400149758	WITHOUT_CLASSIFICATION	5.959985024189124E-6	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999906871849985	WITHOUT_CLASSIFICATION	9.312815001496801E-6	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999956244007671	WITHOUT_CLASSIFICATION	4.375599232914097E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999996450352079	WITHOUT_CLASSIFICATION	3.5496479207037236E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993537545572	WITHOUT_CLASSIFICATION	6.462454429396181E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993537545572	WITHOUT_CLASSIFICATION	6.462454429396181E-7	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999859751646933	WITHOUT_CLASSIFICATION	1.4024835306723728E-5	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9999355394733586	WITHOUT_CLASSIFICATION	6.44605266414441E-5	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999894116654127	WITHOUT_CLASSIFICATION	1.0588334587261488E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999978285699503	WITHOUT_CLASSIFICATION	2.171430049734592E-6	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999955713322838	WITHOUT_CLASSIFICATION	4.428667716193901E-6	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999988279087701	WITHOUT_CLASSIFICATION	1.1720912297724701E-6	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.999998336225296	WITHOUT_CLASSIFICATION	1.6637747039773704E-6	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999968120755492	WITHOUT_CLASSIFICATION	3.1879244507656542E-6	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9999656521021515	WITHOUT_CLASSIFICATION	3.434789784843795E-5	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999949549020121	WITHOUT_CLASSIFICATION	5.045097987981709E-6	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999964201212344	WITHOUT_CLASSIFICATION	3.5798787655994534E-6	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9999990990463876	WITHOUT_CLASSIFICATION	9.009536124671204E-7	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999933102892554	WITHOUT_CLASSIFICATION	6.689710744531125E-6	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999817902050508	WITHOUT_CLASSIFICATION	1.8209794949111754E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999710500805983	WITHOUT_CLASSIFICATION	2.894991940177718E-5	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999815911635125	WITHOUT_CLASSIFICATION	1.840883648754418E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999985040607924	WITHOUT_CLASSIFICATION	1.4959392075936026E-6	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9998658595114338	WITHOUT_CLASSIFICATION	1.3414048856621885E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9999980362651858	WITHOUT_CLASSIFICATION	1.9637348141519757E-6	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999880480359951	WITHOUT_CLASSIFICATION	1.1951964004964135E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999989491053088	WITHOUT_CLASSIFICATION	1.0508946911688428E-6	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999901653923284	WITHOUT_CLASSIFICATION	9.834607671618532E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9991808397326137	WITHOUT_CLASSIFICATION	8.191602673863155E-4	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999953917100968	WITHOUT_CLASSIFICATION	4.6082899032351955E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9991808397326137	WITHOUT_CLASSIFICATION	8.191602673863155E-4	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999973241102545	WITHOUT_CLASSIFICATION	2.675889745551643E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999957657103112	WITHOUT_CLASSIFICATION	4.234289688753516E-6	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9960586019155196	WITHOUT_CLASSIFICATION	0.003941398084480381	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999291710787356	WITHOUT_CLASSIFICATION	7.082892126435055E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999978148954121	WITHOUT_CLASSIFICATION	2.1851045879100576E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999906700022464	WITHOUT_CLASSIFICATION	9.329997753582308E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999906700022464	WITHOUT_CLASSIFICATION	9.329997753582308E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999906700022464	WITHOUT_CLASSIFICATION	9.329997753582308E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999319715263769	WITHOUT_CLASSIFICATION	6.802847362306867E-5	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9996074085813671	WITHOUT_CLASSIFICATION	3.925914186329447E-4	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999968481559561	WITHOUT_CLASSIFICATION	3.151844043946024E-6	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999153528542615	WITHOUT_CLASSIFICATION	8.464714573857936E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999153528542615	WITHOUT_CLASSIFICATION	8.464714573857936E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999153528542615	WITHOUT_CLASSIFICATION	8.464714573857936E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999153528542615	WITHOUT_CLASSIFICATION	8.464714573857936E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999153528542615	WITHOUT_CLASSIFICATION	8.464714573857936E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999153528542615	WITHOUT_CLASSIFICATION	8.464714573857936E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999264795657143	WITHOUT_CLASSIFICATION	7.352043428567002E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999264795657143	WITHOUT_CLASSIFICATION	7.352043428567002E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999264795657143	WITHOUT_CLASSIFICATION	7.352043428567002E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999264795657143	WITHOUT_CLASSIFICATION	7.352043428567002E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999264795657143	WITHOUT_CLASSIFICATION	7.352043428567002E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998831669372096	WITHOUT_CLASSIFICATION	1.1683306279038544E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998831669372096	WITHOUT_CLASSIFICATION	1.1683306279038544E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998831669372096	WITHOUT_CLASSIFICATION	1.1683306279038544E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998831669372096	WITHOUT_CLASSIFICATION	1.1683306279038544E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998831669372096	WITHOUT_CLASSIFICATION	1.1683306279038544E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999129688913614	WITHOUT_CLASSIFICATION	8.703110863859617E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999129688913614	WITHOUT_CLASSIFICATION	8.703110863859617E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999129688913614	WITHOUT_CLASSIFICATION	8.703110863859617E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999129688913614	WITHOUT_CLASSIFICATION	8.703110863859617E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999129688913614	WITHOUT_CLASSIFICATION	8.703110863859617E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999129688913614	WITHOUT_CLASSIFICATION	8.703110863859617E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999841949821407	WITHOUT_CLASSIFICATION	1.5805017859303497E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999841949821407	WITHOUT_CLASSIFICATION	1.5805017859303497E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999841949821407	WITHOUT_CLASSIFICATION	1.5805017859303497E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999841949821407	WITHOUT_CLASSIFICATION	1.5805017859303497E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999841949821407	WITHOUT_CLASSIFICATION	1.5805017859303497E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998691396088294	WITHOUT_CLASSIFICATION	1.3086039117059145E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998691396088294	WITHOUT_CLASSIFICATION	1.3086039117059145E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998691396088294	WITHOUT_CLASSIFICATION	1.3086039117059145E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998691396088294	WITHOUT_CLASSIFICATION	1.3086039117059145E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998691396088294	WITHOUT_CLASSIFICATION	1.3086039117059145E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998769773997657	WITHOUT_CLASSIFICATION	1.2302260023424385E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998769773997657	WITHOUT_CLASSIFICATION	1.2302260023424385E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998769773997657	WITHOUT_CLASSIFICATION	1.2302260023424385E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998769773997657	WITHOUT_CLASSIFICATION	1.2302260023424385E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998769773997657	WITHOUT_CLASSIFICATION	1.2302260023424385E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999940407296724	WITHOUT_CLASSIFICATION	5.959270327696065E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999968821349373	WITHOUT_CLASSIFICATION	3.1178650627642943E-6	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999835952284707	WITHOUT_CLASSIFICATION	1.6404771529251617E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999950915019424	WITHOUT_CLASSIFICATION	4.908498057567659E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999978447155675	WITHOUT_CLASSIFICATION	2.1552844325446593E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999920637181889	WITHOUT_CLASSIFICATION	7.936281810960982E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999902681292756	WITHOUT_CLASSIFICATION	9.731870724397756E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999920704711385	WITHOUT_CLASSIFICATION	7.929528861494233E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999892884484932	WITHOUT_CLASSIFICATION	1.0711551506852972E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999920094195064	WITHOUT_CLASSIFICATION	7.99058049359474E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999898729852512	WITHOUT_CLASSIFICATION	1.0127014748792705E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999887291560194	WITHOUT_CLASSIFICATION	1.1270843980537852E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999935869286586	WITHOUT_CLASSIFICATION	6.413071341389932E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999920498767045	WITHOUT_CLASSIFICATION	7.950123295540093E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999895276857221	WITHOUT_CLASSIFICATION	1.0472314277930614E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999900102424548	WITHOUT_CLASSIFICATION	9.989757545127055E-6	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.999990642704352	WITHOUT_CLASSIFICATION	9.357295647879417E-6	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.999991220500915	WITHOUT_CLASSIFICATION	8.779499084958616E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999899793026426	WITHOUT_CLASSIFICATION	1.0020697357495306E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999887851628364	WITHOUT_CLASSIFICATION	1.1214837163516645E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999904690069186	WITHOUT_CLASSIFICATION	9.530993081403356E-6	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.999988427725181	WITHOUT_CLASSIFICATION	1.15722748189277E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999903161985593	WITHOUT_CLASSIFICATION	9.683801440784917E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999886777919792	WITHOUT_CLASSIFICATION	1.1322208020797156E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999896807825043	WITHOUT_CLASSIFICATION	1.031921749575445E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999894054096244	WITHOUT_CLASSIFICATION	1.0594590375582023E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999910520002553	WITHOUT_CLASSIFICATION	8.947999744742643E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.999990462924782	WITHOUT_CLASSIFICATION	9.537075217937134E-6	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999870045187884	WITHOUT_CLASSIFICATION	1.2995481211622861E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999897351832857	WITHOUT_CLASSIFICATION	1.026481671420945E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999895898112974	WITHOUT_CLASSIFICATION	1.0410188702545597E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999864038495655	WITHOUT_CLASSIFICATION	1.3596150434391979E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.999988240070968	WITHOUT_CLASSIFICATION	1.1759929031886777E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999901591672361	WITHOUT_CLASSIFICATION	9.84083276381269E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999885279792915	WITHOUT_CLASSIFICATION	1.1472020708479468E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999876451561558	WITHOUT_CLASSIFICATION	1.235484384424635E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999873772023373	WITHOUT_CLASSIFICATION	1.2622797662589333E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999865062853287	WITHOUT_CLASSIFICATION	1.349371467123722E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999894266165044	WITHOUT_CLASSIFICATION	1.0573383495564964E-5	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999910341159434	WITHOUT_CLASSIFICATION	8.965884056623603E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999901448951576	WITHOUT_CLASSIFICATION	9.855104842473825E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999884395184191	WITHOUT_CLASSIFICATION	1.156048158084177E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999856981357017	WITHOUT_CLASSIFICATION	1.4301864298260336E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999894393261963	WITHOUT_CLASSIFICATION	1.056067380368587E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.999987653278478	WITHOUT_CLASSIFICATION	1.2346721521959851E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999891749019574	WITHOUT_CLASSIFICATION	1.0825098042686326E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999903356170726	WITHOUT_CLASSIFICATION	9.66438292732398E-6	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.999991239671342	WITHOUT_CLASSIFICATION	8.76032865801563E-6	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.999988748005973	WITHOUT_CLASSIFICATION	1.1251994026886842E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999901469549117	WITHOUT_CLASSIFICATION	9.853045088248465E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999867558188293	WITHOUT_CLASSIFICATION	1.3244181170751458E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999862922988725	WITHOUT_CLASSIFICATION	1.3707701127596086E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999857455946172	WITHOUT_CLASSIFICATION	1.4254405382719449E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999909939272256	WITHOUT_CLASSIFICATION	9.006072774447958E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999888384866875	WITHOUT_CLASSIFICATION	1.1161513312522903E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999883884266673	WITHOUT_CLASSIFICATION	1.1611573332701655E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999872339281809	WITHOUT_CLASSIFICATION	1.2766071819101768E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999903615350864	WITHOUT_CLASSIFICATION	9.638464913748175E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999913139091287	WITHOUT_CLASSIFICATION	8.686090871378108E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999894391351857	WITHOUT_CLASSIFICATION	1.0560864814283471E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999901980800179	WITHOUT_CLASSIFICATION	9.801919982179238E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999892320536871	WITHOUT_CLASSIFICATION	1.0767946312978662E-5	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999884463055402	WITHOUT_CLASSIFICATION	1.1553694459810092E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999873330928181	WITHOUT_CLASSIFICATION	1.2666907182015271E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999903796775619	WITHOUT_CLASSIFICATION	9.620322438025569E-6	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999902330847823	WITHOUT_CLASSIFICATION	9.766915217651445E-6	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.999987026232852	WITHOUT_CLASSIFICATION	1.2973767147940075E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999893429784111	WITHOUT_CLASSIFICATION	1.0657021588791049E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999876016687748	WITHOUT_CLASSIFICATION	1.2398331225170252E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999874554441093	WITHOUT_CLASSIFICATION	1.2544555890656335E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999886241119772	WITHOUT_CLASSIFICATION	1.1375888022838052E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999894820544293	WITHOUT_CLASSIFICATION	1.0517945570685227E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.999989627321525	WITHOUT_CLASSIFICATION	1.0372678475123582E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999884794107491	WITHOUT_CLASSIFICATION	1.1520589250925804E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999894417388232	WITHOUT_CLASSIFICATION	1.055826117670893E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999893585999017	WITHOUT_CLASSIFICATION	1.0641400098310313E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999892002159281	WITHOUT_CLASSIFICATION	1.0799784071906517E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999893193580324	WITHOUT_CLASSIFICATION	1.0680641967683928E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999879709262002	WITHOUT_CLASSIFICATION	1.202907379981423E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999873915171462	WITHOUT_CLASSIFICATION	1.2608482853844917E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999885394376248	WITHOUT_CLASSIFICATION	1.1460562375263152E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999864616147577	WITHOUT_CLASSIFICATION	1.3538385242230889E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999893107143567	WITHOUT_CLASSIFICATION	1.0689285643404895E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999882394161398	WITHOUT_CLASSIFICATION	1.1760583860160205E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.999988648268601	WITHOUT_CLASSIFICATION	1.1351731399027745E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.999990623356189	WITHOUT_CLASSIFICATION	9.376643810857258E-6	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999894188781544	WITHOUT_CLASSIFICATION	1.0581121845537651E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999858227840301	WITHOUT_CLASSIFICATION	1.4177215969889103E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999878383705746	WITHOUT_CLASSIFICATION	1.2161629425372384E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999908942461965	WITHOUT_CLASSIFICATION	9.105753803539149E-6	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999904243861382	WITHOUT_CLASSIFICATION	9.575613861930655E-6	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999891324705611	WITHOUT_CLASSIFICATION	1.0867529438914013E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999862170361568	WITHOUT_CLASSIFICATION	1.3782963843182019E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999883452699517	WITHOUT_CLASSIFICATION	1.1654730048264475E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999924122941217	WITHOUT_CLASSIFICATION	7.587705878330325E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999914867343964	WITHOUT_CLASSIFICATION	8.513265603604089E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999919002844323	WITHOUT_CLASSIFICATION	8.09971556768563E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999908666038475	WITHOUT_CLASSIFICATION	9.133396152447723E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999911708120076	WITHOUT_CLASSIFICATION	8.829187992488765E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999892798363861	WITHOUT_CLASSIFICATION	1.072016361380793E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999900454818068	WITHOUT_CLASSIFICATION	9.95451819313151E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999895968473133	WITHOUT_CLASSIFICATION	1.0403152686792741E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999889190064137	WITHOUT_CLASSIFICATION	1.1080993586193548E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999901538924421	WITHOUT_CLASSIFICATION	9.846107557945273E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999882954274995	WITHOUT_CLASSIFICATION	1.1704572500449549E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999877632578515	WITHOUT_CLASSIFICATION	1.2236742148514023E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999916074546085	WITHOUT_CLASSIFICATION	8.392545391589716E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999902968860329	WITHOUT_CLASSIFICATION	9.703113967028945E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999906742792778	WITHOUT_CLASSIFICATION	9.32572072223942E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999932926809993	WITHOUT_CLASSIFICATION	6.707319000727339E-6	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999905437571863	WITHOUT_CLASSIFICATION	9.456242813668173E-6	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999913878158784	WITHOUT_CLASSIFICATION	8.61218412151982E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999918373588204	WITHOUT_CLASSIFICATION	8.162641179527342E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999910072598791	WITHOUT_CLASSIFICATION	8.9927401210095E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999894314886468	WITHOUT_CLASSIFICATION	1.0568511353103223E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999898430638283	WITHOUT_CLASSIFICATION	1.0156936171747613E-5	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999889328859412	WITHOUT_CLASSIFICATION	1.1067114058866543E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999893838169494	WITHOUT_CLASSIFICATION	1.0616183050540335E-5	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.99998865191488	WITHOUT_CLASSIFICATION	1.134808511997096E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.999988070702783	WITHOUT_CLASSIFICATION	1.1929297217158905E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999902964709043	WITHOUT_CLASSIFICATION	9.70352909578487E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999902701488218	WITHOUT_CLASSIFICATION	9.729851178254674E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999913639201852	WITHOUT_CLASSIFICATION	8.636079814841648E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999906988736624	WITHOUT_CLASSIFICATION	9.301126337528507E-6	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999896770699269	WITHOUT_CLASSIFICATION	1.0322930073062351E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999902000869006	WITHOUT_CLASSIFICATION	9.799913099295504E-6	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999881312001475	WITHOUT_CLASSIFICATION	1.1868799852447668E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999902420593713	WITHOUT_CLASSIFICATION	9.757940628873176E-6	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999911234828379	WITHOUT_CLASSIFICATION	8.876517162192488E-6	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999892271457267	WITHOUT_CLASSIFICATION	1.0772854273186627E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999871322817104	WITHOUT_CLASSIFICATION	1.2867718289472513E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999892505576355	WITHOUT_CLASSIFICATION	1.0749442364456053E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999882515683612	WITHOUT_CLASSIFICATION	1.1748431638759256E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999862091314948	WITHOUT_CLASSIFICATION	1.3790868505235071E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999874124476358	WITHOUT_CLASSIFICATION	1.2587552364173857E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999866411517663	WITHOUT_CLASSIFICATION	1.3358848233638387E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999895990821975	WITHOUT_CLASSIFICATION	1.0400917802381367E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999894908935998	WITHOUT_CLASSIFICATION	1.0509106400221008E-5	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999904449343985	WITHOUT_CLASSIFICATION	9.555065601545786E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.999988844568732	WITHOUT_CLASSIFICATION	1.115543126790292E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999894349107066	WITHOUT_CLASSIFICATION	1.0565089293435205E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999877133446199	WITHOUT_CLASSIFICATION	1.2286655380111951E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999882077683104	WITHOUT_CLASSIFICATION	1.1792231689644468E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999880880483545	WITHOUT_CLASSIFICATION	1.1911951645536462E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999872377259884	WITHOUT_CLASSIFICATION	1.2762274011635993E-5	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.999986559880507	WITHOUT_CLASSIFICATION	1.3440119493084058E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999866780186901	WITHOUT_CLASSIFICATION	1.332198130988179E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999893358004001	WITHOUT_CLASSIFICATION	1.0664199599946185E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999895729185804	WITHOUT_CLASSIFICATION	1.0427081419548316E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999895022940247	WITHOUT_CLASSIFICATION	1.0497705975205132E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999899178697931	WITHOUT_CLASSIFICATION	1.0082130206908267E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999899925608966	WITHOUT_CLASSIFICATION	1.0007439103429301E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999893210137655	WITHOUT_CLASSIFICATION	1.0678986234441568E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999889555840928	WITHOUT_CLASSIFICATION	1.1044415907074496E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999887848291464	WITHOUT_CLASSIFICATION	1.121517085344359E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999829693876077	WITHOUT_CLASSIFICATION	1.703061239241494E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999877656416438	WITHOUT_CLASSIFICATION	1.2234358356250353E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999866521786195	WITHOUT_CLASSIFICATION	1.3347821380495543E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999901588813875	WITHOUT_CLASSIFICATION	9.841118612460031E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999901124677497	WITHOUT_CLASSIFICATION	9.887532250321798E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999900857933302	WITHOUT_CLASSIFICATION	9.914206669777958E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999896799929995	WITHOUT_CLASSIFICATION	1.0320007000565757E-5	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999883182585639	WITHOUT_CLASSIFICATION	1.1681741436024646E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999885053493093	WITHOUT_CLASSIFICATION	1.1494650690780964E-5	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999875372419281	WITHOUT_CLASSIFICATION	1.246275807194641E-5	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999909295330572	WITHOUT_CLASSIFICATION	9.070466942830049E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999870790589148	WITHOUT_CLASSIFICATION	1.2920941085118702E-5	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999877341908907	WITHOUT_CLASSIFICATION	1.2265809109359E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999899472133271	WITHOUT_CLASSIFICATION	1.0052786672860406E-5	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999882611068129	WITHOUT_CLASSIFICATION	1.1738893187048388E-5	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999871222376985	WITHOUT_CLASSIFICATION	1.2877762301523776E-5	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999882058738543	WITHOUT_CLASSIFICATION	1.1794126145627333E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999889582646341	WITHOUT_CLASSIFICATION	1.1041735365957688E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999875684619948	WITHOUT_CLASSIFICATION	1.2431538005338029E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999872421491579	WITHOUT_CLASSIFICATION	1.2757850842141873E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999917755630943	WITHOUT_CLASSIFICATION	8.224436905701865E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999892527660601	WITHOUT_CLASSIFICATION	1.0747233939965478E-5	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999859275325523	WITHOUT_CLASSIFICATION	1.407246744763204E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999878275746635	WITHOUT_CLASSIFICATION	1.2172425336512836E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999875063880813	WITHOUT_CLASSIFICATION	1.2493611918661072E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999885123556711	WITHOUT_CLASSIFICATION	1.1487644328961549E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999863007557575	WITHOUT_CLASSIFICATION	1.3699244242634242E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999845245123754	WITHOUT_CLASSIFICATION	1.5475487624608647E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999867175562187	WITHOUT_CLASSIFICATION	1.3282443781220428E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999887113044102	WITHOUT_CLASSIFICATION	1.1288695589746687E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999855703082727	WITHOUT_CLASSIFICATION	1.4429691727226571E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999893789703377	WITHOUT_CLASSIFICATION	1.0621029662287958E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999868507197668	WITHOUT_CLASSIFICATION	1.31492802332573E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999854014285177	WITHOUT_CLASSIFICATION	1.4598571482287699E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999865018816388	WITHOUT_CLASSIFICATION	1.3498118361253551E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999894187969797	WITHOUT_CLASSIFICATION	1.0581203020324823E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999886133659581	WITHOUT_CLASSIFICATION	1.1386634041957872E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.999987450541813	WITHOUT_CLASSIFICATION	1.2549458186825994E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999864668774725	WITHOUT_CLASSIFICATION	1.353312252754925E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999885856954325	WITHOUT_CLASSIFICATION	1.1414304567438399E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999875866399397	WITHOUT_CLASSIFICATION	1.2413360060308745E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.999988680996263	WITHOUT_CLASSIFICATION	1.1319003736948432E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999889143678283	WITHOUT_CLASSIFICATION	1.108563217166256E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999888503145167	WITHOUT_CLASSIFICATION	1.1149685483265592E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999886927869588	WITHOUT_CLASSIFICATION	1.1307213041323164E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999874213532283	WITHOUT_CLASSIFICATION	1.2578646771728204E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999886272900741	WITHOUT_CLASSIFICATION	1.1372709925865147E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999842462043469	WITHOUT_CLASSIFICATION	1.575379565309501E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999898492367914	WITHOUT_CLASSIFICATION	1.015076320872389E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999872117661527	WITHOUT_CLASSIFICATION	1.2788233847190883E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999881713234893	WITHOUT_CLASSIFICATION	1.182867651069623E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999895849727195	WITHOUT_CLASSIFICATION	1.0415027280484608E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.99998908550028	WITHOUT_CLASSIFICATION	1.0914499719870507E-5	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.999987692618742	WITHOUT_CLASSIFICATION	1.2307381257884392E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999893292518393	WITHOUT_CLASSIFICATION	1.0670748160833668E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.999988069758201	WITHOUT_CLASSIFICATION	1.1930241799154607E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999891346421933	WITHOUT_CLASSIFICATION	1.0865357806730633E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999877736139094	WITHOUT_CLASSIFICATION	1.2226386090445352E-5	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999888596074848	WITHOUT_CLASSIFICATION	1.114039251513149E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999864736404448	WITHOUT_CLASSIFICATION	1.3526359555295675E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999867659327564	WITHOUT_CLASSIFICATION	1.3234067243683938E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999868700303992	WITHOUT_CLASSIFICATION	1.3129969600826394E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999866029511881	WITHOUT_CLASSIFICATION	1.3397048811816408E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999856794072255	WITHOUT_CLASSIFICATION	1.4320592774572707E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999871075133824	WITHOUT_CLASSIFICATION	1.289248661756355E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999876237750243	WITHOUT_CLASSIFICATION	1.2376224975867295E-5	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.999989140708232	WITHOUT_CLASSIFICATION	1.0859291768025497E-5	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999860076383917	WITHOUT_CLASSIFICATION	1.3992361608174586E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999890347427972	WITHOUT_CLASSIFICATION	1.0965257202770747E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999862883691228	WITHOUT_CLASSIFICATION	1.3711630877128688E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999868118553159	WITHOUT_CLASSIFICATION	1.3188144684179163E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999883162748056	WITHOUT_CLASSIFICATION	1.1683725194548506E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999881144114882	WITHOUT_CLASSIFICATION	1.1885588511830172E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999868504085031	WITHOUT_CLASSIFICATION	1.3149591496942908E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999862220767682	WITHOUT_CLASSIFICATION	1.3777923231726419E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999843811199398	WITHOUT_CLASSIFICATION	1.56188800602478E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999888712121281	WITHOUT_CLASSIFICATION	1.1128787871844721E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999864877304514	WITHOUT_CLASSIFICATION	1.3512269548748922E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999878349483056	WITHOUT_CLASSIFICATION	1.2165051694347561E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.999985908674773	WITHOUT_CLASSIFICATION	1.409132522713461E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999878897867599	WITHOUT_CLASSIFICATION	1.211021324012385E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999857851501474	WITHOUT_CLASSIFICATION	1.4214849852613685E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999879061946185	WITHOUT_CLASSIFICATION	1.2093805381466229E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999868252119152	WITHOUT_CLASSIFICATION	1.3174788084712722E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999890350598208	WITHOUT_CLASSIFICATION	1.0964940179125676E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999888257960144	WITHOUT_CLASSIFICATION	1.1174203985524886E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999881033900933	WITHOUT_CLASSIFICATION	1.1896609906827114E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999868834571636	WITHOUT_CLASSIFICATION	1.3116542836449776E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999861785336442	WITHOUT_CLASSIFICATION	1.3821466355706335E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.999987200190684	WITHOUT_CLASSIFICATION	1.2799809315866223E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999858030757339	WITHOUT_CLASSIFICATION	1.419692426603653E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999879788276129	WITHOUT_CLASSIFICATION	1.2021172387028632E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999881732427487	WITHOUT_CLASSIFICATION	1.1826757251308012E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999876336018388	WITHOUT_CLASSIFICATION	1.2366398161238505E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999857555670993	WITHOUT_CLASSIFICATION	1.424443290077259E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999883279060887	WITHOUT_CLASSIFICATION	1.1672093911295887E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999880587409549	WITHOUT_CLASSIFICATION	1.1941259045084863E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999856236397023	WITHOUT_CLASSIFICATION	1.4376360297574174E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999903374492846	WITHOUT_CLASSIFICATION	9.662550715524216E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.999991497354222	WITHOUT_CLASSIFICATION	8.502645778045243E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999853172875957	WITHOUT_CLASSIFICATION	1.4682712404290632E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999890755549619	WITHOUT_CLASSIFICATION	1.0924445038038162E-5	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999885260976759	WITHOUT_CLASSIFICATION	1.147390232415817E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999877028263583	WITHOUT_CLASSIFICATION	1.2297173641719597E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.999986632270473	WITHOUT_CLASSIFICATION	1.3367729526887355E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999857180560239	WITHOUT_CLASSIFICATION	1.4281943976211718E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999846468460809	WITHOUT_CLASSIFICATION	1.535315391908816E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999860263782062	WITHOUT_CLASSIFICATION	1.3973621793741131E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999846753641543	WITHOUT_CLASSIFICATION	1.5324635845799506E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999872786143904	WITHOUT_CLASSIFICATION	1.2721385609641881E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999861389706037	WITHOUT_CLASSIFICATION	1.3861029396269325E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999871626191709	WITHOUT_CLASSIFICATION	1.2837380829107281E-5	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999898518211895	WITHOUT_CLASSIFICATION	1.0148178810479519E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999882750208677	WITHOUT_CLASSIFICATION	1.1724979132266266E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999867680276981	WITHOUT_CLASSIFICATION	1.3231972301874426E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999890817195334	WITHOUT_CLASSIFICATION	1.0918280466710353E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999879144100512	WITHOUT_CLASSIFICATION	1.208558994880507E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.999986848577458	WITHOUT_CLASSIFICATION	1.3151422542050367E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999887590375766	WITHOUT_CLASSIFICATION	1.124096242345188E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999844424688814	WITHOUT_CLASSIFICATION	1.5557531118534956E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999777542287861	WITHOUT_CLASSIFICATION	2.2245771213960482E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999864176918114	WITHOUT_CLASSIFICATION	1.3582308188535391E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999860044137668	WITHOUT_CLASSIFICATION	1.399558623313899E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999857125898688	WITHOUT_CLASSIFICATION	1.4287410131219455E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.999985637942139	WITHOUT_CLASSIFICATION	1.4362057861123132E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999901105513125	WITHOUT_CLASSIFICATION	9.889448687500104E-6	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999879760521624	WITHOUT_CLASSIFICATION	1.2023947837580279E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999888401386593	WITHOUT_CLASSIFICATION	1.115986134075782E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999868523908209	WITHOUT_CLASSIFICATION	1.3147609179191848E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999848485068087	WITHOUT_CLASSIFICATION	1.5151493191273006E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999924883019828	WITHOUT_CLASSIFICATION	7.511698017181667E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999907327116045	WITHOUT_CLASSIFICATION	9.26728839535661E-6	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.99998916540211	WITHOUT_CLASSIFICATION	1.0834597889949924E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999905007207516	WITHOUT_CLASSIFICATION	9.49927924830543E-6	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999896991690929	WITHOUT_CLASSIFICATION	1.0300830907057737E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999908774416346	WITHOUT_CLASSIFICATION	9.122558365327492E-6	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999914076137573	WITHOUT_CLASSIFICATION	8.59238624282806E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999905946543092	WITHOUT_CLASSIFICATION	9.405345690806054E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999887901888109	WITHOUT_CLASSIFICATION	1.1209811189123335E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999601964088538	WITHOUT_CLASSIFICATION	3.980359114623147E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999529131206296	WITHOUT_CLASSIFICATION	4.708687937031388E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999906655564799	WITHOUT_CLASSIFICATION	9.334443520214288E-6	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999676113072078	WITHOUT_CLASSIFICATION	3.2388692792181006E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999605472924222	WITHOUT_CLASSIFICATION	3.945270757781129E-5	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9999257083159303	WITHOUT_CLASSIFICATION	7.429168406970167E-5	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999828338054195	WITHOUT_CLASSIFICATION	1.71661945804929E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999119039256749	WITHOUT_CLASSIFICATION	8.809607432518452E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999889963839149	WITHOUT_CLASSIFICATION	1.1003616084963449E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999880648961595	WITHOUT_CLASSIFICATION	1.1935103840461329E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999908778399126	WITHOUT_CLASSIFICATION	9.12216008735806E-6	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999897294049361	WITHOUT_CLASSIFICATION	1.0270595063765082E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999888256622931	WITHOUT_CLASSIFICATION	1.1174337706987413E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999895087566595	WITHOUT_CLASSIFICATION	1.0491243340598651E-5	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999891347710468	WITHOUT_CLASSIFICATION	1.0865228953288713E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999867584744281	WITHOUT_CLASSIFICATION	1.3241525571765878E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999880089342661	WITHOUT_CLASSIFICATION	1.1991065733860005E-5	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999894384148589	WITHOUT_CLASSIFICATION	1.0561585141148404E-5	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999862517970067	WITHOUT_CLASSIFICATION	1.3748202993381777E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999885067683181	WITHOUT_CLASSIFICATION	1.1493231681914727E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999877842410237	WITHOUT_CLASSIFICATION	1.2215758976361249E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999875881952541	WITHOUT_CLASSIFICATION	1.241180474579426E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999859842515175	WITHOUT_CLASSIFICATION	1.4015748482586757E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999847283641422	WITHOUT_CLASSIFICATION	1.527163585776402E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999868081965437	WITHOUT_CLASSIFICATION	1.3191803456298542E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999864099279627	WITHOUT_CLASSIFICATION	1.3590072037263899E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999898721021405	WITHOUT_CLASSIFICATION	1.0127897859404458E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999847138835478	WITHOUT_CLASSIFICATION	1.5286116452127356E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999940873576281	WITHOUT_CLASSIFICATION	5.9126423719722E-6	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999918935875308	WITHOUT_CLASSIFICATION	8.10641246912339E-6	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999939815645796	WITHOUT_CLASSIFICATION	6.0184354204158525E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999925419547114	WITHOUT_CLASSIFICATION	7.458045288552493E-6	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999847937756506	WITHOUT_CLASSIFICATION	1.5206224349276061E-5	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9999891608502985	WITHOUT_CLASSIFICATION	1.083914970152047E-5	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999893484766826	WITHOUT_CLASSIFICATION	1.0651523317292465E-5	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999928883234923	WITHOUT_CLASSIFICATION	7.111676507582025E-6	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9997892267783705	WITHOUT_CLASSIFICATION	2.1077322162959704E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999940400149758	WITHOUT_CLASSIFICATION	5.959985024189124E-6	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999906871849985	WITHOUT_CLASSIFICATION	9.312815001496801E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993537545572	WITHOUT_CLASSIFICATION	6.462454429396181E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993537545572	WITHOUT_CLASSIFICATION	6.462454429396181E-7	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9999585768793147	WITHOUT_CLASSIFICATION	4.142312068532584E-5	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999860102683613	WITHOUT_CLASSIFICATION	1.39897316385959E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999952868672957	WITHOUT_CLASSIFICATION	4.713132704296597E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999957179048963	WITHOUT_CLASSIFICATION	4.282095103749521E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.999999420754178	WITHOUT_CLASSIFICATION	5.792458220535935E-7	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999915611731607	WITHOUT_CLASSIFICATION	8.438826839341304E-6	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999983267978719	WITHOUT_CLASSIFICATION	1.6732021281087842E-6	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999977717461609	WITHOUT_CLASSIFICATION	2.228253838996812E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999993556764296	WITHOUT_CLASSIFICATION	6.443235704986938E-7	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999992453597125	WITHOUT_CLASSIFICATION	7.54640287550499E-7	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999995855729618	WITHOUT_CLASSIFICATION	4.144270383348769E-7	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999987790633537	WITHOUT_CLASSIFICATION	1.2209366463712787E-6	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999991426108812	WITHOUT_CLASSIFICATION	8.5738911884799E-7	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999923949606156	WITHOUT_CLASSIFICATION	7.6050393842722836E-6	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.999992670526628	WITHOUT_CLASSIFICATION	7.329473371967642E-6	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.999992670526628	WITHOUT_CLASSIFICATION	7.329473371967642E-6	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999952714507961	WITHOUT_CLASSIFICATION	4.7285492038716126E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999986111221559	WITHOUT_CLASSIFICATION	1.3888778440295907E-6	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999992004719876	WITHOUT_CLASSIFICATION	7.995280124387096E-7	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999986559790394	WITHOUT_CLASSIFICATION	1.344020960630295E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999937762318687	WITHOUT_CLASSIFICATION	6.223768131366174E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999982879315578	WITHOUT_CLASSIFICATION	1.7120684423325826E-6	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999993721315313	WITHOUT_CLASSIFICATION	6.27868468695402E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999982879315578	WITHOUT_CLASSIFICATION	1.7120684423325826E-6	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999998278395306	WITHOUT_CLASSIFICATION	1.7216046946058648E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999857495271633	WITHOUT_CLASSIFICATION	1.4250472836577962E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9999195824640101	WITHOUT_CLASSIFICATION	8.041753598986955E-5	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9992522734253543	WITHOUT_CLASSIFICATION	7.477265746456789E-4	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999930795856351	WITHOUT_CLASSIFICATION	6.92041436497856E-6	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.999992004928064	WITHOUT_CLASSIFICATION	7.995071936030179E-6	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999997018658568	WITHOUT_CLASSIFICATION	2.981341431770283E-7	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999988959261062	WITHOUT_CLASSIFICATION	1.104073893682032E-6	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999997507084285	WITHOUT_CLASSIFICATION	2.492915715497883E-7	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9998408018062999	WITHOUT_CLASSIFICATION	1.5919819370008968E-4	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.999999761344097	WITHOUT_CLASSIFICATION	2.3865590305707976E-7	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999571860687347	WITHOUT_CLASSIFICATION	4.2813931265335976E-5	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999037682338161	WITHOUT_CLASSIFICATION	9.623176618378904E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999479731032043	WITHOUT_CLASSIFICATION	5.202689679578982E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999966001200912	WITHOUT_CLASSIFICATION	3.399879908962608E-6	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999966001200912	WITHOUT_CLASSIFICATION	3.399879908962608E-6	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999825006167536	WITHOUT_CLASSIFICATION	1.7499383246269768E-5	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999971205754791	WITHOUT_CLASSIFICATION	2.879424520872517E-6	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999882501953928	WITHOUT_CLASSIFICATION	1.1749804607179208E-5	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9999917721871215	WITHOUT_CLASSIFICATION	8.227812878493788E-6	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.999998537704738	WITHOUT_CLASSIFICATION	1.4622952620510868E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999982879315578	WITHOUT_CLASSIFICATION	1.7120684423325826E-6	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999988779152804	WITHOUT_CLASSIFICATION	1.122084719499398E-6	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999963600182223	WITHOUT_CLASSIFICATION	3.639981777563485E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999978502788582	WITHOUT_CLASSIFICATION	2.1497211417635247E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999985214206353	WITHOUT_CLASSIFICATION	1.4785793646844139E-6	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999990306331522	WITHOUT_CLASSIFICATION	9.693668477594714E-7	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999999122978425	WITHOUT_CLASSIFICATION	8.770215748128465E-8	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.999999786296475	WITHOUT_CLASSIFICATION	2.1370352511186853E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999980421426719	WITHOUT_CLASSIFICATION	1.957857328239964E-6	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999997494235608	WITHOUT_CLASSIFICATION	2.505764392152873E-7	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999918708314451	WITHOUT_CLASSIFICATION	8.129168554777521E-6	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999947882084849	WITHOUT_CLASSIFICATION	5.211791515183266E-6	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999936701569238	WITHOUT_CLASSIFICATION	6.329843076303919E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9999315046332348	WITHOUT_CLASSIFICATION	6.84953667652616E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999946992892247	WITHOUT_CLASSIFICATION	5.300710775378784E-6	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9999573995014648	WITHOUT_CLASSIFICATION	4.260049853516174E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999936677947924	WITHOUT_CLASSIFICATION	6.332205207628085E-6	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999825228041019	WITHOUT_CLASSIFICATION	1.7477195897968832E-5	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9999437147234219	WITHOUT_CLASSIFICATION	5.628527657803448E-5	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999930865256377	WITHOUT_CLASSIFICATION	6.913474362375737E-6	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999860821751357	WITHOUT_CLASSIFICATION	1.391782486437335E-5	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999912027307563	WITHOUT_CLASSIFICATION	8.797269243763719E-6	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9999494485944516	WITHOUT_CLASSIFICATION	5.055140554842581E-5	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.999997102172394	WITHOUT_CLASSIFICATION	2.897827605954106E-6	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.999990262236702	WITHOUT_CLASSIFICATION	9.737763298107595E-6	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999923748417185	WITHOUT_CLASSIFICATION	7.625158281384159E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999908457796787	WITHOUT_CLASSIFICATION	9.154220321300049E-6	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999954591774154	WITHOUT_CLASSIFICATION	4.540822584630507E-6	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999998038102857	WITHOUT_CLASSIFICATION	1.961897142728582E-7	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9999412360457262	WITHOUT_CLASSIFICATION	5.876395427370545E-5	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999974016749205	WITHOUT_CLASSIFICATION	2.5983250795856257E-6	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999726160386379	WITHOUT_CLASSIFICATION	2.7383961362167453E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999961443678544	WITHOUT_CLASSIFICATION	3.855632145522525E-6	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.999994904732033	WITHOUT_CLASSIFICATION	5.095267966984065E-6	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9999968474172112	WITHOUT_CLASSIFICATION	3.1525827888727475E-6	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999997137249413	WITHOUT_CLASSIFICATION	2.86275058713484E-7	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999994388244646	WITHOUT_CLASSIFICATION	5.61175535483537E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999946687529795	WITHOUT_CLASSIFICATION	5.33124702051897E-6	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999973622574406	WITHOUT_CLASSIFICATION	2.637742559307835E-6	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999928103328504	WITHOUT_CLASSIFICATION	7.1896671495097556E-6	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999991821206011	WITHOUT_CLASSIFICATION	8.178793987678786E-7	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999119039256749	WITHOUT_CLASSIFICATION	8.809607432518452E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.999984937596716	WITHOUT_CLASSIFICATION	1.5062403283977452E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999714774737034	WITHOUT_CLASSIFICATION	2.852252629661799E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999991724816171	WITHOUT_CLASSIFICATION	8.275183829183458E-7	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999986580076302	WITHOUT_CLASSIFICATION	1.3419923697470032E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999857495271633	WITHOUT_CLASSIFICATION	1.4250472836577962E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999921083993635	WITHOUT_CLASSIFICATION	7.891600636552354E-6	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999994885041122	WITHOUT_CLASSIFICATION	5.11495887705821E-7	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999855766477271	WITHOUT_CLASSIFICATION	1.4423352272885735E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996761702904	WITHOUT_CLASSIFICATION	3.238297095889766E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996761702904	WITHOUT_CLASSIFICATION	3.238297095889766E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999976252762852	WITHOUT_CLASSIFICATION	2.3747237148931007E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999976252762852	WITHOUT_CLASSIFICATION	2.3747237148931007E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999976252762852	WITHOUT_CLASSIFICATION	2.3747237148931007E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999973273374957	WITHOUT_CLASSIFICATION	2.6726625042673056E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999973273374957	WITHOUT_CLASSIFICATION	2.6726625042673056E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999966446723328	WITHOUT_CLASSIFICATION	3.355327667247119E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999966446723328	WITHOUT_CLASSIFICATION	3.355327667247119E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999988154583105	WITHOUT_CLASSIFICATION	1.1845416895807427E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999972800111975	WITHOUT_CLASSIFICATION	2.719988802545795E-6	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999567956177353	WITHOUT_CLASSIFICATION	4.320438226465631E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999567956177353	WITHOUT_CLASSIFICATION	4.320438226465631E-5	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999910703475156	WITHOUT_CLASSIFICATION	8.929652484441364E-6	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999949539253227	WITHOUT_CLASSIFICATION	5.046074677334214E-6	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999955467210672	WITHOUT_CLASSIFICATION	4.453278932841252E-6	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999982915452279	WITHOUT_CLASSIFICATION	1.708454772196077E-6	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.99999724076975	WITHOUT_CLASSIFICATION	2.7592302499851875E-6	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999981372568969	WITHOUT_CLASSIFICATION	1.8627431030172254E-6	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999963262428389	WITHOUT_CLASSIFICATION	3.673757161200751E-6	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999785449981345	WITHOUT_CLASSIFICATION	2.1455001865455253E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.999997210624165	WITHOUT_CLASSIFICATION	2.7893758350155757E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999870676785397	WITHOUT_CLASSIFICATION	1.2932321460370486E-5	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999979212895073	WITHOUT_CLASSIFICATION	2.0787104926977117E-6	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999892025676281	WITHOUT_CLASSIFICATION	1.0797432371909714E-5	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999909822771227	WITHOUT_CLASSIFICATION	9.017722877277369E-6	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9998795335272811	WITHOUT_CLASSIFICATION	1.204664727188285E-4	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999881071332677	WITHOUT_CLASSIFICATION	1.1892866732354134E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9997216661899189	WITHOUT_CLASSIFICATION	2.7833381008111316E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999711765979287	WITHOUT_CLASSIFICATION	2.8823402071330872E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999711912226491	WITHOUT_CLASSIFICATION	2.8808777350877867E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999867815513365	WITHOUT_CLASSIFICATION	1.321844866344334E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998766488673129	WITHOUT_CLASSIFICATION	1.233511326870519E-4	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999970805327333	WITHOUT_CLASSIFICATION	2.9194672667499636E-6	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999961216241655	WITHOUT_CLASSIFICATION	3.878375834506989E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999939509963528	WITHOUT_CLASSIFICATION	6.049003647171178E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999971879542957	WITHOUT_CLASSIFICATION	2.8120457042759186E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999998938600433	WITHOUT_CLASSIFICATION	1.061399566910139E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999968811689681	WITHOUT_CLASSIFICATION	3.1188310318197243E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999882172411665	WITHOUT_CLASSIFICATION	1.178275883344841E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.999994618947905	WITHOUT_CLASSIFICATION	5.3810520949967605E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999964360742425	WITHOUT_CLASSIFICATION	3.5639257574919445E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999986548045715	WITHOUT_CLASSIFICATION	1.3451954285107102E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.999996047261494	WITHOUT_CLASSIFICATION	3.9527385059573705E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999984480669186	WITHOUT_CLASSIFICATION	1.55193308144412E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999994142272276	WITHOUT_CLASSIFICATION	5.85772772394346E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999985369987954	WITHOUT_CLASSIFICATION	1.463001204579537E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999994142272276	WITHOUT_CLASSIFICATION	5.85772772394346E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999994142272276	WITHOUT_CLASSIFICATION	5.85772772394346E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999994142272276	WITHOUT_CLASSIFICATION	5.85772772394346E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999994142272276	WITHOUT_CLASSIFICATION	5.85772772394346E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999994142272276	WITHOUT_CLASSIFICATION	5.85772772394346E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999994142272276	WITHOUT_CLASSIFICATION	5.85772772394346E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999985369987954	WITHOUT_CLASSIFICATION	1.463001204579537E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999985369987954	WITHOUT_CLASSIFICATION	1.463001204579537E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999985369987954	WITHOUT_CLASSIFICATION	1.463001204579537E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999985369987954	WITHOUT_CLASSIFICATION	1.463001204579537E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999985369987954	WITHOUT_CLASSIFICATION	1.463001204579537E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999985369987954	WITHOUT_CLASSIFICATION	1.463001204579537E-6	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9999987875941125	WITHOUT_CLASSIFICATION	1.2124058875328158E-6	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999943831082974	WITHOUT_CLASSIFICATION	5.616891702602371E-6	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999936715817427	WITHOUT_CLASSIFICATION	6.328418257344794E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.999995849570217	WITHOUT_CLASSIFICATION	4.1504297830138586E-6	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999992552040936	WITHOUT_CLASSIFICATION	7.447959063050011E-7	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.999997306506174	WITHOUT_CLASSIFICATION	2.69349382591606E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999989854270112	WITHOUT_CLASSIFICATION	1.0145729889140606E-6	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999976753765799	WITHOUT_CLASSIFICATION	2.324623420033191E-6	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999939404712664	WITHOUT_CLASSIFICATION	6.059528733569469E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999956163270965	WITHOUT_CLASSIFICATION	4.383672903409883E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999848609722993	WITHOUT_CLASSIFICATION	1.5139027700798205E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999999515124885	WITHOUT_CLASSIFICATION	4.8487511325494886E-8	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999925470223953	WITHOUT_CLASSIFICATION	7.45297760480401E-6	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999999596066423	WITHOUT_CLASSIFICATION	4.0393357654987676E-8	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999997945757269	WITHOUT_CLASSIFICATION	2.0542427312048433E-7	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999942924968432	WITHOUT_CLASSIFICATION	5.707503156832592E-6	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999943775965439	WITHOUT_CLASSIFICATION	5.6224034561353495E-6	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.999999088824669	WITHOUT_CLASSIFICATION	9.111753310044439E-7	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999988016547765	WITHOUT_CLASSIFICATION	1.1983452235377283E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999995860640501	WITHOUT_CLASSIFICATION	4.1393594985135894E-7	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999986288053744	WITHOUT_CLASSIFICATION	1.3711946256459384E-6	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999931233125566	WITHOUT_CLASSIFICATION	6.876687443354166E-6	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999993721315313	WITHOUT_CLASSIFICATION	6.27868468695402E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9999798906317613	WITHOUT_CLASSIFICATION	2.010936823870467E-5	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9999904148103129	WITHOUT_CLASSIFICATION	9.585189687023356E-6	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.999999948992216	WITHOUT_CLASSIFICATION	5.100778406376409E-8	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999964479571828	WITHOUT_CLASSIFICATION	3.5520428171742087E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999990834679632	WITHOUT_CLASSIFICATION	9.165320368529449E-7	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999893581319109	WITHOUT_CLASSIFICATION	1.0641868089118872E-5	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999989611231038	WITHOUT_CLASSIFICATION	1.0388768961664578E-6	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999968706004864	WITHOUT_CLASSIFICATION	3.129399513648674E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999996124272063	WITHOUT_CLASSIFICATION	3.875727937948961E-7	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999974132284328	WITHOUT_CLASSIFICATION	2.5867715671913158E-6	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.999998290506847	WITHOUT_CLASSIFICATION	1.7094931530847672E-6	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999996604677225	WITHOUT_CLASSIFICATION	3.395322775009204E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999978498162263	WITHOUT_CLASSIFICATION	2.150183773680831E-6	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999998181580333	WITHOUT_CLASSIFICATION	1.8184196682565453E-7	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999991680122068	WITHOUT_CLASSIFICATION	8.319877931672127E-7	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999942559500017	WITHOUT_CLASSIFICATION	5.744049998306716E-6	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999979873348439	WITHOUT_CLASSIFICATION	2.0126651561161774E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9998713625151295	WITHOUT_CLASSIFICATION	1.2863748487038017E-4	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999984927860539	WITHOUT_CLASSIFICATION	1.5072139461234592E-6	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999994931852217	WITHOUT_CLASSIFICATION	5.068147783317667E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999962942683049	WITHOUT_CLASSIFICATION	3.7057316950623376E-6	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999962942683049	WITHOUT_CLASSIFICATION	3.7057316950623376E-6	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999978349555803	WITHOUT_CLASSIFICATION	2.1650444197242135E-6	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999978349555803	WITHOUT_CLASSIFICATION	2.1650444197242135E-6	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999715654632028	WITHOUT_CLASSIFICATION	2.8434536797305437E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999715654632028	WITHOUT_CLASSIFICATION	2.8434536797305437E-5	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999998154821719	WITHOUT_CLASSIFICATION	1.8451782821744267E-7	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999996375785966	WITHOUT_CLASSIFICATION	3.624214034829237E-7	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999190917502306	WITHOUT_CLASSIFICATION	8.090824976936421E-5	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999999518961832	WITHOUT_CLASSIFICATION	4.8103816882418985E-8	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999998304640904	WITHOUT_CLASSIFICATION	1.6953590957900618E-7	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999017078763573	WITHOUT_CLASSIFICATION	9.829212364265268E-5	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999956616334584	WITHOUT_CLASSIFICATION	4.338366541516489E-6	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999987473396972	WITHOUT_CLASSIFICATION	1.2526603027915314E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999970723529831	WITHOUT_CLASSIFICATION	2.9276470168641113E-6	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999964693175399	WITHOUT_CLASSIFICATION	3.530682460051945E-6	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999827201133606	WITHOUT_CLASSIFICATION	1.7279886639361426E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999980965711378	WITHOUT_CLASSIFICATION	1.9034288622599857E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.999967708667738	WITHOUT_CLASSIFICATION	3.229133226196945E-5	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999990037532003	WITHOUT_CLASSIFICATION	9.962467997007289E-7	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999928443460675	WITHOUT_CLASSIFICATION	7.15565393253485E-6	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999897054316593	WITHOUT_CLASSIFICATION	1.0294568340667477E-5	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999998975145182	WITHOUT_CLASSIFICATION	1.0248548167518862E-7	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999918177750563	WITHOUT_CLASSIFICATION	8.182224943704275E-6	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999960418738741	WITHOUT_CLASSIFICATION	3.958126125934209E-6	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999919336155269	WITHOUT_CLASSIFICATION	8.066384473136418E-6	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.999992240222084	WITHOUT_CLASSIFICATION	7.759777915975912E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999947881923991	WITHOUT_CLASSIFICATION	5.211807600860186E-6	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999894609334787	WITHOUT_CLASSIFICATION	1.0539066521279523E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999870441934161	WITHOUT_CLASSIFICATION	1.2955806583791804E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.999998676751172	WITHOUT_CLASSIFICATION	1.3232488280371318E-6	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999997020695586	WITHOUT_CLASSIFICATION	2.9793044135354084E-7	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999953747702377	WITHOUT_CLASSIFICATION	4.625229762341911E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999919396890041	WITHOUT_CLASSIFICATION	8.060310995920723E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999919396890041	WITHOUT_CLASSIFICATION	8.060310995920723E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999919396890041	WITHOUT_CLASSIFICATION	8.060310995920723E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999247833571	WITHOUT_CLASSIFICATION	7.521664292382166E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999247833571	WITHOUT_CLASSIFICATION	7.521664292382166E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999946992892247	WITHOUT_CLASSIFICATION	5.300710775378784E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999946992892247	WITHOUT_CLASSIFICATION	5.300710775378784E-6	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.999996154220275	WITHOUT_CLASSIFICATION	3.845779725017556E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9992599992881798	WITHOUT_CLASSIFICATION	7.400007118202324E-4	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999962052512862	WITHOUT_CLASSIFICATION	3.794748713888048E-6	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999960637493867	WITHOUT_CLASSIFICATION	3.936250613413782E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999919396890041	WITHOUT_CLASSIFICATION	8.060310995920723E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999919396890041	WITHOUT_CLASSIFICATION	8.060310995920723E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999919396890041	WITHOUT_CLASSIFICATION	8.060310995920723E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999247833571	WITHOUT_CLASSIFICATION	7.521664292382166E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999247833571	WITHOUT_CLASSIFICATION	7.521664292382166E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999247833571	WITHOUT_CLASSIFICATION	7.521664292382166E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999946992892247	WITHOUT_CLASSIFICATION	5.300710775378784E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999946992892247	WITHOUT_CLASSIFICATION	5.300710775378784E-6	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999999467228358	WITHOUT_CLASSIFICATION	5.32771642558011E-8	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999966397834119	WITHOUT_CLASSIFICATION	3.3602165880730202E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999823483986	WITHOUT_CLASSIFICATION	1.7651601361368306E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999823483986	WITHOUT_CLASSIFICATION	1.7651601361368306E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999823483986	WITHOUT_CLASSIFICATION	1.7651601361368306E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999823483986	WITHOUT_CLASSIFICATION	1.7651601361368306E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999823483986	WITHOUT_CLASSIFICATION	1.7651601361368306E-8	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.999997550404143	WITHOUT_CLASSIFICATION	2.4495958569957533E-6	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999977578735643	WITHOUT_CLASSIFICATION	2.2421264357339316E-6	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9999212162971669	WITHOUT_CLASSIFICATION	7.878370283309745E-5	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.999998921451658	WITHOUT_CLASSIFICATION	1.0785483419020764E-6	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999854506362869	WITHOUT_CLASSIFICATION	1.4549363713106436E-5	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999997978771775	WITHOUT_CLASSIFICATION	2.0212282242405294E-7	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999921299018351	WITHOUT_CLASSIFICATION	7.870098164988185E-6	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999915580197254	WITHOUT_CLASSIFICATION	8.441980274641475E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999981319249834	WITHOUT_CLASSIFICATION	1.8680750165334037E-6	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999733745448127	WITHOUT_CLASSIFICATION	2.6625455187294544E-5	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999900982046702	WITHOUT_CLASSIFICATION	9.901795329790305E-6	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999798232598807	WITHOUT_CLASSIFICATION	2.0176740119355252E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9999849987292994	WITHOUT_CLASSIFICATION	1.5001270700623927E-5	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999960095604837	WITHOUT_CLASSIFICATION	3.990439516261617E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9997316510683678	WITHOUT_CLASSIFICATION	2.683489316321985E-4	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999481606597217	WITHOUT_CLASSIFICATION	5.183934027823503E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999481606597217	WITHOUT_CLASSIFICATION	5.183934027823503E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999481606597217	WITHOUT_CLASSIFICATION	5.183934027823503E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999507630685639	WITHOUT_CLASSIFICATION	4.923693143611436E-5	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999507615726727	WITHOUT_CLASSIFICATION	4.923842732730007E-5	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999942037893225	WITHOUT_CLASSIFICATION	5.796210677590434E-6	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999992349246171	WITHOUT_CLASSIFICATION	7.650753830752765E-7	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999950891564096	WITHOUT_CLASSIFICATION	4.9108435904760296E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999988739162107	WITHOUT_CLASSIFICATION	1.1260837893424798E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999977728620248	WITHOUT_CLASSIFICATION	2.2271379751293996E-6	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999963071177267	WITHOUT_CLASSIFICATION	3.692882273238702E-6	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999966434747487	WITHOUT_CLASSIFICATION	3.356525251322901E-6	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.999997296605554	WITHOUT_CLASSIFICATION	2.703394445917499E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999954790771647	WITHOUT_CLASSIFICATION	4.520922835358835E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999935509655247	WITHOUT_CLASSIFICATION	6.449034475310997E-6	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999977240925632	WITHOUT_CLASSIFICATION	2.2759074367827185E-6	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999989810442315	WITHOUT_CLASSIFICATION	1.0189557685313363E-6	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999990224582902	WITHOUT_CLASSIFICATION	9.775417098573119E-7	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999981801806966	WITHOUT_CLASSIFICATION	1.8198193034156147E-6	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999984283582863	WITHOUT_CLASSIFICATION	1.5716417135826101E-6	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999979981717341	WITHOUT_CLASSIFICATION	2.0018282659146694E-6	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999920107861677	WITHOUT_CLASSIFICATION	7.98921383226269E-6	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999669112396777	WITHOUT_CLASSIFICATION	3.308876032228129E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9999861094451786	WITHOUT_CLASSIFICATION	1.3890554821433358E-5	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999965096044307	WITHOUT_CLASSIFICATION	3.490395569251373E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9999951551115968	WITHOUT_CLASSIFICATION	4.844888403183795E-6	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999931318070245	WITHOUT_CLASSIFICATION	6.868192975443232E-6	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999946993590093	WITHOUT_CLASSIFICATION	5.300640990717156E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999926486848619	WITHOUT_CLASSIFICATION	7.351315138084924E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999941104900608	WITHOUT_CLASSIFICATION	5.8895099391761115E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999960293772039	WITHOUT_CLASSIFICATION	3.970622796125124E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999601017981519	WITHOUT_CLASSIFICATION	3.9898201848171156E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999653319737858	WITHOUT_CLASSIFICATION	3.466802621422728E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9999747809128665	WITHOUT_CLASSIFICATION	2.521908713355078E-5	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999703589159675	WITHOUT_CLASSIFICATION	2.9641084032386772E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9999621845192234	WITHOUT_CLASSIFICATION	3.7815480776622686E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999658125576727	WITHOUT_CLASSIFICATION	3.418744232732792E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9999631332706487	WITHOUT_CLASSIFICATION	3.686672935141843E-5	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9999661609634821	WITHOUT_CLASSIFICATION	3.383903651785158E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999965911848934	WITHOUT_CLASSIFICATION	3.4088151065173053E-6	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999793598693107	WITHOUT_CLASSIFICATION	2.0640130689161986E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999887020812	WITHOUT_CLASSIFICATION	1.1297918860708468E-8	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9999834311890211	WITHOUT_CLASSIFICATION	1.6568810978908466E-5	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999984996123817	WITHOUT_CLASSIFICATION	1.500387618332184E-6	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9999980700771034	WITHOUT_CLASSIFICATION	1.9299228966048006E-6	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999828298300818	WITHOUT_CLASSIFICATION	1.7170169918237643E-5	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999979008306891	WITHOUT_CLASSIFICATION	2.0991693109240448E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999568202283854	WITHOUT_CLASSIFICATION	4.3179771614633836E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9995223416137291	WITHOUT_CLASSIFICATION	4.776583862707939E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999851742593099	WITHOUT_CLASSIFICATION	1.4825740690266727E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999851742593099	WITHOUT_CLASSIFICATION	1.4825740690266727E-5	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999931782197392	WITHOUT_CLASSIFICATION	6.821780260788584E-6	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999989986926345	WITHOUT_CLASSIFICATION	1.0013073654750146E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9996374338919788	WITHOUT_CLASSIFICATION	3.6256610802121603E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999657026582354	WITHOUT_CLASSIFICATION	3.429734176460627E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999907681814306	WITHOUT_CLASSIFICATION	9.231818569426604E-6	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999979388331514	WITHOUT_CLASSIFICATION	2.061166848614705E-6	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999736438855913	WITHOUT_CLASSIFICATION	2.635611440869445E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999983331470923	WITHOUT_CLASSIFICATION	1.6668529077837617E-6	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.999997755893206	WITHOUT_CLASSIFICATION	2.2441067939180073E-6	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999976708891327	WITHOUT_CLASSIFICATION	2.3291108672576158E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999966669541918	WITHOUT_CLASSIFICATION	3.333045808175349E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999966669541918	WITHOUT_CLASSIFICATION	3.333045808175349E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999966669541918	WITHOUT_CLASSIFICATION	3.333045808175349E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999966669541918	WITHOUT_CLASSIFICATION	3.333045808175349E-6	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999865665838511	WITHOUT_CLASSIFICATION	1.3433416148829558E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999836598680094	WITHOUT_CLASSIFICATION	1.6340131990611738E-5	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999959040016717	WITHOUT_CLASSIFICATION	4.095998328357825E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999959576758263	WITHOUT_CLASSIFICATION	4.042324173714215E-6	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9998826852735104	WITHOUT_CLASSIFICATION	1.1731472648964769E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.999996424650989	WITHOUT_CLASSIFICATION	3.5753490109808087E-6	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999489263735042	WITHOUT_CLASSIFICATION	5.107362649584913E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999880652597704	WITHOUT_CLASSIFICATION	1.1934740229606922E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999880652597704	WITHOUT_CLASSIFICATION	1.1934740229606922E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.999999954672108	WITHOUT_CLASSIFICATION	4.532789201481022E-8	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999902421766338	WITHOUT_CLASSIFICATION	9.757823366292859E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999939994633001	WITHOUT_CLASSIFICATION	6.00053669987079E-6	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999992713097015	WITHOUT_CLASSIFICATION	7.286902984814847E-7	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999992713097015	WITHOUT_CLASSIFICATION	7.286902984814847E-7	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9999996880576859	WITHOUT_CLASSIFICATION	3.119423141166715E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999996686868161	WITHOUT_CLASSIFICATION	3.3131318393518316E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999996686868161	WITHOUT_CLASSIFICATION	3.3131318393518316E-7	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9999876239168065	WITHOUT_CLASSIFICATION	1.2376083193503947E-5	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999998698702328	WITHOUT_CLASSIFICATION	1.3012976724483118E-7	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.999999968159257	WITHOUT_CLASSIFICATION	3.184074298506077E-8	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9999995227606537	WITHOUT_CLASSIFICATION	4.772393462688924E-7	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999715173867856	WITHOUT_CLASSIFICATION	2.8482613214416483E-5	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999519968914585	WITHOUT_CLASSIFICATION	4.800310854141107E-5	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9999930262986785	WITHOUT_CLASSIFICATION	6.973701321540738E-6	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999772271841801	WITHOUT_CLASSIFICATION	2.2772815819916564E-5	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999997933352491	WITHOUT_CLASSIFICATION	2.0666475074629373E-7	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.999994117868657	WITHOUT_CLASSIFICATION	5.882131343064518E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999845912350906	WITHOUT_CLASSIFICATION	1.5408764909332257E-5	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999968630392411	WITHOUT_CLASSIFICATION	3.136960758861202E-6	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999756889737329	WITHOUT_CLASSIFICATION	2.4311026267021556E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999742149967182	WITHOUT_CLASSIFICATION	2.578500328176844E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999940688691209	WITHOUT_CLASSIFICATION	5.931130879078115E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999983263301248	WITHOUT_CLASSIFICATION	1.673669875206205E-6	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999947150127877	WITHOUT_CLASSIFICATION	5.28498721239217E-6	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.999997739428332	WITHOUT_CLASSIFICATION	2.260571668010085E-6	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999973815522146	WITHOUT_CLASSIFICATION	2.6184477853016E-6	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9999400352188291	WITHOUT_CLASSIFICATION	5.996478117083219E-5	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9999959425530083	WITHOUT_CLASSIFICATION	4.057446991777346E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999920687205228	WITHOUT_CLASSIFICATION	7.931279477251628E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999900640370748	WITHOUT_CLASSIFICATION	9.93596292511573E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9998420590734497	WITHOUT_CLASSIFICATION	1.5794092655024936E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999862543120596	WITHOUT_CLASSIFICATION	1.3745687940351901E-5	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9999663874672633	WITHOUT_CLASSIFICATION	3.3612532736677576E-5	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999922980056448	WITHOUT_CLASSIFICATION	7.701994355184471E-6	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999986795862091	WITHOUT_CLASSIFICATION	1.320413790884858E-6	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999995452098452	WITHOUT_CLASSIFICATION	4.5479015486208016E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.999999758610944	WITHOUT_CLASSIFICATION	2.4138905594069794E-7	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999872406885841	WITHOUT_CLASSIFICATION	1.2759311415884266E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999989656054449	WITHOUT_CLASSIFICATION	1.034394555101157E-6	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9184325840973862	WITHOUT_CLASSIFICATION	0.08156741590261382	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999982314532879	WITHOUT_CLASSIFICATION	1.7685467120719238E-6	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999982478432116	WITHOUT_CLASSIFICATION	1.7521567884483001E-6	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999862017719321	WITHOUT_CLASSIFICATION	1.3798228067876973E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999809566265528	WITHOUT_CLASSIFICATION	1.9043373447127176E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999940779321539	WITHOUT_CLASSIFICATION	5.922067846114539E-6	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999972311704892	WITHOUT_CLASSIFICATION	2.768829510855588E-6	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999862017719321	WITHOUT_CLASSIFICATION	1.3798228067876973E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999809566265528	WITHOUT_CLASSIFICATION	1.9043373447127176E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999965720429881	WITHOUT_CLASSIFICATION	3.4279570118392636E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.999994778379217	WITHOUT_CLASSIFICATION	5.221620783027302E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.999994778379217	WITHOUT_CLASSIFICATION	5.221620783027302E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999945408256284	WITHOUT_CLASSIFICATION	5.459174371547201E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999994012243278	WITHOUT_CLASSIFICATION	5.987756722323378E-7	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999768524991149	WITHOUT_CLASSIFICATION	2.3147500884980177E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999883252367828	WITHOUT_CLASSIFICATION	1.1674763217107154E-5	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999480587920255	WITHOUT_CLASSIFICATION	5.194120797455132E-5	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9999245275709997	WITHOUT_CLASSIFICATION	7.547242900031074E-5	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999948781340995	WITHOUT_CLASSIFICATION	5.1218659005769E-6	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999972026108294	WITHOUT_CLASSIFICATION	2.7973891705990424E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999983362898277	WITHOUT_CLASSIFICATION	1.6637101722182909E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999875799765114	WITHOUT_CLASSIFICATION	1.2420023488472834E-5	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999934096757707	WITHOUT_CLASSIFICATION	6.590324229279852E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999978509557936	WITHOUT_CLASSIFICATION	2.149044206415385E-6	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999913621269914	WITHOUT_CLASSIFICATION	8.63787300864315E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999992416474569	WITHOUT_CLASSIFICATION	7.583525430825658E-7	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999992416474569	WITHOUT_CLASSIFICATION	7.583525430825658E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999971780447415	WITHOUT_CLASSIFICATION	2.821955258349125E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999971780447415	WITHOUT_CLASSIFICATION	2.821955258349125E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999975124895893	WITHOUT_CLASSIFICATION	2.487510410600535E-6	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999952697276787	WITHOUT_CLASSIFICATION	4.730272321300139E-6	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.999995830710738	WITHOUT_CLASSIFICATION	4.169289261923689E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999944717190377	WITHOUT_CLASSIFICATION	5.528280962362996E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999854094503734	WITHOUT_CLASSIFICATION	1.4590549626516055E-5	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999979334919149	WITHOUT_CLASSIFICATION	2.0665080850498157E-6	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999768524991149	WITHOUT_CLASSIFICATION	2.3147500884980177E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999883252367828	WITHOUT_CLASSIFICATION	1.1674763217107154E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999983362898277	WITHOUT_CLASSIFICATION	1.6637101722182909E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999875799765114	WITHOUT_CLASSIFICATION	1.2420023488472834E-5	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999985367763449	WITHOUT_CLASSIFICATION	1.4632236550081268E-6	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.99999842937241	WITHOUT_CLASSIFICATION	1.5706275898924653E-6	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999896134954666	WITHOUT_CLASSIFICATION	1.0386504533423365E-5	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999949244827373	WITHOUT_CLASSIFICATION	5.075517262641275E-6	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999981689991203	WITHOUT_CLASSIFICATION	1.8310008796085881E-6	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999690333745271	WITHOUT_CLASSIFICATION	3.0966625472852895E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9999808853114261	WITHOUT_CLASSIFICATION	1.911468857394026E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999890220321479	WITHOUT_CLASSIFICATION	1.0977967852078565E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999999370280297	WITHOUT_CLASSIFICATION	6.29719703890315E-8	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999990038959458	WITHOUT_CLASSIFICATION	9.9610405424569E-7	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999999492098557	WITHOUT_CLASSIFICATION	5.079014431983907E-8	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999996705353058	WITHOUT_CLASSIFICATION	3.2946469423276626E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999959721372697	WITHOUT_CLASSIFICATION	4.0278627303935155E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999985393874915	WITHOUT_CLASSIFICATION	1.4606125084244477E-6	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999986448307409	WITHOUT_CLASSIFICATION	1.3551692591372678E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999908434767819	WITHOUT_CLASSIFICATION	9.156523218054347E-6	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999822229009772	WITHOUT_CLASSIFICATION	1.7777099022814894E-5	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999915175249974	WITHOUT_CLASSIFICATION	8.482475002642565E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.999988080009132	WITHOUT_CLASSIFICATION	1.191999086811799E-5	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999972482548543	WITHOUT_CLASSIFICATION	2.7517451457208687E-6	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999968742028339	WITHOUT_CLASSIFICATION	3.1257971661113144E-6	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999968742028339	WITHOUT_CLASSIFICATION	3.1257971661113144E-6	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999822532453744	WITHOUT_CLASSIFICATION	1.7746754625626804E-5	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999524435126259	WITHOUT_CLASSIFICATION	4.755648737396646E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999411525083793	WITHOUT_CLASSIFICATION	5.884749162057756E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999967611779529	WITHOUT_CLASSIFICATION	3.2388220470093075E-6	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999967611779529	WITHOUT_CLASSIFICATION	3.2388220470093075E-6	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999896134954666	WITHOUT_CLASSIFICATION	1.0386504533423365E-5	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999878858579355	WITHOUT_CLASSIFICATION	1.2114142064460459E-5	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999980507133329	WITHOUT_CLASSIFICATION	1.9492866670909867E-6	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999985489505874	WITHOUT_CLASSIFICATION	1.4510494126282709E-6	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.999997495671423	WITHOUT_CLASSIFICATION	2.5043285769073783E-6	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.999997659299774	WITHOUT_CLASSIFICATION	2.3407002259603966E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999419044870584	WITHOUT_CLASSIFICATION	5.809551294161547E-5	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999969781671352	WITHOUT_CLASSIFICATION	3.0218328647506624E-6	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999956865974164	WITHOUT_CLASSIFICATION	4.3134025835419256E-6	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999953949688192	WITHOUT_CLASSIFICATION	4.605031180848299E-6	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999814552055486	WITHOUT_CLASSIFICATION	1.8544794451425768E-5	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999629861941253	WITHOUT_CLASSIFICATION	3.701380587461804E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999978957650734	WITHOUT_CLASSIFICATION	2.10423492668848E-6	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999961816068959	WITHOUT_CLASSIFICATION	3.818393104177703E-6	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999767636490821	WITHOUT_CLASSIFICATION	2.3236350917987772E-5	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999933869989364	WITHOUT_CLASSIFICATION	6.613001063610277E-6	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9998364405717248	WITHOUT_CLASSIFICATION	1.6355942827520482E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.999999082026963	WITHOUT_CLASSIFICATION	9.179730370806819E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999998524893733	WITHOUT_CLASSIFICATION	1.4751062670555832E-7	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999998989801526	WITHOUT_CLASSIFICATION	1.0101984731412746E-7	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999997560229577	WITHOUT_CLASSIFICATION	2.4397704233289693E-7	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.999994622409621	WITHOUT_CLASSIFICATION	5.377590378982526E-6	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999973497145839	WITHOUT_CLASSIFICATION	2.6502854160482558E-6	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999946234617446	WITHOUT_CLASSIFICATION	5.376538255397605E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.999993767115612	WITHOUT_CLASSIFICATION	6.23288438800122E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.999996784360027	WITHOUT_CLASSIFICATION	3.2156399729508245E-6	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999989979445327	WITHOUT_CLASSIFICATION	1.0020554673582768E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999905530259275	WITHOUT_CLASSIFICATION	9.446974072429379E-6	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999999884398613	WITHOUT_CLASSIFICATION	1.1560138723632008E-8	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999991203844494	WITHOUT_CLASSIFICATION	8.79615550524745E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999988300689134	WITHOUT_CLASSIFICATION	1.1699310865590296E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999988300689134	WITHOUT_CLASSIFICATION	1.1699310865590296E-6	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.999999603887897	WITHOUT_CLASSIFICATION	3.9611210302174357E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999966067525607	WITHOUT_CLASSIFICATION	3.393247439128745E-6	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999966067525607	WITHOUT_CLASSIFICATION	3.393247439128745E-6	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999966920674871	WITHOUT_CLASSIFICATION	3.3079325129977742E-6	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999966920674871	WITHOUT_CLASSIFICATION	3.3079325129977742E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999952634142834	WITHOUT_CLASSIFICATION	4.7365857166279715E-6	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999536661932155	WITHOUT_CLASSIFICATION	4.6333806784495756E-5	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.999996879249846	WITHOUT_CLASSIFICATION	3.1207501539389514E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999914301222329	WITHOUT_CLASSIFICATION	8.56987776709586E-6	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999988961536327	WITHOUT_CLASSIFICATION	1.1038463673260616E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999828252172884	WITHOUT_CLASSIFICATION	1.717478271149398E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999828252172884	WITHOUT_CLASSIFICATION	1.717478271149398E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.999993767115612	WITHOUT_CLASSIFICATION	6.23288438800122E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.999993767115612	WITHOUT_CLASSIFICATION	6.23288438800122E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.999993767115612	WITHOUT_CLASSIFICATION	6.23288438800122E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.999996784360027	WITHOUT_CLASSIFICATION	3.2156399729508245E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999988300689134	WITHOUT_CLASSIFICATION	1.1699310865590296E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999988300689134	WITHOUT_CLASSIFICATION	1.1699310865590296E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999988300689134	WITHOUT_CLASSIFICATION	1.1699310865590296E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999952634142834	WITHOUT_CLASSIFICATION	4.7365857166279715E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999952634142834	WITHOUT_CLASSIFICATION	4.7365857166279715E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999952634142834	WITHOUT_CLASSIFICATION	4.7365857166279715E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999914301222329	WITHOUT_CLASSIFICATION	8.56987776709586E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999914301222329	WITHOUT_CLASSIFICATION	8.56987776709586E-6	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999987523359661	WITHOUT_CLASSIFICATION	1.247664033874493E-6	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999965232702464	WITHOUT_CLASSIFICATION	3.4767297535996565E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999982101975317	WITHOUT_CLASSIFICATION	1.789802468407474E-6	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.7352056287716989	WITHOUT_CLASSIFICATION	0.2647943712283012	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999245425084153	WITHOUT_CLASSIFICATION	7.545749158468846E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999931794672107	WITHOUT_CLASSIFICATION	6.820532789401991E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999931794672107	WITHOUT_CLASSIFICATION	6.820532789401991E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999948586161153	WITHOUT_CLASSIFICATION	5.141383884798022E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999419044870584	WITHOUT_CLASSIFICATION	5.809551294161547E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999419044870584	WITHOUT_CLASSIFICATION	5.809551294161547E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999419044870584	WITHOUT_CLASSIFICATION	5.809551294161547E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999419044870584	WITHOUT_CLASSIFICATION	5.809551294161547E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999419044870584	WITHOUT_CLASSIFICATION	5.809551294161547E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999263548726	WITHOUT_CLASSIFICATION	7.36451274429251E-8	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999263548726	WITHOUT_CLASSIFICATION	7.36451274429251E-8	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999263548726	WITHOUT_CLASSIFICATION	7.36451274429251E-8	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.999940681594097	WITHOUT_CLASSIFICATION	5.9318405902957564E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999503498327345	WITHOUT_CLASSIFICATION	4.9650167265594246E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.999996784360027	WITHOUT_CLASSIFICATION	3.2156399729508245E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999952634142834	WITHOUT_CLASSIFICATION	4.7365857166279715E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999952634142834	WITHOUT_CLASSIFICATION	4.7365857166279715E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999419044870584	WITHOUT_CLASSIFICATION	5.809551294161547E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999419044870584	WITHOUT_CLASSIFICATION	5.809551294161547E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999263548726	WITHOUT_CLASSIFICATION	7.36451274429251E-8	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999948586161153	WITHOUT_CLASSIFICATION	5.141383884798022E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.999998677454459	WITHOUT_CLASSIFICATION	1.32254554105179E-6	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.999994429274907	WITHOUT_CLASSIFICATION	5.570725092989036E-6	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999992641774855	WITHOUT_CLASSIFICATION	7.358225143795035E-7	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999808945911237	WITHOUT_CLASSIFICATION	1.9105408876364787E-5	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999939543944772	WITHOUT_CLASSIFICATION	6.045605522749015E-6	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999842168625116	WITHOUT_CLASSIFICATION	1.5783137488393508E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999892736520257	WITHOUT_CLASSIFICATION	1.0726347974310574E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999222298737687	WITHOUT_CLASSIFICATION	7.777012623130069E-5	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999919459688472	WITHOUT_CLASSIFICATION	8.05403115277276E-6	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999985259068279	WITHOUT_CLASSIFICATION	1.4740931720448665E-6	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999981378571907	WITHOUT_CLASSIFICATION	1.8621428092687334E-6	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999956439621	WITHOUT_CLASSIFICATION	4.3560379000229674E-6	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999899945387242	WITHOUT_CLASSIFICATION	1.000546127576224E-5	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999988636805387	WITHOUT_CLASSIFICATION	1.136319461301234E-6	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.99999713899324	WITHOUT_CLASSIFICATION	2.861006759875103E-6	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999950995469487	WITHOUT_CLASSIFICATION	4.900453051325778E-6	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999970624625372	WITHOUT_CLASSIFICATION	2.9375374628395668E-6	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999996535651978	WITHOUT_CLASSIFICATION	3.464348021949973E-7	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999614933560543	WITHOUT_CLASSIFICATION	3.850664394560518E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.999994482830389	WITHOUT_CLASSIFICATION	5.5171696109407054E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999808923235616	WITHOUT_CLASSIFICATION	1.9107676438404556E-5	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.999996319572243	WITHOUT_CLASSIFICATION	3.6804277569613674E-6	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.999998283648716	WITHOUT_CLASSIFICATION	1.7163512838959546E-6	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999987965999542	WITHOUT_CLASSIFICATION	1.2034000457584234E-6	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999415854588851	WITHOUT_CLASSIFICATION	5.841454111483327E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999881284858584	WITHOUT_CLASSIFICATION	1.1871514141711817E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999963977548991	WITHOUT_CLASSIFICATION	3.602245100838169E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999995078921817	WITHOUT_CLASSIFICATION	4.921078182396508E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999989939544807	WITHOUT_CLASSIFICATION	1.0060455193542656E-6	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999968649867085	WITHOUT_CLASSIFICATION	3.1350132916254767E-6	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999999557605228	WITHOUT_CLASSIFICATION	4.423947720886252E-8	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999992157268852	WITHOUT_CLASSIFICATION	7.842731148526268E-7	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999941210141233	WITHOUT_CLASSIFICATION	5.8789858767849894E-6	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999882324050704	WITHOUT_CLASSIFICATION	1.1767594929559389E-5	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.999998677454459	WITHOUT_CLASSIFICATION	1.32254554105179E-6	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999993083598356	WITHOUT_CLASSIFICATION	6.916401643348068E-7	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9997825011547123	WITHOUT_CLASSIFICATION	2.1749884528771935E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9999991254822032	WITHOUT_CLASSIFICATION	8.745177968491547E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999974661786379	WITHOUT_CLASSIFICATION	2.5338213619680486E-6	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999974661786379	WITHOUT_CLASSIFICATION	2.5338213619680486E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999649986329392	WITHOUT_CLASSIFICATION	3.500136706070405E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999649986329392	WITHOUT_CLASSIFICATION	3.500136706070405E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999844375947795	WITHOUT_CLASSIFICATION	1.5562405220564316E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999733223119988	WITHOUT_CLASSIFICATION	2.6677688001195154E-5	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999722338249675	WITHOUT_CLASSIFICATION	2.7766175032483538E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999918273380449	WITHOUT_CLASSIFICATION	8.17266195505824E-6	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999993296715473	WITHOUT_CLASSIFICATION	6.703284527884517E-7	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999991213020533	WITHOUT_CLASSIFICATION	8.786979468336029E-7	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999985649288776	WITHOUT_CLASSIFICATION	1.4350711223710486E-6	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999989871458769	WITHOUT_CLASSIFICATION	1.0128541231036777E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999998046498921	WITHOUT_CLASSIFICATION	1.9535010797062326E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999991842950067	WITHOUT_CLASSIFICATION	8.157049933858477E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999983876577937	WITHOUT_CLASSIFICATION	1.6123422062449969E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999989163773452	WITHOUT_CLASSIFICATION	1.0836226548302925E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999989163773452	WITHOUT_CLASSIFICATION	1.0836226548302925E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999872251740043	WITHOUT_CLASSIFICATION	1.2774825995635278E-5	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999999308801242	WITHOUT_CLASSIFICATION	6.911987585848021E-8	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999994201359744	WITHOUT_CLASSIFICATION	5.798640255378083E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999994201359744	WITHOUT_CLASSIFICATION	5.798640255378083E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999200994382403	WITHOUT_CLASSIFICATION	7.990056175972477E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999989074119735	WITHOUT_CLASSIFICATION	1.09258802645472E-6	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999910899175173	WITHOUT_CLASSIFICATION	8.910082482787039E-6	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.999984675967709	WITHOUT_CLASSIFICATION	1.5324032291073116E-5	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.999994767414869	WITHOUT_CLASSIFICATION	5.232585131039005E-6	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.999969478122158	WITHOUT_CLASSIFICATION	3.052187784199799E-5	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999975100699007	WITHOUT_CLASSIFICATION	2.4899300992990624E-6	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999996075086068	WITHOUT_CLASSIFICATION	3.9249139317351244E-7	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9992326493061491	WITHOUT_CLASSIFICATION	7.673506938507826E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999818767851282	WITHOUT_CLASSIFICATION	1.812321487185587E-5	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999920306557887	WITHOUT_CLASSIFICATION	7.969344211334695E-6	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999975484683178	WITHOUT_CLASSIFICATION	2.4515316822643248E-6	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.999999505459351	WITHOUT_CLASSIFICATION	4.945406490662836E-7	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999942755796695	WITHOUT_CLASSIFICATION	5.7244203305525395E-6	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999980188919474	WITHOUT_CLASSIFICATION	1.9811080525861226E-6	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.999994641691139	WITHOUT_CLASSIFICATION	5.358308861023952E-6	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.999995354683926	WITHOUT_CLASSIFICATION	4.645316074017221E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999979648673281	WITHOUT_CLASSIFICATION	2.0351326718231892E-6	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.99999609334943	WITHOUT_CLASSIFICATION	3.906650570044155E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999229917705573	WITHOUT_CLASSIFICATION	7.700822944264661E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9950263238591134	WITHOUT_CLASSIFICATION	0.004973676140886654	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999934741399272	WITHOUT_CLASSIFICATION	6.525860072752507E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999929109351039	WITHOUT_CLASSIFICATION	7.089064896095882E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999980850185246	WITHOUT_CLASSIFICATION	1.9149814754926845E-6	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999887766178694	WITHOUT_CLASSIFICATION	1.1223382130568158E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999973685455444	WITHOUT_CLASSIFICATION	2.631454455595845E-6	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999856076433745	WITHOUT_CLASSIFICATION	1.4392356625450938E-5	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999702748003119	WITHOUT_CLASSIFICATION	2.9725199688200634E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999645492880271	WITHOUT_CLASSIFICATION	3.545071197294474E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999997951590363	WITHOUT_CLASSIFICATION	2.048409637010391E-7	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999954399681862	WITHOUT_CLASSIFICATION	4.560031813881977E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999995342219484	WITHOUT_CLASSIFICATION	4.657780516334615E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999990245750199	WITHOUT_CLASSIFICATION	9.754249801645205E-7	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999913100891615	WITHOUT_CLASSIFICATION	8.689910838600413E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999913100891615	WITHOUT_CLASSIFICATION	8.689910838600413E-6	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999948766188982	WITHOUT_CLASSIFICATION	5.123381101847239E-6	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999965701963096	WITHOUT_CLASSIFICATION	3.4298036904991504E-6	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999986048482046	WITHOUT_CLASSIFICATION	1.3951517954097426E-6	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999933722047558	WITHOUT_CLASSIFICATION	6.6277952441253715E-6	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999801352394806	WITHOUT_CLASSIFICATION	1.9864760519455346E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999954999731607	WITHOUT_CLASSIFICATION	4.5000268392703405E-6	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.99989266868718	WITHOUT_CLASSIFICATION	1.0733131282004399E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9998763623667671	WITHOUT_CLASSIFICATION	1.2363763323281512E-4	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.998983640134653	WITHOUT_CLASSIFICATION	0.001016359865346975	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999892168032108	WITHOUT_CLASSIFICATION	1.0783196789194494E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.999993806142033	WITHOUT_CLASSIFICATION	6.193857967037917E-6	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9999503619646088	WITHOUT_CLASSIFICATION	4.963803539120703E-5	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999663364367916	WITHOUT_CLASSIFICATION	3.3663563208493765E-5	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999678105294235	WITHOUT_CLASSIFICATION	3.218947057653397E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.999999758466752	WITHOUT_CLASSIFICATION	2.4153324792791373E-7	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999987157550659	WITHOUT_CLASSIFICATION	1.2842449340346213E-6	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999999205528352	WITHOUT_CLASSIFICATION	7.944716481995249E-8	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999954697967913	WITHOUT_CLASSIFICATION	4.530203208760622E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999921250225716	WITHOUT_CLASSIFICATION	7.874977428341592E-6	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999991500006826	WITHOUT_CLASSIFICATION	8.49999317511085E-7	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999999147756216	WITHOUT_CLASSIFICATION	8.522437845363101E-8	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999931215505151	WITHOUT_CLASSIFICATION	6.878449484923897E-6	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999720745103874	WITHOUT_CLASSIFICATION	2.792548961254267E-5	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999866387366321	WITHOUT_CLASSIFICATION	1.3361263367979682E-5	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999978272068525	WITHOUT_CLASSIFICATION	2.1727931475187526E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999990963569725	WITHOUT_CLASSIFICATION	9.036430274271483E-7	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999864132529788	WITHOUT_CLASSIFICATION	1.3586747021139046E-5	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999975250384467	WITHOUT_CLASSIFICATION	2.4749615533315094E-6	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9998255903915428	WITHOUT_CLASSIFICATION	1.7440960845715775E-4	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9999985133925842	WITHOUT_CLASSIFICATION	1.48660741587769E-6	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999937096835733	WITHOUT_CLASSIFICATION	6.290316426667406E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999999731922179	WITHOUT_CLASSIFICATION	2.680778217366606E-8	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999980896266343	WITHOUT_CLASSIFICATION	1.910373365749765E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999837111464954	WITHOUT_CLASSIFICATION	1.628885350458049E-5	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999786205758019	WITHOUT_CLASSIFICATION	2.1379424198069452E-5	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999998823754603	WITHOUT_CLASSIFICATION	1.1762453975533808E-7	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999465054272603	WITHOUT_CLASSIFICATION	5.349457273980099E-5	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999954991177405	WITHOUT_CLASSIFICATION	4.500882259424128E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999956732400811	WITHOUT_CLASSIFICATION	4.326759918912565E-6	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999992097710044	WITHOUT_CLASSIFICATION	7.902289955311669E-7	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999938573238901	WITHOUT_CLASSIFICATION	6.142676109897107E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999803243300195	WITHOUT_CLASSIFICATION	1.967566998058907E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999803243300195	WITHOUT_CLASSIFICATION	1.967566998058907E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999530277112785	WITHOUT_CLASSIFICATION	4.6972288721453236E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999993401347042	WITHOUT_CLASSIFICATION	6.598652958916947E-7	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999906906313214	WITHOUT_CLASSIFICATION	9.30936867866565E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999918664843654	WITHOUT_CLASSIFICATION	8.13351563455298E-6	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999976170375965	WITHOUT_CLASSIFICATION	2.3829624034519696E-6	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999972012698056	WITHOUT_CLASSIFICATION	2.7987301944100898E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999990759224069	WITHOUT_CLASSIFICATION	9.240775930909161E-6	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9999382076322	WITHOUT_CLASSIFICATION	6.179236780002857E-5	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999978547616296	WITHOUT_CLASSIFICATION	2.145238370378766E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999841123434878	WITHOUT_CLASSIFICATION	1.588765651218047E-5	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999606353042182	WITHOUT_CLASSIFICATION	3.936469578175317E-5	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999996696099771	WITHOUT_CLASSIFICATION	3.303900228736678E-7	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999563985593802	WITHOUT_CLASSIFICATION	4.3601440619722184E-5	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999894237075964	WITHOUT_CLASSIFICATION	1.0576292403758077E-5	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999996817338709	WITHOUT_CLASSIFICATION	3.1826612911616437E-7	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9987300847184447	WITHOUT_CLASSIFICATION	0.0012699152815553	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999992345154383	WITHOUT_CLASSIFICATION	7.654845616985025E-7	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999679195652728	WITHOUT_CLASSIFICATION	3.208043472725657E-5	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999994587333915	WITHOUT_CLASSIFICATION	5.412666086045925E-7	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9211847496799798	WITHOUT_CLASSIFICATION	0.07881525032002025	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999959203231421	WITHOUT_CLASSIFICATION	4.0796768578681125E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.999977196739428	WITHOUT_CLASSIFICATION	2.2803260572012116E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.999999739559444	WITHOUT_CLASSIFICATION	2.604405559928173E-7	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999998520147761	WITHOUT_CLASSIFICATION	1.4798522375677349E-7	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.999984646854561	WITHOUT_CLASSIFICATION	1.5353145438971966E-5	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999980849691661	WITHOUT_CLASSIFICATION	1.9150308339270414E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999997432538168	WITHOUT_CLASSIFICATION	2.5674618326824987E-7	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.999997415476723	WITHOUT_CLASSIFICATION	2.58452327702513E-6	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999978881142033	WITHOUT_CLASSIFICATION	2.1118857966926406E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999869366786306	WITHOUT_CLASSIFICATION	1.3063321369447518E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.999998264112837	WITHOUT_CLASSIFICATION	1.735887163032669E-6	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999999627232557	WITHOUT_CLASSIFICATION	3.727674429878572E-7	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999869366786306	WITHOUT_CLASSIFICATION	1.3063321369447518E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999976683239206	WITHOUT_CLASSIFICATION	2.331676079477081E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999862543120596	WITHOUT_CLASSIFICATION	1.3745687940351901E-5	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9999615877400188	WITHOUT_CLASSIFICATION	3.841225998132394E-5	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.5294782770591312	WITHOUT_CLASSIFICATION	0.4705217229408688	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999969011782183	WITHOUT_CLASSIFICATION	3.098821781688392E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999823483986	WITHOUT_CLASSIFICATION	1.7651601361368306E-8	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999995420358759	WITHOUT_CLASSIFICATION	4.579641240208328E-7	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999892595128559	WITHOUT_CLASSIFICATION	1.0740487144178875E-5	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999994012243278	WITHOUT_CLASSIFICATION	5.987756722323378E-7	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999229917705573	WITHOUT_CLASSIFICATION	7.700822944264661E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999982101975317	WITHOUT_CLASSIFICATION	1.789802468407474E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999823061527999	WITHOUT_CLASSIFICATION	1.7693847200100087E-5	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999958586579993	WITHOUT_CLASSIFICATION	4.141342000695278E-6	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999993448929791	WITHOUT_CLASSIFICATION	6.551070209488285E-7	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999135839643412	WITHOUT_CLASSIFICATION	8.64160356589055E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999956411388925	WITHOUT_CLASSIFICATION	4.3588611074541015E-6	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.999843001697561	WITHOUT_CLASSIFICATION	1.5699830243902293E-4	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999971203214827	WITHOUT_CLASSIFICATION	2.879678517435496E-6	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9999997754708756	WITHOUT_CLASSIFICATION	2.2452912437928824E-7	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999954465736258	WITHOUT_CLASSIFICATION	4.553426374195053E-6	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999943419408133	WITHOUT_CLASSIFICATION	5.6580591868103E-6	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999821958949989	WITHOUT_CLASSIFICATION	1.780410500099132E-5	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999972585994154	WITHOUT_CLASSIFICATION	2.74140058463096E-6	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999992226943678	WITHOUT_CLASSIFICATION	7.773056322806144E-7	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999932729117684	WITHOUT_CLASSIFICATION	6.72708823149947E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999898729852512	WITHOUT_CLASSIFICATION	1.0127014748792705E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999885992600772	WITHOUT_CLASSIFICATION	1.1400739922834037E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999995853471231	WITHOUT_CLASSIFICATION	4.1465287698309823E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999994507279484	WITHOUT_CLASSIFICATION	5.492720516579914E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9997954279746798	WITHOUT_CLASSIFICATION	2.0457202532018294E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9997954279746798	WITHOUT_CLASSIFICATION	2.0457202532018294E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999848815994699	WITHOUT_CLASSIFICATION	1.5118400530129303E-5	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999998318304241	WITHOUT_CLASSIFICATION	1.6816957604491342E-7	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999175310232	WITHOUT_CLASSIFICATION	8.246897675152105E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8118067171180041	WITHOUT_CLASSIFICATION	0.18819328288199588	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8118067171180041	WITHOUT_CLASSIFICATION	0.18819328288199588	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8118067171180041	WITHOUT_CLASSIFICATION	0.18819328288199588	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8118067171180041	WITHOUT_CLASSIFICATION	0.18819328288199588	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999997077034348	WITHOUT_CLASSIFICATION	2.9229656518980444E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999998213922615	WITHOUT_CLASSIFICATION	1.7860773837751603E-7	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999976395211754	WITHOUT_CLASSIFICATION	2.3604788246836767E-6	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9990937091389116	WITHOUT_CLASSIFICATION	9.062908610883855E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999984139704118	WITHOUT_CLASSIFICATION	1.5860295882994078E-6	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999867911973999	WITHOUT_CLASSIFICATION	1.3208802600071481E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999976571028487	WITHOUT_CLASSIFICATION	2.342897151310713E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999976571028487	WITHOUT_CLASSIFICATION	2.342897151310713E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9999828132719553	WITHOUT_CLASSIFICATION	1.7186728044691206E-5	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9999512835087128	WITHOUT_CLASSIFICATION	4.871649128713099E-5	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999727545740165	WITHOUT_CLASSIFICATION	2.724542598361541E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9999466019167863	WITHOUT_CLASSIFICATION	5.3398083213598575E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999985655532573	WITHOUT_CLASSIFICATION	1.434446742728625E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999997799561157	WITHOUT_CLASSIFICATION	2.2004388429147723E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.999998852289531	WITHOUT_CLASSIFICATION	1.1477104690649496E-6	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999752960860773	WITHOUT_CLASSIFICATION	2.4703913922695396E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998896886672268	WITHOUT_CLASSIFICATION	1.1031133277324457E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998896886672268	WITHOUT_CLASSIFICATION	1.1031133277324457E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999999627232557	WITHOUT_CLASSIFICATION	3.727674429878572E-7	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999883393392783	WITHOUT_CLASSIFICATION	1.1660660721764624E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999873332996049	WITHOUT_CLASSIFICATION	1.2666700395036416E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999919982901624	WITHOUT_CLASSIFICATION	8.001709837619417E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999991936983537	WITHOUT_CLASSIFICATION	8.063016464130662E-7	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9999410479958165	WITHOUT_CLASSIFICATION	5.895200418357238E-5	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999848717159103	WITHOUT_CLASSIFICATION	1.5128284089569226E-5	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.999998738335864	WITHOUT_CLASSIFICATION	1.2616641359985262E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999917511168973	WITHOUT_CLASSIFICATION	8.24888310279357E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999917511168973	WITHOUT_CLASSIFICATION	8.24888310279357E-6	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999848824221422	WITHOUT_CLASSIFICATION	1.5117577857728498E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999999672614435	WITHOUT_CLASSIFICATION	3.273855650670159E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999997953351725	WITHOUT_CLASSIFICATION	2.046648275789111E-7	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999879976898096	WITHOUT_CLASSIFICATION	1.2002310190453357E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999993585666561	WITHOUT_CLASSIFICATION	6.414333438900749E-7	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9999546987183158	WITHOUT_CLASSIFICATION	4.5301281684175204E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999997064250299	WITHOUT_CLASSIFICATION	2.9357497011363095E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999994504081864	WITHOUT_CLASSIFICATION	5.495918135759257E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999994504081864	WITHOUT_CLASSIFICATION	5.495918135759257E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999994504081864	WITHOUT_CLASSIFICATION	5.495918135759257E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999994504081864	WITHOUT_CLASSIFICATION	5.495918135759257E-7	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999956955552723	WITHOUT_CLASSIFICATION	4.304444727720962E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9997969304130276	WITHOUT_CLASSIFICATION	2.0306958697233955E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999885300928836	WITHOUT_CLASSIFICATION	1.1469907116462555E-5	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999974693427005	WITHOUT_CLASSIFICATION	2.5306572993906698E-6	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.999896228699885	WITHOUT_CLASSIFICATION	1.0377130011504838E-4	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9999604216831114	WITHOUT_CLASSIFICATION	3.95783168885599E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999964299135955	WITHOUT_CLASSIFICATION	3.5700864045289824E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993205044055	WITHOUT_CLASSIFICATION	6.794955945580805E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993205044055	WITHOUT_CLASSIFICATION	6.794955945580805E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999993205044055	WITHOUT_CLASSIFICATION	6.794955945580805E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999966263518749	WITHOUT_CLASSIFICATION	3.3736481249921363E-6	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999994110594287	WITHOUT_CLASSIFICATION	5.889405712454977E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999989374614752	WITHOUT_CLASSIFICATION	1.0625385248790658E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999989374614752	WITHOUT_CLASSIFICATION	1.0625385248790658E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999768097227695	WITHOUT_CLASSIFICATION	2.3190277230483294E-5	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999896961926	WITHOUT_CLASSIFICATION	1.0303807282770143E-8	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999999692019544	WITHOUT_CLASSIFICATION	3.079804555346295E-8	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9999770892023193	WITHOUT_CLASSIFICATION	2.2910797680742876E-5	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999470729280996	WITHOUT_CLASSIFICATION	5.292707190038423E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999904513359759	WITHOUT_CLASSIFICATION	9.548664024150251E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999999153303972	WITHOUT_CLASSIFICATION	8.466960278332325E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999999153303972	WITHOUT_CLASSIFICATION	8.466960278332325E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999998845665686	WITHOUT_CLASSIFICATION	1.1543343141020993E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9999876742200249	WITHOUT_CLASSIFICATION	1.2325779975203814E-5	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999983001059255	WITHOUT_CLASSIFICATION	1.699894074408681E-6	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999388096325155	WITHOUT_CLASSIFICATION	6.119036748453614E-5	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999895462064047	WITHOUT_CLASSIFICATION	1.0453793595221117E-5	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999998293181825	WITHOUT_CLASSIFICATION	1.7068181740970167E-7	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999950246405159	WITHOUT_CLASSIFICATION	4.975359484090769E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998934665720222	WITHOUT_CLASSIFICATION	1.0653342797778733E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999788809978915	WITHOUT_CLASSIFICATION	2.1119002108538664E-5	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999898620368505	WITHOUT_CLASSIFICATION	1.013796314942901E-5	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999970264774241	WITHOUT_CLASSIFICATION	2.9735225758840553E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999979135841315	WITHOUT_CLASSIFICATION	2.086415868550423E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999365443215441	WITHOUT_CLASSIFICATION	6.345567845584361E-5	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999971731399653	WITHOUT_CLASSIFICATION	2.8268600347623983E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999995781890593	WITHOUT_CLASSIFICATION	4.218109406693438E-7	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999814377279463	WITHOUT_CLASSIFICATION	1.8562272053724552E-5	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999998857949987	WITHOUT_CLASSIFICATION	1.142050013575621E-7	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999999137119372	WITHOUT_CLASSIFICATION	8.62880627848835E-8	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999966842465889	WITHOUT_CLASSIFICATION	3.315753411105132E-6	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999960326211194	WITHOUT_CLASSIFICATION	3.967378880633527E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.999989015163924	WITHOUT_CLASSIFICATION	1.098483607601636E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999947778598595	WITHOUT_CLASSIFICATION	5.222140140532402E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999760623111429	WITHOUT_CLASSIFICATION	2.3937688857097105E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999760623111429	WITHOUT_CLASSIFICATION	2.3937688857097105E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999760623111429	WITHOUT_CLASSIFICATION	2.3937688857097105E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999760623111429	WITHOUT_CLASSIFICATION	2.3937688857097105E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999760623111429	WITHOUT_CLASSIFICATION	2.3937688857097105E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999760623111429	WITHOUT_CLASSIFICATION	2.3937688857097105E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999760623111429	WITHOUT_CLASSIFICATION	2.3937688857097105E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999760623111429	WITHOUT_CLASSIFICATION	2.3937688857097105E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999976748475039	WITHOUT_CLASSIFICATION	2.3251524960642613E-6	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999759089980064	WITHOUT_CLASSIFICATION	2.409100199368619E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999946280786356	WITHOUT_CLASSIFICATION	5.371921364444759E-6	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9997643233772122	WITHOUT_CLASSIFICATION	2.3567662278771266E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999990759224069	WITHOUT_CLASSIFICATION	9.240775930909161E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.999990759224069	WITHOUT_CLASSIFICATION	9.240775930909161E-6	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999987967336366	WITHOUT_CLASSIFICATION	1.203266363368014E-6	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999997190878012	WITHOUT_CLASSIFICATION	2.8091219891537953E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.999999402148802	WITHOUT_CLASSIFICATION	5.978511979950052E-7	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999839424957349	WITHOUT_CLASSIFICATION	1.6057504265161683E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999827984112327	WITHOUT_CLASSIFICATION	1.720158876719026E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999928097952997	WITHOUT_CLASSIFICATION	7.1902047003435836E-6	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999971632355534	WITHOUT_CLASSIFICATION	2.836764446616407E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9999624668618063	WITHOUT_CLASSIFICATION	3.753313819377814E-5	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999983518632565	WITHOUT_CLASSIFICATION	1.648136743563676E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999989425759843	WITHOUT_CLASSIFICATION	1.0574240157402706E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999989425759843	WITHOUT_CLASSIFICATION	1.0574240157402706E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999989425759843	WITHOUT_CLASSIFICATION	1.0574240157402706E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999766815708316	WITHOUT_CLASSIFICATION	2.3318429168354598E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999954617020638	WITHOUT_CLASSIFICATION	4.538297936228469E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999835326908688	WITHOUT_CLASSIFICATION	1.64673091312636E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999928198134006	WITHOUT_CLASSIFICATION	7.180186599351874E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997874306310531	WITHOUT_CLASSIFICATION	2.125693689467712E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999857397395774	WITHOUT_CLASSIFICATION	1.4260260422623842E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999979374723642	WITHOUT_CLASSIFICATION	2.0625276357821288E-6	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999996323840216	WITHOUT_CLASSIFICATION	3.676159784549213E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.999983123380129	WITHOUT_CLASSIFICATION	1.6876619871043325E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.999983123380129	WITHOUT_CLASSIFICATION	1.6876619871043325E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999902276910407	WITHOUT_CLASSIFICATION	9.772308959281379E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999893917365263	WITHOUT_CLASSIFICATION	1.0608263473668763E-5	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999988341474912	WITHOUT_CLASSIFICATION	1.1658525087954656E-6	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9999999602543453	WITHOUT_CLASSIFICATION	3.974565458382523E-8	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999900627526913	WITHOUT_CLASSIFICATION	9.937247308719981E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999900627526913	WITHOUT_CLASSIFICATION	9.937247308719981E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999872721575606	WITHOUT_CLASSIFICATION	1.2727842439474265E-5	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999699235047904	WITHOUT_CLASSIFICATION	3.007649520956109E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999954458910292	WITHOUT_CLASSIFICATION	4.5541089707815415E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999546358987784	WITHOUT_CLASSIFICATION	4.536410122148388E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999990777188584	WITHOUT_CLASSIFICATION	9.222811416045732E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999977417878109	WITHOUT_CLASSIFICATION	2.258212189148157E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999977417878109	WITHOUT_CLASSIFICATION	2.258212189148157E-6	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999895483590455	WITHOUT_CLASSIFICATION	1.0451640954385203E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999895483590455	WITHOUT_CLASSIFICATION	1.0451640954385203E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.999999715201206	WITHOUT_CLASSIFICATION	2.8479879401821563E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999991586090886	WITHOUT_CLASSIFICATION	8.413909113453649E-7	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.999994836098731	WITHOUT_CLASSIFICATION	5.163901269095388E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999829264800872	WITHOUT_CLASSIFICATION	1.707351991279063E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999652680218071	WITHOUT_CLASSIFICATION	3.473197819302096E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999594229869024	WITHOUT_CLASSIFICATION	4.057701309752636E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999999514387949	WITHOUT_CLASSIFICATION	4.856120510175253E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999828252172884	WITHOUT_CLASSIFICATION	1.717478271149398E-5	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999982504421892	WITHOUT_CLASSIFICATION	1.7495578108510263E-6	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999998973401725	WITHOUT_CLASSIFICATION	1.026598275729837E-7	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9837522575515608	WITHOUT_CLASSIFICATION	0.0162477424484392	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999908589583855	WITHOUT_CLASSIFICATION	9.141041614577242E-6	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999998090554789	WITHOUT_CLASSIFICATION	1.909445211471565E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999989407223123	WITHOUT_CLASSIFICATION	1.0592776876028217E-6	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999999724048579	WITHOUT_CLASSIFICATION	2.7595142074372956E-8	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999995004960274	WITHOUT_CLASSIFICATION	4.995039726377537E-7	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999986657134379	WITHOUT_CLASSIFICATION	1.3342865621977227E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999987566495565	WITHOUT_CLASSIFICATION	1.243350443452315E-6	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999962105224237	WITHOUT_CLASSIFICATION	3.789477576392431E-6	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999435672420611	WITHOUT_CLASSIFICATION	5.643275793883111E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999823061527999	WITHOUT_CLASSIFICATION	1.7693847200100087E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999483299747474	WITHOUT_CLASSIFICATION	5.1670025252743715E-5	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999994028362428	WITHOUT_CLASSIFICATION	5.971637572959991E-7	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.999987094634084	WITHOUT_CLASSIFICATION	1.2905365915951493E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999991645187013	WITHOUT_CLASSIFICATION	8.354812986346699E-7	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999971001207909	WITHOUT_CLASSIFICATION	2.899879209208103E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999717419921271	WITHOUT_CLASSIFICATION	2.825800787295027E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999982479750532	WITHOUT_CLASSIFICATION	1.7520249467610095E-6	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999991338627312	WITHOUT_CLASSIFICATION	8.66137268896056E-7	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999999978139705	WITHOUT_CLASSIFICATION	2.1860293851781158E-9	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999990998171716	WITHOUT_CLASSIFICATION	9.001828284217529E-7	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.999998382258471	WITHOUT_CLASSIFICATION	1.6177415288967035E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999987118227525	WITHOUT_CLASSIFICATION	1.2881772475812551E-6	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999997370885426	WITHOUT_CLASSIFICATION	2.6291145737848784E-7	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999966396777018	WITHOUT_CLASSIFICATION	3.3603222981301306E-6	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999992689043133	WITHOUT_CLASSIFICATION	7.310956867190241E-7	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999996123368524	WITHOUT_CLASSIFICATION	3.8766314754442963E-7	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999991536103912	WITHOUT_CLASSIFICATION	8.463896089755706E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999876631455278	WITHOUT_CLASSIFICATION	1.2336854472282594E-5	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999992139469026	WITHOUT_CLASSIFICATION	7.860530973752622E-7	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999999721562978	WITHOUT_CLASSIFICATION	2.7843702232180455E-8	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999843767903205	WITHOUT_CLASSIFICATION	1.5623209679491437E-5	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999994355107837	WITHOUT_CLASSIFICATION	5.644892163261318E-7	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999815315704917	WITHOUT_CLASSIFICATION	1.8468429508315294E-5	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9999943399914664	WITHOUT_CLASSIFICATION	5.660008533593452E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999983849904313	WITHOUT_CLASSIFICATION	1.615009568659568E-6	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999964236092901	WITHOUT_CLASSIFICATION	3.5763907098503718E-6	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999999923485164	WITHOUT_CLASSIFICATION	7.651483528525284E-9	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999947217832506	WITHOUT_CLASSIFICATION	5.278216749535463E-6	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998748824583651	WITHOUT_CLASSIFICATION	1.251175416348592E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999078058029791	WITHOUT_CLASSIFICATION	9.219419702093328E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999869400259933	WITHOUT_CLASSIFICATION	1.305997400674205E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999869400259933	WITHOUT_CLASSIFICATION	1.305997400674205E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999711981402956	WITHOUT_CLASSIFICATION	2.8801859704380372E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999711981402956	WITHOUT_CLASSIFICATION	2.8801859704380372E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999887678784168	WITHOUT_CLASSIFICATION	1.123212158316147E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999887678784168	WITHOUT_CLASSIFICATION	1.123212158316147E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999576971597431	WITHOUT_CLASSIFICATION	4.230284025682922E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999576971597431	WITHOUT_CLASSIFICATION	4.230284025682922E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999998499829374	WITHOUT_CLASSIFICATION	1.5001706258983607E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999998499829374	WITHOUT_CLASSIFICATION	1.5001706258983607E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999998499829374	WITHOUT_CLASSIFICATION	1.5001706258983607E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999998499829374	WITHOUT_CLASSIFICATION	1.5001706258983607E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999998499829374	WITHOUT_CLASSIFICATION	1.5001706258983607E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999998499829374	WITHOUT_CLASSIFICATION	1.5001706258983607E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999998499829374	WITHOUT_CLASSIFICATION	1.5001706258983607E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999998499829374	WITHOUT_CLASSIFICATION	1.5001706258983607E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999998499829374	WITHOUT_CLASSIFICATION	1.5001706258983607E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999993588259876	WITHOUT_CLASSIFICATION	6.4117401240407984E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999993588259876	WITHOUT_CLASSIFICATION	6.4117401240407984E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999993588259876	WITHOUT_CLASSIFICATION	6.4117401240407984E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999971718838284	WITHOUT_CLASSIFICATION	2.8281161715314462E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999862597043603	WITHOUT_CLASSIFICATION	1.374029563975856E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999862597043603	WITHOUT_CLASSIFICATION	1.374029563975856E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999862597043603	WITHOUT_CLASSIFICATION	1.374029563975856E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999981710603788	WITHOUT_CLASSIFICATION	1.8289396212577344E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999981710603788	WITHOUT_CLASSIFICATION	1.8289396212577344E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999981710603788	WITHOUT_CLASSIFICATION	1.8289396212577344E-6	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999277686346874	WITHOUT_CLASSIFICATION	7.223136531260363E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999927248812059	WITHOUT_CLASSIFICATION	7.275118793976917E-6	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998801033819299	WITHOUT_CLASSIFICATION	1.1989661807004532E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998494111609452	WITHOUT_CLASSIFICATION	1.5058883905486463E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998494111609452	WITHOUT_CLASSIFICATION	1.5058883905486463E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998494111609452	WITHOUT_CLASSIFICATION	1.5058883905486463E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999995133538285	WITHOUT_CLASSIFICATION	4.866461715043312E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999905521829732	WITHOUT_CLASSIFICATION	9.447817026788192E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999905521829732	WITHOUT_CLASSIFICATION	9.447817026788192E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999973878557816	WITHOUT_CLASSIFICATION	2.612144218480892E-6	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999900516823618	WITHOUT_CLASSIFICATION	9.948317638211293E-6	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999900516823618	WITHOUT_CLASSIFICATION	9.948317638211293E-6	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.649968094453922	DEFECT	0.350031905546078	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.999984937596716	WITHOUT_CLASSIFICATION	1.5062403283977452E-5	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.999855591057615	WITHOUT_CLASSIFICATION	1.444089423850949E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999834796553766	WITHOUT_CLASSIFICATION	1.6520344623474734E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999834796553766	WITHOUT_CLASSIFICATION	1.6520344623474734E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999665522910669	WITHOUT_CLASSIFICATION	3.344770893314151E-5	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999903835547714	WITHOUT_CLASSIFICATION	9.61644522858925E-6	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999987144330927	WITHOUT_CLASSIFICATION	1.2855669072587372E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.999987867568166	WITHOUT_CLASSIFICATION	1.21324318338851E-5	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9997833511483969	WITHOUT_CLASSIFICATION	2.1664885160316714E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999834796553766	WITHOUT_CLASSIFICATION	1.6520344623474734E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999834796553766	WITHOUT_CLASSIFICATION	1.6520344623474734E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999834796553766	WITHOUT_CLASSIFICATION	1.6520344623474734E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999834796553766	WITHOUT_CLASSIFICATION	1.6520344623474734E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999834796553766	WITHOUT_CLASSIFICATION	1.6520344623474734E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999784220948227	WITHOUT_CLASSIFICATION	2.1577905177301637E-5	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999946009866237	WITHOUT_CLASSIFICATION	5.399013376189433E-6	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999482372767161	WITHOUT_CLASSIFICATION	5.1762723283962694E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999941885143105	WITHOUT_CLASSIFICATION	5.81148568950411E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999988131012285	WITHOUT_CLASSIFICATION	1.186898771445767E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999944992272077	WITHOUT_CLASSIFICATION	5.50077279233686E-6	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9995512660848972	WITHOUT_CLASSIFICATION	4.4873391510282564E-4	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999728974786988	WITHOUT_CLASSIFICATION	2.7102521301165482E-5	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999966708568948	WITHOUT_CLASSIFICATION	3.329143105144444E-6	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999958532070973	WITHOUT_CLASSIFICATION	4.146792902688117E-6	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999903615686705	WITHOUT_CLASSIFICATION	9.638431329572663E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.999977196739428	WITHOUT_CLASSIFICATION	2.2803260572012116E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999962583759423	WITHOUT_CLASSIFICATION	3.7416240576898937E-6	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999998068668654	WITHOUT_CLASSIFICATION	1.9313313455896053E-7	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999982642991143	WITHOUT_CLASSIFICATION	1.7357008857005038E-6	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999962242300074	WITHOUT_CLASSIFICATION	3.7757699924265767E-6	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999613139302	WITHOUT_CLASSIFICATION	3.868606971837246E-8	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999767473317	WITHOUT_CLASSIFICATION	2.325266831355631E-8	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999955379223368	WITHOUT_CLASSIFICATION	4.462077663318771E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999959830900065	WITHOUT_CLASSIFICATION	4.016909993503333E-6	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999997599943425	WITHOUT_CLASSIFICATION	2.4000565744756206E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999990395658825	WITHOUT_CLASSIFICATION	9.604341175630335E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999841123434878	WITHOUT_CLASSIFICATION	1.588765651218047E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999567386414082	WITHOUT_CLASSIFICATION	4.3261358591774294E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999567386414082	WITHOUT_CLASSIFICATION	4.3261358591774294E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999567386414082	WITHOUT_CLASSIFICATION	4.3261358591774294E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999567386414082	WITHOUT_CLASSIFICATION	4.3261358591774294E-5	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.999991483252143	WITHOUT_CLASSIFICATION	8.516747857035101E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9999896741707457	WITHOUT_CLASSIFICATION	1.0325829254211382E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999970527708456	WITHOUT_CLASSIFICATION	2.947229154397863E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999970527708456	WITHOUT_CLASSIFICATION	2.947229154397863E-6	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999964874002689	WITHOUT_CLASSIFICATION	3.5125997309664613E-6	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999828169882738	WITHOUT_CLASSIFICATION	1.718301172606365E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999643530287	WITHOUT_CLASSIFICATION	3.5646971296276166E-8	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999832482429184	WITHOUT_CLASSIFICATION	1.6751757081535324E-5	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999908236485763	WITHOUT_CLASSIFICATION	9.176351423772247E-6	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999615103769527	WITHOUT_CLASSIFICATION	3.8489623047306046E-5	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999961159683949	WITHOUT_CLASSIFICATION	3.884031605117613E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999753227048735	WITHOUT_CLASSIFICATION	2.4677295126478937E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999753227048735	WITHOUT_CLASSIFICATION	2.4677295126478937E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999753227048735	WITHOUT_CLASSIFICATION	2.4677295126478937E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999753227048735	WITHOUT_CLASSIFICATION	2.4677295126478937E-5	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999735347285857	WITHOUT_CLASSIFICATION	2.6465271414281493E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999922374536585	WITHOUT_CLASSIFICATION	7.762546341512363E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999922374536585	WITHOUT_CLASSIFICATION	7.762546341512363E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999922374536585	WITHOUT_CLASSIFICATION	7.762546341512363E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.999999252251127	WITHOUT_CLASSIFICATION	7.477488731021775E-7	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9998572036201101	WITHOUT_CLASSIFICATION	1.427963798898492E-4	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999997129996147	WITHOUT_CLASSIFICATION	2.870003853953443E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8118067171180041	WITHOUT_CLASSIFICATION	0.18819328288199588	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8118067171180041	WITHOUT_CLASSIFICATION	0.18819328288199588	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999999578861003	WITHOUT_CLASSIFICATION	4.2113899656907614E-8	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9999989784441379	WITHOUT_CLASSIFICATION	1.0215558622160494E-6	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999593150708673	WITHOUT_CLASSIFICATION	4.068492913267613E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999593150708673	WITHOUT_CLASSIFICATION	4.068492913267613E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999174495837	WITHOUT_CLASSIFICATION	8.255041626150036E-8	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999174495837	WITHOUT_CLASSIFICATION	8.255041626150036E-8	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999998263002156	WITHOUT_CLASSIFICATION	1.736997844049733E-7	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999994992597916	WITHOUT_CLASSIFICATION	5.007402084611405E-7	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999995557423174	WITHOUT_CLASSIFICATION	4.4425768272193565E-7	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.999999687233983	WITHOUT_CLASSIFICATION	3.127660170349198E-7	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999353605135168	WITHOUT_CLASSIFICATION	6.463948648317623E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999997793099521	WITHOUT_CLASSIFICATION	2.206900479234496E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999991255335952	WITHOUT_CLASSIFICATION	8.744664049229106E-7	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999984562325949	WITHOUT_CLASSIFICATION	1.543767405194561E-6	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999981183175691	WITHOUT_CLASSIFICATION	1.881682430807554E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999992460633861	WITHOUT_CLASSIFICATION	7.539366139881347E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999992460633861	WITHOUT_CLASSIFICATION	7.539366139881347E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999929260516759	WITHOUT_CLASSIFICATION	7.073948324126781E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999929260516759	WITHOUT_CLASSIFICATION	7.073948324126781E-6	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999972628359345	WITHOUT_CLASSIFICATION	2.7371640654722224E-6	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999996979895596	WITHOUT_CLASSIFICATION	3.02010440366555E-7	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999385693489793	WITHOUT_CLASSIFICATION	6.143065102075635E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999824155776355	WITHOUT_CLASSIFICATION	1.758442236453088E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999824155776355	WITHOUT_CLASSIFICATION	1.758442236453088E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999824155776355	WITHOUT_CLASSIFICATION	1.758442236453088E-5	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999911780859422	WITHOUT_CLASSIFICATION	8.82191405778528E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999864039612311	WITHOUT_CLASSIFICATION	1.3596038768929488E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999894152837014	WITHOUT_CLASSIFICATION	1.058471629860919E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999900962295365	WITHOUT_CLASSIFICATION	9.903770463494932E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999888356774038	WITHOUT_CLASSIFICATION	1.116432259616638E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999883191875304	WITHOUT_CLASSIFICATION	1.1680812469620703E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999901302204041	WITHOUT_CLASSIFICATION	9.869779595898962E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999972916386612	WITHOUT_CLASSIFICATION	2.7083613387724224E-6	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9996014394113822	WITHOUT_CLASSIFICATION	3.985605886177318E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999991226482264	WITHOUT_CLASSIFICATION	8.773517735418589E-7	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9995489788269795	WITHOUT_CLASSIFICATION	4.5102117302061717E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999932849353808	WITHOUT_CLASSIFICATION	6.715064619273076E-6	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999983319096175	WITHOUT_CLASSIFICATION	1.6680903824326598E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8118067171180041	WITHOUT_CLASSIFICATION	0.18819328288199588	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.999999967578281	WITHOUT_CLASSIFICATION	3.2421719031958345E-8	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999858362613251	WITHOUT_CLASSIFICATION	1.4163738674859508E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9997954279746798	WITHOUT_CLASSIFICATION	2.0457202532018294E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999674434506617	WITHOUT_CLASSIFICATION	3.25565493382754E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999674434506617	WITHOUT_CLASSIFICATION	3.25565493382754E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999674434506617	WITHOUT_CLASSIFICATION	3.25565493382754E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999674434506617	WITHOUT_CLASSIFICATION	3.25565493382754E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999674434506617	WITHOUT_CLASSIFICATION	3.25565493382754E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999153528542615	WITHOUT_CLASSIFICATION	8.464714573857936E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999674434506617	WITHOUT_CLASSIFICATION	3.25565493382754E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999674434506617	WITHOUT_CLASSIFICATION	3.25565493382754E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999674434506617	WITHOUT_CLASSIFICATION	3.25565493382754E-5	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999997092516747	WITHOUT_CLASSIFICATION	2.907483253813682E-7	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999938406165414	WITHOUT_CLASSIFICATION	6.159383458596413E-6	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9999940708595544	WITHOUT_CLASSIFICATION	5.929140445637328E-6	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9999182159520162	WITHOUT_CLASSIFICATION	8.178404798384344E-5	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999310370454474	WITHOUT_CLASSIFICATION	6.896295455256486E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999644990330716	WITHOUT_CLASSIFICATION	3.550096692843801E-5	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999995726744862	WITHOUT_CLASSIFICATION	4.273255136518259E-7	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999896255935828	WITHOUT_CLASSIFICATION	1.0374406417147814E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999889628493857	WITHOUT_CLASSIFICATION	1.1037150614458052E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999889628493857	WITHOUT_CLASSIFICATION	1.1037150614458052E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999891362875574	WITHOUT_CLASSIFICATION	1.086371244263601E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999864200832677	WITHOUT_CLASSIFICATION	1.3579916732355392E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999883884266673	WITHOUT_CLASSIFICATION	1.1611573332701655E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999899385397072	WITHOUT_CLASSIFICATION	1.0061460292827524E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999903224921866	WITHOUT_CLASSIFICATION	9.677507813479944E-6	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999872741119302	WITHOUT_CLASSIFICATION	1.2725888069738747E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999874062070374	WITHOUT_CLASSIFICATION	1.259379296273232E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999894391351857	WITHOUT_CLASSIFICATION	1.0560864814283471E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999874745351106	WITHOUT_CLASSIFICATION	1.2525464889445402E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999928439560133	WITHOUT_CLASSIFICATION	7.156043986672465E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999918752462107	WITHOUT_CLASSIFICATION	8.124753789243967E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999913194215855	WITHOUT_CLASSIFICATION	8.680578414437203E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.999990142632999	WITHOUT_CLASSIFICATION	9.857367000922215E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999892798363861	WITHOUT_CLASSIFICATION	1.072016361380793E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999888063321645	WITHOUT_CLASSIFICATION	1.1193667835546268E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.999989375383559	WITHOUT_CLASSIFICATION	1.0624616440890587E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999884705037951	WITHOUT_CLASSIFICATION	1.1529496204739096E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999902305235417	WITHOUT_CLASSIFICATION	9.769476458242063E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999904397657359	WITHOUT_CLASSIFICATION	9.56023426420575E-6	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999895221031462	WITHOUT_CLASSIFICATION	1.0477896853763897E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999887013613349	WITHOUT_CLASSIFICATION	1.1298638665142798E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999881349042099	WITHOUT_CLASSIFICATION	1.1865095789996505E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999886273075019	WITHOUT_CLASSIFICATION	1.1372692498115299E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999905836860618	WITHOUT_CLASSIFICATION	9.416313938229277E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999893656501326	WITHOUT_CLASSIFICATION	1.0634349867446136E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999906742792778	WITHOUT_CLASSIFICATION	9.32572072223942E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999865609642293	WITHOUT_CLASSIFICATION	1.3439035770723153E-5	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999899169649227	WITHOUT_CLASSIFICATION	1.0083035077331781E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999865031916497	WITHOUT_CLASSIFICATION	1.3496808350229084E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999893358004001	WITHOUT_CLASSIFICATION	1.0664199599946185E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999895022940247	WITHOUT_CLASSIFICATION	1.0497705975205132E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999886350562259	WITHOUT_CLASSIFICATION	1.1364943773970724E-5	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999870141374695	WITHOUT_CLASSIFICATION	1.298586253047849E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999864004579442	WITHOUT_CLASSIFICATION	1.3599542055807461E-5	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999897901763319	WITHOUT_CLASSIFICATION	1.0209823668031509E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999903883461551	WITHOUT_CLASSIFICATION	9.611653844946442E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999875935602666	WITHOUT_CLASSIFICATION	1.2406439733403403E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999866521786195	WITHOUT_CLASSIFICATION	1.3347821380495543E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999887215479568	WITHOUT_CLASSIFICATION	1.127845204315062E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999867881777073	WITHOUT_CLASSIFICATION	1.3211822292737168E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.999987864767664	WITHOUT_CLASSIFICATION	1.2135232336097154E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999915435962202	WITHOUT_CLASSIFICATION	8.456403779789069E-6	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999890567646585	WITHOUT_CLASSIFICATION	1.0943235341524816E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999860974113446	WITHOUT_CLASSIFICATION	1.3902588655433348E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999886508301576	WITHOUT_CLASSIFICATION	1.1349169842316829E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999886927869588	WITHOUT_CLASSIFICATION	1.1307213041323164E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999823513416035	WITHOUT_CLASSIFICATION	1.7648658396564076E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999859285097894	WITHOUT_CLASSIFICATION	1.4071490210607036E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999879349924621	WITHOUT_CLASSIFICATION	1.2065007537878408E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999871726127887	WITHOUT_CLASSIFICATION	1.282738721131453E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.999988565318132	WITHOUT_CLASSIFICATION	1.1434681868067822E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999860258206044	WITHOUT_CLASSIFICATION	1.3974179395787642E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999901459157261	WITHOUT_CLASSIFICATION	9.854084273925658E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999854719635073	WITHOUT_CLASSIFICATION	1.4528036492713743E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999854719635073	WITHOUT_CLASSIFICATION	1.4528036492713743E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999858030757339	WITHOUT_CLASSIFICATION	1.419692426603653E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999904908958395	WITHOUT_CLASSIFICATION	9.509104160652424E-6	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999855828395727	WITHOUT_CLASSIFICATION	1.4417160427205213E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999872898433073	WITHOUT_CLASSIFICATION	1.2710156692588121E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999883282880253	WITHOUT_CLASSIFICATION	1.1671711974762092E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999989623742983	WITHOUT_CLASSIFICATION	1.0376257017009692E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999857555670993	WITHOUT_CLASSIFICATION	1.424443290077259E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.999984999380649	WITHOUT_CLASSIFICATION	1.500061935102526E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999890181106866	WITHOUT_CLASSIFICATION	1.09818893134465E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999880635231457	WITHOUT_CLASSIFICATION	1.1936476854248608E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999511115523193	WITHOUT_CLASSIFICATION	4.888844768062216E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999511115523193	WITHOUT_CLASSIFICATION	4.888844768062216E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999933519411914	WITHOUT_CLASSIFICATION	6.64805880861841E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999388978370843	WITHOUT_CLASSIFICATION	6.11021629156127E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9999812853906787	WITHOUT_CLASSIFICATION	1.8714609321307427E-5	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999998638558522	WITHOUT_CLASSIFICATION	1.3614414787820586E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999940400149758	WITHOUT_CLASSIFICATION	5.959985024189124E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999940400149758	WITHOUT_CLASSIFICATION	5.959985024189124E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999940400149758	WITHOUT_CLASSIFICATION	5.959985024189124E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999940400149758	WITHOUT_CLASSIFICATION	5.959985024189124E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9991808397326137	WITHOUT_CLASSIFICATION	8.191602673863155E-4	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9999993385945203	WITHOUT_CLASSIFICATION	6.614054797369651E-7	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999904872987025	WITHOUT_CLASSIFICATION	9.51270129739776E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999896305122016	WITHOUT_CLASSIFICATION	1.0369487798328106E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999895701211708	WITHOUT_CLASSIFICATION	1.0429878829129562E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999895638222293	WITHOUT_CLASSIFICATION	1.0436177770750086E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999892963438265	WITHOUT_CLASSIFICATION	1.0703656173480698E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.999989603792148	WITHOUT_CLASSIFICATION	1.0396207852048827E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999914287587472	WITHOUT_CLASSIFICATION	8.571241252766933E-6	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999899048155024	WITHOUT_CLASSIFICATION	1.0095184497512417E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999891332247131	WITHOUT_CLASSIFICATION	1.0866775287030545E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999912858158245	WITHOUT_CLASSIFICATION	8.714184175531513E-6	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999882919556631	WITHOUT_CLASSIFICATION	1.170804433680869E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999881986114244	WITHOUT_CLASSIFICATION	1.1801388575679989E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.999987445954681	WITHOUT_CLASSIFICATION	1.2554045319069078E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999895280257793	WITHOUT_CLASSIFICATION	1.0471974220723431E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999873948603858	WITHOUT_CLASSIFICATION	1.2605139614250225E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999909548935894	WITHOUT_CLASSIFICATION	9.045106410681996E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999915034759292	WITHOUT_CLASSIFICATION	8.496524070718142E-6	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.999989537706623	WITHOUT_CLASSIFICATION	1.0462293376953906E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999913266052273	WITHOUT_CLASSIFICATION	8.673394772666205E-6	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999886646526358	WITHOUT_CLASSIFICATION	1.133534736409643E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.999989541909833	WITHOUT_CLASSIFICATION	1.0458090166980962E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999893623878824	WITHOUT_CLASSIFICATION	1.063761211771069E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999889354235827	WITHOUT_CLASSIFICATION	1.1064576417346682E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999882236349332	WITHOUT_CLASSIFICATION	1.1776365066881905E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999903390273264	WITHOUT_CLASSIFICATION	9.660972673624776E-6	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999908762808222	WITHOUT_CLASSIFICATION	9.123719177827765E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999910512868225	WITHOUT_CLASSIFICATION	8.948713177481494E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999871191419869	WITHOUT_CLASSIFICATION	1.288085801315348E-5	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.999988543430262	WITHOUT_CLASSIFICATION	1.145656973804524E-5	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999892226937556	WITHOUT_CLASSIFICATION	1.077730624433609E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999847211891263	WITHOUT_CLASSIFICATION	1.527881087363244E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999853724300719	WITHOUT_CLASSIFICATION	1.4627569928010627E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999876843738157	WITHOUT_CLASSIFICATION	1.2315626184308105E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999889607420516	WITHOUT_CLASSIFICATION	1.1039257948489546E-5	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999878115746009	WITHOUT_CLASSIFICATION	1.2188425399148413E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999881633512442	WITHOUT_CLASSIFICATION	1.1836648755854061E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999883875715495	WITHOUT_CLASSIFICATION	1.1612428450530227E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999865441028832	WITHOUT_CLASSIFICATION	1.345589711678426E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999908206353684	WITHOUT_CLASSIFICATION	9.17936463159729E-6	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999855584314231	WITHOUT_CLASSIFICATION	1.4441568576766985E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999843812482178	WITHOUT_CLASSIFICATION	1.561875178232489E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999875845655504	WITHOUT_CLASSIFICATION	1.241543444960607E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999888800459852	WITHOUT_CLASSIFICATION	1.1119954014802285E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.999988910406743	WITHOUT_CLASSIFICATION	1.1089593257068711E-5	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999840901239219	WITHOUT_CLASSIFICATION	1.5909876078150366E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999857869460406	WITHOUT_CLASSIFICATION	1.4213053959428715E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999900676941177	WITHOUT_CLASSIFICATION	9.932305882387615E-6	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999842904350149	WITHOUT_CLASSIFICATION	1.5709564985030374E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999867208190781	WITHOUT_CLASSIFICATION	1.3279180921840964E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999857285750055	WITHOUT_CLASSIFICATION	1.4271424994626549E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999908408784303	WITHOUT_CLASSIFICATION	9.159121569625148E-6	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999896515039087	WITHOUT_CLASSIFICATION	1.034849609131393E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999887910632959	WITHOUT_CLASSIFICATION	1.1208936704269883E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999880203307402	WITHOUT_CLASSIFICATION	1.1979669259734747E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999885296882083	WITHOUT_CLASSIFICATION	1.147031179175709E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999873337732381	WITHOUT_CLASSIFICATION	1.2666226761830242E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999927035621039	WITHOUT_CLASSIFICATION	7.296437896041079E-6	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999993282590458	WITHOUT_CLASSIFICATION	6.717409541709231E-7	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999986111221559	WITHOUT_CLASSIFICATION	1.3888778440295907E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999937762318687	WITHOUT_CLASSIFICATION	6.223768131366174E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999937762318687	WITHOUT_CLASSIFICATION	6.223768131366174E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999937762318687	WITHOUT_CLASSIFICATION	6.223768131366174E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999937762318687	WITHOUT_CLASSIFICATION	6.223768131366174E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999937762318687	WITHOUT_CLASSIFICATION	6.223768131366174E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999937762318687	WITHOUT_CLASSIFICATION	6.223768131366174E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999937762318687	WITHOUT_CLASSIFICATION	6.223768131366174E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999857495271633	WITHOUT_CLASSIFICATION	1.4250472836577962E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999857495271633	WITHOUT_CLASSIFICATION	1.4250472836577962E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999857495271633	WITHOUT_CLASSIFICATION	1.4250472836577962E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999857495271633	WITHOUT_CLASSIFICATION	1.4250472836577962E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999479731032043	WITHOUT_CLASSIFICATION	5.202689679578982E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999479731032043	WITHOUT_CLASSIFICATION	5.202689679578982E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.999999881487143	WITHOUT_CLASSIFICATION	1.185128568912392E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996761702904	WITHOUT_CLASSIFICATION	3.238297095889766E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996761702904	WITHOUT_CLASSIFICATION	3.238297095889766E-7	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999985019601237	WITHOUT_CLASSIFICATION	1.4980398762038598E-6	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999977435313643	WITHOUT_CLASSIFICATION	2.2564686356250465E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999984480669186	WITHOUT_CLASSIFICATION	1.55193308144412E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999984480669186	WITHOUT_CLASSIFICATION	1.55193308144412E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999984480669186	WITHOUT_CLASSIFICATION	1.55193308144412E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999984480669186	WITHOUT_CLASSIFICATION	1.55193308144412E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999984480669186	WITHOUT_CLASSIFICATION	1.55193308144412E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999984480669186	WITHOUT_CLASSIFICATION	1.55193308144412E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999984480669186	WITHOUT_CLASSIFICATION	1.55193308144412E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999994142272276	WITHOUT_CLASSIFICATION	5.85772772394346E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999985369987954	WITHOUT_CLASSIFICATION	1.463001204579537E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999990834679632	WITHOUT_CLASSIFICATION	9.165320368529449E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999990834679632	WITHOUT_CLASSIFICATION	9.165320368529449E-7	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.999967043549008	WITHOUT_CLASSIFICATION	3.295645099194804E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9998713625151295	WITHOUT_CLASSIFICATION	1.2863748487038017E-4	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9998713625151295	WITHOUT_CLASSIFICATION	1.2863748487038017E-4	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999999915670863	WITHOUT_CLASSIFICATION	8.432913621180971E-9	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.8735586710378112	WITHOUT_CLASSIFICATION	0.12644132896218893	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999990551406351	WITHOUT_CLASSIFICATION	9.448593648476997E-7	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.999998645638949	WITHOUT_CLASSIFICATION	1.3543610510433634E-6	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999941383583619	WITHOUT_CLASSIFICATION	5.861641638012699E-6	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999974720610871	WITHOUT_CLASSIFICATION	2.5279389129045127E-6	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999960640974613	WITHOUT_CLASSIFICATION	3.935902538692219E-6	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999982757942132	WITHOUT_CLASSIFICATION	1.724205786865708E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999939994633001	WITHOUT_CLASSIFICATION	6.00053669987079E-6	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.999965758950787	WITHOUT_CLASSIFICATION	3.424104921295914E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999657026582354	WITHOUT_CLASSIFICATION	3.429734176460627E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999999782833426	WITHOUT_CLASSIFICATION	2.1716657333067796E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999983331470923	WITHOUT_CLASSIFICATION	1.6668529077837617E-6	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999990877172753	WITHOUT_CLASSIFICATION	9.122827247016549E-7	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999945408256284	WITHOUT_CLASSIFICATION	5.459174371547201E-6	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999855410572523	WITHOUT_CLASSIFICATION	1.4458942747675062E-5	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999986437998392	WITHOUT_CLASSIFICATION	1.3562001609017457E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999480587920255	WITHOUT_CLASSIFICATION	5.194120797455132E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999983362898277	WITHOUT_CLASSIFICATION	1.6637101722182909E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999983362898277	WITHOUT_CLASSIFICATION	1.6637101722182909E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999992297259828	WITHOUT_CLASSIFICATION	7.702740172722663E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999988300689134	WITHOUT_CLASSIFICATION	1.1699310865590296E-6	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.999998926045936	WITHOUT_CLASSIFICATION	1.0739540639417767E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999419044870584	WITHOUT_CLASSIFICATION	5.809551294161547E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999892736520257	WITHOUT_CLASSIFICATION	1.0726347974310574E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999892736520257	WITHOUT_CLASSIFICATION	1.0726347974310574E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999892736520257	WITHOUT_CLASSIFICATION	1.0726347974310574E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999981378571907	WITHOUT_CLASSIFICATION	1.8621428092687334E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999808923235616	WITHOUT_CLASSIFICATION	1.9107676438404556E-5	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999993892695045	WITHOUT_CLASSIFICATION	6.107304954922414E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999972510884847	WITHOUT_CLASSIFICATION	2.7489115152961583E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999993660482617	WITHOUT_CLASSIFICATION	6.339517382969533E-7	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999995901065489	WITHOUT_CLASSIFICATION	4.0989345113648E-7	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999996137823489	WITHOUT_CLASSIFICATION	3.86217651057613E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999991842950067	WITHOUT_CLASSIFICATION	8.157049933858477E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999998046498921	WITHOUT_CLASSIFICATION	1.9535010797062326E-7	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999988049538105	WITHOUT_CLASSIFICATION	1.1950461894270015E-6	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999704664368576	WITHOUT_CLASSIFICATION	2.9533563142344527E-5	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999997603765187	WITHOUT_CLASSIFICATION	2.3962348124479236E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9950263238591134	WITHOUT_CLASSIFICATION	0.004973676140886654	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999854442180189	WITHOUT_CLASSIFICATION	1.4555781980975428E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999286342037	WITHOUT_CLASSIFICATION	7.136579619937302E-8	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999957818855801	WITHOUT_CLASSIFICATION	4.218114419890654E-6	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999998215155161	WITHOUT_CLASSIFICATION	1.7848448395566008E-7	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999937096835733	WITHOUT_CLASSIFICATION	6.290316426667406E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999998498359881	WITHOUT_CLASSIFICATION	1.5016401186896401E-7	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.636357798296167	WITHOUT_CLASSIFICATION	0.36364220170383293	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.853501364683057	WITHOUT_CLASSIFICATION	0.14649863531694296	DEFECT
// TODO: make sure it's really safe to not to copy it	DEFECT	0.5967600314569118	WITHOUT_CLASSIFICATION	0.40323996854308813	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.62195024390604	DEFECT	0.3780497560939601	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.802573938180014	WITHOUT_CLASSIFICATION	0.19742606181998598	DEFECT
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9999984434572747	WITHOUT_CLASSIFICATION	1.5565427251820127E-6	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9702137851176119	WITHOUT_CLASSIFICATION	0.029786214882388168	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9877570255090933	WITHOUT_CLASSIFICATION	0.01224297449090672	DEFECT
// FIXME: not correct exception	DEFECT	0.9501049420830706	DEFECT	0.04989505791692949	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9999950092149932	WITHOUT_CLASSIFICATION	4.990785006841041E-6	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9993704228913326	WITHOUT_CLASSIFICATION	6.295771086674509E-4	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.998264599625816	WITHOUT_CLASSIFICATION	0.001735400374183958	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9681985948150721	WITHOUT_CLASSIFICATION	0.03180140518492787	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.8331411103582818	DEFECT	0.16685888964171827	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.6880727402995868	WITHOUT_CLASSIFICATION	0.31192725970041324	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.8050422010632355	WITHOUT_CLASSIFICATION	0.19495779893676435	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.8050422010632355	WITHOUT_CLASSIFICATION	0.19495779893676435	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9956239342950091	WITHOUT_CLASSIFICATION	0.004376065704990948	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9997765401003136	WITHOUT_CLASSIFICATION	2.2345989968630404E-4	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9988967831552733	WITHOUT_CLASSIFICATION	0.0011032168447266749	DEFECT
// ENEBO: Very wrong	DEFECT	0.9996930960320795	WITHOUT_CLASSIFICATION	3.069039679205988E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9996930960320795	WITHOUT_CLASSIFICATION	3.069039679205988E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.967101129433946	WITHOUT_CLASSIFICATION	0.032898870566053916	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.8026641528102934	WITHOUT_CLASSIFICATION	0.1973358471897067	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9977068308521009	WITHOUT_CLASSIFICATION	0.0022931691478990978	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.666243539899792	WITHOUT_CLASSIFICATION	0.33375646010020804	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.7565142543682822	WITHOUT_CLASSIFICATION	0.2434857456317177	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.5042056730718704	DEFECT	0.4957943269281297	WITHOUT_CLASSIFICATION
// TODO: proper sign	DEFECT	0.9286569291764655	WITHOUT_CLASSIFICATION	0.07134307082353444	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.7978604039837027	WITHOUT_CLASSIFICATION	0.20213959601629736	DEFECT
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.997461931680179	WITHOUT_CLASSIFICATION	0.00253806831982087	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9973474071968106	WITHOUT_CLASSIFICATION	0.00265259280318938	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9969176614765093	WITHOUT_CLASSIFICATION	0.003082338523490741	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9989413250562903	WITHOUT_CLASSIFICATION	0.0010586749437096026	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.7872886582133446	WITHOUT_CLASSIFICATION	0.21271134178665546	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.5688761515445813	WITHOUT_CLASSIFICATION	0.4311238484554188	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9885530869868242	WITHOUT_CLASSIFICATION	0.011446913013175746	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9997870718258945	WITHOUT_CLASSIFICATION	2.1292817410549538E-4	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9765525979088358	WITHOUT_CLASSIFICATION	0.023447402091164287	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9654183092735225	WITHOUT_CLASSIFICATION	0.034581690726477536	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9999529909372882	WITHOUT_CLASSIFICATION	4.700906271176351E-5	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9993915491920443	WITHOUT_CLASSIFICATION	6.0845080795577E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9977607523844085	WITHOUT_CLASSIFICATION	0.0022392476155914326	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9977607523844085	WITHOUT_CLASSIFICATION	0.0022392476155914326	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9999548775348744	WITHOUT_CLASSIFICATION	4.5122465125468644E-5	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9789418916441375	WITHOUT_CLASSIFICATION	0.021058108355862474	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9951049999627214	WITHOUT_CLASSIFICATION	0.004895000037278647	DEFECT
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9971514452413363	WITHOUT_CLASSIFICATION	0.002848554758663785	DEFECT
// FIXME: This is wrong	DEFECT	0.9361949570320333	WITHOUT_CLASSIFICATION	0.06380504296796669	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9996799009882636	WITHOUT_CLASSIFICATION	3.20099011736321E-4	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999922529928685	WITHOUT_CLASSIFICATION	7.747007131420055E-6	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9818166011679632	WITHOUT_CLASSIFICATION	0.018183398832036846	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9997294343474797	WITHOUT_CLASSIFICATION	2.7056565252028656E-4	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9999987955453237	WITHOUT_CLASSIFICATION	1.2044546763513615E-6	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9832848865879389	WITHOUT_CLASSIFICATION	0.01671511341206104	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9903319326716147	WITHOUT_CLASSIFICATION	0.009668067328385252	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9903319326716147	WITHOUT_CLASSIFICATION	0.009668067328385252	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9880278583403682	WITHOUT_CLASSIFICATION	0.011972141659631752	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9955460592648951	WITHOUT_CLASSIFICATION	0.004453940735104869	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.962066063972846	WITHOUT_CLASSIFICATION	0.03793393602715404	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9980229656143544	WITHOUT_CLASSIFICATION	0.0019770343856455527	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9241928623557006	WITHOUT_CLASSIFICATION	0.07580713764429932	DEFECT
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.5554074229148281	WITHOUT_CLASSIFICATION	0.4445925770851718	DEFECT
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9999832462253437	WITHOUT_CLASSIFICATION	1.675377465617805E-5	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9917462316930807	WITHOUT_CLASSIFICATION	0.008253768306919287	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9999548775348744	WITHOUT_CLASSIFICATION	4.5122465125468644E-5	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9999220531843251	WITHOUT_CLASSIFICATION	7.794681567476778E-5	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9990026070643085	WITHOUT_CLASSIFICATION	9.973929356914598E-4	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9814622572877763	WITHOUT_CLASSIFICATION	0.018537742712223776	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.666243539899792	WITHOUT_CLASSIFICATION	0.33375646010020804	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9086409672710347	WITHOUT_CLASSIFICATION	0.09135903272896531	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9996200177598065	WITHOUT_CLASSIFICATION	3.7998224019344956E-4	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9997870718258945	WITHOUT_CLASSIFICATION	2.1292817410549538E-4	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9858799235590611	WITHOUT_CLASSIFICATION	0.014120076440938871	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9832848865879389	WITHOUT_CLASSIFICATION	0.01671511341206104	DEFECT
// TODO: we loose encoding information here, fix it	DEFECT	0.949062434119277	DEFECT	0.05093756588072293	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// TODO: don't require pop	DEFECT	0.6236460903429689	WITHOUT_CLASSIFICATION	0.37635390965703097	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9818166011679632	WITHOUT_CLASSIFICATION	0.018183398832036846	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9999900749027991	WITHOUT_CLASSIFICATION	9.925097200749044E-6	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9903319326716147	WITHOUT_CLASSIFICATION	0.009668067328385252	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9903319326716147	WITHOUT_CLASSIFICATION	0.009668067328385252	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9955460592648951	WITHOUT_CLASSIFICATION	0.004453940735104869	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9955460592648951	WITHOUT_CLASSIFICATION	0.004453940735104869	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9955460592648951	WITHOUT_CLASSIFICATION	0.004453940735104869	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9955460592648951	WITHOUT_CLASSIFICATION	0.004453940735104869	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9955460592648951	WITHOUT_CLASSIFICATION	0.004453940735104869	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9955460592648951	WITHOUT_CLASSIFICATION	0.004453940735104869	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9971417557594627	WITHOUT_CLASSIFICATION	0.002858244240537315	DEFECT
