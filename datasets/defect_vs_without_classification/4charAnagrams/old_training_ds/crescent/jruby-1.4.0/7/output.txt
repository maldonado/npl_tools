// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999996545298063	WITHOUT_CLASSIFICATION	3.454701937080009E-7	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999890739123435	WITHOUT_CLASSIFICATION	1.0926087656561787E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999073072656985	WITHOUT_CLASSIFICATION	9.269273430152113E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999073072656985	WITHOUT_CLASSIFICATION	9.269273430152113E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999914286749493	WITHOUT_CLASSIFICATION	8.571325050720572E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999914286749493	WITHOUT_CLASSIFICATION	8.571325050720572E-6	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999982986936604	WITHOUT_CLASSIFICATION	1.7013063396004908E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999995463966569	WITHOUT_CLASSIFICATION	4.536033430287113E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999872112738264	WITHOUT_CLASSIFICATION	1.2788726173576419E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999869373346042	WITHOUT_CLASSIFICATION	1.306266539580086E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999162582702874	WITHOUT_CLASSIFICATION	8.374172971255893E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999162582702874	WITHOUT_CLASSIFICATION	8.374172971255893E-5	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999896592791209	WITHOUT_CLASSIFICATION	1.0340720879128888E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999186558012957	WITHOUT_CLASSIFICATION	8.13441987043463E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999186558012957	WITHOUT_CLASSIFICATION	8.13441987043463E-5	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9998933021841311	WITHOUT_CLASSIFICATION	1.0669781586897379E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999026546803914	WITHOUT_CLASSIFICATION	9.734531960864846E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999144044234414	WITHOUT_CLASSIFICATION	8.559557655856983E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999144044234414	WITHOUT_CLASSIFICATION	8.559557655856983E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999144044234414	WITHOUT_CLASSIFICATION	8.559557655856983E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999144044234414	WITHOUT_CLASSIFICATION	8.559557655856983E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999144044234414	WITHOUT_CLASSIFICATION	8.559557655856983E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999144044234414	WITHOUT_CLASSIFICATION	8.559557655856983E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999144044234414	WITHOUT_CLASSIFICATION	8.559557655856983E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.99999560478228	WITHOUT_CLASSIFICATION	4.395217720066556E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.99999560478228	WITHOUT_CLASSIFICATION	4.395217720066556E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.99999560478228	WITHOUT_CLASSIFICATION	4.395217720066556E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.99999560478228	WITHOUT_CLASSIFICATION	4.395217720066556E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.99999560478228	WITHOUT_CLASSIFICATION	4.395217720066556E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.99999560478228	WITHOUT_CLASSIFICATION	4.395217720066556E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.99999560478228	WITHOUT_CLASSIFICATION	4.395217720066556E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999983595233844	WITHOUT_CLASSIFICATION	1.6404766156006667E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999983595233844	WITHOUT_CLASSIFICATION	1.6404766156006667E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999983595233844	WITHOUT_CLASSIFICATION	1.6404766156006667E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999983595233844	WITHOUT_CLASSIFICATION	1.6404766156006667E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999983595233844	WITHOUT_CLASSIFICATION	1.6404766156006667E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999983595233844	WITHOUT_CLASSIFICATION	1.6404766156006667E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999582814877164	WITHOUT_CLASSIFICATION	4.171851228371771E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999582814877164	WITHOUT_CLASSIFICATION	4.171851228371771E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999582814877164	WITHOUT_CLASSIFICATION	4.171851228371771E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999582814877164	WITHOUT_CLASSIFICATION	4.171851228371771E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999582814877164	WITHOUT_CLASSIFICATION	4.171851228371771E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999582814877164	WITHOUT_CLASSIFICATION	4.171851228371771E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999594759401164	WITHOUT_CLASSIFICATION	4.0524059883692996E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999594759401164	WITHOUT_CLASSIFICATION	4.0524059883692996E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999594759401164	WITHOUT_CLASSIFICATION	4.0524059883692996E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999594759401164	WITHOUT_CLASSIFICATION	4.0524059883692996E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999594759401164	WITHOUT_CLASSIFICATION	4.0524059883692996E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999594759401164	WITHOUT_CLASSIFICATION	4.0524059883692996E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999594759401164	WITHOUT_CLASSIFICATION	4.0524059883692996E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999368476262425	WITHOUT_CLASSIFICATION	6.31523737576042E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999368476262425	WITHOUT_CLASSIFICATION	6.31523737576042E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999368476262425	WITHOUT_CLASSIFICATION	6.31523737576042E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999368476262425	WITHOUT_CLASSIFICATION	6.31523737576042E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999821508765147	WITHOUT_CLASSIFICATION	1.7849123485392923E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999821508765147	WITHOUT_CLASSIFICATION	1.7849123485392923E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109615	WITHOUT_CLASSIFICATION	1.2109890385420917E-6	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999955673837444	WITHOUT_CLASSIFICATION	4.432616255579538E-6	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999968252873654	WITHOUT_CLASSIFICATION	3.174712634576148E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999989120803557	WITHOUT_CLASSIFICATION	1.0879196443259585E-6	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999992051224471	WITHOUT_CLASSIFICATION	7.948775529339909E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999993290748689	WITHOUT_CLASSIFICATION	6.709251311686068E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999993290748689	WITHOUT_CLASSIFICATION	6.709251311686068E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999993290748689	WITHOUT_CLASSIFICATION	6.709251311686068E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999993290748689	WITHOUT_CLASSIFICATION	6.709251311686068E-7	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9999998547418698	WITHOUT_CLASSIFICATION	1.4525813016170532E-7	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999937006946077	WITHOUT_CLASSIFICATION	6.299305392325095E-6	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999989220947714	WITHOUT_CLASSIFICATION	1.0779052286307753E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999965563461334	WITHOUT_CLASSIFICATION	3.443653866616936E-6	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999976876317429	WITHOUT_CLASSIFICATION	2.3123682569728857E-6	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999883650416548	WITHOUT_CLASSIFICATION	1.163495834515345E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999988851367747	WITHOUT_CLASSIFICATION	1.1148632252049697E-6	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999992723491408	WITHOUT_CLASSIFICATION	7.276508592086025E-7	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.999997616827874	WITHOUT_CLASSIFICATION	2.383172126014225E-6	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9998611368061033	WITHOUT_CLASSIFICATION	1.3886319389677068E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.999991240063146	WITHOUT_CLASSIFICATION	8.759936853963272E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999990741543853	WITHOUT_CLASSIFICATION	9.258456147105472E-7	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999701524061206	WITHOUT_CLASSIFICATION	2.9847593879336083E-5	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999997987639586	WITHOUT_CLASSIFICATION	2.012360414023551E-7	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999977745849092	WITHOUT_CLASSIFICATION	2.225415090718036E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999997743778539	WITHOUT_CLASSIFICATION	2.2562214598380553E-7	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999787031496239	WITHOUT_CLASSIFICATION	2.1296850376076702E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999993290748689	WITHOUT_CLASSIFICATION	6.709251311686068E-7	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999982245967458	WITHOUT_CLASSIFICATION	1.775403254211445E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999962962265577	WITHOUT_CLASSIFICATION	3.703773442409751E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999969030173604	WITHOUT_CLASSIFICATION	3.096982639639346E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999891124526833	WITHOUT_CLASSIFICATION	1.0887547316716389E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999814150395134	WITHOUT_CLASSIFICATION	1.8584960486644694E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999703066446424	WITHOUT_CLASSIFICATION	2.9693355357607647E-5	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999999923319218	WITHOUT_CLASSIFICATION	7.668078100754969E-9	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999998598639406	WITHOUT_CLASSIFICATION	1.4013605940741206E-7	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999965897704737	WITHOUT_CLASSIFICATION	3.410229526358314E-6	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9998802741276024	WITHOUT_CLASSIFICATION	1.1972587239763103E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9979429880897652	WITHOUT_CLASSIFICATION	0.0020570119102347943	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999969091216075	WITHOUT_CLASSIFICATION	3.090878392552189E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999919512509721	WITHOUT_CLASSIFICATION	8.048749027817757E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999993947500493	WITHOUT_CLASSIFICATION	6.052499506813692E-7	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999323871523574	WITHOUT_CLASSIFICATION	6.761284764252792E-5	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999635161793464	WITHOUT_CLASSIFICATION	3.648382065359927E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.999994709789321	WITHOUT_CLASSIFICATION	5.29021067894839E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999968089578284	WITHOUT_CLASSIFICATION	3.191042171654743E-6	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999996914631895	WITHOUT_CLASSIFICATION	3.0853681053077065E-7	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999995168092087	WITHOUT_CLASSIFICATION	4.831907913470443E-7	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9996455736571166	WITHOUT_CLASSIFICATION	3.5442634288340843E-4	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999949801275981	WITHOUT_CLASSIFICATION	5.019872401917451E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999717688325881	WITHOUT_CLASSIFICATION	2.8231167411825902E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.999988399142599	WITHOUT_CLASSIFICATION	1.1600857401102305E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999709775754352	WITHOUT_CLASSIFICATION	2.902242456482002E-5	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9998793051354655	WITHOUT_CLASSIFICATION	1.2069486453452254E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.999997778065562	WITHOUT_CLASSIFICATION	2.2219344380267337E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9994758754546862	WITHOUT_CLASSIFICATION	5.241245453138358E-4	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.999999995727718	WITHOUT_CLASSIFICATION	4.272281966302387E-9	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999999349561639	WITHOUT_CLASSIFICATION	6.504383616158835E-8	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999983968749089	WITHOUT_CLASSIFICATION	1.6031250911162146E-6	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999988178534384	WITHOUT_CLASSIFICATION	1.1821465617529078E-6	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9997883693227781	WITHOUT_CLASSIFICATION	2.1163067722170526E-4	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999996231082076	WITHOUT_CLASSIFICATION	3.7689179235266055E-7	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999987878539801	WITHOUT_CLASSIFICATION	1.2121460198326014E-6	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999995962390202	WITHOUT_CLASSIFICATION	4.037609796975805E-7	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999969347884914	WITHOUT_CLASSIFICATION	3.0652115086485436E-6	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.999999604403274	WITHOUT_CLASSIFICATION	3.9559672605399867E-7	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999999795154116	WITHOUT_CLASSIFICATION	2.0484588378973693E-8	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.99999414531923	WITHOUT_CLASSIFICATION	5.854680769898543E-6	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999922822275856	WITHOUT_CLASSIFICATION	7.717772414389459E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999977182832545	WITHOUT_CLASSIFICATION	2.281716745592127E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999603200146459	WITHOUT_CLASSIFICATION	3.967998535410177E-5	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999956027575974	WITHOUT_CLASSIFICATION	4.397242402701142E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999956027575974	WITHOUT_CLASSIFICATION	4.397242402701142E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999983006103971	WITHOUT_CLASSIFICATION	1.6993896029450513E-6	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999999239887941	WITHOUT_CLASSIFICATION	7.601120586752084E-8	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999976404872302	WITHOUT_CLASSIFICATION	2.3595127698103108E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999990994252734	WITHOUT_CLASSIFICATION	9.005747266747478E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.999996220577253	WITHOUT_CLASSIFICATION	3.779422746920117E-6	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9994917574413099	WITHOUT_CLASSIFICATION	5.08242558690158E-4	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9997792116023964	WITHOUT_CLASSIFICATION	2.207883976036546E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999882780042567	WITHOUT_CLASSIFICATION	1.1721995743268843E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999977182832545	WITHOUT_CLASSIFICATION	2.281716745592127E-6	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.999996925861509	WITHOUT_CLASSIFICATION	3.0741384909294717E-6	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999950189590234	WITHOUT_CLASSIFICATION	4.981040976619344E-6	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999999848678158	WITHOUT_CLASSIFICATION	1.5132184091123638E-8	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999982873534277	WITHOUT_CLASSIFICATION	1.7126465722311092E-6	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.999999867611891	WITHOUT_CLASSIFICATION	1.3238810904114318E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999997074561111	WITHOUT_CLASSIFICATION	2.92543888967157E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999997074561111	WITHOUT_CLASSIFICATION	2.92543888967157E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999997074561111	WITHOUT_CLASSIFICATION	2.92543888967157E-7	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.999999716355373	WITHOUT_CLASSIFICATION	2.8364462708234083E-7	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.999999953304503	WITHOUT_CLASSIFICATION	4.66954971679326E-8	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999999758787295	WITHOUT_CLASSIFICATION	2.412127064298255E-8	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9999858734484963	WITHOUT_CLASSIFICATION	1.4126551503759537E-5	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999182944336156	WITHOUT_CLASSIFICATION	8.170556638441195E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999987962022296	WITHOUT_CLASSIFICATION	1.2037977703585062E-6	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.999988934670298	WITHOUT_CLASSIFICATION	1.1065329702051154E-5	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999986685348999	WITHOUT_CLASSIFICATION	1.3314651000171534E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999968321030439	WITHOUT_CLASSIFICATION	3.1678969561084644E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999968321030439	WITHOUT_CLASSIFICATION	3.1678969561084644E-6	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999980347714652	WITHOUT_CLASSIFICATION	1.9652285348808044E-6	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999253179115	WITHOUT_CLASSIFICATION	7.468208855195628E-8	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.999989236873816	WITHOUT_CLASSIFICATION	1.076312618401224E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.999989236873816	WITHOUT_CLASSIFICATION	1.076312618401224E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999996435146823	WITHOUT_CLASSIFICATION	3.5648531772212644E-7	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999993960060755	WITHOUT_CLASSIFICATION	6.039939246106754E-7	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999659908196075	WITHOUT_CLASSIFICATION	3.400918039259511E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999998573935893	WITHOUT_CLASSIFICATION	1.4260641076487674E-7	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999977328369137	WITHOUT_CLASSIFICATION	2.2671630864023718E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999986401058916	WITHOUT_CLASSIFICATION	1.3598941084163371E-6	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999816674850225	WITHOUT_CLASSIFICATION	1.833251497759935E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999766569049358	WITHOUT_CLASSIFICATION	2.334309506424097E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999969738707103	WITHOUT_CLASSIFICATION	3.0261292896818543E-6	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999986531404941	WITHOUT_CLASSIFICATION	1.346859505895592E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999977182832545	WITHOUT_CLASSIFICATION	2.281716745592127E-6	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999989444957893	WITHOUT_CLASSIFICATION	1.0555042106606536E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999261014031	WITHOUT_CLASSIFICATION	7.389859691903122E-8	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999952256001197	WITHOUT_CLASSIFICATION	4.774399880369501E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9987243055946773	WITHOUT_CLASSIFICATION	0.001275694405322704	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999983357672202	WITHOUT_CLASSIFICATION	1.664232779765331E-6	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999810065783313	WITHOUT_CLASSIFICATION	1.899342166872901E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999345210834056	WITHOUT_CLASSIFICATION	6.547891659443677E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9996038905317964	WITHOUT_CLASSIFICATION	3.9610946820360117E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999966635357619	WITHOUT_CLASSIFICATION	3.3364642381689443E-6	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999990017468919	WITHOUT_CLASSIFICATION	9.98253108111242E-7	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.999999919502038	WITHOUT_CLASSIFICATION	8.049796202350279E-8	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999993874006149	WITHOUT_CLASSIFICATION	6.125993850820452E-7	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999987438101327	WITHOUT_CLASSIFICATION	1.2561898673835498E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999995563741593	WITHOUT_CLASSIFICATION	4.436258407496873E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999761501191473	WITHOUT_CLASSIFICATION	2.3849880852748887E-5	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9998876542265206	WITHOUT_CLASSIFICATION	1.1234577347937625E-4	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999999605599456	WITHOUT_CLASSIFICATION	3.944005438939024E-8	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999985455118384	WITHOUT_CLASSIFICATION	1.4544881616162687E-6	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.999999040712251	WITHOUT_CLASSIFICATION	9.59287748989391E-7	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999970665389	WITHOUT_CLASSIFICATION	2.9334612317663952E-9	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999753819107816	WITHOUT_CLASSIFICATION	2.4618089218381984E-5	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999993512641103	WITHOUT_CLASSIFICATION	6.487358896392916E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.999996050385156	WITHOUT_CLASSIFICATION	3.949614843943556E-6	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999996185342825	WITHOUT_CLASSIFICATION	3.8146571734650965E-7	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999999416245928	WITHOUT_CLASSIFICATION	5.8375407327935124E-8	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999974739414581	WITHOUT_CLASSIFICATION	2.5260585418251593E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999965444564755	WITHOUT_CLASSIFICATION	3.4555435246125396E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999937891724742	WITHOUT_CLASSIFICATION	6.210827525821263E-6	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999997017461828	WITHOUT_CLASSIFICATION	2.9825381711813255E-7	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.999998808680434	WITHOUT_CLASSIFICATION	1.1913195659412356E-6	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999648203966995	WITHOUT_CLASSIFICATION	3.517960330055275E-5	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999994505013207	WITHOUT_CLASSIFICATION	5.494986793929367E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999971169645537	WITHOUT_CLASSIFICATION	2.8830354462817094E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999989910695762	WITHOUT_CLASSIFICATION	1.0089304237674046E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999932825128782	WITHOUT_CLASSIFICATION	6.7174871218270115E-6	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999660779946578	WITHOUT_CLASSIFICATION	3.3922005342280415E-5	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999980722327724	WITHOUT_CLASSIFICATION	1.927767227680532E-6	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999921098417626	WITHOUT_CLASSIFICATION	7.890158237463347E-6	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.999999634799556	WITHOUT_CLASSIFICATION	3.652004440950973E-7	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999447859555336	WITHOUT_CLASSIFICATION	5.521404446641939E-5	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.999999809413983	WITHOUT_CLASSIFICATION	1.905860169952444E-7	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999997410651451	WITHOUT_CLASSIFICATION	2.5893485490341144E-7	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999999860026166	WITHOUT_CLASSIFICATION	1.3997383346016644E-8	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.999991932922578	WITHOUT_CLASSIFICATION	8.067077421867697E-6	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999992548450743	WITHOUT_CLASSIFICATION	7.451549257506692E-7	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999995108441567	WITHOUT_CLASSIFICATION	4.891558432156502E-7	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999946578372316	WITHOUT_CLASSIFICATION	5.342162768416519E-6	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999996243376656	WITHOUT_CLASSIFICATION	3.7566233443919274E-7	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999914138902471	WITHOUT_CLASSIFICATION	8.586109752845574E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999998420334597	WITHOUT_CLASSIFICATION	1.5796654029446349E-7	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999962646013868	WITHOUT_CLASSIFICATION	3.735398613264294E-6	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999998726102804	WITHOUT_CLASSIFICATION	1.2738971956612958E-7	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999989669079149	WITHOUT_CLASSIFICATION	1.033092085103622E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999996928663719	WITHOUT_CLASSIFICATION	3.071336281124402E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999999546023198	WITHOUT_CLASSIFICATION	4.5397680269445864E-8	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.999999351758551	WITHOUT_CLASSIFICATION	6.482414489573348E-7	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.999976060365233	WITHOUT_CLASSIFICATION	2.3939634767005552E-5	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999755755552133	WITHOUT_CLASSIFICATION	2.4424444786719817E-5	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999999121499069	WITHOUT_CLASSIFICATION	8.785009311756999E-8	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.999999409346221	WITHOUT_CLASSIFICATION	5.906537789589377E-7	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999815761554699	WITHOUT_CLASSIFICATION	1.8423844530145987E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999815761554699	WITHOUT_CLASSIFICATION	1.8423844530145987E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999947996707832	WITHOUT_CLASSIFICATION	5.200329216825475E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999947996707832	WITHOUT_CLASSIFICATION	5.200329216825475E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999838038839999	WITHOUT_CLASSIFICATION	1.619611600006707E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999838038839999	WITHOUT_CLASSIFICATION	1.619611600006707E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999906644486428	WITHOUT_CLASSIFICATION	9.335551357135857E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999906644486428	WITHOUT_CLASSIFICATION	9.335551357135857E-6	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999992536577214	WITHOUT_CLASSIFICATION	7.463422786483419E-7	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999973537720435	WITHOUT_CLASSIFICATION	2.6462279565507365E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999964996986929	WITHOUT_CLASSIFICATION	3.500301307218608E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999943918754871	WITHOUT_CLASSIFICATION	5.60812451293299E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999996337508713	WITHOUT_CLASSIFICATION	3.662491287231881E-7	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999471816538089	WITHOUT_CLASSIFICATION	5.2818346191128276E-5	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.999988979936505	WITHOUT_CLASSIFICATION	1.1020063494879598E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999991483082113	WITHOUT_CLASSIFICATION	8.516917885982193E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999990090537695	WITHOUT_CLASSIFICATION	9.90946230552071E-7	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999997385017708	WITHOUT_CLASSIFICATION	2.614982290953461E-7	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.999999616484955	WITHOUT_CLASSIFICATION	3.8351504507304125E-7	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.99999855641269	WITHOUT_CLASSIFICATION	1.4435873099382466E-6	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999978508175358	WITHOUT_CLASSIFICATION	2.1491824642469804E-6	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999999722914082	WITHOUT_CLASSIFICATION	2.770859178021818E-8	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.999999657012507	WITHOUT_CLASSIFICATION	3.4298749285780417E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999955270009353	WITHOUT_CLASSIFICATION	4.472999064701764E-6	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999999475751543	WITHOUT_CLASSIFICATION	5.2424845597290975E-8	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999981297892352	WITHOUT_CLASSIFICATION	1.8702107647016137E-6	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999842756212665	WITHOUT_CLASSIFICATION	1.5724378733494514E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9999249966881031	WITHOUT_CLASSIFICATION	7.500331189689428E-5	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999988159186892	WITHOUT_CLASSIFICATION	1.184081310685475E-6	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999958000920954	WITHOUT_CLASSIFICATION	4.199907904608732E-6	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999982501779644	WITHOUT_CLASSIFICATION	1.7498220355241492E-6	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999613991476186	WITHOUT_CLASSIFICATION	3.860085238139005E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9998632127626024	WITHOUT_CLASSIFICATION	1.3678723739757702E-4	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.999999792128059	WITHOUT_CLASSIFICATION	2.078719410340076E-7	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999788846890025	WITHOUT_CLASSIFICATION	2.111531099745117E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999973151931125	WITHOUT_CLASSIFICATION	2.6848068874623443E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999973151931125	WITHOUT_CLASSIFICATION	2.6848068874623443E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999984800275107	WITHOUT_CLASSIFICATION	1.5199724893902729E-6	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999991607911478	WITHOUT_CLASSIFICATION	8.392088521913097E-7	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999985579819601	WITHOUT_CLASSIFICATION	1.4420180399011967E-6	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999996033010734	WITHOUT_CLASSIFICATION	3.966989266104474E-7	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999978779533367	WITHOUT_CLASSIFICATION	2.12204666337706E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.999996682728433	WITHOUT_CLASSIFICATION	3.3172715669878682E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999910140698587	WITHOUT_CLASSIFICATION	8.985930141311935E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999910140698587	WITHOUT_CLASSIFICATION	8.985930141311935E-6	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999970926067955	WITHOUT_CLASSIFICATION	2.907393204498039E-6	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.947229520323663	WITHOUT_CLASSIFICATION	0.05277047967633706	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999943828098614	WITHOUT_CLASSIFICATION	5.6171901385802716E-6	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999943828098614	WITHOUT_CLASSIFICATION	5.6171901385802716E-6	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9999992493527174	WITHOUT_CLASSIFICATION	7.506472825850818E-7	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9992106797892957	WITHOUT_CLASSIFICATION	7.893202107042879E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9992106797892957	WITHOUT_CLASSIFICATION	7.893202107042879E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999986866322197	WITHOUT_CLASSIFICATION	1.3133677803162582E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999986866322197	WITHOUT_CLASSIFICATION	1.3133677803162582E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999808469723562	WITHOUT_CLASSIFICATION	1.9153027643738906E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999808469723562	WITHOUT_CLASSIFICATION	1.9153027643738906E-5	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999909280191681	WITHOUT_CLASSIFICATION	9.071980831829925E-6	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999944110016569	WITHOUT_CLASSIFICATION	5.588998343132628E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999926312119154	WITHOUT_CLASSIFICATION	7.368788084627346E-6	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999719468769245	WITHOUT_CLASSIFICATION	2.8053123075516837E-5	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999999536576295	WITHOUT_CLASSIFICATION	4.634237044828781E-8	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999984267689926	WITHOUT_CLASSIFICATION	1.5732310074096111E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999941753199775	WITHOUT_CLASSIFICATION	5.824680022539185E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999994752032458	WITHOUT_CLASSIFICATION	5.247967542743826E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999941753199775	WITHOUT_CLASSIFICATION	5.824680022539185E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999615411338328	WITHOUT_CLASSIFICATION	3.845886616727316E-5	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999991099668725	WITHOUT_CLASSIFICATION	8.900331276339285E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999980308551359	WITHOUT_CLASSIFICATION	1.969144864095567E-6	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999957059050097	WITHOUT_CLASSIFICATION	4.2940949902616476E-6	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999996263523834	WITHOUT_CLASSIFICATION	3.736476166670851E-7	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9998794443290355	WITHOUT_CLASSIFICATION	1.2055567096452115E-4	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999992916361674	WITHOUT_CLASSIFICATION	7.083638325233675E-7	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999981820651567	WITHOUT_CLASSIFICATION	1.8179348432924954E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999998222842067	WITHOUT_CLASSIFICATION	1.7771579333862214E-7	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999953297811685	WITHOUT_CLASSIFICATION	4.670218831512688E-6	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999995007260886	WITHOUT_CLASSIFICATION	4.992739113458561E-7	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999998055315624	WITHOUT_CLASSIFICATION	1.9446843767337324E-7	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999924943251087	WITHOUT_CLASSIFICATION	7.5056748912392695E-6	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999992620741543	WITHOUT_CLASSIFICATION	7.379258456253167E-7	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999954617864886	WITHOUT_CLASSIFICATION	4.538213511477071E-6	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999990824117648	WITHOUT_CLASSIFICATION	9.175882353241052E-7	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999935773682624	WITHOUT_CLASSIFICATION	6.4226317375018335E-6	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.999999903506442	WITHOUT_CLASSIFICATION	9.649355809108108E-8	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999990925279347	WITHOUT_CLASSIFICATION	9.074720653555717E-7	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999841917963314	WITHOUT_CLASSIFICATION	1.5808203668654063E-5	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999996453207121	WITHOUT_CLASSIFICATION	3.5467928797032527E-7	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999997849527642	WITHOUT_CLASSIFICATION	2.150472357928142E-7	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999997108780203	WITHOUT_CLASSIFICATION	2.8912197965958457E-7	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999941031300961	WITHOUT_CLASSIFICATION	5.8968699039442495E-6	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999977126885226	WITHOUT_CLASSIFICATION	2.28731147733921E-6	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999990981264352	WITHOUT_CLASSIFICATION	9.018735649581674E-7	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999999471076327	WITHOUT_CLASSIFICATION	5.289236721728249E-8	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.999999713455406	WITHOUT_CLASSIFICATION	2.865445940497574E-7	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999987280358461	WITHOUT_CLASSIFICATION	1.2719641538729997E-6	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999986700527265	WITHOUT_CLASSIFICATION	1.3299472735193689E-6	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999988844636375	WITHOUT_CLASSIFICATION	1.1155363624508402E-6	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999999789434028	WITHOUT_CLASSIFICATION	2.1056597273939235E-8	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999938509193784	WITHOUT_CLASSIFICATION	6.149080621535612E-6	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999971067771879	WITHOUT_CLASSIFICATION	2.893222812078238E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.999998827521942	WITHOUT_CLASSIFICATION	1.1724780579030696E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999905255560241	WITHOUT_CLASSIFICATION	9.47444397591414E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.999998908019229	WITHOUT_CLASSIFICATION	1.0919807709730668E-6	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999998809328979	WITHOUT_CLASSIFICATION	1.1906710196205855E-7	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999997343485474	WITHOUT_CLASSIFICATION	2.656514526092799E-7	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999950136021442	WITHOUT_CLASSIFICATION	4.9863978558554285E-6	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999971894500022	WITHOUT_CLASSIFICATION	2.8105499978978507E-6	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.999999770894139	WITHOUT_CLASSIFICATION	2.2910586104170654E-7	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999999269200834	WITHOUT_CLASSIFICATION	7.307991645534689E-8	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999987873749561	WITHOUT_CLASSIFICATION	1.2126250439694846E-6	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999999619277888	WITHOUT_CLASSIFICATION	3.807221120946898E-8	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999999446521834	WITHOUT_CLASSIFICATION	5.5347816571484846E-8	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999996592612347	WITHOUT_CLASSIFICATION	3.4073876528460306E-7	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999998276141755	WITHOUT_CLASSIFICATION	1.7238582460202937E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999959740303754	WITHOUT_CLASSIFICATION	4.025969624465155E-6	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999678531710604	WITHOUT_CLASSIFICATION	3.2146828939575605E-5	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999855313308887	WITHOUT_CLASSIFICATION	1.446866911120193E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999981621806597	WITHOUT_CLASSIFICATION	1.837819340257409E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999703925666273	WITHOUT_CLASSIFICATION	2.9607433372595117E-5	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999997774576599	WITHOUT_CLASSIFICATION	2.2254234012327543E-7	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999338949435	WITHOUT_CLASSIFICATION	6.610505655815437E-8	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999338949435	WITHOUT_CLASSIFICATION	6.610505655815437E-8	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.999991754482073	WITHOUT_CLASSIFICATION	8.245517927066311E-6	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999781525818711	WITHOUT_CLASSIFICATION	2.1847418128987315E-5	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999620738865392	WITHOUT_CLASSIFICATION	3.7926113460800565E-5	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999975739824406	WITHOUT_CLASSIFICATION	2.426017559435805E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999998496039625	WITHOUT_CLASSIFICATION	1.5039603753040398E-7	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999995192254707	WITHOUT_CLASSIFICATION	4.807745293354611E-7	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.999774796017543	WITHOUT_CLASSIFICATION	2.252039824569967E-4	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999996361013767	WITHOUT_CLASSIFICATION	3.638986233218647E-7	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999996577874705	WITHOUT_CLASSIFICATION	3.4221252945400564E-7	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999970506694487	WITHOUT_CLASSIFICATION	2.9493305514145284E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999905303575426	WITHOUT_CLASSIFICATION	9.46964245736886E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999905303575426	WITHOUT_CLASSIFICATION	9.46964245736886E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9991528542759665	WITHOUT_CLASSIFICATION	8.471457240334928E-4	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999793957569542	WITHOUT_CLASSIFICATION	2.060424304585553E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999900906525749	WITHOUT_CLASSIFICATION	9.909347425080712E-6	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999964690715515	WITHOUT_CLASSIFICATION	3.5309284486525226E-6	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999995778524159	WITHOUT_CLASSIFICATION	4.2214758407026565E-7	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999996708662493	WITHOUT_CLASSIFICATION	3.291337507108259E-7	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999988361467914	WITHOUT_CLASSIFICATION	1.1638532086235955E-6	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999982463844551	WITHOUT_CLASSIFICATION	1.7536155448489596E-6	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999999916297084	WITHOUT_CLASSIFICATION	8.370291541726152E-9	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999992798467655	WITHOUT_CLASSIFICATION	7.201532343767576E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999986709147757	WITHOUT_CLASSIFICATION	1.3290852243827432E-6	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.999999673183263	WITHOUT_CLASSIFICATION	3.2681673693270904E-7	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999645780393838	WITHOUT_CLASSIFICATION	3.5421960616279574E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999645780393838	WITHOUT_CLASSIFICATION	3.5421960616279574E-5	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999617085275166	WITHOUT_CLASSIFICATION	3.829147248331358E-5	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9996479196433513	WITHOUT_CLASSIFICATION	3.520803566487223E-4	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9997923112940883	WITHOUT_CLASSIFICATION	2.076887059117175E-4	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.999998315172629	WITHOUT_CLASSIFICATION	1.6848273709091551E-6	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999995673456269	WITHOUT_CLASSIFICATION	4.3265437318056295E-7	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999991416277356	WITHOUT_CLASSIFICATION	8.583722643725103E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999944020825305	WITHOUT_CLASSIFICATION	5.597917469438849E-6	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999986207793692	WITHOUT_CLASSIFICATION	1.3792206308365282E-6	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9999695431011125	WITHOUT_CLASSIFICATION	3.0456898887454753E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999991110347125	WITHOUT_CLASSIFICATION	8.88965287604074E-7	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999900906525749	WITHOUT_CLASSIFICATION	9.909347425080712E-6	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999993622208424	WITHOUT_CLASSIFICATION	6.377791575479753E-7	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999992516483696	WITHOUT_CLASSIFICATION	7.483516303992607E-7	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.999999926986734	WITHOUT_CLASSIFICATION	7.301326597429254E-8	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999999983150907	WITHOUT_CLASSIFICATION	1.6849094124754854E-9	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999996946862022	WITHOUT_CLASSIFICATION	3.0531379775802946E-7	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.999999670013548	WITHOUT_CLASSIFICATION	3.2998645194868426E-7	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999998897947149	WITHOUT_CLASSIFICATION	1.102052851217246E-7	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.999998801683192	WITHOUT_CLASSIFICATION	1.1983168079229766E-6	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999999774098326	WITHOUT_CLASSIFICATION	2.259016744867774E-8	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999990228876086	WITHOUT_CLASSIFICATION	9.771123913887804E-7	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999979361583119	WITHOUT_CLASSIFICATION	2.0638416880450017E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999998876094621	WITHOUT_CLASSIFICATION	1.1239053785154987E-7	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999997557832221	WITHOUT_CLASSIFICATION	2.4421677790599296E-7	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9993394193996814	WITHOUT_CLASSIFICATION	6.605806003185079E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999988775810844	WITHOUT_CLASSIFICATION	1.1224189154898488E-6	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999998377492998	WITHOUT_CLASSIFICATION	1.622507001983278E-7	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999911614995687	WITHOUT_CLASSIFICATION	8.838500431240721E-6	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999718495408585	WITHOUT_CLASSIFICATION	2.8150459141585232E-5	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999235983039529	WITHOUT_CLASSIFICATION	7.640169604713696E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999984196171904	WITHOUT_CLASSIFICATION	1.5803828096709405E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9998952180482924	WITHOUT_CLASSIFICATION	1.0478195170758847E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999991091642737	WITHOUT_CLASSIFICATION	8.908357264152156E-7	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9998690892655423	WITHOUT_CLASSIFICATION	1.3091073445768597E-4	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9999517766272638	WITHOUT_CLASSIFICATION	4.822337273617806E-5	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999904773334899	WITHOUT_CLASSIFICATION	9.522666510152782E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999999921194473	WITHOUT_CLASSIFICATION	7.88055266572761E-9	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999191289696288	WITHOUT_CLASSIFICATION	8.087103037127173E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999993031454767	WITHOUT_CLASSIFICATION	6.968545233842925E-7	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999975470663344	WITHOUT_CLASSIFICATION	2.452933665682514E-6	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999946173963693	WITHOUT_CLASSIFICATION	5.382603630765602E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999941605827466	WITHOUT_CLASSIFICATION	5.8394172534049285E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999941605827466	WITHOUT_CLASSIFICATION	5.8394172534049285E-6	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999724934991057	WITHOUT_CLASSIFICATION	2.7506500894277082E-5	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999898596160685	WITHOUT_CLASSIFICATION	1.014038393151986E-5	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999966559512949	WITHOUT_CLASSIFICATION	3.344048705152908E-6	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999843310111141	WITHOUT_CLASSIFICATION	1.566898888601609E-5	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999999560270045	WITHOUT_CLASSIFICATION	4.3972995426260094E-8	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999990670078498	WITHOUT_CLASSIFICATION	9.329921502638455E-7	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999977182832545	WITHOUT_CLASSIFICATION	2.281716745592127E-6	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999994869923793	WITHOUT_CLASSIFICATION	5.130076207678354E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999906424438547	WITHOUT_CLASSIFICATION	9.357556145329249E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999993850502773	WITHOUT_CLASSIFICATION	6.149497227888645E-7	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999992115705152	WITHOUT_CLASSIFICATION	7.884294848734945E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999967443650314	WITHOUT_CLASSIFICATION	3.25563496862236E-6	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.999998266806146	WITHOUT_CLASSIFICATION	1.7331938539041996E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999447859555336	WITHOUT_CLASSIFICATION	5.521404446641939E-5	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999976557578412	WITHOUT_CLASSIFICATION	2.344242158919883E-6	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999999338504366	WITHOUT_CLASSIFICATION	6.61495633446344E-8	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999995641435403	WITHOUT_CLASSIFICATION	4.358564597436027E-7	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999997743706389	WITHOUT_CLASSIFICATION	2.2562936107751654E-7	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.999999691313818	WITHOUT_CLASSIFICATION	3.086861818935986E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999990343067819	WITHOUT_CLASSIFICATION	9.65693218030386E-7	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999997785372794	WITHOUT_CLASSIFICATION	2.2146272058003002E-7	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999997785372794	WITHOUT_CLASSIFICATION	2.2146272058003002E-7	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999996816140034	WITHOUT_CLASSIFICATION	3.183859965883109E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999983451402645	WITHOUT_CLASSIFICATION	1.6548597354642424E-6	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999944832189479	WITHOUT_CLASSIFICATION	5.516781052101136E-6	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.999999079997187	WITHOUT_CLASSIFICATION	9.200028129454027E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999997766545817	WITHOUT_CLASSIFICATION	2.233454183245074E-7	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999989568606578	WITHOUT_CLASSIFICATION	1.0431393422218396E-6	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999998372918983	WITHOUT_CLASSIFICATION	1.627081017131636E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999142770242	WITHOUT_CLASSIFICATION	8.572297589640382E-8	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999999383409308	WITHOUT_CLASSIFICATION	6.165906914665568E-8	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999999999566519	WITHOUT_CLASSIFICATION	4.334806646930546E-11	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999996925278609	WITHOUT_CLASSIFICATION	3.0747213904492564E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999978302789603	WITHOUT_CLASSIFICATION	2.169721039769199E-6	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999999217225867	WITHOUT_CLASSIFICATION	7.827741341505515E-8	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999737263229	WITHOUT_CLASSIFICATION	2.6273677114720062E-8	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999995590754922	WITHOUT_CLASSIFICATION	4.40924507837738E-7	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9998851324850685	WITHOUT_CLASSIFICATION	1.148675149315422E-4	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999790921504403	WITHOUT_CLASSIFICATION	2.0907849559651386E-5	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999996861584572	WITHOUT_CLASSIFICATION	3.1384154276599465E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999992862355191	WITHOUT_CLASSIFICATION	7.137644807521906E-7	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999931856497121	WITHOUT_CLASSIFICATION	6.814350287903387E-6	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9999976995087501	WITHOUT_CLASSIFICATION	2.3004912499825575E-6	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999938772971482	WITHOUT_CLASSIFICATION	6.1227028518496885E-6	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999979656365222	WITHOUT_CLASSIFICATION	2.0343634778377862E-6	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9962191928695062	WITHOUT_CLASSIFICATION	0.003780807130493787	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999995762400601	WITHOUT_CLASSIFICATION	4.237599399324027E-7	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999991772463032	WITHOUT_CLASSIFICATION	8.227536968148096E-7	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999826967748008	WITHOUT_CLASSIFICATION	1.730322519915498E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999963700684561	WITHOUT_CLASSIFICATION	3.629931543992907E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999989213722342	WITHOUT_CLASSIFICATION	1.0786277658288007E-6	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999514448014903	WITHOUT_CLASSIFICATION	4.855519850968715E-5	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999943348112307	WITHOUT_CLASSIFICATION	5.66518876932763E-6	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999996682966502	WITHOUT_CLASSIFICATION	3.317033498007712E-7	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.999995228868631	WITHOUT_CLASSIFICATION	4.771131368963975E-6	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999828950044435	WITHOUT_CLASSIFICATION	1.7104995556543356E-5	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9999870836225281	WITHOUT_CLASSIFICATION	1.2916377471984464E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9965380731609611	WITHOUT_CLASSIFICATION	0.0034619268390388867	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.998296554333761	WITHOUT_CLASSIFICATION	0.001703445666238989	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999993946984449	WITHOUT_CLASSIFICATION	6.053015550897852E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.999999038885683	WITHOUT_CLASSIFICATION	9.61114316987598E-7	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999987089480139	WITHOUT_CLASSIFICATION	1.2910519861115417E-6	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.999999140037084	WITHOUT_CLASSIFICATION	8.599629159801256E-7	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999945255440321	WITHOUT_CLASSIFICATION	5.474455967884769E-6	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999992431371267	WITHOUT_CLASSIFICATION	7.568628732235084E-7	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999773066964946	WITHOUT_CLASSIFICATION	2.269330350536931E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999526528411695	WITHOUT_CLASSIFICATION	4.734715883043509E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999773066964946	WITHOUT_CLASSIFICATION	2.269330350536931E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9988770568217579	WITHOUT_CLASSIFICATION	0.0011229431782421794	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9996763883958488	WITHOUT_CLASSIFICATION	3.236116041512003E-4	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999994158551471	WITHOUT_CLASSIFICATION	5.841448530171507E-7	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.5537601953248455	WITHOUT_CLASSIFICATION	0.4462398046751545	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9998836765549532	WITHOUT_CLASSIFICATION	1.1632344504674967E-4	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.999999516339537	WITHOUT_CLASSIFICATION	4.836604630190655E-7	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999992702605669	WITHOUT_CLASSIFICATION	7.297394331725228E-7	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9997435450674637	WITHOUT_CLASSIFICATION	2.564549325363729E-4	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999998673356549	WITHOUT_CLASSIFICATION	1.326643450285561E-7	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9851018192655389	WITHOUT_CLASSIFICATION	0.014898180734461202	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9927538811867604	WITHOUT_CLASSIFICATION	0.007246118813239543	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999995709246834	WITHOUT_CLASSIFICATION	4.2907531666740535E-7	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999992199635125	WITHOUT_CLASSIFICATION	7.800364875377234E-7	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.999994179064231	WITHOUT_CLASSIFICATION	5.8209357689148004E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999920548233083	WITHOUT_CLASSIFICATION	7.945176691750428E-6	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9447613752886124	WITHOUT_CLASSIFICATION	0.05523862471138765	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999957817150527	WITHOUT_CLASSIFICATION	4.218284947408142E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999737784811934	WITHOUT_CLASSIFICATION	2.622151880658172E-5	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999968683174499	WITHOUT_CLASSIFICATION	3.1316825501731602E-6	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999973663339071	WITHOUT_CLASSIFICATION	2.633666092963296E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.999965919778407	WITHOUT_CLASSIFICATION	3.408022159309213E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999973929520785	WITHOUT_CLASSIFICATION	2.607047921557995E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999475441600914	WITHOUT_CLASSIFICATION	5.2455839908633256E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999994885762422	WITHOUT_CLASSIFICATION	5.114237577446557E-7	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999987624230428	WITHOUT_CLASSIFICATION	1.2375769571710655E-6	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999947867961422	WITHOUT_CLASSIFICATION	5.213203857878817E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999824662937884	WITHOUT_CLASSIFICATION	1.7533706211617698E-5	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999993131214576	WITHOUT_CLASSIFICATION	6.868785424024974E-7	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.999991240063146	WITHOUT_CLASSIFICATION	8.759936853963272E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999980004712101	WITHOUT_CLASSIFICATION	1.9995287899221654E-6	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999856364786576	WITHOUT_CLASSIFICATION	1.4363521342485703E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999857324170546	WITHOUT_CLASSIFICATION	1.4267582945302426E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999899652045641	WITHOUT_CLASSIFICATION	1.003479543596181E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999984062595204	WITHOUT_CLASSIFICATION	1.5937404795984056E-6	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999997585426947	WITHOUT_CLASSIFICATION	2.4145730533667157E-7	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999974273382224	WITHOUT_CLASSIFICATION	2.5726617775278007E-6	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999837281216922	WITHOUT_CLASSIFICATION	1.6271878307796986E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999996602988666	WITHOUT_CLASSIFICATION	3.397011333726834E-7	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999998115782317	WITHOUT_CLASSIFICATION	1.8842176839151358E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999760299882866	WITHOUT_CLASSIFICATION	2.3970011713349206E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999428609753054	WITHOUT_CLASSIFICATION	5.71390246945979E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999985863033906	WITHOUT_CLASSIFICATION	1.4136966094558359E-6	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999999966378754	WITHOUT_CLASSIFICATION	3.3621245292617277E-9	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999933140238614	WITHOUT_CLASSIFICATION	6.685976138606086E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999933140238614	WITHOUT_CLASSIFICATION	6.685976138606086E-6	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999989233450427	WITHOUT_CLASSIFICATION	1.0766549572786594E-6	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999883303257182	WITHOUT_CLASSIFICATION	1.166967428175526E-5	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9990626769553727	WITHOUT_CLASSIFICATION	9.373230446273856E-4	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999963375963565	WITHOUT_CLASSIFICATION	3.662403643364075E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.999992143573959	WITHOUT_CLASSIFICATION	7.856426040920649E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999995952089153	WITHOUT_CLASSIFICATION	4.047910847634433E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.999997797416903	WITHOUT_CLASSIFICATION	2.202583096973077E-6	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.999986409937514	WITHOUT_CLASSIFICATION	1.3590062486033948E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999904774094	WITHOUT_CLASSIFICATION	9.522590599887805E-9	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999999009312469	WITHOUT_CLASSIFICATION	9.906875313908852E-8	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999987749384752	WITHOUT_CLASSIFICATION	1.2250615246688775E-6	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999760473684463	WITHOUT_CLASSIFICATION	2.3952631553710384E-5	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999941745155612	WITHOUT_CLASSIFICATION	5.825484438855241E-6	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999996288655394	WITHOUT_CLASSIFICATION	3.7113446050031186E-7	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999999186147344	WITHOUT_CLASSIFICATION	8.138526568783916E-8	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999999184016743	WITHOUT_CLASSIFICATION	8.159832560430815E-8	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999991145840706	WITHOUT_CLASSIFICATION	8.854159293731103E-7	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999420581560775	WITHOUT_CLASSIFICATION	5.794184392244958E-5	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999995153688185	WITHOUT_CLASSIFICATION	4.846311815704909E-7	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999925873535052	WITHOUT_CLASSIFICATION	7.4126464947817626E-6	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9473030645875754	WITHOUT_CLASSIFICATION	0.05269693541242462	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.8759159034669327	WITHOUT_CLASSIFICATION	0.1240840965330673	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999999444704376	WITHOUT_CLASSIFICATION	5.552956242042918E-8	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999999906436469	WITHOUT_CLASSIFICATION	9.356353223558367E-9	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9999942286963566	WITHOUT_CLASSIFICATION	5.771303643396257E-6	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999998359518676	WITHOUT_CLASSIFICATION	1.6404813245520934E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999957149215339	WITHOUT_CLASSIFICATION	4.285078466124814E-6	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9997849389669223	WITHOUT_CLASSIFICATION	2.150610330776824E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999736342314798	WITHOUT_CLASSIFICATION	2.6365768520137817E-5	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999305929590817	WITHOUT_CLASSIFICATION	6.940704091834005E-5	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999861162317915	WITHOUT_CLASSIFICATION	1.3883768208642138E-5	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999983908269361	WITHOUT_CLASSIFICATION	1.6091730638745723E-6	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999998967405741	WITHOUT_CLASSIFICATION	1.032594258870479E-7	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.999999879115945	WITHOUT_CLASSIFICATION	1.208840548826629E-7	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999997474365075	WITHOUT_CLASSIFICATION	2.5256349252125555E-7	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999994651932346	WITHOUT_CLASSIFICATION	5.348067654059848E-7	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999806396313222	WITHOUT_CLASSIFICATION	1.9360368677742216E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999934957881632	WITHOUT_CLASSIFICATION	6.504211836715226E-6	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9996636743586139	WITHOUT_CLASSIFICATION	3.3632564138601993E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999851275253389	WITHOUT_CLASSIFICATION	1.4872474661223047E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.999991211220262	WITHOUT_CLASSIFICATION	8.788779737925495E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9997675791160813	WITHOUT_CLASSIFICATION	2.324208839187668E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999999185381823	WITHOUT_CLASSIFICATION	8.146181770931062E-8	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999981995506758	WITHOUT_CLASSIFICATION	1.800449324234616E-6	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999551282526685	WITHOUT_CLASSIFICATION	4.487174733152248E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999999091284181	WITHOUT_CLASSIFICATION	9.087158202032585E-8	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999997296351752	WITHOUT_CLASSIFICATION	2.7036482473332695E-7	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999970276870487	WITHOUT_CLASSIFICATION	2.9723129512724375E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999340481987594	WITHOUT_CLASSIFICATION	6.59518012405436E-5	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999983928861838	WITHOUT_CLASSIFICATION	1.607113816192537E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999974339852478	WITHOUT_CLASSIFICATION	2.56601475224094E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999996551331193	WITHOUT_CLASSIFICATION	3.4486688075722787E-7	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999999256493443	WITHOUT_CLASSIFICATION	7.435065571839917E-8	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999998274831439	WITHOUT_CLASSIFICATION	1.7251685615272363E-7	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999977892904037	WITHOUT_CLASSIFICATION	2.2107095962894802E-6	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999999478366416	WITHOUT_CLASSIFICATION	5.216335838910263E-8	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999989678425065	WITHOUT_CLASSIFICATION	1.032157493521971E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998856906429355	WITHOUT_CLASSIFICATION	1.1430935706454538E-4	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999952683506607	WITHOUT_CLASSIFICATION	4.731649339398379E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998117209378089	WITHOUT_CLASSIFICATION	1.882790621911271E-4	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999999694445233	WITHOUT_CLASSIFICATION	3.0555476775926554E-8	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999975833917463	WITHOUT_CLASSIFICATION	2.4166082538120967E-6	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999993978173942	WITHOUT_CLASSIFICATION	6.021826057401873E-7	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999984730629959	WITHOUT_CLASSIFICATION	1.5269370040815895E-6	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999916592544432	WITHOUT_CLASSIFICATION	8.340745556774076E-6	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999962605089963	WITHOUT_CLASSIFICATION	3.739491003701289E-6	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999929109722856	WITHOUT_CLASSIFICATION	7.089027714447322E-6	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999999274269895	WITHOUT_CLASSIFICATION	7.257301042244596E-8	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999686975626224	WITHOUT_CLASSIFICATION	3.1302437377584094E-5	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.999996298892003	WITHOUT_CLASSIFICATION	3.701107996889874E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.999999405756405	WITHOUT_CLASSIFICATION	5.942435950246448E-7	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999953418934003	WITHOUT_CLASSIFICATION	4.658106599622863E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.999999812389694	WITHOUT_CLASSIFICATION	1.8761030591863917E-7	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9998715997921181	WITHOUT_CLASSIFICATION	1.2840020788186388E-4	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9997053175197433	WITHOUT_CLASSIFICATION	2.946824802566824E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9996221019304701	WITHOUT_CLASSIFICATION	3.778980695299347E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9996036561068625	WITHOUT_CLASSIFICATION	3.9634389313746927E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9996654138861316	WITHOUT_CLASSIFICATION	3.345861138683604E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9996474838249506	WITHOUT_CLASSIFICATION	3.5251617504938876E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.999588138729736	WITHOUT_CLASSIFICATION	4.118612702640287E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.999552526605578	WITHOUT_CLASSIFICATION	4.47473394422036E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9996334879460719	WITHOUT_CLASSIFICATION	3.665120539281216E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9997431320927188	WITHOUT_CLASSIFICATION	2.568679072811799E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9995872822008396	WITHOUT_CLASSIFICATION	4.1271779916038446E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9993420586763689	WITHOUT_CLASSIFICATION	6.579413236310589E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9990348673609243	WITHOUT_CLASSIFICATION	9.651326390756922E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9991974697180577	WITHOUT_CLASSIFICATION	8.025302819423161E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9991302624576048	WITHOUT_CLASSIFICATION	8.697375423951387E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.999162084745179	WITHOUT_CLASSIFICATION	8.379152548210376E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9988713060993	WITHOUT_CLASSIFICATION	0.0011286939006999981	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9991572753219339	WITHOUT_CLASSIFICATION	8.427246780662098E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9986568161718885	WITHOUT_CLASSIFICATION	0.001343183828111474	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9993421516330345	WITHOUT_CLASSIFICATION	6.57848366965474E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.999998615995315	WITHOUT_CLASSIFICATION	1.3840046849475832E-6	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999999813667935	WITHOUT_CLASSIFICATION	1.8633206553452653E-8	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999930698292628	WITHOUT_CLASSIFICATION	6.930170737102319E-6	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999978695638823	WITHOUT_CLASSIFICATION	2.130436117740245E-6	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9999916110666359	WITHOUT_CLASSIFICATION	8.388933364142951E-6	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999994925027289	WITHOUT_CLASSIFICATION	5.074972711236351E-7	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999988684322841	WITHOUT_CLASSIFICATION	1.1315677158498898E-6	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9998836815381219	WITHOUT_CLASSIFICATION	1.163184618780047E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999996065163301	WITHOUT_CLASSIFICATION	3.934836697972319E-7	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999941258745055	WITHOUT_CLASSIFICATION	5.874125494486624E-6	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.8178630172370485	DEFECT	0.18213698276295145	WITHOUT_CLASSIFICATION
// integer division	WITHOUT_CLASSIFICATION	0.9999993553466083	WITHOUT_CLASSIFICATION	6.446533915561144E-7	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999967929117494	WITHOUT_CLASSIFICATION	3.207088250665417E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999976240294102	WITHOUT_CLASSIFICATION	2.375970589780402E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999976240294102	WITHOUT_CLASSIFICATION	2.375970589780402E-6	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999991822410107	WITHOUT_CLASSIFICATION	8.177589892477518E-7	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.999958695598386	WITHOUT_CLASSIFICATION	4.130440161411923E-5	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999999992791697	WITHOUT_CLASSIFICATION	7.208302164382615E-10	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999961822588932	WITHOUT_CLASSIFICATION	3.817741106877498E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999922609426645	WITHOUT_CLASSIFICATION	7.73905733559036E-6	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999247685236623	WITHOUT_CLASSIFICATION	7.523147633765858E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999982603261323	WITHOUT_CLASSIFICATION	1.7396738677732814E-6	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999999840384098	WITHOUT_CLASSIFICATION	1.596159020551003E-8	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999954872528072	WITHOUT_CLASSIFICATION	4.512747192810802E-6	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999972282651608	WITHOUT_CLASSIFICATION	2.7717348390830765E-6	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999978768368084	WITHOUT_CLASSIFICATION	2.12316319164635E-6	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.999998064294705	WITHOUT_CLASSIFICATION	1.935705295123093E-6	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999822506215063	WITHOUT_CLASSIFICATION	1.774937849371787E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9996159915251712	WITHOUT_CLASSIFICATION	3.8400847482881025E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999998338450474	WITHOUT_CLASSIFICATION	1.6615495253100673E-7	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999992978356558	WITHOUT_CLASSIFICATION	7.02164344201607E-7	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999703066446424	WITHOUT_CLASSIFICATION	2.9693355357607647E-5	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999999813719718	WITHOUT_CLASSIFICATION	1.8628028300649754E-8	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9999935130370896	WITHOUT_CLASSIFICATION	6.4869629104303125E-6	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999971740890377	WITHOUT_CLASSIFICATION	2.8259109622586386E-6	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999989517604162	WITHOUT_CLASSIFICATION	1.0482395837981995E-6	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999993366061652	WITHOUT_CLASSIFICATION	6.633938346813327E-7	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999980689347252	WITHOUT_CLASSIFICATION	1.9310652748034155E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999986278830422	WITHOUT_CLASSIFICATION	1.3721169577612168E-6	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999961571388882	WITHOUT_CLASSIFICATION	3.842861111719696E-6	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999990873989152	WITHOUT_CLASSIFICATION	9.126010848048542E-7	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999992647434945	WITHOUT_CLASSIFICATION	7.352565053798578E-7	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999999856410977	WITHOUT_CLASSIFICATION	1.4358902290602586E-8	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999999573880314	WITHOUT_CLASSIFICATION	4.261196857583464E-8	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999993409369189	WITHOUT_CLASSIFICATION	6.590630811721937E-7	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999989734601797	WITHOUT_CLASSIFICATION	1.0265398202648215E-6	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999839943729336	WITHOUT_CLASSIFICATION	1.6005627066436147E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999984765991478	WITHOUT_CLASSIFICATION	1.5234008522646633E-6	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.999998169076091	WITHOUT_CLASSIFICATION	1.8309239089823387E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999976252086507	WITHOUT_CLASSIFICATION	2.374791349330713E-6	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999720252257677	WITHOUT_CLASSIFICATION	2.7974774232258183E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999962730835974	WITHOUT_CLASSIFICATION	3.7269164025924867E-6	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999998664777945	WITHOUT_CLASSIFICATION	1.3352220563232238E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999674901480816	WITHOUT_CLASSIFICATION	3.250985191841204E-5	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999999162273899	WITHOUT_CLASSIFICATION	8.377260999849181E-8	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999999401702431	WITHOUT_CLASSIFICATION	5.982975687620846E-8	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999983455697502	WITHOUT_CLASSIFICATION	1.654430249818154E-6	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999853872838235	WITHOUT_CLASSIFICATION	1.461271617654474E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999983579442905	WITHOUT_CLASSIFICATION	1.6420557095030896E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999983579442905	WITHOUT_CLASSIFICATION	1.6420557095030896E-6	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999775083741815	WITHOUT_CLASSIFICATION	2.249162581847166E-5	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999791125175397	WITHOUT_CLASSIFICATION	2.0887482460314106E-5	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999998545770369	WITHOUT_CLASSIFICATION	1.4542296298597715E-7	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.999999197419861	WITHOUT_CLASSIFICATION	8.025801390144088E-7	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999854326737864	WITHOUT_CLASSIFICATION	1.4567326213712635E-5	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999981775579757	WITHOUT_CLASSIFICATION	1.8224420242172092E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999802378696	WITHOUT_CLASSIFICATION	1.9762130425217697E-8	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999604146118833	WITHOUT_CLASSIFICATION	3.958538811666702E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999947193613632	WITHOUT_CLASSIFICATION	5.2806386367906306E-6	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999919883875336	WITHOUT_CLASSIFICATION	8.011612466454463E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.999994434142143	WITHOUT_CLASSIFICATION	5.565857857013142E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999989106113917	WITHOUT_CLASSIFICATION	1.0893886082775831E-6	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.999997642053651	WITHOUT_CLASSIFICATION	2.3579463489559338E-6	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999877783638921	WITHOUT_CLASSIFICATION	1.2221636107923422E-5	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.8392776641793115	WITHOUT_CLASSIFICATION	0.16072233582068862	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999981470120394	WITHOUT_CLASSIFICATION	1.8529879605967733E-6	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999896635758636	WITHOUT_CLASSIFICATION	1.0336424136492372E-5	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999987797242677	WITHOUT_CLASSIFICATION	1.22027573237288E-6	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999999779838635	WITHOUT_CLASSIFICATION	2.2016136504971017E-8	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999921098417626	WITHOUT_CLASSIFICATION	7.890158237463347E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999713275960989	WITHOUT_CLASSIFICATION	2.8672403901135457E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999713275960989	WITHOUT_CLASSIFICATION	2.8672403901135457E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998983157219	WITHOUT_CLASSIFICATION	1.0168427811803171E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998983157219	WITHOUT_CLASSIFICATION	1.0168427811803171E-7	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.999993986059895	WITHOUT_CLASSIFICATION	6.013940105040561E-6	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999928665137698	WITHOUT_CLASSIFICATION	7.133486230219553E-6	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999536401690334	WITHOUT_CLASSIFICATION	4.635983096664191E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999997198776428	WITHOUT_CLASSIFICATION	2.8012235715731813E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999926312119154	WITHOUT_CLASSIFICATION	7.368788084627346E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999998913719398	WITHOUT_CLASSIFICATION	1.0862806023110049E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9846316842568852	WITHOUT_CLASSIFICATION	0.0153683157431149	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999959596288875	WITHOUT_CLASSIFICATION	4.040371112454287E-6	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999995321434632	WITHOUT_CLASSIFICATION	4.6785653685712327E-7	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.999992178912396	WITHOUT_CLASSIFICATION	7.821087604034424E-6	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999921708338722	WITHOUT_CLASSIFICATION	7.829166127779623E-6	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999992981072471	WITHOUT_CLASSIFICATION	7.01892752950707E-7	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999995972940996	WITHOUT_CLASSIFICATION	4.0270590045374495E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9999981759129974	WITHOUT_CLASSIFICATION	1.8240870025995997E-6	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999992078177674	WITHOUT_CLASSIFICATION	7.921822325302879E-7	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.999999857967051	WITHOUT_CLASSIFICATION	1.4203294896028674E-7	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.99999987116477	WITHOUT_CLASSIFICATION	1.2883523002934256E-7	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999996605704674	WITHOUT_CLASSIFICATION	3.3942953268421465E-7	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999585854702151	WITHOUT_CLASSIFICATION	4.141452978486242E-5	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.999996423053123	WITHOUT_CLASSIFICATION	3.57694687704512E-6	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999951938731099	WITHOUT_CLASSIFICATION	4.806126890113126E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999999784269031	WITHOUT_CLASSIFICATION	2.1573096887280374E-8	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9998955811302184	WITHOUT_CLASSIFICATION	1.044188697815059E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999824662937884	WITHOUT_CLASSIFICATION	1.7533706211617698E-5	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999995952089153	WITHOUT_CLASSIFICATION	4.047910847634433E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999978058311638	WITHOUT_CLASSIFICATION	2.194168836150616E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999846502406726	WITHOUT_CLASSIFICATION	1.5349759327433418E-5	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999981855707611	WITHOUT_CLASSIFICATION	1.814429238932513E-6	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9878718189635958	WITHOUT_CLASSIFICATION	0.01212818103640418	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999993301464175	WITHOUT_CLASSIFICATION	6.69853582564218E-7	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999993301464175	WITHOUT_CLASSIFICATION	6.69853582564218E-7	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999963232008675	WITHOUT_CLASSIFICATION	3.6767991323684156E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999989900986201	WITHOUT_CLASSIFICATION	1.0099013799324644E-6	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999997172118676	WITHOUT_CLASSIFICATION	2.827881323006194E-7	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999996687658961	WITHOUT_CLASSIFICATION	3.312341039480492E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999983788917426	WITHOUT_CLASSIFICATION	1.6211082574696972E-6	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999967962631533	WITHOUT_CLASSIFICATION	3.20373684675374E-6	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999993918685202	WITHOUT_CLASSIFICATION	6.081314798618857E-7	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999999750663051	WITHOUT_CLASSIFICATION	2.4933694827294868E-8	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999999880597318	WITHOUT_CLASSIFICATION	1.1940268234683045E-8	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.99998841586001	WITHOUT_CLASSIFICATION	1.1584139990002198E-5	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999997242130759	WITHOUT_CLASSIFICATION	2.7578692400521864E-7	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999996590009579	WITHOUT_CLASSIFICATION	3.40999042123548E-7	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.999998152235876	WITHOUT_CLASSIFICATION	1.8477641240621974E-6	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999591538641857	WITHOUT_CLASSIFICATION	4.084613581429001E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999952830410501	WITHOUT_CLASSIFICATION	4.716958949895208E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999964996986929	WITHOUT_CLASSIFICATION	3.500301307218608E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999934557511229	WITHOUT_CLASSIFICATION	6.544248877031883E-6	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999988821654328	WITHOUT_CLASSIFICATION	1.11783456729753E-6	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999996055417352	WITHOUT_CLASSIFICATION	3.9445826475129467E-7	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9965796494064172	WITHOUT_CLASSIFICATION	0.0034203505935828556	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999999818794695	WITHOUT_CLASSIFICATION	1.812053049655814E-8	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999998845972141	WITHOUT_CLASSIFICATION	1.1540278589251613E-7	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999903003546581	WITHOUT_CLASSIFICATION	9.699645341875331E-6	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999993414154654	WITHOUT_CLASSIFICATION	6.585845345995861E-7	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999457896936812	WITHOUT_CLASSIFICATION	5.421030631878377E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.999999605867931	WITHOUT_CLASSIFICATION	3.9413206895732694E-7	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999993452140694	WITHOUT_CLASSIFICATION	6.547859305848106E-7	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9996224783789631	WITHOUT_CLASSIFICATION	3.7752162103688356E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999937535020829	WITHOUT_CLASSIFICATION	6.246497917181516E-6	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.999952640538223	WITHOUT_CLASSIFICATION	4.735946177699125E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999484116134288	WITHOUT_CLASSIFICATION	5.158838657112654E-5	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999987180150717	WITHOUT_CLASSIFICATION	1.28198492835582E-6	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.999999297018023	WITHOUT_CLASSIFICATION	7.029819770191139E-7	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.999936011635584	WITHOUT_CLASSIFICATION	6.398836441596946E-5	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999987335701127	WITHOUT_CLASSIFICATION	1.2664298872766255E-6	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.999987466752483	WITHOUT_CLASSIFICATION	1.2533247517110916E-5	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999974565434836	WITHOUT_CLASSIFICATION	2.5434565164711236E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9647154515712418	WITHOUT_CLASSIFICATION	0.035284548428758285	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999999637295051	WITHOUT_CLASSIFICATION	3.6270494943484614E-8	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999948811472117	WITHOUT_CLASSIFICATION	5.118852788240917E-6	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999996197978649	WITHOUT_CLASSIFICATION	3.8020213511179865E-7	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999998419828963	WITHOUT_CLASSIFICATION	1.5801710367269907E-7	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.999996390703886	WITHOUT_CLASSIFICATION	3.6092961140453243E-6	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999974930356338	WITHOUT_CLASSIFICATION	2.5069643661430296E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9998576911856663	WITHOUT_CLASSIFICATION	1.423088143338395E-4	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999989041836288	WITHOUT_CLASSIFICATION	1.0958163711926555E-6	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999972628464864	WITHOUT_CLASSIFICATION	2.737153513726903E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999859537353	WITHOUT_CLASSIFICATION	1.4046264739262744E-8	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999996076901332	WITHOUT_CLASSIFICATION	3.923098668419412E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999993966681335	WITHOUT_CLASSIFICATION	6.033318664784389E-7	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.999909343391063	WITHOUT_CLASSIFICATION	9.065660893700747E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998926516980247	WITHOUT_CLASSIFICATION	1.0734830197527846E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999298353231598	WITHOUT_CLASSIFICATION	7.016467684028033E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.999942661643232	WITHOUT_CLASSIFICATION	5.733835676804011E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999517537263461	WITHOUT_CLASSIFICATION	4.824627365374901E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999957727657948	WITHOUT_CLASSIFICATION	4.22723420514895E-6	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999948559746648	WITHOUT_CLASSIFICATION	5.144025335252298E-6	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999991083454037	WITHOUT_CLASSIFICATION	8.916545963174158E-7	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.999993193758126	WITHOUT_CLASSIFICATION	6.806241873961547E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999977997684137	WITHOUT_CLASSIFICATION	2.200231586339867E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999187977397263	WITHOUT_CLASSIFICATION	8.120226027375827E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.999909343391063	WITHOUT_CLASSIFICATION	9.065660893700747E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999298353231598	WITHOUT_CLASSIFICATION	7.016467684028033E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998926516980247	WITHOUT_CLASSIFICATION	1.0734830197527846E-4	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9998451115979453	WITHOUT_CLASSIFICATION	1.548884020547357E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999671086002762	WITHOUT_CLASSIFICATION	3.2891399723928694E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999904414823159	WITHOUT_CLASSIFICATION	9.558517684102912E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999992076288705	WITHOUT_CLASSIFICATION	7.92371129403763E-7	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999992933377252	WITHOUT_CLASSIFICATION	7.066622748093375E-7	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999995159004508	WITHOUT_CLASSIFICATION	4.840995492211902E-7	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999992771877484	WITHOUT_CLASSIFICATION	7.228122516858336E-7	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999996585523842	WITHOUT_CLASSIFICATION	3.414476159357732E-7	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999913666990404	WITHOUT_CLASSIFICATION	8.633300959614521E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999990138774263	WITHOUT_CLASSIFICATION	9.861225736106873E-7	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999985028235819	WITHOUT_CLASSIFICATION	1.4971764180358558E-6	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.999981576984416	WITHOUT_CLASSIFICATION	1.8423015583906598E-5	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999993957074064	WITHOUT_CLASSIFICATION	6.042925936433694E-7	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.999999151735594	WITHOUT_CLASSIFICATION	8.482644059668272E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.999852037625511	WITHOUT_CLASSIFICATION	1.4796237448907123E-4	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999992045852261	WITHOUT_CLASSIFICATION	7.954147740245219E-7	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999864815469971	WITHOUT_CLASSIFICATION	1.3518453003016018E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999996779418069	WITHOUT_CLASSIFICATION	3.220581931739831E-7	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999996779418069	WITHOUT_CLASSIFICATION	3.220581931739831E-7	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999992866658982	WITHOUT_CLASSIFICATION	7.133341018854008E-7	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999998602770525	WITHOUT_CLASSIFICATION	1.397229475172398E-7	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999999519869239	WITHOUT_CLASSIFICATION	4.8013076130089834E-8	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999331818202339	WITHOUT_CLASSIFICATION	6.681817976603781E-5	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999996448096535	WITHOUT_CLASSIFICATION	3.5519034648916066E-7	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999999937997642	WITHOUT_CLASSIFICATION	6.200235666638375E-9	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999998658539343	WITHOUT_CLASSIFICATION	1.3414606567994105E-7	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999966151788352	WITHOUT_CLASSIFICATION	3.384821164870069E-6	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999997171696804	WITHOUT_CLASSIFICATION	2.828303195146679E-7	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999995327011686	WITHOUT_CLASSIFICATION	4.672988313514294E-7	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.999999870064157	WITHOUT_CLASSIFICATION	1.299358430679083E-7	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999968283761279	WITHOUT_CLASSIFICATION	3.1716238719716668E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999968369833888	WITHOUT_CLASSIFICATION	3.1630166111986807E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999888375992388	WITHOUT_CLASSIFICATION	1.116240076114813E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999999292554392	WITHOUT_CLASSIFICATION	7.074456080083813E-8	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999995689527179	WITHOUT_CLASSIFICATION	4.3104728214053857E-7	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999983850101388	WITHOUT_CLASSIFICATION	1.6149898611821254E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999946921856275	WITHOUT_CLASSIFICATION	5.307814372458459E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999946921856275	WITHOUT_CLASSIFICATION	5.307814372458459E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999921640581305	WITHOUT_CLASSIFICATION	7.83594186949671E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999947686291164	WITHOUT_CLASSIFICATION	5.231370883569963E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.999998272020227	WITHOUT_CLASSIFICATION	1.727979773015703E-6	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999947618536683	WITHOUT_CLASSIFICATION	5.238146331696865E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999975868409521	WITHOUT_CLASSIFICATION	2.413159047867333E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999946921856275	WITHOUT_CLASSIFICATION	5.307814372458459E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999946921856275	WITHOUT_CLASSIFICATION	5.307814372458459E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999924039814	WITHOUT_CLASSIFICATION	7.596018649143607E-9	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999924039814	WITHOUT_CLASSIFICATION	7.596018649143607E-9	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999947638589182	WITHOUT_CLASSIFICATION	5.236141081847435E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999930505301323	WITHOUT_CLASSIFICATION	6.949469867645752E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999792547566946	WITHOUT_CLASSIFICATION	2.074524330546936E-5	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9996740568131808	WITHOUT_CLASSIFICATION	3.259431868191692E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.999986537775001	WITHOUT_CLASSIFICATION	1.346222499908683E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.999986537775001	WITHOUT_CLASSIFICATION	1.346222499908683E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999996159006199	WITHOUT_CLASSIFICATION	3.8409938006843426E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999845004532532	WITHOUT_CLASSIFICATION	1.5499546746906845E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999998235015171	WITHOUT_CLASSIFICATION	1.7649848287942296E-7	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999998761397484	WITHOUT_CLASSIFICATION	1.2386025154197642E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999920064939	WITHOUT_CLASSIFICATION	7.993506107526546E-9	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999994207590592	WITHOUT_CLASSIFICATION	5.792409408382083E-7	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999963635037816	WITHOUT_CLASSIFICATION	3.6364962182899223E-6	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.999981504328803	WITHOUT_CLASSIFICATION	1.849567119699726E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999820978157933	WITHOUT_CLASSIFICATION	1.7902184206733033E-5	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999999784934711	WITHOUT_CLASSIFICATION	2.150652894584531E-8	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999462781599985	WITHOUT_CLASSIFICATION	5.372184000154077E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999997752617497	WITHOUT_CLASSIFICATION	2.2473825030281538E-7	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999989021807755	WITHOUT_CLASSIFICATION	1.0978192244420256E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999994247832301	WITHOUT_CLASSIFICATION	5.752167697763025E-7	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999995689527179	WITHOUT_CLASSIFICATION	4.3104728214053857E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999946921856275	WITHOUT_CLASSIFICATION	5.307814372458459E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999924039814	WITHOUT_CLASSIFICATION	7.596018649143607E-9	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999994207590592	WITHOUT_CLASSIFICATION	5.792409408382083E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999786265857339	WITHOUT_CLASSIFICATION	2.1373414266107414E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999786265857339	WITHOUT_CLASSIFICATION	2.1373414266107414E-5	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999994901095638	WITHOUT_CLASSIFICATION	5.098904362133516E-7	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999989099694	WITHOUT_CLASSIFICATION	1.090030664712777E-9	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999999052369806	WITHOUT_CLASSIFICATION	9.476301942729999E-8	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999996259363666	WITHOUT_CLASSIFICATION	3.740636333624185E-7	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999756520624773	WITHOUT_CLASSIFICATION	2.4347937522675567E-5	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999999804622205	WITHOUT_CLASSIFICATION	1.953777952221626E-8	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9999288054893312	WITHOUT_CLASSIFICATION	7.119451066880004E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9998828251960519	WITHOUT_CLASSIFICATION	1.1717480394815127E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999979338341	WITHOUT_CLASSIFICATION	2.066165807504741E-9	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999794975015	WITHOUT_CLASSIFICATION	2.0502498474999686E-8	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999995823064439	WITHOUT_CLASSIFICATION	4.1769355606496373E-7	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999979512637	WITHOUT_CLASSIFICATION	2.0487361766165336E-9	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.999995618520116	WITHOUT_CLASSIFICATION	4.381479883980191E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999983850101388	WITHOUT_CLASSIFICATION	1.6149898611821254E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999924039814	WITHOUT_CLASSIFICATION	7.596018649143607E-9	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999845004532532	WITHOUT_CLASSIFICATION	1.5499546746906845E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999998235015171	WITHOUT_CLASSIFICATION	1.7649848287942296E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999998235015171	WITHOUT_CLASSIFICATION	1.7649848287942296E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999920064939	WITHOUT_CLASSIFICATION	7.993506107526546E-9	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999994207590592	WITHOUT_CLASSIFICATION	5.792409408382083E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999994207590592	WITHOUT_CLASSIFICATION	5.792409408382083E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999786265857339	WITHOUT_CLASSIFICATION	2.1373414266107414E-5	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999674234572596	WITHOUT_CLASSIFICATION	3.257654274047429E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999065984157641	WITHOUT_CLASSIFICATION	9.340158423588642E-5	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999988401738366	WITHOUT_CLASSIFICATION	1.1598261634312832E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999998419008049	WITHOUT_CLASSIFICATION	1.5809919506907404E-7	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999939897946273	WITHOUT_CLASSIFICATION	6.010205372719975E-6	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9998593693068125	WITHOUT_CLASSIFICATION	1.4063069318745556E-4	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999976912381492	WITHOUT_CLASSIFICATION	2.308761850742436E-6	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999994078640625	WITHOUT_CLASSIFICATION	5.92135937544617E-7	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999990738287791	WITHOUT_CLASSIFICATION	9.26171220956701E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999845004532532	WITHOUT_CLASSIFICATION	1.5499546746906845E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999998235015171	WITHOUT_CLASSIFICATION	1.7649848287942296E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999998235015171	WITHOUT_CLASSIFICATION	1.7649848287942296E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999920064939	WITHOUT_CLASSIFICATION	7.993506107526546E-9	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9998828251960519	WITHOUT_CLASSIFICATION	1.1717480394815127E-4	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999794975015	WITHOUT_CLASSIFICATION	2.0502498474999686E-8	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999989490199244	WITHOUT_CLASSIFICATION	1.0509800756580891E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999996242568818	WITHOUT_CLASSIFICATION	3.757431182046424E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999900095490868	WITHOUT_CLASSIFICATION	9.990450913162809E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999900095490868	WITHOUT_CLASSIFICATION	9.990450913162809E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999976794894972	WITHOUT_CLASSIFICATION	2.3205105026897426E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999923608154506	WITHOUT_CLASSIFICATION	7.639184549478727E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999968404971423	WITHOUT_CLASSIFICATION	3.1595028576136238E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999974112039874	WITHOUT_CLASSIFICATION	2.588796012579928E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999998978785822	WITHOUT_CLASSIFICATION	1.0212141768812885E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999998978785822	WITHOUT_CLASSIFICATION	1.0212141768812885E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999994345874313	WITHOUT_CLASSIFICATION	5.654125686240368E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999994345874313	WITHOUT_CLASSIFICATION	5.654125686240368E-7	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999986345174169	WITHOUT_CLASSIFICATION	1.3654825831623541E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999986345174169	WITHOUT_CLASSIFICATION	1.3654825831623541E-6	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999993089898597	WITHOUT_CLASSIFICATION	6.91010140264644E-7	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999994142325865	WITHOUT_CLASSIFICATION	5.857674134083324E-7	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999751386934378	WITHOUT_CLASSIFICATION	2.486130656208866E-5	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999949886062819	WITHOUT_CLASSIFICATION	5.0113937181238306E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999912262309877	WITHOUT_CLASSIFICATION	8.773769012412576E-6	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999975136929021	WITHOUT_CLASSIFICATION	2.486307097893207E-6	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999981636891075	WITHOUT_CLASSIFICATION	1.8363108923818092E-6	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999998394340149	WITHOUT_CLASSIFICATION	1.6056598511030818E-7	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999935969584917	WITHOUT_CLASSIFICATION	6.4030415084282E-6	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999582218519153	WITHOUT_CLASSIFICATION	4.177814808472425E-5	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999989656043364	WITHOUT_CLASSIFICATION	1.0343956635112564E-6	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999957019797701	WITHOUT_CLASSIFICATION	4.298020230018506E-6	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999985501272096	WITHOUT_CLASSIFICATION	1.4498727903975643E-6	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999523646528848	WITHOUT_CLASSIFICATION	4.763534711517679E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999523646528848	WITHOUT_CLASSIFICATION	4.763534711517679E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.999999898963448	WITHOUT_CLASSIFICATION	1.0103655203550128E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999998913719398	WITHOUT_CLASSIFICATION	1.0862806023110049E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9999924435369545	WITHOUT_CLASSIFICATION	7.556463045590931E-6	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999998091194775	WITHOUT_CLASSIFICATION	1.9088052241921078E-7	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999991289950954	WITHOUT_CLASSIFICATION	8.710049045268066E-7	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999994309526196	WITHOUT_CLASSIFICATION	5.690473805701947E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999995888989056	WITHOUT_CLASSIFICATION	4.111010944917882E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.999997038428903	WITHOUT_CLASSIFICATION	2.9615710969903987E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999997940903844	WITHOUT_CLASSIFICATION	2.0590961549405891E-7	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999956495260955	WITHOUT_CLASSIFICATION	4.350473904547232E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999990747994373	WITHOUT_CLASSIFICATION	9.252005625654066E-7	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9998534494617876	WITHOUT_CLASSIFICATION	1.4655053821248344E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999969201546084	WITHOUT_CLASSIFICATION	3.0798453916471604E-6	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.999928252263202	WITHOUT_CLASSIFICATION	7.174773679793919E-5	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999980064579044	WITHOUT_CLASSIFICATION	1.993542095661017E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.999979553679225	WITHOUT_CLASSIFICATION	2.044632077503448E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999810127405742	WITHOUT_CLASSIFICATION	1.89872594258508E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999997673454932	WITHOUT_CLASSIFICATION	2.3265450682499746E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999978339895143	WITHOUT_CLASSIFICATION	2.1660104858414607E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999978339895143	WITHOUT_CLASSIFICATION	2.1660104858414607E-6	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999998629242299	WITHOUT_CLASSIFICATION	1.370757700597869E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999952237571473	WITHOUT_CLASSIFICATION	4.776242852639641E-6	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999345747296238	WITHOUT_CLASSIFICATION	6.542527037629034E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999345747296238	WITHOUT_CLASSIFICATION	6.542527037629034E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999983458013276	WITHOUT_CLASSIFICATION	1.654198672340403E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999956534170946	WITHOUT_CLASSIFICATION	4.346582905359207E-6	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999864685113428	WITHOUT_CLASSIFICATION	1.3531488657148814E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999869839233271	WITHOUT_CLASSIFICATION	1.3016076672823669E-5	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999986589564427	WITHOUT_CLASSIFICATION	1.3410435573508244E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999903883623447	WITHOUT_CLASSIFICATION	9.611637655356802E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999903883623447	WITHOUT_CLASSIFICATION	9.611637655356802E-6	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999988819583249	WITHOUT_CLASSIFICATION	1.118041675151967E-6	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999987163925029	WITHOUT_CLASSIFICATION	1.2836074970891818E-6	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999979671153304	WITHOUT_CLASSIFICATION	2.032884669625732E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999971853930141	WITHOUT_CLASSIFICATION	2.8146069860258085E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999952237571473	WITHOUT_CLASSIFICATION	4.776242852639641E-6	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999949187056649	WITHOUT_CLASSIFICATION	5.0812943350847425E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999870870088408	WITHOUT_CLASSIFICATION	1.2912991159204844E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999870870088408	WITHOUT_CLASSIFICATION	1.2912991159204844E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999979132339858	WITHOUT_CLASSIFICATION	2.0867660141784832E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999705681881	WITHOUT_CLASSIFICATION	2.9431811839535542E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999705681881	WITHOUT_CLASSIFICATION	2.9431811839535542E-8	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999942879576487	WITHOUT_CLASSIFICATION	5.712042351311471E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999942879576487	WITHOUT_CLASSIFICATION	5.712042351311471E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999942879576487	WITHOUT_CLASSIFICATION	5.712042351311471E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999705681881	WITHOUT_CLASSIFICATION	2.9431811839535542E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999705681881	WITHOUT_CLASSIFICATION	2.9431811839535542E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999979132339858	WITHOUT_CLASSIFICATION	2.0867660141784832E-6	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999999507896281	WITHOUT_CLASSIFICATION	4.921037189035895E-8	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9998911835096781	WITHOUT_CLASSIFICATION	1.088164903219028E-4	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9996575062101463	WITHOUT_CLASSIFICATION	3.4249378985372174E-4	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999944739056831	WITHOUT_CLASSIFICATION	5.5260943168897E-6	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999888138729364	WITHOUT_CLASSIFICATION	1.1186127063640831E-5	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.999999855558062	WITHOUT_CLASSIFICATION	1.4444193788288616E-7	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999998994465976	WITHOUT_CLASSIFICATION	1.0055340242221903E-7	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999991023485617	WITHOUT_CLASSIFICATION	8.976514383415507E-7	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999990747994373	WITHOUT_CLASSIFICATION	9.252005625654066E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999705681881	WITHOUT_CLASSIFICATION	2.9431811839535542E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999705681881	WITHOUT_CLASSIFICATION	2.9431811839535542E-8	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999996712979154	WITHOUT_CLASSIFICATION	3.287020846058164E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999972318754503	WITHOUT_CLASSIFICATION	2.768124549651007E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999993676437426	WITHOUT_CLASSIFICATION	6.323562573988517E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999984847741429	WITHOUT_CLASSIFICATION	1.5152258570135233E-6	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999996684280512	WITHOUT_CLASSIFICATION	3.3157194878414744E-7	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9998515555105636	WITHOUT_CLASSIFICATION	1.4844448943640863E-4	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999989350684635	WITHOUT_CLASSIFICATION	1.0649315365443917E-6	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999632255735	WITHOUT_CLASSIFICATION	3.67744264417499E-8	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999997961385403	WITHOUT_CLASSIFICATION	2.038614596361547E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9997207089334167	WITHOUT_CLASSIFICATION	2.792910665832931E-4	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999915162857297	WITHOUT_CLASSIFICATION	8.483714270266265E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999979348896203	WITHOUT_CLASSIFICATION	2.0651103796979975E-6	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999990275571176	WITHOUT_CLASSIFICATION	9.724428824123343E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999997235911763	WITHOUT_CLASSIFICATION	2.764088237032222E-7	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999999874326008	WITHOUT_CLASSIFICATION	1.256739922723499E-8	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.99999613415646	WITHOUT_CLASSIFICATION	3.865843539958558E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.99999613415646	WITHOUT_CLASSIFICATION	3.865843539958558E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.99999613415646	WITHOUT_CLASSIFICATION	3.865843539958558E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999982093351214	WITHOUT_CLASSIFICATION	1.7906648785218118E-6	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999997302637431	WITHOUT_CLASSIFICATION	2.697362568708691E-7	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999970606750797	WITHOUT_CLASSIFICATION	2.9393249203255636E-6	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9974462573638593	WITHOUT_CLASSIFICATION	0.0025537426361407363	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999998926367804	WITHOUT_CLASSIFICATION	1.0736321954947041E-7	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999999683555905	WITHOUT_CLASSIFICATION	3.164440959654317E-8	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999969723669	WITHOUT_CLASSIFICATION	3.0276331890581665E-9	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999998937449525	WITHOUT_CLASSIFICATION	1.0625504758797416E-7	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999999513776221	WITHOUT_CLASSIFICATION	4.862237779540843E-8	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.999979968342166	WITHOUT_CLASSIFICATION	2.0031657834130832E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999473504185173	WITHOUT_CLASSIFICATION	5.2649581482572715E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9995597324346194	WITHOUT_CLASSIFICATION	4.4026756538063856E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999988819583249	WITHOUT_CLASSIFICATION	1.118041675151967E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999705681881	WITHOUT_CLASSIFICATION	2.9431811839535542E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999705681881	WITHOUT_CLASSIFICATION	2.9431811839535542E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999979132339858	WITHOUT_CLASSIFICATION	2.0867660141784832E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.999999855558062	WITHOUT_CLASSIFICATION	1.4444193788288616E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999972318754503	WITHOUT_CLASSIFICATION	2.768124549651007E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999984847741429	WITHOUT_CLASSIFICATION	1.5152258570135233E-6	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9998515555105636	WITHOUT_CLASSIFICATION	1.4844448943640863E-4	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999993676437426	WITHOUT_CLASSIFICATION	6.323562573988517E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999989350684635	WITHOUT_CLASSIFICATION	1.0649315365443917E-6	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9997207089334167	WITHOUT_CLASSIFICATION	2.792910665832931E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999997961385403	WITHOUT_CLASSIFICATION	2.038614596361547E-7	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999979348896203	WITHOUT_CLASSIFICATION	2.0651103796979975E-6	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999989591257591	WITHOUT_CLASSIFICATION	1.0408742409122812E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.999974466307992	WITHOUT_CLASSIFICATION	2.5533692008006966E-5	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999980027786557	WITHOUT_CLASSIFICATION	1.997221344224272E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999997044678772	WITHOUT_CLASSIFICATION	2.9553212280602927E-7	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999874852857458	WITHOUT_CLASSIFICATION	1.251471425419797E-5	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999597866415563	WITHOUT_CLASSIFICATION	4.021335844383906E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999967711375981	WITHOUT_CLASSIFICATION	3.22886240185732E-6	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9999927023356662	WITHOUT_CLASSIFICATION	7.297664333778856E-6	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999505372358364	WITHOUT_CLASSIFICATION	4.946276416365256E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999620894291	WITHOUT_CLASSIFICATION	3.791057099381332E-8	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.999999135019849	WITHOUT_CLASSIFICATION	8.649801509382296E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999815790418	WITHOUT_CLASSIFICATION	1.8420958108684237E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999054483802	WITHOUT_CLASSIFICATION	9.455161978052045E-8	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999986975725712	WITHOUT_CLASSIFICATION	1.3024274287965405E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999989985026136	WITHOUT_CLASSIFICATION	1.0014973863674223E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999991892734044	WITHOUT_CLASSIFICATION	8.107265956887097E-7	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998751167342	WITHOUT_CLASSIFICATION	1.248832658011514E-7	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999963341775998	WITHOUT_CLASSIFICATION	3.6658224002095543E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999993737188325	WITHOUT_CLASSIFICATION	6.262811674680798E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999993023070727	WITHOUT_CLASSIFICATION	6.976929273004073E-7	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999335341182	WITHOUT_CLASSIFICATION	6.646588174998637E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996398651704	WITHOUT_CLASSIFICATION	3.6013482959243494E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996398651704	WITHOUT_CLASSIFICATION	3.6013482959243494E-7	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999915354032449	WITHOUT_CLASSIFICATION	8.464596755088613E-6	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999757642866	WITHOUT_CLASSIFICATION	2.423571348008061E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998114185549277	WITHOUT_CLASSIFICATION	1.885814450722408E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998114185549277	WITHOUT_CLASSIFICATION	1.885814450722408E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998114185549277	WITHOUT_CLASSIFICATION	1.885814450722408E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998366698430413	WITHOUT_CLASSIFICATION	1.633301569586516E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998366698430413	WITHOUT_CLASSIFICATION	1.633301569586516E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9997969571465257	WITHOUT_CLASSIFICATION	2.0304285347424715E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999110031303466	WITHOUT_CLASSIFICATION	8.89968696534327E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999757642866	WITHOUT_CLASSIFICATION	2.423571348008061E-8	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.999998862508247	WITHOUT_CLASSIFICATION	1.1374917530032394E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998114185549277	WITHOUT_CLASSIFICATION	1.885814450722408E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998114185549277	WITHOUT_CLASSIFICATION	1.885814450722408E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9998366698430413	WITHOUT_CLASSIFICATION	1.633301569586516E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999110031303466	WITHOUT_CLASSIFICATION	8.89968696534327E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999990174003534	WITHOUT_CLASSIFICATION	9.825996465970919E-7	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999990174003534	WITHOUT_CLASSIFICATION	9.825996465970919E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999998154893346	WITHOUT_CLASSIFICATION	1.8451066536977584E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999998154893346	WITHOUT_CLASSIFICATION	1.8451066536977584E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999585117837732	WITHOUT_CLASSIFICATION	4.148821622684878E-5	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999585117837732	WITHOUT_CLASSIFICATION	4.148821622684878E-5	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999728475061501	WITHOUT_CLASSIFICATION	2.7152493849886502E-5	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999970803865756	WITHOUT_CLASSIFICATION	2.9196134242289318E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999970803865756	WITHOUT_CLASSIFICATION	2.9196134242289318E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999993452305219	WITHOUT_CLASSIFICATION	6.547694780772613E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999993452305219	WITHOUT_CLASSIFICATION	6.547694780772613E-7	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999996837454967	WITHOUT_CLASSIFICATION	3.162545032510567E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999993003420983	WITHOUT_CLASSIFICATION	6.99657901646461E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999993003420983	WITHOUT_CLASSIFICATION	6.99657901646461E-7	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999956117609254	WITHOUT_CLASSIFICATION	4.3882390745643E-6	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999017305296666	WITHOUT_CLASSIFICATION	9.826947033350212E-5	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.999998362752719	WITHOUT_CLASSIFICATION	1.637247281029279E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999956117609254	WITHOUT_CLASSIFICATION	4.3882390745643E-6	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999840576564576	WITHOUT_CLASSIFICATION	1.5942343542379193E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999980596450082	WITHOUT_CLASSIFICATION	1.9403549917032525E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999980596450082	WITHOUT_CLASSIFICATION	1.9403549917032525E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999980596450082	WITHOUT_CLASSIFICATION	1.9403549917032525E-6	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999998800889442	WITHOUT_CLASSIFICATION	1.199110557723138E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999976400196856	WITHOUT_CLASSIFICATION	2.3599803143965696E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999898003845059	WITHOUT_CLASSIFICATION	1.019961549413418E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999898003845059	WITHOUT_CLASSIFICATION	1.019961549413418E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999995382063679	WITHOUT_CLASSIFICATION	4.6179363206782293E-7	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999996303783381	WITHOUT_CLASSIFICATION	3.696216619456287E-7	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999995834477148	WITHOUT_CLASSIFICATION	4.1655228519118697E-7	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999994982505772	WITHOUT_CLASSIFICATION	5.017494228947151E-7	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999977500813543	WITHOUT_CLASSIFICATION	2.2499186457881456E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999981265867104	WITHOUT_CLASSIFICATION	1.8734132896261424E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999981265867104	WITHOUT_CLASSIFICATION	1.8734132896261424E-6	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999998607567585	WITHOUT_CLASSIFICATION	1.3924324156119752E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998235663325418	WITHOUT_CLASSIFICATION	1.7643366745817414E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998235663325418	WITHOUT_CLASSIFICATION	1.7643366745817414E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999980596450082	WITHOUT_CLASSIFICATION	1.9403549917032525E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999976400196856	WITHOUT_CLASSIFICATION	2.3599803143965696E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999898003845059	WITHOUT_CLASSIFICATION	1.019961549413418E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999995382063679	WITHOUT_CLASSIFICATION	4.6179363206782293E-7	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999996303783381	WITHOUT_CLASSIFICATION	3.696216619456287E-7	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999995834477148	WITHOUT_CLASSIFICATION	4.1655228519118697E-7	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999994982505772	WITHOUT_CLASSIFICATION	5.017494228947151E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998235663325418	WITHOUT_CLASSIFICATION	1.7643366745817414E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999987507886047	WITHOUT_CLASSIFICATION	1.249211395343837E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999995422254536	WITHOUT_CLASSIFICATION	4.5777454637488204E-7	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999990749368303	WITHOUT_CLASSIFICATION	9.250631698219938E-7	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999995251116426	WITHOUT_CLASSIFICATION	4.748883574208612E-7	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999991647321702	WITHOUT_CLASSIFICATION	8.35267829755819E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999975537565791	WITHOUT_CLASSIFICATION	2.4462434210012873E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999994065600369	WITHOUT_CLASSIFICATION	5.934399629993706E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999994065600369	WITHOUT_CLASSIFICATION	5.934399629993706E-7	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.999985150891676	WITHOUT_CLASSIFICATION	1.4849108323972843E-5	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999864960061323	WITHOUT_CLASSIFICATION	1.3503993867639222E-5	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999631240337465	WITHOUT_CLASSIFICATION	3.687596625356152E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999878081241453	WITHOUT_CLASSIFICATION	1.2191875854651866E-5	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.999993132813369	WITHOUT_CLASSIFICATION	6.867186631026519E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.999993132813369	WITHOUT_CLASSIFICATION	6.867186631026519E-6	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999969876852577	WITHOUT_CLASSIFICATION	3.012314742307385E-6	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999976006533382	WITHOUT_CLASSIFICATION	2.3993466618684326E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999939221245624	WITHOUT_CLASSIFICATION	6.077875437657125E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999939221245624	WITHOUT_CLASSIFICATION	6.077875437657125E-6	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999819798564149	WITHOUT_CLASSIFICATION	1.802014358507855E-5	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999855701168224	WITHOUT_CLASSIFICATION	1.4429883177558715E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999977500813543	WITHOUT_CLASSIFICATION	2.2499186457881456E-6	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999996066276756	WITHOUT_CLASSIFICATION	3.9337232437543814E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999967674020229	WITHOUT_CLASSIFICATION	3.2325979771771052E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999992518579198	WITHOUT_CLASSIFICATION	7.481420800654293E-7	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999999842994062	WITHOUT_CLASSIFICATION	1.570059379181768E-8	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999772170102472	WITHOUT_CLASSIFICATION	2.2782989752830505E-5	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999983798457779	WITHOUT_CLASSIFICATION	1.6201542221070136E-6	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999973115421531	WITHOUT_CLASSIFICATION	2.688457846845642E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999999156362352	WITHOUT_CLASSIFICATION	8.436376471626517E-8	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999980015491424	WITHOUT_CLASSIFICATION	1.9984508574866496E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999980015491424	WITHOUT_CLASSIFICATION	1.9984508574866496E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999978954919733	WITHOUT_CLASSIFICATION	2.10450802673109E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999978954919733	WITHOUT_CLASSIFICATION	2.10450802673109E-6	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999999523716411	WITHOUT_CLASSIFICATION	4.762835905069286E-8	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999760825708661	WITHOUT_CLASSIFICATION	2.3917429133963036E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999760825708661	WITHOUT_CLASSIFICATION	2.3917429133963036E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999760825708661	WITHOUT_CLASSIFICATION	2.3917429133963036E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999883827717562	WITHOUT_CLASSIFICATION	1.161722824383714E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999981543535447	WITHOUT_CLASSIFICATION	1.8456464554543354E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999981543535447	WITHOUT_CLASSIFICATION	1.8456464554543354E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999996453492016	WITHOUT_CLASSIFICATION	3.54650798299085E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.999591930025513	WITHOUT_CLASSIFICATION	4.080699744870015E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999933483744127	WITHOUT_CLASSIFICATION	6.65162558725022E-6	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999997568424419	WITHOUT_CLASSIFICATION	2.431575581724636E-7	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999901076647054	WITHOUT_CLASSIFICATION	9.892335294588632E-6	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999997117887446	WITHOUT_CLASSIFICATION	2.8821125548390676E-7	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999801938351557	WITHOUT_CLASSIFICATION	1.9806164844235162E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999054483802	WITHOUT_CLASSIFICATION	9.455161978052045E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999054483802	WITHOUT_CLASSIFICATION	9.455161978052045E-8	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999883827717562	WITHOUT_CLASSIFICATION	1.161722824383714E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999996453492016	WITHOUT_CLASSIFICATION	3.54650798299085E-7	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999964515046342	WITHOUT_CLASSIFICATION	3.5484953657775026E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.999591930025513	WITHOUT_CLASSIFICATION	4.080699744870015E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999933483744127	WITHOUT_CLASSIFICATION	6.65162558725022E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999985074428344	WITHOUT_CLASSIFICATION	1.4925571655581958E-6	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999983975761317	WITHOUT_CLASSIFICATION	1.6024238682226675E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999992730490069	WITHOUT_CLASSIFICATION	7.269509931196752E-7	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999651709664605	WITHOUT_CLASSIFICATION	3.482903353946919E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999994395437247	WITHOUT_CLASSIFICATION	5.604562752086166E-7	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999997673172331	WITHOUT_CLASSIFICATION	2.326827668919451E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999981564015094	WITHOUT_CLASSIFICATION	1.8435984906453373E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999985074428344	WITHOUT_CLASSIFICATION	1.4925571655581958E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999999443299633	WITHOUT_CLASSIFICATION	5.5670036797364086E-8	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999999443299633	WITHOUT_CLASSIFICATION	5.5670036797364086E-8	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999991262122474	WITHOUT_CLASSIFICATION	8.737877525586303E-7	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999934337130898	WITHOUT_CLASSIFICATION	6.566286910184485E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.999998062271648	WITHOUT_CLASSIFICATION	1.937728352084481E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999996824969724	WITHOUT_CLASSIFICATION	3.1750302768414025E-7	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999999527379875	WITHOUT_CLASSIFICATION	4.7262012599541514E-8	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999998790834321	WITHOUT_CLASSIFICATION	1.209165678117932E-7	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999999610246875	WITHOUT_CLASSIFICATION	3.8975312616895045E-8	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999986850997681	WITHOUT_CLASSIFICATION	1.3149002318999069E-6	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999999277502425	WITHOUT_CLASSIFICATION	7.224975748718513E-8	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999943280145905	WITHOUT_CLASSIFICATION	5.671985409361166E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992359428234	WITHOUT_CLASSIFICATION	7.640571766311016E-7	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999996824969724	WITHOUT_CLASSIFICATION	3.1750302768414025E-7	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999999527379875	WITHOUT_CLASSIFICATION	4.7262012599541514E-8	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999920464341944	WITHOUT_CLASSIFICATION	7.95356580562349E-6	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.999997855594806	WITHOUT_CLASSIFICATION	2.144405194003903E-6	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999978857982948	WITHOUT_CLASSIFICATION	2.114201705141189E-6	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999866399915852	WITHOUT_CLASSIFICATION	1.3360008414934327E-5	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999945502610802	WITHOUT_CLASSIFICATION	5.449738919704097E-6	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999695568341948	WITHOUT_CLASSIFICATION	3.044316580517506E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999393762397479	WITHOUT_CLASSIFICATION	6.0623760252057447E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999972079676632	WITHOUT_CLASSIFICATION	2.792032336844439E-6	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999636389895384	WITHOUT_CLASSIFICATION	3.636101046161258E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999960391519397	WITHOUT_CLASSIFICATION	3.960848060411322E-6	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999747119059292	WITHOUT_CLASSIFICATION	2.5288094070703646E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999960729680933	WITHOUT_CLASSIFICATION	3.9270319066909995E-6	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999990689769481	WITHOUT_CLASSIFICATION	9.310230517515061E-7	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999987231178802	WITHOUT_CLASSIFICATION	1.2768821198433387E-6	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999992942238877	WITHOUT_CLASSIFICATION	7.057761123543461E-7	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999971930304128	WITHOUT_CLASSIFICATION	2.8069695871018547E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999555938516405	WITHOUT_CLASSIFICATION	4.4406148359488074E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.999999622253898	WITHOUT_CLASSIFICATION	3.7774610188372445E-7	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999997864027529	WITHOUT_CLASSIFICATION	2.1359724716196625E-7	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999952141378339	WITHOUT_CLASSIFICATION	4.785862166180206E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999555938516405	WITHOUT_CLASSIFICATION	4.4406148359488074E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.999999622253898	WITHOUT_CLASSIFICATION	3.7774610188372445E-7	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999997864027529	WITHOUT_CLASSIFICATION	2.1359724716196625E-7	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.999992251570064	WITHOUT_CLASSIFICATION	7.748429936027612E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999974458806987	WITHOUT_CLASSIFICATION	2.5541193013137442E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999965420330116	WITHOUT_CLASSIFICATION	3.457966988414568E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.999997715325147	WITHOUT_CLASSIFICATION	2.2846748529470148E-6	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9999877041411084	WITHOUT_CLASSIFICATION	1.2295858891708591E-5	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.999997723669991	WITHOUT_CLASSIFICATION	2.2763300090193547E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.999978258480754	WITHOUT_CLASSIFICATION	2.1741519246020805E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999999500711519	WITHOUT_CLASSIFICATION	4.9928848039194214E-8	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999996767160153	WITHOUT_CLASSIFICATION	3.232839847364696E-7	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999995150039301	WITHOUT_CLASSIFICATION	4.849960699416584E-7	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9632245537098431	WITHOUT_CLASSIFICATION	0.03677544629015704	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999989814071033	WITHOUT_CLASSIFICATION	1.0185928966983316E-6	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999997567984725	WITHOUT_CLASSIFICATION	2.4320152745364193E-7	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999999182261703	WITHOUT_CLASSIFICATION	8.177382976323165E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999997236504399	WITHOUT_CLASSIFICATION	2.7634956012795333E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999998282114454	WITHOUT_CLASSIFICATION	1.7178855465324163E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.999989893840961	WITHOUT_CLASSIFICATION	1.0106159038948914E-5	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999966802190887	WITHOUT_CLASSIFICATION	3.319780911354053E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999996240252081	WITHOUT_CLASSIFICATION	3.759747918900538E-7	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999998773552169	WITHOUT_CLASSIFICATION	1.2264478306619796E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.999998558014218	WITHOUT_CLASSIFICATION	1.4419857819766662E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.999991424030017	WITHOUT_CLASSIFICATION	8.575969983139254E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.999991424030017	WITHOUT_CLASSIFICATION	8.575969983139254E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999993417328551	WITHOUT_CLASSIFICATION	6.582671450021144E-7	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999993417328551	WITHOUT_CLASSIFICATION	6.582671450021144E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999912178413	WITHOUT_CLASSIFICATION	8.782158725965586E-9	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999912178413	WITHOUT_CLASSIFICATION	8.782158725965586E-9	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999829532089	WITHOUT_CLASSIFICATION	1.704679110079565E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999997097382133	WITHOUT_CLASSIFICATION	2.902617867204384E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999792630583	WITHOUT_CLASSIFICATION	2.073694165289007E-8	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999283511948	WITHOUT_CLASSIFICATION	7.164880518365226E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999998578332413	WITHOUT_CLASSIFICATION	1.4216675872002973E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.999999922417705	WITHOUT_CLASSIFICATION	7.758229503552259E-8	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999997372420598	WITHOUT_CLASSIFICATION	2.627579401911428E-7	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999990203602479	WITHOUT_CLASSIFICATION	9.79639752068222E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999054483802	WITHOUT_CLASSIFICATION	9.455161978052045E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999829532089	WITHOUT_CLASSIFICATION	1.704679110079565E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999997097382133	WITHOUT_CLASSIFICATION	2.902617867204384E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999792630583	WITHOUT_CLASSIFICATION	2.073694165289007E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999998578332413	WITHOUT_CLASSIFICATION	1.4216675872002973E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.999999922417705	WITHOUT_CLASSIFICATION	7.758229503552259E-8	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999971898650546	WITHOUT_CLASSIFICATION	2.810134945423574E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999981167108704	WITHOUT_CLASSIFICATION	1.8832891295917576E-6	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999721420288655	WITHOUT_CLASSIFICATION	2.785797113442677E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999721420288655	WITHOUT_CLASSIFICATION	2.785797113442677E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999994112433922	WITHOUT_CLASSIFICATION	5.887566078621945E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999994469341954	WITHOUT_CLASSIFICATION	5.530658046608829E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999997512200296	WITHOUT_CLASSIFICATION	2.487799703835137E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.99999453199392	WITHOUT_CLASSIFICATION	5.468006080003981E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.99999453199392	WITHOUT_CLASSIFICATION	5.468006080003981E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999919201899392	WITHOUT_CLASSIFICATION	8.079810060831E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999991739874265	WITHOUT_CLASSIFICATION	8.260125735408416E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999999257893097	WITHOUT_CLASSIFICATION	7.421069027960284E-8	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999997147397354	WITHOUT_CLASSIFICATION	2.852602646628746E-7	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999282115294228	WITHOUT_CLASSIFICATION	7.178847057722497E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999986975725712	WITHOUT_CLASSIFICATION	1.3024274287965405E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999989985026136	WITHOUT_CLASSIFICATION	1.0014973863674223E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999991892734044	WITHOUT_CLASSIFICATION	8.107265956887097E-7	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998751167342	WITHOUT_CLASSIFICATION	1.248832658011514E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999993023070727	WITHOUT_CLASSIFICATION	6.976929273004073E-7	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999335341182	WITHOUT_CLASSIFICATION	6.646588174998637E-8	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999919201899392	WITHOUT_CLASSIFICATION	8.079810060831E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999991739874265	WITHOUT_CLASSIFICATION	8.260125735408416E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999997147397354	WITHOUT_CLASSIFICATION	2.852602646628746E-7	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999999273564879	WITHOUT_CLASSIFICATION	7.264351211654632E-8	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999997512200296	WITHOUT_CLASSIFICATION	2.487799703835137E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999997512200296	WITHOUT_CLASSIFICATION	2.487799703835137E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992359428234	WITHOUT_CLASSIFICATION	7.640571766311016E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992359428234	WITHOUT_CLASSIFICATION	7.640571766311016E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999878382880728	WITHOUT_CLASSIFICATION	1.216171192722731E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999878382880728	WITHOUT_CLASSIFICATION	1.216171192722731E-5	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999999707628047	WITHOUT_CLASSIFICATION	2.9237195358232708E-8	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.999999922584575	WITHOUT_CLASSIFICATION	7.741542497690108E-8	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999987319721457	WITHOUT_CLASSIFICATION	1.2680278543092378E-6	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.999988703520388	WITHOUT_CLASSIFICATION	1.1296479611851294E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999999813764924	WITHOUT_CLASSIFICATION	1.862350761513058E-8	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999999479533606	WITHOUT_CLASSIFICATION	5.2046639313153206E-8	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9997347644532313	WITHOUT_CLASSIFICATION	2.652355467687356E-4	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999845516724	WITHOUT_CLASSIFICATION	1.544832767596492E-8	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999998108876328	WITHOUT_CLASSIFICATION	1.8911236715307112E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999999698841175	WITHOUT_CLASSIFICATION	3.011588249089681E-8	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999991862922838	WITHOUT_CLASSIFICATION	8.137077162586342E-7	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999933594226676	WITHOUT_CLASSIFICATION	6.640577332274792E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999999072258581	WITHOUT_CLASSIFICATION	9.277414197179799E-8	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.999999855269277	WITHOUT_CLASSIFICATION	1.4473072290022773E-7	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999999973267503	WITHOUT_CLASSIFICATION	2.673249693555353E-9	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999941834452432	WITHOUT_CLASSIFICATION	5.816554756831037E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999988652855285	WITHOUT_CLASSIFICATION	1.1347144715697082E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999988541968138	WITHOUT_CLASSIFICATION	1.1458031862192975E-6	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999998542360771	WITHOUT_CLASSIFICATION	1.4576392292190864E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999989985026136	WITHOUT_CLASSIFICATION	1.0014973863674223E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998751167342	WITHOUT_CLASSIFICATION	1.248832658011514E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996398651704	WITHOUT_CLASSIFICATION	3.6013482959243494E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999898003845059	WITHOUT_CLASSIFICATION	1.019961549413418E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999898003845059	WITHOUT_CLASSIFICATION	1.019961549413418E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999999273564879	WITHOUT_CLASSIFICATION	7.264351211654632E-8	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999997512200296	WITHOUT_CLASSIFICATION	2.487799703835137E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992359428234	WITHOUT_CLASSIFICATION	7.640571766311016E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999878382880728	WITHOUT_CLASSIFICATION	1.216171192722731E-5	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999982124041255	WITHOUT_CLASSIFICATION	1.7875958745036641E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999995239535094	WITHOUT_CLASSIFICATION	4.7604649057882325E-7	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999998605190566	WITHOUT_CLASSIFICATION	1.3948094338159195E-7	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9998184458583537	WITHOUT_CLASSIFICATION	1.8155414164645238E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999993249451793	WITHOUT_CLASSIFICATION	6.750548207816348E-7	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999993249451793	WITHOUT_CLASSIFICATION	6.750548207816348E-7	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999996004478401	WITHOUT_CLASSIFICATION	3.9955215986383956E-7	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999997241950732	WITHOUT_CLASSIFICATION	2.758049267151996E-7	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.999995963729212	WITHOUT_CLASSIFICATION	4.036270788130359E-6	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.999998897622228	WITHOUT_CLASSIFICATION	1.1023777719423739E-6	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999996651435119	WITHOUT_CLASSIFICATION	3.348564880599478E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999996651435119	WITHOUT_CLASSIFICATION	3.348564880599478E-7	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999999976491976	WITHOUT_CLASSIFICATION	2.3508023815162275E-9	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999998921239424	WITHOUT_CLASSIFICATION	1.078760576667097E-7	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999999434083592	WITHOUT_CLASSIFICATION	5.6591640903798514E-8	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999712156477408	WITHOUT_CLASSIFICATION	2.8784352259136944E-5	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999995732453084	WITHOUT_CLASSIFICATION	4.2675469162680057E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999998851222761	WITHOUT_CLASSIFICATION	1.1487772381062142E-7	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999701664787451	WITHOUT_CLASSIFICATION	2.9833521254819978E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999993110619568	WITHOUT_CLASSIFICATION	6.889380432338932E-7	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9992869115425034	WITHOUT_CLASSIFICATION	7.130884574966472E-4	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9999910656213445	WITHOUT_CLASSIFICATION	8.934378655499242E-6	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.8358266164218415	WITHOUT_CLASSIFICATION	0.16417338357815847	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999974947718648	WITHOUT_CLASSIFICATION	2.5052281351192574E-6	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999999997838361	WITHOUT_CLASSIFICATION	2.1616391209130752E-10	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999996753795568	WITHOUT_CLASSIFICATION	3.2462044325006215E-7	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999996615560675	WITHOUT_CLASSIFICATION	3.384439325745415E-7	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999996206935723	WITHOUT_CLASSIFICATION	3.793064276819753E-7	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999905200029774	WITHOUT_CLASSIFICATION	9.479997022532524E-6	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999800706574304	WITHOUT_CLASSIFICATION	1.9929342569533353E-5	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999883972469532	WITHOUT_CLASSIFICATION	1.1602753046814931E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999998295721563	WITHOUT_CLASSIFICATION	1.7042784370744883E-7	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999990029297635	WITHOUT_CLASSIFICATION	9.970702364751238E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999976061184892	WITHOUT_CLASSIFICATION	2.3938815108592054E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999976061184892	WITHOUT_CLASSIFICATION	2.3938815108592054E-6	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999920131540282	WITHOUT_CLASSIFICATION	7.986845971874314E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9994898378257701	WITHOUT_CLASSIFICATION	5.101621742299219E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.999997038428903	WITHOUT_CLASSIFICATION	2.9615710969903987E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.999997038428903	WITHOUT_CLASSIFICATION	2.9615710969903987E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.7991091773104549	DEFECT	0.20089082268954497	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999945685141665	WITHOUT_CLASSIFICATION	5.431485833587015E-6	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999855387761399	WITHOUT_CLASSIFICATION	1.446122386009177E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999960400708648	WITHOUT_CLASSIFICATION	3.959929135165987E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999960400708648	WITHOUT_CLASSIFICATION	3.959929135165987E-6	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999939675853117	WITHOUT_CLASSIFICATION	6.032414688280664E-6	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999988798835999	WITHOUT_CLASSIFICATION	1.1201164000263851E-6	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999959996672977	WITHOUT_CLASSIFICATION	4.0003327022215185E-6	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999996506613634	WITHOUT_CLASSIFICATION	3.493386365888543E-7	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999999537682763	WITHOUT_CLASSIFICATION	4.623172370754505E-8	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999990110125581	WITHOUT_CLASSIFICATION	9.889874420193593E-7	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999852287902369	WITHOUT_CLASSIFICATION	1.4771209763204263E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999994331924951	WITHOUT_CLASSIFICATION	5.668075048666769E-7	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999991496521701	WITHOUT_CLASSIFICATION	8.503478299025592E-7	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9992310180995013	WITHOUT_CLASSIFICATION	7.68981900498665E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999963681877236	WITHOUT_CLASSIFICATION	3.6318122762762697E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999991991267339	WITHOUT_CLASSIFICATION	8.008732661099173E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999997761567305	WITHOUT_CLASSIFICATION	2.2384326953503572E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9996165184769806	WITHOUT_CLASSIFICATION	3.834815230193582E-4	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999889149060408	WITHOUT_CLASSIFICATION	1.108509395907762E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9997714289559925	WITHOUT_CLASSIFICATION	2.285710440074653E-4	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999998038956188	WITHOUT_CLASSIFICATION	1.9610438126048659E-7	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999912316066129	WITHOUT_CLASSIFICATION	8.768393387119173E-6	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999552119301763	WITHOUT_CLASSIFICATION	4.478806982369466E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999959703451605	WITHOUT_CLASSIFICATION	4.02965483955409E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999967032707529	WITHOUT_CLASSIFICATION	3.296729247132398E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999987982171911	WITHOUT_CLASSIFICATION	1.2017828089006255E-6	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999863115068713	WITHOUT_CLASSIFICATION	1.3688493128579947E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999867063934972	WITHOUT_CLASSIFICATION	1.3293606502768734E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999997740698154	WITHOUT_CLASSIFICATION	2.2593018448559318E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.999242113743587	WITHOUT_CLASSIFICATION	7.578862564129803E-4	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9996506704217356	WITHOUT_CLASSIFICATION	3.4932957826444767E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999997296176373	WITHOUT_CLASSIFICATION	2.703823626769728E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999783578117449	WITHOUT_CLASSIFICATION	2.1642188255083726E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999989256215404	WITHOUT_CLASSIFICATION	1.0743784596929085E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999905653808	WITHOUT_CLASSIFICATION	9.434619209882508E-9	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9996165184769806	WITHOUT_CLASSIFICATION	3.834815230193582E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999997296176373	WITHOUT_CLASSIFICATION	2.703823626769728E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999783578117449	WITHOUT_CLASSIFICATION	2.1642188255083726E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999905653808	WITHOUT_CLASSIFICATION	9.434619209882508E-9	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999990094146953	WITHOUT_CLASSIFICATION	9.905853046786334E-7	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999276359202097	WITHOUT_CLASSIFICATION	7.236407979025342E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.999911344975563	WITHOUT_CLASSIFICATION	8.8655024436918E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999999648044003	WITHOUT_CLASSIFICATION	3.519559963061287E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.999999937444418	WITHOUT_CLASSIFICATION	6.25555820147733E-8	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999999659514097	WITHOUT_CLASSIFICATION	3.404859030276361E-8	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.999998805474466	WITHOUT_CLASSIFICATION	1.1945255340914578E-6	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999992147440666	WITHOUT_CLASSIFICATION	7.852559334160116E-7	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999994519530275	WITHOUT_CLASSIFICATION	5.480469725673286E-7	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9987737920771586	WITHOUT_CLASSIFICATION	0.0012262079228414389	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999857508501045	WITHOUT_CLASSIFICATION	1.4249149895569849E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999857508501045	WITHOUT_CLASSIFICATION	1.4249149895569849E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999945015521646	WITHOUT_CLASSIFICATION	5.498447835415133E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999912692192428	WITHOUT_CLASSIFICATION	8.730780757310847E-6	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999997326214216	WITHOUT_CLASSIFICATION	2.6737857833302734E-7	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999993209666908	WITHOUT_CLASSIFICATION	6.790333091793481E-7	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999831498181664	WITHOUT_CLASSIFICATION	1.6850181833587964E-5	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999844026034688	WITHOUT_CLASSIFICATION	1.5597396531209804E-5	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.999996797103449	WITHOUT_CLASSIFICATION	3.2028965510409203E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999826184576392	WITHOUT_CLASSIFICATION	1.7381542360683788E-5	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999999965175697	WITHOUT_CLASSIFICATION	3.4824302337940346E-9	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999907256054	WITHOUT_CLASSIFICATION	9.274394522365133E-9	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999997555780976	WITHOUT_CLASSIFICATION	2.4442190238823674E-7	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999147893055	WITHOUT_CLASSIFICATION	8.521069459229027E-8	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.999999940446731	WITHOUT_CLASSIFICATION	5.955326893881632E-8	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999977199936178	WITHOUT_CLASSIFICATION	2.280006382311519E-6	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999992936345194	WITHOUT_CLASSIFICATION	7.063654805059767E-7	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999901363214724	WITHOUT_CLASSIFICATION	9.863678527602286E-6	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999993741194028	WITHOUT_CLASSIFICATION	6.258805971715697E-7	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999989600031727	WITHOUT_CLASSIFICATION	1.0399968273789636E-6	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999982689076472	WITHOUT_CLASSIFICATION	1.7310923527903004E-6	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999967132755647	WITHOUT_CLASSIFICATION	3.286724435330703E-6	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.99999505370804	WITHOUT_CLASSIFICATION	4.946291960002654E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999986164643977	WITHOUT_CLASSIFICATION	1.3835356023092061E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999999080410304	WITHOUT_CLASSIFICATION	9.195896960146129E-8	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999987364375493	WITHOUT_CLASSIFICATION	1.2635624507031689E-6	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999987447549082	WITHOUT_CLASSIFICATION	1.2552450918111277E-6	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999988217182765	WITHOUT_CLASSIFICATION	1.1782817236283567E-6	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.999878630223358	WITHOUT_CLASSIFICATION	1.2136977664210437E-4	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9999896550879259	WITHOUT_CLASSIFICATION	1.0344912074145201E-5	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999974869294161	WITHOUT_CLASSIFICATION	2.5130705838050856E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.999998752193979	WITHOUT_CLASSIFICATION	1.247806021034564E-6	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.99999226287603	WITHOUT_CLASSIFICATION	7.73712396990743E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999994602434725	WITHOUT_CLASSIFICATION	5.397565274261049E-7	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999999597210821	WITHOUT_CLASSIFICATION	4.027891780274832E-8	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999985257292064	WITHOUT_CLASSIFICATION	1.4742707935782726E-6	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999997773977893	WITHOUT_CLASSIFICATION	2.2260221061182547E-7	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999972495591479	WITHOUT_CLASSIFICATION	2.7504408521357696E-6	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999998834228954	WITHOUT_CLASSIFICATION	1.165771045424246E-7	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999947911518043	WITHOUT_CLASSIFICATION	5.208848195676978E-6	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.999999856743699	WITHOUT_CLASSIFICATION	1.432563010333918E-7	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999999125351022	WITHOUT_CLASSIFICATION	8.746489774764825E-8	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999697137961179	WITHOUT_CLASSIFICATION	3.028620388204391E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999836835538991	WITHOUT_CLASSIFICATION	1.6316446100864427E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999948696806371	WITHOUT_CLASSIFICATION	5.130319362882451E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999954703222191	WITHOUT_CLASSIFICATION	4.529677780953353E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999650923566009	WITHOUT_CLASSIFICATION	3.4907643399001675E-5	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999959045487107	WITHOUT_CLASSIFICATION	4.095451289320091E-6	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999674242508655	WITHOUT_CLASSIFICATION	3.257574913440955E-5	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999964954909709	WITHOUT_CLASSIFICATION	3.5045090290003665E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999999459930469	WITHOUT_CLASSIFICATION	5.400695317712771E-8	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999908058612778	WITHOUT_CLASSIFICATION	9.194138722327078E-6	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999526645828719	WITHOUT_CLASSIFICATION	4.7335417128182994E-5	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999905104247	WITHOUT_CLASSIFICATION	9.489575269544482E-9	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999962623851264	WITHOUT_CLASSIFICATION	3.737614873605727E-6	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999976094380352	WITHOUT_CLASSIFICATION	2.3905619648325022E-6	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999492617590838	WITHOUT_CLASSIFICATION	5.0738240916284075E-5	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999726038690876	WITHOUT_CLASSIFICATION	2.7396130912432902E-5	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999991433055843	WITHOUT_CLASSIFICATION	8.566944158373239E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999982212665623	WITHOUT_CLASSIFICATION	1.7787334376692603E-6	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9999858886423683	WITHOUT_CLASSIFICATION	1.4111357631659566E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.99970964313366	WITHOUT_CLASSIFICATION	2.9035686634010027E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.99970964313366	WITHOUT_CLASSIFICATION	2.9035686634010027E-4	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999951021326023	WITHOUT_CLASSIFICATION	4.897867397673797E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999999478923012	WITHOUT_CLASSIFICATION	5.210769885196991E-8	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999915918139511	WITHOUT_CLASSIFICATION	8.408186048792413E-6	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999714690614199	WITHOUT_CLASSIFICATION	2.8530938580076855E-5	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999924260330219	WITHOUT_CLASSIFICATION	7.573966978191805E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9999563206936856	WITHOUT_CLASSIFICATION	4.36793063144794E-5	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9997863235216916	WITHOUT_CLASSIFICATION	2.136764783082636E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999995846319227	WITHOUT_CLASSIFICATION	4.1536807734283416E-7	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999999733732542	WITHOUT_CLASSIFICATION	2.6626745778062415E-8	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999999779462637	WITHOUT_CLASSIFICATION	2.2053736335850025E-8	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999899263092537	WITHOUT_CLASSIFICATION	1.0073690746442871E-5	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999962973790169	WITHOUT_CLASSIFICATION	3.702620983168644E-6	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999990116413859	WITHOUT_CLASSIFICATION	9.883586140476E-7	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999730130199725	WITHOUT_CLASSIFICATION	2.6986980027427577E-5	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999999696245994	WITHOUT_CLASSIFICATION	3.0375400670756E-8	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999549301337507	WITHOUT_CLASSIFICATION	4.506986624927536E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999991952119804	WITHOUT_CLASSIFICATION	8.04788019427844E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999941270833489	WITHOUT_CLASSIFICATION	5.8729166511018935E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9999481831070325	WITHOUT_CLASSIFICATION	5.181689296745701E-5	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999913992870701	WITHOUT_CLASSIFICATION	8.600712929771852E-6	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999521900194791	WITHOUT_CLASSIFICATION	4.780998052084127E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999971300773424	WITHOUT_CLASSIFICATION	2.869922657714215E-6	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999989683383235	WITHOUT_CLASSIFICATION	1.0316616765075922E-6	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.999999966868889	WITHOUT_CLASSIFICATION	3.313111095768438E-8	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999983191514001	WITHOUT_CLASSIFICATION	1.6808485998612426E-6	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999450442275495	WITHOUT_CLASSIFICATION	5.495577245050727E-5	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999996678425733	WITHOUT_CLASSIFICATION	3.321574267451075E-7	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999999963038928	WITHOUT_CLASSIFICATION	3.696107224664811E-9	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.999996989168268	WITHOUT_CLASSIFICATION	3.010831731969021E-6	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9986898500553968	WITHOUT_CLASSIFICATION	0.0013101499446032286	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999789995620894	WITHOUT_CLASSIFICATION	2.100043791064757E-5	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999990924680233	WITHOUT_CLASSIFICATION	9.075319767373945E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999997305790769	WITHOUT_CLASSIFICATION	2.694209231930336E-7	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999994258354898	WITHOUT_CLASSIFICATION	5.741645101464585E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999997305790769	WITHOUT_CLASSIFICATION	2.694209231930336E-7	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.999999070361212	WITHOUT_CLASSIFICATION	9.296387878634931E-7	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999808953370322	WITHOUT_CLASSIFICATION	1.910466296784813E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999808953370322	WITHOUT_CLASSIFICATION	1.910466296784813E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999808953370322	WITHOUT_CLASSIFICATION	1.910466296784813E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999500086885	WITHOUT_CLASSIFICATION	4.9991311528580625E-8	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999500086885	WITHOUT_CLASSIFICATION	4.9991311528580625E-8	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.999999086327509	WITHOUT_CLASSIFICATION	9.136724909284566E-7	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999718470034817	WITHOUT_CLASSIFICATION	2.8152996518250473E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999964744589294	WITHOUT_CLASSIFICATION	3.5255410705310055E-6	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999994689047771	WITHOUT_CLASSIFICATION	5.31095222866568E-7	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999913474415754	WITHOUT_CLASSIFICATION	8.652558424649015E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999996503881085	WITHOUT_CLASSIFICATION	3.4961189152806013E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999990321035981	WITHOUT_CLASSIFICATION	9.678964019489522E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999954021110616	WITHOUT_CLASSIFICATION	4.597888938274443E-6	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999999874174816	WITHOUT_CLASSIFICATION	1.258251835722935E-8	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999890303925436	WITHOUT_CLASSIFICATION	1.0969607456355082E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999998139467238	WITHOUT_CLASSIFICATION	1.8605327628564823E-7	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9996938767429412	WITHOUT_CLASSIFICATION	3.0612325705882117E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999998406877594	WITHOUT_CLASSIFICATION	1.5931224066452553E-7	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999996983658851	WITHOUT_CLASSIFICATION	3.0163411490867167E-7	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999993951073812	WITHOUT_CLASSIFICATION	6.048926188495554E-7	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999987623365039	WITHOUT_CLASSIFICATION	1.2376634960910338E-6	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999861669122316	WITHOUT_CLASSIFICATION	1.3833087768318244E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999979634806594	WITHOUT_CLASSIFICATION	2.0365193406822623E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999979634806594	WITHOUT_CLASSIFICATION	2.0365193406822623E-6	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.999997308287094	WITHOUT_CLASSIFICATION	2.691712905939052E-6	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999997821447689	WITHOUT_CLASSIFICATION	2.1785523118674123E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999997821447689	WITHOUT_CLASSIFICATION	2.1785523118674123E-7	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999746208701167	WITHOUT_CLASSIFICATION	2.5379129883311777E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999994186677293	WITHOUT_CLASSIFICATION	5.813322705652828E-7	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999991715022989	WITHOUT_CLASSIFICATION	8.284977011058941E-7	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999972184742502	WITHOUT_CLASSIFICATION	2.7815257498828384E-6	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999984865200724	WITHOUT_CLASSIFICATION	1.5134799276349017E-6	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999922900836284	WITHOUT_CLASSIFICATION	7.709916371446942E-6	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999931984324197	WITHOUT_CLASSIFICATION	6.801567580157637E-6	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999996195496124	WITHOUT_CLASSIFICATION	3.8045038755240796E-7	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999997957120307	WITHOUT_CLASSIFICATION	2.042879692224872E-7	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999945215954562	WITHOUT_CLASSIFICATION	5.47840454368782E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999978085566543	WITHOUT_CLASSIFICATION	2.191443345695136E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999943128588763	WITHOUT_CLASSIFICATION	5.687141123625833E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999978058311638	WITHOUT_CLASSIFICATION	2.194168836150616E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999979298138465	WITHOUT_CLASSIFICATION	2.070186153531021E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999954021110616	WITHOUT_CLASSIFICATION	4.597888938274443E-6	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9999740559890955	WITHOUT_CLASSIFICATION	2.5944010904551233E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993671384266	WITHOUT_CLASSIFICATION	6.328615734612599E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999995779133583	WITHOUT_CLASSIFICATION	4.2208664174427296E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999995779133583	WITHOUT_CLASSIFICATION	4.2208664174427296E-7	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.999989562558976	WITHOUT_CLASSIFICATION	1.0437441023938482E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999773979031116	WITHOUT_CLASSIFICATION	2.2602096888388647E-5	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999972571283953	WITHOUT_CLASSIFICATION	2.7428716046988424E-6	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999992771179442	WITHOUT_CLASSIFICATION	7.228820557428784E-7	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999994326897845	WITHOUT_CLASSIFICATION	5.673102154989225E-7	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999999350332768	WITHOUT_CLASSIFICATION	6.496672320642855E-8	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999692060622546	WITHOUT_CLASSIFICATION	3.079393774547934E-5	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.996705340393594	WITHOUT_CLASSIFICATION	0.003294659606406042	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999317820433324	WITHOUT_CLASSIFICATION	6.821795666753463E-5	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999997804042745	WITHOUT_CLASSIFICATION	2.195957255002354E-7	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999953250701321	WITHOUT_CLASSIFICATION	4.6749298679159255E-6	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9998957174389249	WITHOUT_CLASSIFICATION	1.0428256107511522E-4	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.8575038839184009	WITHOUT_CLASSIFICATION	0.1424961160815991	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999999279943671	WITHOUT_CLASSIFICATION	7.200563294977654E-8	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999993761540358	WITHOUT_CLASSIFICATION	6.238459641726815E-7	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999975393987978	WITHOUT_CLASSIFICATION	2.4606012021549233E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999894107367872	WITHOUT_CLASSIFICATION	1.0589263212729495E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999997100196027	WITHOUT_CLASSIFICATION	2.899803972955749E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999996820888732	WITHOUT_CLASSIFICATION	3.179111268272051E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999991217936497	WITHOUT_CLASSIFICATION	8.782063503754234E-7	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999991404052442	WITHOUT_CLASSIFICATION	8.595947558252719E-7	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999995475343529	WITHOUT_CLASSIFICATION	4.5246564707669826E-7	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999987156650917	WITHOUT_CLASSIFICATION	1.2843349082449606E-6	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999998441896593	WITHOUT_CLASSIFICATION	1.5581034079594742E-7	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999999990804519	WITHOUT_CLASSIFICATION	9.195479614526338E-10	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999996211189637	WITHOUT_CLASSIFICATION	3.788810362946232E-7	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9998272013505216	WITHOUT_CLASSIFICATION	1.7279864947849648E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9995505680900993	WITHOUT_CLASSIFICATION	4.494319099005634E-4	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999999804115858	WITHOUT_CLASSIFICATION	1.9588414148412725E-8	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9995572358461257	WITHOUT_CLASSIFICATION	4.427641538743504E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999983756334759	WITHOUT_CLASSIFICATION	1.624366524086787E-6	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999997735796395	WITHOUT_CLASSIFICATION	2.2642036035740692E-7	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999516885977886	WITHOUT_CLASSIFICATION	4.831140221148961E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9988122874912408	WITHOUT_CLASSIFICATION	0.0011877125087591718	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999342270416	WITHOUT_CLASSIFICATION	6.577295843413244E-8	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999945454079293	WITHOUT_CLASSIFICATION	5.454592070677906E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9995505680900993	WITHOUT_CLASSIFICATION	4.494319099005634E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999937100128	WITHOUT_CLASSIFICATION	6.289987176339862E-9	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999342270416	WITHOUT_CLASSIFICATION	6.577295843413244E-8	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999990967898541	WITHOUT_CLASSIFICATION	9.032101458623835E-7	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999997609542405	WITHOUT_CLASSIFICATION	2.3904575950799883E-7	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999999740276967	WITHOUT_CLASSIFICATION	2.5972303373411844E-8	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999997357956528	WITHOUT_CLASSIFICATION	2.642043471839325E-7	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999909268096832	WITHOUT_CLASSIFICATION	9.07319031679002E-6	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999899869018081	WITHOUT_CLASSIFICATION	1.0013098191970273E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999899869018081	WITHOUT_CLASSIFICATION	1.0013098191970273E-5	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999999271228225	WITHOUT_CLASSIFICATION	7.287717751836789E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999998151683085	WITHOUT_CLASSIFICATION	1.8483169148447012E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999991372900842	WITHOUT_CLASSIFICATION	8.627099158248913E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999991372900842	WITHOUT_CLASSIFICATION	8.627099158248913E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999999962540188	WITHOUT_CLASSIFICATION	3.745981164079607E-9	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9997810540760359	WITHOUT_CLASSIFICATION	2.1894592396405266E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999119678079462	WITHOUT_CLASSIFICATION	8.803219205378641E-5	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999119678079462	WITHOUT_CLASSIFICATION	8.803219205378641E-5	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999927576515739	WITHOUT_CLASSIFICATION	7.242348426063229E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999905043114438	WITHOUT_CLASSIFICATION	9.495688556138086E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999995019393039	WITHOUT_CLASSIFICATION	4.980606961341448E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999916059125599	WITHOUT_CLASSIFICATION	8.394087440141851E-6	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999791854558409	WITHOUT_CLASSIFICATION	2.0814544159123276E-5	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999916635855096	WITHOUT_CLASSIFICATION	8.336414490432231E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999979968705902	WITHOUT_CLASSIFICATION	2.0031294097822982E-6	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999994253489953	WITHOUT_CLASSIFICATION	5.746510047441495E-7	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999811593408752	WITHOUT_CLASSIFICATION	1.8840659124776913E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999989779788008	WITHOUT_CLASSIFICATION	1.0220211992173758E-6	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999986454788885	WITHOUT_CLASSIFICATION	1.354521111541981E-6	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999783848583308	WITHOUT_CLASSIFICATION	2.161514166923655E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999928950853245	WITHOUT_CLASSIFICATION	7.1049146754795345E-6	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.999999972795766	WITHOUT_CLASSIFICATION	2.72042339020749E-8	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999930758618292	WITHOUT_CLASSIFICATION	6.924138170871448E-6	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999954253092359	WITHOUT_CLASSIFICATION	4.57469076400862E-6	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.999997167742281	WITHOUT_CLASSIFICATION	2.832257718932404E-6	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999917772935449	WITHOUT_CLASSIFICATION	8.222706455052366E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999998530499828	WITHOUT_CLASSIFICATION	1.4695001722039865E-7	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999864351409516	WITHOUT_CLASSIFICATION	1.3564859048484516E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999995552263236	WITHOUT_CLASSIFICATION	4.447736764810499E-7	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999998412500848	WITHOUT_CLASSIFICATION	1.5874991526343122E-7	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999986094012177	WITHOUT_CLASSIFICATION	1.3905987823809373E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999993172866107	WITHOUT_CLASSIFICATION	6.827133893015013E-6	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999896824070599	WITHOUT_CLASSIFICATION	1.031759294014728E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999913156108277	WITHOUT_CLASSIFICATION	8.68438917229634E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999988612578936	WITHOUT_CLASSIFICATION	1.1387421063983304E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999881054886125	WITHOUT_CLASSIFICATION	1.1894511387446649E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998117209378089	WITHOUT_CLASSIFICATION	1.882790621911271E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998117209378089	WITHOUT_CLASSIFICATION	1.882790621911271E-4	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999884949406552	WITHOUT_CLASSIFICATION	1.150505934473552E-5	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999990195969933	WITHOUT_CLASSIFICATION	9.804030066673193E-7	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999870156308694	WITHOUT_CLASSIFICATION	1.2984369130695331E-5	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998442299229421	WITHOUT_CLASSIFICATION	1.5577007705788038E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999794882718267	WITHOUT_CLASSIFICATION	2.0511728173255977E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999749765083181	WITHOUT_CLASSIFICATION	2.5023491681908354E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999997104631139	WITHOUT_CLASSIFICATION	2.895368861124359E-7	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999991916571638	WITHOUT_CLASSIFICATION	8.083428362977435E-7	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999998294982025	WITHOUT_CLASSIFICATION	1.7050179738066087E-7	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999891935171	WITHOUT_CLASSIFICATION	1.080648289090175E-8	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999964629262088	WITHOUT_CLASSIFICATION	3.537073791184054E-6	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999983430590462	WITHOUT_CLASSIFICATION	1.6569409538057864E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999969778442814	WITHOUT_CLASSIFICATION	3.022155718655068E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999932830401917	WITHOUT_CLASSIFICATION	6.716959808228385E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.999996909506216	WITHOUT_CLASSIFICATION	3.09049378404717E-6	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999901201519008	WITHOUT_CLASSIFICATION	9.879848099100049E-6	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.999998378374607	WITHOUT_CLASSIFICATION	1.6216253929482922E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999980702165646	WITHOUT_CLASSIFICATION	1.9297834354306848E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999942569811646	WITHOUT_CLASSIFICATION	5.743018835423352E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999979668380781	WITHOUT_CLASSIFICATION	2.033161922032943E-6	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999987273041673	WITHOUT_CLASSIFICATION	1.2726958327708381E-6	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999437908539858	WITHOUT_CLASSIFICATION	5.620914601424404E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999999306394315	WITHOUT_CLASSIFICATION	6.936056852648814E-8	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999997039179935	WITHOUT_CLASSIFICATION	2.960820064562195E-7	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999994536529143	WITHOUT_CLASSIFICATION	5.463470857378273E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999994576242806	WITHOUT_CLASSIFICATION	5.423757194808208E-7	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999950088950842	WITHOUT_CLASSIFICATION	4.991104915829006E-6	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.999993993266332	WITHOUT_CLASSIFICATION	6.0067336680462075E-6	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.999995001758965	WITHOUT_CLASSIFICATION	4.998241034889579E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.999999293034278	WITHOUT_CLASSIFICATION	7.069657219275972E-7	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999943789075352	WITHOUT_CLASSIFICATION	5.621092464808186E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999964706017098	WITHOUT_CLASSIFICATION	3.529398290220191E-6	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999993595738519	WITHOUT_CLASSIFICATION	6.40426148208974E-7	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999974523019243	WITHOUT_CLASSIFICATION	2.5476980756902638E-6	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999998787534443	WITHOUT_CLASSIFICATION	1.212465556568668E-7	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999972472417294	WITHOUT_CLASSIFICATION	2.752758270430005E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999992868761461	WITHOUT_CLASSIFICATION	7.131238538654027E-7	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999996791516021	WITHOUT_CLASSIFICATION	3.2084839784447313E-7	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999999990178375	WITHOUT_CLASSIFICATION	9.821624891806013E-10	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999999805492077	WITHOUT_CLASSIFICATION	1.9450792311202168E-8	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.99999911026325	WITHOUT_CLASSIFICATION	8.897367499776484E-7	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999957093817303	WITHOUT_CLASSIFICATION	4.290618269651059E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999956122753764	WITHOUT_CLASSIFICATION	4.387724623558448E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999956122753764	WITHOUT_CLASSIFICATION	4.387724623558448E-6	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999988739905717	WITHOUT_CLASSIFICATION	1.126009428322606E-6	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999965731512359	WITHOUT_CLASSIFICATION	3.4268487640205675E-6	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999900501246216	WITHOUT_CLASSIFICATION	9.94987537836831E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999996995746488	WITHOUT_CLASSIFICATION	3.004253511882591E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999996240252081	WITHOUT_CLASSIFICATION	3.759747918900538E-7	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999998773552169	WITHOUT_CLASSIFICATION	1.2264478306619796E-7	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999981961773976	WITHOUT_CLASSIFICATION	1.803822602484134E-6	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.999999837532443	WITHOUT_CLASSIFICATION	1.6246755686452015E-7	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9962862773988682	WITHOUT_CLASSIFICATION	0.003713722601131836	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999823902253975	WITHOUT_CLASSIFICATION	1.7609774602599463E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999996631043888	WITHOUT_CLASSIFICATION	3.368956111713692E-7	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999985119719212	WITHOUT_CLASSIFICATION	1.488028078824653E-6	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999991251317224	WITHOUT_CLASSIFICATION	8.748682774957596E-7	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999975550341161	WITHOUT_CLASSIFICATION	2.444965883854948E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999986159479628	WITHOUT_CLASSIFICATION	1.3840520370973035E-6	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999961460771284	WITHOUT_CLASSIFICATION	3.853922871664417E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999966414381395	WITHOUT_CLASSIFICATION	3.3585618604354923E-6	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999900187362362	WITHOUT_CLASSIFICATION	9.981263763930939E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999948546257971	WITHOUT_CLASSIFICATION	5.14537420289691E-6	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999906486390091	WITHOUT_CLASSIFICATION	9.351360990963048E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999969501886351	WITHOUT_CLASSIFICATION	3.049811364880297E-6	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999559687762531	WITHOUT_CLASSIFICATION	4.403122374682153E-5	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999998314583552	WITHOUT_CLASSIFICATION	1.68541644729201E-7	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999999298239197	WITHOUT_CLASSIFICATION	7.01760803102303E-8	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999979109426089	WITHOUT_CLASSIFICATION	2.089057391063642E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999952997079183	WITHOUT_CLASSIFICATION	4.7002920816367825E-6	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999958111623585	WITHOUT_CLASSIFICATION	4.188837641510896E-6	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999996793853747	WITHOUT_CLASSIFICATION	3.206146252651832E-7	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999995834193312	WITHOUT_CLASSIFICATION	4.165806687881108E-7	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999991028408631	WITHOUT_CLASSIFICATION	8.971591367353964E-7	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999972170310986	WITHOUT_CLASSIFICATION	2.782968901384247E-6	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999998860109656	WITHOUT_CLASSIFICATION	1.1398903441836119E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999984820708918	WITHOUT_CLASSIFICATION	1.5179291082322992E-6	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999943344539189	WITHOUT_CLASSIFICATION	5.665546081062819E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999996791516021	WITHOUT_CLASSIFICATION	3.2084839784447313E-7	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999994143263576	WITHOUT_CLASSIFICATION	5.85673642317377E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999994106124466	WITHOUT_CLASSIFICATION	5.893875534975376E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999994106124466	WITHOUT_CLASSIFICATION	5.893875534975376E-7	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999978327001455	WITHOUT_CLASSIFICATION	2.1672998544360323E-6	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999987775416331	WITHOUT_CLASSIFICATION	1.222458366897473E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999925708469901	WITHOUT_CLASSIFICATION	7.4291530099478045E-6	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999999504557487	WITHOUT_CLASSIFICATION	4.9544251318382725E-8	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999950195722324	WITHOUT_CLASSIFICATION	4.98042776763391E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999970274175444	WITHOUT_CLASSIFICATION	2.9725824556997624E-6	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999983073906311	WITHOUT_CLASSIFICATION	1.6926093689002262E-6	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999899698562051	WITHOUT_CLASSIFICATION	1.0030143794819853E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999894348436217	WITHOUT_CLASSIFICATION	1.0565156378383915E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999940105211524	WITHOUT_CLASSIFICATION	5.989478847494345E-6	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999643514926714	WITHOUT_CLASSIFICATION	3.564850732864087E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999812682484427	WITHOUT_CLASSIFICATION	1.873175155731279E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999806879865675	WITHOUT_CLASSIFICATION	1.9312013432485163E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999976385031772	WITHOUT_CLASSIFICATION	2.3614968227808626E-6	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999999994891391	WITHOUT_CLASSIFICATION	5.108610148599892E-10	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999804123358912	WITHOUT_CLASSIFICATION	1.9587664108750835E-5	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999726294331838	WITHOUT_CLASSIFICATION	2.737056681614742E-5	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999804171098216	WITHOUT_CLASSIFICATION	1.9582890178509156E-5	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999864561896802	WITHOUT_CLASSIFICATION	1.354381031992007E-5	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999923218864758	WITHOUT_CLASSIFICATION	7.678113524233869E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999627433089774	WITHOUT_CLASSIFICATION	3.725669102262509E-5	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999721823113555	WITHOUT_CLASSIFICATION	2.7817688644412116E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999918273836	WITHOUT_CLASSIFICATION	8.172616331123162E-9	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999993268127032	WITHOUT_CLASSIFICATION	6.73187296710269E-7	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.999904806450636	WITHOUT_CLASSIFICATION	9.51935493640352E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999781572752845	WITHOUT_CLASSIFICATION	2.1842724715480026E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999999582387137	WITHOUT_CLASSIFICATION	4.1761286318448605E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999996234541851	WITHOUT_CLASSIFICATION	3.7654581479421343E-7	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.999999947334574	WITHOUT_CLASSIFICATION	5.266542607670291E-8	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999997638973502	WITHOUT_CLASSIFICATION	2.3610264990306693E-7	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999993102467157	WITHOUT_CLASSIFICATION	6.897532842056656E-7	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999993159223074	WITHOUT_CLASSIFICATION	6.84077692494243E-7	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999996054115828	WITHOUT_CLASSIFICATION	3.945884171972713E-7	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999999132755073	WITHOUT_CLASSIFICATION	8.672449279732504E-8	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999891128887319	WITHOUT_CLASSIFICATION	1.0887111268086065E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999937056761138	WITHOUT_CLASSIFICATION	6.294323886146848E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999954613967544	WITHOUT_CLASSIFICATION	4.538603245489324E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999781572752845	WITHOUT_CLASSIFICATION	2.1842724715480026E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999999582387137	WITHOUT_CLASSIFICATION	4.1761286318448605E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999996234541851	WITHOUT_CLASSIFICATION	3.7654581479421343E-7	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999997638973502	WITHOUT_CLASSIFICATION	2.3610264990306693E-7	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999947844077915	WITHOUT_CLASSIFICATION	5.215592208391051E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999551054504	WITHOUT_CLASSIFICATION	4.489454959084198E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999969383368431	WITHOUT_CLASSIFICATION	3.0616631568224436E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999921190692792	WITHOUT_CLASSIFICATION	7.880930720788433E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999090537703709	WITHOUT_CLASSIFICATION	9.09462296291236E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999877908521427	WITHOUT_CLASSIFICATION	1.2209147857279295E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999994913924783	WITHOUT_CLASSIFICATION	5.086075216325942E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999857365622199	WITHOUT_CLASSIFICATION	1.4263437780097066E-5	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999999528130891	WITHOUT_CLASSIFICATION	4.718691102978326E-8	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.999999802088045	WITHOUT_CLASSIFICATION	1.9791195498991634E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999966721705017	WITHOUT_CLASSIFICATION	3.3278294982529636E-6	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999996106235851	WITHOUT_CLASSIFICATION	3.893764148744232E-7	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999922525200272	WITHOUT_CLASSIFICATION	7.747479972819392E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999998159401514	WITHOUT_CLASSIFICATION	1.8405984848335964E-7	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999996265745733	WITHOUT_CLASSIFICATION	3.7342542673719867E-7	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999988388757405	WITHOUT_CLASSIFICATION	1.1611242595304108E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999999359071001	WITHOUT_CLASSIFICATION	6.409289989236092E-8	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999999008292487	WITHOUT_CLASSIFICATION	9.917075121149495E-8	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999995755298637	WITHOUT_CLASSIFICATION	4.2447013625608364E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999954613967544	WITHOUT_CLASSIFICATION	4.538603245489324E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999551054504	WITHOUT_CLASSIFICATION	4.489454959084198E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999969383368431	WITHOUT_CLASSIFICATION	3.0616631568224436E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999090537703709	WITHOUT_CLASSIFICATION	9.09462296291236E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999877908521427	WITHOUT_CLASSIFICATION	1.2209147857279295E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999994913924783	WITHOUT_CLASSIFICATION	5.086075216325942E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999857365622199	WITHOUT_CLASSIFICATION	1.4263437780097066E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999987492743035	WITHOUT_CLASSIFICATION	1.2507256964379535E-6	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999977363100693	WITHOUT_CLASSIFICATION	2.263689930648494E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999993948802861	WITHOUT_CLASSIFICATION	6.051197140026982E-7	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999997638326094	WITHOUT_CLASSIFICATION	2.361673905833651E-7	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999979669961029	WITHOUT_CLASSIFICATION	2.0330038970631026E-6	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999979669961029	WITHOUT_CLASSIFICATION	2.0330038970631026E-6	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999984070771359	WITHOUT_CLASSIFICATION	1.5929228640459121E-6	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999999233704382	WITHOUT_CLASSIFICATION	7.6629561775724E-8	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999937835822095	WITHOUT_CLASSIFICATION	6.216417790542279E-6	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999892869094781	WITHOUT_CLASSIFICATION	1.0713090521960101E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999996668136542	WITHOUT_CLASSIFICATION	3.3318634580656617E-7	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999776203503934	WITHOUT_CLASSIFICATION	2.237964960663635E-5	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999998051199962	WITHOUT_CLASSIFICATION	1.948800039068257E-7	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999994877321768	WITHOUT_CLASSIFICATION	5.122678232673163E-7	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.999994048877631	WITHOUT_CLASSIFICATION	5.951122369010717E-6	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999952456632439	WITHOUT_CLASSIFICATION	4.754336756069763E-6	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999976898071837	WITHOUT_CLASSIFICATION	2.310192816216159E-6	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999987545948387	WITHOUT_CLASSIFICATION	1.2454051613091695E-6	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999819993341487	WITHOUT_CLASSIFICATION	1.8000665851280915E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999924229873206	WITHOUT_CLASSIFICATION	7.5770126794033685E-6	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999995142658811	WITHOUT_CLASSIFICATION	4.857341190142558E-7	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.999998636078111	WITHOUT_CLASSIFICATION	1.363921889019691E-6	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999059038909	WITHOUT_CLASSIFICATION	9.409610915022824E-8	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999926433636689	WITHOUT_CLASSIFICATION	7.356636331177677E-6	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999775531776751	WITHOUT_CLASSIFICATION	2.244682232490092E-5	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999996387371143	WITHOUT_CLASSIFICATION	3.6126288567043746E-7	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.999557673381437	WITHOUT_CLASSIFICATION	4.4232661856300273E-4	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999999708723533	WITHOUT_CLASSIFICATION	2.9127646744118938E-8	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999998794015262	WITHOUT_CLASSIFICATION	1.205984737762587E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6192675846619485	WITHOUT_CLASSIFICATION	0.3807324153380514	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999992299735542	WITHOUT_CLASSIFICATION	7.700264458712124E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.999986908893821	WITHOUT_CLASSIFICATION	1.3091106178909832E-5	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999996834227011	WITHOUT_CLASSIFICATION	3.1657729899944635E-7	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999876225596508	WITHOUT_CLASSIFICATION	1.2377440349252556E-5	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999869493811003	WITHOUT_CLASSIFICATION	1.3050618899638843E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999992299735542	WITHOUT_CLASSIFICATION	7.700264458712124E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.999986908893821	WITHOUT_CLASSIFICATION	1.3091106178909832E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999924229873206	WITHOUT_CLASSIFICATION	7.5770126794033685E-6	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999973314899696	WITHOUT_CLASSIFICATION	2.6685100303905225E-6	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.99999954658785	WITHOUT_CLASSIFICATION	4.5341215013403126E-7	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999870401405104	WITHOUT_CLASSIFICATION	1.2959859489602002E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999852462978702	WITHOUT_CLASSIFICATION	1.4753702129737197E-5	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999999627072863	WITHOUT_CLASSIFICATION	3.729271368584295E-8	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999976664521211	WITHOUT_CLASSIFICATION	2.333547878943718E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9997969590275126	WITHOUT_CLASSIFICATION	2.030409724873792E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999964407935494	WITHOUT_CLASSIFICATION	3.5592064506214296E-6	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9995633612202113	WITHOUT_CLASSIFICATION	4.3663877978869167E-4	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999945652533673	WITHOUT_CLASSIFICATION	5.434746632722755E-6	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9999626839761928	WITHOUT_CLASSIFICATION	3.731602380720898E-5	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999987223633728	WITHOUT_CLASSIFICATION	1.277636627226025E-6	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999998320302832	WITHOUT_CLASSIFICATION	1.6796971688860846E-7	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.999999393041544	WITHOUT_CLASSIFICATION	6.069584561097072E-7	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999992783804662	WITHOUT_CLASSIFICATION	7.216195338180272E-7	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999898856788028	WITHOUT_CLASSIFICATION	1.0114321197149846E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9999536470182769	WITHOUT_CLASSIFICATION	4.63529817231248E-5	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999770550003068	WITHOUT_CLASSIFICATION	2.2944999693276693E-5	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999792532197	WITHOUT_CLASSIFICATION	2.0746780281969284E-8	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.999998561307801	WITHOUT_CLASSIFICATION	1.43869219894757E-6	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999877607265	WITHOUT_CLASSIFICATION	1.2239273476597931E-8	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999999903751284	WITHOUT_CLASSIFICATION	9.624871554909866E-9	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999994979691744	WITHOUT_CLASSIFICATION	5.020308256919116E-7	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999917776644626	WITHOUT_CLASSIFICATION	8.222335537476234E-6	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999998950547393	WITHOUT_CLASSIFICATION	1.0494526064738938E-7	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999996602807952	WITHOUT_CLASSIFICATION	3.3971920472894136E-7	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999972079509077	WITHOUT_CLASSIFICATION	2.792049092240883E-6	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999930181479204	WITHOUT_CLASSIFICATION	6.9818520796381186E-6	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999887541522631	WITHOUT_CLASSIFICATION	1.1245847736896272E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9984562007319255	WITHOUT_CLASSIFICATION	0.0015437992680745092	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.999998839960938	WITHOUT_CLASSIFICATION	1.1600390620877238E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999981419767542	WITHOUT_CLASSIFICATION	1.858023245886258E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999981419767542	WITHOUT_CLASSIFICATION	1.858023245886258E-6	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999819993341487	WITHOUT_CLASSIFICATION	1.8000665851280915E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999941152369932	WITHOUT_CLASSIFICATION	5.884763006784286E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999994605903052	WITHOUT_CLASSIFICATION	5.394096947590444E-7	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999989941075789	WITHOUT_CLASSIFICATION	1.0058924210671334E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999983014921379	WITHOUT_CLASSIFICATION	1.698507862076398E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999983014921379	WITHOUT_CLASSIFICATION	1.698507862076398E-6	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999998457714127	WITHOUT_CLASSIFICATION	1.5422858733434729E-7	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999996337019081	WITHOUT_CLASSIFICATION	3.662980919169487E-7	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999996721612923	WITHOUT_CLASSIFICATION	3.2783870771887143E-7	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999989026083642	WITHOUT_CLASSIFICATION	1.0973916357071595E-6	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999931077889114	WITHOUT_CLASSIFICATION	6.892211088569914E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.999996104725262	WITHOUT_CLASSIFICATION	3.895274737944601E-6	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999992738284729	WITHOUT_CLASSIFICATION	7.261715271527213E-7	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999980621466741	WITHOUT_CLASSIFICATION	1.9378533259311773E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9995501093597048	WITHOUT_CLASSIFICATION	4.498906402952984E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999975566883276	WITHOUT_CLASSIFICATION	2.4433116724413905E-6	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999994372366579	WITHOUT_CLASSIFICATION	5.627633421962001E-7	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999988793549361	WITHOUT_CLASSIFICATION	1.120645063868157E-6	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999765475601539	WITHOUT_CLASSIFICATION	2.3452439846139E-5	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999991947984096	WITHOUT_CLASSIFICATION	8.052015904961721E-7	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999237666959752	WITHOUT_CLASSIFICATION	7.623330402485271E-5	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999903290877954	WITHOUT_CLASSIFICATION	9.670912204637922E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999987167594907	WITHOUT_CLASSIFICATION	1.2832405093071197E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999987167594907	WITHOUT_CLASSIFICATION	1.2832405093071197E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999952375952124	WITHOUT_CLASSIFICATION	4.762404787563699E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999952375952124	WITHOUT_CLASSIFICATION	4.762404787563699E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999152761685	WITHOUT_CLASSIFICATION	8.472383148905203E-8	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999647506763891	WITHOUT_CLASSIFICATION	3.524932361094608E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999371686270573	WITHOUT_CLASSIFICATION	6.283137294272443E-5	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999998122395335	WITHOUT_CLASSIFICATION	1.8776046663517434E-7	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999955324881346	WITHOUT_CLASSIFICATION	4.4675118654906304E-6	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999997855205203	WITHOUT_CLASSIFICATION	2.1447947981370042E-7	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999981436512436	WITHOUT_CLASSIFICATION	1.8563487563957808E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999988793549361	WITHOUT_CLASSIFICATION	1.120645063868157E-6	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999765475601539	WITHOUT_CLASSIFICATION	2.3452439846139E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999237666959752	WITHOUT_CLASSIFICATION	7.623330402485271E-5	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999357883071726	WITHOUT_CLASSIFICATION	6.421169282745688E-5	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999998111463256	WITHOUT_CLASSIFICATION	1.888536743125462E-7	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9992764608884631	WITHOUT_CLASSIFICATION	7.235391115369766E-4	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.999207316715176	WITHOUT_CLASSIFICATION	7.92683284824012E-4	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999314018711569	WITHOUT_CLASSIFICATION	6.859812884315771E-5	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999566886064899	WITHOUT_CLASSIFICATION	4.331139351017693E-5	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999939919591051	WITHOUT_CLASSIFICATION	6.008040894912119E-6	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999982185245576	WITHOUT_CLASSIFICATION	1.7814754423579352E-6	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999995151970196	WITHOUT_CLASSIFICATION	4.848029805294632E-7	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999988475175672	WITHOUT_CLASSIFICATION	1.152482432719031E-6	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.999973380266161	WITHOUT_CLASSIFICATION	2.66197338390579E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9999323807808116	WITHOUT_CLASSIFICATION	6.761921918840609E-5	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999901360984386	WITHOUT_CLASSIFICATION	9.863901561430312E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.999912112692914	WITHOUT_CLASSIFICATION	8.788730708592156E-5	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999971021894433	WITHOUT_CLASSIFICATION	2.8978105567143217E-6	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999993832396993	WITHOUT_CLASSIFICATION	6.167603006674981E-7	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999995426889106	WITHOUT_CLASSIFICATION	4.573110895441955E-7	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999902715863028	WITHOUT_CLASSIFICATION	9.728413697090962E-6	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999997718813477	WITHOUT_CLASSIFICATION	2.2811865220546212E-7	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999902677884421	WITHOUT_CLASSIFICATION	9.73221155782657E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999999496877572	WITHOUT_CLASSIFICATION	5.0312242866691436E-8	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999617029933692	WITHOUT_CLASSIFICATION	3.8297006630832605E-5	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999931226015738	WITHOUT_CLASSIFICATION	6.877398426141793E-6	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999984478285662	WITHOUT_CLASSIFICATION	1.5521714338709584E-6	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.999998176512582	WITHOUT_CLASSIFICATION	1.8234874178835665E-6	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999999359172419	WITHOUT_CLASSIFICATION	6.408275809887728E-8	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999984599085513	WITHOUT_CLASSIFICATION	1.5400914486217084E-6	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999182995418727	WITHOUT_CLASSIFICATION	8.170045812731738E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.999999975091665	WITHOUT_CLASSIFICATION	2.4908334956299662E-8	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9995285996880804	WITHOUT_CLASSIFICATION	4.714003119195853E-4	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999991719643878	WITHOUT_CLASSIFICATION	8.280356120517049E-7	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999256415924735	WITHOUT_CLASSIFICATION	7.435840752645825E-5	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999571517657747	WITHOUT_CLASSIFICATION	4.284823422532365E-5	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999794793872709	WITHOUT_CLASSIFICATION	2.0520612729135815E-5	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9995144041597919	WITHOUT_CLASSIFICATION	4.8559584020813225E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999998657876926	WITHOUT_CLASSIFICATION	1.3421230740856111E-7	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999990592656615	WITHOUT_CLASSIFICATION	9.407343384659383E-7	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999995553083186	WITHOUT_CLASSIFICATION	4.446916813852159E-7	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999974162261077	WITHOUT_CLASSIFICATION	2.583773892270777E-6	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999633311286362	WITHOUT_CLASSIFICATION	3.666887136372764E-5	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999410645930469	WITHOUT_CLASSIFICATION	5.893540695314854E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999994605903052	WITHOUT_CLASSIFICATION	5.394096947590444E-7	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999990592656615	WITHOUT_CLASSIFICATION	9.407343384659383E-7	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9996499379336486	WITHOUT_CLASSIFICATION	3.5006206635135464E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.999886048654175	WITHOUT_CLASSIFICATION	1.1395134582503273E-4	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999241040993758	WITHOUT_CLASSIFICATION	7.58959006242476E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9987098378822897	WITHOUT_CLASSIFICATION	0.001290162117710222	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9987098378822897	WITHOUT_CLASSIFICATION	0.001290162117710222	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999999954924891	WITHOUT_CLASSIFICATION	4.5075109637519655E-9	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.999999981001592	WITHOUT_CLASSIFICATION	1.8998407890046845E-8	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999990728754999	WITHOUT_CLASSIFICATION	9.271245001081555E-7	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999944712626	WITHOUT_CLASSIFICATION	5.528737452092259E-9	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999610726120026	WITHOUT_CLASSIFICATION	3.892738799734669E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999920503798777	WITHOUT_CLASSIFICATION	7.949620122388242E-6	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.999999584971054	WITHOUT_CLASSIFICATION	4.15028945990262E-7	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999794616405813	WITHOUT_CLASSIFICATION	2.0538359418677606E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999995542027634	WITHOUT_CLASSIFICATION	4.457972364802526E-7	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999995542027634	WITHOUT_CLASSIFICATION	4.457972364802526E-7	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999994096520951	WITHOUT_CLASSIFICATION	5.903479048128054E-7	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999974411483585	WITHOUT_CLASSIFICATION	2.5588516414456575E-6	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999965232185878	WITHOUT_CLASSIFICATION	3.4767814122876967E-6	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.99998869726707	WITHOUT_CLASSIFICATION	1.1302732930032025E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999292226297523	WITHOUT_CLASSIFICATION	7.077737024772757E-5	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.999991392355669	WITHOUT_CLASSIFICATION	8.607644330932133E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9880531857590351	WITHOUT_CLASSIFICATION	0.011946814240964892	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999999641783339	WITHOUT_CLASSIFICATION	3.5821666002893757E-8	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999991739894338	WITHOUT_CLASSIFICATION	8.260105661898411E-7	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999676547867307	WITHOUT_CLASSIFICATION	3.234521326941283E-5	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999987920211	WITHOUT_CLASSIFICATION	1.2079788999042436E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999891371655196	WITHOUT_CLASSIFICATION	1.0862834480292321E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999908958474821	WITHOUT_CLASSIFICATION	9.104152517921842E-6	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999855262198147	WITHOUT_CLASSIFICATION	1.4473780185297284E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999855262198147	WITHOUT_CLASSIFICATION	1.4473780185297284E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999923608154506	WITHOUT_CLASSIFICATION	7.639184549478727E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999857365622199	WITHOUT_CLASSIFICATION	1.4263437780097066E-5	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999957196369716	WITHOUT_CLASSIFICATION	4.280363028363169E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999999312573744	WITHOUT_CLASSIFICATION	6.874262558164341E-8	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999996734128113	WITHOUT_CLASSIFICATION	3.265871887194219E-7	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999968812488521	WITHOUT_CLASSIFICATION	3.1187511478049062E-6	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999993884757167	WITHOUT_CLASSIFICATION	6.11524283256602E-7	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.999991444535077	WITHOUT_CLASSIFICATION	8.555464922897363E-6	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.999998923522516	WITHOUT_CLASSIFICATION	1.076477484041602E-6	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999888840673498	WITHOUT_CLASSIFICATION	1.1115932650217228E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999995581809281	WITHOUT_CLASSIFICATION	4.4181907185389755E-7	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.999999115874433	WITHOUT_CLASSIFICATION	8.841255669962289E-7	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.999998185035106	WITHOUT_CLASSIFICATION	1.8149648940023555E-6	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999976383799704	WITHOUT_CLASSIFICATION	2.3616200296522896E-6	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999715480567287	WITHOUT_CLASSIFICATION	2.8451943271314996E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999999247042404	WITHOUT_CLASSIFICATION	7.529575961909003E-8	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.999997123698686	WITHOUT_CLASSIFICATION	2.876301313928153E-6	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999995393955001	WITHOUT_CLASSIFICATION	4.606044998839421E-7	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999938415579535	WITHOUT_CLASSIFICATION	6.158442046478914E-6	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.999990686459588	WITHOUT_CLASSIFICATION	9.313540411900329E-6	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999619580233852	WITHOUT_CLASSIFICATION	3.80419766148144E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.999996850442747	WITHOUT_CLASSIFICATION	3.1495572528871847E-6	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999994007897152	WITHOUT_CLASSIFICATION	5.992102848640393E-7	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9999529922082618	WITHOUT_CLASSIFICATION	4.700779173821477E-5	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.52056957597411	DEFECT	0.47943042402589003	WITHOUT_CLASSIFICATION
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.999834011974642	WITHOUT_CLASSIFICATION	1.6598802535812128E-4	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999987895910999	WITHOUT_CLASSIFICATION	1.2104089000586763E-6	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999996964443609	WITHOUT_CLASSIFICATION	3.0355563903883504E-7	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999996466425575	WITHOUT_CLASSIFICATION	3.533574425473651E-7	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999878143198419	WITHOUT_CLASSIFICATION	1.2185680158150209E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999993449928147	WITHOUT_CLASSIFICATION	6.550071852033406E-7	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.999996160916893	WITHOUT_CLASSIFICATION	3.839083106963495E-6	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.999998547849962	WITHOUT_CLASSIFICATION	1.4521500379620443E-6	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999950279793	WITHOUT_CLASSIFICATION	4.972020726098375E-9	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999998445890597	WITHOUT_CLASSIFICATION	1.5541094045237786E-7	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999989900297072	WITHOUT_CLASSIFICATION	1.009970292886796E-6	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999998877075723	WITHOUT_CLASSIFICATION	1.1229242773465258E-7	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999639214602423	WITHOUT_CLASSIFICATION	3.6078539757789865E-5	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999963223903122	WITHOUT_CLASSIFICATION	3.677609687855556E-6	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999863257807869	WITHOUT_CLASSIFICATION	1.3674219213023764E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999969724525705	WITHOUT_CLASSIFICATION	3.027547429407585E-6	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999815488662767	WITHOUT_CLASSIFICATION	1.845113372332298E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.999999729077914	WITHOUT_CLASSIFICATION	2.7092208597711724E-7	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999977386008632	WITHOUT_CLASSIFICATION	2.261399136884092E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999416064793094	WITHOUT_CLASSIFICATION	5.839352069062341E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999536401690334	WITHOUT_CLASSIFICATION	4.635983096664191E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999997198776428	WITHOUT_CLASSIFICATION	2.8012235715731813E-7	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999979338341	WITHOUT_CLASSIFICATION	2.066165807504741E-9	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999998419008049	WITHOUT_CLASSIFICATION	1.5809919506907404E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999992299735542	WITHOUT_CLASSIFICATION	7.700264458712124E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999992299735542	WITHOUT_CLASSIFICATION	7.700264458712124E-7	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999950564492904	WITHOUT_CLASSIFICATION	4.943550709547615E-6	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999989885244388	WITHOUT_CLASSIFICATION	1.01147556112539E-6	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.999999849149875	WITHOUT_CLASSIFICATION	1.508501249078118E-7	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9890941231937574	WITHOUT_CLASSIFICATION	0.010905876806242472	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999633803014	WITHOUT_CLASSIFICATION	3.661969855932536E-8	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999981113657223	WITHOUT_CLASSIFICATION	1.8886342777135367E-6	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999994813574712	WITHOUT_CLASSIFICATION	5.186425287646623E-7	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9997979465035759	WITHOUT_CLASSIFICATION	2.0205349642403876E-4	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999588893887129	WITHOUT_CLASSIFICATION	4.1110611287094766E-5	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999999252292645	WITHOUT_CLASSIFICATION	7.47707355183813E-8	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999529262636461	WITHOUT_CLASSIFICATION	4.707373635395657E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999529262636461	WITHOUT_CLASSIFICATION	4.707373635395657E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999529262636461	WITHOUT_CLASSIFICATION	4.707373635395657E-5	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999999552230799	WITHOUT_CLASSIFICATION	4.4776920087019525E-8	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999926540944822	WITHOUT_CLASSIFICATION	7.34590551773095E-6	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.999978491992467	WITHOUT_CLASSIFICATION	2.150800753293962E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999973609096727	WITHOUT_CLASSIFICATION	2.639090327249758E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999973609096727	WITHOUT_CLASSIFICATION	2.639090327249758E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999451504841393	WITHOUT_CLASSIFICATION	5.4849515860719046E-5	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999976010901228	WITHOUT_CLASSIFICATION	2.3989098772286783E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999990443399146	WITHOUT_CLASSIFICATION	9.556600854492622E-7	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999999793901316	WITHOUT_CLASSIFICATION	2.060986841256972E-8	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999928987447966	WITHOUT_CLASSIFICATION	7.1012552034041596E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999989506131517	WITHOUT_CLASSIFICATION	1.049386848311629E-6	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999947380345614	WITHOUT_CLASSIFICATION	5.261965438519401E-6	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999997848512693	WITHOUT_CLASSIFICATION	2.1514873066331872E-7	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999978723072468	WITHOUT_CLASSIFICATION	2.127692753177767E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.999999895307904	WITHOUT_CLASSIFICATION	1.0469209606043067E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.999999895307904	WITHOUT_CLASSIFICATION	1.0469209606043067E-7	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999992413400514	WITHOUT_CLASSIFICATION	7.586599486832036E-7	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999959966548869	WITHOUT_CLASSIFICATION	4.0033451130910305E-6	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999975908245324	WITHOUT_CLASSIFICATION	2.409175467580433E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999871198765352	WITHOUT_CLASSIFICATION	1.2880123464789762E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999988752979373	WITHOUT_CLASSIFICATION	1.1247020627592971E-6	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999994395465632	WITHOUT_CLASSIFICATION	5.604534367479107E-7	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.999995250374034	WITHOUT_CLASSIFICATION	4.7496259659242555E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999854311212777	WITHOUT_CLASSIFICATION	1.4568878722185197E-5	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999924334676665	WITHOUT_CLASSIFICATION	7.5665323333989785E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999878991549975	WITHOUT_CLASSIFICATION	1.2100845002439767E-5	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.999999444090996	WITHOUT_CLASSIFICATION	5.559090041013289E-7	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999793774911707	WITHOUT_CLASSIFICATION	2.062250882931924E-5	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999893906758274	WITHOUT_CLASSIFICATION	1.0609324172556365E-5	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999982293986658	WITHOUT_CLASSIFICATION	1.7706013342504147E-6	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999109486608094	WITHOUT_CLASSIFICATION	8.905133919049608E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.999998819158472	WITHOUT_CLASSIFICATION	1.1808415279692886E-6	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999575049777728	WITHOUT_CLASSIFICATION	4.2495022227163E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999978185610505	WITHOUT_CLASSIFICATION	2.1814389495455342E-6	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999996928300972	WITHOUT_CLASSIFICATION	3.0716990286745447E-7	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999999700060112	WITHOUT_CLASSIFICATION	2.9993988789373E-8	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9997443301751474	WITHOUT_CLASSIFICATION	2.556698248525927E-4	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999996728393485	WITHOUT_CLASSIFICATION	3.271606514884284E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999995286186215	WITHOUT_CLASSIFICATION	4.713813784099999E-7	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999999580327266	WITHOUT_CLASSIFICATION	4.196727339166719E-8	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999863814150094	WITHOUT_CLASSIFICATION	1.3618584990638571E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999964548615866	WITHOUT_CLASSIFICATION	3.5451384133548946E-6	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999989892490377	WITHOUT_CLASSIFICATION	1.0107509623505845E-6	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.999991745402547	WITHOUT_CLASSIFICATION	8.254597453012006E-6	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9999852945637746	WITHOUT_CLASSIFICATION	1.4705436225305934E-5	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999907741116163	WITHOUT_CLASSIFICATION	9.225888383758808E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999303158192819	WITHOUT_CLASSIFICATION	6.968418071802174E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999964937168799	WITHOUT_CLASSIFICATION	3.5062831199411066E-6	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999900102043184	WITHOUT_CLASSIFICATION	9.989795681524861E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999303158192819	WITHOUT_CLASSIFICATION	6.968418071802174E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999805191815303	WITHOUT_CLASSIFICATION	1.948081846970515E-5	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999995819728614	WITHOUT_CLASSIFICATION	4.1802713855901696E-7	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999987790231336	WITHOUT_CLASSIFICATION	1.2209768663674969E-6	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9997437316944481	WITHOUT_CLASSIFICATION	2.5626830555190944E-4	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999959507481344	WITHOUT_CLASSIFICATION	4.0492518656293325E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9999903625497994	WITHOUT_CLASSIFICATION	9.637450200547534E-6	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999912824629804	WITHOUT_CLASSIFICATION	8.717537019712666E-6	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9998374372695225	WITHOUT_CLASSIFICATION	1.625627304775417E-4	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999721712014584	WITHOUT_CLASSIFICATION	2.782879854159115E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9997420337566976	WITHOUT_CLASSIFICATION	2.579662433024918E-4	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9997480122015099	WITHOUT_CLASSIFICATION	2.5198779849012776E-4	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9997414663627078	WITHOUT_CLASSIFICATION	2.5853363729218194E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9983984003476756	WITHOUT_CLASSIFICATION	0.0016015996523244735	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9993065255434952	WITHOUT_CLASSIFICATION	6.934744565048485E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999937538932456	WITHOUT_CLASSIFICATION	6.2461067544578755E-6	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.999971196349171	WITHOUT_CLASSIFICATION	2.8803650829045135E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999952548893513	WITHOUT_CLASSIFICATION	4.745110648719194E-6	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999862008002369	WITHOUT_CLASSIFICATION	1.379919976321943E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999714273285182	WITHOUT_CLASSIFICATION	2.8572671481840424E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9998004761929916	WITHOUT_CLASSIFICATION	1.995238070082559E-4	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9995471388456681	WITHOUT_CLASSIFICATION	4.5286115433174924E-4	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999580458120453	WITHOUT_CLASSIFICATION	4.195418795483347E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9998926088948505	WITHOUT_CLASSIFICATION	1.0739110514942529E-4	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999689754381472	WITHOUT_CLASSIFICATION	3.1024561852814226E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9998282216227009	WITHOUT_CLASSIFICATION	1.7177837729898818E-4	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999991820392937	WITHOUT_CLASSIFICATION	8.17960706312118E-7	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999702193359696	WITHOUT_CLASSIFICATION	2.9780664030390257E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999998352642462	WITHOUT_CLASSIFICATION	1.6473575388483728E-7	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999981816117828	WITHOUT_CLASSIFICATION	1.818388217331209E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999969293505573	WITHOUT_CLASSIFICATION	3.070649442648779E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.99999280578087	WITHOUT_CLASSIFICATION	7.194219130036871E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9993521929780935	WITHOUT_CLASSIFICATION	6.478070219064736E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9915433659992716	WITHOUT_CLASSIFICATION	0.00845663400072845	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999979428042074	WITHOUT_CLASSIFICATION	2.057195792589547E-6	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999981833455243	WITHOUT_CLASSIFICATION	1.8166544757829022E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999933173829816	WITHOUT_CLASSIFICATION	6.68261701839835E-6	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999981469343323	WITHOUT_CLASSIFICATION	1.8530656676828074E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999751377042081	WITHOUT_CLASSIFICATION	2.4862295791899526E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999999759126489	WITHOUT_CLASSIFICATION	2.4087351060934662E-8	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999963757545716	WITHOUT_CLASSIFICATION	3.6242454283405072E-6	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999950418901032	WITHOUT_CLASSIFICATION	4.958109896808326E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999964896435293	WITHOUT_CLASSIFICATION	3.5103564707881736E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999989692051835	WITHOUT_CLASSIFICATION	1.0307948165889992E-6	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999986702629574	WITHOUT_CLASSIFICATION	1.3297370424797462E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999986962658223	WITHOUT_CLASSIFICATION	1.3037341777256481E-6	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999978775959742	WITHOUT_CLASSIFICATION	2.122404025779821E-6	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999960226009	WITHOUT_CLASSIFICATION	3.977399099950385E-6	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999968927475342	WITHOUT_CLASSIFICATION	3.107252465732731E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999996646214244	WITHOUT_CLASSIFICATION	3.353785755914042E-7	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999981263758553	WITHOUT_CLASSIFICATION	1.8736241446224723E-6	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999973678282664	WITHOUT_CLASSIFICATION	2.63217173353868E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999995409246039	WITHOUT_CLASSIFICATION	4.5907539605163707E-7	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.99999984100804	WITHOUT_CLASSIFICATION	1.5899195999694254E-7	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999996646214244	WITHOUT_CLASSIFICATION	3.353785755914042E-7	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.7273307884020414	WITHOUT_CLASSIFICATION	0.27266921159795865	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.7273307884020414	WITHOUT_CLASSIFICATION	0.27266921159795865	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.999999982631995	WITHOUT_CLASSIFICATION	1.736800507067249E-8	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999980348994659	WITHOUT_CLASSIFICATION	1.9651005340199693E-6	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999992206309689	WITHOUT_CLASSIFICATION	7.793690310721904E-7	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999999948506438	WITHOUT_CLASSIFICATION	5.1493562481916075E-9	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999999424894901	WITHOUT_CLASSIFICATION	5.751050988546985E-8	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999996404336162	WITHOUT_CLASSIFICATION	3.595663837680158E-7	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.999988384051162	WITHOUT_CLASSIFICATION	1.1615948837968282E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.9579403007078892	DEFECT	0.04205969929211089	WITHOUT_CLASSIFICATION
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999994796534841	WITHOUT_CLASSIFICATION	5.203465158027017E-7	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9998721951007914	WITHOUT_CLASSIFICATION	1.2780489920860097E-4	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999726119569	WITHOUT_CLASSIFICATION	2.7388043064473594E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999931794643655	WITHOUT_CLASSIFICATION	6.820535634513649E-6	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999944828198183	WITHOUT_CLASSIFICATION	5.5171801817623935E-6	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999993590977695	WITHOUT_CLASSIFICATION	6.409022305482933E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999974933410628	WITHOUT_CLASSIFICATION	2.506658937056514E-6	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999987712214763	WITHOUT_CLASSIFICATION	1.228778523663253E-6	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999996184804816	WITHOUT_CLASSIFICATION	3.8151951849437347E-7	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999756158518208	WITHOUT_CLASSIFICATION	2.4384148179202634E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999756158518208	WITHOUT_CLASSIFICATION	2.4384148179202634E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999756158518208	WITHOUT_CLASSIFICATION	2.4384148179202634E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999756158518208	WITHOUT_CLASSIFICATION	2.4384148179202634E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999756158518208	WITHOUT_CLASSIFICATION	2.4384148179202634E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999879911446973	WITHOUT_CLASSIFICATION	1.20088553027059E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999851534858012	WITHOUT_CLASSIFICATION	1.4846514198827011E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999344667615201	WITHOUT_CLASSIFICATION	6.553323847998646E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.999996860116745	WITHOUT_CLASSIFICATION	3.1398832548571764E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9997914971318141	WITHOUT_CLASSIFICATION	2.0850286818579932E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999997928211083	WITHOUT_CLASSIFICATION	2.071788918079682E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999995262594548	WITHOUT_CLASSIFICATION	4.737405451511334E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.999998720646825	WITHOUT_CLASSIFICATION	1.279353174998729E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999977060499126	WITHOUT_CLASSIFICATION	2.2939500874171407E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999883867692959	WITHOUT_CLASSIFICATION	1.1613230704049108E-5	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999847192346575	WITHOUT_CLASSIFICATION	1.5280765342538933E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999847885807254	WITHOUT_CLASSIFICATION	1.5211419274482553E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999921035042841	WITHOUT_CLASSIFICATION	7.896495715782127E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999903551538921	WITHOUT_CLASSIFICATION	9.644846107928108E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999879474286143	WITHOUT_CLASSIFICATION	1.2052571385615631E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.999989999156578	WITHOUT_CLASSIFICATION	1.0000843421924343E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999940534938183	WITHOUT_CLASSIFICATION	5.9465061816802725E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999908476869596	WITHOUT_CLASSIFICATION	9.152313040437195E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999893343474888	WITHOUT_CLASSIFICATION	1.0665652511218208E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999900833764812	WITHOUT_CLASSIFICATION	9.91662351882084E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999911719305308	WITHOUT_CLASSIFICATION	8.82806946919192E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.999986365218229	WITHOUT_CLASSIFICATION	1.3634781770866035E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999869373346042	WITHOUT_CLASSIFICATION	1.306266539580086E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999914091598022	WITHOUT_CLASSIFICATION	8.5908401977724E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999916651764582	WITHOUT_CLASSIFICATION	8.334823541716162E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999871848807252	WITHOUT_CLASSIFICATION	1.2815119274611757E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999916297133646	WITHOUT_CLASSIFICATION	8.370286635431773E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999911487276363	WITHOUT_CLASSIFICATION	8.851272363627756E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999987223902854	WITHOUT_CLASSIFICATION	1.2776097146038163E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999858380374782	WITHOUT_CLASSIFICATION	1.4161962521867006E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999861144786631	WITHOUT_CLASSIFICATION	1.3885521336880142E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999891745512725	WITHOUT_CLASSIFICATION	1.0825448727489577E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999867685534349	WITHOUT_CLASSIFICATION	1.3231446565060259E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999880226389055	WITHOUT_CLASSIFICATION	1.1977361094437504E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999866274220582	WITHOUT_CLASSIFICATION	1.3372577941711888E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999852523711779	WITHOUT_CLASSIFICATION	1.4747628822280292E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999878339639332	WITHOUT_CLASSIFICATION	1.2166036066886951E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999861143375983	WITHOUT_CLASSIFICATION	1.3885662401677553E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.99998650997905	WITHOUT_CLASSIFICATION	1.3490020950081528E-5	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999860578770623	WITHOUT_CLASSIFICATION	1.3942122937613424E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999915195292405	WITHOUT_CLASSIFICATION	8.480470759650473E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999901483350292	WITHOUT_CLASSIFICATION	9.851664970819634E-6	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999869098889929	WITHOUT_CLASSIFICATION	1.3090111007135447E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999908498457649	WITHOUT_CLASSIFICATION	9.15015423520298E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999868137506868	WITHOUT_CLASSIFICATION	1.3186249313357886E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999813634130224	WITHOUT_CLASSIFICATION	1.8636586977629997E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999833457532611	WITHOUT_CLASSIFICATION	1.665424673893116E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999906014255188	WITHOUT_CLASSIFICATION	9.398574481282978E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999874793294958	WITHOUT_CLASSIFICATION	1.252067050413958E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.999985700724245	WITHOUT_CLASSIFICATION	1.4299275754940254E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999344667615201	WITHOUT_CLASSIFICATION	6.553323847998646E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999839983494448	WITHOUT_CLASSIFICATION	1.6001650555142578E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999858534454713	WITHOUT_CLASSIFICATION	1.4146554528573242E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999814801638539	WITHOUT_CLASSIFICATION	1.8519836146109267E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.999983236542444	WITHOUT_CLASSIFICATION	1.6763457556006987E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.99998459287336	WITHOUT_CLASSIFICATION	1.540712664005049E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999865379136517	WITHOUT_CLASSIFICATION	1.346208634825589E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999788668247569	WITHOUT_CLASSIFICATION	2.1133175243122435E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999842149700693	WITHOUT_CLASSIFICATION	1.578502993065199E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999812363588073	WITHOUT_CLASSIFICATION	1.8763641192698417E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.999981100291236	WITHOUT_CLASSIFICATION	1.889970876403655E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999882472195958	WITHOUT_CLASSIFICATION	1.1752780404145381E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999887107913236	WITHOUT_CLASSIFICATION	1.1289208676393509E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999832797902193	WITHOUT_CLASSIFICATION	1.6720209780789625E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999800892332199	WITHOUT_CLASSIFICATION	1.9910766780079722E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999818746835929	WITHOUT_CLASSIFICATION	1.8125316407099425E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999989288186585	WITHOUT_CLASSIFICATION	1.0711813415037398E-5	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999838707562142	WITHOUT_CLASSIFICATION	1.612924378581063E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999880423121795	WITHOUT_CLASSIFICATION	1.1957687820427134E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999836132893648	WITHOUT_CLASSIFICATION	1.6386710635199837E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999894417681354	WITHOUT_CLASSIFICATION	1.0558231864539571E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999805255778399	WITHOUT_CLASSIFICATION	1.947442216017011E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999853108854619	WITHOUT_CLASSIFICATION	1.468911453801135E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.999985124378662	WITHOUT_CLASSIFICATION	1.4875621338016485E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999857942216519	WITHOUT_CLASSIFICATION	1.4205778348174359E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999849789992199	WITHOUT_CLASSIFICATION	1.5021000780069794E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999827100222193	WITHOUT_CLASSIFICATION	1.7289977780691652E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999826609097746	WITHOUT_CLASSIFICATION	1.7339090225403823E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999845891307263	WITHOUT_CLASSIFICATION	1.541086927370985E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999879265097318	WITHOUT_CLASSIFICATION	1.2073490268121366E-5	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999882167338063	WITHOUT_CLASSIFICATION	1.1783266193721761E-5	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999846422870166	WITHOUT_CLASSIFICATION	1.5357712983402287E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999850101895508	WITHOUT_CLASSIFICATION	1.4989810449277094E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.999986195227473	WITHOUT_CLASSIFICATION	1.380477252698795E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999864622624388	WITHOUT_CLASSIFICATION	1.353773756117193E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999852116925365	WITHOUT_CLASSIFICATION	1.4788307463471619E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.999991291694169	WITHOUT_CLASSIFICATION	8.708305830957717E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999871151704506	WITHOUT_CLASSIFICATION	1.2884829549550932E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999821430820871	WITHOUT_CLASSIFICATION	1.7856917912928412E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999832152288036	WITHOUT_CLASSIFICATION	1.678477119637209E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999855924053767	WITHOUT_CLASSIFICATION	1.4407594623425547E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999824297470269	WITHOUT_CLASSIFICATION	1.757025297319361E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999844007641963	WITHOUT_CLASSIFICATION	1.559923580380225E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999876912731918	WITHOUT_CLASSIFICATION	1.2308726808220945E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999846751115863	WITHOUT_CLASSIFICATION	1.5324888413712928E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999905783772733	WITHOUT_CLASSIFICATION	9.421622726629997E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999920079310477	WITHOUT_CLASSIFICATION	7.99206895228682E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999884585435698	WITHOUT_CLASSIFICATION	1.1541456430340966E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999846475421325	WITHOUT_CLASSIFICATION	1.5352457867538502E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999856823183877	WITHOUT_CLASSIFICATION	1.4317681612267303E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999872101736208	WITHOUT_CLASSIFICATION	1.2789826379172737E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999905649652371	WITHOUT_CLASSIFICATION	9.435034762921578E-6	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999892197414736	WITHOUT_CLASSIFICATION	1.0780258526415575E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999914781292639	WITHOUT_CLASSIFICATION	8.521870735996508E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999938236603336	WITHOUT_CLASSIFICATION	6.1763396663618645E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999924960431347	WITHOUT_CLASSIFICATION	7.503956865349691E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999894353438775	WITHOUT_CLASSIFICATION	1.056465612245929E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999915279714552	WITHOUT_CLASSIFICATION	8.47202854486072E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999909622401147	WITHOUT_CLASSIFICATION	9.03775988527636E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999900383960585	WITHOUT_CLASSIFICATION	9.961603941492316E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999904384891666	WITHOUT_CLASSIFICATION	9.561510833373496E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999901474048074	WITHOUT_CLASSIFICATION	9.8525951925467E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999915168030319	WITHOUT_CLASSIFICATION	8.483196968101138E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999896297734382	WITHOUT_CLASSIFICATION	1.0370226561738451E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999915083802279	WITHOUT_CLASSIFICATION	8.491619772180068E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999917962446143	WITHOUT_CLASSIFICATION	8.203755385812999E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999913089816108	WITHOUT_CLASSIFICATION	8.69101838922773E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.999991987464659	WITHOUT_CLASSIFICATION	8.012535340885856E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.999989114216287	WITHOUT_CLASSIFICATION	1.0885783712946992E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999895716666085	WITHOUT_CLASSIFICATION	1.042833339158506E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999904295552478	WITHOUT_CLASSIFICATION	9.570444752217398E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999847862533264	WITHOUT_CLASSIFICATION	1.5213746673603133E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999898007374292	WITHOUT_CLASSIFICATION	1.0199262570801353E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999903141114213	WITHOUT_CLASSIFICATION	9.685888578768065E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999800878743015	WITHOUT_CLASSIFICATION	1.991212569850213E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999855106489979	WITHOUT_CLASSIFICATION	1.4489351002059586E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999862883375696	WITHOUT_CLASSIFICATION	1.371166243028908E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999835249513912	WITHOUT_CLASSIFICATION	1.647504860875301E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999832965150001	WITHOUT_CLASSIFICATION	1.670348499992713E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999839440808884	WITHOUT_CLASSIFICATION	1.6055919111604385E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.999982426518231	WITHOUT_CLASSIFICATION	1.7573481768948275E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999806380566834	WITHOUT_CLASSIFICATION	1.9361943316633685E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.999985846529806	WITHOUT_CLASSIFICATION	1.4153470194049943E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999855754831063	WITHOUT_CLASSIFICATION	1.4424516893661714E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.999989024680534	WITHOUT_CLASSIFICATION	1.0975319466020951E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999817469312419	WITHOUT_CLASSIFICATION	1.82530687581505E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999843566133408	WITHOUT_CLASSIFICATION	1.5643386659104537E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999832348566018	WITHOUT_CLASSIFICATION	1.676514339824116E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.999983458892708	WITHOUT_CLASSIFICATION	1.6541107291989735E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999815499940414	WITHOUT_CLASSIFICATION	1.8450005958489966E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999878635274916	WITHOUT_CLASSIFICATION	1.2136472508549445E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999907964248643	WITHOUT_CLASSIFICATION	9.203575135616822E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999885188886452	WITHOUT_CLASSIFICATION	1.1481111354731765E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999884800500237	WITHOUT_CLASSIFICATION	1.1519949976424562E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999837682859576	WITHOUT_CLASSIFICATION	1.6231714042421965E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999880636821565	WITHOUT_CLASSIFICATION	1.1936317843357391E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999835743893879	WITHOUT_CLASSIFICATION	1.642561061214844E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999905990553427	WITHOUT_CLASSIFICATION	9.40094465736642E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999890623357598	WITHOUT_CLASSIFICATION	1.093766424026168E-5	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999874075241107	WITHOUT_CLASSIFICATION	1.2592475889238917E-5	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999852046291873	WITHOUT_CLASSIFICATION	1.4795370812782025E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999852525704094	WITHOUT_CLASSIFICATION	1.4747429590712903E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999859632214733	WITHOUT_CLASSIFICATION	1.4036778526690175E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999905246166239	WITHOUT_CLASSIFICATION	9.475383376069402E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999892344878399	WITHOUT_CLASSIFICATION	1.076551216000351E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999910782128216	WITHOUT_CLASSIFICATION	8.921787178452584E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999881930156952	WITHOUT_CLASSIFICATION	1.1806984304788684E-5	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999847519796747	WITHOUT_CLASSIFICATION	1.5248020325246838E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999854569531417	WITHOUT_CLASSIFICATION	1.4543046858252461E-5	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999865983808297	WITHOUT_CLASSIFICATION	1.340161917024757E-5	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999910522639367	WITHOUT_CLASSIFICATION	8.947736063267252E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999911073736177	WITHOUT_CLASSIFICATION	8.892626382190119E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999819216077986	WITHOUT_CLASSIFICATION	1.8078392201344473E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999887611019362	WITHOUT_CLASSIFICATION	1.1238898063718836E-5	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.999984684710093	WITHOUT_CLASSIFICATION	1.531528990704781E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.999988914617461	WITHOUT_CLASSIFICATION	1.1085382539041825E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999905184698559	WITHOUT_CLASSIFICATION	9.481530144048997E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999869032700547	WITHOUT_CLASSIFICATION	1.3096729945409092E-5	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999879252212867	WITHOUT_CLASSIFICATION	1.2074778713310324E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999884484498544	WITHOUT_CLASSIFICATION	1.1551550145584E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.999988144343534	WITHOUT_CLASSIFICATION	1.1855656466118198E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.999987299122036	WITHOUT_CLASSIFICATION	1.2700877964059296E-5	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999860612430804	WITHOUT_CLASSIFICATION	1.3938756919705846E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999865337897831	WITHOUT_CLASSIFICATION	1.346621021692049E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999888469851826	WITHOUT_CLASSIFICATION	1.1153014817433333E-5	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999886553218641	WITHOUT_CLASSIFICATION	1.1344678135897163E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999854460109546	WITHOUT_CLASSIFICATION	1.4553989045458986E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999906400211227	WITHOUT_CLASSIFICATION	9.359978877354086E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.999986136734569	WITHOUT_CLASSIFICATION	1.3863265430942566E-5	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999789414903798	WITHOUT_CLASSIFICATION	2.105850962014146E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999892720626985	WITHOUT_CLASSIFICATION	1.0727937301566844E-5	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.999991187716488	WITHOUT_CLASSIFICATION	8.812283512082734E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999914940122433	WITHOUT_CLASSIFICATION	8.50598775674545E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999784763284454	WITHOUT_CLASSIFICATION	2.1523671554607947E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.999974862897233	WITHOUT_CLASSIFICATION	2.513710276695962E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999769851839265	WITHOUT_CLASSIFICATION	2.3014816073435204E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999874844402424	WITHOUT_CLASSIFICATION	1.2515559757631204E-5	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.999983981287382	WITHOUT_CLASSIFICATION	1.6018712617950463E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999847128888872	WITHOUT_CLASSIFICATION	1.528711111268363E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999830214007452	WITHOUT_CLASSIFICATION	1.6978599254763646E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999739740381947	WITHOUT_CLASSIFICATION	2.6025961805403956E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999783321882951	WITHOUT_CLASSIFICATION	2.1667811704838758E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999842651475697	WITHOUT_CLASSIFICATION	1.5734852430340638E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999763240759877	WITHOUT_CLASSIFICATION	2.3675924012335013E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999789800081381	WITHOUT_CLASSIFICATION	2.10199918619188E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999885511310322	WITHOUT_CLASSIFICATION	1.1448868967815184E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999847639102756	WITHOUT_CLASSIFICATION	1.523608972441908E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999843208937619	WITHOUT_CLASSIFICATION	1.5679106238119315E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999803495732202	WITHOUT_CLASSIFICATION	1.965042677974251E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999813386572276	WITHOUT_CLASSIFICATION	1.8661342772381628E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999840833141156	WITHOUT_CLASSIFICATION	1.5916685884442786E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999809230792739	WITHOUT_CLASSIFICATION	1.907692072612235E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.999985798439028	WITHOUT_CLASSIFICATION	1.4201560971978622E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999852776243807	WITHOUT_CLASSIFICATION	1.4722375619354026E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999828142394673	WITHOUT_CLASSIFICATION	1.7185760532746225E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999890659255221	WITHOUT_CLASSIFICATION	1.0934074478012334E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999857850770694	WITHOUT_CLASSIFICATION	1.4214922930670272E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999896124976527	WITHOUT_CLASSIFICATION	1.0387502347393979E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999828642556189	WITHOUT_CLASSIFICATION	1.713574438107281E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999887001193434	WITHOUT_CLASSIFICATION	1.1299880656565894E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999826422523138	WITHOUT_CLASSIFICATION	1.7357747686133547E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999906571170613	WITHOUT_CLASSIFICATION	9.342882938753467E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999888144604804	WITHOUT_CLASSIFICATION	1.1185539519633656E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999840279432486	WITHOUT_CLASSIFICATION	1.5972056751353917E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999852696006566	WITHOUT_CLASSIFICATION	1.4730399343454688E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999868087018209	WITHOUT_CLASSIFICATION	1.3191298179186423E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999866620048348	WITHOUT_CLASSIFICATION	1.3337995165223915E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.999987562553138	WITHOUT_CLASSIFICATION	1.2437446861863134E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999836876254211	WITHOUT_CLASSIFICATION	1.631237457891912E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999812791626644	WITHOUT_CLASSIFICATION	1.8720837335587925E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999820228262573	WITHOUT_CLASSIFICATION	1.797717374281748E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.999983925485503	WITHOUT_CLASSIFICATION	1.607451449697702E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999822430221927	WITHOUT_CLASSIFICATION	1.7756977807287986E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999834612881057	WITHOUT_CLASSIFICATION	1.6538711894245837E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999854847700681	WITHOUT_CLASSIFICATION	1.4515229931940367E-5	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999900473587113	WITHOUT_CLASSIFICATION	9.95264128864201E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999877744414423	WITHOUT_CLASSIFICATION	1.2225558557816777E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999903392103706	WITHOUT_CLASSIFICATION	9.660789629460892E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999824394592325	WITHOUT_CLASSIFICATION	1.7560540767526642E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999829497304732	WITHOUT_CLASSIFICATION	1.7050269526760995E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999886760279277	WITHOUT_CLASSIFICATION	1.1323972072232451E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999828891652897	WITHOUT_CLASSIFICATION	1.7110834710340256E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.999984716044479	WITHOUT_CLASSIFICATION	1.5283955520994118E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999832978125188	WITHOUT_CLASSIFICATION	1.6702187481197864E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999870024156794	WITHOUT_CLASSIFICATION	1.2997584320550409E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999826914040281	WITHOUT_CLASSIFICATION	1.7308595971950458E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999828221058975	WITHOUT_CLASSIFICATION	1.7177894102545082E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999820395483779	WITHOUT_CLASSIFICATION	1.7960451622063745E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999863455292664	WITHOUT_CLASSIFICATION	1.365447073366538E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999830145530844	WITHOUT_CLASSIFICATION	1.698544691557909E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999792866955131	WITHOUT_CLASSIFICATION	2.0713304487035425E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999826048089053	WITHOUT_CLASSIFICATION	1.7395191094706416E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999873950920297	WITHOUT_CLASSIFICATION	1.2604907970265265E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999846078189882	WITHOUT_CLASSIFICATION	1.5392181011744498E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.999988156130925	WITHOUT_CLASSIFICATION	1.1843869075152352E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.999980564479598	WITHOUT_CLASSIFICATION	1.9435520402009337E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999789672589343	WITHOUT_CLASSIFICATION	2.1032741065684276E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999822720440524	WITHOUT_CLASSIFICATION	1.7727955947605866E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999857979690019	WITHOUT_CLASSIFICATION	1.4202030998059602E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999848433588628	WITHOUT_CLASSIFICATION	1.5156641137125324E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999837416156349	WITHOUT_CLASSIFICATION	1.625838436508236E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999895474322794	WITHOUT_CLASSIFICATION	1.0452567720622145E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.999986181274701	WITHOUT_CLASSIFICATION	1.3818725299097783E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999851166228994	WITHOUT_CLASSIFICATION	1.4883377100634855E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999828932345882	WITHOUT_CLASSIFICATION	1.710676541174822E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999854079233303	WITHOUT_CLASSIFICATION	1.4592076669773124E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999884480818985	WITHOUT_CLASSIFICATION	1.155191810154113E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999874760771147	WITHOUT_CLASSIFICATION	1.2523922885306055E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999829024488923	WITHOUT_CLASSIFICATION	1.7097551107614218E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999850402957142	WITHOUT_CLASSIFICATION	1.4959704285846482E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999878628469969	WITHOUT_CLASSIFICATION	1.2137153002984356E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999814327615991	WITHOUT_CLASSIFICATION	1.8567238400871696E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999653217492992	WITHOUT_CLASSIFICATION	3.4678250700892984E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999776509066822	WITHOUT_CLASSIFICATION	2.234909331784268E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999763188465596	WITHOUT_CLASSIFICATION	2.368115344047127E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999781030835411	WITHOUT_CLASSIFICATION	2.189691645894792E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999773503527395	WITHOUT_CLASSIFICATION	2.264964726051369E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999766166888102	WITHOUT_CLASSIFICATION	2.3383311189690088E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999763429298935	WITHOUT_CLASSIFICATION	2.36570701065121E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999710861033854	WITHOUT_CLASSIFICATION	2.8913896614635445E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999746696183796	WITHOUT_CLASSIFICATION	2.533038162036758E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999800139875905	WITHOUT_CLASSIFICATION	1.9986012409471174E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999751158583703	WITHOUT_CLASSIFICATION	2.488414162975763E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999836271082803	WITHOUT_CLASSIFICATION	1.637289171969899E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999909119505616	WITHOUT_CLASSIFICATION	9.088049438393375E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.999989953602105	WITHOUT_CLASSIFICATION	1.0046397894932658E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999913478040069	WITHOUT_CLASSIFICATION	8.652195993105219E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999905660545886	WITHOUT_CLASSIFICATION	9.433945411290216E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999898920683961	WITHOUT_CLASSIFICATION	1.0107931603910985E-5	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9998387243026257	WITHOUT_CLASSIFICATION	1.612756973743358E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9999841582003379	WITHOUT_CLASSIFICATION	1.5841799662120795E-5	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999545353617766	WITHOUT_CLASSIFICATION	4.5464638223412755E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998065690320869	WITHOUT_CLASSIFICATION	1.9343096791315321E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.999938541313795	WITHOUT_CLASSIFICATION	6.145868620496285E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999598851962782	WITHOUT_CLASSIFICATION	4.01148037217187E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.999945823648978	WITHOUT_CLASSIFICATION	5.4176351021897744E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999854481373699	WITHOUT_CLASSIFICATION	1.4551862630088895E-5	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9995581644788876	WITHOUT_CLASSIFICATION	4.4183552111246667E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9997955265174023	WITHOUT_CLASSIFICATION	2.0447348259755886E-4	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999841220647897	WITHOUT_CLASSIFICATION	1.5877935210328254E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999893204794583	WITHOUT_CLASSIFICATION	1.0679520541735529E-5	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.999191769373324	WITHOUT_CLASSIFICATION	8.082306266759889E-4	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.999920811476486	WITHOUT_CLASSIFICATION	7.918852351393326E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9997062130655022	WITHOUT_CLASSIFICATION	2.9378693449777434E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9994186445028955	WITHOUT_CLASSIFICATION	5.813554971044421E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9998791359523069	WITHOUT_CLASSIFICATION	1.2086404769299386E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999983675165888	WITHOUT_CLASSIFICATION	1.6324834112495756E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999995471229448	WITHOUT_CLASSIFICATION	4.5287705521247157E-7	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999849534569272	WITHOUT_CLASSIFICATION	1.5046543072920545E-5	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999957023678453	WITHOUT_CLASSIFICATION	4.297632154750028E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999996922955922	WITHOUT_CLASSIFICATION	3.077044078588369E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999998486476844	WITHOUT_CLASSIFICATION	1.5135231545157266E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999998486476844	WITHOUT_CLASSIFICATION	1.5135231545157266E-7	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999068943940829	WITHOUT_CLASSIFICATION	9.310560591706901E-5	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9998025804949433	WITHOUT_CLASSIFICATION	1.97419505056616E-4	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9998812780627437	WITHOUT_CLASSIFICATION	1.1872193725629084E-4	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999694245203496	WITHOUT_CLASSIFICATION	3.057547965038195E-5	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999288962514101	WITHOUT_CLASSIFICATION	7.110374858993101E-5	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999991930519956	WITHOUT_CLASSIFICATION	8.069480044367404E-7	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9999772798012334	WITHOUT_CLASSIFICATION	2.2720198766619167E-5	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999907567713919	WITHOUT_CLASSIFICATION	9.243228608040162E-6	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9981705057928724	WITHOUT_CLASSIFICATION	0.0018294942071276498	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999998350172722	WITHOUT_CLASSIFICATION	1.6498272791841049E-7	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999997405961328	WITHOUT_CLASSIFICATION	2.5940386711608936E-7	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.999999990640329	WITHOUT_CLASSIFICATION	9.35967112720269E-9	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999241690625826	WITHOUT_CLASSIFICATION	7.583093741735562E-5	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999897284359658	WITHOUT_CLASSIFICATION	1.027156403415442E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999975446368636	WITHOUT_CLASSIFICATION	2.4553631363715602E-6	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999925516546158	WITHOUT_CLASSIFICATION	7.448345384159509E-6	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999999311122231	WITHOUT_CLASSIFICATION	6.888777690274565E-8	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9993578127279747	WITHOUT_CLASSIFICATION	6.421872720252187E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9999753117820163	WITHOUT_CLASSIFICATION	2.468821798374102E-5	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999994050169481	WITHOUT_CLASSIFICATION	5.949830519149926E-7	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999999332738843	WITHOUT_CLASSIFICATION	6.672611578539634E-8	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999938238325166	WITHOUT_CLASSIFICATION	6.1761674834501516E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.8226068970591902	WITHOUT_CLASSIFICATION	0.17739310294080973	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999986248926763	WITHOUT_CLASSIFICATION	1.3751073237184306E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.8226068970591902	WITHOUT_CLASSIFICATION	0.17739310294080973	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999964004560686	WITHOUT_CLASSIFICATION	3.5995439312722836E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999969196536903	WITHOUT_CLASSIFICATION	3.0803463095982248E-6	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.8377036079931818	DEFECT	0.1622963920068181	WITHOUT_CLASSIFICATION
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999036316458288	WITHOUT_CLASSIFICATION	9.63683541711198E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9996709928317582	WITHOUT_CLASSIFICATION	3.290071682418896E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999918224866233	WITHOUT_CLASSIFICATION	8.177513376740195E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999918224866233	WITHOUT_CLASSIFICATION	8.177513376740195E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999918224866233	WITHOUT_CLASSIFICATION	8.177513376740195E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999465896011136	WITHOUT_CLASSIFICATION	5.341039888650381E-5	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999224289936067	WITHOUT_CLASSIFICATION	7.757100639322368E-5	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999998003642716	WITHOUT_CLASSIFICATION	1.9963572829897907E-7	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999736643070359	WITHOUT_CLASSIFICATION	2.6335692963998684E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999736643070359	WITHOUT_CLASSIFICATION	2.6335692963998684E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999736643070359	WITHOUT_CLASSIFICATION	2.6335692963998684E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999736643070359	WITHOUT_CLASSIFICATION	2.6335692963998684E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999736643070359	WITHOUT_CLASSIFICATION	2.6335692963998684E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999736643070359	WITHOUT_CLASSIFICATION	2.6335692963998684E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999073072656985	WITHOUT_CLASSIFICATION	9.269273430152113E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999073072656985	WITHOUT_CLASSIFICATION	9.269273430152113E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999073072656985	WITHOUT_CLASSIFICATION	9.269273430152113E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999073072656985	WITHOUT_CLASSIFICATION	9.269273430152113E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999073072656985	WITHOUT_CLASSIFICATION	9.269273430152113E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999914286749493	WITHOUT_CLASSIFICATION	8.571325050720572E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999914286749493	WITHOUT_CLASSIFICATION	8.571325050720572E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999914286749493	WITHOUT_CLASSIFICATION	8.571325050720572E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999914286749493	WITHOUT_CLASSIFICATION	8.571325050720572E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999914286749493	WITHOUT_CLASSIFICATION	8.571325050720572E-6	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999982986936604	WITHOUT_CLASSIFICATION	1.7013063396004908E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999982986936604	WITHOUT_CLASSIFICATION	1.7013063396004908E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999982986936604	WITHOUT_CLASSIFICATION	1.7013063396004908E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999982986936604	WITHOUT_CLASSIFICATION	1.7013063396004908E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999982986936604	WITHOUT_CLASSIFICATION	1.7013063396004908E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999982986936604	WITHOUT_CLASSIFICATION	1.7013063396004908E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999162582702874	WITHOUT_CLASSIFICATION	8.374172971255893E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999162582702874	WITHOUT_CLASSIFICATION	8.374172971255893E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999162582702874	WITHOUT_CLASSIFICATION	8.374172971255893E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999162582702874	WITHOUT_CLASSIFICATION	8.374172971255893E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999162582702874	WITHOUT_CLASSIFICATION	8.374172971255893E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999186558012957	WITHOUT_CLASSIFICATION	8.13441987043463E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999186558012957	WITHOUT_CLASSIFICATION	8.13441987043463E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999186558012957	WITHOUT_CLASSIFICATION	8.13441987043463E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999186558012957	WITHOUT_CLASSIFICATION	8.13441987043463E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999186558012957	WITHOUT_CLASSIFICATION	8.13441987043463E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999344667615201	WITHOUT_CLASSIFICATION	6.553323847998646E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999344667615201	WITHOUT_CLASSIFICATION	6.553323847998646E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999344667615201	WITHOUT_CLASSIFICATION	6.553323847998646E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999344667615201	WITHOUT_CLASSIFICATION	6.553323847998646E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999344667615201	WITHOUT_CLASSIFICATION	6.553323847998646E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.999996860116745	WITHOUT_CLASSIFICATION	3.1398832548571764E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999997928211083	WITHOUT_CLASSIFICATION	2.071788918079682E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999995262594548	WITHOUT_CLASSIFICATION	4.737405451511334E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.999998720646825	WITHOUT_CLASSIFICATION	1.279353174998729E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999977060499126	WITHOUT_CLASSIFICATION	2.2939500874171407E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999905043114438	WITHOUT_CLASSIFICATION	9.495688556138086E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999900833764812	WITHOUT_CLASSIFICATION	9.91662351882084E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999916651764582	WITHOUT_CLASSIFICATION	8.334823541716162E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999987223902854	WITHOUT_CLASSIFICATION	1.2776097146038163E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999858380374782	WITHOUT_CLASSIFICATION	1.4161962521867006E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.999985588810281	WITHOUT_CLASSIFICATION	1.441118971897871E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999861144786631	WITHOUT_CLASSIFICATION	1.3885521336880142E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999914767212709	WITHOUT_CLASSIFICATION	8.523278729162792E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999886477854332	WITHOUT_CLASSIFICATION	1.1352214566772772E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999855206365674	WITHOUT_CLASSIFICATION	1.4479363432639006E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999866097850214	WITHOUT_CLASSIFICATION	1.3390214978553316E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999872709719171	WITHOUT_CLASSIFICATION	1.2729028082913458E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999920932136834	WITHOUT_CLASSIFICATION	7.90678631649648E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.999989427989782	WITHOUT_CLASSIFICATION	1.057201021811486E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999889719610005	WITHOUT_CLASSIFICATION	1.1028038999634018E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999882995660446	WITHOUT_CLASSIFICATION	1.1700433955318264E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999882931602868	WITHOUT_CLASSIFICATION	1.1706839713200884E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999918847307491	WITHOUT_CLASSIFICATION	8.115269251000779E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999862681324643	WITHOUT_CLASSIFICATION	1.373186753565765E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999908690564483	WITHOUT_CLASSIFICATION	9.130943551714128E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999885706723913	WITHOUT_CLASSIFICATION	1.1429327608701811E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.999992902873693	WITHOUT_CLASSIFICATION	7.097126306983597E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.999987537321135	WITHOUT_CLASSIFICATION	1.2462678865002272E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999847744481267	WITHOUT_CLASSIFICATION	1.5225551873218815E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999872228873639	WITHOUT_CLASSIFICATION	1.2777112636026023E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999874487012239	WITHOUT_CLASSIFICATION	1.2551298776203546E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999861604634335	WITHOUT_CLASSIFICATION	1.3839536566480104E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999883293686669	WITHOUT_CLASSIFICATION	1.1670631333138678E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999921620635419	WITHOUT_CLASSIFICATION	7.837936457995765E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999881423537512	WITHOUT_CLASSIFICATION	1.1857646248785653E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999868454259867	WITHOUT_CLASSIFICATION	1.315457401330804E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999880492704596	WITHOUT_CLASSIFICATION	1.1950729540347821E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999857817996634	WITHOUT_CLASSIFICATION	1.421820033660845E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.999991138007661	WITHOUT_CLASSIFICATION	8.861992338969295E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999926120786707	WITHOUT_CLASSIFICATION	7.387921329250493E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.99999219326503	WITHOUT_CLASSIFICATION	7.806734969986775E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999875361913092	WITHOUT_CLASSIFICATION	1.2463808690851948E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999840147368192	WITHOUT_CLASSIFICATION	1.5985263180881707E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999765766466682	WITHOUT_CLASSIFICATION	2.3423353331830027E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999824988754151	WITHOUT_CLASSIFICATION	1.7501124584851947E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999799868193436	WITHOUT_CLASSIFICATION	2.001318065646645E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999870498856979	WITHOUT_CLASSIFICATION	1.2950114302201603E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999874558520806	WITHOUT_CLASSIFICATION	1.2544147919280932E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999827417940795	WITHOUT_CLASSIFICATION	1.7258205920506124E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999858534454713	WITHOUT_CLASSIFICATION	1.4146554528573242E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999814801638539	WITHOUT_CLASSIFICATION	1.8519836146109267E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.999983236542444	WITHOUT_CLASSIFICATION	1.6763457556006987E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999842149700693	WITHOUT_CLASSIFICATION	1.578502993065199E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999989288186585	WITHOUT_CLASSIFICATION	1.0711813415037398E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999826609097746	WITHOUT_CLASSIFICATION	1.7339090225403823E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999858527683831	WITHOUT_CLASSIFICATION	1.4147231616835192E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999845891307263	WITHOUT_CLASSIFICATION	1.541086927370985E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999876912731918	WITHOUT_CLASSIFICATION	1.2308726808220945E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999905783772733	WITHOUT_CLASSIFICATION	9.421622726629997E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999898450814967	WITHOUT_CLASSIFICATION	1.0154918503302982E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999920079310477	WITHOUT_CLASSIFICATION	7.99206895228682E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999884585435698	WITHOUT_CLASSIFICATION	1.1541456430340966E-5	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999849191637404	WITHOUT_CLASSIFICATION	1.5080836259487517E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.99998347600855	WITHOUT_CLASSIFICATION	1.6523991450055573E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999863008088216	WITHOUT_CLASSIFICATION	1.3699191178481361E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999909680031598	WITHOUT_CLASSIFICATION	9.03199684018311E-6	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999856262286477	WITHOUT_CLASSIFICATION	1.4373771352219535E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999858500848764	WITHOUT_CLASSIFICATION	1.414991512365057E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999813814635294	WITHOUT_CLASSIFICATION	1.8618536470533107E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999815850827677	WITHOUT_CLASSIFICATION	1.8414917232326062E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999883463224324	WITHOUT_CLASSIFICATION	1.1653677567575926E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999890651289567	WITHOUT_CLASSIFICATION	1.0934871043320653E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999846726852593	WITHOUT_CLASSIFICATION	1.5327314740723136E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.999985952776939	WITHOUT_CLASSIFICATION	1.4047223060870154E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999892603634462	WITHOUT_CLASSIFICATION	1.0739636553974826E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999820292005458	WITHOUT_CLASSIFICATION	1.7970799454203147E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.999983150826045	WITHOUT_CLASSIFICATION	1.6849173954922716E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999846846328655	WITHOUT_CLASSIFICATION	1.5315367134575536E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999836622237603	WITHOUT_CLASSIFICATION	1.6337776239709378E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.999982715433868	WITHOUT_CLASSIFICATION	1.728456613208568E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999884021494704	WITHOUT_CLASSIFICATION	1.1597850529695209E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999803209743462	WITHOUT_CLASSIFICATION	1.967902565380027E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999882173745411	WITHOUT_CLASSIFICATION	1.1782625458847835E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.999986927008387	WITHOUT_CLASSIFICATION	1.3072991612996674E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999888893371295	WITHOUT_CLASSIFICATION	1.1110662870588015E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999882236227976	WITHOUT_CLASSIFICATION	1.1776377202428733E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999899984020696	WITHOUT_CLASSIFICATION	1.0001597930481311E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999823719538172	WITHOUT_CLASSIFICATION	1.7628046182829995E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999840494004048	WITHOUT_CLASSIFICATION	1.595059959527832E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999895765510117	WITHOUT_CLASSIFICATION	1.0423448988223728E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999876604554476	WITHOUT_CLASSIFICATION	1.2339544552325915E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999879244043824	WITHOUT_CLASSIFICATION	1.20755956176263E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999802410463009	WITHOUT_CLASSIFICATION	1.9758953699164315E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999873052956454	WITHOUT_CLASSIFICATION	1.2694704354505982E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999928858374415	WITHOUT_CLASSIFICATION	7.1141625584648054E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999923724438391	WITHOUT_CLASSIFICATION	7.627556160937138E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999936067346333	WITHOUT_CLASSIFICATION	6.393265366684075E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999902492806483	WITHOUT_CLASSIFICATION	9.750719351797337E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999901474048074	WITHOUT_CLASSIFICATION	9.8525951925467E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999898290074586	WITHOUT_CLASSIFICATION	1.0170992541342305E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999915168030319	WITHOUT_CLASSIFICATION	8.483196968101138E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999847862533264	WITHOUT_CLASSIFICATION	1.5213746673603133E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999903141114213	WITHOUT_CLASSIFICATION	9.685888578768065E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.999982426518231	WITHOUT_CLASSIFICATION	1.7573481768948275E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999855754831063	WITHOUT_CLASSIFICATION	1.4424516893661714E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999843566133408	WITHOUT_CLASSIFICATION	1.5643386659104537E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999907964248643	WITHOUT_CLASSIFICATION	9.203575135616822E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999835743893879	WITHOUT_CLASSIFICATION	1.642561061214844E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999904541165676	WITHOUT_CLASSIFICATION	9.545883432381517E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999894593642741	WITHOUT_CLASSIFICATION	1.0540635726038949E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999897032802535	WITHOUT_CLASSIFICATION	1.0296719746504945E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999905266066293	WITHOUT_CLASSIFICATION	9.47339337059133E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999909154006363	WITHOUT_CLASSIFICATION	9.084599363749282E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999923195963717	WITHOUT_CLASSIFICATION	7.680403628262126E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999885751309605	WITHOUT_CLASSIFICATION	1.1424869039453133E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999901175467115	WITHOUT_CLASSIFICATION	9.8824532884663E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999879381401384	WITHOUT_CLASSIFICATION	1.2061859861575724E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999909911977591	WITHOUT_CLASSIFICATION	9.008802240940144E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.999989293083761	WITHOUT_CLASSIFICATION	1.0706916238935671E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999874110403718	WITHOUT_CLASSIFICATION	1.2588959628170481E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999910199248345	WITHOUT_CLASSIFICATION	8.980075165542573E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999912713494561	WITHOUT_CLASSIFICATION	8.72865054389575E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999920773202433	WITHOUT_CLASSIFICATION	7.922679756745954E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999858603838006	WITHOUT_CLASSIFICATION	1.4139616199393309E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999857333829312	WITHOUT_CLASSIFICATION	1.426661706887218E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.999986433765616	WITHOUT_CLASSIFICATION	1.3566234384052123E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999867157142198	WITHOUT_CLASSIFICATION	1.32842857801631E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999879228049666	WITHOUT_CLASSIFICATION	1.2077195033385881E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999895750714479	WITHOUT_CLASSIFICATION	1.042492855197628E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999876221577311	WITHOUT_CLASSIFICATION	1.2377842268942006E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999836018576868	WITHOUT_CLASSIFICATION	1.6398142313242416E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999883317704973	WITHOUT_CLASSIFICATION	1.1668229502748085E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999861855745059	WITHOUT_CLASSIFICATION	1.3814425494059091E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999828698743399	WITHOUT_CLASSIFICATION	1.7130125660068346E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999858129350856	WITHOUT_CLASSIFICATION	1.4187064914447508E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.999983853551618	WITHOUT_CLASSIFICATION	1.6146448381983978E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999877640975356	WITHOUT_CLASSIFICATION	1.2235902464293934E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999870599466713	WITHOUT_CLASSIFICATION	1.2940053328720044E-5	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999858076651001	WITHOUT_CLASSIFICATION	1.4192334899754071E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999837893409584	WITHOUT_CLASSIFICATION	1.6210659041579253E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999884698159858	WITHOUT_CLASSIFICATION	1.1530184014278907E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999840033344709	WITHOUT_CLASSIFICATION	1.5996665529157108E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999861045571218	WITHOUT_CLASSIFICATION	1.389544287817943E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999850729728998	WITHOUT_CLASSIFICATION	1.4927027100233481E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999882609678221	WITHOUT_CLASSIFICATION	1.1739032177840412E-5	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999860619416954	WITHOUT_CLASSIFICATION	1.3938058304600581E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999837919799184	WITHOUT_CLASSIFICATION	1.620802008167165E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999883998706945	WITHOUT_CLASSIFICATION	1.1600129305461208E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999905184698559	WITHOUT_CLASSIFICATION	9.481530144048997E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999883730685064	WITHOUT_CLASSIFICATION	1.1626931493618335E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.999988144343534	WITHOUT_CLASSIFICATION	1.1855656466118198E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999888469851826	WITHOUT_CLASSIFICATION	1.1153014817433333E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999906400211227	WITHOUT_CLASSIFICATION	9.359978877354086E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.999974862897233	WITHOUT_CLASSIFICATION	2.513710276695962E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999769851839265	WITHOUT_CLASSIFICATION	2.3014816073435204E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999783321882951	WITHOUT_CLASSIFICATION	2.1667811704838758E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999842651475697	WITHOUT_CLASSIFICATION	1.5734852430340638E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999826299451247	WITHOUT_CLASSIFICATION	1.73700548753582E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999914923493343	WITHOUT_CLASSIFICATION	8.507650665728782E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999904181923941	WITHOUT_CLASSIFICATION	9.581807605987885E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999906994481412	WITHOUT_CLASSIFICATION	9.300551858770989E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999882267018175	WITHOUT_CLASSIFICATION	1.1773298182537154E-5	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999682535265446	WITHOUT_CLASSIFICATION	3.174647345544208E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999889089213411	WITHOUT_CLASSIFICATION	1.1091078658966586E-5	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.999988364574478	WITHOUT_CLASSIFICATION	1.1635425521867148E-5	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999929594169418	WITHOUT_CLASSIFICATION	7.040583058240075E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999843221585712	WITHOUT_CLASSIFICATION	1.567784142878145E-5	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999849464443328	WITHOUT_CLASSIFICATION	1.5053555667158623E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.999991791966994	WITHOUT_CLASSIFICATION	8.208033005986655E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999886141925293	WITHOUT_CLASSIFICATION	1.138580747074063E-5	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999869498242964	WITHOUT_CLASSIFICATION	1.3050175703630024E-5	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999879162956898	WITHOUT_CLASSIFICATION	1.208370431014145E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999870324130343	WITHOUT_CLASSIFICATION	1.2967586965779297E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999808918555101	WITHOUT_CLASSIFICATION	1.910814448982004E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999832336904769	WITHOUT_CLASSIFICATION	1.6766309523125387E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999915407623694	WITHOUT_CLASSIFICATION	8.459237630569498E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999883379776191	WITHOUT_CLASSIFICATION	1.1662022380817546E-5	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999855780351309	WITHOUT_CLASSIFICATION	1.4421964869217631E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999809654160585	WITHOUT_CLASSIFICATION	1.903458394145295E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999799006681118	WITHOUT_CLASSIFICATION	2.0099331888222774E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999860737074613	WITHOUT_CLASSIFICATION	1.392629253868591E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999820125322564	WITHOUT_CLASSIFICATION	1.798746774368543E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999809925031117	WITHOUT_CLASSIFICATION	1.900749688834081E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999797198947163	WITHOUT_CLASSIFICATION	2.0280105283712462E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999869784034157	WITHOUT_CLASSIFICATION	1.3021596584439464E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999791762090313	WITHOUT_CLASSIFICATION	2.0823790968714812E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999802531726618	WITHOUT_CLASSIFICATION	1.9746827338156694E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999768441672741	WITHOUT_CLASSIFICATION	2.3155832725910953E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999786191062335	WITHOUT_CLASSIFICATION	2.1380893766458577E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.999979516457925	WITHOUT_CLASSIFICATION	2.0483542074905895E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999884082244284	WITHOUT_CLASSIFICATION	1.1591775571667464E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999865508553469	WITHOUT_CLASSIFICATION	1.344914465297151E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999843311343068	WITHOUT_CLASSIFICATION	1.5668865693147074E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999810280867207	WITHOUT_CLASSIFICATION	1.8971913279247E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.99998737822876	WITHOUT_CLASSIFICATION	1.2621771239962398E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999832052173424	WITHOUT_CLASSIFICATION	1.6794782657591675E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999896124976527	WITHOUT_CLASSIFICATION	1.0387502347393979E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999888144604804	WITHOUT_CLASSIFICATION	1.1185539519633656E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999840279432486	WITHOUT_CLASSIFICATION	1.5972056751353917E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999903369963842	WITHOUT_CLASSIFICATION	9.663003615842757E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.999983925485503	WITHOUT_CLASSIFICATION	1.607451449697702E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999834612881057	WITHOUT_CLASSIFICATION	1.6538711894245837E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999824394592325	WITHOUT_CLASSIFICATION	1.7560540767526642E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999829497304732	WITHOUT_CLASSIFICATION	1.7050269526760995E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999846078189882	WITHOUT_CLASSIFICATION	1.5392181011744498E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.999988156130925	WITHOUT_CLASSIFICATION	1.1843869075152352E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999891152700755	WITHOUT_CLASSIFICATION	1.0884729924554646E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999889545224427	WITHOUT_CLASSIFICATION	1.104547755729569E-5	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999831408597485	WITHOUT_CLASSIFICATION	1.6859140251520842E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999846537843955	WITHOUT_CLASSIFICATION	1.534621560459891E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999831660078876	WITHOUT_CLASSIFICATION	1.683399211237343E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999845097739768	WITHOUT_CLASSIFICATION	1.549022602320035E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999862124864773	WITHOUT_CLASSIFICATION	1.3787513522621665E-5	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999850235205495	WITHOUT_CLASSIFICATION	1.4976479450398534E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999850153212481	WITHOUT_CLASSIFICATION	1.4984678751996581E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999824233087616	WITHOUT_CLASSIFICATION	1.7576691238399364E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999831978359193	WITHOUT_CLASSIFICATION	1.680216408071285E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999849313475317	WITHOUT_CLASSIFICATION	1.506865246835142E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999821028596202	WITHOUT_CLASSIFICATION	1.7897140379738627E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999828708132175	WITHOUT_CLASSIFICATION	1.71291867826067E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999854228389363	WITHOUT_CLASSIFICATION	1.4577161063594881E-5	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999892389516646	WITHOUT_CLASSIFICATION	1.0761048335382442E-5	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.999983489840808	WITHOUT_CLASSIFICATION	1.651015919200973E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.999986680822925	WITHOUT_CLASSIFICATION	1.3319177075056868E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999842280162128	WITHOUT_CLASSIFICATION	1.577198378718803E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.999983051417604	WITHOUT_CLASSIFICATION	1.694858239597021E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999848050995965	WITHOUT_CLASSIFICATION	1.5194900403413518E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999832744578638	WITHOUT_CLASSIFICATION	1.6725542136120345E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999850972781712	WITHOUT_CLASSIFICATION	1.4902721828801344E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999852021891386	WITHOUT_CLASSIFICATION	1.4797810861467298E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999829483703332	WITHOUT_CLASSIFICATION	1.7051629666852706E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999860622802615	WITHOUT_CLASSIFICATION	1.3937719738457773E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999856118695615	WITHOUT_CLASSIFICATION	1.4388130438535609E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999891227889156	WITHOUT_CLASSIFICATION	1.0877211084395908E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999849840812605	WITHOUT_CLASSIFICATION	1.5015918739454608E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999885603550382	WITHOUT_CLASSIFICATION	1.1439644961668721E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999737894046495	WITHOUT_CLASSIFICATION	2.6210595350478058E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999829421718374	WITHOUT_CLASSIFICATION	1.705782816261416E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999849111391294	WITHOUT_CLASSIFICATION	1.5088860870767669E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999832109556656	WITHOUT_CLASSIFICATION	1.6789044334497016E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999892064034832	WITHOUT_CLASSIFICATION	1.0793596516817692E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.999982409624337	WITHOUT_CLASSIFICATION	1.7590375662923348E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.999983173024986	WITHOUT_CLASSIFICATION	1.682697501406099E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999767334829702	WITHOUT_CLASSIFICATION	2.3266517029715208E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999848363848777	WITHOUT_CLASSIFICATION	1.5163615122361286E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999841428486583	WITHOUT_CLASSIFICATION	1.5857151341619644E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999848433588628	WITHOUT_CLASSIFICATION	1.5156641137125324E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999837416156349	WITHOUT_CLASSIFICATION	1.625838436508236E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999653217492992	WITHOUT_CLASSIFICATION	3.4678250700892984E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999792838296913	WITHOUT_CLASSIFICATION	2.071617030876775E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999763188465596	WITHOUT_CLASSIFICATION	2.368115344047127E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999773503527395	WITHOUT_CLASSIFICATION	2.264964726051369E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999763429298935	WITHOUT_CLASSIFICATION	2.36570701065121E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999913478040069	WITHOUT_CLASSIFICATION	8.652195993105219E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999905660545886	WITHOUT_CLASSIFICATION	9.433945411290216E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999821535362409	WITHOUT_CLASSIFICATION	1.7846463759121696E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999885775866202	WITHOUT_CLASSIFICATION	1.1422413379845521E-5	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999867764957188	WITHOUT_CLASSIFICATION	1.3223504281170929E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999833288965223	WITHOUT_CLASSIFICATION	1.6671103477723013E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999851279779624	WITHOUT_CLASSIFICATION	1.487202203754657E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999828884123311	WITHOUT_CLASSIFICATION	1.7111587668941907E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.999983132233786	WITHOUT_CLASSIFICATION	1.6867766213966016E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999859986081677	WITHOUT_CLASSIFICATION	1.4001391832188364E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999806972980794	WITHOUT_CLASSIFICATION	1.9302701920658085E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999860059266995	WITHOUT_CLASSIFICATION	1.3994073300576363E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999829343411588	WITHOUT_CLASSIFICATION	1.7065658841158984E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999890441131964	WITHOUT_CLASSIFICATION	1.0955886803599986E-5	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999673229469754	WITHOUT_CLASSIFICATION	3.267705302460657E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999839576274441	WITHOUT_CLASSIFICATION	1.6042372555975534E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999795467364834	WITHOUT_CLASSIFICATION	2.045326351656537E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999811695999687	WITHOUT_CLASSIFICATION	1.883040003122572E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999812389769962	WITHOUT_CLASSIFICATION	1.876102300387045E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999781267088859	WITHOUT_CLASSIFICATION	2.1873291114143302E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999858489154677	WITHOUT_CLASSIFICATION	1.4151084532259961E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999760221560295	WITHOUT_CLASSIFICATION	2.3977843970464113E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999633075342513	WITHOUT_CLASSIFICATION	3.6692465748651486E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999809418447708	WITHOUT_CLASSIFICATION	1.9058155229250338E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999790619828153	WITHOUT_CLASSIFICATION	2.093801718470697E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999791398709503	WITHOUT_CLASSIFICATION	2.086012904966189E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999784824288689	WITHOUT_CLASSIFICATION	2.151757113111973E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999847155130958	WITHOUT_CLASSIFICATION	1.5284486904252727E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999835259113473	WITHOUT_CLASSIFICATION	1.6474088652742504E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999870346345369	WITHOUT_CLASSIFICATION	1.296536546313002E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999798870678938	WITHOUT_CLASSIFICATION	2.0112932106209193E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999768564331363	WITHOUT_CLASSIFICATION	2.3143566863794296E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999882052203715	WITHOUT_CLASSIFICATION	1.1794779628532442E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999847612450047	WITHOUT_CLASSIFICATION	1.5238754995313518E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999887583872352	WITHOUT_CLASSIFICATION	1.124161276472392E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.999987155589387	WITHOUT_CLASSIFICATION	1.2844410612919294E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999890625568154	WITHOUT_CLASSIFICATION	1.093744318449338E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999880783634376	WITHOUT_CLASSIFICATION	1.1921636562339103E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.999990132056428	WITHOUT_CLASSIFICATION	9.867943572049476E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999908218710724	WITHOUT_CLASSIFICATION	9.178128927611362E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999878492949731	WITHOUT_CLASSIFICATION	1.2150705026837521E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999598851962782	WITHOUT_CLASSIFICATION	4.01148037217187E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.999945823648978	WITHOUT_CLASSIFICATION	5.4176351021897744E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999893204794583	WITHOUT_CLASSIFICATION	1.0679520541735529E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.999920811476486	WITHOUT_CLASSIFICATION	7.918852351393326E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9997062130655022	WITHOUT_CLASSIFICATION	2.9378693449777434E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9994186445028955	WITHOUT_CLASSIFICATION	5.813554971044421E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9998791359523069	WITHOUT_CLASSIFICATION	1.2086404769299386E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999855109700279	WITHOUT_CLASSIFICATION	1.4489029972110382E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999873609170578	WITHOUT_CLASSIFICATION	1.2639082942285649E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999872980218667	WITHOUT_CLASSIFICATION	1.2701978133315272E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999879732990963	WITHOUT_CLASSIFICATION	1.2026700903699241E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999894771026655	WITHOUT_CLASSIFICATION	1.0522897334461267E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999893126105523	WITHOUT_CLASSIFICATION	1.0687389447565916E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999904942193597	WITHOUT_CLASSIFICATION	9.505780640303223E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999843880430601	WITHOUT_CLASSIFICATION	1.5611956939887804E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.999983406025513	WITHOUT_CLASSIFICATION	1.6593974486887097E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999880029781961	WITHOUT_CLASSIFICATION	1.1997021803824038E-5	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999906691971685	WITHOUT_CLASSIFICATION	9.33080283145263E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999792076076974	WITHOUT_CLASSIFICATION	2.079239230248883E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.999987756251167	WITHOUT_CLASSIFICATION	1.2243748832979306E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999828453643829	WITHOUT_CLASSIFICATION	1.7154635617196008E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999880967641662	WITHOUT_CLASSIFICATION	1.1903235833721459E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999830578391823	WITHOUT_CLASSIFICATION	1.6942160817659324E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999793388213899	WITHOUT_CLASSIFICATION	2.0661178610140293E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999880030555824	WITHOUT_CLASSIFICATION	1.1996944417596874E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.999980044055869	WITHOUT_CLASSIFICATION	1.995594413086377E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999883512135198	WITHOUT_CLASSIFICATION	1.1648786480132753E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.999981853670273	WITHOUT_CLASSIFICATION	1.8146329726910545E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999490792274153	WITHOUT_CLASSIFICATION	5.0920772584777864E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999449638599383	WITHOUT_CLASSIFICATION	5.503614006166622E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999857667649822	WITHOUT_CLASSIFICATION	1.4233235017790338E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999972125960167	WITHOUT_CLASSIFICATION	2.787403983305376E-6	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999948996460777	WITHOUT_CLASSIFICATION	5.10035392233068E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9999573843826592	WITHOUT_CLASSIFICATION	4.261561734075846E-5	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999982030179559	WITHOUT_CLASSIFICATION	1.796982044094322E-6	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.999998115058035	WITHOUT_CLASSIFICATION	1.8849419649118904E-6	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9998652429502392	WITHOUT_CLASSIFICATION	1.3475704976078897E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999995471229448	WITHOUT_CLASSIFICATION	4.5287705521247157E-7	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999849534569272	WITHOUT_CLASSIFICATION	1.5046543072920545E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999998486476844	WITHOUT_CLASSIFICATION	1.5135231545157266E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999998486476844	WITHOUT_CLASSIFICATION	1.5135231545157266E-7	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9989490275786471	WITHOUT_CLASSIFICATION	0.0010509724213529168	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999901287027582	WITHOUT_CLASSIFICATION	9.87129724179008E-6	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999946959767824	WITHOUT_CLASSIFICATION	5.304023217568688E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999967733336569	WITHOUT_CLASSIFICATION	3.2266663429750764E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999995168304743	WITHOUT_CLASSIFICATION	4.83169525769439E-7	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999972379679071	WITHOUT_CLASSIFICATION	2.7620320929728096E-6	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999993190535857	WITHOUT_CLASSIFICATION	6.8094641436521E-7	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999966305150183	WITHOUT_CLASSIFICATION	3.3694849816433644E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999999362245852	WITHOUT_CLASSIFICATION	6.377541477796286E-8	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999995264204824	WITHOUT_CLASSIFICATION	4.735795175761847E-7	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999999742538261	WITHOUT_CLASSIFICATION	2.5746173806860772E-8	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999999815979658	WITHOUT_CLASSIFICATION	1.8402034275983364E-8	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999998828805663	WITHOUT_CLASSIFICATION	1.1711943367266452E-7	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999992126356761	WITHOUT_CLASSIFICATION	7.873643238707061E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999996460577665	WITHOUT_CLASSIFICATION	3.539422335024453E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999996460577665	WITHOUT_CLASSIFICATION	3.539422335024453E-7	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999989366755327	WITHOUT_CLASSIFICATION	1.0633244672758534E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999999388655805	WITHOUT_CLASSIFICATION	6.113441956312915E-8	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999998626413455	WITHOUT_CLASSIFICATION	1.3735865445211063E-7	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999994081999429	WITHOUT_CLASSIFICATION	5.918000570617148E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998052825851	WITHOUT_CLASSIFICATION	1.9471741489996685E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999995910185678	WITHOUT_CLASSIFICATION	4.089814321109181E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999994694805383	WITHOUT_CLASSIFICATION	5.305194617550369E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999995910185678	WITHOUT_CLASSIFICATION	4.089814321109181E-7	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999998609584462	WITHOUT_CLASSIFICATION	1.3904155384687405E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999325453442538	WITHOUT_CLASSIFICATION	6.74546557461937E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.985477439197983	WITHOUT_CLASSIFICATION	0.014522560802017092	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9808639916430536	WITHOUT_CLASSIFICATION	0.01913600835694637	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999738433442694	WITHOUT_CLASSIFICATION	2.615665573060305E-5	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999961256546739	WITHOUT_CLASSIFICATION	3.874345326129525E-6	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999998614130657	WITHOUT_CLASSIFICATION	1.3858693417791768E-7	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999989009940132	WITHOUT_CLASSIFICATION	1.09900598671757E-6	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.999999404521837	WITHOUT_CLASSIFICATION	5.954781629380239E-7	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9883772267419207	WITHOUT_CLASSIFICATION	0.011622773258079285	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999994780350333	WITHOUT_CLASSIFICATION	5.219649667776821E-7	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999965597650771	WITHOUT_CLASSIFICATION	3.440234923017464E-6	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999778559850585	WITHOUT_CLASSIFICATION	2.2144014941521223E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999705384864832	WITHOUT_CLASSIFICATION	2.9461513516872672E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999996587009841	WITHOUT_CLASSIFICATION	3.4129901601809707E-7	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999996587009841	WITHOUT_CLASSIFICATION	3.4129901601809707E-7	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999976861111866	WITHOUT_CLASSIFICATION	2.3138888133766793E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999999851258594	WITHOUT_CLASSIFICATION	1.4874140679913553E-8	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999996301185977	WITHOUT_CLASSIFICATION	3.6988140236962885E-7	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9999817052639687	WITHOUT_CLASSIFICATION	1.8294736031244102E-5	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999997009824756	WITHOUT_CLASSIFICATION	2.990175244334312E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999995910185678	WITHOUT_CLASSIFICATION	4.089814321109181E-7	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999867538776972	WITHOUT_CLASSIFICATION	1.3246122302751148E-5	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999990204068329	WITHOUT_CLASSIFICATION	9.795931671696186E-7	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999974149900478	WITHOUT_CLASSIFICATION	2.5850099523265807E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999884882092539	WITHOUT_CLASSIFICATION	1.1511790746146495E-5	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999979667558999	WITHOUT_CLASSIFICATION	2.0332441000471274E-6	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999999946261161	WITHOUT_CLASSIFICATION	5.373883883113469E-9	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999995835735839	WITHOUT_CLASSIFICATION	4.164264160730161E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999998725292746	WITHOUT_CLASSIFICATION	1.2747072536693274E-7	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999999057626942	WITHOUT_CLASSIFICATION	9.423730576012748E-8	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999995136302897	WITHOUT_CLASSIFICATION	4.863697103051608E-7	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999998740593871	WITHOUT_CLASSIFICATION	1.2594061296589062E-7	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999998195279798	WITHOUT_CLASSIFICATION	1.8047202016985485E-7	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9996027137370551	WITHOUT_CLASSIFICATION	3.972862629448891E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999965045967656	WITHOUT_CLASSIFICATION	3.4954032344504967E-6	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9996357448755712	WITHOUT_CLASSIFICATION	3.6425512442887596E-4	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999994326202093	WITHOUT_CLASSIFICATION	5.673797907077919E-7	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999877432601633	WITHOUT_CLASSIFICATION	1.2256739836668524E-5	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9999272450271003	WITHOUT_CLASSIFICATION	7.275497289962588E-5	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999989061138489	WITHOUT_CLASSIFICATION	1.0938861510618443E-6	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999983901781071	WITHOUT_CLASSIFICATION	1.6098218929117882E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999995407584565	WITHOUT_CLASSIFICATION	4.592415434427973E-7	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9982043906558845	WITHOUT_CLASSIFICATION	0.001795609344115482	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.999999184766836	WITHOUT_CLASSIFICATION	8.152331639978099E-7	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999993016807558	WITHOUT_CLASSIFICATION	6.98319244217676E-7	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999974797294668	WITHOUT_CLASSIFICATION	2.5202705332610953E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999999598484527	WITHOUT_CLASSIFICATION	4.015154732100894E-8	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999986377782776	WITHOUT_CLASSIFICATION	1.3622217224117134E-6	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.999997800638501	WITHOUT_CLASSIFICATION	2.1993614990250225E-6	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9997165433690205	WITHOUT_CLASSIFICATION	2.834566309795623E-4	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999996748139537	WITHOUT_CLASSIFICATION	3.251860462505251E-7	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999605716240983	WITHOUT_CLASSIFICATION	3.94283759016837E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999986903181417	WITHOUT_CLASSIFICATION	1.3096818583034557E-6	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999997612891962	WITHOUT_CLASSIFICATION	2.3871080378544756E-7	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9997713919518286	WITHOUT_CLASSIFICATION	2.2860804817126598E-4	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999999396511727	WITHOUT_CLASSIFICATION	6.034882724628853E-8	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999999609476466	WITHOUT_CLASSIFICATION	3.905235326893781E-8	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9998938751449489	WITHOUT_CLASSIFICATION	1.0612485505113874E-4	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999990199982947	WITHOUT_CLASSIFICATION	9.800017053801176E-7	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999998220473392	WITHOUT_CLASSIFICATION	1.7795266078916185E-7	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999999295158023	WITHOUT_CLASSIFICATION	7.048419770241743E-8	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999855109700279	WITHOUT_CLASSIFICATION	1.4489029972110382E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999997198858908	WITHOUT_CLASSIFICATION	2.801141091437318E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999928665137698	WITHOUT_CLASSIFICATION	7.133486230219553E-6	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999536401690334	WITHOUT_CLASSIFICATION	4.635983096664191E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999997198776428	WITHOUT_CLASSIFICATION	2.8012235715731813E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999325453442538	WITHOUT_CLASSIFICATION	6.74546557461937E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999913175331401	WITHOUT_CLASSIFICATION	8.682466860009247E-6	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999963600994292	WITHOUT_CLASSIFICATION	3.6399005708476054E-6	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999401449271752	WITHOUT_CLASSIFICATION	5.9855072824807716E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996795050679	WITHOUT_CLASSIFICATION	3.2049493214973666E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996795050679	WITHOUT_CLASSIFICATION	3.2049493214973666E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999995482747509	WITHOUT_CLASSIFICATION	4.5172524906170615E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999995482747509	WITHOUT_CLASSIFICATION	4.5172524906170615E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999995482747509	WITHOUT_CLASSIFICATION	4.5172524906170615E-7	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999990408210149	WITHOUT_CLASSIFICATION	9.591789852107132E-7	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999990408210149	WITHOUT_CLASSIFICATION	9.591789852107132E-7	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999973526698205	WITHOUT_CLASSIFICATION	2.6473301794901156E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999973526698205	WITHOUT_CLASSIFICATION	2.6473301794901156E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999999797312081	WITHOUT_CLASSIFICATION	2.0268791822937524E-8	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999997763253248	WITHOUT_CLASSIFICATION	2.236746752762909E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999905122440312	WITHOUT_CLASSIFICATION	9.487755968743235E-6	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999905122440312	WITHOUT_CLASSIFICATION	9.487755968743235E-6	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999994043341527	WITHOUT_CLASSIFICATION	5.956658473028011E-7	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999990357219999	WITHOUT_CLASSIFICATION	9.64278000068069E-7	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999734926674975	WITHOUT_CLASSIFICATION	2.6507332502526667E-5	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999998924851781	WITHOUT_CLASSIFICATION	1.0751482203063662E-7	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.99982402909028	WITHOUT_CLASSIFICATION	1.759709097198997E-4	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999998707784254	WITHOUT_CLASSIFICATION	1.2922157447153295E-7	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999994945989298	WITHOUT_CLASSIFICATION	5.054010703003476E-7	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9998950373523097	WITHOUT_CLASSIFICATION	1.0496264769028963E-4	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999881366466169	WITHOUT_CLASSIFICATION	1.186335338310534E-5	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999742765893513	WITHOUT_CLASSIFICATION	2.5723410648660693E-5	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999998937506109	WITHOUT_CLASSIFICATION	1.0624938905773395E-7	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999986940417546	WITHOUT_CLASSIFICATION	1.3059582454529432E-6	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999899372292986	WITHOUT_CLASSIFICATION	1.0062770701345321E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.99998864293714	WITHOUT_CLASSIFICATION	1.1357062860041857E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999959983762696	WITHOUT_CLASSIFICATION	4.001623730293354E-6	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998770680598799	WITHOUT_CLASSIFICATION	1.229319401201439E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999284951997226	WITHOUT_CLASSIFICATION	7.150480027745693E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999741768339898	WITHOUT_CLASSIFICATION	2.582316601013446E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999815798497734	WITHOUT_CLASSIFICATION	1.8420150226540903E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999662830241622	WITHOUT_CLASSIFICATION	3.371697583770841E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999971243257324	WITHOUT_CLASSIFICATION	2.8756742675702097E-6	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.999992410770461	WITHOUT_CLASSIFICATION	7.589229539108902E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999964862584343	WITHOUT_CLASSIFICATION	3.513741565799954E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999994400909397	WITHOUT_CLASSIFICATION	5.599090603101463E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999965101306373	WITHOUT_CLASSIFICATION	3.4898693627467932E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999961780005328	WITHOUT_CLASSIFICATION	3.821999467309378E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999800461435345	WITHOUT_CLASSIFICATION	1.9953856465480222E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999836327309506	WITHOUT_CLASSIFICATION	1.6367269049448733E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999930573063104	WITHOUT_CLASSIFICATION	6.942693689576411E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999956726711562	WITHOUT_CLASSIFICATION	4.327328843776184E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999952608405935	WITHOUT_CLASSIFICATION	4.739159406410296E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999950640325194	WITHOUT_CLASSIFICATION	4.935967480729959E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999969234508594	WITHOUT_CLASSIFICATION	3.0765491406516483E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981689375129	WITHOUT_CLASSIFICATION	1.8310624870650656E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999969234508594	WITHOUT_CLASSIFICATION	3.0765491406516483E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999969234508594	WITHOUT_CLASSIFICATION	3.0765491406516483E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999969234508594	WITHOUT_CLASSIFICATION	3.0765491406516483E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999969234508594	WITHOUT_CLASSIFICATION	3.0765491406516483E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999969234508594	WITHOUT_CLASSIFICATION	3.0765491406516483E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999969234508594	WITHOUT_CLASSIFICATION	3.0765491406516483E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981689375129	WITHOUT_CLASSIFICATION	1.8310624870650656E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981689375129	WITHOUT_CLASSIFICATION	1.8310624870650656E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981689375129	WITHOUT_CLASSIFICATION	1.8310624870650656E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981689375129	WITHOUT_CLASSIFICATION	1.8310624870650656E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981689375129	WITHOUT_CLASSIFICATION	1.8310624870650656E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981689375129	WITHOUT_CLASSIFICATION	1.8310624870650656E-6	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9999695482048222	WITHOUT_CLASSIFICATION	3.0451795177820535E-5	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9996527052330119	WITHOUT_CLASSIFICATION	3.4729476698808654E-4	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999919004398522	WITHOUT_CLASSIFICATION	8.099560147779712E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998801070825004	WITHOUT_CLASSIFICATION	1.1989291749955952E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999899183954227	WITHOUT_CLASSIFICATION	1.008160457733474E-5	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999971974007333	WITHOUT_CLASSIFICATION	2.802599266677881E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999998718534788	WITHOUT_CLASSIFICATION	1.281465211287507E-7	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999995885963016	WITHOUT_CLASSIFICATION	4.1140369831920777E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999981358413791	WITHOUT_CLASSIFICATION	1.8641586209796628E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999974795790866	WITHOUT_CLASSIFICATION	2.5204209133452362E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999800433960818	WITHOUT_CLASSIFICATION	1.995660391813475E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999998234382839	WITHOUT_CLASSIFICATION	1.765617160400599E-7	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999984087125366	WITHOUT_CLASSIFICATION	1.591287463382816E-6	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999998774706322	WITHOUT_CLASSIFICATION	1.225293678104241E-7	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999982350981285	WITHOUT_CLASSIFICATION	1.7649018715149814E-6	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.99999928086351	WITHOUT_CLASSIFICATION	7.191364899853818E-7	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999943973535476	WITHOUT_CLASSIFICATION	5.602646452458996E-6	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999956480909317	WITHOUT_CLASSIFICATION	4.351909068305987E-6	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999999307887202	WITHOUT_CLASSIFICATION	6.921127982955315E-8	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999982254710281	WITHOUT_CLASSIFICATION	1.7745289719653506E-6	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999999880674995	WITHOUT_CLASSIFICATION	1.1932500552287337E-8	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999986979565895	WITHOUT_CLASSIFICATION	1.3020434105302324E-6	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999994694805383	WITHOUT_CLASSIFICATION	5.305194617550369E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9999887484533145	WITHOUT_CLASSIFICATION	1.125154668537846E-5	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9999826391573752	WITHOUT_CLASSIFICATION	1.736084262480962E-5	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999983705265322	WITHOUT_CLASSIFICATION	1.6294734678358795E-6	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999958788071324	WITHOUT_CLASSIFICATION	4.121192867595152E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999998814336711	WITHOUT_CLASSIFICATION	1.1856632887170887E-7	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999940742522807	WITHOUT_CLASSIFICATION	5.9257477192189596E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999927452705668	WITHOUT_CLASSIFICATION	7.2547294332495144E-6	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999952156217453	WITHOUT_CLASSIFICATION	4.784378254737693E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999998534920836	WITHOUT_CLASSIFICATION	1.4650791636397764E-7	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999885183606971	WITHOUT_CLASSIFICATION	1.1481639302844847E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999990016845932	WITHOUT_CLASSIFICATION	9.9831540673603E-7	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999991905756888	WITHOUT_CLASSIFICATION	8.094243111431671E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999972029024234	WITHOUT_CLASSIFICATION	2.79709757656813E-6	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999999881130736	WITHOUT_CLASSIFICATION	1.1886926436693058E-8	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999875792367152	WITHOUT_CLASSIFICATION	1.242076328463576E-5	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999948320810644	WITHOUT_CLASSIFICATION	5.167918935473197E-6	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999989628363593	WITHOUT_CLASSIFICATION	1.0371636407477705E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999901797612439	WITHOUT_CLASSIFICATION	9.820238756058866E-6	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.999999734753848	WITHOUT_CLASSIFICATION	2.652461520867341E-7	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999999280110494	WITHOUT_CLASSIFICATION	7.198895050349539E-8	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999998331399883	WITHOUT_CLASSIFICATION	1.6686001164685925E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999998331399883	WITHOUT_CLASSIFICATION	1.6686001164685925E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999992093679178	WITHOUT_CLASSIFICATION	7.906320821254359E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999992093679178	WITHOUT_CLASSIFICATION	7.906320821254359E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999992518671436	WITHOUT_CLASSIFICATION	7.481328565530449E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999992518671436	WITHOUT_CLASSIFICATION	7.481328565530449E-7	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999989923798889	WITHOUT_CLASSIFICATION	1.0076201110842219E-6	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999996409616005	WITHOUT_CLASSIFICATION	3.590383994752481E-7	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999917680807735	WITHOUT_CLASSIFICATION	8.231919226500893E-6	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999999665535823	WITHOUT_CLASSIFICATION	3.344641781975058E-8	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999953125173386	WITHOUT_CLASSIFICATION	4.6874826612777075E-6	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999596519486214	WITHOUT_CLASSIFICATION	4.0348051378605344E-5	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999998432769301	WITHOUT_CLASSIFICATION	1.567230698740716E-7	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999982887383189	WITHOUT_CLASSIFICATION	1.7112616811111507E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999997815048949	WITHOUT_CLASSIFICATION	2.184951050602678E-7	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999993192460781	WITHOUT_CLASSIFICATION	6.807539219204775E-7	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999404438730384	WITHOUT_CLASSIFICATION	5.95561269616765E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999978913191833	WITHOUT_CLASSIFICATION	2.1086808166575374E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999712570876785	WITHOUT_CLASSIFICATION	2.8742912321470564E-5	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.999968468680899	WITHOUT_CLASSIFICATION	3.153131910093948E-5	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999994940576573	WITHOUT_CLASSIFICATION	5.059423427357853E-7	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999990746012366	WITHOUT_CLASSIFICATION	9.253987633455662E-7	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999998436503356	WITHOUT_CLASSIFICATION	1.5634966454028152E-7	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999988330098767	WITHOUT_CLASSIFICATION	1.1669901232618756E-6	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999998987215142	WITHOUT_CLASSIFICATION	1.0127848577820006E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999990121675743	WITHOUT_CLASSIFICATION	9.878324257935042E-7	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999985725549206	WITHOUT_CLASSIFICATION	1.4274450793902254E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999428355443781	WITHOUT_CLASSIFICATION	5.7164455621752576E-5	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999974407841463	WITHOUT_CLASSIFICATION	2.5592158536185642E-6	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.99999898994374	WITHOUT_CLASSIFICATION	1.010056260034088E-6	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999997474865673	WITHOUT_CLASSIFICATION	2.525134328102304E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999998529729869	WITHOUT_CLASSIFICATION	1.4702701317091585E-7	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999978103626929	WITHOUT_CLASSIFICATION	2.189637307099307E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999395025986	WITHOUT_CLASSIFICATION	6.049740139375389E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999395025986	WITHOUT_CLASSIFICATION	6.049740139375389E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999395025986	WITHOUT_CLASSIFICATION	6.049740139375389E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999954281186	WITHOUT_CLASSIFICATION	4.571881433853262E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999954281186	WITHOUT_CLASSIFICATION	4.571881433853262E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999965045967656	WITHOUT_CLASSIFICATION	3.4954032344504967E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999965045967656	WITHOUT_CLASSIFICATION	3.4954032344504967E-6	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999999548329809	WITHOUT_CLASSIFICATION	4.516701903837027E-8	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.8325683758045451	WITHOUT_CLASSIFICATION	0.16743162419545493	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999996944366765	WITHOUT_CLASSIFICATION	3.055633235292646E-7	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999986278864064	WITHOUT_CLASSIFICATION	1.3721135936364765E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999395025986	WITHOUT_CLASSIFICATION	6.049740139375389E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999395025986	WITHOUT_CLASSIFICATION	6.049740139375389E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999395025986	WITHOUT_CLASSIFICATION	6.049740139375389E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999954281186	WITHOUT_CLASSIFICATION	4.571881433853262E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999954281186	WITHOUT_CLASSIFICATION	4.571881433853262E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999954281186	WITHOUT_CLASSIFICATION	4.571881433853262E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999965045967656	WITHOUT_CLASSIFICATION	3.4954032344504967E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999965045967656	WITHOUT_CLASSIFICATION	3.4954032344504967E-6	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999999365549608	WITHOUT_CLASSIFICATION	6.344503929360444E-8	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999997712928027	WITHOUT_CLASSIFICATION	2.2870719726303093E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999355660338	WITHOUT_CLASSIFICATION	6.443396622666091E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999355660338	WITHOUT_CLASSIFICATION	6.443396622666091E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999355660338	WITHOUT_CLASSIFICATION	6.443396622666091E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999355660338	WITHOUT_CLASSIFICATION	6.443396622666091E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999355660338	WITHOUT_CLASSIFICATION	6.443396622666091E-8	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999977982049166	WITHOUT_CLASSIFICATION	2.201795083482821E-6	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999950619110456	WITHOUT_CLASSIFICATION	4.9380889543848585E-6	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9999408360862521	WITHOUT_CLASSIFICATION	5.9163913747856306E-5	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.99999725665683	WITHOUT_CLASSIFICATION	2.743343169920513E-6	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999978698987827	WITHOUT_CLASSIFICATION	2.130101217226562E-6	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999979450733583	WITHOUT_CLASSIFICATION	2.0549266418491103E-6	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999982811799246	WITHOUT_CLASSIFICATION	1.7188200754804968E-6	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999990774264925	WITHOUT_CLASSIFICATION	9.225735075008142E-7	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999993693405963	WITHOUT_CLASSIFICATION	6.306594036450287E-7	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999985134242326	WITHOUT_CLASSIFICATION	1.486575767356358E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.999983412507924	WITHOUT_CLASSIFICATION	1.6587492075986257E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999490521526269	WITHOUT_CLASSIFICATION	5.094784737320281E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9993514662789974	WITHOUT_CLASSIFICATION	6.485337210026692E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999965063686593	WITHOUT_CLASSIFICATION	3.4936313405726464E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999682117031239	WITHOUT_CLASSIFICATION	3.1788296876071945E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999938588892617	WITHOUT_CLASSIFICATION	6.141110738284333E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999938588892617	WITHOUT_CLASSIFICATION	6.141110738284333E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999938588892617	WITHOUT_CLASSIFICATION	6.141110738284333E-6	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9997529556246044	WITHOUT_CLASSIFICATION	2.470443753955751E-4	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9997529342611677	WITHOUT_CLASSIFICATION	2.470657388322728E-4	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999984764775744	WITHOUT_CLASSIFICATION	1.523522425588613E-6	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999983704835208	WITHOUT_CLASSIFICATION	1.6295164793054517E-6	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999992992038638	WITHOUT_CLASSIFICATION	7.007961361863969E-7	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999970406490187	WITHOUT_CLASSIFICATION	2.959350981186532E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999959875301444	WITHOUT_CLASSIFICATION	4.0124698556082405E-6	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999995452183036	WITHOUT_CLASSIFICATION	4.5478169641972877E-7	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999992388006116	WITHOUT_CLASSIFICATION	7.611993885153392E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.999973568584561	WITHOUT_CLASSIFICATION	2.643141543896976E-5	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999622548737589	WITHOUT_CLASSIFICATION	3.77451262412389E-5	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.999996646308974	WITHOUT_CLASSIFICATION	3.3536910259544745E-6	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999988623233407	WITHOUT_CLASSIFICATION	1.1376766593770576E-6	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999707429548	WITHOUT_CLASSIFICATION	2.925704515272679E-8	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999999308123608	WITHOUT_CLASSIFICATION	6.918763915907849E-8	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999957815286882	WITHOUT_CLASSIFICATION	4.218471311757735E-6	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999966925317371	WITHOUT_CLASSIFICATION	3.3074682628658895E-6	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999998628336734	WITHOUT_CLASSIFICATION	1.3716632665630208E-7	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999991500184165	WITHOUT_CLASSIFICATION	8.499815835105507E-7	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999712951525369	WITHOUT_CLASSIFICATION	2.8704847463020263E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9999949448245588	WITHOUT_CLASSIFICATION	5.055175441277806E-6	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999797931355032	WITHOUT_CLASSIFICATION	2.0206864496675295E-5	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9979349556055495	WITHOUT_CLASSIFICATION	0.0020650443944506135	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999991503071491	WITHOUT_CLASSIFICATION	8.49692850767731E-7	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999910649738568	WITHOUT_CLASSIFICATION	8.935026143136499E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999943124570898	WITHOUT_CLASSIFICATION	5.687542910152236E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999946997007441	WITHOUT_CLASSIFICATION	5.300299255890617E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999966590715738	WITHOUT_CLASSIFICATION	3.3409284261956244E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999732136043723	WITHOUT_CLASSIFICATION	2.678639562770692E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9998923737177621	WITHOUT_CLASSIFICATION	1.0762628223793111E-4	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9998676097323795	WITHOUT_CLASSIFICATION	1.3239026762043495E-4	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999042714764288	WITHOUT_CLASSIFICATION	9.57285235712926E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9998485703818211	WITHOUT_CLASSIFICATION	1.5142961817886E-4	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9998616146957581	WITHOUT_CLASSIFICATION	1.3838530424183917E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9997805659541269	WITHOUT_CLASSIFICATION	2.1943404587315156E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9998793124850635	WITHOUT_CLASSIFICATION	1.2068751493648366E-4	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999757876785238	WITHOUT_CLASSIFICATION	2.421232147623964E-5	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999870202650084	WITHOUT_CLASSIFICATION	1.2979734991536953E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999933045738	WITHOUT_CLASSIFICATION	6.695426232876576E-9	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9999038472889689	WITHOUT_CLASSIFICATION	9.615271103111338E-5	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999993743617556	WITHOUT_CLASSIFICATION	6.256382444611784E-7	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9999924011452496	WITHOUT_CLASSIFICATION	7.598854750552712E-6	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999926796079279	WITHOUT_CLASSIFICATION	7.320392072101515E-6	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999980456322667	WITHOUT_CLASSIFICATION	1.9543677332539147E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999985825996548	WITHOUT_CLASSIFICATION	1.417400345293425E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999175166527889	WITHOUT_CLASSIFICATION	8.248334721108565E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999827275779	WITHOUT_CLASSIFICATION	1.7272422100034768E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999827275779	WITHOUT_CLASSIFICATION	1.7272422100034768E-5	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999882797173545	WITHOUT_CLASSIFICATION	1.1720282645495004E-5	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999984841366513	WITHOUT_CLASSIFICATION	1.5158633488097343E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999381370184444	WITHOUT_CLASSIFICATION	6.186298155564033E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9994731095112032	WITHOUT_CLASSIFICATION	5.268904887967592E-4	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999995891941885	WITHOUT_CLASSIFICATION	4.1080581152377225E-7	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999999615112323	WITHOUT_CLASSIFICATION	3.848876779882385E-8	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999991874486798	WITHOUT_CLASSIFICATION	8.125513202633252E-7	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999850782587	WITHOUT_CLASSIFICATION	1.4921741304864393E-8	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999992044648739	WITHOUT_CLASSIFICATION	7.955351262557795E-7	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999981169515266	WITHOUT_CLASSIFICATION	1.883048473396501E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999995148178763	WITHOUT_CLASSIFICATION	4.851821236240027E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999995148178763	WITHOUT_CLASSIFICATION	4.851821236240027E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999995148178763	WITHOUT_CLASSIFICATION	4.851821236240027E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999995148178763	WITHOUT_CLASSIFICATION	4.851821236240027E-7	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.99999503997788	WITHOUT_CLASSIFICATION	4.960022120031468E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999990906244894	WITHOUT_CLASSIFICATION	9.093755105028873E-7	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999996280556586	WITHOUT_CLASSIFICATION	3.719443414733256E-7	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999990840763964	WITHOUT_CLASSIFICATION	9.15923603668731E-7	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9982723931280516	WITHOUT_CLASSIFICATION	0.0017276068719483991	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9999998598402172	WITHOUT_CLASSIFICATION	1.401597828171132E-7	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.999999264873302	WITHOUT_CLASSIFICATION	7.351266980504048E-7	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999901226313301	WITHOUT_CLASSIFICATION	9.877368669792647E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999901226313301	WITHOUT_CLASSIFICATION	9.877368669792647E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999976107891776	WITHOUT_CLASSIFICATION	2.3892108224954317E-6	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999995440997334	WITHOUT_CLASSIFICATION	4.559002666794925E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.99999763360249	WITHOUT_CLASSIFICATION	2.366397509933668E-6	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999814937958397	WITHOUT_CLASSIFICATION	1.8506204160311004E-5	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999814937958397	WITHOUT_CLASSIFICATION	1.8506204160311004E-5	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9999993535182939	WITHOUT_CLASSIFICATION	6.464817060327858E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999999110299889	WITHOUT_CLASSIFICATION	8.897001107076203E-8	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999999110299889	WITHOUT_CLASSIFICATION	8.897001107076203E-8	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9999972453180748	WITHOUT_CLASSIFICATION	2.75468192520936E-6	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999999773025883	WITHOUT_CLASSIFICATION	2.2697411740681244E-8	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999999794189297	WITHOUT_CLASSIFICATION	2.058107035179349E-8	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9999597579349054	WITHOUT_CLASSIFICATION	4.024206509460404E-5	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9998209619705805	WITHOUT_CLASSIFICATION	1.7903802941947273E-4	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999993003570383	WITHOUT_CLASSIFICATION	6.996429616655481E-7	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9996887722618328	WITHOUT_CLASSIFICATION	3.112277381671402E-4	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999980393717696	WITHOUT_CLASSIFICATION	1.960628230432601E-6	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999999959602018	WITHOUT_CLASSIFICATION	4.039798225056455E-9	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999095998303293	WITHOUT_CLASSIFICATION	9.040016967065074E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999843482782215	WITHOUT_CLASSIFICATION	1.565172177848936E-5	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999976405541432	WITHOUT_CLASSIFICATION	2.3594458567774536E-6	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.999890491256965	WITHOUT_CLASSIFICATION	1.0950874303499022E-4	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999419414520099	WITHOUT_CLASSIFICATION	5.8058547989997535E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999887736282	WITHOUT_CLASSIFICATION	1.122637179987659E-5	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999852014592211	WITHOUT_CLASSIFICATION	1.4798540778923662E-5	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999971071270574	WITHOUT_CLASSIFICATION	2.892872942708683E-6	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999989765269197	WITHOUT_CLASSIFICATION	1.0234730802865491E-6	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999993335543066	WITHOUT_CLASSIFICATION	6.664456933062358E-7	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.999246967113286	WITHOUT_CLASSIFICATION	7.530328867141019E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9999964759652531	WITHOUT_CLASSIFICATION	3.5240347468534417E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999955065496424	WITHOUT_CLASSIFICATION	4.493450357613585E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999955596259262	WITHOUT_CLASSIFICATION	4.440374073879261E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9995187499687652	WITHOUT_CLASSIFICATION	4.8125003123477574E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999849879709741	WITHOUT_CLASSIFICATION	1.5012029025929578E-5	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9998851328941363	WITHOUT_CLASSIFICATION	1.1486710586380126E-4	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999978483093921	WITHOUT_CLASSIFICATION	2.151690607875408E-6	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999580367652103	WITHOUT_CLASSIFICATION	4.1963234789606016E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999976204547253	WITHOUT_CLASSIFICATION	2.3795452747943873E-6	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999860788646425	WITHOUT_CLASSIFICATION	1.3921135357395867E-5	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999475616690313	WITHOUT_CLASSIFICATION	5.243833096877574E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999990973476657	WITHOUT_CLASSIFICATION	9.026523341767474E-7	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.6660075064173404	WITHOUT_CLASSIFICATION	0.33399249358265953	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999665245063107	WITHOUT_CLASSIFICATION	3.3475493689341985E-5	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999999953008086	WITHOUT_CLASSIFICATION	4.699191324491893E-9	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9998842989763947	WITHOUT_CLASSIFICATION	1.1570102360525432E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999840263794998	WITHOUT_CLASSIFICATION	1.597362050018287E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999994376207624	WITHOUT_CLASSIFICATION	5.623792375716357E-7	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999998070723475	WITHOUT_CLASSIFICATION	1.9292765260166174E-7	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9998842989763947	WITHOUT_CLASSIFICATION	1.1570102360525432E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999840263794998	WITHOUT_CLASSIFICATION	1.597362050018287E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.999993883997056	WITHOUT_CLASSIFICATION	6.1160029440230385E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999971334708586	WITHOUT_CLASSIFICATION	2.8665291414198786E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999971334708586	WITHOUT_CLASSIFICATION	2.8665291414198786E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999990094055907	WITHOUT_CLASSIFICATION	9.905944093045054E-7	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999957516089261	WITHOUT_CLASSIFICATION	4.248391073929283E-6	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999951616489956	WITHOUT_CLASSIFICATION	4.838351004415613E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999975574286014	WITHOUT_CLASSIFICATION	2.442571398538854E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9997467093668798	WITHOUT_CLASSIFICATION	2.5329063312017487E-4	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9992418824573914	WITHOUT_CLASSIFICATION	7.581175426085998E-4	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999989848122628	WITHOUT_CLASSIFICATION	1.0151877371061245E-6	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999998113164641	WITHOUT_CLASSIFICATION	1.8868353585896775E-7	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999952114175549	WITHOUT_CLASSIFICATION	4.788582445180263E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999863097582564	WITHOUT_CLASSIFICATION	1.3690241743555932E-5	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999945856235388	WITHOUT_CLASSIFICATION	5.414376461175719E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999995264835556	WITHOUT_CLASSIFICATION	4.7351644427875837E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999909100100419	WITHOUT_CLASSIFICATION	9.089989958012982E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999994400389576	WITHOUT_CLASSIFICATION	5.599610423960538E-7	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999994400389576	WITHOUT_CLASSIFICATION	5.599610423960538E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999895315778551	WITHOUT_CLASSIFICATION	1.0468422144990702E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999895315778551	WITHOUT_CLASSIFICATION	1.0468422144990702E-5	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999995946844399	WITHOUT_CLASSIFICATION	4.0531556009540933E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999983324736877	WITHOUT_CLASSIFICATION	1.6675263122484342E-6	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999976753343368	WITHOUT_CLASSIFICATION	2.324665663115017E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999933638097144	WITHOUT_CLASSIFICATION	6.636190285676178E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999994191934913	WITHOUT_CLASSIFICATION	5.808065086038712E-7	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999990880047952	WITHOUT_CLASSIFICATION	9.119952047534262E-7	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999951616489956	WITHOUT_CLASSIFICATION	4.838351004415613E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999975574286014	WITHOUT_CLASSIFICATION	2.442571398538854E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999952114175549	WITHOUT_CLASSIFICATION	4.788582445180263E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999863097582564	WITHOUT_CLASSIFICATION	1.3690241743555932E-5	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999997392538366	WITHOUT_CLASSIFICATION	2.60746163373312E-7	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999987609138131	WITHOUT_CLASSIFICATION	1.2390861868624032E-6	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999902556490843	WITHOUT_CLASSIFICATION	9.744350915664682E-6	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999982908614564	WITHOUT_CLASSIFICATION	1.7091385435854525E-6	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999999075022196	WITHOUT_CLASSIFICATION	9.249778044768884E-8	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999736400999089	WITHOUT_CLASSIFICATION	2.635990009117283E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9999685786307493	WITHOUT_CLASSIFICATION	3.1421369250747853E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999968496941816	WITHOUT_CLASSIFICATION	3.150305818421401E-6	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999922991611049	WITHOUT_CLASSIFICATION	7.700838895013528E-6	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999993124367595	WITHOUT_CLASSIFICATION	6.875632404591199E-7	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.999999975780493	WITHOUT_CLASSIFICATION	2.421950698332992E-8	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999997113033257	WITHOUT_CLASSIFICATION	2.8869667442751494E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999965094522713	WITHOUT_CLASSIFICATION	3.490547728731459E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9998159031606062	WITHOUT_CLASSIFICATION	1.8409683939380275E-4	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.999999977869065	WITHOUT_CLASSIFICATION	2.2130935048448045E-8	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999288203105348	WITHOUT_CLASSIFICATION	7.117968946517974E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999967293442116	WITHOUT_CLASSIFICATION	3.2706557885322166E-6	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999945939712004	WITHOUT_CLASSIFICATION	5.406028799708952E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999960605776822	WITHOUT_CLASSIFICATION	3.939422317787245E-6	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999998818745605	WITHOUT_CLASSIFICATION	1.1812543949934219E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.999999880751266	WITHOUT_CLASSIFICATION	1.192487340018971E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.999999880751266	WITHOUT_CLASSIFICATION	1.192487340018971E-7	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999900632246561	WITHOUT_CLASSIFICATION	9.93677534393405E-6	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9998689825511009	WITHOUT_CLASSIFICATION	1.310174488990472E-4	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999712521637125	WITHOUT_CLASSIFICATION	2.8747836287511498E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999994960156642	WITHOUT_CLASSIFICATION	5.03984335744022E-7	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999994960156642	WITHOUT_CLASSIFICATION	5.03984335744022E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999902556490843	WITHOUT_CLASSIFICATION	9.744350915664682E-6	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999969547171518	WITHOUT_CLASSIFICATION	3.045282848204213E-6	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.999999804733522	WITHOUT_CLASSIFICATION	1.9526647805996507E-7	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999998415051581	WITHOUT_CLASSIFICATION	1.584948419466707E-7	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999997018157615	WITHOUT_CLASSIFICATION	2.9818423848681615E-7	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999995975588389	WITHOUT_CLASSIFICATION	4.024411609593392E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999867532494154	WITHOUT_CLASSIFICATION	1.3246750584602821E-5	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999990301073358	WITHOUT_CLASSIFICATION	9.698926642183806E-7	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999998125592884	WITHOUT_CLASSIFICATION	1.874407116532451E-7	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.999998264164083	WITHOUT_CLASSIFICATION	1.7358359170345853E-6	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999998863620853	WITHOUT_CLASSIFICATION	1.1363791472478954E-7	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999702885423202	WITHOUT_CLASSIFICATION	2.971145767987575E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999998636720209	WITHOUT_CLASSIFICATION	1.3632797907898527E-7	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999998556712186	WITHOUT_CLASSIFICATION	1.4432878139795106E-7	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999975405080891	WITHOUT_CLASSIFICATION	2.4594919108945346E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999996014695908	WITHOUT_CLASSIFICATION	3.985304091930252E-7	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999576220076186	WITHOUT_CLASSIFICATION	4.237799238135456E-5	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999996946386086	WITHOUT_CLASSIFICATION	3.053613914398992E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999870214576672	WITHOUT_CLASSIFICATION	1.297854233287025E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999999907860849	WITHOUT_CLASSIFICATION	9.21391500834926E-9	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999999996436	WITHOUT_CLASSIFICATION	3.563324137114923E-13	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999993890384653	WITHOUT_CLASSIFICATION	6.10961534685297E-7	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999991145020046	WITHOUT_CLASSIFICATION	8.854979952619986E-7	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999996450672127	WITHOUT_CLASSIFICATION	3.549327873284788E-7	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999831086077	WITHOUT_CLASSIFICATION	1.6891392253129432E-8	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999956339383299	WITHOUT_CLASSIFICATION	4.366061670161717E-6	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999984406452658	WITHOUT_CLASSIFICATION	1.5593547341942884E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.999991160205473	WITHOUT_CLASSIFICATION	8.839794527167123E-6	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999999985858683	WITHOUT_CLASSIFICATION	1.414131719403449E-9	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999998155895302	WITHOUT_CLASSIFICATION	1.8441046988778063E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998802552801	WITHOUT_CLASSIFICATION	1.1974471990193003E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998802552801	WITHOUT_CLASSIFICATION	1.1974471990193003E-7	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999967023131908	WITHOUT_CLASSIFICATION	3.297686809207625E-6	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.999999771817423	WITHOUT_CLASSIFICATION	2.281825768420859E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.999999771817423	WITHOUT_CLASSIFICATION	2.281825768420859E-7	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999998776499771	WITHOUT_CLASSIFICATION	1.223500228645996E-7	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999998776499771	WITHOUT_CLASSIFICATION	1.223500228645996E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999968591765	WITHOUT_CLASSIFICATION	3.14082350065901E-7	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999994414097635	WITHOUT_CLASSIFICATION	5.585902364964099E-7	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.999999871610604	WITHOUT_CLASSIFICATION	1.2838939595228582E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999995514763936	WITHOUT_CLASSIFICATION	4.485236062790523E-7	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999997343726441	WITHOUT_CLASSIFICATION	2.6562735580048506E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999898003845059	WITHOUT_CLASSIFICATION	1.019961549413418E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999898003845059	WITHOUT_CLASSIFICATION	1.019961549413418E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999831086077	WITHOUT_CLASSIFICATION	1.6891392253129432E-8	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999831086077	WITHOUT_CLASSIFICATION	1.6891392253129432E-8	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999831086077	WITHOUT_CLASSIFICATION	1.6891392253129432E-8	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999956339383299	WITHOUT_CLASSIFICATION	4.366061670161717E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998802552801	WITHOUT_CLASSIFICATION	1.1974471990193003E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998802552801	WITHOUT_CLASSIFICATION	1.1974471990193003E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998802552801	WITHOUT_CLASSIFICATION	1.1974471990193003E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999968591765	WITHOUT_CLASSIFICATION	3.14082350065901E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999968591765	WITHOUT_CLASSIFICATION	3.14082350065901E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999968591765	WITHOUT_CLASSIFICATION	3.14082350065901E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999995514763936	WITHOUT_CLASSIFICATION	4.485236062790523E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999995514763936	WITHOUT_CLASSIFICATION	4.485236062790523E-7	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999998109943723	WITHOUT_CLASSIFICATION	1.890056277720719E-7	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999999963695648	WITHOUT_CLASSIFICATION	3.630435098345877E-9	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999908388949	WITHOUT_CLASSIFICATION	9.161105064746957E-9	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.9838776325347486	DEFECT	0.01612236746525137	WITHOUT_CLASSIFICATION
// no digits, error	WITHOUT_CLASSIFICATION	0.9999915550038347	WITHOUT_CLASSIFICATION	8.444996165202374E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999987687613926	WITHOUT_CLASSIFICATION	1.2312386074953715E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999987687613926	WITHOUT_CLASSIFICATION	1.2312386074953715E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.999998184565429	WITHOUT_CLASSIFICATION	1.8154345710583264E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999867532494154	WITHOUT_CLASSIFICATION	1.3246750584602821E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999867532494154	WITHOUT_CLASSIFICATION	1.3246750584602821E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999867532494154	WITHOUT_CLASSIFICATION	1.3246750584602821E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999867532494154	WITHOUT_CLASSIFICATION	1.3246750584602821E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999867532494154	WITHOUT_CLASSIFICATION	1.3246750584602821E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999979059405341	WITHOUT_CLASSIFICATION	2.09405946594843E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999979059405341	WITHOUT_CLASSIFICATION	2.09405946594843E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999979059405341	WITHOUT_CLASSIFICATION	2.09405946594843E-6	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999996641314458	WITHOUT_CLASSIFICATION	3.3586855420852823E-7	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999988886442611	WITHOUT_CLASSIFICATION	1.1113557388573206E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999956339383299	WITHOUT_CLASSIFICATION	4.366061670161717E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999968591765	WITHOUT_CLASSIFICATION	3.14082350065901E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.99999968591765	WITHOUT_CLASSIFICATION	3.14082350065901E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999867532494154	WITHOUT_CLASSIFICATION	1.3246750584602821E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999867532494154	WITHOUT_CLASSIFICATION	1.3246750584602821E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999979059405341	WITHOUT_CLASSIFICATION	2.09405946594843E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.999998184565429	WITHOUT_CLASSIFICATION	1.8154345710583264E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999997284078768	WITHOUT_CLASSIFICATION	2.71592123251276E-7	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.999999624075788	WITHOUT_CLASSIFICATION	3.759242119382766E-7	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.999999085852931	WITHOUT_CLASSIFICATION	9.141470689614543E-7	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999905539564784	WITHOUT_CLASSIFICATION	9.446043521675043E-6	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999990674027873	WITHOUT_CLASSIFICATION	9.325972126461512E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999989782483022	WITHOUT_CLASSIFICATION	1.0217516977610313E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999987730187016	WITHOUT_CLASSIFICATION	1.2269812984009232E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999891597826104	WITHOUT_CLASSIFICATION	1.0840217389533981E-5	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.999999221281975	WITHOUT_CLASSIFICATION	7.787180250101355E-7	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999999370641406	WITHOUT_CLASSIFICATION	6.293585935020103E-8	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999999263482713	WITHOUT_CLASSIFICATION	7.365172871269119E-8	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999999481678734	WITHOUT_CLASSIFICATION	5.1832126630215784E-8	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999984211829746	WITHOUT_CLASSIFICATION	1.5788170255371477E-6	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999999371617995	WITHOUT_CLASSIFICATION	6.283820057355312E-8	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999996594302922	WITHOUT_CLASSIFICATION	3.40569707709192E-7	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999997997359042	WITHOUT_CLASSIFICATION	2.0026409578325642E-7	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999998152741549	WITHOUT_CLASSIFICATION	1.8472584502489676E-7	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9912461099779899	WITHOUT_CLASSIFICATION	0.008753890022010071	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999841320248714	WITHOUT_CLASSIFICATION	1.586797512860218E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999996959350401	WITHOUT_CLASSIFICATION	3.0406495989229243E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999794987111847	WITHOUT_CLASSIFICATION	2.050128881519882E-5	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999949423078	WITHOUT_CLASSIFICATION	5.05769209527234E-9	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999865953176	WITHOUT_CLASSIFICATION	1.3404682312159396E-8	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999997794851265	WITHOUT_CLASSIFICATION	2.2051487351884723E-7	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999925780041712	WITHOUT_CLASSIFICATION	7.421995828819514E-6	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999998150871957	WITHOUT_CLASSIFICATION	1.8491280432605476E-7	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999966691083221	WITHOUT_CLASSIFICATION	3.330891678012255E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999993644035476	WITHOUT_CLASSIFICATION	6.35596452401741E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999998023830834	WITHOUT_CLASSIFICATION	1.9761691665245492E-7	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999995777079372	WITHOUT_CLASSIFICATION	4.222920627762303E-7	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.999998973681447	WITHOUT_CLASSIFICATION	1.0263185529573556E-6	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.99999965133371	WITHOUT_CLASSIFICATION	3.4866628993043954E-7	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999994167681665	WITHOUT_CLASSIFICATION	5.832318334779471E-7	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.99999981474928	WITHOUT_CLASSIFICATION	1.8525071995615192E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999997284078768	WITHOUT_CLASSIFICATION	2.71592123251276E-7	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.999999848718557	WITHOUT_CLASSIFICATION	1.5128144311933774E-7	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999984903701509	WITHOUT_CLASSIFICATION	1.5096298491437242E-6	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9996951696585687	WITHOUT_CLASSIFICATION	3.048303414312755E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999990679192027	WITHOUT_CLASSIFICATION	9.32080797333777E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999990679192027	WITHOUT_CLASSIFICATION	9.32080797333777E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999930692917518	WITHOUT_CLASSIFICATION	6.930708248148274E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999930692917518	WITHOUT_CLASSIFICATION	6.930708248148274E-6	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.999953916766636	WITHOUT_CLASSIFICATION	4.608323336389844E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999929511901055	WITHOUT_CLASSIFICATION	7.048809894585204E-6	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999998648901636	WITHOUT_CLASSIFICATION	1.3510983646511017E-7	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999999301058995	WITHOUT_CLASSIFICATION	6.989410048622123E-8	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999995813971944	WITHOUT_CLASSIFICATION	4.1860280566757373E-7	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999996716291141	WITHOUT_CLASSIFICATION	3.283708858960437E-7	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999873678842699	WITHOUT_CLASSIFICATION	1.2632115729990851E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.999999699893261	WITHOUT_CLASSIFICATION	3.001067389660569E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999996630483459	WITHOUT_CLASSIFICATION	3.3695165414389303E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999999357052084	WITHOUT_CLASSIFICATION	6.429479160915625E-8	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999995043407591	WITHOUT_CLASSIFICATION	4.956592409962397E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999999719130185	WITHOUT_CLASSIFICATION	2.8086981519674618E-8	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999999719130185	WITHOUT_CLASSIFICATION	2.8086981519674618E-8	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999995497124443	WITHOUT_CLASSIFICATION	4.5028755559522383E-7	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999998610607357	WITHOUT_CLASSIFICATION	1.3893926427066263E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.999999501524104	WITHOUT_CLASSIFICATION	4.984758960717414E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.999999501524104	WITHOUT_CLASSIFICATION	4.984758960717414E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999818259887927	WITHOUT_CLASSIFICATION	1.8174011207229395E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999978219691043	WITHOUT_CLASSIFICATION	2.178030895713584E-6	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9996649955692549	WITHOUT_CLASSIFICATION	3.350044307450562E-4	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999984844519618	WITHOUT_CLASSIFICATION	1.515548038232987E-6	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999996820869199	WITHOUT_CLASSIFICATION	3.1791308003750775E-7	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999961784696099	WITHOUT_CLASSIFICATION	3.821530390113988E-6	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999992132434532	WITHOUT_CLASSIFICATION	7.867565467346301E-7	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999999752057643	WITHOUT_CLASSIFICATION	2.4794235665517108E-8	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9997505922751582	WITHOUT_CLASSIFICATION	2.4940772484187526E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.999999543560548	WITHOUT_CLASSIFICATION	4.564394520058536E-7	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999996898836262	WITHOUT_CLASSIFICATION	3.101163737874104E-7	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999997310574785	WITHOUT_CLASSIFICATION	2.689425215360867E-7	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999999817039789	WITHOUT_CLASSIFICATION	1.8296021137335114E-8	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999991056336279	WITHOUT_CLASSIFICATION	8.943663721418195E-7	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999964321369521	WITHOUT_CLASSIFICATION	3.567863047859585E-6	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9999993675154635	WITHOUT_CLASSIFICATION	6.324845365770958E-7	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999895076794316	WITHOUT_CLASSIFICATION	1.0492320568369168E-5	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999998015906965	WITHOUT_CLASSIFICATION	1.9840930361283022E-7	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999674495562367	WITHOUT_CLASSIFICATION	3.255044376329203E-5	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999993026939377	WITHOUT_CLASSIFICATION	6.973060623691903E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.7798568928997822	WITHOUT_CLASSIFICATION	0.22014310710021773	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999996723592427	WITHOUT_CLASSIFICATION	3.276407573116775E-7	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999997047293423	WITHOUT_CLASSIFICATION	2.9527065771379876E-7	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999999100368285	WITHOUT_CLASSIFICATION	8.996317146682709E-8	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999777554418868	WITHOUT_CLASSIFICATION	2.2244558113172403E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999466232982757	WITHOUT_CLASSIFICATION	5.33767017244313E-5	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.999978072329687	WITHOUT_CLASSIFICATION	2.1927670312999563E-5	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999939391054427	WITHOUT_CLASSIFICATION	6.060894557354473E-6	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999681558639726	WITHOUT_CLASSIFICATION	3.18441360274006E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999993869970848	WITHOUT_CLASSIFICATION	6.130029153068559E-7	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999988845867527	WITHOUT_CLASSIFICATION	1.1154132472682651E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.999999825148367	WITHOUT_CLASSIFICATION	1.7485163302113895E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999994979438368	WITHOUT_CLASSIFICATION	5.020561633302338E-7	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999856072475393	WITHOUT_CLASSIFICATION	1.4392752460612938E-5	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999856072475393	WITHOUT_CLASSIFICATION	1.4392752460612938E-5	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999992938615093	WITHOUT_CLASSIFICATION	7.061384906036662E-7	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999908936571791	WITHOUT_CLASSIFICATION	9.106342821036725E-6	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999993261032495	WITHOUT_CLASSIFICATION	6.738967505671183E-7	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999868658485401	WITHOUT_CLASSIFICATION	1.3134151459818325E-5	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9998892791437248	WITHOUT_CLASSIFICATION	1.1072085627514883E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999997587302438	WITHOUT_CLASSIFICATION	2.4126975619408003E-7	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9998579644450528	WITHOUT_CLASSIFICATION	1.420355549472112E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9994256371791892	WITHOUT_CLASSIFICATION	5.743628208108149E-4	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9994631377360039	WITHOUT_CLASSIFICATION	5.36862263996194E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999216099455281	WITHOUT_CLASSIFICATION	7.839005447178353E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999743533206037	WITHOUT_CLASSIFICATION	2.5646679396294114E-5	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9987870341053482	WITHOUT_CLASSIFICATION	0.001212965894651843	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999984297444128	WITHOUT_CLASSIFICATION	1.5702555872663596E-6	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999684454183665	WITHOUT_CLASSIFICATION	3.155458163354462E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999999878777838	WITHOUT_CLASSIFICATION	1.2122216210018273E-8	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999998812486042	WITHOUT_CLASSIFICATION	1.1875139588940944E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999997119458018	WITHOUT_CLASSIFICATION	2.880541981843124E-7	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999973660075712	WITHOUT_CLASSIFICATION	2.6339924288551113E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999995932838466	WITHOUT_CLASSIFICATION	4.0671615348078866E-7	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999995378250118	WITHOUT_CLASSIFICATION	4.6217498811676927E-7	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999999965517934	WITHOUT_CLASSIFICATION	3.4482066554312536E-9	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.999999792128059	WITHOUT_CLASSIFICATION	2.078719410340076E-7	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999998842535317	WITHOUT_CLASSIFICATION	1.1574646828370646E-7	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999953839518737	WITHOUT_CLASSIFICATION	4.616048126230477E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999997726712462	WITHOUT_CLASSIFICATION	2.2732875373366062E-7	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9998642842651434	WITHOUT_CLASSIFICATION	1.3571573485669924E-4	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999983928788627	WITHOUT_CLASSIFICATION	1.607121137277372E-6	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999993757572182	WITHOUT_CLASSIFICATION	6.242427818474536E-7	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9992049651386125	WITHOUT_CLASSIFICATION	7.950348613875608E-4	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9999859298821818	WITHOUT_CLASSIFICATION	1.4070117818127437E-5	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999998548061424	WITHOUT_CLASSIFICATION	1.4519385753345477E-7	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999999553476744	WITHOUT_CLASSIFICATION	4.4652325582321807E-8	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999992772341272	WITHOUT_CLASSIFICATION	7.227658728658727E-7	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999860524071873	WITHOUT_CLASSIFICATION	1.3947592812736234E-5	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999966726414415	WITHOUT_CLASSIFICATION	3.3273585585126336E-6	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999876895593539	WITHOUT_CLASSIFICATION	1.2310440646115896E-5	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999785218703547	WITHOUT_CLASSIFICATION	2.1478129645287815E-5	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999992916937704	WITHOUT_CLASSIFICATION	7.083062295602724E-7	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999995545952298	WITHOUT_CLASSIFICATION	4.454047701074267E-7	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999999618613288	WITHOUT_CLASSIFICATION	3.8138671237661185E-8	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999998155581189	WITHOUT_CLASSIFICATION	1.8444188107827132E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.999998465352337	WITHOUT_CLASSIFICATION	1.534647662927634E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.999998465352337	WITHOUT_CLASSIFICATION	1.534647662927634E-6	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999978403319556	WITHOUT_CLASSIFICATION	2.1596680444202147E-6	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999999396833994	WITHOUT_CLASSIFICATION	6.03166005838203E-8	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999974667025775	WITHOUT_CLASSIFICATION	2.533297422606441E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.999991224490405	WITHOUT_CLASSIFICATION	8.775509595031823E-6	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999997540640839	WITHOUT_CLASSIFICATION	2.459359160779002E-7	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999842854028704	WITHOUT_CLASSIFICATION	1.5714597129600295E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996398651704	WITHOUT_CLASSIFICATION	3.6013482959243494E-7	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9946771459122958	WITHOUT_CLASSIFICATION	0.00532285408770423	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999994443725508	WITHOUT_CLASSIFICATION	5.556274491333261E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999995229083939	WITHOUT_CLASSIFICATION	4.770916060695194E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999971853930141	WITHOUT_CLASSIFICATION	2.8146069860258085E-6	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.999998862508247	WITHOUT_CLASSIFICATION	1.1374917530032394E-6	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9994566366675168	WITHOUT_CLASSIFICATION	5.433633324831195E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999998748746807	WITHOUT_CLASSIFICATION	1.2512531935180131E-7	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999989831814597	WITHOUT_CLASSIFICATION	1.0168185402823572E-6	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9924158093226486	WITHOUT_CLASSIFICATION	0.007584190677351471	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.999886048654175	WITHOUT_CLASSIFICATION	1.1395134582503273E-4	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999974047511109	WITHOUT_CLASSIFICATION	2.595248889211221E-6	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999987356749	WITHOUT_CLASSIFICATION	1.2643251060890926E-9	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.5574520819828643	WITHOUT_CLASSIFICATION	0.4425479180171356	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999996019654908	WITHOUT_CLASSIFICATION	3.980345092409769E-7	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999959912960884	WITHOUT_CLASSIFICATION	4.008703911573279E-6	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999990488183	WITHOUT_CLASSIFICATION	9.511816722224161E-10	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999996232965337	WITHOUT_CLASSIFICATION	3.7670346633464965E-7	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9995501093597048	WITHOUT_CLASSIFICATION	4.498906402952984E-4	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999993518938486	WITHOUT_CLASSIFICATION	6.481061514928497E-7	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999986540659713	WITHOUT_CLASSIFICATION	1.3459340287712668E-6	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999969575516987	WITHOUT_CLASSIFICATION	3.0424483011573496E-6	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999133701239374	WITHOUT_CLASSIFICATION	8.662987606248441E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999960057342826	WITHOUT_CLASSIFICATION	3.994265717365965E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.999911085812523	WITHOUT_CLASSIFICATION	8.891418747698059E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999995475007998	WITHOUT_CLASSIFICATION	4.524992002226606E-7	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999960057342826	WITHOUT_CLASSIFICATION	3.994265717365965E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999963304771694	WITHOUT_CLASSIFICATION	3.6695228306272175E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999849879709741	WITHOUT_CLASSIFICATION	1.5012029025929578E-5	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.8455229116003012	DEFECT	0.15447708839969881	WITHOUT_CLASSIFICATION
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.6023209442596908	DEFECT	0.3976790557403091	WITHOUT_CLASSIFICATION
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999987250262414	WITHOUT_CLASSIFICATION	1.2749737585624601E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999355660338	WITHOUT_CLASSIFICATION	6.443396622666091E-8	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999999109880855	WITHOUT_CLASSIFICATION	8.901191448731283E-8	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9998891929068738	WITHOUT_CLASSIFICATION	1.1080709312608563E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999957516089261	WITHOUT_CLASSIFICATION	4.248391073929283E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999993026939377	WITHOUT_CLASSIFICATION	6.973060623691903E-7	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999908388949	WITHOUT_CLASSIFICATION	9.161105064746957E-9	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999786265857339	WITHOUT_CLASSIFICATION	2.1373414266107414E-5	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999998669165495	WITHOUT_CLASSIFICATION	1.330834503949849E-7	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999996147738512	WITHOUT_CLASSIFICATION	3.852261487888094E-7	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999869371017747	WITHOUT_CLASSIFICATION	1.306289822534896E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999997693740996	WITHOUT_CLASSIFICATION	2.3062590038984056E-7	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9456578901496118	WITHOUT_CLASSIFICATION	0.05434210985038822	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999997712082535	WITHOUT_CLASSIFICATION	2.28791746615258E-7	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9999789926553588	WITHOUT_CLASSIFICATION	2.1007344641229696E-5	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999973593381084	WITHOUT_CLASSIFICATION	2.6406618916676715E-6	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.999999701683818	WITHOUT_CLASSIFICATION	2.983161819812147E-7	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999947540696892	WITHOUT_CLASSIFICATION	5.245930310750933E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999993906862069	WITHOUT_CLASSIFICATION	6.09313793112502E-7	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999928736174407	WITHOUT_CLASSIFICATION	7.1263825593511155E-6	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.999994158339038	WITHOUT_CLASSIFICATION	5.841660961888591E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.999985588810281	WITHOUT_CLASSIFICATION	1.441118971897871E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999901483350292	WITHOUT_CLASSIFICATION	9.851664970819634E-6	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999880434017321	WITHOUT_CLASSIFICATION	1.195659826793214E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999142770242	WITHOUT_CLASSIFICATION	8.572297589640382E-8	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998856906429355	WITHOUT_CLASSIFICATION	1.1430935706454538E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998856906429355	WITHOUT_CLASSIFICATION	1.1430935706454538E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999978339895143	WITHOUT_CLASSIFICATION	2.1660104858414607E-6	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999992484686231	WITHOUT_CLASSIFICATION	7.515313768796589E-7	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999998151683085	WITHOUT_CLASSIFICATION	1.8483169148447012E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6192675846619485	WITHOUT_CLASSIFICATION	0.3807324153380514	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6192675846619485	WITHOUT_CLASSIFICATION	0.3807324153380514	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6192675846619485	WITHOUT_CLASSIFICATION	0.3807324153380514	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6192675846619485	WITHOUT_CLASSIFICATION	0.3807324153380514	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999991991844449	WITHOUT_CLASSIFICATION	8.00815555146251E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999997235911763	WITHOUT_CLASSIFICATION	2.764088237032222E-7	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999980657989243	WITHOUT_CLASSIFICATION	1.9342010757024455E-6	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.997247239212984	WITHOUT_CLASSIFICATION	0.002752760787016066	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999992299735542	WITHOUT_CLASSIFICATION	7.700264458712124E-7	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9997702251999191	WITHOUT_CLASSIFICATION	2.2977480008089872E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999971169645537	WITHOUT_CLASSIFICATION	2.8830354462817094E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999971169645537	WITHOUT_CLASSIFICATION	2.8830354462817094E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9975633406400773	WITHOUT_CLASSIFICATION	0.002436659359922709	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9993489023425679	WITHOUT_CLASSIFICATION	6.510976574321367E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999886619614479	WITHOUT_CLASSIFICATION	1.133803855208594E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9999915735646111	WITHOUT_CLASSIFICATION	8.426435388846528E-6	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999990275571176	WITHOUT_CLASSIFICATION	9.724428824123343E-7	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999999012638898	WITHOUT_CLASSIFICATION	9.873611016139002E-8	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999990023338258	WITHOUT_CLASSIFICATION	9.97666174243869E-7	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999841707298274	WITHOUT_CLASSIFICATION	1.5829270172601763E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999756158518208	WITHOUT_CLASSIFICATION	2.4384148179202634E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999756158518208	WITHOUT_CLASSIFICATION	2.4384148179202634E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999995475007998	WITHOUT_CLASSIFICATION	4.524992002226606E-7	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999881934472854	WITHOUT_CLASSIFICATION	1.1806552714588075E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999858436734972	WITHOUT_CLASSIFICATION	1.4156326502787053E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.999997869302896	WITHOUT_CLASSIFICATION	2.1306971040118448E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999998889675852	WITHOUT_CLASSIFICATION	1.1103241477752097E-7	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.999197422096116	WITHOUT_CLASSIFICATION	8.02577903883973E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999999964226527	WITHOUT_CLASSIFICATION	3.577347410028959E-9	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999979579107979	WITHOUT_CLASSIFICATION	2.042089202154905E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.999998558014218	WITHOUT_CLASSIFICATION	1.4419857819766662E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.999998558014218	WITHOUT_CLASSIFICATION	1.4419857819766662E-6	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999912057163216	WITHOUT_CLASSIFICATION	8.794283678286098E-6	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999998742248616	WITHOUT_CLASSIFICATION	1.257751383543303E-7	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9997031475805176	WITHOUT_CLASSIFICATION	2.968524194823721E-4	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.999991424030017	WITHOUT_CLASSIFICATION	8.575969983139254E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999998064104285	WITHOUT_CLASSIFICATION	1.935895715522881E-7	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9994179169491829	WITHOUT_CLASSIFICATION	5.820830508171329E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999999292554392	WITHOUT_CLASSIFICATION	7.074456080083813E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999815790418	WITHOUT_CLASSIFICATION	1.8420958108684237E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999815790418	WITHOUT_CLASSIFICATION	1.8420958108684237E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999815790418	WITHOUT_CLASSIFICATION	1.8420958108684237E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999815790418	WITHOUT_CLASSIFICATION	1.8420958108684237E-8	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999960400708648	WITHOUT_CLASSIFICATION	3.959929135165987E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9999957299972989	WITHOUT_CLASSIFICATION	4.2700027010076065E-6	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.999997167742281	WITHOUT_CLASSIFICATION	2.832257718932404E-6	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.99999997592844	WITHOUT_CLASSIFICATION	2.4071559994857866E-8	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999980118618533	WITHOUT_CLASSIFICATION	1.988138146655113E-6	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.999301760359916	WITHOUT_CLASSIFICATION	6.982396400838839E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999995689527179	WITHOUT_CLASSIFICATION	4.3104728214053857E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999054483802	WITHOUT_CLASSIFICATION	9.455161978052045E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999054483802	WITHOUT_CLASSIFICATION	9.455161978052045E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999054483802	WITHOUT_CLASSIFICATION	9.455161978052045E-8	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999994469341954	WITHOUT_CLASSIFICATION	5.530658046608829E-7	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9997326394863205	WITHOUT_CLASSIFICATION	2.6736051367946015E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999997305790769	WITHOUT_CLASSIFICATION	2.694209231930336E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999997305790769	WITHOUT_CLASSIFICATION	2.694209231930336E-7	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999993172866107	WITHOUT_CLASSIFICATION	6.827133893015013E-6	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999991628133	WITHOUT_CLASSIFICATION	8.371865996412463E-10	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.999999544596215	WITHOUT_CLASSIFICATION	4.5540378493574306E-7	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9998075642104249	WITHOUT_CLASSIFICATION	1.9243578957511693E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999976322956889	WITHOUT_CLASSIFICATION	2.3677043109249693E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999983850101388	WITHOUT_CLASSIFICATION	1.6149898611821254E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999986975725712	WITHOUT_CLASSIFICATION	1.3024274287965405E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999986975725712	WITHOUT_CLASSIFICATION	1.3024274287965405E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.99999453199392	WITHOUT_CLASSIFICATION	5.468006080003981E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9781400144084653	WITHOUT_CLASSIFICATION	0.021859985591534643	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999928920646389	WITHOUT_CLASSIFICATION	7.1079353610852285E-6	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.999997231319481	WITHOUT_CLASSIFICATION	2.7686805190158666E-6	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999912035372657	WITHOUT_CLASSIFICATION	8.796462734358899E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999998267467632	WITHOUT_CLASSIFICATION	1.7325323668774986E-7	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999990687843158	WITHOUT_CLASSIFICATION	9.312156843157855E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999983595233844	WITHOUT_CLASSIFICATION	1.6404766156006667E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9997914971318141	WITHOUT_CLASSIFICATION	2.0850286818579932E-4	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999985032580128	WITHOUT_CLASSIFICATION	1.4967419873074727E-6	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999985503365219	WITHOUT_CLASSIFICATION	1.449663478113733E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999989985026136	WITHOUT_CLASSIFICATION	1.0014973863674223E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999878382880728	WITHOUT_CLASSIFICATION	1.216171192722731E-5	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999829681040546	WITHOUT_CLASSIFICATION	1.7031895945390066E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999891935171	WITHOUT_CLASSIFICATION	1.080648289090175E-8	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999986894013679	WITHOUT_CLASSIFICATION	1.3105986320758405E-6	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999997909306583	WITHOUT_CLASSIFICATION	2.0906934160856059E-7	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999998594660636	WITHOUT_CLASSIFICATION	1.4053393639180204E-7	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999993737188325	WITHOUT_CLASSIFICATION	6.262811674680798E-7	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999833626461839	WITHOUT_CLASSIFICATION	1.6637353816090884E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999989256215404	WITHOUT_CLASSIFICATION	1.0743784596929085E-6	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999947844077915	WITHOUT_CLASSIFICATION	5.215592208391051E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999981419767542	WITHOUT_CLASSIFICATION	1.858023245886258E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999981419767542	WITHOUT_CLASSIFICATION	1.858023245886258E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999981419767542	WITHOUT_CLASSIFICATION	1.858023245886258E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999981419767542	WITHOUT_CLASSIFICATION	1.858023245886258E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999981419767542	WITHOUT_CLASSIFICATION	1.858023245886258E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999981419767542	WITHOUT_CLASSIFICATION	1.858023245886258E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999981419767542	WITHOUT_CLASSIFICATION	1.858023245886258E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999981419767542	WITHOUT_CLASSIFICATION	1.858023245886258E-6	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999371686270573	WITHOUT_CLASSIFICATION	6.283137294272443E-5	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999489240360011	WITHOUT_CLASSIFICATION	5.1075963998946953E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999815359525225	WITHOUT_CLASSIFICATION	1.846404747752837E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9988770568217579	WITHOUT_CLASSIFICATION	0.0011229431782421794	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996398651704	WITHOUT_CLASSIFICATION	3.6013482959243494E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996398651704	WITHOUT_CLASSIFICATION	3.6013482959243494E-7	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999999855585786	WITHOUT_CLASSIFICATION	1.4441421431627838E-8	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999990219388241	WITHOUT_CLASSIFICATION	9.780611759204346E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999305681236	WITHOUT_CLASSIFICATION	6.943187636046356E-8	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9997920246946481	WITHOUT_CLASSIFICATION	2.0797530535187508E-4	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999937056761138	WITHOUT_CLASSIFICATION	6.294323886146848E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999966617375897	WITHOUT_CLASSIFICATION	3.3382624103619686E-6	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999966056401913	WITHOUT_CLASSIFICATION	3.39435980865803E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9999249966881031	WITHOUT_CLASSIFICATION	7.500331189689428E-5	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999941258745055	WITHOUT_CLASSIFICATION	5.874125494486624E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999946921856275	WITHOUT_CLASSIFICATION	5.307814372458459E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999946921856275	WITHOUT_CLASSIFICATION	5.307814372458459E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999946921856275	WITHOUT_CLASSIFICATION	5.307814372458459E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999993249451793	WITHOUT_CLASSIFICATION	6.750548207816348E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999943128588763	WITHOUT_CLASSIFICATION	5.687141123625833E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9998632127626024	WITHOUT_CLASSIFICATION	1.3678723739757702E-4	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.999999516339537	WITHOUT_CLASSIFICATION	4.836604630190655E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998487467844074	WITHOUT_CLASSIFICATION	1.5125321559265797E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.999995963729212	WITHOUT_CLASSIFICATION	4.036270788130359E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.999999937444418	WITHOUT_CLASSIFICATION	6.25555820147733E-8	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999949963640977	WITHOUT_CLASSIFICATION	5.003635902291606E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999994576242806	WITHOUT_CLASSIFICATION	5.423757194808208E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999994576242806	WITHOUT_CLASSIFICATION	5.423757194808208E-7	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999921190692792	WITHOUT_CLASSIFICATION	7.880930720788433E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999994605903052	WITHOUT_CLASSIFICATION	5.394096947590444E-7	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999881537304125	WITHOUT_CLASSIFICATION	1.1846269587352638E-5	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9999212707531246	WITHOUT_CLASSIFICATION	7.872924687533675E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999973151931125	WITHOUT_CLASSIFICATION	2.6848068874623443E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999973151931125	WITHOUT_CLASSIFICATION	2.6848068874623443E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999985023274357	WITHOUT_CLASSIFICATION	1.4976725643548196E-6	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.999998965676073	WITHOUT_CLASSIFICATION	1.034323926907902E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999845004532532	WITHOUT_CLASSIFICATION	1.5499546746906845E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999353311517548	WITHOUT_CLASSIFICATION	6.466884824522941E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999996651435119	WITHOUT_CLASSIFICATION	3.348564880599478E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993671384266	WITHOUT_CLASSIFICATION	6.328615734612599E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993671384266	WITHOUT_CLASSIFICATION	6.328615734612599E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999991946774163	WITHOUT_CLASSIFICATION	8.05322583695055E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999991946774163	WITHOUT_CLASSIFICATION	8.05322583695055E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999987492743035	WITHOUT_CLASSIFICATION	1.2507256964379535E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999983014921379	WITHOUT_CLASSIFICATION	1.698507862076398E-6	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999783933322334	WITHOUT_CLASSIFICATION	2.1606667766698138E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999808469723562	WITHOUT_CLASSIFICATION	1.9153027643738906E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999475441600914	WITHOUT_CLASSIFICATION	5.2455839908633256E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999876685297824	WITHOUT_CLASSIFICATION	1.2331470217685667E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999920064939	WITHOUT_CLASSIFICATION	7.993506107526546E-9	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999898003845059	WITHOUT_CLASSIFICATION	1.019961549413418E-5	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.999999828015142	WITHOUT_CLASSIFICATION	1.719848581537058E-7	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9994512586901982	WITHOUT_CLASSIFICATION	5.487413098018448E-4	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.8575038839184009	WITHOUT_CLASSIFICATION	0.1424961160815991	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.999993993266332	WITHOUT_CLASSIFICATION	6.0067336680462075E-6	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.999996745352361	WITHOUT_CLASSIFICATION	3.254647638916527E-6	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999992738284729	WITHOUT_CLASSIFICATION	7.261715271527213E-7	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999999947850806	WITHOUT_CLASSIFICATION	5.214919370700323E-9	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999999050588458	WITHOUT_CLASSIFICATION	9.494115418555407E-8	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.999999971647371	WITHOUT_CLASSIFICATION	2.8352628994006425E-8	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999998222842067	WITHOUT_CLASSIFICATION	1.7771579333862214E-7	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999992071890588	WITHOUT_CLASSIFICATION	7.928109412009567E-7	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999993075727057	WITHOUT_CLASSIFICATION	6.924272942486046E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999786265857339	WITHOUT_CLASSIFICATION	2.1373414266107414E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998235663325418	WITHOUT_CLASSIFICATION	1.7643366745817414E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999997961276277	WITHOUT_CLASSIFICATION	2.0387237232889145E-7	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999994936026594	WITHOUT_CLASSIFICATION	5.06397340627932E-7	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999993291118767	WITHOUT_CLASSIFICATION	6.708881232185634E-7	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.999998717829458	WITHOUT_CLASSIFICATION	1.2821705420417097E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999974162261077	WITHOUT_CLASSIFICATION	2.583773892270777E-6	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999974983446918	WITHOUT_CLASSIFICATION	2.501655308265602E-6	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999946757609235	WITHOUT_CLASSIFICATION	5.324239076442333E-6	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999990657106667	WITHOUT_CLASSIFICATION	9.342893332772895E-7	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999998030849667	WITHOUT_CLASSIFICATION	1.9691503339772752E-7	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999998186848669	WITHOUT_CLASSIFICATION	1.813151330357894E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999995422254536	WITHOUT_CLASSIFICATION	4.5777454637488204E-7	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999999705600037	WITHOUT_CLASSIFICATION	2.9439996404528764E-8	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999997849527642	WITHOUT_CLASSIFICATION	2.150472357928142E-7	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999948341733954	WITHOUT_CLASSIFICATION	5.1658266045683906E-6	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999118666784	WITHOUT_CLASSIFICATION	8.813332165896995E-8	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999998568036444	WITHOUT_CLASSIFICATION	1.4319635558607795E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999975537565791	WITHOUT_CLASSIFICATION	2.4462434210012873E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999826184576392	WITHOUT_CLASSIFICATION	1.7381542360683788E-5	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999989519043608	WITHOUT_CLASSIFICATION	1.0480956392618896E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999943789075352	WITHOUT_CLASSIFICATION	5.621092464808186E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999996194783438	WITHOUT_CLASSIFICATION	3.805216562085855E-7	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999979480993235	WITHOUT_CLASSIFICATION	2.051900676432155E-6	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9989319897194638	WITHOUT_CLASSIFICATION	0.0010680102805361064	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999998419008049	WITHOUT_CLASSIFICATION	1.5809919506907404E-7	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999998520140037	WITHOUT_CLASSIFICATION	1.4798599640079037E-7	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999999872665191	WITHOUT_CLASSIFICATION	1.2733480793298631E-8	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999997804569445	WITHOUT_CLASSIFICATION	2.1954305551200803E-7	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999856364786576	WITHOUT_CLASSIFICATION	1.4363521342485703E-5	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9998038514193137	WITHOUT_CLASSIFICATION	1.9614858068633476E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999974112039874	WITHOUT_CLASSIFICATION	2.588796012579928E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999974112039874	WITHOUT_CLASSIFICATION	2.588796012579928E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999967674020229	WITHOUT_CLASSIFICATION	3.2325979771771052E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999967674020229	WITHOUT_CLASSIFICATION	3.2325979771771052E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999836835538991	WITHOUT_CLASSIFICATION	1.6316446100864427E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999836835538991	WITHOUT_CLASSIFICATION	1.6316446100864427E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.99999414531923	WITHOUT_CLASSIFICATION	5.854680769898543E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.99999414531923	WITHOUT_CLASSIFICATION	5.854680769898543E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998983157219	WITHOUT_CLASSIFICATION	1.0168427811803171E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998983157219	WITHOUT_CLASSIFICATION	1.0168427811803171E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998983157219	WITHOUT_CLASSIFICATION	1.0168427811803171E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998983157219	WITHOUT_CLASSIFICATION	1.0168427811803171E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998983157219	WITHOUT_CLASSIFICATION	1.0168427811803171E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998983157219	WITHOUT_CLASSIFICATION	1.0168427811803171E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998983157219	WITHOUT_CLASSIFICATION	1.0168427811803171E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998983157219	WITHOUT_CLASSIFICATION	1.0168427811803171E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998983157219	WITHOUT_CLASSIFICATION	1.0168427811803171E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999992518579198	WITHOUT_CLASSIFICATION	7.481420800654293E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999992518579198	WITHOUT_CLASSIFICATION	7.481420800654293E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999992518579198	WITHOUT_CLASSIFICATION	7.481420800654293E-7	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999975566883276	WITHOUT_CLASSIFICATION	2.4433116724413905E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999977182832545	WITHOUT_CLASSIFICATION	2.281716745592127E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999977182832545	WITHOUT_CLASSIFICATION	2.281716745592127E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999977182832545	WITHOUT_CLASSIFICATION	2.281716745592127E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999959740303754	WITHOUT_CLASSIFICATION	4.025969624465155E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999959740303754	WITHOUT_CLASSIFICATION	4.025969624465155E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999959740303754	WITHOUT_CLASSIFICATION	4.025969624465155E-6	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999857324170546	WITHOUT_CLASSIFICATION	1.4267582945302426E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999973124985913	WITHOUT_CLASSIFICATION	2.687501408687202E-6	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999582814877164	WITHOUT_CLASSIFICATION	4.171851228371771E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999368476262425	WITHOUT_CLASSIFICATION	6.31523737576042E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999368476262425	WITHOUT_CLASSIFICATION	6.31523737576042E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999368476262425	WITHOUT_CLASSIFICATION	6.31523737576042E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999850984235279	WITHOUT_CLASSIFICATION	1.490157647225247E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999957107462081	WITHOUT_CLASSIFICATION	4.289253791941486E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999957107462081	WITHOUT_CLASSIFICATION	4.289253791941486E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999603200146459	WITHOUT_CLASSIFICATION	3.967998535410177E-5	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999987009717412	WITHOUT_CLASSIFICATION	1.2990282589046528E-6	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999987009717412	WITHOUT_CLASSIFICATION	1.2990282589046528E-6	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9995848969372203	DEFECT	4.151030627797523E-4	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999997198858908	WITHOUT_CLASSIFICATION	2.801141091437318E-7	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999940743201187	WITHOUT_CLASSIFICATION	5.925679881262221E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999883827717562	WITHOUT_CLASSIFICATION	1.161722824383714E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999883827717562	WITHOUT_CLASSIFICATION	1.161722824383714E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.999996220577253	WITHOUT_CLASSIFICATION	3.779422746920117E-6	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999759719924867	WITHOUT_CLASSIFICATION	2.4028007513323274E-5	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999962809793027	WITHOUT_CLASSIFICATION	3.719020697228087E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9971895421066627	WITHOUT_CLASSIFICATION	0.0028104578933374315	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9939197571072022	WITHOUT_CLASSIFICATION	0.006080242892797855	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999883827717562	WITHOUT_CLASSIFICATION	1.161722824383714E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999883827717562	WITHOUT_CLASSIFICATION	1.161722824383714E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999883827717562	WITHOUT_CLASSIFICATION	1.161722824383714E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999883827717562	WITHOUT_CLASSIFICATION	1.161722824383714E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999883827717562	WITHOUT_CLASSIFICATION	1.161722824383714E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999996820888732	WITHOUT_CLASSIFICATION	3.179111268272051E-7	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999992868761461	WITHOUT_CLASSIFICATION	7.131238538654027E-7	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999936150318691	WITHOUT_CLASSIFICATION	6.384968130913532E-6	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999994372366579	WITHOUT_CLASSIFICATION	5.627633421962001E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999492379241398	WITHOUT_CLASSIFICATION	5.0762075860150125E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994276764762	WITHOUT_CLASSIFICATION	5.723235238016481E-7	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9947021562049565	WITHOUT_CLASSIFICATION	0.0052978437950434824	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9878718189635958	WITHOUT_CLASSIFICATION	0.01212818103640418	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999964515046342	WITHOUT_CLASSIFICATION	3.5484953657775026E-6	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999998295721563	WITHOUT_CLASSIFICATION	1.7042784370744883E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999991217936497	WITHOUT_CLASSIFICATION	8.782063503754234E-7	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999959912960884	WITHOUT_CLASSIFICATION	4.008703911573279E-6	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999866348927817	WITHOUT_CLASSIFICATION	1.3365107218240855E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999253179115	WITHOUT_CLASSIFICATION	7.468208855195628E-8	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999875673402324	WITHOUT_CLASSIFICATION	1.2432659767580435E-5	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999133539893048	WITHOUT_CLASSIFICATION	8.664601069516797E-5	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999922650307	WITHOUT_CLASSIFICATION	7.734969350203004E-9	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999949298577	WITHOUT_CLASSIFICATION	5.070142300351931E-9	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999935026772498	WITHOUT_CLASSIFICATION	6.497322750118829E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999988361467914	WITHOUT_CLASSIFICATION	1.1638532086235955E-6	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999423606575546	WITHOUT_CLASSIFICATION	5.76393424454726E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.99998841586001	WITHOUT_CLASSIFICATION	1.1584139990002198E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999995229083939	WITHOUT_CLASSIFICATION	4.770916060695194E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999992730490069	WITHOUT_CLASSIFICATION	7.269509931196752E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999992730490069	WITHOUT_CLASSIFICATION	7.269509931196752E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999992730490069	WITHOUT_CLASSIFICATION	7.269509931196752E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999992730490069	WITHOUT_CLASSIFICATION	7.269509931196752E-7	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999990654620415	WITHOUT_CLASSIFICATION	9.345379585274349E-7	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9999973347600069	WITHOUT_CLASSIFICATION	2.6652399931510963E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999997979368359	WITHOUT_CLASSIFICATION	2.020631642099347E-7	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999997979368359	WITHOUT_CLASSIFICATION	2.020631642099347E-7	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999971930304128	WITHOUT_CLASSIFICATION	2.8069695871018547E-6	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999451956165671	WITHOUT_CLASSIFICATION	5.480438343281288E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999937100128	WITHOUT_CLASSIFICATION	6.289987176339862E-9	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999991391071239	WITHOUT_CLASSIFICATION	8.608928761479863E-7	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999647506763891	WITHOUT_CLASSIFICATION	3.524932361094608E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999988788091984	WITHOUT_CLASSIFICATION	1.1211908016293353E-6	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999976288173523	WITHOUT_CLASSIFICATION	2.3711826475740534E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999872990866748	WITHOUT_CLASSIFICATION	1.2700913325268945E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999872990866748	WITHOUT_CLASSIFICATION	1.2700913325268945E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999872990866748	WITHOUT_CLASSIFICATION	1.2700913325268945E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999872990866748	WITHOUT_CLASSIFICATION	1.2700913325268945E-5	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999367405595563	WITHOUT_CLASSIFICATION	6.32594404436996E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999957149215339	WITHOUT_CLASSIFICATION	4.285078466124814E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999957149215339	WITHOUT_CLASSIFICATION	4.285078466124814E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999957149215339	WITHOUT_CLASSIFICATION	4.285078466124814E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999995888989056	WITHOUT_CLASSIFICATION	4.111010944917882E-7	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999967899896015	WITHOUT_CLASSIFICATION	3.2100103985117926E-6	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999999680652566	WITHOUT_CLASSIFICATION	3.193474339175124E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6192675846619485	WITHOUT_CLASSIFICATION	0.3807324153380514	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6192675846619485	WITHOUT_CLASSIFICATION	0.3807324153380514	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999999620904408	WITHOUT_CLASSIFICATION	3.7909559213244536E-8	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9941895541974367	WITHOUT_CLASSIFICATION	0.005810445802563341	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9997346956251839	WITHOUT_CLASSIFICATION	2.653043748161909E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9997346956251839	WITHOUT_CLASSIFICATION	2.653043748161909E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999934557511229	WITHOUT_CLASSIFICATION	6.544248877031883E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999934557511229	WITHOUT_CLASSIFICATION	6.544248877031883E-6	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999999655357549	WITHOUT_CLASSIFICATION	3.4464245194660975E-8	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999859317515722	WITHOUT_CLASSIFICATION	1.4068248427688768E-5	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.99999980207653	WITHOUT_CLASSIFICATION	1.9792346995711676E-7	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9979333816436291	WITHOUT_CLASSIFICATION	0.0020666183563709715	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999970036274239	WITHOUT_CLASSIFICATION	2.9963725761837298E-6	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999998936495456	WITHOUT_CLASSIFICATION	1.0635045440397508E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999261014031	WITHOUT_CLASSIFICATION	7.389859691903122E-8	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999903421357368	WITHOUT_CLASSIFICATION	9.657864263216404E-6	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999996403935769	WITHOUT_CLASSIFICATION	3.5960642304802663E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999859537353	WITHOUT_CLASSIFICATION	1.4046264739262744E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999859537353	WITHOUT_CLASSIFICATION	1.4046264739262744E-8	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999995563741593	WITHOUT_CLASSIFICATION	4.436258407496873E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999995563741593	WITHOUT_CLASSIFICATION	4.436258407496873E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999930034347494	WITHOUT_CLASSIFICATION	6.996565250605206E-6	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999999091284181	WITHOUT_CLASSIFICATION	9.087158202032585E-8	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.999942661643232	WITHOUT_CLASSIFICATION	5.733835676804011E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999851534858012	WITHOUT_CLASSIFICATION	1.4846514198827011E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999851534858012	WITHOUT_CLASSIFICATION	1.4846514198827011E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999851534858012	WITHOUT_CLASSIFICATION	1.4846514198827011E-5	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999893118056707	WITHOUT_CLASSIFICATION	1.0688194329234208E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999854462927388	WITHOUT_CLASSIFICATION	1.455370726131588E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999857984802796	WITHOUT_CLASSIFICATION	1.4201519720424119E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999859225555306	WITHOUT_CLASSIFICATION	1.4077444469400081E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999849641985606	WITHOUT_CLASSIFICATION	1.5035801439314424E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999839983494448	WITHOUT_CLASSIFICATION	1.6001650555142578E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999898540877719	WITHOUT_CLASSIFICATION	1.014591222822504E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999981028398153	WITHOUT_CLASSIFICATION	1.8971601847105548E-6	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.999987907246335	WITHOUT_CLASSIFICATION	1.2092753665024934E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999974458806987	WITHOUT_CLASSIFICATION	2.5541193013137442E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9997401737279622	WITHOUT_CLASSIFICATION	2.5982627203780553E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999995859713849	WITHOUT_CLASSIFICATION	4.1402861503411877E-7	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999989637222073	WITHOUT_CLASSIFICATION	1.0362777927431963E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6192675846619485	WITHOUT_CLASSIFICATION	0.3807324153380514	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999998071899481	WITHOUT_CLASSIFICATION	1.9281005183276594E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999990343067819	WITHOUT_CLASSIFICATION	9.65693218030386E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998856906429355	WITHOUT_CLASSIFICATION	1.1430935706454538E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998802544260066	WITHOUT_CLASSIFICATION	1.1974557399340798E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998802544260066	WITHOUT_CLASSIFICATION	1.1974557399340798E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998802544260066	WITHOUT_CLASSIFICATION	1.1974557399340798E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998802544260066	WITHOUT_CLASSIFICATION	1.1974557399340798E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998802544260066	WITHOUT_CLASSIFICATION	1.1974557399340798E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999736643070359	WITHOUT_CLASSIFICATION	2.6335692963998684E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998802544260066	WITHOUT_CLASSIFICATION	1.1974557399340798E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998802544260066	WITHOUT_CLASSIFICATION	1.1974557399340798E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998802544260066	WITHOUT_CLASSIFICATION	1.1974557399340798E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999999381266893	WITHOUT_CLASSIFICATION	6.187331070297576E-8	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999998584119392	WITHOUT_CLASSIFICATION	1.41588060799324E-7	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9999787817067922	WITHOUT_CLASSIFICATION	2.121829320777699E-5	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9996625938425941	WITHOUT_CLASSIFICATION	3.374061574058672E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999745418494452	WITHOUT_CLASSIFICATION	2.5458150554852916E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999995409246039	WITHOUT_CLASSIFICATION	4.5907539605163707E-7	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999999924041848	WITHOUT_CLASSIFICATION	7.595815199948595E-9	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999819006117935	WITHOUT_CLASSIFICATION	1.809938820650533E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999859082565268	WITHOUT_CLASSIFICATION	1.4091743473223118E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999859082565268	WITHOUT_CLASSIFICATION	1.4091743473223118E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999831005298918	WITHOUT_CLASSIFICATION	1.6899470108183022E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999825287370789	WITHOUT_CLASSIFICATION	1.7471262921160954E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999858527683831	WITHOUT_CLASSIFICATION	1.4147231616835192E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.999984429724036	WITHOUT_CLASSIFICATION	1.5570275964048158E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999864622624388	WITHOUT_CLASSIFICATION	1.353773756117193E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999855945916579	WITHOUT_CLASSIFICATION	1.440540834209525E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999868772837963	WITHOUT_CLASSIFICATION	1.3122716203691684E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999898450814967	WITHOUT_CLASSIFICATION	1.0154918503302982E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999846475421325	WITHOUT_CLASSIFICATION	1.5352457867538502E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999901293090019	WITHOUT_CLASSIFICATION	9.870690998087019E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999915686627079	WITHOUT_CLASSIFICATION	8.431337292012587E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999899972567372	WITHOUT_CLASSIFICATION	1.0002743262849129E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999904384891666	WITHOUT_CLASSIFICATION	9.561510833373496E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999898290074586	WITHOUT_CLASSIFICATION	1.0170992541342305E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.99998939119348	WITHOUT_CLASSIFICATION	1.0608806519948893E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999910047667563	WITHOUT_CLASSIFICATION	8.99523324367879E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999898007374292	WITHOUT_CLASSIFICATION	1.0199262570801353E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999897213976853	WITHOUT_CLASSIFICATION	1.0278602314657392E-5	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999875983660133	WITHOUT_CLASSIFICATION	1.2401633986833747E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.99998378388709	WITHOUT_CLASSIFICATION	1.6216112910032153E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999816249094747	WITHOUT_CLASSIFICATION	1.837509052525393E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999815499940414	WITHOUT_CLASSIFICATION	1.8450005958489966E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999875763138534	WITHOUT_CLASSIFICATION	1.2423686146521503E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999911319758307	WITHOUT_CLASSIFICATION	8.868024169255517E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999863139304039	WITHOUT_CLASSIFICATION	1.3686069596024352E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999904541165676	WITHOUT_CLASSIFICATION	9.545883432381517E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999863879277052	WITHOUT_CLASSIFICATION	1.3612072294844178E-5	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999903588194953	WITHOUT_CLASSIFICATION	9.641180504647367E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999819216077986	WITHOUT_CLASSIFICATION	1.8078392201344473E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999883998706945	WITHOUT_CLASSIFICATION	1.1600129305461208E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999883730685064	WITHOUT_CLASSIFICATION	1.1626931493618335E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.999987299122036	WITHOUT_CLASSIFICATION	1.2700877964059296E-5	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999871040403505	WITHOUT_CLASSIFICATION	1.2895959649494242E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999858457041368	WITHOUT_CLASSIFICATION	1.4154295863118724E-5	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999808081652293	WITHOUT_CLASSIFICATION	1.919183477068688E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999874844402424	WITHOUT_CLASSIFICATION	1.2515559757631204E-5	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999850004773534	WITHOUT_CLASSIFICATION	1.4999522646576798E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999826299451247	WITHOUT_CLASSIFICATION	1.73700548753582E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999861037406772	WITHOUT_CLASSIFICATION	1.3896259322770125E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999706885449985	WITHOUT_CLASSIFICATION	2.9311455001414534E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999837928167582	WITHOUT_CLASSIFICATION	1.6207183241772646E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999828142394673	WITHOUT_CLASSIFICATION	1.7185760532746225E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999835943011199	WITHOUT_CLASSIFICATION	1.6405698880017588E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999822746016772	WITHOUT_CLASSIFICATION	1.772539832287139E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999888332093829	WITHOUT_CLASSIFICATION	1.1166790617078754E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999903369963842	WITHOUT_CLASSIFICATION	9.663003615842757E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999820228262573	WITHOUT_CLASSIFICATION	1.797717374281748E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999805858288295	WITHOUT_CLASSIFICATION	1.9414171170545458E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999838503566176	WITHOUT_CLASSIFICATION	1.6149643382363035E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999828891652897	WITHOUT_CLASSIFICATION	1.7110834710340256E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999800286898608	WITHOUT_CLASSIFICATION	1.997131013919048E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999808721410213	WITHOUT_CLASSIFICATION	1.9127858978782443E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999878899746557	WITHOUT_CLASSIFICATION	1.2110025344316595E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999754191137958	WITHOUT_CLASSIFICATION	2.4580886204192768E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999754191137958	WITHOUT_CLASSIFICATION	2.4580886204192768E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999841428486583	WITHOUT_CLASSIFICATION	1.5857151341619644E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.99998248845075	WITHOUT_CLASSIFICATION	1.7511549249999325E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999822493231428	WITHOUT_CLASSIFICATION	1.7750676857236012E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999824791394063	WITHOUT_CLASSIFICATION	1.752086059366242E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999898620878378	WITHOUT_CLASSIFICATION	1.013791216221131E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999776509066822	WITHOUT_CLASSIFICATION	2.234909331784268E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999792838296913	WITHOUT_CLASSIFICATION	2.071617030876775E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999753960489034	WITHOUT_CLASSIFICATION	2.4603951096576917E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999800139875905	WITHOUT_CLASSIFICATION	1.9986012409471174E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999849802975996	WITHOUT_CLASSIFICATION	1.5019702400330293E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999980085818891	WITHOUT_CLASSIFICATION	1.9914181108309837E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999980085818891	WITHOUT_CLASSIFICATION	1.9914181108309837E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999898920683961	WITHOUT_CLASSIFICATION	1.0107931603910985E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998065690320869	WITHOUT_CLASSIFICATION	1.9343096791315321E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.999938541313795	WITHOUT_CLASSIFICATION	6.145868620496285E-5	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999926600603	WITHOUT_CLASSIFICATION	7.339939664343736E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999995471229448	WITHOUT_CLASSIFICATION	4.5287705521247157E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999995471229448	WITHOUT_CLASSIFICATION	4.5287705521247157E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999995471229448	WITHOUT_CLASSIFICATION	4.5287705521247157E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999995471229448	WITHOUT_CLASSIFICATION	4.5287705521247157E-7	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.8226068970591902	WITHOUT_CLASSIFICATION	0.17739310294080973	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9999997858778586	WITHOUT_CLASSIFICATION	2.141221413749668E-7	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999899790379211	WITHOUT_CLASSIFICATION	1.0020962078884782E-5	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999894655410777	WITHOUT_CLASSIFICATION	1.0534458922244432E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999893045284926	WITHOUT_CLASSIFICATION	1.0695471507371565E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999878990953406	WITHOUT_CLASSIFICATION	1.2100904659479021E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999900858500106	WITHOUT_CLASSIFICATION	9.914149989520094E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999864700825183	WITHOUT_CLASSIFICATION	1.3529917481741687E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999774906925467	WITHOUT_CLASSIFICATION	2.2509307453320335E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999888925945712	WITHOUT_CLASSIFICATION	1.1107405428693688E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999879326865134	WITHOUT_CLASSIFICATION	1.2067313486578372E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999891540187006	WITHOUT_CLASSIFICATION	1.0845981299412705E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999857895933107	WITHOUT_CLASSIFICATION	1.4210406689300068E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999849776385911	WITHOUT_CLASSIFICATION	1.5022361409051894E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.999984632106498	WITHOUT_CLASSIFICATION	1.536789350197028E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999785711776487	WITHOUT_CLASSIFICATION	2.142882235127036E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.999986748429785	WITHOUT_CLASSIFICATION	1.325157021501949E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999921723856362	WITHOUT_CLASSIFICATION	7.827614363854577E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999893223900179	WITHOUT_CLASSIFICATION	1.0677609982038272E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999893646889203	WITHOUT_CLASSIFICATION	1.06353110796189E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999898799862664	WITHOUT_CLASSIFICATION	1.0120013733455469E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.999984970977495	WITHOUT_CLASSIFICATION	1.5029022505045593E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999843152684225	WITHOUT_CLASSIFICATION	1.5684731577516923E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999892994086952	WITHOUT_CLASSIFICATION	1.070059130476669E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999850212694998	WITHOUT_CLASSIFICATION	1.4978730500067437E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999858317291992	WITHOUT_CLASSIFICATION	1.4168270800787829E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999870053660124	WITHOUT_CLASSIFICATION	1.2994633987621385E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999922207365318	WITHOUT_CLASSIFICATION	7.779263468151126E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999925195069335	WITHOUT_CLASSIFICATION	7.480493066495133E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999859358857746	WITHOUT_CLASSIFICATION	1.4064114225393168E-5	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999907428407425	WITHOUT_CLASSIFICATION	9.257159257548768E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999867857093244	WITHOUT_CLASSIFICATION	1.321429067551669E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999829608679749	WITHOUT_CLASSIFICATION	1.7039132025131927E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.999979474202091	WITHOUT_CLASSIFICATION	2.0525797908949525E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999856551051047	WITHOUT_CLASSIFICATION	1.4344894895166876E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999864848594638	WITHOUT_CLASSIFICATION	1.351514053613042E-5	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999865089704614	WITHOUT_CLASSIFICATION	1.3491029538584427E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.999986244729263	WITHOUT_CLASSIFICATION	1.375527073689355E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999835950689867	WITHOUT_CLASSIFICATION	1.6404931013268277E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999827092993963	WITHOUT_CLASSIFICATION	1.729070060377996E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999824799785773	WITHOUT_CLASSIFICATION	1.752002142276773E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999837115428485	WITHOUT_CLASSIFICATION	1.6288457151528767E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999821551362692	WITHOUT_CLASSIFICATION	1.7844863730851402E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999844532165307	WITHOUT_CLASSIFICATION	1.5546783469262435E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999896890366239	WITHOUT_CLASSIFICATION	1.0310963376101116E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.999990746248225	WITHOUT_CLASSIFICATION	9.253751774922858E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999810345465278	WITHOUT_CLASSIFICATION	1.8965453472246223E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999848737623871	WITHOUT_CLASSIFICATION	1.5126237612949575E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999839735115911	WITHOUT_CLASSIFICATION	1.6026488408935246E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999671980885837	WITHOUT_CLASSIFICATION	3.280191141631266E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999793866466848	WITHOUT_CLASSIFICATION	2.0613353315114738E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999752045102265	WITHOUT_CLASSIFICATION	2.479548977355585E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999891787521984	WITHOUT_CLASSIFICATION	1.0821247801574906E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999885932696674	WITHOUT_CLASSIFICATION	1.1406730332633719E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999879778007549	WITHOUT_CLASSIFICATION	1.2022199245212317E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999830363987392	WITHOUT_CLASSIFICATION	1.6963601260719236E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999846479872717	WITHOUT_CLASSIFICATION	1.5352012728323263E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999836558072945	WITHOUT_CLASSIFICATION	1.634419270548011E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.999980324670889	WITHOUT_CLASSIFICATION	1.9675329110970973E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999999743772131	WITHOUT_CLASSIFICATION	2.5622786864701663E-8	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999999388655805	WITHOUT_CLASSIFICATION	6.113441956312915E-8	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998052825851	WITHOUT_CLASSIFICATION	1.9471741489996685E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998052825851	WITHOUT_CLASSIFICATION	1.9471741489996685E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998052825851	WITHOUT_CLASSIFICATION	1.9471741489996685E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998052825851	WITHOUT_CLASSIFICATION	1.9471741489996685E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998052825851	WITHOUT_CLASSIFICATION	1.9471741489996685E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998052825851	WITHOUT_CLASSIFICATION	1.9471741489996685E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998052825851	WITHOUT_CLASSIFICATION	1.9471741489996685E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999325453442538	WITHOUT_CLASSIFICATION	6.74546557461937E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999325453442538	WITHOUT_CLASSIFICATION	6.74546557461937E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999325453442538	WITHOUT_CLASSIFICATION	6.74546557461937E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999325453442538	WITHOUT_CLASSIFICATION	6.74546557461937E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999705384864832	WITHOUT_CLASSIFICATION	2.9461513516872672E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999705384864832	WITHOUT_CLASSIFICATION	2.9461513516872672E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9999999751837381	WITHOUT_CLASSIFICATION	2.4816261935652627E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996795050679	WITHOUT_CLASSIFICATION	3.2049493214973666E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996795050679	WITHOUT_CLASSIFICATION	3.2049493214973666E-7	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999987831771079	WITHOUT_CLASSIFICATION	1.2168228920752838E-6	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999994087736276	WITHOUT_CLASSIFICATION	5.912263723423556E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999950640325194	WITHOUT_CLASSIFICATION	4.935967480729959E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999950640325194	WITHOUT_CLASSIFICATION	4.935967480729959E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999950640325194	WITHOUT_CLASSIFICATION	4.935967480729959E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999950640325194	WITHOUT_CLASSIFICATION	4.935967480729959E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999950640325194	WITHOUT_CLASSIFICATION	4.935967480729959E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999950640325194	WITHOUT_CLASSIFICATION	4.935967480729959E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999950640325194	WITHOUT_CLASSIFICATION	4.935967480729959E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999969234508594	WITHOUT_CLASSIFICATION	3.0765491406516483E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981689375129	WITHOUT_CLASSIFICATION	1.8310624870650656E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999998814336711	WITHOUT_CLASSIFICATION	1.1856632887170887E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999998814336711	WITHOUT_CLASSIFICATION	1.1856632887170887E-7	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999982922999924	WITHOUT_CLASSIFICATION	1.7077000076701734E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999901797612439	WITHOUT_CLASSIFICATION	9.820238756058866E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999901797612439	WITHOUT_CLASSIFICATION	9.820238756058866E-6	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999999981536891	WITHOUT_CLASSIFICATION	1.8463108598072974E-9	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.5671944719247871	DEFECT	0.43280552807521283	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999902525971054	WITHOUT_CLASSIFICATION	9.747402894559146E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999908233802588	WITHOUT_CLASSIFICATION	9.176619741142634E-6	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999943867077498	WITHOUT_CLASSIFICATION	5.613292250241743E-6	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.999997460278087	WITHOUT_CLASSIFICATION	2.5397219129836686E-6	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999999610293596	WITHOUT_CLASSIFICATION	3.8970640372531936E-8	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999976259011115	WITHOUT_CLASSIFICATION	2.374098888397063E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.99999763360249	WITHOUT_CLASSIFICATION	2.366397509933668E-6	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999851239841734	WITHOUT_CLASSIFICATION	1.4876015826771017E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9994731095112032	WITHOUT_CLASSIFICATION	5.268904887967592E-4	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.999999964674157	WITHOUT_CLASSIFICATION	3.5325842974298335E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999850782587	WITHOUT_CLASSIFICATION	1.4921741304864393E-8	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.998486393136575	WITHOUT_CLASSIFICATION	0.0015136068634250413	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999990094055907	WITHOUT_CLASSIFICATION	9.905944093045054E-7	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999989574433037	WITHOUT_CLASSIFICATION	1.0425566963402364E-6	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999999855601271	WITHOUT_CLASSIFICATION	1.4439872850434416E-8	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9997467093668798	WITHOUT_CLASSIFICATION	2.5329063312017487E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999952114175549	WITHOUT_CLASSIFICATION	4.788582445180263E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999952114175549	WITHOUT_CLASSIFICATION	4.788582445180263E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.999999917518674	WITHOUT_CLASSIFICATION	8.24813260671462E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998802552801	WITHOUT_CLASSIFICATION	1.1974471990193003E-7	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999998098850971	WITHOUT_CLASSIFICATION	1.9011490284747493E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999867532494154	WITHOUT_CLASSIFICATION	1.3246750584602821E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999987730187016	WITHOUT_CLASSIFICATION	1.2269812984009232E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999987730187016	WITHOUT_CLASSIFICATION	1.2269812984009232E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999987730187016	WITHOUT_CLASSIFICATION	1.2269812984009232E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999999263482713	WITHOUT_CLASSIFICATION	7.365172871269119E-8	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999794987111847	WITHOUT_CLASSIFICATION	2.050128881519882E-5	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999999271522428	WITHOUT_CLASSIFICATION	7.28477571504315E-8	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.999998597074556	WITHOUT_CLASSIFICATION	1.4029254441278024E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999992093392445	WITHOUT_CLASSIFICATION	7.906607556110484E-7	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999999993006151	WITHOUT_CLASSIFICATION	6.993847535320591E-10	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999999452284744	WITHOUT_CLASSIFICATION	5.477152564555656E-8	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999999357052084	WITHOUT_CLASSIFICATION	6.429479160915625E-8	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999996630483459	WITHOUT_CLASSIFICATION	3.3695165414389303E-7	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999987265285726	WITHOUT_CLASSIFICATION	1.2734714274312829E-6	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999995254275472	WITHOUT_CLASSIFICATION	4.7457245278337715E-7	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999999838038374	WITHOUT_CLASSIFICATION	1.619616264146363E-8	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.7798568928997822	WITHOUT_CLASSIFICATION	0.22014310710021773	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9998335845449567	WITHOUT_CLASSIFICATION	1.6641545504325863E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999959714079	WITHOUT_CLASSIFICATION	4.028592183307979E-9	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.999990303138807	WITHOUT_CLASSIFICATION	9.69686119297187E-6	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999999781869343	WITHOUT_CLASSIFICATION	2.1813065689905727E-8	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999998548061424	WITHOUT_CLASSIFICATION	1.4519385753345477E-7	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999991184627861	WITHOUT_CLASSIFICATION	8.815372138003711E-7	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.7585905238878555	WITHOUT_CLASSIFICATION	0.24140947611214444	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9923738764855674	DEFECT	0.007626123514432628	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.921379268795363	WITHOUT_CLASSIFICATION	0.078620731204637	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9999350385435795	DEFECT	6.496145642062306E-5	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9969108826075861	DEFECT	0.0030891173924138754	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9974035318993725	WITHOUT_CLASSIFICATION	0.0025964681006275052	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.7999058028504227	WITHOUT_CLASSIFICATION	0.20009419714957719	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.8651446192140879	WITHOUT_CLASSIFICATION	0.13485538078591208	DEFECT
// FIXME: not correct exception	DEFECT	0.9516655648001453	DEFECT	0.04833443519985465	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.999427972566966	WITHOUT_CLASSIFICATION	5.720274330339038E-4	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9984924792267674	WITHOUT_CLASSIFICATION	0.0015075207732326006	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9898027018014414	WITHOUT_CLASSIFICATION	0.010197298198558599	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9362901301441783	WITHOUT_CLASSIFICATION	0.06370986985582185	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9784824318818304	DEFECT	0.021517568118169607	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.7786238088868217	DEFECT	0.22137619111317824	WITHOUT_CLASSIFICATION
// TODO: Ruby locks the string here	DEFECT	0.7648005483078231	DEFECT	0.2351994516921769	WITHOUT_CLASSIFICATION
// TODO: Ruby locks the string here	DEFECT	0.7648005483078231	DEFECT	0.2351994516921769	WITHOUT_CLASSIFICATION
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9841235226551941	WITHOUT_CLASSIFICATION	0.01587647734480579	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9784081446680658	WITHOUT_CLASSIFICATION	0.021591855331934147	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.85661763783134	WITHOUT_CLASSIFICATION	0.14338236216866007	DEFECT
// ENEBO: Very wrong	DEFECT	0.9939794586666022	WITHOUT_CLASSIFICATION	0.006020541333397707	DEFECT
// ENEBO: Very wrong	DEFECT	0.9939794586666022	WITHOUT_CLASSIFICATION	0.006020541333397707	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.8254980338113758	DEFECT	0.17450196618862415	WITHOUT_CLASSIFICATION
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9151892081782381	DEFECT	0.08481079182176185	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9681459958506704	WITHOUT_CLASSIFICATION	0.03185400414932959	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.5819539093759905	WITHOUT_CLASSIFICATION	0.41804609062400955	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.6483654545881411	DEFECT	0.3516345454118589	WITHOUT_CLASSIFICATION
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.6719186694199399	WITHOUT_CLASSIFICATION	0.32808133058006	DEFECT
// TODO: proper sign	DEFECT	0.8478846786210213	WITHOUT_CLASSIFICATION	0.1521153213789787	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9339050726319916	DEFECT	0.06609492736800836	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.9962868162146219	WITHOUT_CLASSIFICATION	0.003713183785378068	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.919802447595926	DEFECT	0.08019755240407407	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.8101936400845552	WITHOUT_CLASSIFICATION	0.1898063599154448	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.7758296370291144	DEFECT	0.22417036297088555	WITHOUT_CLASSIFICATION
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.8640758346080074	WITHOUT_CLASSIFICATION	0.13592416539199254	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.8999436107709439	WITHOUT_CLASSIFICATION	0.10005638922905616	DEFECT
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// FIXME: this should reset to what it was before	DEFECT	0.9916186835135296	WITHOUT_CLASSIFICATION	0.008381316486470418	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9971301714066286	WITHOUT_CLASSIFICATION	0.0028698285933712398	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9335847736491996	WITHOUT_CLASSIFICATION	0.0664152263508005	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.968828438304361	DEFECT	0.031171561695638943	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9998142922880233	WITHOUT_CLASSIFICATION	1.8570771197660562E-4	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9999626898462192	WITHOUT_CLASSIFICATION	3.731015378081879E-5	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.5773403815675492	WITHOUT_CLASSIFICATION	0.42265961843245076	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.5773403815675492	WITHOUT_CLASSIFICATION	0.42265961843245076	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9474115051053172	WITHOUT_CLASSIFICATION	0.0525884948946828	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9951236842540744	WITHOUT_CLASSIFICATION	0.004876315745925626	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9994268620524623	DEFECT	5.731379475376984E-4	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9979061558942343	WITHOUT_CLASSIFICATION	0.0020938441057656823	DEFECT
// FIXME: This is wrong	DEFECT	0.595520145649951	WITHOUT_CLASSIFICATION	0.40447985435004913	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9855417408668378	WITHOUT_CLASSIFICATION	0.01445825913316224	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9998619134701113	WITHOUT_CLASSIFICATION	1.3808652988859353E-4	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.8416969038819389	WITHOUT_CLASSIFICATION	0.15830309611806112	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9622756576678967	WITHOUT_CLASSIFICATION	0.03772434233210321	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.999969042577498	WITHOUT_CLASSIFICATION	3.095742250209434E-5	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9981636413811702	DEFECT	0.0018363586188298328	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.736564217732076	DEFECT	0.26343578226792386	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.736564217732076	DEFECT	0.26343578226792386	WITHOUT_CLASSIFICATION
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.99916794865509	DEFECT	8.320513449099716E-4	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9559746343842217	DEFECT	0.04402536561577823	WITHOUT_CLASSIFICATION
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9869699964405397	DEFECT	0.013030003559460306	WITHOUT_CLASSIFICATION
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9999620569509442	WITHOUT_CLASSIFICATION	3.794304905586289E-5	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9984544007283896	DEFECT	0.0015455992716103212	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9999116412738963	DEFECT	8.83587261037792E-5	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9996349373142944	WITHOUT_CLASSIFICATION	3.650626857055945E-4	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9210705940341273	DEFECT	0.07892940596587267	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9474115051053172	WITHOUT_CLASSIFICATION	0.0525884948946828	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.999972398454235	WITHOUT_CLASSIFICATION	2.7601545765026527E-5	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9725556256523457	WITHOUT_CLASSIFICATION	0.027444374347654316	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9894207025644651	WITHOUT_CLASSIFICATION	0.010579297435534764	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.5819539093759905	WITHOUT_CLASSIFICATION	0.41804609062400955	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9933529429883965	DEFECT	0.0066470570116035745	WITHOUT_CLASSIFICATION
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9434717251676121	WITHOUT_CLASSIFICATION	0.05652827483238782	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9971301714066286	WITHOUT_CLASSIFICATION	0.0028698285933712398	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9981341974316155	WITHOUT_CLASSIFICATION	0.0018658025683845078	DEFECT
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// FIXME: Broken but behaving	DEFECT	0.9981636413811702	DEFECT	0.0018363586188298328	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.9996986661440794	DEFECT	3.01333855920573E-4	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5618856926152157	DEFECT	0.43811430738478435	WITHOUT_CLASSIFICATION
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.8416969038819389	WITHOUT_CLASSIFICATION	0.15830309611806112	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9999961156309727	WITHOUT_CLASSIFICATION	3.884369027274289E-6	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.736564217732076	DEFECT	0.26343578226792386	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.736564217732076	DEFECT	0.26343578226792386	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9559746343842217	DEFECT	0.04402536561577823	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9559746343842217	DEFECT	0.04402536561577823	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9559746343842217	DEFECT	0.04402536561577823	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9559746343842217	DEFECT	0.04402536561577823	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9559746343842217	DEFECT	0.04402536561577823	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9559746343842217	DEFECT	0.04402536561577823	WITHOUT_CLASSIFICATION
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9798273725263577	WITHOUT_CLASSIFICATION	0.02017262747364235	DEFECT
