//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999833504082478	WITHOUT_CLASSIFICATION	1.6649591752127045E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.99999788570215	WITHOUT_CLASSIFICATION	2.1142978500840687E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.99999788570215	WITHOUT_CLASSIFICATION	2.1142978500840687E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.99999788570215	WITHOUT_CLASSIFICATION	2.1142978500840687E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.99999788570215	WITHOUT_CLASSIFICATION	2.1142978500840687E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.99999788570215	WITHOUT_CLASSIFICATION	2.1142978500840687E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.99999788570215	WITHOUT_CLASSIFICATION	2.1142978500840687E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.99999788570215	WITHOUT_CLASSIFICATION	2.1142978500840687E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999957246185128	WITHOUT_CLASSIFICATION	4.275381487167469E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999957246185128	WITHOUT_CLASSIFICATION	4.275381487167469E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999429507359695	WITHOUT_CLASSIFICATION	5.7049264030445174E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999963254783312	WITHOUT_CLASSIFICATION	3.674521668907435E-6	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999984455830437	WITHOUT_CLASSIFICATION	1.554416956346637E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999935331321278	WITHOUT_CLASSIFICATION	6.466867872221018E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999935331321278	WITHOUT_CLASSIFICATION	6.466867872221018E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999992069741719	WITHOUT_CLASSIFICATION	7.930258280211355E-7	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999970682008846	WITHOUT_CLASSIFICATION	2.9317991153549258E-6	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999973300853597	WITHOUT_CLASSIFICATION	2.6699146402562607E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999858615442077	WITHOUT_CLASSIFICATION	1.4138455792442611E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999971507958333	WITHOUT_CLASSIFICATION	2.8492041667036098E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999971507958333	WITHOUT_CLASSIFICATION	2.8492041667036098E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999989331477795	WITHOUT_CLASSIFICATION	1.0668522203859023E-6	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999868213288782	WITHOUT_CLASSIFICATION	1.3178671121883715E-5	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999957240087187	WITHOUT_CLASSIFICATION	4.275991281257481E-6	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999998464274059	WITHOUT_CLASSIFICATION	1.5357259418544053E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999698356945698	WITHOUT_CLASSIFICATION	3.0164305430156154E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999889486176896	WITHOUT_CLASSIFICATION	1.1051382310440912E-5	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999838754007301	WITHOUT_CLASSIFICATION	1.61245992699398E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999955169808698	WITHOUT_CLASSIFICATION	4.483019130192289E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999277170328076	WITHOUT_CLASSIFICATION	7.228296719241003E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9999213888541154	WITHOUT_CLASSIFICATION	7.861114588460793E-5	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999960449990134	WITHOUT_CLASSIFICATION	3.955000986592949E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999824321096018	WITHOUT_CLASSIFICATION	1.7567890398190826E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999986479852983	WITHOUT_CLASSIFICATION	1.3520147016747092E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999746438610395	WITHOUT_CLASSIFICATION	2.535613896041836E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999746438610395	WITHOUT_CLASSIFICATION	2.535613896041836E-5	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999993887283337	WITHOUT_CLASSIFICATION	6.112716663999594E-7	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999592360572751	WITHOUT_CLASSIFICATION	4.0763942724811175E-5	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999985864803429	WITHOUT_CLASSIFICATION	1.4135196570676467E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999988599431553	WITHOUT_CLASSIFICATION	1.1400568447324383E-6	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999969124529695	WITHOUT_CLASSIFICATION	3.0875470304553507E-6	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9998420034988791	WITHOUT_CLASSIFICATION	1.5799650112091195E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9998420034988791	WITHOUT_CLASSIFICATION	1.5799650112091195E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999997597402245	WITHOUT_CLASSIFICATION	2.402597754883625E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9957883136089636	WITHOUT_CLASSIFICATION	0.004211686391036438	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999995678890679	WITHOUT_CLASSIFICATION	4.3211093217916887E-7	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999392606870979	WITHOUT_CLASSIFICATION	6.073931290193088E-5	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999898967987563	WITHOUT_CLASSIFICATION	1.0103201243690027E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956116888314	WITHOUT_CLASSIFICATION	4.388311168551777E-6	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958225589834	WITHOUT_CLASSIFICATION	4.177441016540476E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999998905400065	WITHOUT_CLASSIFICATION	1.0945999350548134E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999697605514587	WITHOUT_CLASSIFICATION	3.0239448541306195E-5	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999997442271833	WITHOUT_CLASSIFICATION	2.557728168086008E-7	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999835412682941	WITHOUT_CLASSIFICATION	1.6458731705832667E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999697605514587	WITHOUT_CLASSIFICATION	3.0239448541306195E-5	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999835412682941	WITHOUT_CLASSIFICATION	1.6458731705832667E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999988242347362	WITHOUT_CLASSIFICATION	1.1757652638305894E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999831790711884	WITHOUT_CLASSIFICATION	1.6820928811645906E-5	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999997189370631	WITHOUT_CLASSIFICATION	2.810629370213329E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999925287386561	WITHOUT_CLASSIFICATION	7.471261343849166E-6	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999974573872541	WITHOUT_CLASSIFICATION	2.5426127459290837E-6	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999993697533851	WITHOUT_CLASSIFICATION	6.302466149267833E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999984496091266	WITHOUT_CLASSIFICATION	1.5503908732650098E-6	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9998412485600044	WITHOUT_CLASSIFICATION	1.5875143999559722E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999999528327753	WITHOUT_CLASSIFICATION	4.7167224704152E-7	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.999730136474548	WITHOUT_CLASSIFICATION	2.6986352545206414E-4	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999966154024262	WITHOUT_CLASSIFICATION	3.384597573758756E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999957807767056	WITHOUT_CLASSIFICATION	4.219223294394844E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999978402159473	WITHOUT_CLASSIFICATION	2.1597840527316364E-6	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999840607289652	WITHOUT_CLASSIFICATION	1.593927103482608E-5	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999955485147705	WITHOUT_CLASSIFICATION	4.451485229519235E-6	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999999877047051	WITHOUT_CLASSIFICATION	1.229529489914261E-7	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999936436369431	WITHOUT_CLASSIFICATION	6.356363056937374E-6	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999998614108552	WITHOUT_CLASSIFICATION	1.3858914490843594E-7	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999985175095583	WITHOUT_CLASSIFICATION	1.4824904417710824E-6	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999217540663	WITHOUT_CLASSIFICATION	7.824593369842824E-7	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999977576403293	WITHOUT_CLASSIFICATION	2.2423596707002607E-6	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9994930625594272	WITHOUT_CLASSIFICATION	5.069374405728042E-4	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999988901831318	WITHOUT_CLASSIFICATION	1.1098168681430394E-6	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999971874275256	WITHOUT_CLASSIFICATION	2.8125724744211955E-6	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999915097765384	WITHOUT_CLASSIFICATION	8.490223461631159E-6	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999953159335403	WITHOUT_CLASSIFICATION	4.68406645977679E-6	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999948807372	WITHOUT_CLASSIFICATION	5.119262837600211E-9	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999975934267128	WITHOUT_CLASSIFICATION	2.4065732872003027E-6	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999994017199074	WITHOUT_CLASSIFICATION	5.982800925433568E-7	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999945024796317	WITHOUT_CLASSIFICATION	5.497520368291148E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999899588046792	WITHOUT_CLASSIFICATION	1.004119532071018E-5	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999996545897155	WITHOUT_CLASSIFICATION	3.4541028449903605E-6	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999458010177916	WITHOUT_CLASSIFICATION	5.419898220846849E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999989462759677	WITHOUT_CLASSIFICATION	1.0537240321642648E-6	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999954463161724	WITHOUT_CLASSIFICATION	4.553683827536501E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999995518239607	WITHOUT_CLASSIFICATION	4.481760392492442E-7	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999989462759677	WITHOUT_CLASSIFICATION	1.0537240321642648E-6	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999978325959701	WITHOUT_CLASSIFICATION	2.1674040298923713E-5	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999739694186585	WITHOUT_CLASSIFICATION	2.6030581341497194E-4	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.999992486614847	WITHOUT_CLASSIFICATION	7.513385153036152E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999927341911796	WITHOUT_CLASSIFICATION	7.2658088203013965E-6	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999950649305857	WITHOUT_CLASSIFICATION	4.935069414336907E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995395192678	WITHOUT_CLASSIFICATION	4.604807321466704E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995395192678	WITHOUT_CLASSIFICATION	4.604807321466704E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999860570654421	WITHOUT_CLASSIFICATION	1.3942934557929951E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998233680484	WITHOUT_CLASSIFICATION	1.7663195157749237E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999979485106074	WITHOUT_CLASSIFICATION	2.051489392556028E-6	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999993690102019	WITHOUT_CLASSIFICATION	6.309897980033422E-7	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999977396017911	WITHOUT_CLASSIFICATION	2.260398209003971E-6	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999997998504943	WITHOUT_CLASSIFICATION	2.0014950569078496E-6	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999963827476644	WITHOUT_CLASSIFICATION	3.6172523355080276E-6	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999805947567757	WITHOUT_CLASSIFICATION	1.9405243224252155E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999997323609768	WITHOUT_CLASSIFICATION	2.6763902319786407E-7	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999995206754358	WITHOUT_CLASSIFICATION	4.793245641272186E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999829595276	WITHOUT_CLASSIFICATION	1.7040472394996955E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999829595276	WITHOUT_CLASSIFICATION	1.7040472394996955E-7	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998616073669	WITHOUT_CLASSIFICATION	1.383926331966391E-7	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999994218983033	WITHOUT_CLASSIFICATION	5.781016966843627E-7	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999994493881689	WITHOUT_CLASSIFICATION	5.506118312251603E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999829595276	WITHOUT_CLASSIFICATION	1.7040472394996955E-7	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998616073669	WITHOUT_CLASSIFICATION	1.383926331966391E-7	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998616073669	WITHOUT_CLASSIFICATION	1.383926331966391E-7	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999120539022	WITHOUT_CLASSIFICATION	8.794609790989618E-8	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999980191695437	WITHOUT_CLASSIFICATION	1.980830456293822E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999993358592728	WITHOUT_CLASSIFICATION	6.64140727150056E-7	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999999945164539	WITHOUT_CLASSIFICATION	5.483546098361549E-8	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999958552008668	WITHOUT_CLASSIFICATION	4.1447991331506345E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999958552008668	WITHOUT_CLASSIFICATION	4.1447991331506345E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999956193986974	WITHOUT_CLASSIFICATION	4.3806013026284035E-6	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999824018699389	WITHOUT_CLASSIFICATION	1.7598130061114822E-5	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999926801705695	WITHOUT_CLASSIFICATION	7.3198294304217055E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999815390758	WITHOUT_CLASSIFICATION	1.846092420866847E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999815390758	WITHOUT_CLASSIFICATION	1.846092420866847E-7	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999947287032117	WITHOUT_CLASSIFICATION	5.271296788401492E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999934440105568	WITHOUT_CLASSIFICATION	6.55598944324193E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999941021121423	WITHOUT_CLASSIFICATION	5.897887857629376E-6	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999994508206507	WITHOUT_CLASSIFICATION	5.491793492896522E-6	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999982780629956	WITHOUT_CLASSIFICATION	1.7219370045272259E-6	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999533699727	WITHOUT_CLASSIFICATION	4.663002732652349E-8	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999973694486352	WITHOUT_CLASSIFICATION	2.6305513648883576E-6	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999999860801374	WITHOUT_CLASSIFICATION	1.391986260800299E-7	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999194485608345	WITHOUT_CLASSIFICATION	8.055143916553207E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999941021121423	WITHOUT_CLASSIFICATION	5.897887857629376E-6	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999788313343747	WITHOUT_CLASSIFICATION	2.116866562532186E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999906932929225	WITHOUT_CLASSIFICATION	9.306707077463112E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999906932929225	WITHOUT_CLASSIFICATION	9.306707077463112E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999894505448713	WITHOUT_CLASSIFICATION	1.054945512879386E-5	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999927912871219	WITHOUT_CLASSIFICATION	7.20871287806685E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999994302297621	WITHOUT_CLASSIFICATION	5.697702377763768E-7	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999946078213285	WITHOUT_CLASSIFICATION	5.392178671524566E-6	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999308731764804	WITHOUT_CLASSIFICATION	6.912682351955999E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999888773500274	WITHOUT_CLASSIFICATION	1.112264997264747E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.99997720224872	WITHOUT_CLASSIFICATION	2.279775127995478E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999996224667456	WITHOUT_CLASSIFICATION	3.7753325434988746E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999780742532	WITHOUT_CLASSIFICATION	2.1925746789978472E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999780742532	WITHOUT_CLASSIFICATION	2.1925746789978472E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999992021992597	WITHOUT_CLASSIFICATION	7.978007403115276E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999833504082478	WITHOUT_CLASSIFICATION	1.6649591752127045E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999950874095362	WITHOUT_CLASSIFICATION	4.9125904637378555E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.99999788570215	WITHOUT_CLASSIFICATION	2.1142978500840687E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999969490532946	WITHOUT_CLASSIFICATION	3.0509467053197225E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999957246185128	WITHOUT_CLASSIFICATION	4.275381487167469E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999937035706606	WITHOUT_CLASSIFICATION	6.296429339376447E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999892299342724	WITHOUT_CLASSIFICATION	1.077006572758276E-5	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999956988058746	WITHOUT_CLASSIFICATION	4.3011941254752915E-6	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999978518012397	WITHOUT_CLASSIFICATION	2.148198760351173E-6	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999951108726514	WITHOUT_CLASSIFICATION	4.8891273485873835E-6	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999955097587522	WITHOUT_CLASSIFICATION	4.490241247831931E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999965325378333	WITHOUT_CLASSIFICATION	3.467462166732338E-6	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999998403930456	WITHOUT_CLASSIFICATION	1.5960695439454705E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999963254783312	WITHOUT_CLASSIFICATION	3.674521668907435E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999952615525989	WITHOUT_CLASSIFICATION	4.738447401054573E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999952615525989	WITHOUT_CLASSIFICATION	4.738447401054573E-6	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999978099440203	WITHOUT_CLASSIFICATION	2.190055979744556E-6	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999280759062201	WITHOUT_CLASSIFICATION	7.192409377990155E-5	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999986823684703	WITHOUT_CLASSIFICATION	1.3176315296236185E-6	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999382547312908	WITHOUT_CLASSIFICATION	6.174526870921468E-5	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999963669055213	WITHOUT_CLASSIFICATION	3.6330944788175122E-6	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999988960184262	WITHOUT_CLASSIFICATION	1.1039815737567332E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999935331321278	WITHOUT_CLASSIFICATION	6.466867872221018E-6	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999994505236829	WITHOUT_CLASSIFICATION	5.494763170642119E-7	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999812500974229	WITHOUT_CLASSIFICATION	1.8749902577069256E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999980494579672	WITHOUT_CLASSIFICATION	1.9505420327693475E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999984456505095	WITHOUT_CLASSIFICATION	1.5543494904498883E-6	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999839248895546	WITHOUT_CLASSIFICATION	1.607511044547451E-5	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999977516420668	WITHOUT_CLASSIFICATION	2.248357933140924E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999967387060749	WITHOUT_CLASSIFICATION	3.261293925164546E-6	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999997119837469	WITHOUT_CLASSIFICATION	2.880162531016037E-6	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999989610429941	WITHOUT_CLASSIFICATION	1.0389570059122732E-6	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999945608292817	WITHOUT_CLASSIFICATION	5.439170718163115E-6	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999990070557193	WITHOUT_CLASSIFICATION	9.929442807556042E-7	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999981024269121	WITHOUT_CLASSIFICATION	1.8975730879304358E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.99999788570215	WITHOUT_CLASSIFICATION	2.1142978500840687E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.99999788570215	WITHOUT_CLASSIFICATION	2.1142978500840687E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999957246185128	WITHOUT_CLASSIFICATION	4.275381487167469E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999957246185128	WITHOUT_CLASSIFICATION	4.275381487167469E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999965325378333	WITHOUT_CLASSIFICATION	3.467462166732338E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999952615525989	WITHOUT_CLASSIFICATION	4.738447401054573E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999967387060749	WITHOUT_CLASSIFICATION	3.261293925164546E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999992069741719	WITHOUT_CLASSIFICATION	7.930258280211355E-7	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999889931360405	WITHOUT_CLASSIFICATION	1.1006863959557593E-5	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999828049094496	WITHOUT_CLASSIFICATION	1.71950905504472E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999845004248966	WITHOUT_CLASSIFICATION	1.549957510341229E-5	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999815057655409	WITHOUT_CLASSIFICATION	1.8494234459101845E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999992209732511	WITHOUT_CLASSIFICATION	7.79026748896848E-6	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999977860896053	WITHOUT_CLASSIFICATION	2.213910394639817E-6	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999912082649789	WITHOUT_CLASSIFICATION	8.79173502121693E-6	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999897783494602	WITHOUT_CLASSIFICATION	1.0221650539768262E-5	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999583922098187	WITHOUT_CLASSIFICATION	4.160779018134349E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999727710093269	WITHOUT_CLASSIFICATION	2.7228990673113436E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999727710093269	WITHOUT_CLASSIFICATION	2.7228990673113436E-5	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999520976781314	WITHOUT_CLASSIFICATION	4.790232186858755E-5	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999966875585223	WITHOUT_CLASSIFICATION	3.3124414777051645E-6	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999772708552668	WITHOUT_CLASSIFICATION	2.2729144733221476E-5	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999933945637929	WITHOUT_CLASSIFICATION	6.60543620706237E-6	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999926112625939	WITHOUT_CLASSIFICATION	7.388737406100439E-5	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999983872441683	WITHOUT_CLASSIFICATION	1.6127558316986355E-6	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999794900276467	WITHOUT_CLASSIFICATION	2.0509972353242428E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999970682008846	WITHOUT_CLASSIFICATION	2.9317991153549258E-6	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999783888491341	WITHOUT_CLASSIFICATION	2.161115086580685E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999710842473655	WITHOUT_CLASSIFICATION	2.8915752634537335E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999710842473655	WITHOUT_CLASSIFICATION	2.8915752634537335E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999854694014292	WITHOUT_CLASSIFICATION	1.453059857066286E-5	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.99999262484097	WITHOUT_CLASSIFICATION	7.375159030120005E-6	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999871219849908	WITHOUT_CLASSIFICATION	1.2878015009122101E-5	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999898019064093	WITHOUT_CLASSIFICATION	1.019809359080269E-5	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999884526584459	WITHOUT_CLASSIFICATION	1.1547341554028172E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999957246185128	WITHOUT_CLASSIFICATION	4.275381487167469E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999965325378333	WITHOUT_CLASSIFICATION	3.467462166732338E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999963254783312	WITHOUT_CLASSIFICATION	3.674521668907435E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999967387060749	WITHOUT_CLASSIFICATION	3.261293925164546E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999967387060749	WITHOUT_CLASSIFICATION	3.261293925164546E-6	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999998512896752	WITHOUT_CLASSIFICATION	1.4871032479641996E-6	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999998512896752	WITHOUT_CLASSIFICATION	1.4871032479641996E-6	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999925009320252	WITHOUT_CLASSIFICATION	7.4990679747417976E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999983993273771	WITHOUT_CLASSIFICATION	1.6006726228143173E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999983993273771	WITHOUT_CLASSIFICATION	1.6006726228143173E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999940265011427	WITHOUT_CLASSIFICATION	5.9734988574556055E-6	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999938426731035	WITHOUT_CLASSIFICATION	6.157326896402127E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999798220472524	WITHOUT_CLASSIFICATION	2.0177952747538497E-5	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999957181561484	WITHOUT_CLASSIFICATION	4.281843851631899E-6	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999993817995597	WITHOUT_CLASSIFICATION	6.182004402546533E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999858615442077	WITHOUT_CLASSIFICATION	1.4138455792442611E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999858615442077	WITHOUT_CLASSIFICATION	1.4138455792442611E-5	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999609760139431	WITHOUT_CLASSIFICATION	3.90239860568758E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999776398746123	WITHOUT_CLASSIFICATION	2.2360125387673558E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999989756907204	WITHOUT_CLASSIFICATION	1.0243092796325305E-6	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999922467116507	WITHOUT_CLASSIFICATION	7.753288349380287E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999986169535005	WITHOUT_CLASSIFICATION	1.383046499600706E-6	DEFECT
// short	WITHOUT_CLASSIFICATION	0.99999434681792	WITHOUT_CLASSIFICATION	5.65318208000429E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999971507958333	WITHOUT_CLASSIFICATION	2.8492041667036098E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999951691457418	WITHOUT_CLASSIFICATION	4.8308542581577265E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999951691457418	WITHOUT_CLASSIFICATION	4.8308542581577265E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999989331477795	WITHOUT_CLASSIFICATION	1.0668522203859023E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999989331477795	WITHOUT_CLASSIFICATION	1.0668522203859023E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999625572221004	WITHOUT_CLASSIFICATION	3.744277789958779E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999625572221004	WITHOUT_CLASSIFICATION	3.744277789958779E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996753282784	WITHOUT_CLASSIFICATION	3.2467172165451343E-7	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996753282784	WITHOUT_CLASSIFICATION	3.2467172165451343E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999858615442077	WITHOUT_CLASSIFICATION	1.4138455792442611E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999971507958333	WITHOUT_CLASSIFICATION	2.8492041667036098E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999951691457418	WITHOUT_CLASSIFICATION	4.8308542581577265E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999951691457418	WITHOUT_CLASSIFICATION	4.8308542581577265E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999989331477795	WITHOUT_CLASSIFICATION	1.0668522203859023E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999625572221004	WITHOUT_CLASSIFICATION	3.744277789958779E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999625572221004	WITHOUT_CLASSIFICATION	3.744277789958779E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996753282784	WITHOUT_CLASSIFICATION	3.2467172165451343E-7	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999917255786196	WITHOUT_CLASSIFICATION	8.274421380306227E-6	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999830693405907	WITHOUT_CLASSIFICATION	1.6930659409268602E-5	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999932261243767	WITHOUT_CLASSIFICATION	6.77387562335614E-6	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999981176666618	WITHOUT_CLASSIFICATION	1.8823333381752274E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999932406831787	WITHOUT_CLASSIFICATION	6.759316821257073E-6	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999961753897565	WITHOUT_CLASSIFICATION	3.824610243468905E-6	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999079216892345	WITHOUT_CLASSIFICATION	9.207831076563773E-5	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9994328440480981	WITHOUT_CLASSIFICATION	5.67155951901994E-4	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999922297699633	WITHOUT_CLASSIFICATION	7.770230036837188E-6	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999955755764742	WITHOUT_CLASSIFICATION	4.424423525791863E-6	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999994403606798	WITHOUT_CLASSIFICATION	5.596393202979738E-7	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999979190602805	WITHOUT_CLASSIFICATION	2.080939719541211E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999860570654421	WITHOUT_CLASSIFICATION	1.3942934557929951E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999961753897565	WITHOUT_CLASSIFICATION	3.824610243468905E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999694745047105	WITHOUT_CLASSIFICATION	3.052549528945059E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999694745047105	WITHOUT_CLASSIFICATION	3.052549528945059E-5	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999922736613611	WITHOUT_CLASSIFICATION	7.726338638852525E-6	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999993368748468	WITHOUT_CLASSIFICATION	6.631251532386074E-7	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999993368748468	WITHOUT_CLASSIFICATION	6.631251532386074E-7	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999720017809485	WITHOUT_CLASSIFICATION	2.7998219051430757E-5	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999997594480088	WITHOUT_CLASSIFICATION	2.405519912156899E-7	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999973535104371	WITHOUT_CLASSIFICATION	2.646489562969196E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999989892471832	WITHOUT_CLASSIFICATION	1.0107528167991632E-5	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999989892471832	WITHOUT_CLASSIFICATION	1.0107528167991632E-5	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999698356945698	WITHOUT_CLASSIFICATION	3.0164305430156154E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999414220062413	WITHOUT_CLASSIFICATION	5.857799375875813E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999414220062413	WITHOUT_CLASSIFICATION	5.857799375875813E-5	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999997377554163	WITHOUT_CLASSIFICATION	2.6224458374106425E-7	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999983242400956	WITHOUT_CLASSIFICATION	1.6757599043602087E-6	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999979082573995	WITHOUT_CLASSIFICATION	2.091742600438761E-6	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999265404181522	WITHOUT_CLASSIFICATION	7.345958184775093E-5	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999872195148587	WITHOUT_CLASSIFICATION	1.2780485141208507E-5	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999928230258001	WITHOUT_CLASSIFICATION	7.176974199958848E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999889486176896	WITHOUT_CLASSIFICATION	1.1051382310440912E-5	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999987377566044	WITHOUT_CLASSIFICATION	1.2622433956125654E-5	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9480808194531269	WITHOUT_CLASSIFICATION	0.05191918054687301	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999847025072154	WITHOUT_CLASSIFICATION	1.5297492784631636E-5	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9997896657260665	WITHOUT_CLASSIFICATION	2.1033427393347113E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999277170328076	WITHOUT_CLASSIFICATION	7.228296719241003E-5	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999920660431695	WITHOUT_CLASSIFICATION	7.933956830498636E-6	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999964890636879	WITHOUT_CLASSIFICATION	3.5109363122541117E-6	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999997991578676	WITHOUT_CLASSIFICATION	2.0084213249891834E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999277170328076	WITHOUT_CLASSIFICATION	7.228296719241003E-5	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999986432328188	WITHOUT_CLASSIFICATION	1.356767181061344E-6	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997113809057	WITHOUT_CLASSIFICATION	2.8861909434644896E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999572861549268	WITHOUT_CLASSIFICATION	4.271384507319373E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999825074859442	WITHOUT_CLASSIFICATION	1.749251405577505E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.999959249548501	WITHOUT_CLASSIFICATION	4.075045149892575E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999460906238455	WITHOUT_CLASSIFICATION	5.390937615441534E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9997932548093583	WITHOUT_CLASSIFICATION	2.0674519064172077E-4	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999824321096018	WITHOUT_CLASSIFICATION	1.7567890398190826E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999503056909216	WITHOUT_CLASSIFICATION	4.969430907846043E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999986479852983	WITHOUT_CLASSIFICATION	1.3520147016747092E-6	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999969570570392	WITHOUT_CLASSIFICATION	3.042942960750499E-6	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999993786826321	WITHOUT_CLASSIFICATION	6.213173678861908E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999823459284927	WITHOUT_CLASSIFICATION	1.7654071507388404E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999889486176896	WITHOUT_CLASSIFICATION	1.1051382310440912E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999503056909216	WITHOUT_CLASSIFICATION	4.969430907846043E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999969570570392	WITHOUT_CLASSIFICATION	3.042942960750499E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999823459284927	WITHOUT_CLASSIFICATION	1.7654071507388404E-5	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999975233738027	WITHOUT_CLASSIFICATION	2.4766261973547643E-6	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9998975570668267	WITHOUT_CLASSIFICATION	1.0244293317335618E-4	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999987469866308	WITHOUT_CLASSIFICATION	1.2530133692160434E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999746438610395	WITHOUT_CLASSIFICATION	2.535613896041836E-5	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999844036460899	WITHOUT_CLASSIFICATION	1.5596353910183655E-5	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999963037490969	WITHOUT_CLASSIFICATION	3.6962509031880434E-6	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999909408115129	WITHOUT_CLASSIFICATION	9.059188487229518E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999990145894387	WITHOUT_CLASSIFICATION	9.85410561206666E-7	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999929039413507	WITHOUT_CLASSIFICATION	7.096058649354974E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999996596124418	WITHOUT_CLASSIFICATION	3.403875581978704E-6	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999997556547494	WITHOUT_CLASSIFICATION	2.443452505543583E-7	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999976544350316	WITHOUT_CLASSIFICATION	2.345564968300512E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997684053363	WITHOUT_CLASSIFICATION	2.3159466354878995E-7	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999997729179942	WITHOUT_CLASSIFICATION	2.2708200586149457E-7	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999804890900419	WITHOUT_CLASSIFICATION	1.951090995814074E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999483913807803	WITHOUT_CLASSIFICATION	5.160861921957333E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999592360572751	WITHOUT_CLASSIFICATION	4.0763942724811175E-5	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999986353279191	WITHOUT_CLASSIFICATION	1.3646720808575933E-6	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999881426810778	WITHOUT_CLASSIFICATION	1.1857318922094574E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999503056909216	WITHOUT_CLASSIFICATION	4.969430907846043E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999999450400897	WITHOUT_CLASSIFICATION	5.495991029738704E-7	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999938958588882	WITHOUT_CLASSIFICATION	6.104141111714186E-6	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999987558221268	WITHOUT_CLASSIFICATION	1.2441778732298072E-6	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999719681566164	WITHOUT_CLASSIFICATION	2.8031843383621644E-5	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999986883788193	WITHOUT_CLASSIFICATION	1.311621180718382E-6	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999929544350146	WITHOUT_CLASSIFICATION	7.04556498540014E-6	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999871132083542	WITHOUT_CLASSIFICATION	1.2886791645905969E-5	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999164336131	WITHOUT_CLASSIFICATION	8.356638689347202E-8	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999850839802592	WITHOUT_CLASSIFICATION	1.4916019740818596E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999723209908413	WITHOUT_CLASSIFICATION	2.7679009158657557E-5	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999869986987919	WITHOUT_CLASSIFICATION	1.3001301208101882E-5	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999972735922242	WITHOUT_CLASSIFICATION	2.7264077758045505E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999981153674244	WITHOUT_CLASSIFICATION	1.8846325755519434E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999988599431553	WITHOUT_CLASSIFICATION	1.1400568447324383E-6	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999959828397535	WITHOUT_CLASSIFICATION	4.017160246445172E-6	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999995508213323	WITHOUT_CLASSIFICATION	4.4917866777610446E-7	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999952207947128	WITHOUT_CLASSIFICATION	4.779205287285631E-6	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999983794925794	WITHOUT_CLASSIFICATION	1.620507420595183E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999982357631073	WITHOUT_CLASSIFICATION	1.7642368926628575E-6	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999981966460064	WITHOUT_CLASSIFICATION	1.8033539935991452E-6	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999981616897676	WITHOUT_CLASSIFICATION	1.838310232365966E-6	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999983476550849	WITHOUT_CLASSIFICATION	1.6523449150984807E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999925658298465	WITHOUT_CLASSIFICATION	7.434170153510217E-6	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999453043158447	WITHOUT_CLASSIFICATION	5.469568415528694E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999800385206475	WITHOUT_CLASSIFICATION	1.9961479352504184E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999800385206475	WITHOUT_CLASSIFICATION	1.9961479352504184E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999077626685346	WITHOUT_CLASSIFICATION	9.223733146534468E-5	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999964051146459	WITHOUT_CLASSIFICATION	3.594885353946322E-6	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999981986397155	WITHOUT_CLASSIFICATION	1.8013602844900678E-6	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999683996481111	WITHOUT_CLASSIFICATION	3.160035188883502E-5	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999977006986272	WITHOUT_CLASSIFICATION	2.299301372799282E-5	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999417917805736	WITHOUT_CLASSIFICATION	5.820821942644754E-5	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999973218088036	WITHOUT_CLASSIFICATION	2.6781911963056187E-6	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999989334556297	WITHOUT_CLASSIFICATION	1.0665443702529786E-6	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9996145942712185	WITHOUT_CLASSIFICATION	3.85405728781533E-4	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999897554207944	WITHOUT_CLASSIFICATION	1.0244579205619394E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999896843824275	WITHOUT_CLASSIFICATION	1.0315617572444178E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999994774276438	WITHOUT_CLASSIFICATION	5.225723562291801E-7	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999995786605712	WITHOUT_CLASSIFICATION	4.213394288085666E-6	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999782185139549	WITHOUT_CLASSIFICATION	2.1781486045219602E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926962572512	WITHOUT_CLASSIFICATION	7.303742748878538E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969998161444	WITHOUT_CLASSIFICATION	3.000183855497151E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9996202257868422	WITHOUT_CLASSIFICATION	3.797742131577731E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999500362098556	WITHOUT_CLASSIFICATION	4.996379014445491E-5	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999996861944345	WITHOUT_CLASSIFICATION	3.138055655898057E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999842032490279	WITHOUT_CLASSIFICATION	1.579675097207158E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.999998073207834	WITHOUT_CLASSIFICATION	1.926792165971361E-6	DEFECT
// found	WITHOUT_CLASSIFICATION	0.999998073207834	WITHOUT_CLASSIFICATION	1.926792165971361E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999583260006398	WITHOUT_CLASSIFICATION	4.167399936012283E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999583260006398	WITHOUT_CLASSIFICATION	4.167399936012283E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999925658298465	WITHOUT_CLASSIFICATION	7.434170153510217E-6	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9993495216378376	WITHOUT_CLASSIFICATION	6.504783621623307E-4	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999189204487535	WITHOUT_CLASSIFICATION	8.107955124641504E-5	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999164176011733	WITHOUT_CLASSIFICATION	8.358239882670692E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999992021992597	WITHOUT_CLASSIFICATION	7.978007403115276E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999189204487535	WITHOUT_CLASSIFICATION	8.107955124641504E-5	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999164176011733	WITHOUT_CLASSIFICATION	8.358239882670692E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999994823112301	WITHOUT_CLASSIFICATION	5.176887698984604E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999789648039835	WITHOUT_CLASSIFICATION	2.1035196016491248E-5	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999994217327935	WITHOUT_CLASSIFICATION	5.78267206439513E-7	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999993894180004	WITHOUT_CLASSIFICATION	6.105819996946481E-7	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9995048895897758	WITHOUT_CLASSIFICATION	4.951104102241857E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999932353964698	WITHOUT_CLASSIFICATION	6.764603530219847E-6	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999988864287808	WITHOUT_CLASSIFICATION	1.1135712192763374E-6	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999946759025357	WITHOUT_CLASSIFICATION	5.324097464320645E-6	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999303310512604	WITHOUT_CLASSIFICATION	6.966894873958405E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999993679805743	WITHOUT_CLASSIFICATION	6.320194257251274E-7	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999986651375076	WITHOUT_CLASSIFICATION	1.3348624924424358E-6	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999999724221063	WITHOUT_CLASSIFICATION	2.7577893703869983E-7	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999981431444794	WITHOUT_CLASSIFICATION	1.8568555206203207E-6	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999480091340577	WITHOUT_CLASSIFICATION	5.199086594223938E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999992021992597	WITHOUT_CLASSIFICATION	7.978007403115276E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999681478685479	WITHOUT_CLASSIFICATION	3.185213145215596E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999732674730059	WITHOUT_CLASSIFICATION	2.6732526994122854E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999732674730059	WITHOUT_CLASSIFICATION	2.6732526994122854E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999986596366228	WITHOUT_CLASSIFICATION	1.3403633771620303E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999994823112301	WITHOUT_CLASSIFICATION	5.176887698984604E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.999988971644471	WITHOUT_CLASSIFICATION	1.1028355529117822E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999910114040393	WITHOUT_CLASSIFICATION	8.988595960755012E-6	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999995316512595	WITHOUT_CLASSIFICATION	4.6834874053352786E-7	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999898564323376	WITHOUT_CLASSIFICATION	1.0143567662339616E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9994124458427444	WITHOUT_CLASSIFICATION	5.875541572557196E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999994823112301	WITHOUT_CLASSIFICATION	5.176887698984604E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999898564323376	WITHOUT_CLASSIFICATION	1.0143567662339616E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9994124458427444	WITHOUT_CLASSIFICATION	5.875541572557196E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999879768989196	WITHOUT_CLASSIFICATION	1.2023101080440684E-5	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999979172997125	WITHOUT_CLASSIFICATION	2.082700287499145E-5	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999998172963968	WITHOUT_CLASSIFICATION	1.8270360321045653E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999994823112301	WITHOUT_CLASSIFICATION	5.176887698984604E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999994823112301	WITHOUT_CLASSIFICATION	5.176887698984604E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999906601232342	WITHOUT_CLASSIFICATION	9.339876765680863E-6	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999940206059994	WITHOUT_CLASSIFICATION	5.979394000641659E-6	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999759122052945	WITHOUT_CLASSIFICATION	2.4087794705562572E-5	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999883067092925	WITHOUT_CLASSIFICATION	1.1693290707411006E-5	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999950725716761	WITHOUT_CLASSIFICATION	4.927428323976837E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999955515576232	WITHOUT_CLASSIFICATION	4.44844237683159E-6	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999995369982788	WITHOUT_CLASSIFICATION	4.6300172122114654E-7	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999996164568095	WITHOUT_CLASSIFICATION	3.8354319054052495E-7	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999999637236289	WITHOUT_CLASSIFICATION	3.6276371101986834E-7	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.999991466949424	WITHOUT_CLASSIFICATION	8.533050575988458E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999714273634386	WITHOUT_CLASSIFICATION	2.857263656137078E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999994746445543	WITHOUT_CLASSIFICATION	5.253554456877962E-7	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999974310612074	WITHOUT_CLASSIFICATION	2.5689387926008273E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999997760769909	WITHOUT_CLASSIFICATION	2.2392300912708826E-7	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999943083370015	WITHOUT_CLASSIFICATION	5.69166299849517E-5	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999973843961364	WITHOUT_CLASSIFICATION	2.6156038636952876E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999392606870979	WITHOUT_CLASSIFICATION	6.073931290193088E-5	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999679268059056	WITHOUT_CLASSIFICATION	3.2073194094387944E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999823989553057	WITHOUT_CLASSIFICATION	1.7601044694229247E-5	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.99997692934827	WITHOUT_CLASSIFICATION	2.3070651729987883E-5	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999630918491249	WITHOUT_CLASSIFICATION	3.690815087511106E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999867248903963	WITHOUT_CLASSIFICATION	1.3275109603653043E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999867248903963	WITHOUT_CLASSIFICATION	1.3275109603653043E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999392606870979	WITHOUT_CLASSIFICATION	6.073931290193088E-5	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999855920393347	WITHOUT_CLASSIFICATION	1.4407960665223221E-5	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999991070223572	WITHOUT_CLASSIFICATION	8.929776429574426E-7	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999910785734341	WITHOUT_CLASSIFICATION	8.921426565891123E-6	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999952972647121	WITHOUT_CLASSIFICATION	4.7027352878577205E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999859891949499	WITHOUT_CLASSIFICATION	1.4010805050184715E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999985583047526	WITHOUT_CLASSIFICATION	1.441695247375172E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999810021094782	WITHOUT_CLASSIFICATION	1.8997890521794507E-5	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999944813668361	WITHOUT_CLASSIFICATION	5.518633163940139E-6	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998844640661	WITHOUT_CLASSIFICATION	1.1553593386486403E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999995807996915	WITHOUT_CLASSIFICATION	4.192003085021058E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999983992127077	WITHOUT_CLASSIFICATION	1.6007872922355428E-6	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9993862942327671	WITHOUT_CLASSIFICATION	6.137057672328931E-4	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9997476829148375	WITHOUT_CLASSIFICATION	2.5231708516258337E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999996459353078	WITHOUT_CLASSIFICATION	3.5406469221757895E-7	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999756648914	WITHOUT_CLASSIFICATION	2.4335108593694955E-7	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999826362377068	WITHOUT_CLASSIFICATION	1.7363762293219822E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999988967438176	WITHOUT_CLASSIFICATION	1.1032561824496472E-6	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999486386002594	WITHOUT_CLASSIFICATION	5.136139974058747E-5	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980898189523	WITHOUT_CLASSIFICATION	1.9101810477301504E-6	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999996870821489	WITHOUT_CLASSIFICATION	3.1291785108267117E-7	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999994691621431	WITHOUT_CLASSIFICATION	5.308378569413992E-7	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999478373297	WITHOUT_CLASSIFICATION	5.216267034014353E-8	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989808664702	WITHOUT_CLASSIFICATION	1.019133529833211E-6	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951474638153	WITHOUT_CLASSIFICATION	4.852536184651199E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947966594307	WITHOUT_CLASSIFICATION	5.2033405693178516E-6	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995541638328	WITHOUT_CLASSIFICATION	4.45836167195529E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892814124669	WITHOUT_CLASSIFICATION	1.0718587533052876E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942266218894	WITHOUT_CLASSIFICATION	5.773378110664424E-6	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900109555538	WITHOUT_CLASSIFICATION	9.989044446154746E-6	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997088004721	WITHOUT_CLASSIFICATION	2.911995279046749E-6	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999976487663649	WITHOUT_CLASSIFICATION	2.3512336350726608E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999972177388263	WITHOUT_CLASSIFICATION	2.7822611737191497E-6	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982632644825	WITHOUT_CLASSIFICATION	1.736735517500053E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985845098655	WITHOUT_CLASSIFICATION	1.4154901344704095E-6	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998774861597	WITHOUT_CLASSIFICATION	1.2251384031011857E-7	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991949175724	WITHOUT_CLASSIFICATION	8.05082427682088E-7	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932089589949	WITHOUT_CLASSIFICATION	6.791041005024476E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987585336342	WITHOUT_CLASSIFICATION	1.2414663658253194E-6	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985157772484	WITHOUT_CLASSIFICATION	1.4842227516065632E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963625545593	WITHOUT_CLASSIFICATION	3.6374454407705507E-6	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999996266475658	WITHOUT_CLASSIFICATION	3.7335243429245854E-7	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947418366952	WITHOUT_CLASSIFICATION	5.258163304821226E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999984395780344	WITHOUT_CLASSIFICATION	1.560421965596479E-5	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999916661071938	WITHOUT_CLASSIFICATION	8.333892806248175E-6	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999501143203	WITHOUT_CLASSIFICATION	4.988567968645878E-8	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999740762441668	WITHOUT_CLASSIFICATION	2.592375583319352E-5	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.999987821428056	WITHOUT_CLASSIFICATION	1.2178571943996554E-5	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.99999841799631	WITHOUT_CLASSIFICATION	1.5820036899741681E-6	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999940760232835	WITHOUT_CLASSIFICATION	5.92397671648427E-6	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999664427998539	WITHOUT_CLASSIFICATION	3.3557200146079686E-5	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999543394926032	WITHOUT_CLASSIFICATION	4.5660507396825456E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998512386643102	WITHOUT_CLASSIFICATION	1.4876133568974414E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999384142469756	WITHOUT_CLASSIFICATION	6.158575302438674E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999809913754012	WITHOUT_CLASSIFICATION	1.9008624598746647E-5	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999998965391854	WITHOUT_CLASSIFICATION	1.0346081457170868E-7	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999970591832742	WITHOUT_CLASSIFICATION	2.9408167258084665E-5	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999967562062637	WITHOUT_CLASSIFICATION	3.2437937363341074E-6	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999929527064164	WITHOUT_CLASSIFICATION	7.047293583630745E-6	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999997373318331	WITHOUT_CLASSIFICATION	2.626681668954655E-6	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881293390194	WITHOUT_CLASSIFICATION	1.1870660980527695E-5	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895966132317	WITHOUT_CLASSIFICATION	1.0403386768209983E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855354033723	WITHOUT_CLASSIFICATION	1.4464596627695805E-5	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996462854037	WITHOUT_CLASSIFICATION	3.537145962906027E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9998865046836445	WITHOUT_CLASSIFICATION	1.1349531635555834E-4	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999824248167546	WITHOUT_CLASSIFICATION	1.7575183245424016E-5	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999973960918963	WITHOUT_CLASSIFICATION	2.6039081037521454E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999940463812617	WITHOUT_CLASSIFICATION	5.953618738229215E-6	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994090505547	WITHOUT_CLASSIFICATION	5.909494453022502E-6	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999997175046834	WITHOUT_CLASSIFICATION	2.824953165216641E-7	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999979665722546	WITHOUT_CLASSIFICATION	2.033427745390374E-6	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999961954883608	WITHOUT_CLASSIFICATION	3.8045116390965217E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999985183343026	WITHOUT_CLASSIFICATION	1.4816656974658267E-6	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999980953665958	WITHOUT_CLASSIFICATION	1.904633404200543E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999991401811478	WITHOUT_CLASSIFICATION	8.598188523027621E-7	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999942641208678	WITHOUT_CLASSIFICATION	5.735879132118825E-6	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999988066488034	WITHOUT_CLASSIFICATION	1.1933511965514187E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999740762441668	WITHOUT_CLASSIFICATION	2.592375583319352E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999898874174614	WITHOUT_CLASSIFICATION	1.0112582538601276E-5	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999987242187021	WITHOUT_CLASSIFICATION	1.2757812978935024E-6	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999989867555759	WITHOUT_CLASSIFICATION	1.0132444241183397E-6	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999892941963224	WITHOUT_CLASSIFICATION	1.0705803677544041E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999966214342642	WITHOUT_CLASSIFICATION	3.3785657358096683E-6	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999991454781864	WITHOUT_CLASSIFICATION	8.545218135165929E-7	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9996602678096375	WITHOUT_CLASSIFICATION	3.3973219036252645E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999986945740035	WITHOUT_CLASSIFICATION	1.3054259964742642E-6	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999891543648936	WITHOUT_CLASSIFICATION	1.0845635106572175E-5	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999961816541264	WITHOUT_CLASSIFICATION	3.818345873490295E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999917270322471	WITHOUT_CLASSIFICATION	8.272967752864833E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999975747164948	WITHOUT_CLASSIFICATION	2.4252835052143778E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999984385444051	WITHOUT_CLASSIFICATION	1.5614555949231798E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999994349969475	WITHOUT_CLASSIFICATION	5.650030524495172E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999912052779621	WITHOUT_CLASSIFICATION	8.79472203783531E-6	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999964351014556	WITHOUT_CLASSIFICATION	3.5648985442658423E-6	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.99999893210216	WITHOUT_CLASSIFICATION	1.067897840066306E-6	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999812951204103	WITHOUT_CLASSIFICATION	1.8704879589596294E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999983353242258	WITHOUT_CLASSIFICATION	1.6646757743171634E-6	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999959120251412	WITHOUT_CLASSIFICATION	4.087974858859117E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999990473898813	WITHOUT_CLASSIFICATION	9.526101186691165E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999958075403593	WITHOUT_CLASSIFICATION	4.192459640679167E-6	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999757761048447	WITHOUT_CLASSIFICATION	2.4223895155409753E-5	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999981534110514	WITHOUT_CLASSIFICATION	1.8465889487351693E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999974586813549	WITHOUT_CLASSIFICATION	2.5413186450735863E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999987389360491	WITHOUT_CLASSIFICATION	1.261063950892771E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9999213888541154	WITHOUT_CLASSIFICATION	7.861114588460793E-5	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999975092134307	WITHOUT_CLASSIFICATION	2.4907865692486565E-6	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999924196699991	WITHOUT_CLASSIFICATION	7.580330000884923E-6	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999984378249837	WITHOUT_CLASSIFICATION	1.5621750163424474E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999740762441668	WITHOUT_CLASSIFICATION	2.592375583319352E-5	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999952369583478	WITHOUT_CLASSIFICATION	4.763041652206971E-6	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.999999953883783	WITHOUT_CLASSIFICATION	4.611621704117842E-8	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999969118612579	WITHOUT_CLASSIFICATION	3.088138742018335E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999740762441668	WITHOUT_CLASSIFICATION	2.592375583319352E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999958744037574	WITHOUT_CLASSIFICATION	4.1255962425416594E-6	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999990473898813	WITHOUT_CLASSIFICATION	9.526101186691165E-7	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999584905354979	WITHOUT_CLASSIFICATION	4.150946450211514E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998919954947534	WITHOUT_CLASSIFICATION	1.0800450524658119E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999778026436601	WITHOUT_CLASSIFICATION	2.219735633984131E-5	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999961816541264	WITHOUT_CLASSIFICATION	3.818345873490295E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999917270322471	WITHOUT_CLASSIFICATION	8.272967752864833E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999975747164948	WITHOUT_CLASSIFICATION	2.4252835052143778E-6	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999996854011867	WITHOUT_CLASSIFICATION	3.145988134091054E-7	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999974109394476	WITHOUT_CLASSIFICATION	2.5890605524266166E-6	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999996688282288	WITHOUT_CLASSIFICATION	3.3117177116741467E-7	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999956470640909	WITHOUT_CLASSIFICATION	4.3529359090093606E-6	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999843189664964	WITHOUT_CLASSIFICATION	1.5681033503556498E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999740762441668	WITHOUT_CLASSIFICATION	2.592375583319352E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999984385444051	WITHOUT_CLASSIFICATION	1.5614555949231798E-6	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999994349969475	WITHOUT_CLASSIFICATION	5.650030524495172E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998069635925	WITHOUT_CLASSIFICATION	1.9303640757368705E-7	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998749211508	WITHOUT_CLASSIFICATION	1.250788491804897E-7	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999976474997369	WITHOUT_CLASSIFICATION	2.352500263178787E-6	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999960392567646	WITHOUT_CLASSIFICATION	3.9607432353315646E-6	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999979940004408	WITHOUT_CLASSIFICATION	2.0059995591454154E-6	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999920397211779	WITHOUT_CLASSIFICATION	7.960278822186271E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963625545593	WITHOUT_CLASSIFICATION	3.6374454407705507E-6	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999959602634578	WITHOUT_CLASSIFICATION	4.039736542244656E-6	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999823926264355	WITHOUT_CLASSIFICATION	1.7607373564422515E-5	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999931494868036	WITHOUT_CLASSIFICATION	6.850513196459881E-6	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999993875128814	WITHOUT_CLASSIFICATION	6.12487118617898E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999943437277208	WITHOUT_CLASSIFICATION	5.65627227921131E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892814124669	WITHOUT_CLASSIFICATION	1.0718587533052876E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942266218894	WITHOUT_CLASSIFICATION	5.773378110664424E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985845098655	WITHOUT_CLASSIFICATION	1.4154901344704095E-6	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999943437277208	WITHOUT_CLASSIFICATION	5.65627227921131E-6	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999989843726821	WITHOUT_CLASSIFICATION	1.015627318020984E-6	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999999613262209	WITHOUT_CLASSIFICATION	3.867377911113222E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987523296885	WITHOUT_CLASSIFICATION	1.2476703115074218E-6	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999875052097406	WITHOUT_CLASSIFICATION	1.2494790259406038E-5	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999996817540636	WITHOUT_CLASSIFICATION	3.1824593641902533E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999131639068924	WITHOUT_CLASSIFICATION	8.683609310752468E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998774861597	WITHOUT_CLASSIFICATION	1.2251384031011857E-7	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987585336342	WITHOUT_CLASSIFICATION	1.2414663658253194E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999985183343026	WITHOUT_CLASSIFICATION	1.4816656974658267E-6	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.999998304418635	WITHOUT_CLASSIFICATION	1.6955813650264573E-6	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999950243643073	WITHOUT_CLASSIFICATION	4.9756356927404285E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999964434058706	WITHOUT_CLASSIFICATION	3.5565941294601013E-6	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999812070319901	WITHOUT_CLASSIFICATION	1.8792968009894663E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999981350986812	WITHOUT_CLASSIFICATION	1.8649013187525875E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999990944897174	WITHOUT_CLASSIFICATION	9.055102827566025E-7	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999441019706472	WITHOUT_CLASSIFICATION	5.5898029352696196E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999688231978826	WITHOUT_CLASSIFICATION	3.117680211736605E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998844640661	WITHOUT_CLASSIFICATION	1.1553593386486403E-7	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999991553341215	WITHOUT_CLASSIFICATION	8.446658784897793E-6	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.99999694820577	WITHOUT_CLASSIFICATION	3.051794230028342E-6	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999995818160826	WITHOUT_CLASSIFICATION	4.1818391739375827E-7	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999999781570635	WITHOUT_CLASSIFICATION	2.184293651331649E-7	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998301422601	WITHOUT_CLASSIFICATION	1.698577399075299E-7	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999903529859787	WITHOUT_CLASSIFICATION	9.64701402122397E-6	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952199777645	WITHOUT_CLASSIFICATION	4.780022235488922E-6	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957336496861	WITHOUT_CLASSIFICATION	4.266350313912053E-6	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999950811927214	WITHOUT_CLASSIFICATION	4.918807278550885E-6	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999977078818263	WITHOUT_CLASSIFICATION	2.292118173624629E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999546353384298	WITHOUT_CLASSIFICATION	4.5364661570211565E-5	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999473762613879	WITHOUT_CLASSIFICATION	5.262373861214777E-5	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999747010672042	WITHOUT_CLASSIFICATION	2.5298932795729287E-5	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999461396755236	WITHOUT_CLASSIFICATION	5.3860324476412715E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999858055695838	WITHOUT_CLASSIFICATION	1.419443041615073E-5	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999998383824726	WITHOUT_CLASSIFICATION	1.6161752740702177E-6	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999970529959418	WITHOUT_CLASSIFICATION	2.9470040580850824E-6	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999304546820134	WITHOUT_CLASSIFICATION	6.954531798670583E-5	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999661215815684	WITHOUT_CLASSIFICATION	3.3878418431612164E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999979965499012	WITHOUT_CLASSIFICATION	2.003450098882435E-6	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994866545635	WITHOUT_CLASSIFICATION	5.133454365414435E-7	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999992109338828	WITHOUT_CLASSIFICATION	7.890661172860968E-7	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999328157956	WITHOUT_CLASSIFICATION	6.718420438519571E-8	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999999410006531	WITHOUT_CLASSIFICATION	5.899934689377521E-7	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999994087291275	WITHOUT_CLASSIFICATION	5.912708724561051E-7	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999911965045518	WITHOUT_CLASSIFICATION	8.803495448075285E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999924188900825	WITHOUT_CLASSIFICATION	7.581109917580424E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999996157029032	WITHOUT_CLASSIFICATION	3.842970967900153E-7	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999990050249852	WITHOUT_CLASSIFICATION	9.94975014813746E-7	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999990684600959	WITHOUT_CLASSIFICATION	9.315399041256933E-7	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999997105040874	WITHOUT_CLASSIFICATION	2.894959124983024E-7	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999976076300139	WITHOUT_CLASSIFICATION	2.392369986012062E-6	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999951939501344	WITHOUT_CLASSIFICATION	4.8060498657224795E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999736697728508	WITHOUT_CLASSIFICATION	2.633022714909306E-5	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999951312864912	WITHOUT_CLASSIFICATION	4.868713508774655E-6	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999956435710466	WITHOUT_CLASSIFICATION	4.356428953307011E-6	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999682944517	WITHOUT_CLASSIFICATION	3.17055482416916E-8	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999996582832269	WITHOUT_CLASSIFICATION	3.417167730234795E-7	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999859302313321	WITHOUT_CLASSIFICATION	1.4069768667941196E-5	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999896286184	WITHOUT_CLASSIFICATION	1.0371381599322977E-8	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999988646350125	WITHOUT_CLASSIFICATION	1.13536498748428E-6	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999896014693694	WITHOUT_CLASSIFICATION	1.039853063043507E-5	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999778956740375	WITHOUT_CLASSIFICATION	2.2104325962464513E-5	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999874020515874	WITHOUT_CLASSIFICATION	1.2597948412653664E-5	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999741807323822	WITHOUT_CLASSIFICATION	2.581926761788008E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999988751647456	WITHOUT_CLASSIFICATION	1.1248352543204635E-6	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999999454234636	WITHOUT_CLASSIFICATION	5.457653639617585E-7	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999999795811792	WITHOUT_CLASSIFICATION	2.0418820798132016E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999966129932708	WITHOUT_CLASSIFICATION	3.387006729190824E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999997182187251	WITHOUT_CLASSIFICATION	2.817812748427527E-7	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999997630754083	WITHOUT_CLASSIFICATION	2.3692459169643593E-7	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999994779285327	WITHOUT_CLASSIFICATION	5.220714671745805E-7	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999966268773433	WITHOUT_CLASSIFICATION	3.3731226567776342E-6	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999977381783614	WITHOUT_CLASSIFICATION	2.261821638652333E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999775086160977	WITHOUT_CLASSIFICATION	2.2491383902253637E-5	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9997683944334498	WITHOUT_CLASSIFICATION	2.3160556655027465E-4	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999989392365097	WITHOUT_CLASSIFICATION	1.0607634902514978E-6	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999935830689799	WITHOUT_CLASSIFICATION	6.4169310201002995E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999953827354741	WITHOUT_CLASSIFICATION	4.617264526006595E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999931879286807	WITHOUT_CLASSIFICATION	6.812071319160718E-6	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999785311411887	WITHOUT_CLASSIFICATION	2.1468858811360675E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999802221180819	WITHOUT_CLASSIFICATION	1.977788191801596E-5	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999866382420649	WITHOUT_CLASSIFICATION	1.336175793508199E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9997462972977058	WITHOUT_CLASSIFICATION	2.537027022942461E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999926006220756	WITHOUT_CLASSIFICATION	7.399377924450016E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9998840114080001	WITHOUT_CLASSIFICATION	1.1598859199996488E-4	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999998037224139	WITHOUT_CLASSIFICATION	1.96277586005125E-7	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999923444270304	WITHOUT_CLASSIFICATION	7.655572969639508E-6	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999806856074256	WITHOUT_CLASSIFICATION	1.931439257445602E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999858677815101	WITHOUT_CLASSIFICATION	1.4132218489783403E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999978354137317	WITHOUT_CLASSIFICATION	2.1645862682731903E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999933698744609	WITHOUT_CLASSIFICATION	6.630125539103568E-6	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999573937871119	WITHOUT_CLASSIFICATION	4.260621288805762E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999973349087827	WITHOUT_CLASSIFICATION	2.665091217273701E-6	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999996207883644	WITHOUT_CLASSIFICATION	3.792116357619079E-7	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.999990260140923	WITHOUT_CLASSIFICATION	9.739859076982622E-6	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999969105522588	WITHOUT_CLASSIFICATION	3.0894477411717807E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999986902452505	WITHOUT_CLASSIFICATION	1.309754749506046E-6	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999998601344346	WITHOUT_CLASSIFICATION	1.3986556533142843E-7	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999973911489024	WITHOUT_CLASSIFICATION	2.6088510975159215E-6	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999129953756971	WITHOUT_CLASSIFICATION	8.700462430293161E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999988474454262	WITHOUT_CLASSIFICATION	1.1525545737853233E-6	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999264539594624	WITHOUT_CLASSIFICATION	7.354604053763318E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999920958845318	WITHOUT_CLASSIFICATION	7.904115468279814E-6	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999744283338634	WITHOUT_CLASSIFICATION	2.5571666136578416E-5	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999294464245534	WITHOUT_CLASSIFICATION	7.055357544654176E-5	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999966503411444	WITHOUT_CLASSIFICATION	3.349658855632561E-6	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.999989570248182	WITHOUT_CLASSIFICATION	1.0429751817878118E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999939291501555	WITHOUT_CLASSIFICATION	6.070849844491048E-6	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999932252467	WITHOUT_CLASSIFICATION	6.774753342041571E-9	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999496524689512	WITHOUT_CLASSIFICATION	5.034753104871846E-5	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999860601350721	WITHOUT_CLASSIFICATION	1.3939864927981499E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999990737521457	WITHOUT_CLASSIFICATION	9.262478543087412E-6	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999496524689512	WITHOUT_CLASSIFICATION	5.034753104871846E-5	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999994373660839	WITHOUT_CLASSIFICATION	5.62633916062978E-7	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999953683704097	WITHOUT_CLASSIFICATION	4.631629590324146E-6	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999987873208975	WITHOUT_CLASSIFICATION	1.2126791025361065E-6	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999804512775835	WITHOUT_CLASSIFICATION	1.954872241656717E-5	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999836217977572	WITHOUT_CLASSIFICATION	1.637820224274619E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999998774410388	WITHOUT_CLASSIFICATION	1.225589611286083E-7	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998443330808536	WITHOUT_CLASSIFICATION	1.5566691914642824E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999998002727407	WITHOUT_CLASSIFICATION	1.997272594210798E-7	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999612252443858	WITHOUT_CLASSIFICATION	3.877475561412249E-5	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999685293034501	WITHOUT_CLASSIFICATION	3.147069654983002E-5	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999995822841209	WITHOUT_CLASSIFICATION	4.1771587911372936E-7	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999995239439241	WITHOUT_CLASSIFICATION	4.760560760038876E-7	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999984741279264	WITHOUT_CLASSIFICATION	1.5258720736413089E-6	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999997124747553	WITHOUT_CLASSIFICATION	2.8752524470178277E-7	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999907097201911	WITHOUT_CLASSIFICATION	9.290279808898476E-5	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999675155761603	WITHOUT_CLASSIFICATION	3.2484423839711276E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998378028791143	WITHOUT_CLASSIFICATION	1.6219712088577634E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998378028791143	WITHOUT_CLASSIFICATION	1.6219712088577634E-4	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999493152086774	WITHOUT_CLASSIFICATION	5.068479132262187E-5	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9998854925623889	WITHOUT_CLASSIFICATION	1.1450743761110108E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998485026947888	WITHOUT_CLASSIFICATION	1.5149730521118519E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.999939241394492	WITHOUT_CLASSIFICATION	6.075860550814842E-5	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999994136900346	WITHOUT_CLASSIFICATION	5.863099653085122E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9945313559270557	WITHOUT_CLASSIFICATION	0.005468644072944287	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9999105937003303	WITHOUT_CLASSIFICATION	8.940629966963003E-5	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998488744644	WITHOUT_CLASSIFICATION	1.5112553566728052E-7	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999955887921923	WITHOUT_CLASSIFICATION	4.411207807685319E-6	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999669071604301	WITHOUT_CLASSIFICATION	3.3092839569922015E-5	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999999608704446	WITHOUT_CLASSIFICATION	3.912955539995238E-7	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999728620662	WITHOUT_CLASSIFICATION	2.713793384958223E-8	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999932051500003	WITHOUT_CLASSIFICATION	6.794849999616605E-6	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999993187544521	WITHOUT_CLASSIFICATION	6.812455478930756E-6	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999912661640872	WITHOUT_CLASSIFICATION	8.733835912891612E-6	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999903529859787	WITHOUT_CLASSIFICATION	9.64701402122397E-6	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999959651294474	WITHOUT_CLASSIFICATION	4.034870552611628E-6	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999995882088475	WITHOUT_CLASSIFICATION	4.117911525018694E-6	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9997506928173745	WITHOUT_CLASSIFICATION	2.493071826255375E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999954471452022	WITHOUT_CLASSIFICATION	4.552854797806394E-6	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9997120445281114	WITHOUT_CLASSIFICATION	2.879554718886279E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.99997891364093	WITHOUT_CLASSIFICATION	2.108635907005692E-5	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999997395792823	WITHOUT_CLASSIFICATION	2.6042071768001934E-7	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999994565969215	WITHOUT_CLASSIFICATION	5.434030786323208E-7	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999996488607714	WITHOUT_CLASSIFICATION	3.5113922848410994E-7	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999997010326503	WITHOUT_CLASSIFICATION	2.9896734965261586E-7	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999069758277	WITHOUT_CLASSIFICATION	9.302417224592063E-8	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999993373757663	WITHOUT_CLASSIFICATION	6.626242338148164E-7	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999958268899856	WITHOUT_CLASSIFICATION	4.173110014379617E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999866480187887	WITHOUT_CLASSIFICATION	1.335198121134385E-5	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999982484674874	WITHOUT_CLASSIFICATION	1.7515325125590749E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999785782893968	WITHOUT_CLASSIFICATION	2.1421710603089772E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9999776770850549	WITHOUT_CLASSIFICATION	2.232291494503839E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999953824993039	WITHOUT_CLASSIFICATION	4.617500696108872E-5	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999953399259342	WITHOUT_CLASSIFICATION	4.660074065798201E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999850863990648	WITHOUT_CLASSIFICATION	1.4913600935277574E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999987085438615	WITHOUT_CLASSIFICATION	1.2914561384591342E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999679967377528	WITHOUT_CLASSIFICATION	3.200326224719207E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999996448923081	WITHOUT_CLASSIFICATION	3.551076919124134E-7	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999961003465401	WITHOUT_CLASSIFICATION	3.899653459894015E-5	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9995455840621378	WITHOUT_CLASSIFICATION	4.544159378621716E-4	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999988251786911	WITHOUT_CLASSIFICATION	1.1748213089296656E-6	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999879909945699	WITHOUT_CLASSIFICATION	1.20090054301447E-5	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999998557432759	WITHOUT_CLASSIFICATION	1.4425672410954045E-6	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9998039635849068	WITHOUT_CLASSIFICATION	1.9603641509317044E-4	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999984139582485	WITHOUT_CLASSIFICATION	1.5860417515043332E-6	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963201419828	WITHOUT_CLASSIFICATION	3.679858017295597E-6	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953877716019	WITHOUT_CLASSIFICATION	4.6122283981538605E-6	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982935792951	WITHOUT_CLASSIFICATION	1.7064207048940829E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999991919271489	WITHOUT_CLASSIFICATION	8.080728510137403E-7	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999990379859803	WITHOUT_CLASSIFICATION	9.620140196395967E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999688231978826	WITHOUT_CLASSIFICATION	3.117680211736605E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999688231978826	WITHOUT_CLASSIFICATION	3.117680211736605E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999894619295866	WITHOUT_CLASSIFICATION	1.0538070413329176E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.999999991946322	WITHOUT_CLASSIFICATION	8.053677983512574E-9	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999084776954703	WITHOUT_CLASSIFICATION	9.152230452965352E-5	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938128121758	WITHOUT_CLASSIFICATION	6.1871878241761E-6	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999084776954703	WITHOUT_CLASSIFICATION	9.152230452965352E-5	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999168833438877	WITHOUT_CLASSIFICATION	8.311665611221822E-5	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999998466242703	WITHOUT_CLASSIFICATION	1.5337572969484706E-6	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.999996508333411	WITHOUT_CLASSIFICATION	3.4916665889953995E-6	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999994049122896	WITHOUT_CLASSIFICATION	5.950877104062962E-7	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999776556374373	WITHOUT_CLASSIFICATION	2.2344362562725673E-5	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999546645929882	WITHOUT_CLASSIFICATION	4.533540701185354E-5	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999990306922315	WITHOUT_CLASSIFICATION	9.693077685579527E-7	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999502610288563	WITHOUT_CLASSIFICATION	4.973897114367314E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999994505003532	WITHOUT_CLASSIFICATION	5.494996467517254E-7	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999997810746996	WITHOUT_CLASSIFICATION	2.1892530037318272E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999940563465983	WITHOUT_CLASSIFICATION	5.943653401628602E-6	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999996409101344	WITHOUT_CLASSIFICATION	3.59089865558864E-7	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999438779398857	WITHOUT_CLASSIFICATION	5.6122060114292534E-5	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9938468000988021	WITHOUT_CLASSIFICATION	0.006153199901197861	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999730926166241	WITHOUT_CLASSIFICATION	2.6907383375808982E-5	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999223323702	WITHOUT_CLASSIFICATION	7.766762976015595E-8	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999636771923295	WITHOUT_CLASSIFICATION	3.632280767059949E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999636771923295	WITHOUT_CLASSIFICATION	3.632280767059949E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999907296456421	WITHOUT_CLASSIFICATION	9.270354357991376E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999992354010453	WITHOUT_CLASSIFICATION	7.645989546018278E-7	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999946607727168	WITHOUT_CLASSIFICATION	5.339227283178833E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999806155339	WITHOUT_CLASSIFICATION	1.9384466096896817E-8	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999112044432	WITHOUT_CLASSIFICATION	8.879555684888954E-8	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999996748919814	WITHOUT_CLASSIFICATION	3.2510801861313506E-7	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9997560705248981	WITHOUT_CLASSIFICATION	2.4392947510181885E-4	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999980637330294	WITHOUT_CLASSIFICATION	1.9362669706296646E-6	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999978574375675	WITHOUT_CLASSIFICATION	2.1425624325455715E-6	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999997079082901	WITHOUT_CLASSIFICATION	2.920917099056039E-6	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999353001815	WITHOUT_CLASSIFICATION	6.469981855415111E-8	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999985650299	WITHOUT_CLASSIFICATION	1.4349700843301571E-9	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999999844734902	WITHOUT_CLASSIFICATION	1.552650980385121E-7	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999994620513866	WITHOUT_CLASSIFICATION	5.37948613524837E-7	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999994303827918	WITHOUT_CLASSIFICATION	5.696172082177865E-7	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999902951079984	WITHOUT_CLASSIFICATION	9.704892001639887E-6	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999998554182681	WITHOUT_CLASSIFICATION	1.4458173190329798E-7	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999963699461604	WITHOUT_CLASSIFICATION	3.6300538395696205E-6	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999861154674703	WITHOUT_CLASSIFICATION	1.3884532529746897E-5	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999996110189856	WITHOUT_CLASSIFICATION	3.889810143757655E-7	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.999997581916033	WITHOUT_CLASSIFICATION	2.4180839669791335E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999990832009993	WITHOUT_CLASSIFICATION	9.167990008133259E-7	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999997795510019	WITHOUT_CLASSIFICATION	2.2044899812075176E-7	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999985457702337	WITHOUT_CLASSIFICATION	1.4542297662621196E-6	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999927264357792	WITHOUT_CLASSIFICATION	7.273564220847688E-6	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999886489611992	WITHOUT_CLASSIFICATION	1.1351038800878602E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999975408032017	WITHOUT_CLASSIFICATION	2.459196798316616E-6	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999380360179861	WITHOUT_CLASSIFICATION	6.196398201394237E-5	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999882140420064	WITHOUT_CLASSIFICATION	1.1785957993536702E-5	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998159990599904	WITHOUT_CLASSIFICATION	1.8400094000962708E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999861627647997	WITHOUT_CLASSIFICATION	1.3837235200233765E-5	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999959770686883	WITHOUT_CLASSIFICATION	4.02293131181682E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9987524600945015	WITHOUT_CLASSIFICATION	0.001247539905498431	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999095469628332	WITHOUT_CLASSIFICATION	9.045303716689477E-5	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999830966349863	WITHOUT_CLASSIFICATION	1.6903365013741557E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999988846340572	WITHOUT_CLASSIFICATION	1.115365942740362E-6	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999931559612286	WITHOUT_CLASSIFICATION	6.844038771300774E-6	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999720757390194	WITHOUT_CLASSIFICATION	2.792426098060412E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999994628823092	WITHOUT_CLASSIFICATION	5.371176907720074E-7	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999942991053128	WITHOUT_CLASSIFICATION	5.700894687257228E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999965086899258	WITHOUT_CLASSIFICATION	3.4913100741947414E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979604652889	WITHOUT_CLASSIFICATION	2.039534711230018E-6	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999937898478971	WITHOUT_CLASSIFICATION	6.210152102885946E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999552647286359	WITHOUT_CLASSIFICATION	4.4735271364018554E-5	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996887817842	WITHOUT_CLASSIFICATION	3.1121821573664453E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999996354516206	WITHOUT_CLASSIFICATION	3.645483794548861E-7	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999747127219754	WITHOUT_CLASSIFICATION	2.528727802461572E-5	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998995720305	WITHOUT_CLASSIFICATION	1.0042796959296746E-7	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999992792154963	WITHOUT_CLASSIFICATION	7.207845037973593E-7	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999999148557324	WITHOUT_CLASSIFICATION	8.514426760627273E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981568099988	WITHOUT_CLASSIFICATION	1.8431900011265713E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999998967713818	WITHOUT_CLASSIFICATION	1.0322861812855137E-7	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999400805137564	WITHOUT_CLASSIFICATION	5.991948624372966E-5	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999972299258485	WITHOUT_CLASSIFICATION	2.7700741516049597E-6	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999892288970795	WITHOUT_CLASSIFICATION	1.077110292040509E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999958744037574	WITHOUT_CLASSIFICATION	4.1255962425416594E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999958744037574	WITHOUT_CLASSIFICATION	4.1255962425416594E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999986213657669	WITHOUT_CLASSIFICATION	1.378634233111722E-6	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998404611665802	WITHOUT_CLASSIFICATION	1.5953883341982163E-4	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999993843105196	WITHOUT_CLASSIFICATION	6.156894804046748E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999964370773027	WITHOUT_CLASSIFICATION	3.5629226973395127E-6	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999990206997706	WITHOUT_CLASSIFICATION	9.793002293593393E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999992293190544	WITHOUT_CLASSIFICATION	7.706809455474422E-7	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999999923480671	WITHOUT_CLASSIFICATION	7.651932896823461E-8	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999659664286308	WITHOUT_CLASSIFICATION	3.40335713691592E-5	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999998966619987	WITHOUT_CLASSIFICATION	1.033380012865664E-7	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999820259048073	WITHOUT_CLASSIFICATION	1.7974095192702023E-5	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999965513007025	WITHOUT_CLASSIFICATION	3.4486992974563555E-6	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.99997482886297	WITHOUT_CLASSIFICATION	2.5171137030056207E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999230364186859	WITHOUT_CLASSIFICATION	7.696358131411245E-5	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999997881853799	WITHOUT_CLASSIFICATION	2.1181462016292996E-7	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999991316245009	WITHOUT_CLASSIFICATION	8.683754989697391E-7	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999905953451574	WITHOUT_CLASSIFICATION	9.404654842573115E-6	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999951223641628	WITHOUT_CLASSIFICATION	4.877635837139741E-6	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999852167125554	WITHOUT_CLASSIFICATION	1.4783287444571084E-5	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999608921806766	WITHOUT_CLASSIFICATION	3.910781932326557E-5	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999876581088238	WITHOUT_CLASSIFICATION	1.2341891176279557E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999999951631429	WITHOUT_CLASSIFICATION	4.8368571019125514E-8	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999936657008112	WITHOUT_CLASSIFICATION	6.334299188770595E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998107655694481	WITHOUT_CLASSIFICATION	1.8923443055186357E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999133339618871	WITHOUT_CLASSIFICATION	8.666603811291133E-5	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9996357702409084	WITHOUT_CLASSIFICATION	3.642297590915884E-4	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9998744318033952	WITHOUT_CLASSIFICATION	1.2556819660470956E-4	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999842450435839	WITHOUT_CLASSIFICATION	1.5754956416215585E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9982745573921546	WITHOUT_CLASSIFICATION	0.0017254426078454155	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999989586150199	WITHOUT_CLASSIFICATION	1.04138498008543E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998107655694481	WITHOUT_CLASSIFICATION	1.8923443055186357E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999888118638145	WITHOUT_CLASSIFICATION	1.1188136185627808E-5	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999697162868354	WITHOUT_CLASSIFICATION	3.0283713164615017E-5	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9998639624105685	WITHOUT_CLASSIFICATION	1.3603758943148679E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999920358286307	WITHOUT_CLASSIFICATION	7.964171369196212E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999997596917404	WITHOUT_CLASSIFICATION	2.403082596027275E-7	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999980704023672	WITHOUT_CLASSIFICATION	1.9295976327722133E-6	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999994539708629	WITHOUT_CLASSIFICATION	5.460291371302047E-7	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996992190857	WITHOUT_CLASSIFICATION	3.0078091419894576E-7	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999960612622362	WITHOUT_CLASSIFICATION	3.9387377638691845E-6	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999920358286307	WITHOUT_CLASSIFICATION	7.964171369196212E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.99999957668282	WITHOUT_CLASSIFICATION	4.233171800221217E-7	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999995094746558	WITHOUT_CLASSIFICATION	4.905253441322869E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999996031867451	WITHOUT_CLASSIFICATION	3.968132550063419E-7	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998466887756321	WITHOUT_CLASSIFICATION	1.533112243679988E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999996721325866	WITHOUT_CLASSIFICATION	3.2786741345715885E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999353001815	WITHOUT_CLASSIFICATION	6.469981855415111E-8	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999931529743358	WITHOUT_CLASSIFICATION	6.847025664260057E-6	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999990662081893	WITHOUT_CLASSIFICATION	9.337918106618577E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999997141329762	WITHOUT_CLASSIFICATION	2.858670239056842E-7	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999984692465332	WITHOUT_CLASSIFICATION	1.5307534667524037E-6	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999986424773257	WITHOUT_CLASSIFICATION	1.3575226742874933E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999921442958787	WITHOUT_CLASSIFICATION	7.855704121268963E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999946908050473	WITHOUT_CLASSIFICATION	5.309194952650943E-6	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999986137977744	WITHOUT_CLASSIFICATION	1.3862022255961474E-6	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999592996761285	WITHOUT_CLASSIFICATION	4.0700323871506125E-5	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999978821873967	WITHOUT_CLASSIFICATION	2.1178126033185436E-6	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994897364051453	WITHOUT_CLASSIFICATION	5.102635948546782E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999996453785874	WITHOUT_CLASSIFICATION	3.5462141265806844E-7	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999996072248515	WITHOUT_CLASSIFICATION	3.9277514855773697E-7	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.999991640356966	WITHOUT_CLASSIFICATION	8.359643033917098E-6	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999989395589947	WITHOUT_CLASSIFICATION	1.060441005249132E-6	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999944506752462	WITHOUT_CLASSIFICATION	5.549324753865096E-6	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999971134475137	WITHOUT_CLASSIFICATION	2.8865524863070726E-6	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999990210623023	WITHOUT_CLASSIFICATION	9.789376977682279E-7	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999995627594919	WITHOUT_CLASSIFICATION	4.372405082080757E-7	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999965892612901	WITHOUT_CLASSIFICATION	3.410738709890777E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999812322779644	WITHOUT_CLASSIFICATION	1.8767722035606517E-5	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999983179815672	WITHOUT_CLASSIFICATION	1.6820184327739091E-6	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999994275822077	WITHOUT_CLASSIFICATION	5.724177922502023E-7	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999991807473967	WITHOUT_CLASSIFICATION	8.192526033868899E-7	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999902733248435	WITHOUT_CLASSIFICATION	9.726675156500385E-6	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999634371550149	WITHOUT_CLASSIFICATION	3.6562844985127766E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999256801820733	WITHOUT_CLASSIFICATION	7.431981792665448E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992932944851	WITHOUT_CLASSIFICATION	7.067055148297832E-7	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996421673394	WITHOUT_CLASSIFICATION	3.57832660663649E-7	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999254896072263	WITHOUT_CLASSIFICATION	7.451039277368532E-5	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999989961595535	WITHOUT_CLASSIFICATION	1.003840446487602E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999994190707886	WITHOUT_CLASSIFICATION	5.809292113422213E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996759441179	WITHOUT_CLASSIFICATION	3.240558820495024E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996759441179	WITHOUT_CLASSIFICATION	3.240558820495024E-7	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999992048133988	WITHOUT_CLASSIFICATION	7.951866012118075E-7	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999834872496537	WITHOUT_CLASSIFICATION	1.6512750346337385E-5	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999729598968063	WITHOUT_CLASSIFICATION	2.7040103193657834E-5	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999999459184671	WITHOUT_CLASSIFICATION	5.408153289378777E-7	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999939639350186	WITHOUT_CLASSIFICATION	6.036064981320068E-6	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998454438911661	WITHOUT_CLASSIFICATION	1.545561088339262E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999989876779596	WITHOUT_CLASSIFICATION	1.0123220404100975E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999905700909396	WITHOUT_CLASSIFICATION	9.429909060411132E-6	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.99999890602453	WITHOUT_CLASSIFICATION	1.0939754699911942E-6	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999792466989	WITHOUT_CLASSIFICATION	2.0753301043102797E-8	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999714374405339	WITHOUT_CLASSIFICATION	2.8562559466204174E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999959380608497	WITHOUT_CLASSIFICATION	4.0619391503439555E-6	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999973963026282	WITHOUT_CLASSIFICATION	2.603697371855695E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996759441179	WITHOUT_CLASSIFICATION	3.240558820495024E-7	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999936296686158	WITHOUT_CLASSIFICATION	6.3703313842196654E-6	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999993667033821	WITHOUT_CLASSIFICATION	6.332966180043527E-7	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999816925393622	WITHOUT_CLASSIFICATION	1.830746063776469E-5	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999994339279108	WITHOUT_CLASSIFICATION	5.660720892056364E-7	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999970281485786	WITHOUT_CLASSIFICATION	2.9718514213534246E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999821228705692	WITHOUT_CLASSIFICATION	1.7877129430820752E-5	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999994779053291	WITHOUT_CLASSIFICATION	5.220946710011238E-7	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999988183741287	WITHOUT_CLASSIFICATION	1.1816258712359059E-6	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999996308092459	WITHOUT_CLASSIFICATION	3.691907539894685E-7	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999998968962402	WITHOUT_CLASSIFICATION	1.0310375979189743E-6	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999987321005255	WITHOUT_CLASSIFICATION	1.2678994745479765E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992932944851	WITHOUT_CLASSIFICATION	7.067055148297832E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996759441179	WITHOUT_CLASSIFICATION	3.240558820495024E-7	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999971722524643	WITHOUT_CLASSIFICATION	2.827747535758598E-6	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999996266591396	WITHOUT_CLASSIFICATION	3.7334086045787496E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114709	WITHOUT_CLASSIFICATION	2.35958852920383E-6	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999964158089206	WITHOUT_CLASSIFICATION	3.5841910793224564E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999819691308568	WITHOUT_CLASSIFICATION	1.8030869143148608E-5	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999858843817021	WITHOUT_CLASSIFICATION	1.4115618297937935E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996638246256	WITHOUT_CLASSIFICATION	3.3617537443954195E-7	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999992335596994	WITHOUT_CLASSIFICATION	7.664403006420971E-7	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999640565881	WITHOUT_CLASSIFICATION	3.594341187450577E-8	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.999999708190316	WITHOUT_CLASSIFICATION	2.9180968399966016E-7	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999997399272127	WITHOUT_CLASSIFICATION	2.6007278730743794E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999905889494757	WITHOUT_CLASSIFICATION	9.411050524301722E-5	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999999863780216	WITHOUT_CLASSIFICATION	1.3621978398732584E-7	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999998015890632	WITHOUT_CLASSIFICATION	1.9841093680849734E-6	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999168833438877	WITHOUT_CLASSIFICATION	8.311665611221822E-5	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999998049062355	WITHOUT_CLASSIFICATION	1.95093764387732E-7	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999995402790209	WITHOUT_CLASSIFICATION	4.597209790557887E-7	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999992887616789	WITHOUT_CLASSIFICATION	7.112383211341857E-7	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999957638394386	WITHOUT_CLASSIFICATION	4.236160561455436E-6	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999835259403	WITHOUT_CLASSIFICATION	1.6474059685144776E-8	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999932283317003	WITHOUT_CLASSIFICATION	6.771668299541633E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999932283317003	WITHOUT_CLASSIFICATION	6.771668299541633E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999976304145696	WITHOUT_CLASSIFICATION	2.3695854304311775E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999991273249961	WITHOUT_CLASSIFICATION	8.726750039312781E-7	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999842289407459	WITHOUT_CLASSIFICATION	1.5771059253998598E-5	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999955433878202	WITHOUT_CLASSIFICATION	4.4566121798249026E-6	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999904168224957	WITHOUT_CLASSIFICATION	9.583177504279082E-6	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999952285677942	WITHOUT_CLASSIFICATION	4.771432205767066E-6	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999705945950359	WITHOUT_CLASSIFICATION	2.940540496409987E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999989433999821	WITHOUT_CLASSIFICATION	1.0566000179503933E-6	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999989433999821	WITHOUT_CLASSIFICATION	1.0566000179503933E-6	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999983279367106	WITHOUT_CLASSIFICATION	1.672063289396254E-5	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999545413112835	WITHOUT_CLASSIFICATION	4.5458688716590645E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999978085801965	WITHOUT_CLASSIFICATION	2.191419803527016E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999989521661982	WITHOUT_CLASSIFICATION	1.047833801945111E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999989521661982	WITHOUT_CLASSIFICATION	1.047833801945111E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999989521661982	WITHOUT_CLASSIFICATION	1.047833801945111E-6	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9988353550301023	WITHOUT_CLASSIFICATION	0.001164644969897669	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999798435728	WITHOUT_CLASSIFICATION	2.0156427177658248E-8	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999998548889009	WITHOUT_CLASSIFICATION	1.451110991044592E-6	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999935191183019	WITHOUT_CLASSIFICATION	6.480881698099338E-6	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999789454486204	WITHOUT_CLASSIFICATION	2.105455137956762E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996759441179	WITHOUT_CLASSIFICATION	3.240558820495024E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996759441179	WITHOUT_CLASSIFICATION	3.240558820495024E-7	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999998802864376	WITHOUT_CLASSIFICATION	1.1971356241845686E-7	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999994875614809	WITHOUT_CLASSIFICATION	5.124385190420399E-7	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999269505841174	WITHOUT_CLASSIFICATION	7.304941588258679E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999992241340149	WITHOUT_CLASSIFICATION	7.758659850722524E-7	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999891529232783	WITHOUT_CLASSIFICATION	1.0847076721674755E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999931819356065	WITHOUT_CLASSIFICATION	6.818064393502552E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998871956066517	WITHOUT_CLASSIFICATION	1.1280439334829239E-4	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999971687112333	WITHOUT_CLASSIFICATION	2.83128876658251E-6	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999987927070518	WITHOUT_CLASSIFICATION	1.2072929482237293E-6	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999960774187446	WITHOUT_CLASSIFICATION	3.922581255442702E-6	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999946157032326	WITHOUT_CLASSIFICATION	5.3842967674474435E-6	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999945488084355	WITHOUT_CLASSIFICATION	5.451191564501593E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999945488084355	WITHOUT_CLASSIFICATION	5.451191564501593E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999657275103411	WITHOUT_CLASSIFICATION	3.427248965887679E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999657275103411	WITHOUT_CLASSIFICATION	3.427248965887679E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999661038784853	WITHOUT_CLASSIFICATION	3.389612151465261E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999444897367724	WITHOUT_CLASSIFICATION	5.551026322757393E-5	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999444897367724	WITHOUT_CLASSIFICATION	5.551026322757393E-5	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999849829859613	WITHOUT_CLASSIFICATION	1.5017014038634572E-5	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999773099622289	WITHOUT_CLASSIFICATION	2.2690037771091093E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999934415465721	WITHOUT_CLASSIFICATION	6.558453427970593E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999932283317003	WITHOUT_CLASSIFICATION	6.771668299541633E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999473970173192	WITHOUT_CLASSIFICATION	5.260298268090198E-5	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999773099622289	WITHOUT_CLASSIFICATION	2.2690037771091093E-5	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9998607369769262	WITHOUT_CLASSIFICATION	1.3926302307377156E-4	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999903854354446	WITHOUT_CLASSIFICATION	9.614564555383802E-6	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999700252410163	WITHOUT_CLASSIFICATION	2.9974758983714207E-5	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999844874937638	WITHOUT_CLASSIFICATION	1.5512506236170432E-5	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999952860428885	WITHOUT_CLASSIFICATION	4.713957111521297E-6	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999993907106141	WITHOUT_CLASSIFICATION	6.092893859072597E-6	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999968104086753	WITHOUT_CLASSIFICATION	3.189591324836711E-6	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9996367663862098	WITHOUT_CLASSIFICATION	3.632336137901971E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999957460235384	WITHOUT_CLASSIFICATION	4.25397646159521E-5	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999958483704852	WITHOUT_CLASSIFICATION	4.151629514828012E-6	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999992256253438	WITHOUT_CLASSIFICATION	7.743746561111807E-7	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999758644016534	WITHOUT_CLASSIFICATION	2.413559834654296E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999945215265162	WITHOUT_CLASSIFICATION	5.478473483816886E-6	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999946711017386	WITHOUT_CLASSIFICATION	5.328898261469867E-6	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999958050769361	WITHOUT_CLASSIFICATION	4.194923063995621E-6	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999990050447661	WITHOUT_CLASSIFICATION	9.949552338564182E-7	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999991716887615	WITHOUT_CLASSIFICATION	8.283112385836929E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999940236621255	WITHOUT_CLASSIFICATION	5.9763378744936235E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999940236621255	WITHOUT_CLASSIFICATION	5.9763378744936235E-6	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999992973289565	WITHOUT_CLASSIFICATION	7.026710435509611E-7	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999993241736064	WITHOUT_CLASSIFICATION	6.758263936525819E-7	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999994652463577	WITHOUT_CLASSIFICATION	5.347536422057638E-7	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999957443735588	WITHOUT_CLASSIFICATION	4.255626441306554E-6	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999988824421031	WITHOUT_CLASSIFICATION	1.1175578968439002E-6	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999998091997357	WITHOUT_CLASSIFICATION	1.9080026433073722E-7	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999997352702742	WITHOUT_CLASSIFICATION	2.647297258493596E-7	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999991861714087	WITHOUT_CLASSIFICATION	8.138285912842498E-6	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999856991137309	WITHOUT_CLASSIFICATION	1.4300886269049693E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999993829980881	WITHOUT_CLASSIFICATION	6.170019118831436E-7	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999989709059154	WITHOUT_CLASSIFICATION	1.0290940846236898E-6	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999905889494757	WITHOUT_CLASSIFICATION	9.411050524301722E-5	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999999852189654	WITHOUT_CLASSIFICATION	1.4781034588646374E-7	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999990999905977	WITHOUT_CLASSIFICATION	9.000094022148582E-7	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999967565149359	WITHOUT_CLASSIFICATION	3.2434850640338343E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999887848826665	WITHOUT_CLASSIFICATION	1.1215117333473412E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.99999989227007	WITHOUT_CLASSIFICATION	1.077299299444764E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.99999989227007	WITHOUT_CLASSIFICATION	1.077299299444764E-7	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999886388215579	WITHOUT_CLASSIFICATION	1.136117844210869E-5	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.99997338704471	WITHOUT_CLASSIFICATION	2.6612955290059597E-5	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.999930320674476	WITHOUT_CLASSIFICATION	6.967932552407414E-5	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999200240213972	WITHOUT_CLASSIFICATION	7.997597860268591E-5	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999729848890971	WITHOUT_CLASSIFICATION	2.701511090279696E-5	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998436118358415	WITHOUT_CLASSIFICATION	1.563881641585099E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998398771139	WITHOUT_CLASSIFICATION	1.6012288597748575E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.99998397713128	WITHOUT_CLASSIFICATION	1.6022868720099925E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999987845774615	WITHOUT_CLASSIFICATION	1.2154225385386533E-6	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999968509773106	WITHOUT_CLASSIFICATION	3.1490226894307767E-6	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999995018244856	WITHOUT_CLASSIFICATION	4.98175514406243E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.99998397713128	WITHOUT_CLASSIFICATION	1.6022868720099925E-5	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999989878888528	WITHOUT_CLASSIFICATION	1.0121111471826717E-6	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998661571949923	WITHOUT_CLASSIFICATION	1.3384280500773046E-4	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999947015383348	WITHOUT_CLASSIFICATION	5.298461665219471E-6	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999904937595696	WITHOUT_CLASSIFICATION	9.506240430336498E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999975345483799	WITHOUT_CLASSIFICATION	2.4654516201452E-6	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999944118201	WITHOUT_CLASSIFICATION	5.5881799060200924E-8	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998776110742	WITHOUT_CLASSIFICATION	1.2238892587032957E-7	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999940025708467	WITHOUT_CLASSIFICATION	5.997429153282831E-6	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999998133795507	WITHOUT_CLASSIFICATION	1.8662044942386672E-7	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999986405171789	WITHOUT_CLASSIFICATION	1.3594828210476887E-6	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999999826063323	WITHOUT_CLASSIFICATION	1.73936676851216E-7	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999982718986823	WITHOUT_CLASSIFICATION	1.728101317685291E-6	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999987292548603	WITHOUT_CLASSIFICATION	1.2707451396571884E-6	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999998389901033	WITHOUT_CLASSIFICATION	1.6100989683000124E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999823407274215	WITHOUT_CLASSIFICATION	1.7659272578445836E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999998779445259	WITHOUT_CLASSIFICATION	1.2205547399985928E-7	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999999284398882	WITHOUT_CLASSIFICATION	7.156011179790913E-7	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999867847545213	WITHOUT_CLASSIFICATION	1.3215245478738746E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999831977241592	WITHOUT_CLASSIFICATION	1.6802275840779054E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998683127271	WITHOUT_CLASSIFICATION	1.316872728202744E-7	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999910360898172	WITHOUT_CLASSIFICATION	8.963910182790989E-6	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999998701228787	WITHOUT_CLASSIFICATION	1.298771213802515E-7	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999439985919186	WITHOUT_CLASSIFICATION	5.600140808141079E-5	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999887862564276	WITHOUT_CLASSIFICATION	1.1213743572373134E-5	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999976926838041	WITHOUT_CLASSIFICATION	2.3073161958511647E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999906932929225	WITHOUT_CLASSIFICATION	9.306707077463112E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999908735254616	WITHOUT_CLASSIFICATION	9.126474538401792E-6	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999997762840047	WITHOUT_CLASSIFICATION	2.237159952996476E-7	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999615550245	WITHOUT_CLASSIFICATION	3.8444975623575465E-8	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999734165595446	WITHOUT_CLASSIFICATION	2.6583440455435795E-5	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999998672365028	WITHOUT_CLASSIFICATION	1.3276349717688034E-7	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9998115811595945	WITHOUT_CLASSIFICATION	1.8841884040545452E-4	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999994062178846	WITHOUT_CLASSIFICATION	5.937821153976825E-7	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999997326001218	WITHOUT_CLASSIFICATION	2.6739987817539983E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999714614036	WITHOUT_CLASSIFICATION	2.8538596399636995E-8	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999932199542504	WITHOUT_CLASSIFICATION	6.7800457495489054E-6	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999997829015126	WITHOUT_CLASSIFICATION	2.170984873983979E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999858621264842	WITHOUT_CLASSIFICATION	1.4137873515813814E-5	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999993888262485	WITHOUT_CLASSIFICATION	6.111737514516858E-7	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999989752691527	WITHOUT_CLASSIFICATION	1.0247308473182583E-6	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999992351914283	WITHOUT_CLASSIFICATION	7.648085716956926E-6	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999991601847039	WITHOUT_CLASSIFICATION	8.398152960967877E-6	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999995380855516	WITHOUT_CLASSIFICATION	4.6191444833269006E-7	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999990617637203	WITHOUT_CLASSIFICATION	9.382362796393411E-7	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999421092461096	WITHOUT_CLASSIFICATION	5.789075389041503E-5	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999972172881668	WITHOUT_CLASSIFICATION	2.782711833141019E-6	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9998818508495447	WITHOUT_CLASSIFICATION	1.1814915045523854E-4	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999925750375251	WITHOUT_CLASSIFICATION	7.424962474886738E-6	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999983502244959	WITHOUT_CLASSIFICATION	1.6497755040973115E-5	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999941025716725	WITHOUT_CLASSIFICATION	5.897428327553032E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990822076159	WITHOUT_CLASSIFICATION	9.177923840299395E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999523448923	WITHOUT_CLASSIFICATION	4.765510772424273E-8	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999998673259642	WITHOUT_CLASSIFICATION	1.3267403569513184E-7	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999837097987184	WITHOUT_CLASSIFICATION	1.6290201281513207E-5	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999351053048	WITHOUT_CLASSIFICATION	6.489469516249328E-8	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999993471579878	WITHOUT_CLASSIFICATION	6.528420121834064E-7	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999999296909486	WITHOUT_CLASSIFICATION	7.030905140566762E-7	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999997736402391	WITHOUT_CLASSIFICATION	2.2635976090520454E-6	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999897976015076	WITHOUT_CLASSIFICATION	1.0202398492286091E-5	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999996438657706	WITHOUT_CLASSIFICATION	3.561342294483904E-7	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999978719465775	WITHOUT_CLASSIFICATION	2.1280534225272727E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999978330848796	WITHOUT_CLASSIFICATION	2.1669151205129472E-6	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999980254537394	WITHOUT_CLASSIFICATION	1.9745462606045084E-6	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9727204843055658	WITHOUT_CLASSIFICATION	0.027279515694434205	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998436952206156	WITHOUT_CLASSIFICATION	1.5630477938441767E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9993370408297645	WITHOUT_CLASSIFICATION	6.629591702355834E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990822076159	WITHOUT_CLASSIFICATION	9.177923840299395E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998781215214553	WITHOUT_CLASSIFICATION	1.218784785447371E-4	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999996533162561	WITHOUT_CLASSIFICATION	3.4668374390062646E-6	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9995603796410235	WITHOUT_CLASSIFICATION	4.396203589764297E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999994210053588	WITHOUT_CLASSIFICATION	5.78994641153932E-7	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999808921119546	WITHOUT_CLASSIFICATION	1.9107888045335647E-5	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999834485403738	WITHOUT_CLASSIFICATION	1.6551459626266973E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999987845774615	WITHOUT_CLASSIFICATION	1.2154225385386533E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999825320194577	WITHOUT_CLASSIFICATION	1.746798054231021E-5	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999714614036	WITHOUT_CLASSIFICATION	2.8538596399636995E-8	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.999990136724026	WITHOUT_CLASSIFICATION	9.863275973906654E-6	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998542876845	WITHOUT_CLASSIFICATION	1.4571231546536094E-7	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999998203869357	WITHOUT_CLASSIFICATION	1.7961306429550803E-6	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999980640322521	WITHOUT_CLASSIFICATION	1.935967747973599E-6	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999994781296798	WITHOUT_CLASSIFICATION	5.21870320141688E-7	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9996669413422775	WITHOUT_CLASSIFICATION	3.330586577224474E-4	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998979288041	WITHOUT_CLASSIFICATION	1.0207119590522523E-7	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999996858699399	WITHOUT_CLASSIFICATION	3.14130060070567E-7	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9981580908161352	WITHOUT_CLASSIFICATION	0.0018419091838648813	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997935152881	WITHOUT_CLASSIFICATION	2.064847118649903E-7	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999972165620803	WITHOUT_CLASSIFICATION	2.783437919650803E-6	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999982656380196	WITHOUT_CLASSIFICATION	1.7343619804442595E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998164308791	WITHOUT_CLASSIFICATION	1.8356912095163623E-7	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998164308791	WITHOUT_CLASSIFICATION	1.8356912095163623E-7	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999930104665753	WITHOUT_CLASSIFICATION	6.989533424693838E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999983121734344	WITHOUT_CLASSIFICATION	1.6878265656045227E-5	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999996642046569	WITHOUT_CLASSIFICATION	3.357953431121595E-7	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999816811186867	WITHOUT_CLASSIFICATION	1.8318881313373926E-5	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999614575236	WITHOUT_CLASSIFICATION	3.854247638269257E-8	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999986941329441	WITHOUT_CLASSIFICATION	1.3058670559332062E-6	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999996596203022	WITHOUT_CLASSIFICATION	3.4037969778194905E-7	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999154922255711	WITHOUT_CLASSIFICATION	8.450777442891882E-5	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999899659844346	WITHOUT_CLASSIFICATION	1.0034015565430193E-5	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999999276511735	WITHOUT_CLASSIFICATION	7.23488265067706E-8	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999933625466353	WITHOUT_CLASSIFICATION	6.637453364699584E-6	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.999994457943963	WITHOUT_CLASSIFICATION	5.542056036981845E-6	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999966818599916	WITHOUT_CLASSIFICATION	3.3181400084361943E-6	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999640616717	WITHOUT_CLASSIFICATION	3.593832830248371E-7	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999931487002878	WITHOUT_CLASSIFICATION	6.8512997121212246E-6	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999974943330795	WITHOUT_CLASSIFICATION	2.5056669204727772E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999955299237983	WITHOUT_CLASSIFICATION	4.470076201708658E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999263632223	WITHOUT_CLASSIFICATION	7.363677770178127E-7	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999984801143992	WITHOUT_CLASSIFICATION	1.5198856008167247E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9994682464936139	WITHOUT_CLASSIFICATION	5.317535063860328E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9993769858830609	WITHOUT_CLASSIFICATION	6.230141169391331E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999992075547887	WITHOUT_CLASSIFICATION	7.924452113418935E-7	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999990624832374	WITHOUT_CLASSIFICATION	9.37516762479849E-7	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999422578867787	WITHOUT_CLASSIFICATION	5.774211322136013E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999983735818068	WITHOUT_CLASSIFICATION	1.6264181931497394E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844269301498	WITHOUT_CLASSIFICATION	1.5573069850201993E-5	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999983992127077	WITHOUT_CLASSIFICATION	1.6007872922355428E-6	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999990255828284	WITHOUT_CLASSIFICATION	9.744171715927245E-7	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999892325678782	WITHOUT_CLASSIFICATION	1.0767432121787292E-5	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999946712696103	WITHOUT_CLASSIFICATION	5.32873038963939E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9999213888541154	WITHOUT_CLASSIFICATION	7.861114588460793E-5	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999398444230577	WITHOUT_CLASSIFICATION	6.015557694236247E-5	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999875629339222	WITHOUT_CLASSIFICATION	1.243706607781292E-5	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999979328048828	WITHOUT_CLASSIFICATION	2.067195117194623E-6	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999946045082341	WITHOUT_CLASSIFICATION	5.3954917659970534E-6	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999665360668217	WITHOUT_CLASSIFICATION	3.346393317819597E-5	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999870143766003	WITHOUT_CLASSIFICATION	1.2985623399691295E-5	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999994999955455	WITHOUT_CLASSIFICATION	5.000044544512267E-7	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999985446225832	WITHOUT_CLASSIFICATION	1.4553774168322038E-6	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999992551263402	WITHOUT_CLASSIFICATION	7.448736597949855E-6	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966284597126	WITHOUT_CLASSIFICATION	3.371540287384098E-6	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999036369068	WITHOUT_CLASSIFICATION	9.636309320319646E-8	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999135170954102	WITHOUT_CLASSIFICATION	8.648290458984136E-5	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999803901900288	WITHOUT_CLASSIFICATION	1.9609809971107883E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999896605499304	WITHOUT_CLASSIFICATION	1.0339450069682124E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987523296885	WITHOUT_CLASSIFICATION	1.2476703115074218E-6	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9756312668268271	WITHOUT_CLASSIFICATION	0.02436873317317296	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999979164304044	WITHOUT_CLASSIFICATION	2.083569595630328E-6	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999806248264921	WITHOUT_CLASSIFICATION	1.937517350791328E-5	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999981459707525	WITHOUT_CLASSIFICATION	1.8540292475243838E-6	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992736525402	WITHOUT_CLASSIFICATION	7.263474598530318E-7	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999992367573888	WITHOUT_CLASSIFICATION	7.632426111555317E-7	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999936832833608	WITHOUT_CLASSIFICATION	6.316716639249259E-6	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999979907803618	WITHOUT_CLASSIFICATION	2.009219638286269E-6	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.99998509465695	WITHOUT_CLASSIFICATION	1.4905343050046156E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999991639586034	WITHOUT_CLASSIFICATION	8.360413965751044E-7	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999944138927654	WITHOUT_CLASSIFICATION	5.586107234501891E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999941945733684	WITHOUT_CLASSIFICATION	5.805426631723203E-6	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.999983602055829	WITHOUT_CLASSIFICATION	1.639794417105568E-5	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999962078257566	WITHOUT_CLASSIFICATION	3.7921742435038962E-6	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999737009404741	WITHOUT_CLASSIFICATION	2.6299059525945157E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999566960845188	WITHOUT_CLASSIFICATION	4.3303915481334575E-5	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999952464151547	WITHOUT_CLASSIFICATION	4.753584845269063E-6	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999951373504488	WITHOUT_CLASSIFICATION	4.862649551271845E-6	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999869929472697	WITHOUT_CLASSIFICATION	1.300705273035481E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999996721614083	WITHOUT_CLASSIFICATION	3.278385918299154E-7	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999986269845129	WITHOUT_CLASSIFICATION	1.3730154870385813E-6	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999130923701	WITHOUT_CLASSIFICATION	8.690762977616213E-8	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999989001288877	WITHOUT_CLASSIFICATION	1.099871112284668E-6	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999983883393438	WITHOUT_CLASSIFICATION	1.6116606561998044E-6	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999989001288877	WITHOUT_CLASSIFICATION	1.099871112284668E-6	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999988230675122	WITHOUT_CLASSIFICATION	1.1769324878402701E-6	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999986790450269	WITHOUT_CLASSIFICATION	1.3209549730525679E-6	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999890996567147	WITHOUT_CLASSIFICATION	1.0900343285377828E-5	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999882834794616	WITHOUT_CLASSIFICATION	1.1716520538559786E-5	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999936615282428	WITHOUT_CLASSIFICATION	6.338471757282201E-6	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999776660881398	WITHOUT_CLASSIFICATION	2.233391186023545E-5	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999996907085903	WITHOUT_CLASSIFICATION	3.0929140971790877E-7	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999970145396344	WITHOUT_CLASSIFICATION	2.9854603656580253E-6	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999996009427403	WITHOUT_CLASSIFICATION	3.990572597068053E-6	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999996339898094	WITHOUT_CLASSIFICATION	3.6601019063556485E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998709567267	WITHOUT_CLASSIFICATION	1.2904327325617774E-7	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999999272555576	WITHOUT_CLASSIFICATION	7.274444240644451E-7	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999914731819353	WITHOUT_CLASSIFICATION	8.526818064873088E-6	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999201887403935	WITHOUT_CLASSIFICATION	7.981125960656418E-5	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999983738855307	WITHOUT_CLASSIFICATION	1.6261144693013951E-6	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999990570290577	WITHOUT_CLASSIFICATION	9.429709423406287E-7	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999991574807725	WITHOUT_CLASSIFICATION	8.425192276410201E-7	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999994588845925	WITHOUT_CLASSIFICATION	5.411154075213011E-7	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999958199320702	WITHOUT_CLASSIFICATION	4.180067929800901E-6	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999954173579497	WITHOUT_CLASSIFICATION	4.582642050203254E-6	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999953107673942	WITHOUT_CLASSIFICATION	4.689232605788418E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999368324441931	WITHOUT_CLASSIFICATION	6.316755580692133E-5	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999431742442587	WITHOUT_CLASSIFICATION	5.682575574131002E-5	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998814349973677	WITHOUT_CLASSIFICATION	1.1856500263219001E-4	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999918132290195	WITHOUT_CLASSIFICATION	8.18677098056834E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9985922466968724	WITHOUT_CLASSIFICATION	0.0014077533031276685	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999799459978564	WITHOUT_CLASSIFICATION	2.0054002143631638E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999893368263119	WITHOUT_CLASSIFICATION	1.0663173688080163E-5	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999989974613831	WITHOUT_CLASSIFICATION	1.002538616892517E-6	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999278408151078	WITHOUT_CLASSIFICATION	7.215918489223977E-5	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999866638091737	WITHOUT_CLASSIFICATION	1.3336190826408519E-5	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9998239827840693	WITHOUT_CLASSIFICATION	1.7601721593065887E-4	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999904713404622	WITHOUT_CLASSIFICATION	9.528659537947303E-6	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999936484492611	WITHOUT_CLASSIFICATION	6.351550738818783E-6	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999865784747543	WITHOUT_CLASSIFICATION	1.3421525245750836E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999772984268279	WITHOUT_CLASSIFICATION	2.2701573171985953E-5	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.999947302107994	WITHOUT_CLASSIFICATION	5.269789200608951E-5	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999992058096643	WITHOUT_CLASSIFICATION	7.941903357605991E-7	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999632848691983	WITHOUT_CLASSIFICATION	3.6715130801664195E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999699598850853	WITHOUT_CLASSIFICATION	3.004011491469789E-5	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999890028944489	WITHOUT_CLASSIFICATION	1.0997105551056448E-5	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999801050263326	WITHOUT_CLASSIFICATION	1.9894973667450895E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999969118612579	WITHOUT_CLASSIFICATION	3.088138742018335E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9985922466968724	WITHOUT_CLASSIFICATION	0.0014077533031276685	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.999960033340607	WITHOUT_CLASSIFICATION	3.9966659392954596E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999982938062345	WITHOUT_CLASSIFICATION	1.7061937655395843E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999740306201281	WITHOUT_CLASSIFICATION	2.5969379871922992E-5	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999386912638647	WITHOUT_CLASSIFICATION	6.13087361352401E-5	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999935618738858	WITHOUT_CLASSIFICATION	6.43812611415806E-6	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999693159952826	WITHOUT_CLASSIFICATION	3.0684004717454034E-5	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999945577749094	WITHOUT_CLASSIFICATION	5.442225090568545E-6	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999140531286357	WITHOUT_CLASSIFICATION	8.594687136426181E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999955080941315	WITHOUT_CLASSIFICATION	4.49190586849723E-6	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999951288571435	WITHOUT_CLASSIFICATION	4.871142856448509E-6	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.99997032149199	WITHOUT_CLASSIFICATION	2.9678508009911813E-5	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999981636826472	WITHOUT_CLASSIFICATION	1.8363173529222784E-6	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999615892428414	WITHOUT_CLASSIFICATION	3.841075715863212E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999622577975064	WITHOUT_CLASSIFICATION	3.7742202493758725E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999791908493638	WITHOUT_CLASSIFICATION	2.0809150636135584E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999992037882979	WITHOUT_CLASSIFICATION	7.962117020915629E-7	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999721913918579	WITHOUT_CLASSIFICATION	2.7808608142063128E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999949807909472	WITHOUT_CLASSIFICATION	5.019209052824903E-6	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999988169441624	WITHOUT_CLASSIFICATION	1.1830558376667705E-6	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.999960033340607	WITHOUT_CLASSIFICATION	3.9966659392954596E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999889976874632	WITHOUT_CLASSIFICATION	1.100231253685118E-5	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999898029817975	WITHOUT_CLASSIFICATION	1.0197018202553411E-5	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999910753850288	WITHOUT_CLASSIFICATION	8.92461497117171E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998467931281011	WITHOUT_CLASSIFICATION	1.5320687189888534E-4	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999994649861805	WITHOUT_CLASSIFICATION	5.350138195016599E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999894236314457	WITHOUT_CLASSIFICATION	1.057636855430891E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999894236314457	WITHOUT_CLASSIFICATION	1.057636855430891E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999881667349505	WITHOUT_CLASSIFICATION	1.1833265049457134E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999894236314457	WITHOUT_CLASSIFICATION	1.057636855430891E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999894236314457	WITHOUT_CLASSIFICATION	1.057636855430891E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999560480043426	WITHOUT_CLASSIFICATION	4.395199565736926E-5	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999951855988197	WITHOUT_CLASSIFICATION	4.8144011802655995E-6	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999982465280718	WITHOUT_CLASSIFICATION	1.753471928307447E-6	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999966495306456	WITHOUT_CLASSIFICATION	3.3504693545344193E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998514408915505	WITHOUT_CLASSIFICATION	1.4855910844952802E-4	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999988933954579	WITHOUT_CLASSIFICATION	1.1066045420683965E-6	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999996343128335	WITHOUT_CLASSIFICATION	3.6568716651034394E-6	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999995313801583	WITHOUT_CLASSIFICATION	4.6861984179769786E-7	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999992324937183	WITHOUT_CLASSIFICATION	7.675062816961177E-6	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999696336677987	WITHOUT_CLASSIFICATION	3.0366332201374265E-5	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999972488584883	WITHOUT_CLASSIFICATION	2.75114151168613E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.999572646368494	WITHOUT_CLASSIFICATION	4.273536315059334E-4	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999914250345788	WITHOUT_CLASSIFICATION	8.574965421183973E-6	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999848575325941	WITHOUT_CLASSIFICATION	1.5142467405902773E-5	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999971297015775	WITHOUT_CLASSIFICATION	2.8702984225841015E-6	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998547664332177	WITHOUT_CLASSIFICATION	1.4523356678240048E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999894619295866	WITHOUT_CLASSIFICATION	1.0538070413329176E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999946616891061	WITHOUT_CLASSIFICATION	5.338310893820465E-6	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999934133624802	WITHOUT_CLASSIFICATION	6.586637519835483E-6	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999867975801471	WITHOUT_CLASSIFICATION	1.3202419852853081E-5	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999968244983563	WITHOUT_CLASSIFICATION	3.1755016436944294E-6	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999986308294565	WITHOUT_CLASSIFICATION	1.3691705434845364E-6	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999894619295866	WITHOUT_CLASSIFICATION	1.0538070413329176E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999799459978564	WITHOUT_CLASSIFICATION	2.0054002143631638E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999945812508958	WITHOUT_CLASSIFICATION	5.418749104244273E-6	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999858055695838	WITHOUT_CLASSIFICATION	1.419443041615073E-5	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999304546820134	WITHOUT_CLASSIFICATION	6.954531798670583E-5	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999883549138775	WITHOUT_CLASSIFICATION	1.164508612251603E-5	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999995858499887	WITHOUT_CLASSIFICATION	4.141500112083651E-7	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999788856059815	WITHOUT_CLASSIFICATION	2.1114394018530237E-5	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999971950716916	WITHOUT_CLASSIFICATION	2.8049283084517136E-6	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999956183890701	WITHOUT_CLASSIFICATION	4.3816109298798485E-6	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999961231897295	WITHOUT_CLASSIFICATION	3.8768102705030616E-5	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999739597338647	WITHOUT_CLASSIFICATION	2.604026613523792E-5	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999989278655205	WITHOUT_CLASSIFICATION	1.0721344796024578E-6	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999908279699672	WITHOUT_CLASSIFICATION	9.17203003284844E-6	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999997568814458	WITHOUT_CLASSIFICATION	2.431185542728897E-7	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999663490950532	WITHOUT_CLASSIFICATION	3.365090494686873E-5	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999995252889653	WITHOUT_CLASSIFICATION	4.747110347063298E-6	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999992299060207	WITHOUT_CLASSIFICATION	7.7009397929415E-6	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999965790782493	WITHOUT_CLASSIFICATION	3.420921750696546E-6	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999995232648616	WITHOUT_CLASSIFICATION	4.767351383760002E-7	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999996427040654	WITHOUT_CLASSIFICATION	3.572959345504734E-7	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999486400611236	WITHOUT_CLASSIFICATION	5.1359938876447074E-5	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999996819337503	WITHOUT_CLASSIFICATION	3.180662497076545E-6	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999362009514	WITHOUT_CLASSIFICATION	6.37990486139914E-8	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999956183890701	WITHOUT_CLASSIFICATION	4.3816109298798485E-6	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999949375459851	WITHOUT_CLASSIFICATION	5.062454014870531E-6	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999984846126365	WITHOUT_CLASSIFICATION	1.5153873633962373E-6	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999975125309293	WITHOUT_CLASSIFICATION	2.487469070771336E-6	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.99999215610329	WITHOUT_CLASSIFICATION	7.843896710021553E-6	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993523540637	WITHOUT_CLASSIFICATION	6.476459362784125E-7	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999911003116797	WITHOUT_CLASSIFICATION	8.89968832026476E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999865607404167	WITHOUT_CLASSIFICATION	1.3439259583228096E-5	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999861050595481	WITHOUT_CLASSIFICATION	1.3894940451813706E-5	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999975681861947	WITHOUT_CLASSIFICATION	2.4318138053494262E-6	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999719076998667	WITHOUT_CLASSIFICATION	2.8092300133450663E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999956331793409	WITHOUT_CLASSIFICATION	4.366820659053103E-6	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999816493519543	WITHOUT_CLASSIFICATION	1.8350648045669626E-5	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999652003305488	WITHOUT_CLASSIFICATION	3.4799669451190694E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999977377504291	WITHOUT_CLASSIFICATION	2.262249570892829E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999992021992597	WITHOUT_CLASSIFICATION	7.978007403115276E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999850737049165	WITHOUT_CLASSIFICATION	1.4926295083470173E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998494381255	WITHOUT_CLASSIFICATION	1.5056187451271517E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999956331793409	WITHOUT_CLASSIFICATION	4.366820659053103E-6	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999861674131146	WITHOUT_CLASSIFICATION	1.3832586885252817E-5	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.999892030952786	WITHOUT_CLASSIFICATION	1.0796904721392375E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999990500675069	WITHOUT_CLASSIFICATION	9.499324932132126E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.99999902471726	WITHOUT_CLASSIFICATION	9.752827399996166E-7	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999930838963672	WITHOUT_CLASSIFICATION	6.916103632809757E-6	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9994594808695895	WITHOUT_CLASSIFICATION	5.405191304105895E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999992021992597	WITHOUT_CLASSIFICATION	7.978007403115276E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999996870556129	WITHOUT_CLASSIFICATION	3.129443870702877E-7	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983848763901	WITHOUT_CLASSIFICATION	1.6151236098560733E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976835255552	WITHOUT_CLASSIFICATION	2.316474444866894E-6	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985422565725	WITHOUT_CLASSIFICATION	1.457743427616442E-6	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994563899926	WITHOUT_CLASSIFICATION	5.436100074005797E-6	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985990830451	WITHOUT_CLASSIFICATION	1.4009169548415026E-6	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999978959165385	WITHOUT_CLASSIFICATION	2.1040834614270955E-6	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999978959165385	WITHOUT_CLASSIFICATION	2.1040834614270955E-6	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999944431535893	WITHOUT_CLASSIFICATION	5.556846410742762E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999980408893864	WITHOUT_CLASSIFICATION	1.959110613511595E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999986659012936	WITHOUT_CLASSIFICATION	1.3340987064027257E-6	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999990148363309	WITHOUT_CLASSIFICATION	9.851636690230642E-7	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9995286930261409	WITHOUT_CLASSIFICATION	4.7130697385903416E-4	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956839145155	WITHOUT_CLASSIFICATION	4.316085484435333E-6	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928966588614	WITHOUT_CLASSIFICATION	7.103341138687013E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902304558944	WITHOUT_CLASSIFICATION	9.769544105634762E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999923873972926	WITHOUT_CLASSIFICATION	7.6126027073239E-6	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960854107712	WITHOUT_CLASSIFICATION	3.914589228766491E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956839145155	WITHOUT_CLASSIFICATION	4.316085484435333E-6	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928966588614	WITHOUT_CLASSIFICATION	7.103341138687013E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902304558944	WITHOUT_CLASSIFICATION	9.769544105634762E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999986926416632	WITHOUT_CLASSIFICATION	1.3073583368854857E-6	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999027956829977	WITHOUT_CLASSIFICATION	9.72043170022554E-5	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999998462010614	WITHOUT_CLASSIFICATION	1.5379893860491393E-7	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999240810420101	WITHOUT_CLASSIFICATION	7.591895798989371E-5	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999995333355678	WITHOUT_CLASSIFICATION	4.6666443212471153E-7	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999998103722014	WITHOUT_CLASSIFICATION	1.8962779847510604E-7	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9987942573534426	WITHOUT_CLASSIFICATION	0.001205742646557364	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999742264844856	WITHOUT_CLASSIFICATION	2.577351551427537E-5	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999751819410473	WITHOUT_CLASSIFICATION	2.4818058952638275E-5	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999994778661204	WITHOUT_CLASSIFICATION	5.221338795954145E-6	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999931214073071	WITHOUT_CLASSIFICATION	6.878592692849822E-6	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997301778417189	WITHOUT_CLASSIFICATION	2.6982215828108916E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999959708476587	WITHOUT_CLASSIFICATION	4.029152341310678E-6	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999990091807897	WITHOUT_CLASSIFICATION	9.908192103851951E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999998013502874	WITHOUT_CLASSIFICATION	1.9864971246610448E-7	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999968427743939	WITHOUT_CLASSIFICATION	3.1572256060646006E-6	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.999890545590262	WITHOUT_CLASSIFICATION	1.0945440973806746E-4	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995865767930693	WITHOUT_CLASSIFICATION	4.134232069308039E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999983509424121	WITHOUT_CLASSIFICATION	1.649057587918578E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9996358402627276	WITHOUT_CLASSIFICATION	3.6415973727235446E-4	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999999477439695	WITHOUT_CLASSIFICATION	5.225603050428189E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9988177241374517	WITHOUT_CLASSIFICATION	0.0011822758625483452	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999915965635656	WITHOUT_CLASSIFICATION	8.403436434396612E-5	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999790410149038	WITHOUT_CLASSIFICATION	2.095898509623577E-5	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999997712026557	WITHOUT_CLASSIFICATION	2.2879734424991234E-7	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999953537276954	WITHOUT_CLASSIFICATION	4.646272304640797E-6	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999969409176781	WITHOUT_CLASSIFICATION	3.059082321895106E-5	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977847094168	WITHOUT_CLASSIFICATION	2.215290583133429E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999990862706164	WITHOUT_CLASSIFICATION	9.137293835955647E-6	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983922546026	WITHOUT_CLASSIFICATION	1.6077453972973718E-6	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995207751194	WITHOUT_CLASSIFICATION	4.792248806091377E-6	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999988474454262	WITHOUT_CLASSIFICATION	1.1525545737853233E-6	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999988474454262	WITHOUT_CLASSIFICATION	1.1525545737853233E-6	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999988373940953	WITHOUT_CLASSIFICATION	1.1626059045894734E-6	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999997713750671	WITHOUT_CLASSIFICATION	2.286249330278029E-7	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999683121275308	WITHOUT_CLASSIFICATION	3.16878724691563E-5	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999905889494757	WITHOUT_CLASSIFICATION	9.411050524301722E-5	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999998232483032	WITHOUT_CLASSIFICATION	1.7675169679221623E-7	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999991004838017	WITHOUT_CLASSIFICATION	8.99516198240471E-7	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9999615432521711	WITHOUT_CLASSIFICATION	3.845674782884213E-5	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999971070159271	WITHOUT_CLASSIFICATION	2.8929840728181634E-6	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999939291501555	WITHOUT_CLASSIFICATION	6.070849844491048E-6	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958442257044	WITHOUT_CLASSIFICATION	4.155774295529792E-6	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968805691587	WITHOUT_CLASSIFICATION	3.1194308413402948E-6	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959481067321	WITHOUT_CLASSIFICATION	4.051893267894744E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922524551518	WITHOUT_CLASSIFICATION	7.747544848234398E-6	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933098497236	WITHOUT_CLASSIFICATION	6.690150276390853E-6	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942840715955	WITHOUT_CLASSIFICATION	5.715928404497606E-6	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960775892166	WITHOUT_CLASSIFICATION	3.922410783348656E-6	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980682495264	WITHOUT_CLASSIFICATION	1.9317504734983286E-6	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982663516633	WITHOUT_CLASSIFICATION	1.7336483366941638E-6	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965784681075	WITHOUT_CLASSIFICATION	3.4215318924668768E-6	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977023736834	WITHOUT_CLASSIFICATION	2.2976263165895934E-6	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999950636939686	WITHOUT_CLASSIFICATION	4.936306031411554E-6	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9982126674895831	WITHOUT_CLASSIFICATION	0.0017873325104168754	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999251202120922	WITHOUT_CLASSIFICATION	7.487978790774717E-5	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999997103594235	WITHOUT_CLASSIFICATION	2.8964057650982984E-7	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999842449341	WITHOUT_CLASSIFICATION	1.5755065965164733E-8	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999869998715083	WITHOUT_CLASSIFICATION	1.3000128491699285E-5	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999601406431	WITHOUT_CLASSIFICATION	3.985935704394114E-8	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999430776607	WITHOUT_CLASSIFICATION	5.692233915848461E-8	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999251202120922	WITHOUT_CLASSIFICATION	7.487978790774717E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999251202120922	WITHOUT_CLASSIFICATION	7.487978790774717E-5	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999933682072042	WITHOUT_CLASSIFICATION	6.6317927956989004E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999847218129291	WITHOUT_CLASSIFICATION	1.5278187070947896E-5	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998364031114547	WITHOUT_CLASSIFICATION	1.635968885452974E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999999536465491	WITHOUT_CLASSIFICATION	4.635345089956357E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999945215265162	WITHOUT_CLASSIFICATION	5.478473483816886E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9996358402627276	WITHOUT_CLASSIFICATION	3.6415973727235446E-4	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999972473948159	WITHOUT_CLASSIFICATION	2.7526051840818233E-6	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999964744390786	WITHOUT_CLASSIFICATION	3.5255609213999675E-6	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999982006559748	WITHOUT_CLASSIFICATION	1.7993440252504554E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997596776147	WITHOUT_CLASSIFICATION	2.403223853110809E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999999632787775	WITHOUT_CLASSIFICATION	3.672122249458022E-7	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999857780324417	WITHOUT_CLASSIFICATION	1.4221967558188478E-5	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999978782088	WITHOUT_CLASSIFICATION	2.1217911999737263E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999978782088	WITHOUT_CLASSIFICATION	2.1217911999737263E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999990263003568	WITHOUT_CLASSIFICATION	9.736996432108987E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999990263003568	WITHOUT_CLASSIFICATION	9.736996432108987E-7	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896790813168	WITHOUT_CLASSIFICATION	1.0320918683205598E-5	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982248597249	WITHOUT_CLASSIFICATION	1.775140275078763E-6	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999976786033408	WITHOUT_CLASSIFICATION	2.3213966593137916E-6	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928259296075	WITHOUT_CLASSIFICATION	7.174070392498338E-6	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999997880829182	WITHOUT_CLASSIFICATION	2.1191708181398154E-7	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999951151028817	WITHOUT_CLASSIFICATION	4.884897118236075E-6	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999883322049091	WITHOUT_CLASSIFICATION	1.1667795090813335E-5	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951460531843	WITHOUT_CLASSIFICATION	4.853946815666434E-6	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999824500772251	WITHOUT_CLASSIFICATION	1.7549922774843493E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999982130678748	WITHOUT_CLASSIFICATION	1.786932125130491E-6	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999946101502356	WITHOUT_CLASSIFICATION	5.389849764345242E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999688231978826	WITHOUT_CLASSIFICATION	3.117680211736605E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999998694500069	WITHOUT_CLASSIFICATION	1.3054999310581229E-6	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999999194468657	WITHOUT_CLASSIFICATION	8.055313423254513E-8	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999982810385905	WITHOUT_CLASSIFICATION	1.7189614096081841E-6	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999912351342153	WITHOUT_CLASSIFICATION	8.7648657846811E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999972972373645	WITHOUT_CLASSIFICATION	2.7027626355550085E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999972972373645	WITHOUT_CLASSIFICATION	2.7027626355550085E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999995998823841	WITHOUT_CLASSIFICATION	4.0011761594345244E-7	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999990711788318	WITHOUT_CLASSIFICATION	9.288211681689426E-7	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999996826003344	WITHOUT_CLASSIFICATION	3.1739966549907247E-7	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998404611665802	WITHOUT_CLASSIFICATION	1.5953883341982163E-4	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926365789636	WITHOUT_CLASSIFICATION	7.363421036334374E-6	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967332116223	WITHOUT_CLASSIFICATION	3.2667883776859987E-6	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999984609180669	WITHOUT_CLASSIFICATION	1.5390819330598734E-6	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891321348255	WITHOUT_CLASSIFICATION	1.0867865174444075E-5	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999628266538428	WITHOUT_CLASSIFICATION	3.717334615707892E-5	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999488272706	WITHOUT_CLASSIFICATION	5.117272944088391E-8	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999999938439352	WITHOUT_CLASSIFICATION	6.156064798720766E-8	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999863805561165	WITHOUT_CLASSIFICATION	1.3619443883563235E-5	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999943083370015	WITHOUT_CLASSIFICATION	5.69166299849517E-5	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.999926838659621	WITHOUT_CLASSIFICATION	7.316134037906631E-5	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999993373051156	WITHOUT_CLASSIFICATION	6.626948843341563E-7	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998402511962267	WITHOUT_CLASSIFICATION	1.5974880377337693E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999985517538993	WITHOUT_CLASSIFICATION	1.4482461007032041E-6	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999923607320744	WITHOUT_CLASSIFICATION	7.639267925620943E-6	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999949053415526	WITHOUT_CLASSIFICATION	5.09465844743795E-6	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999996835062699	WITHOUT_CLASSIFICATION	3.1649373011006333E-7	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999999927634935	WITHOUT_CLASSIFICATION	7.236506509765547E-8	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999994570549179	WITHOUT_CLASSIFICATION	5.429450820981705E-7	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999915619740775	WITHOUT_CLASSIFICATION	8.438025922429992E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999994636283297	WITHOUT_CLASSIFICATION	5.363716702551264E-7	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999986723052183	WITHOUT_CLASSIFICATION	1.3276947816978031E-6	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999971505173877	WITHOUT_CLASSIFICATION	2.8494826122576844E-6	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999897002433801	WITHOUT_CLASSIFICATION	1.0299756619828438E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999484942344979	WITHOUT_CLASSIFICATION	5.1505765502025E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999946164193828	WITHOUT_CLASSIFICATION	5.383580617269246E-6	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999953824993039	WITHOUT_CLASSIFICATION	4.617500696108872E-5	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999980238588607	WITHOUT_CLASSIFICATION	1.976141139167201E-6	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999794327727515	WITHOUT_CLASSIFICATION	2.0567227248578643E-5	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9994973794708915	WITHOUT_CLASSIFICATION	5.026205291085607E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999897352574939	WITHOUT_CLASSIFICATION	1.0264742506085818E-5	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999359868945323	WITHOUT_CLASSIFICATION	6.40131054676186E-5	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999732486332427	WITHOUT_CLASSIFICATION	2.675136675728993E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999951223641628	WITHOUT_CLASSIFICATION	4.877635837139741E-6	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999904878676416	WITHOUT_CLASSIFICATION	9.512132358458638E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999937594635843	WITHOUT_CLASSIFICATION	6.240536415786472E-6	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999894669246464	WITHOUT_CLASSIFICATION	1.0533075353543584E-5	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999726068710578	WITHOUT_CLASSIFICATION	2.7393128942232685E-5	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999994953604465	WITHOUT_CLASSIFICATION	5.046395534106503E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999655720902394	WITHOUT_CLASSIFICATION	3.442790976061102E-5	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999999824162828	WITHOUT_CLASSIFICATION	1.7583717204693847E-7	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999946143459347	WITHOUT_CLASSIFICATION	5.385654065289162E-6	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999966682966934	WITHOUT_CLASSIFICATION	3.3317033065448943E-6	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999834307867103	WITHOUT_CLASSIFICATION	1.6569213289751075E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999636771923295	WITHOUT_CLASSIFICATION	3.632280767059949E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999936239336353	WITHOUT_CLASSIFICATION	6.376066364634703E-6	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999947055788809	WITHOUT_CLASSIFICATION	5.294421119170566E-6	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999664452458727	WITHOUT_CLASSIFICATION	3.355475412714775E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999311043206307	WITHOUT_CLASSIFICATION	6.889567936928271E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999997204210513	WITHOUT_CLASSIFICATION	2.795789486634939E-7	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997574130840297	WITHOUT_CLASSIFICATION	2.4258691597035272E-4	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999944136210291	WITHOUT_CLASSIFICATION	5.5863789709541345E-6	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999989766170647	WITHOUT_CLASSIFICATION	1.0233829352161186E-6	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999996124870904	WITHOUT_CLASSIFICATION	3.875129096979025E-7	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999973623545725	WITHOUT_CLASSIFICATION	2.6376454275867093E-6	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.99999693020993	WITHOUT_CLASSIFICATION	3.0697900700366503E-6	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999775919201446	WITHOUT_CLASSIFICATION	2.2408079855472877E-5	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999976797876061	WITHOUT_CLASSIFICATION	2.3202123938582347E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999984590441119	WITHOUT_CLASSIFICATION	1.5409558881026113E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999814873957203	WITHOUT_CLASSIFICATION	1.8512604279588883E-5	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999965230079507	WITHOUT_CLASSIFICATION	3.4769920493580207E-6	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999993453623872	WITHOUT_CLASSIFICATION	6.54637612716364E-7	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999504450971077	WITHOUT_CLASSIFICATION	4.955490289231763E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999996151384652	WITHOUT_CLASSIFICATION	3.8486153487231405E-7	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999865774011304	WITHOUT_CLASSIFICATION	1.3422598869609516E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998107655694481	WITHOUT_CLASSIFICATION	1.8923443055186357E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998107655694481	WITHOUT_CLASSIFICATION	1.8923443055186357E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.999994920020258	WITHOUT_CLASSIFICATION	5.079979741997418E-6	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999586409633504	WITHOUT_CLASSIFICATION	4.1359036649571705E-5	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999999890071104	WITHOUT_CLASSIFICATION	1.099288960049243E-7	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999917456185182	WITHOUT_CLASSIFICATION	8.254381481806826E-6	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999994489986764	WITHOUT_CLASSIFICATION	5.510013236647503E-7	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999998999512626	WITHOUT_CLASSIFICATION	1.0004873737049275E-7	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999971551523124	WITHOUT_CLASSIFICATION	2.8448476876090965E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999976077938418	WITHOUT_CLASSIFICATION	2.3922061581613E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999860003777729	WITHOUT_CLASSIFICATION	1.3999622227125226E-5	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999955086775555	WITHOUT_CLASSIFICATION	4.491322444600809E-6	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999972395201407	WITHOUT_CLASSIFICATION	2.7604798593004574E-6	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999897341759052	WITHOUT_CLASSIFICATION	1.0265824094781604E-5	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999814779944548	WITHOUT_CLASSIFICATION	1.852200554524728E-5	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999668155892	WITHOUT_CLASSIFICATION	3.3184410793743525E-7	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998973952332713	WITHOUT_CLASSIFICATION	1.0260476672867265E-4	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999993988598938	WITHOUT_CLASSIFICATION	6.011401062746253E-7	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999813278332824	WITHOUT_CLASSIFICATION	1.8672166717573144E-5	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999993607260675	WITHOUT_CLASSIFICATION	6.3927393250385875E-6	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9998660109998145	WITHOUT_CLASSIFICATION	1.3398900018555147E-4	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999999695755936	WITHOUT_CLASSIFICATION	3.0424406400544574E-7	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999949468071879	WITHOUT_CLASSIFICATION	5.0531928119946E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999937090054223	WITHOUT_CLASSIFICATION	6.290994577672838E-6	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999888908053571	WITHOUT_CLASSIFICATION	1.110919464291348E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9997863253775708	WITHOUT_CLASSIFICATION	2.1367462242902012E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.99999951861883	WITHOUT_CLASSIFICATION	4.813811700448264E-7	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999866531650521	WITHOUT_CLASSIFICATION	1.3346834947936418E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999951341823664	WITHOUT_CLASSIFICATION	4.8658176335874E-6	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998901466513794	WITHOUT_CLASSIFICATION	1.0985334862050243E-4	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999766639101894	WITHOUT_CLASSIFICATION	2.3336089810649028E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999992094451461	WITHOUT_CLASSIFICATION	7.905548538994606E-7	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999606653338627	WITHOUT_CLASSIFICATION	3.933466613719677E-5	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999929476333396	WITHOUT_CLASSIFICATION	7.0523666604518465E-6	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999908521951352	WITHOUT_CLASSIFICATION	9.147804864736061E-6	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999922766487478	WITHOUT_CLASSIFICATION	7.723351252193786E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999910234860478	WITHOUT_CLASSIFICATION	8.976513952162216E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999910234860478	WITHOUT_CLASSIFICATION	8.976513952162216E-6	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999743970597723	WITHOUT_CLASSIFICATION	2.5602940227698683E-5	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999294242646467	WITHOUT_CLASSIFICATION	7.057573535331513E-5	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999989138873567	WITHOUT_CLASSIFICATION	1.086112643266267E-6	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999993686367031	WITHOUT_CLASSIFICATION	6.313632969239233E-7	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999993898900778	WITHOUT_CLASSIFICATION	6.101099222910453E-7	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999852549168469	WITHOUT_CLASSIFICATION	1.4745083153193304E-5	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999269765098892	WITHOUT_CLASSIFICATION	7.302349011083348E-5	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999996658773771	WITHOUT_CLASSIFICATION	3.3412262300034365E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999835138991573	WITHOUT_CLASSIFICATION	1.648610084259664E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999987835596391	WITHOUT_CLASSIFICATION	1.2164403609375359E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999862697207589	WITHOUT_CLASSIFICATION	1.3730279241137282E-5	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999967118693927	WITHOUT_CLASSIFICATION	3.2881306072648207E-6	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999996244096894	WITHOUT_CLASSIFICATION	3.7559031058018374E-7	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999998118339449	WITHOUT_CLASSIFICATION	1.8816605503261324E-7	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999906024238396	WITHOUT_CLASSIFICATION	9.397576160272807E-6	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999994154536267	WITHOUT_CLASSIFICATION	5.845463732937401E-6	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999994154536267	WITHOUT_CLASSIFICATION	5.845463732937401E-6	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999759047652327	WITHOUT_CLASSIFICATION	2.4095234767338408E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999899762662248	WITHOUT_CLASSIFICATION	1.002373377523615E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999994064954998	WITHOUT_CLASSIFICATION	5.935045001923812E-7	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997474151916	WITHOUT_CLASSIFICATION	2.525848084742614E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999688231978826	WITHOUT_CLASSIFICATION	3.117680211736605E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9982745573921546	WITHOUT_CLASSIFICATION	0.0017254426078454155	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999982983160263	WITHOUT_CLASSIFICATION	1.7016839736485093E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999961517235778	WITHOUT_CLASSIFICATION	3.848276422225032E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999961517235778	WITHOUT_CLASSIFICATION	3.848276422225032E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999953799622047	WITHOUT_CLASSIFICATION	4.620037795395007E-6	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999990272208621	WITHOUT_CLASSIFICATION	9.727791378948353E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999829151392577	WITHOUT_CLASSIFICATION	1.7084860742292638E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999996470252989	WITHOUT_CLASSIFICATION	3.529747011809221E-7	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999945574413661	WITHOUT_CLASSIFICATION	5.442558633895672E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998466887756321	WITHOUT_CLASSIFICATION	1.533112243679988E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999994819406903	WITHOUT_CLASSIFICATION	5.180593095841186E-7	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999934415465721	WITHOUT_CLASSIFICATION	6.558453427970593E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996759441179	WITHOUT_CLASSIFICATION	3.240558820495024E-7	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999996384649532	WITHOUT_CLASSIFICATION	3.615350467566419E-7	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999816925393622	WITHOUT_CLASSIFICATION	1.830746063776469E-5	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999964158089206	WITHOUT_CLASSIFICATION	3.5841910793224564E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999992028520585	WITHOUT_CLASSIFICATION	7.971479415323563E-7	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999661038784853	WITHOUT_CLASSIFICATION	3.389612151465261E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999892325678782	WITHOUT_CLASSIFICATION	1.0767432121787292E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999952604032104	WITHOUT_CLASSIFICATION	4.73959678961547E-6	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999959012861239	WITHOUT_CLASSIFICATION	4.098713876029941E-6	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999886446195169	WITHOUT_CLASSIFICATION	1.1355380483094362E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999936498177967	WITHOUT_CLASSIFICATION	6.350182203299602E-5	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999980203138141	WITHOUT_CLASSIFICATION	1.97968618578506E-6	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999988912260176	WITHOUT_CLASSIFICATION	1.1087739823571628E-6	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999849829859613	WITHOUT_CLASSIFICATION	1.5017014038634572E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999613213221047	WITHOUT_CLASSIFICATION	3.867867789528397E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999997469176501	WITHOUT_CLASSIFICATION	2.530823498978753E-7	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999992213187584	WITHOUT_CLASSIFICATION	7.786812416116047E-7	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999996475922167	WITHOUT_CLASSIFICATION	3.52407783307811E-7	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999998989262169	WITHOUT_CLASSIFICATION	1.0107378310620953E-7	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999995021666119	WITHOUT_CLASSIFICATION	4.978333880583004E-7	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999983289080672	WITHOUT_CLASSIFICATION	1.6710919328876377E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.99999989227007	WITHOUT_CLASSIFICATION	1.077299299444764E-7	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999712821765354	WITHOUT_CLASSIFICATION	2.8717823464656838E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999897819469845	WITHOUT_CLASSIFICATION	1.0218053015459735E-5	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9997632335725578	WITHOUT_CLASSIFICATION	2.3676642744216274E-4	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999987692183293	WITHOUT_CLASSIFICATION	1.2307816707001057E-6	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999908977229369	WITHOUT_CLASSIFICATION	9.102277062990706E-6	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999638133900695	WITHOUT_CLASSIFICATION	3.618660993061637E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.999971526747869	WITHOUT_CLASSIFICATION	2.847325213095409E-5	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.999993955804566	WITHOUT_CLASSIFICATION	6.044195434010384E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999967840902252	WITHOUT_CLASSIFICATION	3.2159097748365756E-6	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999964750632223	WITHOUT_CLASSIFICATION	3.52493677769901E-5	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999997918693012	WITHOUT_CLASSIFICATION	2.081306987862878E-7	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999888149143593	WITHOUT_CLASSIFICATION	1.1185085640743963E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999789768476102	WITHOUT_CLASSIFICATION	2.1023152389833484E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999989541667196	WITHOUT_CLASSIFICATION	1.045833280412074E-6	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999996513862273	WITHOUT_CLASSIFICATION	3.4861377267309274E-7	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999891248132026	WITHOUT_CLASSIFICATION	1.0875186797419907E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999967840902252	WITHOUT_CLASSIFICATION	3.2159097748365756E-6	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999964750632223	WITHOUT_CLASSIFICATION	3.52493677769901E-5	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999980193622394	WITHOUT_CLASSIFICATION	1.9806377605046943E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999854119024129	WITHOUT_CLASSIFICATION	1.4588097587218991E-5	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999918404479289	WITHOUT_CLASSIFICATION	8.159552071111681E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999856944073655	WITHOUT_CLASSIFICATION	1.4305592634439215E-5	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999941471975906	WITHOUT_CLASSIFICATION	5.852802409375851E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.999997676808274	WITHOUT_CLASSIFICATION	2.323191726073784E-6	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999873807958443	WITHOUT_CLASSIFICATION	1.2619204155702476E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999904971538902	WITHOUT_CLASSIFICATION	9.502846109834077E-6	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999992135778895	WITHOUT_CLASSIFICATION	7.864221105741747E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8420156770436559	WITHOUT_CLASSIFICATION	0.15798432295634413	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999999984889352	WITHOUT_CLASSIFICATION	1.5110648008535828E-8	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8420156770436559	WITHOUT_CLASSIFICATION	0.15798432295634413	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999987411481427	WITHOUT_CLASSIFICATION	1.2588518573048398E-6	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999998051737026	WITHOUT_CLASSIFICATION	1.9482629740007566E-6	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999996263296722	WITHOUT_CLASSIFICATION	3.73670327803728E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999283483790672	WITHOUT_CLASSIFICATION	7.165162093287617E-5	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999898690650596	WITHOUT_CLASSIFICATION	1.01309349404197E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999063447060601	WITHOUT_CLASSIFICATION	9.365529393989418E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999063447060601	WITHOUT_CLASSIFICATION	9.365529393989418E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999989468868503	WITHOUT_CLASSIFICATION	1.0531131496894221E-5	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999974636229338	WITHOUT_CLASSIFICATION	2.536377066140462E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999722303617394	WITHOUT_CLASSIFICATION	2.7769638260640484E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999560453815883	WITHOUT_CLASSIFICATION	4.395461841162636E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999793796980454	WITHOUT_CLASSIFICATION	2.0620301954663454E-5	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999999900707338	WITHOUT_CLASSIFICATION	9.929266181746175E-9	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.999992919947707	WITHOUT_CLASSIFICATION	7.080052292908826E-6	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999972506069634	WITHOUT_CLASSIFICATION	2.749393036570895E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999823459284927	WITHOUT_CLASSIFICATION	1.7654071507388404E-5	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9999830903828542	WITHOUT_CLASSIFICATION	1.690961714582089E-5	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999971695767007	WITHOUT_CLASSIFICATION	2.830423299333163E-6	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999921321799498	WITHOUT_CLASSIFICATION	7.867820050235672E-6	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999491479705642	WITHOUT_CLASSIFICATION	5.085202943587842E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999983044402101	WITHOUT_CLASSIFICATION	1.6955597898035402E-6	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999977741070409	WITHOUT_CLASSIFICATION	2.225892959025317E-6	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999995536753001	WITHOUT_CLASSIFICATION	4.4632469988858445E-7	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999910967777565	WITHOUT_CLASSIFICATION	8.9032222433571E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999900375717853	WITHOUT_CLASSIFICATION	9.96242821467369E-6	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999861692885038	WITHOUT_CLASSIFICATION	1.3830711496107819E-5	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998210995659088	WITHOUT_CLASSIFICATION	1.7890043409114452E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999983358030863	WITHOUT_CLASSIFICATION	1.6641969136836492E-6	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999356096373868	WITHOUT_CLASSIFICATION	6.439036261314826E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999931237057573	WITHOUT_CLASSIFICATION	6.876294242643204E-6	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999970847530103	WITHOUT_CLASSIFICATION	2.9152469897035584E-6	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999942064054346	WITHOUT_CLASSIFICATION	5.793594565344786E-6	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998576702781389	WITHOUT_CLASSIFICATION	1.4232972186117482E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999968033752442	WITHOUT_CLASSIFICATION	3.196624755664739E-6	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999793099700816	WITHOUT_CLASSIFICATION	2.0690029918460287E-5	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999721502138545	WITHOUT_CLASSIFICATION	2.7849786145436557E-5	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999935043868855	WITHOUT_CLASSIFICATION	6.495613114392587E-6	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9800918951306455	WITHOUT_CLASSIFICATION	0.01990810486935449	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999419160203591	WITHOUT_CLASSIFICATION	5.808397964083401E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.999992919947707	WITHOUT_CLASSIFICATION	7.080052292908826E-6	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999992635169371	WITHOUT_CLASSIFICATION	7.364830627255226E-7	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999911560140116	WITHOUT_CLASSIFICATION	8.84398598845054E-6	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9614560894395655	WITHOUT_CLASSIFICATION	0.038543910560434436	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999633528855869	WITHOUT_CLASSIFICATION	3.6647114413032755E-5	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999993353750785	WITHOUT_CLASSIFICATION	6.646249215970602E-7	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999978722734357	WITHOUT_CLASSIFICATION	2.127726564209981E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999560453815883	WITHOUT_CLASSIFICATION	4.395461841162636E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999560453815883	WITHOUT_CLASSIFICATION	4.395461841162636E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999989647121432	WITHOUT_CLASSIFICATION	1.0352878567089059E-6	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999911413846712	WITHOUT_CLASSIFICATION	8.858615328796004E-6	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.999855778693499	WITHOUT_CLASSIFICATION	1.44221306501115E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.999999394419532	WITHOUT_CLASSIFICATION	6.05580467972463E-7	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999926397327609	WITHOUT_CLASSIFICATION	7.360267239097269E-6	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999985516687264	WITHOUT_CLASSIFICATION	1.44833127362284E-6	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999985876659991	WITHOUT_CLASSIFICATION	1.412334000903756E-5	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999996996506122	WITHOUT_CLASSIFICATION	3.0034938779830146E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999499560175004	WITHOUT_CLASSIFICATION	5.004398249959797E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999984151017155	WITHOUT_CLASSIFICATION	1.5848982846002626E-6	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999941218156229	WITHOUT_CLASSIFICATION	5.878184377094902E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996559745369822	WITHOUT_CLASSIFICATION	3.4402546301770515E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999838809524503	WITHOUT_CLASSIFICATION	1.6119047549701033E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999984151017155	WITHOUT_CLASSIFICATION	1.5848982846002626E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999860294729626	WITHOUT_CLASSIFICATION	1.3970527037378961E-5	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999577751906229	WITHOUT_CLASSIFICATION	4.2224809377143264E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999976996291853	WITHOUT_CLASSIFICATION	2.3003708147606375E-6	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.6330771536629234	DEFECT	0.36692284633707656	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996559745369822	WITHOUT_CLASSIFICATION	3.4402546301770515E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999997334650407	WITHOUT_CLASSIFICATION	2.665349592933543E-6	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996986370389	WITHOUT_CLASSIFICATION	3.013629611994548E-7	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996417554478	WITHOUT_CLASSIFICATION	3.582445522964895E-7	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999997252357383	WITHOUT_CLASSIFICATION	2.7476426165836865E-7	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9996661656727188	WITHOUT_CLASSIFICATION	3.3383432728126744E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999975064493797	WITHOUT_CLASSIFICATION	2.4935506201858786E-6	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999997837893163	WITHOUT_CLASSIFICATION	2.162106837219324E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999869656883119	WITHOUT_CLASSIFICATION	1.3034311688046776E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999834066132427	WITHOUT_CLASSIFICATION	1.6593386757288056E-5	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999867906324742	WITHOUT_CLASSIFICATION	1.3209367525885691E-5	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999973149516845	WITHOUT_CLASSIFICATION	2.68504831549623E-6	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999998083394503	WITHOUT_CLASSIFICATION	1.9166054971861737E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999984151017155	WITHOUT_CLASSIFICATION	1.5848982846002626E-6	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999997334650407	WITHOUT_CLASSIFICATION	2.665349592933543E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996417554478	WITHOUT_CLASSIFICATION	3.582445522964895E-7	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999930148449077	WITHOUT_CLASSIFICATION	6.985155092332967E-6	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999811337298798	WITHOUT_CLASSIFICATION	1.886627012022004E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999974296018467	WITHOUT_CLASSIFICATION	2.5703981533117725E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996559745369822	WITHOUT_CLASSIFICATION	3.4402546301770515E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999994151024117	WITHOUT_CLASSIFICATION	5.848975883173692E-7	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.99997508843534	WITHOUT_CLASSIFICATION	2.4911564660023572E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999277170328076	WITHOUT_CLASSIFICATION	7.228296719241003E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999746438610395	WITHOUT_CLASSIFICATION	2.535613896041836E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999869656883119	WITHOUT_CLASSIFICATION	1.3034311688046776E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999860294729626	WITHOUT_CLASSIFICATION	1.3970527037378961E-5	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999744272972967	WITHOUT_CLASSIFICATION	2.5572702703347823E-5	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999969765893788	WITHOUT_CLASSIFICATION	3.0234106212864018E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999944657377702	WITHOUT_CLASSIFICATION	5.534262229801123E-6	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999988217223484	WITHOUT_CLASSIFICATION	1.1782776514593349E-6	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999882483957191	WITHOUT_CLASSIFICATION	1.1751604280937583E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999861613923988	WITHOUT_CLASSIFICATION	1.3838607601201405E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999869299740197	WITHOUT_CLASSIFICATION	1.3070025980340385E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999283483790672	WITHOUT_CLASSIFICATION	7.165162093287617E-5	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998451575123	WITHOUT_CLASSIFICATION	1.5484248765042087E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772734542527	WITHOUT_CLASSIFICATION	2.272654574731008E-5	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999956033986872	WITHOUT_CLASSIFICATION	4.396601312729964E-6	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999921434612008	WITHOUT_CLASSIFICATION	7.856538799219188E-6	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999984769400253	WITHOUT_CLASSIFICATION	1.5230599746477E-6	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999890597010771	WITHOUT_CLASSIFICATION	1.0940298922892426E-5	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999988878563313	WITHOUT_CLASSIFICATION	1.1121436686830028E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999967140133943	WITHOUT_CLASSIFICATION	3.2859866055891766E-6	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999983471330154	WITHOUT_CLASSIFICATION	1.652866984500574E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999746438610395	WITHOUT_CLASSIFICATION	2.535613896041836E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772734542527	WITHOUT_CLASSIFICATION	2.272654574731008E-5	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999568453150206	WITHOUT_CLASSIFICATION	4.3154684979390836E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999876654790628	WITHOUT_CLASSIFICATION	1.2334520937084103E-5	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999111293008961	WITHOUT_CLASSIFICATION	8.887069910394195E-5	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999753232173266	WITHOUT_CLASSIFICATION	2.467678267335133E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999919859076877	WITHOUT_CLASSIFICATION	8.014092312291849E-6	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999995941299661	WITHOUT_CLASSIFICATION	4.0587003396443683E-7	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999980848771932	WITHOUT_CLASSIFICATION	1.9151228067723835E-6	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999246237331242	WITHOUT_CLASSIFICATION	7.537626687584951E-5	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.99999916222858	WITHOUT_CLASSIFICATION	8.377714199811243E-7	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999904894849961	WITHOUT_CLASSIFICATION	9.510515003896249E-6	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999947538322999	WITHOUT_CLASSIFICATION	5.24616770012338E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999673454318754	WITHOUT_CLASSIFICATION	3.265456812466255E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999782425942744	WITHOUT_CLASSIFICATION	2.1757405725680898E-5	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998873214542352	WITHOUT_CLASSIFICATION	1.1267854576477405E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999997717932642	WITHOUT_CLASSIFICATION	2.282067358042203E-6	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999987627431519	WITHOUT_CLASSIFICATION	1.237256848176634E-6	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999995059839981	WITHOUT_CLASSIFICATION	4.940160018958552E-6	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999978688730882	WITHOUT_CLASSIFICATION	2.1311269118640915E-6	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999997605732049	WITHOUT_CLASSIFICATION	2.394267950710794E-7	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999344686242436	WITHOUT_CLASSIFICATION	6.55313757564008E-5	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999901352826578	WITHOUT_CLASSIFICATION	9.864717342280554E-6	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999988474466152	WITHOUT_CLASSIFICATION	1.1525533848576182E-6	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999980573965064	WITHOUT_CLASSIFICATION	1.942603493606406E-6	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999994949549865	WITHOUT_CLASSIFICATION	5.05045013509742E-7	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999985288543854	WITHOUT_CLASSIFICATION	1.471145614535941E-6	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5073506972042391	WITHOUT_CLASSIFICATION	0.4926493027957609	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999806676876813	WITHOUT_CLASSIFICATION	1.9332312318588527E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999955334437445	WITHOUT_CLASSIFICATION	4.466556255449192E-6	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999810459786563	WITHOUT_CLASSIFICATION	1.8954021343633338E-5	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9825830255093909	WITHOUT_CLASSIFICATION	0.017416974490609024	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999963704328803	WITHOUT_CLASSIFICATION	3.6295671197455552E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999986405171789	WITHOUT_CLASSIFICATION	1.3594828210476887E-6	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999994751216817	WITHOUT_CLASSIFICATION	5.24878318215749E-7	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999825320194577	WITHOUT_CLASSIFICATION	1.746798054231021E-5	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999987769989273	WITHOUT_CLASSIFICATION	1.2230010728421312E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999967390171675	WITHOUT_CLASSIFICATION	3.2609828324263055E-6	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999985853541606	WITHOUT_CLASSIFICATION	1.4146458392820716E-6	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999923826724213	WITHOUT_CLASSIFICATION	7.617327578767606E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999967390171675	WITHOUT_CLASSIFICATION	3.2609828324263055E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999987769989273	WITHOUT_CLASSIFICATION	1.2230010728421312E-6	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999985853541606	WITHOUT_CLASSIFICATION	1.4146458392820716E-6	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999948261885047	WITHOUT_CLASSIFICATION	5.173811495309406E-6	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999997232287734	WITHOUT_CLASSIFICATION	2.767712266201337E-7	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999346847275069	WITHOUT_CLASSIFICATION	6.531527249314845E-5	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999985620967122	WITHOUT_CLASSIFICATION	1.4379032878428012E-6	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999965722676497	WITHOUT_CLASSIFICATION	3.4277323503018513E-6	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8394192005211323	WITHOUT_CLASSIFICATION	0.1605807994788677	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9981399288055067	WITHOUT_CLASSIFICATION	0.0018600711944933384	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999899889343138	WITHOUT_CLASSIFICATION	1.0011065686309973E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999982077063071	WITHOUT_CLASSIFICATION	1.7922936929405038E-6	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999447696542026	WITHOUT_CLASSIFICATION	5.523034579735571E-5	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999975758793306	WITHOUT_CLASSIFICATION	2.4241206693983402E-6	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999992004943142	WITHOUT_CLASSIFICATION	7.995056857556244E-7	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999994229720574	WITHOUT_CLASSIFICATION	5.770279425756074E-7	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.999993455766866	WITHOUT_CLASSIFICATION	6.544233133960547E-6	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999853704620211	WITHOUT_CLASSIFICATION	1.4629537978859328E-5	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999996950303919	WITHOUT_CLASSIFICATION	3.04969608098298E-7	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999934584470633	WITHOUT_CLASSIFICATION	6.541552936636963E-6	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999908653713732	WITHOUT_CLASSIFICATION	9.134628626719378E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999785132980313	WITHOUT_CLASSIFICATION	2.1486701968551636E-5	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999977484649956	WITHOUT_CLASSIFICATION	2.2515350044308343E-6	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999757621955138	WITHOUT_CLASSIFICATION	2.423780448622504E-5	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999997545226601	WITHOUT_CLASSIFICATION	2.4547733995111724E-7	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999593454402561	WITHOUT_CLASSIFICATION	4.065455974383828E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999743523669	WITHOUT_CLASSIFICATION	2.564763324934243E-8	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999984955187523	WITHOUT_CLASSIFICATION	1.5044812477824029E-6	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999984955187523	WITHOUT_CLASSIFICATION	1.5044812477824029E-6	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997785040049	WITHOUT_CLASSIFICATION	2.2149599494620705E-7	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997785040049	WITHOUT_CLASSIFICATION	2.2149599494620705E-7	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999941621053112	WITHOUT_CLASSIFICATION	5.837894688834491E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999934584470633	WITHOUT_CLASSIFICATION	6.541552936636963E-6	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999999167969485	WITHOUT_CLASSIFICATION	8.32030514918366E-7	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999998522935255	WITHOUT_CLASSIFICATION	1.477064745253447E-7	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999606400922554	WITHOUT_CLASSIFICATION	3.935990774457001E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999606400922554	WITHOUT_CLASSIFICATION	3.935990774457001E-5	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999994780384952	WITHOUT_CLASSIFICATION	5.219615047165014E-7	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999869396920731	WITHOUT_CLASSIFICATION	1.306030792694456E-5	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999986795620145	WITHOUT_CLASSIFICATION	1.3204379855155016E-6	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999977999879707	WITHOUT_CLASSIFICATION	2.200012029358841E-6	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999402893216691	WITHOUT_CLASSIFICATION	5.971067833094643E-5	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999999153510257	WITHOUT_CLASSIFICATION	8.464897430053385E-7	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999916533037256	WITHOUT_CLASSIFICATION	8.346696274398166E-6	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999937710225008	WITHOUT_CLASSIFICATION	6.228977499230065E-6	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999943047756902	WITHOUT_CLASSIFICATION	5.695224309838267E-6	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999884589717343	WITHOUT_CLASSIFICATION	1.1541028265760207E-5	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.999994932870905	WITHOUT_CLASSIFICATION	5.067129095059435E-6	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999872053193881	WITHOUT_CLASSIFICATION	1.2794680611930476E-5	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999956179060595	WITHOUT_CLASSIFICATION	4.382093940446325E-6	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999714854919514	WITHOUT_CLASSIFICATION	2.8514508048704762E-5	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999896535548428	WITHOUT_CLASSIFICATION	1.0346445157043928E-5	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999981541415588	WITHOUT_CLASSIFICATION	1.8458584412853852E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877386957529	WITHOUT_CLASSIFICATION	1.2261304247021474E-5	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999931715481334	WITHOUT_CLASSIFICATION	6.828451866644139E-6	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999965886801457	WITHOUT_CLASSIFICATION	3.411319854160906E-6	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999971205901123	WITHOUT_CLASSIFICATION	2.879409887707499E-5	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999995822544909	WITHOUT_CLASSIFICATION	4.1774550916833325E-7	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999926675790192	WITHOUT_CLASSIFICATION	7.332420980786187E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999921176805515	WITHOUT_CLASSIFICATION	7.88231944851066E-6	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999992972027272	WITHOUT_CLASSIFICATION	7.027972727956692E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999905889494757	WITHOUT_CLASSIFICATION	9.411050524301722E-5	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999997724135673	WITHOUT_CLASSIFICATION	2.2758643281492504E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772734542527	WITHOUT_CLASSIFICATION	2.272654574731008E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999673454318754	WITHOUT_CLASSIFICATION	3.265456812466255E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999883701488667	WITHOUT_CLASSIFICATION	1.1629851133359428E-5	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999979583770423	WITHOUT_CLASSIFICATION	2.0416229578038747E-6	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967600348958	WITHOUT_CLASSIFICATION	3.2399651042552317E-6	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947956370916	WITHOUT_CLASSIFICATION	5.204362908375448E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999530819824373	WITHOUT_CLASSIFICATION	4.6918017562685166E-5	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999530819824373	WITHOUT_CLASSIFICATION	4.6918017562685166E-5	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999993226184016	WITHOUT_CLASSIFICATION	6.773815983296552E-7	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999905028680215	WITHOUT_CLASSIFICATION	9.497131978471436E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999827501503732	WITHOUT_CLASSIFICATION	1.724984962681303E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999827501503732	WITHOUT_CLASSIFICATION	1.724984962681303E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999999296909486	WITHOUT_CLASSIFICATION	7.030905140566762E-7	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999987560304571	WITHOUT_CLASSIFICATION	1.2439695428892336E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999497518512559	WITHOUT_CLASSIFICATION	5.024814874418091E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999945215265162	WITHOUT_CLASSIFICATION	5.478473483816886E-6	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999912067293801	WITHOUT_CLASSIFICATION	8.793270619797983E-6	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999766709487069	WITHOUT_CLASSIFICATION	2.3329051293067907E-5	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999942165351219	WITHOUT_CLASSIFICATION	5.783464878087872E-6	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999917255786196	WITHOUT_CLASSIFICATION	8.274421380306227E-6	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999904517455815	WITHOUT_CLASSIFICATION	9.548254418362489E-6	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999904517455815	WITHOUT_CLASSIFICATION	9.548254418362489E-6	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999999927753393	WITHOUT_CLASSIFICATION	7.224660701959492E-8	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999878917768004	WITHOUT_CLASSIFICATION	1.2108223199700169E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999878917768004	WITHOUT_CLASSIFICATION	1.2108223199700169E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999818831723636	WITHOUT_CLASSIFICATION	1.8116827636409256E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999977759364216	WITHOUT_CLASSIFICATION	2.2240635784162437E-6	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9959461682266358	WITHOUT_CLASSIFICATION	0.004053831773364155	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999943852721374	WITHOUT_CLASSIFICATION	5.6147278626861935E-6	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999963060976087	WITHOUT_CLASSIFICATION	3.693902391354375E-6	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999970876474759	WITHOUT_CLASSIFICATION	2.9123525241775843E-6	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999932941741624	WITHOUT_CLASSIFICATION	6.7058258375728076E-6	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999993132726828	WITHOUT_CLASSIFICATION	6.867273173330243E-7	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999992203727648	WITHOUT_CLASSIFICATION	7.796272352458395E-7	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9995774742346591	WITHOUT_CLASSIFICATION	4.22525765340836E-4	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999988782891349	WITHOUT_CLASSIFICATION	1.121710865081342E-6	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999995519275681	WITHOUT_CLASSIFICATION	4.480724319090185E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999859891949499	WITHOUT_CLASSIFICATION	1.4010805050184715E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999859891949499	WITHOUT_CLASSIFICATION	1.4010805050184715E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999859891949499	WITHOUT_CLASSIFICATION	1.4010805050184715E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999859891949499	WITHOUT_CLASSIFICATION	1.4010805050184715E-5	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999984530110579	WITHOUT_CLASSIFICATION	1.546988942055469E-6	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998750569046017	WITHOUT_CLASSIFICATION	1.2494309539833723E-4	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999595211863718	WITHOUT_CLASSIFICATION	4.047881362827041E-5	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999605874695617	WITHOUT_CLASSIFICATION	3.94125304382429E-5	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999977831221116	WITHOUT_CLASSIFICATION	2.2168778883792346E-6	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999977735777538	WITHOUT_CLASSIFICATION	2.226422246354063E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999688231978826	WITHOUT_CLASSIFICATION	3.117680211736605E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997706273772284	WITHOUT_CLASSIFICATION	2.2937262277154116E-4	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999585743538258	WITHOUT_CLASSIFICATION	4.1425646174105153E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999688231978826	WITHOUT_CLASSIFICATION	3.117680211736605E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999688231978826	WITHOUT_CLASSIFICATION	3.117680211736605E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999844409032	WITHOUT_CLASSIFICATION	1.5559096694501883E-8	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999976964109683	WITHOUT_CLASSIFICATION	2.303589031670656E-6	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999907121481747	WITHOUT_CLASSIFICATION	9.287851825201292E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999535271767114	WITHOUT_CLASSIFICATION	4.647282328867191E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999991880541545	WITHOUT_CLASSIFICATION	8.119458455073107E-6	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999893303973523	WITHOUT_CLASSIFICATION	1.0669602647791356E-5	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999981434011639	WITHOUT_CLASSIFICATION	1.856598836135711E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999535271767114	WITHOUT_CLASSIFICATION	4.647282328867191E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999754113512356	WITHOUT_CLASSIFICATION	2.4588648764429927E-5	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999990913812511	WITHOUT_CLASSIFICATION	9.086187489102272E-7	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999945911917867	WITHOUT_CLASSIFICATION	5.408808213398343E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999807994194201	WITHOUT_CLASSIFICATION	1.9200580579956292E-5	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.99940178741653	WITHOUT_CLASSIFICATION	5.982125834701418E-4	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999573577042529	WITHOUT_CLASSIFICATION	4.2642295747090754E-5	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999992919843232	WITHOUT_CLASSIFICATION	7.080156767788383E-7	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999986902526868	WITHOUT_CLASSIFICATION	1.3097473131099564E-6	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969684691506	WITHOUT_CLASSIFICATION	3.0315308493088304E-6	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999999620583368	WITHOUT_CLASSIFICATION	3.7941663200068245E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975708014396	WITHOUT_CLASSIFICATION	2.4291985604950194E-6	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999910756401985	WITHOUT_CLASSIFICATION	8.924359801552216E-6	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999594510258996	WITHOUT_CLASSIFICATION	4.054897410042355E-5	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999904497475378	WITHOUT_CLASSIFICATION	9.55025246213265E-6	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999996160955252	WITHOUT_CLASSIFICATION	3.8390447477680954E-7	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999966926546919	WITHOUT_CLASSIFICATION	3.307345308101657E-5	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999400155134	WITHOUT_CLASSIFICATION	5.998448660974852E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999921366399116	WITHOUT_CLASSIFICATION	7.863360088322626E-6	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999981873603464	WITHOUT_CLASSIFICATION	1.812639653616291E-6	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999921366399116	WITHOUT_CLASSIFICATION	7.863360088322626E-6	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999992912921213	WITHOUT_CLASSIFICATION	7.087078786362891E-7	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999997006690967	WITHOUT_CLASSIFICATION	2.9933090335991326E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999977303150663	WITHOUT_CLASSIFICATION	2.2696849335778975E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999945143740916	WITHOUT_CLASSIFICATION	5.485625908474079E-6	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999400155134	WITHOUT_CLASSIFICATION	5.998448660974852E-8	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999981873603464	WITHOUT_CLASSIFICATION	1.812639653616291E-6	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999992912921213	WITHOUT_CLASSIFICATION	7.087078786362891E-7	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999997844420686	WITHOUT_CLASSIFICATION	2.1555793142924145E-7	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999506727391136	WITHOUT_CLASSIFICATION	4.9327260886374445E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999561296612441	WITHOUT_CLASSIFICATION	4.3870338755828203E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999733669752977	WITHOUT_CLASSIFICATION	2.66330247024064E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999964372311798	WITHOUT_CLASSIFICATION	3.562768820137117E-6	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999129258107	WITHOUT_CLASSIFICATION	8.707418923021152E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877386957529	WITHOUT_CLASSIFICATION	1.2261304247021474E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999997006690967	WITHOUT_CLASSIFICATION	2.9933090335991326E-7	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999784760851	WITHOUT_CLASSIFICATION	2.1523914859332558E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999722567991535	WITHOUT_CLASSIFICATION	2.774320084653016E-5	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999990351926151	WITHOUT_CLASSIFICATION	9.648073849298094E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877386957529	WITHOUT_CLASSIFICATION	1.2261304247021474E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772734542527	WITHOUT_CLASSIFICATION	2.272654574731008E-5	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999982666606223	WITHOUT_CLASSIFICATION	1.7333393777060246E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877386957529	WITHOUT_CLASSIFICATION	1.2261304247021474E-5	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998907910119	WITHOUT_CLASSIFICATION	1.0920898799885969E-7	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999992551263402	WITHOUT_CLASSIFICATION	7.448736597949855E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772734542527	WITHOUT_CLASSIFICATION	2.272654574731008E-5	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999485448548893	WITHOUT_CLASSIFICATION	5.145514511070206E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999994872570718	WITHOUT_CLASSIFICATION	5.127429280967764E-7	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999979164304044	WITHOUT_CLASSIFICATION	2.083569595630328E-6	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999896546127526	WITHOUT_CLASSIFICATION	1.034538724734045E-5	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999990668615274	WITHOUT_CLASSIFICATION	9.331384725242479E-7	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998113880546673	WITHOUT_CLASSIFICATION	1.8861194533275453E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999815636427433	WITHOUT_CLASSIFICATION	1.8436357256766147E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999035661680834	WITHOUT_CLASSIFICATION	9.643383191658012E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998107655694481	WITHOUT_CLASSIFICATION	1.8923443055186357E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999997735026612	WITHOUT_CLASSIFICATION	2.2649733886878388E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9959461682266358	WITHOUT_CLASSIFICATION	0.004053831773364155	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998230447087899	WITHOUT_CLASSIFICATION	1.7695529121009994E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999939291290011	WITHOUT_CLASSIFICATION	6.070870998858403E-6	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999922660974807	WITHOUT_CLASSIFICATION	7.733902519307136E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999135170954102	WITHOUT_CLASSIFICATION	8.648290458984136E-5	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999961355040946	WITHOUT_CLASSIFICATION	3.864495905439281E-6	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999994712748527	WITHOUT_CLASSIFICATION	5.287251473094852E-7	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999980388006026	WITHOUT_CLASSIFICATION	1.961199397398625E-6	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9991306953005761	WITHOUT_CLASSIFICATION	8.693046994239013E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999995786162714	WITHOUT_CLASSIFICATION	4.21383728519045E-7	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999896005773355	WITHOUT_CLASSIFICATION	1.0399422664529954E-5	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9959790104874064	WITHOUT_CLASSIFICATION	0.004020989512593609	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9983803304383397	WITHOUT_CLASSIFICATION	0.0016196695616602253	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9983892093667782	WITHOUT_CLASSIFICATION	0.0016107906332218916	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999864098818647	WITHOUT_CLASSIFICATION	1.3590118135402655E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999909210103418	WITHOUT_CLASSIFICATION	9.078989658072515E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999694745047105	WITHOUT_CLASSIFICATION	3.052549528945059E-5	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999823392237347	WITHOUT_CLASSIFICATION	1.7660776265309316E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999990553530503	WITHOUT_CLASSIFICATION	9.446469496705984E-7	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999933671984803	WITHOUT_CLASSIFICATION	6.6328015196888685E-6	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998579862451142	WITHOUT_CLASSIFICATION	1.4201375488582702E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999921092910109	WITHOUT_CLASSIFICATION	7.890708989148297E-6	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9988563142472509	WITHOUT_CLASSIFICATION	0.0011436857527491893	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999986269845129	WITHOUT_CLASSIFICATION	1.3730154870385813E-6	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999942755000039	WITHOUT_CLASSIFICATION	5.724499996144392E-6	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999698956445356	WITHOUT_CLASSIFICATION	3.0104355464289898E-5	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999953344100946	WITHOUT_CLASSIFICATION	4.665589905458955E-6	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999983074429492	WITHOUT_CLASSIFICATION	1.692557050939796E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9930438240631768	WITHOUT_CLASSIFICATION	0.006956175936823178	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999942531407638	WITHOUT_CLASSIFICATION	5.7468592360899065E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772734542527	WITHOUT_CLASSIFICATION	2.272654574731008E-5	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999835178488369	WITHOUT_CLASSIFICATION	1.6482151163109135E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999781640341403	WITHOUT_CLASSIFICATION	2.183596585969035E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999781640341403	WITHOUT_CLASSIFICATION	2.183596585969035E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999896457440209	WITHOUT_CLASSIFICATION	1.0354255979178014E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998113880546673	WITHOUT_CLASSIFICATION	1.8861194533275453E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999542171859952	WITHOUT_CLASSIFICATION	4.578281400486541E-5	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999867344471692	WITHOUT_CLASSIFICATION	1.3265552830642574E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999045976905316	WITHOUT_CLASSIFICATION	9.540230946832338E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999815663049577	WITHOUT_CLASSIFICATION	1.843369504228918E-5	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999833114663433	WITHOUT_CLASSIFICATION	1.6688533656644953E-5	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.99991081942502	WITHOUT_CLASSIFICATION	8.918057498002033E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999988331817766	WITHOUT_CLASSIFICATION	1.1668182234208654E-6	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999981547205989	WITHOUT_CLASSIFICATION	1.8452794010181016E-6	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999888861842108	WITHOUT_CLASSIFICATION	1.1113815789211752E-5	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999967350538642	WITHOUT_CLASSIFICATION	3.2649461356984905E-6	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999619427136771	WITHOUT_CLASSIFICATION	3.8057286322911864E-5	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999680977545005	WITHOUT_CLASSIFICATION	3.1902245499487385E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999891039617436	WITHOUT_CLASSIFICATION	1.0896038256433712E-5	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999991890355286	WITHOUT_CLASSIFICATION	8.109644712855749E-7	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999908919730363	WITHOUT_CLASSIFICATION	9.108026963680312E-6	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999987713202635	WITHOUT_CLASSIFICATION	1.2286797365367696E-6	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999993116653847	WITHOUT_CLASSIFICATION	6.88334615261964E-7	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999973104331231	WITHOUT_CLASSIFICATION	2.6895668768315354E-6	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999998767380719	WITHOUT_CLASSIFICATION	1.2326192803980405E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999909866595914	WITHOUT_CLASSIFICATION	9.013340408555732E-6	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999700285871752	WITHOUT_CLASSIFICATION	2.9971412824787404E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999921017608233	WITHOUT_CLASSIFICATION	7.898239176738922E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9930438240631768	WITHOUT_CLASSIFICATION	0.006956175936823178	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999966881108073	WITHOUT_CLASSIFICATION	3.3118891925942717E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999721398837497	WITHOUT_CLASSIFICATION	2.7860116250291034E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999939650029781	WITHOUT_CLASSIFICATION	6.034997021884601E-6	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999984356701078	WITHOUT_CLASSIFICATION	1.56432989220921E-5	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9997587247248992	WITHOUT_CLASSIFICATION	2.4127527510069092E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999220244485714	WITHOUT_CLASSIFICATION	7.797555142857973E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999208219264148	WITHOUT_CLASSIFICATION	7.917807358522761E-5	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999983735002573	WITHOUT_CLASSIFICATION	1.6264997425664354E-6	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999994559943982	WITHOUT_CLASSIFICATION	5.440056019139115E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999987778922366	WITHOUT_CLASSIFICATION	1.2221077634797804E-6	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999994597730846	WITHOUT_CLASSIFICATION	5.402269154330914E-7	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999981933713604	WITHOUT_CLASSIFICATION	1.8066286395955804E-6	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999790337596213	WITHOUT_CLASSIFICATION	2.096624037871748E-5	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999231641403679	WITHOUT_CLASSIFICATION	7.683585963216793E-5	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999300140763	WITHOUT_CLASSIFICATION	6.998592374646512E-8	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999300140763	WITHOUT_CLASSIFICATION	6.998592374646512E-8	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999919374047568	WITHOUT_CLASSIFICATION	8.06259524323243E-6	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999998200393925	WITHOUT_CLASSIFICATION	1.7996060750449652E-6	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9993913668600246	WITHOUT_CLASSIFICATION	6.086331399754859E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9993913668600246	WITHOUT_CLASSIFICATION	6.086331399754859E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999990991043122	WITHOUT_CLASSIFICATION	9.008956878332785E-7	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.999572646368494	WITHOUT_CLASSIFICATION	4.273536315059334E-4	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999987992021058	WITHOUT_CLASSIFICATION	1.2007978943090904E-6	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999939321411813	WITHOUT_CLASSIFICATION	6.06785881876813E-6	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999964058514297	WITHOUT_CLASSIFICATION	3.5941485702195677E-6	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999911563653207	WITHOUT_CLASSIFICATION	8.843634679302356E-5	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999988610267032	WITHOUT_CLASSIFICATION	1.1389732967569651E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999988610267032	WITHOUT_CLASSIFICATION	1.1389732967569651E-6	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998929823827322	WITHOUT_CLASSIFICATION	1.0701761726788203E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999993407198917	WITHOUT_CLASSIFICATION	6.59280108340478E-7	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999770185109815	WITHOUT_CLASSIFICATION	2.2981489018422086E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999940319538291	WITHOUT_CLASSIFICATION	5.968046170934184E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999940319538291	WITHOUT_CLASSIFICATION	5.968046170934184E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.999997956359558	WITHOUT_CLASSIFICATION	2.0436404419458447E-6	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999992548647317	WITHOUT_CLASSIFICATION	7.451352682564693E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999933336031936	WITHOUT_CLASSIFICATION	6.666396806360396E-6	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999889081199761	WITHOUT_CLASSIFICATION	1.1091880023912423E-5	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999990031105672	WITHOUT_CLASSIFICATION	9.96889432790548E-7	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999974963310289	WITHOUT_CLASSIFICATION	2.503668971136288E-6	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999792758054667	WITHOUT_CLASSIFICATION	2.0724194533333876E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999927228119989	WITHOUT_CLASSIFICATION	7.277188001173246E-6	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.999999344761119	WITHOUT_CLASSIFICATION	6.552388810647727E-7	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999958333322589	WITHOUT_CLASSIFICATION	4.166667741077748E-6	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999968558154687	WITHOUT_CLASSIFICATION	3.1441845312690988E-6	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999678039854218	WITHOUT_CLASSIFICATION	3.219601457818905E-5	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999963574212599	WITHOUT_CLASSIFICATION	3.6425787400875362E-6	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999997016921083	WITHOUT_CLASSIFICATION	2.983078916857504E-7	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999925480402948	WITHOUT_CLASSIFICATION	7.4519597052148955E-6	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9997289927857477	WITHOUT_CLASSIFICATION	2.7100721425229356E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999981749488064	WITHOUT_CLASSIFICATION	1.8250511935509394E-6	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999876452240527	WITHOUT_CLASSIFICATION	1.2354775947318344E-5	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999975304562712	WITHOUT_CLASSIFICATION	2.4695437288428927E-6	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999988612581828	WITHOUT_CLASSIFICATION	1.1387418171536426E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999997256953029	WITHOUT_CLASSIFICATION	2.7430469712461676E-7	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999773127217197	WITHOUT_CLASSIFICATION	2.2687278280189007E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999659429749284	WITHOUT_CLASSIFICATION	3.4057025071552476E-5	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999802193122902	WITHOUT_CLASSIFICATION	1.9780687709817797E-5	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9998982093782588	WITHOUT_CLASSIFICATION	1.0179062174124113E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999967986943222	WITHOUT_CLASSIFICATION	3.201305677745148E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999965458735488	WITHOUT_CLASSIFICATION	3.454126451239738E-6	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999762331104447	WITHOUT_CLASSIFICATION	2.3766889555361456E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999996812181109	WITHOUT_CLASSIFICATION	3.1878188906271005E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999998013502874	WITHOUT_CLASSIFICATION	1.9864971246610448E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9988177241374517	WITHOUT_CLASSIFICATION	0.0011822758625483452	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999998857474894	WITHOUT_CLASSIFICATION	1.1425251055548583E-7	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999937647604559	WITHOUT_CLASSIFICATION	6.235239544137536E-6	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999810462749474	WITHOUT_CLASSIFICATION	1.8953725052482225E-5	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999983812342356	WITHOUT_CLASSIFICATION	1.6187657643732328E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999840957912701	WITHOUT_CLASSIFICATION	1.5904208729957925E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999339287307542	WITHOUT_CLASSIFICATION	6.607126924580958E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999420161104	WITHOUT_CLASSIFICATION	5.798388959550108E-7	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999984452051764	WITHOUT_CLASSIFICATION	1.554794823582404E-6	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999999289717264	WITHOUT_CLASSIFICATION	7.102827360040313E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999996415534659	WITHOUT_CLASSIFICATION	3.5844653421063254E-7	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999597348636395	WITHOUT_CLASSIFICATION	4.0265136360464974E-5	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999953836555613	WITHOUT_CLASSIFICATION	4.616344438666017E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999993775495964	WITHOUT_CLASSIFICATION	6.224504035951761E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999981053602154	WITHOUT_CLASSIFICATION	1.894639784531892E-6	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999992279973406	WITHOUT_CLASSIFICATION	7.720026594080176E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9999533591739413	WITHOUT_CLASSIFICATION	4.6640826058683513E-5	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999982730000047	WITHOUT_CLASSIFICATION	1.7269999952512124E-6	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999999800886736	WITHOUT_CLASSIFICATION	1.9911326399282663E-7	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999111786647	WITHOUT_CLASSIFICATION	8.882133526499977E-8	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999986218686138	WITHOUT_CLASSIFICATION	1.3781313862395597E-6	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999976997465542	WITHOUT_CLASSIFICATION	2.3002534458003756E-6	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999922672772351	WITHOUT_CLASSIFICATION	7.732722764912605E-6	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999998735427372	WITHOUT_CLASSIFICATION	1.2645726286110323E-7	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9998660975760627	WITHOUT_CLASSIFICATION	1.339024239372683E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999986000023307	WITHOUT_CLASSIFICATION	1.3999976692895547E-6	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999884928842069	WITHOUT_CLASSIFICATION	1.1507115793065544E-5	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.99999740475419	WITHOUT_CLASSIFICATION	2.5952458100723943E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999804624476522	WITHOUT_CLASSIFICATION	1.953755234789055E-5	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999979055417894	WITHOUT_CLASSIFICATION	2.0944582106741927E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999777427576145	WITHOUT_CLASSIFICATION	2.2257242385415064E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999777427576145	WITHOUT_CLASSIFICATION	2.2257242385415064E-5	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999982152895602	WITHOUT_CLASSIFICATION	1.7847104397747746E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999994910913381	WITHOUT_CLASSIFICATION	5.089086619866421E-7	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999998661457814	WITHOUT_CLASSIFICATION	1.3385421854671654E-7	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999998695294423	WITHOUT_CLASSIFICATION	1.304705576303592E-7	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999905821978141	WITHOUT_CLASSIFICATION	9.417802185799329E-6	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999970374897026	WITHOUT_CLASSIFICATION	2.9625102973806413E-6	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999966359601754	WITHOUT_CLASSIFICATION	3.3640398246309916E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999998099721074	WITHOUT_CLASSIFICATION	1.9002789261055023E-7	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999235762647296	WITHOUT_CLASSIFICATION	7.642373527043232E-5	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999737811109684	WITHOUT_CLASSIFICATION	2.621888903167766E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999972215352271	WITHOUT_CLASSIFICATION	2.7784647729027256E-6	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999166463325471	WITHOUT_CLASSIFICATION	8.335366745292222E-5	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999885357680748	WITHOUT_CLASSIFICATION	1.1464231925307837E-5	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999987006790659	WITHOUT_CLASSIFICATION	1.2993209339947805E-6	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998494381255	WITHOUT_CLASSIFICATION	1.5056187451271517E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998494381255	WITHOUT_CLASSIFICATION	1.5056187451271517E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999992947121028	WITHOUT_CLASSIFICATION	7.05287897123961E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999917669285426	WITHOUT_CLASSIFICATION	8.233071457388892E-6	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999991327385575	WITHOUT_CLASSIFICATION	8.672614425037806E-7	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999987155504989	WITHOUT_CLASSIFICATION	1.2844495011430169E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999956331793409	WITHOUT_CLASSIFICATION	4.366820659053103E-6	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967155950478	WITHOUT_CLASSIFICATION	3.284404952360221E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999827707074792	WITHOUT_CLASSIFICATION	1.722929252079512E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999904687347244	WITHOUT_CLASSIFICATION	9.531265275610586E-6	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999999839260775	WITHOUT_CLASSIFICATION	1.6073922510237295E-7	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999935250556424	WITHOUT_CLASSIFICATION	6.474944357623469E-6	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999969692887232	WITHOUT_CLASSIFICATION	3.0307112768153987E-6	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999994537967023	WITHOUT_CLASSIFICATION	5.462032977094796E-7	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999263488855	WITHOUT_CLASSIFICATION	7.365111444492259E-8	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999994453114988	WITHOUT_CLASSIFICATION	5.546885011560697E-7	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999997829480535	WITHOUT_CLASSIFICATION	2.170519465649838E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999898874174614	WITHOUT_CLASSIFICATION	1.0112582538601276E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999778026436601	WITHOUT_CLASSIFICATION	2.219735633984131E-5	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999996835943514	WITHOUT_CLASSIFICATION	3.164056486692148E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999972319072262	WITHOUT_CLASSIFICATION	2.7680927737059924E-6	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999985791297298	WITHOUT_CLASSIFICATION	1.4208702702121516E-6	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999552497362415	WITHOUT_CLASSIFICATION	4.4750263758567454E-5	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999772114984	WITHOUT_CLASSIFICATION	2.278850154979194E-8	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997781535166	WITHOUT_CLASSIFICATION	2.2184648342716908E-7	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999572028977672	WITHOUT_CLASSIFICATION	4.2797102232677677E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997301778417189	WITHOUT_CLASSIFICATION	2.6982215828108916E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9997181273702644	WITHOUT_CLASSIFICATION	2.818726297354961E-4	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999998928368436	WITHOUT_CLASSIFICATION	1.071631564045341E-6	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999947329320837	WITHOUT_CLASSIFICATION	5.267067916304294E-5	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999969043537531	WITHOUT_CLASSIFICATION	3.095646246959049E-6	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999927336916457	WITHOUT_CLASSIFICATION	7.26630835439532E-6	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999943380031383	WITHOUT_CLASSIFICATION	5.66199686170614E-6	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999557475415141	WITHOUT_CLASSIFICATION	4.4252458486024404E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999970653212702	WITHOUT_CLASSIFICATION	2.9346787299028764E-6	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998794295061227	WITHOUT_CLASSIFICATION	1.2057049387725037E-4	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9955894393969003	WITHOUT_CLASSIFICATION	0.004410560603099787	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999998947816041	WITHOUT_CLASSIFICATION	1.0521839589044157E-6	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999833598894234	WITHOUT_CLASSIFICATION	1.66401105765071E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999972720204087	WITHOUT_CLASSIFICATION	2.7279795914270335E-6	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999885420730622	WITHOUT_CLASSIFICATION	1.145792693771666E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999968525087922	WITHOUT_CLASSIFICATION	3.1474912078282554E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999932933820948	WITHOUT_CLASSIFICATION	6.706617905250492E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999932933820948	WITHOUT_CLASSIFICATION	6.706617905250492E-6	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999998613425352	WITHOUT_CLASSIFICATION	1.3865746483977823E-7	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999994274905596	WITHOUT_CLASSIFICATION	5.725094404144079E-7	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9998967698510425	WITHOUT_CLASSIFICATION	1.032301489575546E-4	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999933457240278	WITHOUT_CLASSIFICATION	6.654275972265099E-6	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999796682449621	WITHOUT_CLASSIFICATION	2.033175503788975E-5	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999651543350798	WITHOUT_CLASSIFICATION	3.484566492009184E-5	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999925588743276	WITHOUT_CLASSIFICATION	7.441125672403947E-6	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999991832363231	WITHOUT_CLASSIFICATION	8.16763676912723E-7	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999701855847546	WITHOUT_CLASSIFICATION	2.9814415245442167E-5	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999481954892	WITHOUT_CLASSIFICATION	5.180451080006409E-6	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944837719356	WITHOUT_CLASSIFICATION	5.51622806436823E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999251202120922	WITHOUT_CLASSIFICATION	7.487978790774717E-5	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9997718879069238	WITHOUT_CLASSIFICATION	2.2811209307621247E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999507453917492	WITHOUT_CLASSIFICATION	4.9254608250736866E-5	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999998775880306	WITHOUT_CLASSIFICATION	1.2241196942269887E-7	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999994589440254	WITHOUT_CLASSIFICATION	5.410559745681957E-7	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999532837479297	WITHOUT_CLASSIFICATION	4.671625207037411E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999999944222187	WITHOUT_CLASSIFICATION	5.5777813121462945E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999593223732733	WITHOUT_CLASSIFICATION	4.0677626726609503E-5	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999997211946091	WITHOUT_CLASSIFICATION	2.7880539082760365E-7	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998143587403	WITHOUT_CLASSIFICATION	1.856412596641352E-7	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999981199085438	WITHOUT_CLASSIFICATION	1.8800914561678306E-6	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999985455650774	WITHOUT_CLASSIFICATION	1.4544349225965232E-5	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999941625199801	WITHOUT_CLASSIFICATION	5.837480019908003E-5	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999912628440855	WITHOUT_CLASSIFICATION	8.737155914566456E-6	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999962470328412	WITHOUT_CLASSIFICATION	3.7529671588929006E-6	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.999946031551136	WITHOUT_CLASSIFICATION	5.3968448863820064E-5	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999919885844749	WITHOUT_CLASSIFICATION	8.01141552511631E-6	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999906468881279	WITHOUT_CLASSIFICATION	9.35311187209136E-6	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999925909031014	WITHOUT_CLASSIFICATION	7.409096898549582E-6	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999998991201517	WITHOUT_CLASSIFICATION	1.0087984821377303E-7	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999999906266349	WITHOUT_CLASSIFICATION	9.373365096359212E-8	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999978354065534	WITHOUT_CLASSIFICATION	2.1645934466811807E-6	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997935152881	WITHOUT_CLASSIFICATION	2.064847118649903E-7	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999990645526226	WITHOUT_CLASSIFICATION	9.354473775801066E-7	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998814349973677	WITHOUT_CLASSIFICATION	1.1856500263219001E-4	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999999581148243	WITHOUT_CLASSIFICATION	4.188517569039265E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999996259910612	WITHOUT_CLASSIFICATION	3.7400893881870505E-7	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999995411087377	WITHOUT_CLASSIFICATION	4.588912623367604E-7	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.999988858855428	WITHOUT_CLASSIFICATION	1.1141144572097304E-5	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999943162990071	WITHOUT_CLASSIFICATION	5.68370099281967E-6	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999983221571029	WITHOUT_CLASSIFICATION	1.6778428970538411E-6	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999997540723583	WITHOUT_CLASSIFICATION	2.459276417055675E-7	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999999814534403	WITHOUT_CLASSIFICATION	1.8546559714218255E-7	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998939939623	WITHOUT_CLASSIFICATION	1.0600603773240418E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999917317353891	WITHOUT_CLASSIFICATION	8.268264610858872E-6	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999839734494288	WITHOUT_CLASSIFICATION	1.6026550571168397E-5	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999885357680748	WITHOUT_CLASSIFICATION	1.1464231925307837E-5	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.999994377229561	WITHOUT_CLASSIFICATION	5.62277043899066E-6	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999378835905	WITHOUT_CLASSIFICATION	6.211640949732976E-8	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999855809589988	WITHOUT_CLASSIFICATION	1.441904100114772E-5	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999734302461886	WITHOUT_CLASSIFICATION	2.6569753811413005E-5	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999998121019079	WITHOUT_CLASSIFICATION	1.8789809203779246E-7	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999892895209289	WITHOUT_CLASSIFICATION	1.071047907114412E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999538700838766	WITHOUT_CLASSIFICATION	4.612991612333367E-5	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999375194774	WITHOUT_CLASSIFICATION	6.2480522680057E-8	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999946101502356	WITHOUT_CLASSIFICATION	5.389849764345242E-6	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999998949925683	WITHOUT_CLASSIFICATION	1.050074317114943E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999992071630551	WITHOUT_CLASSIFICATION	7.928369448442126E-7	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998467931281011	WITHOUT_CLASSIFICATION	1.5320687189888534E-4	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999987560105783	WITHOUT_CLASSIFICATION	1.2439894217773468E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999991168573062	WITHOUT_CLASSIFICATION	8.831426937705775E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937606709163	WITHOUT_CLASSIFICATION	6.239329083696525E-6	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998829909136497	WITHOUT_CLASSIFICATION	1.1700908635035498E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999962995063693	WITHOUT_CLASSIFICATION	3.7004936307850335E-6	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999774140577	WITHOUT_CLASSIFICATION	2.2585942326893175E-8	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999970832087786	WITHOUT_CLASSIFICATION	2.9167912214494467E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937606709163	WITHOUT_CLASSIFICATION	6.239329083696525E-6	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999978159154018	WITHOUT_CLASSIFICATION	2.184084598205678E-6	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999990894715548	WITHOUT_CLASSIFICATION	9.105284452602844E-7	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999998679131463	WITHOUT_CLASSIFICATION	1.3208685367464693E-7	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999943710100689	WITHOUT_CLASSIFICATION	5.6289899310893586E-5	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999838911709202	WITHOUT_CLASSIFICATION	1.6108829079708413E-5	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999955623393506	WITHOUT_CLASSIFICATION	4.437660649358286E-6	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999558073386	WITHOUT_CLASSIFICATION	4.4192661388820074E-7	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999954116867341	WITHOUT_CLASSIFICATION	4.588313265904557E-6	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999992052248245	WITHOUT_CLASSIFICATION	7.947751754714383E-7	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998193242567	WITHOUT_CLASSIFICATION	1.8067574329106682E-7	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999995237429468	WITHOUT_CLASSIFICATION	4.762570531886762E-7	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998485813903977	WITHOUT_CLASSIFICATION	1.5141860960236924E-4	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999748249124065	WITHOUT_CLASSIFICATION	2.5175087593461695E-5	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999992589318186	WITHOUT_CLASSIFICATION	7.410681813737554E-7	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999981641115041	WITHOUT_CLASSIFICATION	1.835888495906337E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999921017608233	WITHOUT_CLASSIFICATION	7.898239176738922E-6	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999726721432	WITHOUT_CLASSIFICATION	2.732785679961053E-8	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999992890835008	WITHOUT_CLASSIFICATION	7.109164992661113E-7	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999864576012605	WITHOUT_CLASSIFICATION	1.3542398739607078E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999842118497992	WITHOUT_CLASSIFICATION	1.578815020082446E-5	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999996606451046	WITHOUT_CLASSIFICATION	3.3935489541706896E-7	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999899303482533	WITHOUT_CLASSIFICATION	1.0069651746621247E-5	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999998938873311	WITHOUT_CLASSIFICATION	1.0611266882481668E-7	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999994180603	WITHOUT_CLASSIFICATION	5.819397006587716E-9	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999994160277647	WITHOUT_CLASSIFICATION	5.839722354791213E-7	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999933239712285	WITHOUT_CLASSIFICATION	6.676028771465836E-6	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9991474903573688	WITHOUT_CLASSIFICATION	8.525096426311396E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999985517538993	WITHOUT_CLASSIFICATION	1.4482461007032041E-6	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999940116950694	WITHOUT_CLASSIFICATION	5.9883049306756475E-6	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999866034215728	WITHOUT_CLASSIFICATION	1.3396578427241174E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999977128569184	WITHOUT_CLASSIFICATION	2.2871430815452232E-6	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999907656154137	WITHOUT_CLASSIFICATION	9.23438458621721E-6	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999627042787532	WITHOUT_CLASSIFICATION	3.729572124687864E-5	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.99999803215614	WITHOUT_CLASSIFICATION	1.967843859992233E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9998886378750876	WITHOUT_CLASSIFICATION	1.1136212491231816E-4	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9998852238097246	WITHOUT_CLASSIFICATION	1.1477619027546068E-4	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999389843502376	WITHOUT_CLASSIFICATION	6.101564976233301E-5	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999997744878985	WITHOUT_CLASSIFICATION	2.255121014778959E-7	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999983374537168	WITHOUT_CLASSIFICATION	1.6625462831697944E-6	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.99999951861883	WITHOUT_CLASSIFICATION	4.813811700448264E-7	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999993074359299	WITHOUT_CLASSIFICATION	6.925640701485277E-7	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999993074359299	WITHOUT_CLASSIFICATION	6.925640701485277E-7	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999852549168469	WITHOUT_CLASSIFICATION	1.4745083153193304E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999987835596391	WITHOUT_CLASSIFICATION	1.2164403609375359E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997474151916	WITHOUT_CLASSIFICATION	2.525848084742614E-7	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9998420034988791	WITHOUT_CLASSIFICATION	1.5799650112091195E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999945215265162	WITHOUT_CLASSIFICATION	5.478473483816886E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999945215265162	WITHOUT_CLASSIFICATION	5.478473483816886E-6	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999866453124439	WITHOUT_CLASSIFICATION	1.3354687556164283E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999952604032104	WITHOUT_CLASSIFICATION	4.73959678961547E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999468234295659	WITHOUT_CLASSIFICATION	5.317657043402253E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999613213221047	WITHOUT_CLASSIFICATION	3.867867789528397E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999912398364497	WITHOUT_CLASSIFICATION	8.76016355036538E-6	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999984461834173	WITHOUT_CLASSIFICATION	1.5538165828014669E-6	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999992256038381	WITHOUT_CLASSIFICATION	7.74396161906087E-7	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999973720684224	WITHOUT_CLASSIFICATION	2.6279315775557853E-6	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999948818814186	WITHOUT_CLASSIFICATION	5.118118581428197E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999813025318502	WITHOUT_CLASSIFICATION	1.869746814968812E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999813025318502	WITHOUT_CLASSIFICATION	1.869746814968812E-5	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.999997137153304	WITHOUT_CLASSIFICATION	2.862846696090087E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999869656883119	WITHOUT_CLASSIFICATION	1.3034311688046776E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999975064493797	WITHOUT_CLASSIFICATION	2.4935506201858786E-6	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999915464594135	WITHOUT_CLASSIFICATION	8.453540586539622E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772734542527	WITHOUT_CLASSIFICATION	2.272654574731008E-5	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999985679816255	WITHOUT_CLASSIFICATION	1.4320183744882467E-6	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998451575123	WITHOUT_CLASSIFICATION	1.5484248765042087E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772734542527	WITHOUT_CLASSIFICATION	2.272654574731008E-5	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999999938484163	WITHOUT_CLASSIFICATION	6.15158369021243E-8	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999996155343628	WITHOUT_CLASSIFICATION	3.844656372128992E-6	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998651309158054	WITHOUT_CLASSIFICATION	1.348690841947034E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9994529717096764	WITHOUT_CLASSIFICATION	5.470282903235692E-4	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998193242567	WITHOUT_CLASSIFICATION	1.8067574329106682E-7	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999992242505719	WITHOUT_CLASSIFICATION	7.757494281235908E-7	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9972372666770484	WITHOUT_CLASSIFICATION	0.0027627333229516566	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999992651126698	WITHOUT_CLASSIFICATION	7.34887330181322E-7	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999900128497775	WITHOUT_CLASSIFICATION	9.98715022252163E-6	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999979426661242	WITHOUT_CLASSIFICATION	2.0573338757236176E-6	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999940629588907	WITHOUT_CLASSIFICATION	5.937041109256142E-6	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999947070273651	WITHOUT_CLASSIFICATION	5.292972634895081E-5	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999835619952	WITHOUT_CLASSIFICATION	1.6438004850768395E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999953558270135	WITHOUT_CLASSIFICATION	4.644172986481672E-6	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999912319445623	WITHOUT_CLASSIFICATION	8.768055437619854E-6	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999912319445623	WITHOUT_CLASSIFICATION	8.768055437619854E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999535271767114	WITHOUT_CLASSIFICATION	4.647282328867191E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999489355084	WITHOUT_CLASSIFICATION	5.106449163459633E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999688231978826	WITHOUT_CLASSIFICATION	3.117680211736605E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999994613662144	WITHOUT_CLASSIFICATION	5.386337856681276E-7	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999927341911796	WITHOUT_CLASSIFICATION	7.2658088203013965E-6	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999991579047767	WITHOUT_CLASSIFICATION	8.420952233295513E-7	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999996160955252	WITHOUT_CLASSIFICATION	3.8390447477680954E-7	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999985550924642	WITHOUT_CLASSIFICATION	1.4449075358865E-6	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999997844420686	WITHOUT_CLASSIFICATION	2.1555793142924145E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999925287386561	WITHOUT_CLASSIFICATION	7.471261343849166E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877386957529	WITHOUT_CLASSIFICATION	1.2261304247021474E-5	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999926543612304	WITHOUT_CLASSIFICATION	7.345638769585597E-6	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999995174779014	WITHOUT_CLASSIFICATION	4.825220986194223E-7	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999978402159473	WITHOUT_CLASSIFICATION	2.1597840527316364E-6	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999997418535654	WITHOUT_CLASSIFICATION	2.581464345987084E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999988901831318	WITHOUT_CLASSIFICATION	1.1098168681430394E-6	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999996903459678	WITHOUT_CLASSIFICATION	3.0965403222508316E-7	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999971874275256	WITHOUT_CLASSIFICATION	2.8125724744211955E-6	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999786811426188	WITHOUT_CLASSIFICATION	2.131885738119131E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999857597343098	WITHOUT_CLASSIFICATION	1.4240265690197227E-4	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998128963923198	WITHOUT_CLASSIFICATION	1.8710360768018204E-4	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9995858085080035	WITHOUT_CLASSIFICATION	4.141914919965158E-4	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999933336031936	WITHOUT_CLASSIFICATION	6.666396806360396E-6	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9827891618585489	WITHOUT_CLASSIFICATION	0.01721083814145105	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995395192678	WITHOUT_CLASSIFICATION	4.604807321466704E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995395192678	WITHOUT_CLASSIFICATION	4.604807321466704E-7	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999934440105568	WITHOUT_CLASSIFICATION	6.55598944324193E-6	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999994302297621	WITHOUT_CLASSIFICATION	5.697702377763768E-7	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999645502415	WITHOUT_CLASSIFICATION	3.544975851330519E-8	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999046469733	WITHOUT_CLASSIFICATION	9.535302674548036E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999992021992597	WITHOUT_CLASSIFICATION	7.978007403115276E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9971926504998606	WITHOUT_CLASSIFICATION	0.0028073495001395142	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9999050534895216	WITHOUT_CLASSIFICATION	9.494651047837742E-5	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999920411348938	WITHOUT_CLASSIFICATION	7.958865106178851E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9999174823010071	WITHOUT_CLASSIFICATION	8.251769899296119E-5	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9747280091194701	WITHOUT_CLASSIFICATION	0.02527199088052983	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9992714370994542	WITHOUT_CLASSIFICATION	7.285629005458898E-4	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9975536521008149	WITHOUT_CLASSIFICATION	0.0024463478991850317	DEFECT
/*	DEFECT	0.9999213888541154	WITHOUT_CLASSIFICATION	7.861114588460793E-5	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9970211822070347	WITHOUT_CLASSIFICATION	0.0029788177929652524	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9940245499048814	WITHOUT_CLASSIFICATION	0.005975450095118474	DEFECT
// TODO : should this be an error?	DEFECT	0.9957343994326985	DEFECT	0.004265600567301572	WITHOUT_CLASSIFICATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9950606561177842	DEFECT	0.0049393438822158174	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.5438823573318452	WITHOUT_CLASSIFICATION	0.45611764266815474	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8018624709258969	WITHOUT_CLASSIFICATION	0.1981375290741031	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8018624709258969	WITHOUT_CLASSIFICATION	0.1981375290741031	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.8822209004311808	WITHOUT_CLASSIFICATION	0.11777909956881916	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9998663430014614	WITHOUT_CLASSIFICATION	1.3365699853853626E-4	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.8970603018133312	WITHOUT_CLASSIFICATION	0.10293969818666883	DEFECT
// this call is side-effecty	DEFECT	0.9999319746765125	WITHOUT_CLASSIFICATION	6.802532348738582E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9919060445623197	WITHOUT_CLASSIFICATION	0.008093955437680383	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9279887964224766	WITHOUT_CLASSIFICATION	0.07201120357752339	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9999823514084006	WITHOUT_CLASSIFICATION	1.7648591599363174E-5	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.960465000573074	WITHOUT_CLASSIFICATION	0.03953499942692588	DEFECT
//TODO: is this completely correct?	DEFECT	0.986726488239055	DEFECT	0.013273511760945092	WITHOUT_CLASSIFICATION
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999947757236685	WITHOUT_CLASSIFICATION	5.224276331490657E-6	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9959386162735469	WITHOUT_CLASSIFICATION	0.004061383726453131	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9166240168477607	WITHOUT_CLASSIFICATION	0.0833759831522393	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9909794020810964	WITHOUT_CLASSIFICATION	0.009020597918903734	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9996181175540391	DEFECT	3.818824459609927E-4	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9263432101363824	WITHOUT_CLASSIFICATION	0.07365678986361758	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9981669565118	WITHOUT_CLASSIFICATION	0.0018330434881999366	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.6819412814105353	WITHOUT_CLASSIFICATION	0.31805871858946466	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.5402272535839614	DEFECT	0.45977274641603866	WITHOUT_CLASSIFICATION
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9283815021166815	WITHOUT_CLASSIFICATION	0.07161849788331853	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8018624709258969	WITHOUT_CLASSIFICATION	0.1981375290741031	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9961258744215864	DEFECT	0.003874125578413449	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9994159966802706	WITHOUT_CLASSIFICATION	5.840033197293094E-4	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.8093311961616135	WITHOUT_CLASSIFICATION	0.1906688038383864	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9999578251331438	WITHOUT_CLASSIFICATION	4.217486685620956E-5	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999714267079164	WITHOUT_CLASSIFICATION	2.8573292083693406E-5	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9936949002742657	WITHOUT_CLASSIFICATION	0.006305099725734433	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9997742626585345	WITHOUT_CLASSIFICATION	2.2573734146542898E-4	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.6286184556256335	WITHOUT_CLASSIFICATION	0.3713815443743665	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9900948387359929	WITHOUT_CLASSIFICATION	0.009905161264007105	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9703310297075577	WITHOUT_CLASSIFICATION	0.02966897029244237	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9980892535769924	WITHOUT_CLASSIFICATION	0.001910746423007496	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.6227215928520744	WITHOUT_CLASSIFICATION	0.37727840714792565	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9999388868800965	WITHOUT_CLASSIFICATION	6.111311990358048E-5	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.8642577019429579	WITHOUT_CLASSIFICATION	0.13574229805704213	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9553435279243704	WITHOUT_CLASSIFICATION	0.044656472075629644	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.915709423285966	WITHOUT_CLASSIFICATION	0.084290576714034	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.5089981578842148	WITHOUT_CLASSIFICATION	0.49100184211578535	DEFECT
