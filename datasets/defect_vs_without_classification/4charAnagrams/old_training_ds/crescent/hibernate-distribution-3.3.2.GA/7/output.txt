//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999998006266865	WITHOUT_CLASSIFICATION	1.993733133728274E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999922896510414	WITHOUT_CLASSIFICATION	7.710348958614631E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999922896510414	WITHOUT_CLASSIFICATION	7.710348958614631E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999922896510414	WITHOUT_CLASSIFICATION	7.710348958614631E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999922896510414	WITHOUT_CLASSIFICATION	7.710348958614631E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999922896510414	WITHOUT_CLASSIFICATION	7.710348958614631E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999922896510414	WITHOUT_CLASSIFICATION	7.710348958614631E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999922896510414	WITHOUT_CLASSIFICATION	7.710348958614631E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999969957464896	WITHOUT_CLASSIFICATION	3.0042535102748227E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999969957464896	WITHOUT_CLASSIFICATION	3.0042535102748227E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999053211951728	WITHOUT_CLASSIFICATION	9.467880482715153E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999975080913469	WITHOUT_CLASSIFICATION	2.49190865308593E-6	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999999199344825	WITHOUT_CLASSIFICATION	8.006551746282525E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999551802020825	WITHOUT_CLASSIFICATION	4.481979791759559E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999551802020825	WITHOUT_CLASSIFICATION	4.481979791759559E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999055679797	WITHOUT_CLASSIFICATION	9.44320203134723E-8	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999938628213685	WITHOUT_CLASSIFICATION	6.1371786315198796E-6	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999999746266486	WITHOUT_CLASSIFICATION	2.5373351399575787E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999893712833349	WITHOUT_CLASSIFICATION	1.062871666520216E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999984665927962	WITHOUT_CLASSIFICATION	1.5334072037955038E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999984665927962	WITHOUT_CLASSIFICATION	1.5334072037955038E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999937063956498	WITHOUT_CLASSIFICATION	6.293604350246512E-6	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999995690312186	WITHOUT_CLASSIFICATION	4.3096878138534835E-7	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999822062685729	WITHOUT_CLASSIFICATION	1.7793731427044444E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999997632513562	WITHOUT_CLASSIFICATION	2.3674864388886534E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999885537715613	WITHOUT_CLASSIFICATION	1.1446228438639028E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999914157149744	WITHOUT_CLASSIFICATION	8.584285025657918E-6	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999691568897486	WITHOUT_CLASSIFICATION	3.0843110251306913E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999969005405307	WITHOUT_CLASSIFICATION	3.099459469283599E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999914269958019	WITHOUT_CLASSIFICATION	8.573004198171728E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9933197865985777	WITHOUT_CLASSIFICATION	0.006680213401422281	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999976294404735	WITHOUT_CLASSIFICATION	2.3705595264830647E-6	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999968416315562	WITHOUT_CLASSIFICATION	3.1583684438649076E-6	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999992797429337	WITHOUT_CLASSIFICATION	7.202570662834472E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999968947487324	WITHOUT_CLASSIFICATION	3.1052512675474574E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999968947487324	WITHOUT_CLASSIFICATION	3.1052512675474574E-6	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999906814724124	WITHOUT_CLASSIFICATION	9.318527587607999E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999622737950838	WITHOUT_CLASSIFICATION	3.772620491619041E-5	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999999954637439	WITHOUT_CLASSIFICATION	4.536256107385745E-8	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999991403736326	WITHOUT_CLASSIFICATION	8.596263673606246E-7	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999844151473	WITHOUT_CLASSIFICATION	1.558485272136318E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5275943677067564	WITHOUT_CLASSIFICATION	0.47240563229324367	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5275943677067564	WITHOUT_CLASSIFICATION	0.47240563229324367	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999992509051143	WITHOUT_CLASSIFICATION	7.490948856256095E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999102394899234	WITHOUT_CLASSIFICATION	8.976051007664787E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999991207612262	WITHOUT_CLASSIFICATION	8.792387738264882E-7	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999979547037444	WITHOUT_CLASSIFICATION	2.0452962555477167E-6	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999968368115371	WITHOUT_CLASSIFICATION	3.163188462889726E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991161998436	WITHOUT_CLASSIFICATION	8.838001563209705E-7	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937595732578	WITHOUT_CLASSIFICATION	6.240426742268859E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998968395045	WITHOUT_CLASSIFICATION	1.0316049544041723E-7	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999535304706985	WITHOUT_CLASSIFICATION	4.646952930152535E-5	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9994315428792068	WITHOUT_CLASSIFICATION	5.684571207931562E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999871332939432	WITHOUT_CLASSIFICATION	1.2866706056706585E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999535304706985	WITHOUT_CLASSIFICATION	4.646952930152535E-5	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999871332939432	WITHOUT_CLASSIFICATION	1.2866706056706585E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999994347176757	WITHOUT_CLASSIFICATION	5.652823242006801E-7	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999993045543435	WITHOUT_CLASSIFICATION	6.954456564552197E-7	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999993735250768	WITHOUT_CLASSIFICATION	6.264749230599089E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999989759773141	WITHOUT_CLASSIFICATION	1.0240226858400075E-6	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999653393149	WITHOUT_CLASSIFICATION	3.466068516692963E-8	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999971592148	WITHOUT_CLASSIFICATION	2.840785154730515E-9	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999999552552212	WITHOUT_CLASSIFICATION	4.47447787270647E-8	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9994813617972184	WITHOUT_CLASSIFICATION	5.186382027815854E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999631256128	WITHOUT_CLASSIFICATION	3.687438721988133E-8	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999892962993279	WITHOUT_CLASSIFICATION	1.0703700672220501E-5	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999978269263576	WITHOUT_CLASSIFICATION	2.173073642366882E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999942982916328	WITHOUT_CLASSIFICATION	5.7017083672511905E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998215158172	WITHOUT_CLASSIFICATION	1.784841827885225E-7	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999905529993186	WITHOUT_CLASSIFICATION	9.447000681324832E-6	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.999998408730158	WITHOUT_CLASSIFICATION	1.5912698419755646E-6	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999998683320003	WITHOUT_CLASSIFICATION	1.316679996940637E-6	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999967069788116	WITHOUT_CLASSIFICATION	3.293021188496437E-6	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999998888296179	WITHOUT_CLASSIFICATION	1.1117038211135322E-7	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998225287328	WITHOUT_CLASSIFICATION	1.7747126734052488E-7	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999070767673	WITHOUT_CLASSIFICATION	9.292323267633936E-8	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999995874870352	WITHOUT_CLASSIFICATION	4.1251296482910066E-7	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999966815179039	WITHOUT_CLASSIFICATION	3.3184820962690176E-6	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999837662442	WITHOUT_CLASSIFICATION	1.6233755824440686E-8	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999930294522431	WITHOUT_CLASSIFICATION	6.970547756979891E-6	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999831572351602	WITHOUT_CLASSIFICATION	1.684276483977264E-5	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999987019804866	WITHOUT_CLASSIFICATION	1.2980195133532693E-6	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999981246548	WITHOUT_CLASSIFICATION	1.8753451593234528E-9	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999997199572582	WITHOUT_CLASSIFICATION	2.8004274178261117E-7	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999524638088	WITHOUT_CLASSIFICATION	4.753619115664029E-8	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999705421895	WITHOUT_CLASSIFICATION	2.945781048538324E-8	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999749156508	WITHOUT_CLASSIFICATION	2.5084349229572994E-8	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999998598832185	WITHOUT_CLASSIFICATION	1.4011678139799337E-7	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999967286040489	WITHOUT_CLASSIFICATION	3.271395951104453E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999997903768161	WITHOUT_CLASSIFICATION	2.0962318391949069E-7	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999946350832697	WITHOUT_CLASSIFICATION	5.364916730342139E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999132220736	WITHOUT_CLASSIFICATION	8.677792631167695E-8	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999997903768161	WITHOUT_CLASSIFICATION	2.0962318391949069E-7	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999105360815844	WITHOUT_CLASSIFICATION	8.946391841552792E-5	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999886026583552	WITHOUT_CLASSIFICATION	1.139734164483234E-5	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999881480416076	WITHOUT_CLASSIFICATION	1.1851958392272518E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999986691419945	WITHOUT_CLASSIFICATION	1.3308580054641498E-6	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999977229582725	WITHOUT_CLASSIFICATION	2.2770417275460786E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998890221456	WITHOUT_CLASSIFICATION	1.1097785427246133E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998890221456	WITHOUT_CLASSIFICATION	1.1097785427246133E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999845925748585	WITHOUT_CLASSIFICATION	1.540742514150923E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999904461140164	WITHOUT_CLASSIFICATION	9.553885983633414E-6	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999868167172741	WITHOUT_CLASSIFICATION	1.3183282725991806E-5	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999954747731	WITHOUT_CLASSIFICATION	4.52522681137789E-9	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999997433743226	WITHOUT_CLASSIFICATION	2.566256773372353E-7	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999289816032	WITHOUT_CLASSIFICATION	7.101839679511475E-8	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999984641125438	WITHOUT_CLASSIFICATION	1.53588745621435E-6	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999809373661384	WITHOUT_CLASSIFICATION	1.9062633861605664E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999740072137	WITHOUT_CLASSIFICATION	2.5992786298308137E-8	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999999566414487	WITHOUT_CLASSIFICATION	4.335855130522181E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999991068939	WITHOUT_CLASSIFICATION	8.93106098173063E-9	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999991068939	WITHOUT_CLASSIFICATION	8.93106098173063E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999995646524734	WITHOUT_CLASSIFICATION	4.353475266729773E-7	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999993514478752	WITHOUT_CLASSIFICATION	6.485521248727717E-7	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999999728737056	WITHOUT_CLASSIFICATION	2.7126294466297827E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999991068939	WITHOUT_CLASSIFICATION	8.93106098173063E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999995646524734	WITHOUT_CLASSIFICATION	4.353475266729773E-7	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999995646524734	WITHOUT_CLASSIFICATION	4.353475266729773E-7	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999950368813	WITHOUT_CLASSIFICATION	4.963118714675752E-9	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999980524810878	WITHOUT_CLASSIFICATION	1.9475189123390385E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999996927063943	WITHOUT_CLASSIFICATION	3.0729360568465207E-6	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999993587356	WITHOUT_CLASSIFICATION	6.412644176845294E-10	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999977456775117	WITHOUT_CLASSIFICATION	2.254322488384648E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999977456775117	WITHOUT_CLASSIFICATION	2.254322488384648E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999991068689482	WITHOUT_CLASSIFICATION	8.931310518083415E-7	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999989328790011	WITHOUT_CLASSIFICATION	1.0671209989513328E-6	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999983497441242	WITHOUT_CLASSIFICATION	1.6502558758481146E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995819027754	WITHOUT_CLASSIFICATION	4.1809722465043407E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995819027754	WITHOUT_CLASSIFICATION	4.1809722465043407E-7	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999857837698489	WITHOUT_CLASSIFICATION	1.421623015102672E-5	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999923141906142	WITHOUT_CLASSIFICATION	7.685809385848781E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999850659303107	WITHOUT_CLASSIFICATION	1.4934069689328899E-5	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999916480128	WITHOUT_CLASSIFICATION	8.351987190457623E-9	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999985912286593	WITHOUT_CLASSIFICATION	1.408771340730115E-6	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999449594668	WITHOUT_CLASSIFICATION	5.5040533290493665E-8	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999979932537011	WITHOUT_CLASSIFICATION	2.006746298969776E-6	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999999585136421	WITHOUT_CLASSIFICATION	4.1486357820463724E-8	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999934826477849	WITHOUT_CLASSIFICATION	6.517352215232388E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999850659303107	WITHOUT_CLASSIFICATION	1.4934069689328899E-5	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999744170661616	WITHOUT_CLASSIFICATION	2.5582933838440376E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999971582315419	WITHOUT_CLASSIFICATION	2.841768458079369E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999971582315419	WITHOUT_CLASSIFICATION	2.841768458079369E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999929544554622	WITHOUT_CLASSIFICATION	7.045544537805347E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999878106140948	WITHOUT_CLASSIFICATION	1.218938590517219E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999997580669034	WITHOUT_CLASSIFICATION	2.4193309653788514E-7	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999911135857668	WITHOUT_CLASSIFICATION	8.886414233277602E-6	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999987300937268	WITHOUT_CLASSIFICATION	1.2699062731743119E-6	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.999990351905768	WITHOUT_CLASSIFICATION	9.648094232002396E-6	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9998951148077337	WITHOUT_CLASSIFICATION	1.048851922662768E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999996143372473	WITHOUT_CLASSIFICATION	3.856627526842925E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999146959424	WITHOUT_CLASSIFICATION	8.530405758638063E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999146959424	WITHOUT_CLASSIFICATION	8.530405758638063E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999963924451462	WITHOUT_CLASSIFICATION	3.6075548538475175E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999998006266865	WITHOUT_CLASSIFICATION	1.993733133728274E-7	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999983214693192	WITHOUT_CLASSIFICATION	1.6785306807917835E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999922896510414	WITHOUT_CLASSIFICATION	7.710348958614631E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999933151492034	WITHOUT_CLASSIFICATION	6.684850796629571E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999969957464896	WITHOUT_CLASSIFICATION	3.0042535102748227E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999972421719068	WITHOUT_CLASSIFICATION	2.7578280931136556E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999994520044577	WITHOUT_CLASSIFICATION	5.479955422444482E-7	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999996890675362	WITHOUT_CLASSIFICATION	3.109324638108455E-7	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999983763043051	WITHOUT_CLASSIFICATION	1.623695694909407E-6	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999983490572953	WITHOUT_CLASSIFICATION	1.6509427046454248E-6	DEFECT
// new	WITHOUT_CLASSIFICATION	0.999995813016575	WITHOUT_CLASSIFICATION	4.186983425023886E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.999994067472535	WITHOUT_CLASSIFICATION	5.93252746500505E-6	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999992873213857	WITHOUT_CLASSIFICATION	7.126786142629652E-7	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999975080913469	WITHOUT_CLASSIFICATION	2.49190865308593E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999939577099319	WITHOUT_CLASSIFICATION	6.0422900681165235E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999939577099319	WITHOUT_CLASSIFICATION	6.0422900681165235E-6	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999997784199455	WITHOUT_CLASSIFICATION	2.215800544190978E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9998956891627233	WITHOUT_CLASSIFICATION	1.043108372767416E-4	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999998406607192	WITHOUT_CLASSIFICATION	1.593392806874894E-7	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999973617185728	WITHOUT_CLASSIFICATION	2.6382814271640134E-6	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999986982961635	WITHOUT_CLASSIFICATION	1.3017038365720442E-6	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999146491981	WITHOUT_CLASSIFICATION	8.53508018910644E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999551802020825	WITHOUT_CLASSIFICATION	4.481979791759559E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997898714669	WITHOUT_CLASSIFICATION	2.101285330421021E-7	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999873383652296	WITHOUT_CLASSIFICATION	1.2661634770421476E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999987972294727	WITHOUT_CLASSIFICATION	1.2027705272461872E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.99999914036115	WITHOUT_CLASSIFICATION	8.596388500672834E-7	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999958285868807	WITHOUT_CLASSIFICATION	4.171413119299266E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999917794798974	WITHOUT_CLASSIFICATION	8.220520102523176E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999993970424471	WITHOUT_CLASSIFICATION	6.029575529057704E-7	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999983894280833	WITHOUT_CLASSIFICATION	1.6105719167802053E-6	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999999430129376	WITHOUT_CLASSIFICATION	5.698706239214367E-7	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999456279124126	WITHOUT_CLASSIFICATION	5.437208758749174E-5	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999990122080333	WITHOUT_CLASSIFICATION	9.877919667180313E-7	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999995443631349	WITHOUT_CLASSIFICATION	4.556368650923591E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999922896510414	WITHOUT_CLASSIFICATION	7.710348958614631E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999922896510414	WITHOUT_CLASSIFICATION	7.710348958614631E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999969957464896	WITHOUT_CLASSIFICATION	3.0042535102748227E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999969957464896	WITHOUT_CLASSIFICATION	3.0042535102748227E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.999994067472535	WITHOUT_CLASSIFICATION	5.93252746500505E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999939577099319	WITHOUT_CLASSIFICATION	6.0422900681165235E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999993970424471	WITHOUT_CLASSIFICATION	6.029575529057704E-7	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999055679797	WITHOUT_CLASSIFICATION	9.44320203134723E-8	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999989499873485	WITHOUT_CLASSIFICATION	1.0500126514345035E-6	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999207824695904	WITHOUT_CLASSIFICATION	7.921753040961492E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999901698645741	WITHOUT_CLASSIFICATION	9.83013542586799E-6	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999860911715545	WITHOUT_CLASSIFICATION	1.3908828445484673E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999480439829187	WITHOUT_CLASSIFICATION	5.1956017081300196E-5	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.999997242529159	WITHOUT_CLASSIFICATION	2.7574708410547732E-6	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999426898400533	WITHOUT_CLASSIFICATION	5.731015994664757E-5	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.999981333459602	WITHOUT_CLASSIFICATION	1.866654039791658E-5	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999650714932091	WITHOUT_CLASSIFICATION	3.492850679080918E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999632864701739	WITHOUT_CLASSIFICATION	3.6713529826212314E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999632864701739	WITHOUT_CLASSIFICATION	3.6713529826212314E-5	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999995464456312	WITHOUT_CLASSIFICATION	4.5355436882887536E-7	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999992712794883	WITHOUT_CLASSIFICATION	7.287205117859432E-7	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998351412057626	WITHOUT_CLASSIFICATION	1.6485879423749615E-4	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999746193188865	WITHOUT_CLASSIFICATION	2.5380681113439627E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999990620254161	WITHOUT_CLASSIFICATION	9.379745838634653E-7	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999996920436847	WITHOUT_CLASSIFICATION	3.0795631530059694E-7	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999995754085576	WITHOUT_CLASSIFICATION	4.245914423985287E-7	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999938628213685	WITHOUT_CLASSIFICATION	6.1371786315198796E-6	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999896926698219	WITHOUT_CLASSIFICATION	1.0307330178053199E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999936620388448	WITHOUT_CLASSIFICATION	6.337961155266506E-6	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999936620388448	WITHOUT_CLASSIFICATION	6.337961155266506E-6	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999994387073105	WITHOUT_CLASSIFICATION	5.612926895075689E-7	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999991820078847	WITHOUT_CLASSIFICATION	8.179921153139738E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999997165972039	WITHOUT_CLASSIFICATION	2.8340279610139587E-6	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999615579065545	WITHOUT_CLASSIFICATION	3.844209344547041E-5	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999885556062663	WITHOUT_CLASSIFICATION	1.1444393733791096E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999969957464896	WITHOUT_CLASSIFICATION	3.0042535102748227E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.999994067472535	WITHOUT_CLASSIFICATION	5.93252746500505E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999975080913469	WITHOUT_CLASSIFICATION	2.49190865308593E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999993970424471	WITHOUT_CLASSIFICATION	6.029575529057704E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999993970424471	WITHOUT_CLASSIFICATION	6.029575529057704E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999951956280406	WITHOUT_CLASSIFICATION	4.8043719594349545E-6	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999951956280406	WITHOUT_CLASSIFICATION	4.8043719594349545E-6	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999981866992577	WITHOUT_CLASSIFICATION	1.8133007423184387E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999930648929729	WITHOUT_CLASSIFICATION	6.935107027074604E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999930648929729	WITHOUT_CLASSIFICATION	6.935107027074604E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999989897405791	WITHOUT_CLASSIFICATION	1.0102594208132017E-6	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.999997706750053	WITHOUT_CLASSIFICATION	2.2932499471028937E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999990452320978	WITHOUT_CLASSIFICATION	9.547679022602943E-7	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.99999967037809	WITHOUT_CLASSIFICATION	3.296219100422224E-7	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999797705941643	WITHOUT_CLASSIFICATION	2.0229405835697112E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999893712833349	WITHOUT_CLASSIFICATION	1.062871666520216E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999893712833349	WITHOUT_CLASSIFICATION	1.062871666520216E-5	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999907236993136	WITHOUT_CLASSIFICATION	9.276300686390616E-6	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999903623381544	WITHOUT_CLASSIFICATION	9.637661845594615E-6	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999987255902679	WITHOUT_CLASSIFICATION	1.2744097320095007E-6	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999920387245915	WITHOUT_CLASSIFICATION	7.96127540848541E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999986693010794	WITHOUT_CLASSIFICATION	1.3306989206350536E-6	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999957245736294	WITHOUT_CLASSIFICATION	4.275426370592521E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999984665927962	WITHOUT_CLASSIFICATION	1.5334072037955038E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999904999430685	WITHOUT_CLASSIFICATION	9.500056931500777E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999904999430685	WITHOUT_CLASSIFICATION	9.500056931500777E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999937063956498	WITHOUT_CLASSIFICATION	6.293604350246512E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999937063956498	WITHOUT_CLASSIFICATION	6.293604350246512E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999863688267123	WITHOUT_CLASSIFICATION	1.3631173287629035E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999863688267123	WITHOUT_CLASSIFICATION	1.3631173287629035E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998508967842	WITHOUT_CLASSIFICATION	1.4910321574051707E-7	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998508967842	WITHOUT_CLASSIFICATION	1.4910321574051707E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999893712833349	WITHOUT_CLASSIFICATION	1.062871666520216E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999984665927962	WITHOUT_CLASSIFICATION	1.5334072037955038E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999904999430685	WITHOUT_CLASSIFICATION	9.500056931500777E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999904999430685	WITHOUT_CLASSIFICATION	9.500056931500777E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999937063956498	WITHOUT_CLASSIFICATION	6.293604350246512E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999863688267123	WITHOUT_CLASSIFICATION	1.3631173287629035E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999863688267123	WITHOUT_CLASSIFICATION	1.3631173287629035E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998508967842	WITHOUT_CLASSIFICATION	1.4910321574051707E-7	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999888107448509	WITHOUT_CLASSIFICATION	1.1189255149066416E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999920879062943	WITHOUT_CLASSIFICATION	7.91209370561301E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.999996139568436	WITHOUT_CLASSIFICATION	3.860431563932497E-6	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999999574312973	WITHOUT_CLASSIFICATION	4.256870270263831E-7	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.999999960991908	WITHOUT_CLASSIFICATION	3.900809187907147E-8	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999953910186415	WITHOUT_CLASSIFICATION	4.608981358433746E-6	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999984539846395	WITHOUT_CLASSIFICATION	1.5460153604944656E-5	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9998738739878339	WITHOUT_CLASSIFICATION	1.2612601216607281E-4	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999993459049702	WITHOUT_CLASSIFICATION	6.540950297769431E-7	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999995258262394	WITHOUT_CLASSIFICATION	4.741737605905414E-7	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999998575733979	WITHOUT_CLASSIFICATION	1.4242660210923653E-6	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999990339719752	WITHOUT_CLASSIFICATION	9.660280248287213E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999845925748585	WITHOUT_CLASSIFICATION	1.540742514150923E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999953910186415	WITHOUT_CLASSIFICATION	4.608981358433746E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999345889611811	WITHOUT_CLASSIFICATION	6.541103881887201E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999345889611811	WITHOUT_CLASSIFICATION	6.541103881887201E-5	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999830384366972	WITHOUT_CLASSIFICATION	1.6961563302714904E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999993251977448	WITHOUT_CLASSIFICATION	6.748022551362481E-7	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999993251977448	WITHOUT_CLASSIFICATION	6.748022551362481E-7	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999999932861907	WITHOUT_CLASSIFICATION	6.713809298721873E-8	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999999736271987	WITHOUT_CLASSIFICATION	2.6372801294339087E-7	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999988212562773	WITHOUT_CLASSIFICATION	1.178743722792686E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999995469697073	WITHOUT_CLASSIFICATION	4.5303029276335983E-7	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999995469697073	WITHOUT_CLASSIFICATION	4.5303029276335983E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999885537715613	WITHOUT_CLASSIFICATION	1.1446228438639028E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999911398082598	WITHOUT_CLASSIFICATION	8.860191740146082E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999911398082598	WITHOUT_CLASSIFICATION	8.860191740146082E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999988528732829	WITHOUT_CLASSIFICATION	1.1471267170609741E-6	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999997549709146	WITHOUT_CLASSIFICATION	2.4502908541647205E-7	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999998281316809	WITHOUT_CLASSIFICATION	1.7186831909770425E-6	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999991366343918	WITHOUT_CLASSIFICATION	8.633656081853262E-6	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999885021529725	WITHOUT_CLASSIFICATION	1.1497847027427574E-5	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.999990706278569	WITHOUT_CLASSIFICATION	9.293721430993453E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999914157149744	WITHOUT_CLASSIFICATION	8.584285025657918E-6	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999925110936266	WITHOUT_CLASSIFICATION	7.4889063733820895E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9601235320395057	WITHOUT_CLASSIFICATION	0.03987646796049417	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999805321455708	WITHOUT_CLASSIFICATION	1.9467854429075616E-5	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999897392794056	WITHOUT_CLASSIFICATION	1.0260720594397364E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999914269958019	WITHOUT_CLASSIFICATION	8.573004198171728E-6	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999983493079113	WITHOUT_CLASSIFICATION	1.650692088705706E-6	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999990061254845	WITHOUT_CLASSIFICATION	9.938745154188547E-7	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999991316916091	WITHOUT_CLASSIFICATION	8.68308390798449E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999914269958019	WITHOUT_CLASSIFICATION	8.573004198171728E-6	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999999818491807	WITHOUT_CLASSIFICATION	1.8150819289717877E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.999999080014961	WITHOUT_CLASSIFICATION	9.199850391164574E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999976304689734	WITHOUT_CLASSIFICATION	2.369531026708538E-6	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.999983508368387	WITHOUT_CLASSIFICATION	1.6491631613023556E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999386533319151	WITHOUT_CLASSIFICATION	6.134666808490861E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999660339437746	WITHOUT_CLASSIFICATION	3.396605622554082E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999988203609993	WITHOUT_CLASSIFICATION	1.1796390007045504E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999968416315562	WITHOUT_CLASSIFICATION	3.1583684438649076E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999883339515796	WITHOUT_CLASSIFICATION	1.1666048420344628E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999992797429337	WITHOUT_CLASSIFICATION	7.202570662834472E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999983651299943	WITHOUT_CLASSIFICATION	1.6348700057513334E-6	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999997267566884	WITHOUT_CLASSIFICATION	2.7324331173592724E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999818195278147	WITHOUT_CLASSIFICATION	1.818047218529576E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999914157149744	WITHOUT_CLASSIFICATION	8.584285025657918E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999883339515796	WITHOUT_CLASSIFICATION	1.1666048420344628E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999983651299943	WITHOUT_CLASSIFICATION	1.6348700057513334E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999818195278147	WITHOUT_CLASSIFICATION	1.818047218529576E-5	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998206819533	WITHOUT_CLASSIFICATION	1.793180467466176E-7	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999811372693987	WITHOUT_CLASSIFICATION	1.886273060127831E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998721572226	WITHOUT_CLASSIFICATION	1.2784277737736014E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999968947487324	WITHOUT_CLASSIFICATION	3.1052512675474574E-6	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999965132362725	WITHOUT_CLASSIFICATION	3.486763727589279E-6	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999984389056192	WITHOUT_CLASSIFICATION	1.5610943807704554E-6	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.999995737774234	WITHOUT_CLASSIFICATION	4.262225766075635E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999999589595348	WITHOUT_CLASSIFICATION	4.104046520746029E-8	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999957903398048	WITHOUT_CLASSIFICATION	4.209660195163934E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999475334632	WITHOUT_CLASSIFICATION	5.246653666252887E-8	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999811029762	WITHOUT_CLASSIFICATION	1.8897023865579876E-8	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999987823095753	WITHOUT_CLASSIFICATION	1.2176904247861793E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999948082234	WITHOUT_CLASSIFICATION	5.1917765240655E-9	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999882845119	WITHOUT_CLASSIFICATION	1.1715488194622136E-8	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999844713405549	WITHOUT_CLASSIFICATION	1.552865944513375E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999986737460382	WITHOUT_CLASSIFICATION	1.326253961787703E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999622737950838	WITHOUT_CLASSIFICATION	3.772620491619041E-5	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999993104837371	WITHOUT_CLASSIFICATION	6.895162628994965E-6	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999848085421701	WITHOUT_CLASSIFICATION	1.5191457829797025E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999883339515796	WITHOUT_CLASSIFICATION	1.1666048420344628E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999997728552673	WITHOUT_CLASSIFICATION	2.271447326237259E-7	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999152981918	WITHOUT_CLASSIFICATION	8.470180825141366E-8	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.99999968994161	WITHOUT_CLASSIFICATION	3.100583900446471E-7	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999996539272586	WITHOUT_CLASSIFICATION	3.460727413662719E-7	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999998770829951	WITHOUT_CLASSIFICATION	1.2291700490225068E-7	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999998383221128	WITHOUT_CLASSIFICATION	1.6167788724344938E-7	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999985000576637	WITHOUT_CLASSIFICATION	1.4999423362958477E-6	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999632824531	WITHOUT_CLASSIFICATION	3.671754697478498E-8	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999862081010739	WITHOUT_CLASSIFICATION	1.3791898926079297E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999941786371996	WITHOUT_CLASSIFICATION	5.821362800316973E-6	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999967651458748	WITHOUT_CLASSIFICATION	3.2348541252536894E-6	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999963815474475	WITHOUT_CLASSIFICATION	3.618452552413191E-6	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999982632133515	WITHOUT_CLASSIFICATION	1.7367866484370028E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999991403736326	WITHOUT_CLASSIFICATION	8.596263673606246E-7	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999983016318479	WITHOUT_CLASSIFICATION	1.698368152073471E-6	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999114736114	WITHOUT_CLASSIFICATION	8.852638854796457E-8	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999870843613117	WITHOUT_CLASSIFICATION	1.2915638688279335E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999995402958698	WITHOUT_CLASSIFICATION	4.597041302001336E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999974915907549	WITHOUT_CLASSIFICATION	2.5084092450978564E-6	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9998573119325157	WITHOUT_CLASSIFICATION	1.4268806748431593E-4	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999950732039	WITHOUT_CLASSIFICATION	4.926796074571404E-9	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999982414909526	WITHOUT_CLASSIFICATION	1.7585090473614074E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999568102547	WITHOUT_CLASSIFICATION	4.3189745378747354E-8	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999880139975847	WITHOUT_CLASSIFICATION	1.1986002415149627E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999829930548854	WITHOUT_CLASSIFICATION	1.700694511472191E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999829930548854	WITHOUT_CLASSIFICATION	1.700694511472191E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999170687049108	WITHOUT_CLASSIFICATION	8.293129508921336E-5	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999989396730233	WITHOUT_CLASSIFICATION	1.060326976559625E-6	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999982933675687	WITHOUT_CLASSIFICATION	1.7066324311847717E-6	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999904068656454	WITHOUT_CLASSIFICATION	9.593134354598042E-6	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999951617122422	WITHOUT_CLASSIFICATION	4.838287757685159E-6	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999480990036578	WITHOUT_CLASSIFICATION	5.1900996342343875E-5	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999675658057472	WITHOUT_CLASSIFICATION	3.24341942527049E-5	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999986448949728	WITHOUT_CLASSIFICATION	1.3551050272176316E-6	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998687387752311	WITHOUT_CLASSIFICATION	1.3126122476901617E-4	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999903085715753	WITHOUT_CLASSIFICATION	9.691428424697922E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999982244077583	WITHOUT_CLASSIFICATION	1.7755922416589365E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999746903408632	WITHOUT_CLASSIFICATION	2.530965913679378E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9996781333606228	WITHOUT_CLASSIFICATION	3.218666393771709E-4	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999913867323018	WITHOUT_CLASSIFICATION	8.613267698275717E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970799237081	WITHOUT_CLASSIFICATION	2.920076291799216E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994134536038	WITHOUT_CLASSIFICATION	5.865463962340733E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9998744282162715	WITHOUT_CLASSIFICATION	1.2557178372849166E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999933675345004	WITHOUT_CLASSIFICATION	6.632465499575231E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999932258101996	WITHOUT_CLASSIFICATION	6.774189800361964E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999031271298642	WITHOUT_CLASSIFICATION	9.687287013581612E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999961030756895	WITHOUT_CLASSIFICATION	3.8969243103855645E-6	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999961030756895	WITHOUT_CLASSIFICATION	3.8969243103855645E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999849288935818	WITHOUT_CLASSIFICATION	1.5071106418059493E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999849288935818	WITHOUT_CLASSIFICATION	1.5071106418059493E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999568102547	WITHOUT_CLASSIFICATION	4.3189745378747354E-8	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9998415091194046	WITHOUT_CLASSIFICATION	1.5849088059538617E-4	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999996272929793	WITHOUT_CLASSIFICATION	3.727070206955297E-7	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999905146442643	WITHOUT_CLASSIFICATION	9.485355735700776E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999963924451462	WITHOUT_CLASSIFICATION	3.6075548538475175E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999996272929793	WITHOUT_CLASSIFICATION	3.727070206955297E-7	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999905146442643	WITHOUT_CLASSIFICATION	9.485355735700776E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999985313804391	WITHOUT_CLASSIFICATION	1.4686195608080303E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999977592336887	WITHOUT_CLASSIFICATION	2.2407663112994E-6	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999980240736439	WITHOUT_CLASSIFICATION	1.9759263561003653E-6	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999990043769398	WITHOUT_CLASSIFICATION	9.956230601903125E-7	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9997541656406541	WITHOUT_CLASSIFICATION	2.4583435934587386E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999953936305929	WITHOUT_CLASSIFICATION	4.606369407054693E-6	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999838755153015	WITHOUT_CLASSIFICATION	1.612448469848385E-5	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999747576240131	WITHOUT_CLASSIFICATION	2.524237598685301E-5	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999250663474848	WITHOUT_CLASSIFICATION	7.493365251520085E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999086428176	WITHOUT_CLASSIFICATION	9.135718238014227E-8	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999845996163044	WITHOUT_CLASSIFICATION	1.540038369571348E-5	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999940897699099	WITHOUT_CLASSIFICATION	5.910230090097565E-6	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999982218760122	WITHOUT_CLASSIFICATION	1.7781239878318527E-6	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9994643347457802	WITHOUT_CLASSIFICATION	5.356652542198687E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999963924451462	WITHOUT_CLASSIFICATION	3.6075548538475175E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999624040074502	WITHOUT_CLASSIFICATION	3.7595992549803686E-4	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999718593392304	WITHOUT_CLASSIFICATION	2.8140660769584832E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999718593392304	WITHOUT_CLASSIFICATION	2.8140660769584832E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999952056780002	WITHOUT_CLASSIFICATION	4.7943219998823736E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999985313804391	WITHOUT_CLASSIFICATION	1.4686195608080303E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999551986258921	WITHOUT_CLASSIFICATION	4.48013741079466E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.986737383282724	WITHOUT_CLASSIFICATION	0.013262616717275922	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999995163897023	WITHOUT_CLASSIFICATION	4.836102977747394E-7	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999926680733758	WITHOUT_CLASSIFICATION	7.331926624176564E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999885134027069	WITHOUT_CLASSIFICATION	1.1486597293105288E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999985313804391	WITHOUT_CLASSIFICATION	1.4686195608080303E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999926680733758	WITHOUT_CLASSIFICATION	7.331926624176564E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999885134027069	WITHOUT_CLASSIFICATION	1.1486597293105288E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.999982687600648	WITHOUT_CLASSIFICATION	1.7312399351986968E-5	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999998782210901	WITHOUT_CLASSIFICATION	1.2177890990043128E-6	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999978866987256	WITHOUT_CLASSIFICATION	2.113301274398272E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999985313804391	WITHOUT_CLASSIFICATION	1.4686195608080303E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999985313804391	WITHOUT_CLASSIFICATION	1.4686195608080303E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.999997733515077	WITHOUT_CLASSIFICATION	2.2664849230590194E-6	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999994986503716	WITHOUT_CLASSIFICATION	5.013496283063811E-7	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999976482698262	WITHOUT_CLASSIFICATION	2.351730173949695E-6	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999988950672317	WITHOUT_CLASSIFICATION	1.104932768332901E-6	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.999996287340005	WITHOUT_CLASSIFICATION	3.7126599950243144E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999997564851766	WITHOUT_CLASSIFICATION	2.4351482347783094E-7	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999986566719956	WITHOUT_CLASSIFICATION	1.3433280043238375E-6	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999999947977121	WITHOUT_CLASSIFICATION	5.202287887960098E-8	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999998160211571	WITHOUT_CLASSIFICATION	1.839788429310353E-7	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999911566065254	WITHOUT_CLASSIFICATION	8.843393474747925E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999986728530345	WITHOUT_CLASSIFICATION	1.3271469655770016E-6	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999995697217102	WITHOUT_CLASSIFICATION	4.302782897325103E-7	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999961649658066	WITHOUT_CLASSIFICATION	3.835034193458963E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999998892260453	WITHOUT_CLASSIFICATION	1.1077395470959943E-7	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604464083265	WITHOUT_CLASSIFICATION	3.955359167341217E-5	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999996021738128	WITHOUT_CLASSIFICATION	3.9782618719209807E-7	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999979547037444	WITHOUT_CLASSIFICATION	2.0452962555477167E-6	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9997746020989667	WITHOUT_CLASSIFICATION	2.2539790103317893E-4	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9985231709092962	WITHOUT_CLASSIFICATION	0.0014768290907037466	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999999698166787	WITHOUT_CLASSIFICATION	3.018332130181998E-7	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999905894554456	WITHOUT_CLASSIFICATION	9.410544554394675E-6	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999986527795504	WITHOUT_CLASSIFICATION	1.3472204495789912E-6	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999986527795504	WITHOUT_CLASSIFICATION	1.3472204495789912E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999979547037444	WITHOUT_CLASSIFICATION	2.0452962555477167E-6	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999990386774081	WITHOUT_CLASSIFICATION	9.613225918895061E-6	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999975477103656	WITHOUT_CLASSIFICATION	2.452289634393333E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.999999632434833	WITHOUT_CLASSIFICATION	3.675651670402021E-7	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999982532151735	WITHOUT_CLASSIFICATION	1.7467848264405162E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999934209125032	WITHOUT_CLASSIFICATION	6.579087496779384E-6	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999995844362846	WITHOUT_CLASSIFICATION	4.155637154820852E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999989033804989	WITHOUT_CLASSIFICATION	1.0966195011027715E-6	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999982608590161	WITHOUT_CLASSIFICATION	1.7391409838509358E-6	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999982622181	WITHOUT_CLASSIFICATION	1.7377818411879731E-9	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998886185906	WITHOUT_CLASSIFICATION	1.113814094917386E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999900386379426	WITHOUT_CLASSIFICATION	9.961362057410714E-6	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9960354352889598	WITHOUT_CLASSIFICATION	0.0039645647110402304	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9994534128410126	WITHOUT_CLASSIFICATION	5.465871589874202E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999896723241	WITHOUT_CLASSIFICATION	1.0327675883296124E-8	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998528222601	WITHOUT_CLASSIFICATION	1.471777399721336E-7	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999840204181747	WITHOUT_CLASSIFICATION	1.597958182539152E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999998375898076	WITHOUT_CLASSIFICATION	1.6241019249805812E-7	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999656367568869	WITHOUT_CLASSIFICATION	3.436324311303906E-5	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937900965932	WITHOUT_CLASSIFICATION	6.20990340686926E-6	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999994102552253	WITHOUT_CLASSIFICATION	5.897447746044629E-7	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999995076401174	WITHOUT_CLASSIFICATION	4.923598827269286E-7	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999993416114779	WITHOUT_CLASSIFICATION	6.583885222259334E-7	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985197466665	WITHOUT_CLASSIFICATION	1.4802533334285784E-6	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987465758731	WITHOUT_CLASSIFICATION	1.2534241269218977E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997695666337	WITHOUT_CLASSIFICATION	2.3043336629315237E-7	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988215374875	WITHOUT_CLASSIFICATION	1.1784625125633163E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997867175122	WITHOUT_CLASSIFICATION	2.1328248773604115E-7	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999703686183	WITHOUT_CLASSIFICATION	2.963138169807021E-7	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997326024688	WITHOUT_CLASSIFICATION	2.6739753125446343E-7	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998925331086	WITHOUT_CLASSIFICATION	1.0746689140522949E-7	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999999312352998	WITHOUT_CLASSIFICATION	6.876470014387228E-8	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999869127273	WITHOUT_CLASSIFICATION	1.308727269467587E-8	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999843532144	WITHOUT_CLASSIFICATION	1.564678559428545E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998157430379	WITHOUT_CLASSIFICATION	1.8425696209385676E-7	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998049295588	WITHOUT_CLASSIFICATION	1.9507044124163925E-7	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999884535647	WITHOUT_CLASSIFICATION	1.1546435293174432E-7	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996008155616	WITHOUT_CLASSIFICATION	3.9918443831582366E-7	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998332500515	WITHOUT_CLASSIFICATION	1.6674994853542173E-7	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999506472764	WITHOUT_CLASSIFICATION	4.935272367305539E-8	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996543051138	WITHOUT_CLASSIFICATION	3.4569488613100477E-7	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999995424924844	WITHOUT_CLASSIFICATION	4.575075156266063E-7	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983637763419	WITHOUT_CLASSIFICATION	1.6362236581242972E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9850845895112628	WITHOUT_CLASSIFICATION	0.014915410488737308	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999951473699583	WITHOUT_CLASSIFICATION	4.8526300417207996E-6	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999999673433	WITHOUT_CLASSIFICATION	3.265661132108311E-11	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999921487921364	WITHOUT_CLASSIFICATION	7.851207863579705E-6	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999971024632192	WITHOUT_CLASSIFICATION	2.8975367809019353E-6	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999991590726662	WITHOUT_CLASSIFICATION	8.409273337432529E-7	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999770943226727	WITHOUT_CLASSIFICATION	2.2905677327346833E-5	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999962810563738	WITHOUT_CLASSIFICATION	3.7189436261423966E-6	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999904787024585	WITHOUT_CLASSIFICATION	9.521297541589246E-6	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999787387064013	WITHOUT_CLASSIFICATION	2.1261293598655403E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999990049854414	WITHOUT_CLASSIFICATION	9.950145585982653E-6	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999942315243587	WITHOUT_CLASSIFICATION	5.768475641231252E-6	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999998383412267	WITHOUT_CLASSIFICATION	1.6165877323074647E-7	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9998580012416035	WITHOUT_CLASSIFICATION	1.4199875839654967E-4	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999985353443585	WITHOUT_CLASSIFICATION	1.4646556415015272E-6	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999891790665485	WITHOUT_CLASSIFICATION	1.0820933451455637E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999991254639276	WITHOUT_CLASSIFICATION	8.745360723922951E-6	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958479688228	WITHOUT_CLASSIFICATION	4.1520311772605746E-6	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999792498477935	WITHOUT_CLASSIFICATION	2.0750152206391272E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999788511165997	WITHOUT_CLASSIFICATION	2.114888340034548E-5	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910719117155	WITHOUT_CLASSIFICATION	8.92808828438825E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999847797930799	WITHOUT_CLASSIFICATION	1.5220206920081872E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999936635669435	WITHOUT_CLASSIFICATION	6.3364330565658405E-6	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999918487063305	WITHOUT_CLASSIFICATION	8.151293669465636E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999957234208795	WITHOUT_CLASSIFICATION	4.276579120473068E-6	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980379617537	WITHOUT_CLASSIFICATION	1.962038246341499E-6	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999357017588	WITHOUT_CLASSIFICATION	6.429824123568633E-8	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999989578844158	WITHOUT_CLASSIFICATION	1.042115584190803E-6	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999940268318871	WITHOUT_CLASSIFICATION	5.973168112885502E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999687236011	WITHOUT_CLASSIFICATION	3.1276398929147064E-8	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999930496069798	WITHOUT_CLASSIFICATION	6.9503930201966295E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999997492392735	WITHOUT_CLASSIFICATION	2.5076072659752467E-7	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999973824493331	WITHOUT_CLASSIFICATION	2.6175506669028983E-6	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999851949392138	WITHOUT_CLASSIFICATION	1.4805060786165445E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999921487921364	WITHOUT_CLASSIFICATION	7.851207863579705E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999916139126458	WITHOUT_CLASSIFICATION	8.386087354220827E-6	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999362407967	WITHOUT_CLASSIFICATION	6.375920319281923E-8	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999991779279656	WITHOUT_CLASSIFICATION	8.220720344385824E-7	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999746631824998	WITHOUT_CLASSIFICATION	2.5336817500137994E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999436622039628	WITHOUT_CLASSIFICATION	5.633779603712818E-5	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999990071028463	WITHOUT_CLASSIFICATION	9.928971537177567E-7	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999406010664645	WITHOUT_CLASSIFICATION	5.9398933535374555E-5	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999809241969575	WITHOUT_CLASSIFICATION	1.9075803042559742E-5	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999984530787517	WITHOUT_CLASSIFICATION	1.5469212482345586E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999296769841759	WITHOUT_CLASSIFICATION	7.032301582417662E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999461934687516	WITHOUT_CLASSIFICATION	5.3806531248340294E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999709835371338	WITHOUT_CLASSIFICATION	2.9016462866304765E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999993707710749	WITHOUT_CLASSIFICATION	6.292289251259382E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999997627633226	WITHOUT_CLASSIFICATION	2.3723667744405616E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997409654744439	WITHOUT_CLASSIFICATION	2.590345255560754E-4	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999785327292957	WITHOUT_CLASSIFICATION	2.1467270704323472E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999969525078772	WITHOUT_CLASSIFICATION	3.0474921228223805E-6	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999744300749215	WITHOUT_CLASSIFICATION	2.5569925078475315E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999182477769	WITHOUT_CLASSIFICATION	8.175222315748341E-8	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999982523960117	WITHOUT_CLASSIFICATION	1.7476039882337483E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999861330336	WITHOUT_CLASSIFICATION	1.386696640307669E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999992628184317	WITHOUT_CLASSIFICATION	7.371815683528414E-7	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998697815250067	WITHOUT_CLASSIFICATION	1.302184749932882E-4	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999980096365199	WITHOUT_CLASSIFICATION	1.9903634801610126E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999992219081337	WITHOUT_CLASSIFICATION	7.780918662614439E-7	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999995525035774	WITHOUT_CLASSIFICATION	4.474964225102426E-7	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9933197865985777	WITHOUT_CLASSIFICATION	0.006680213401422281	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999973714238638	WITHOUT_CLASSIFICATION	2.6285761362464887E-6	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999990005009548	WITHOUT_CLASSIFICATION	9.994990452045055E-7	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999973376435813	WITHOUT_CLASSIFICATION	2.6623564187481887E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999921487921364	WITHOUT_CLASSIFICATION	7.851207863579705E-6	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999901081916117	WITHOUT_CLASSIFICATION	9.891808388272182E-6	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999998565805557	WITHOUT_CLASSIFICATION	1.4341944427587706E-7	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998937265429912	WITHOUT_CLASSIFICATION	1.0627345700881247E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999921487921364	WITHOUT_CLASSIFICATION	7.851207863579705E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999850984235115	WITHOUT_CLASSIFICATION	1.4901576488490208E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999861330336	WITHOUT_CLASSIFICATION	1.386696640307669E-7	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999914179176044	WITHOUT_CLASSIFICATION	8.582082395610173E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999612971333072	WITHOUT_CLASSIFICATION	3.870286669281514E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999979291291	WITHOUT_CLASSIFICATION	2.0708708993658906E-8	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999296769841759	WITHOUT_CLASSIFICATION	7.032301582417662E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999461934687516	WITHOUT_CLASSIFICATION	5.3806531248340294E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999709835371338	WITHOUT_CLASSIFICATION	2.9016462866304765E-5	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999518066246	WITHOUT_CLASSIFICATION	4.819337541744914E-8	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999936723710127	WITHOUT_CLASSIFICATION	6.327628987438424E-6	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999999085422723	WITHOUT_CLASSIFICATION	9.145772775211222E-8	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999993616833832	WITHOUT_CLASSIFICATION	6.383166166737274E-7	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999987755485421	WITHOUT_CLASSIFICATION	1.2244514578960726E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999921487921364	WITHOUT_CLASSIFICATION	7.851207863579705E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999993707710749	WITHOUT_CLASSIFICATION	6.292289251259382E-7	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999997627633226	WITHOUT_CLASSIFICATION	2.3723667744405616E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999399765217	WITHOUT_CLASSIFICATION	6.002347835189716E-8	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999100748552	WITHOUT_CLASSIFICATION	8.992514473696362E-8	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999993814948003	WITHOUT_CLASSIFICATION	6.185051997599106E-7	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999999771390615	WITHOUT_CLASSIFICATION	2.286093849265749E-7	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999980245199525	WITHOUT_CLASSIFICATION	1.975480047523122E-6	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.999990114348415	WITHOUT_CLASSIFICATION	9.885651585010795E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996543051138	WITHOUT_CLASSIFICATION	3.4569488613100477E-7	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999843927719801	WITHOUT_CLASSIFICATION	1.56072280198504E-5	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999986554017959	WITHOUT_CLASSIFICATION	1.3445982041316269E-6	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.999999729419367	WITHOUT_CLASSIFICATION	2.705806329471645E-7	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999927243627	WITHOUT_CLASSIFICATION	7.275637225118748E-9	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999997794188464	WITHOUT_CLASSIFICATION	2.2058115354917954E-7	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997867175122	WITHOUT_CLASSIFICATION	2.1328248773604115E-7	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999703686183	WITHOUT_CLASSIFICATION	2.963138169807021E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998157430379	WITHOUT_CLASSIFICATION	1.8425696209385676E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999997794188464	WITHOUT_CLASSIFICATION	2.2058115354917954E-7	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999954391714	WITHOUT_CLASSIFICATION	4.560828587501395E-9	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999996549597068	WITHOUT_CLASSIFICATION	3.45040293231584E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995226038798	WITHOUT_CLASSIFICATION	4.773961201199131E-7	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998211338385	WITHOUT_CLASSIFICATION	1.788661614975046E-6	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999985896629335	WITHOUT_CLASSIFICATION	1.4103370664660812E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998963889522369	WITHOUT_CLASSIFICATION	1.0361104776310193E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998049295588	WITHOUT_CLASSIFICATION	1.9507044124163925E-7	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998332500515	WITHOUT_CLASSIFICATION	1.6674994853542173E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999687236011	WITHOUT_CLASSIFICATION	3.1276398929147064E-8	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999933809219883	WITHOUT_CLASSIFICATION	6.619078011785123E-6	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999996167795842	WITHOUT_CLASSIFICATION	3.8322041585664675E-7	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999436164486	WITHOUT_CLASSIFICATION	5.63835513217454E-8	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999905665311019	WITHOUT_CLASSIFICATION	9.43346889808654E-6	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999998621977352	WITHOUT_CLASSIFICATION	1.3780226495020194E-7	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999355281345	WITHOUT_CLASSIFICATION	6.447186554328854E-8	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999262453994407	WITHOUT_CLASSIFICATION	7.375460055927874E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999653597121099	WITHOUT_CLASSIFICATION	3.464028789011593E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999982622181	WITHOUT_CLASSIFICATION	1.7377818411879731E-9	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999728666992365	WITHOUT_CLASSIFICATION	2.7133300763527947E-5	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999999776245685	WITHOUT_CLASSIFICATION	2.2375431501379124E-7	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999999728107815	WITHOUT_CLASSIFICATION	2.7189218495407585E-7	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999998943714785	WITHOUT_CLASSIFICATION	1.0562852143261939E-7	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999828909014	WITHOUT_CLASSIFICATION	1.7109098573620773E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.99999535374202	WITHOUT_CLASSIFICATION	4.646257980010161E-6	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879958741483	WITHOUT_CLASSIFICATION	1.2004125851802274E-5	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236971948455	WITHOUT_CLASSIFICATION	7.630280515439506E-5	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999962127369663	WITHOUT_CLASSIFICATION	3.7872630337244455E-6	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999984914351583	WITHOUT_CLASSIFICATION	1.5085648417291254E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9991491392586334	WITHOUT_CLASSIFICATION	8.508607413667147E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999524120917475	WITHOUT_CLASSIFICATION	4.7587908252570704E-5	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999940041151516	WITHOUT_CLASSIFICATION	5.995884848409417E-6	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999736735831775	WITHOUT_CLASSIFICATION	2.6326416822561782E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999941645863077	WITHOUT_CLASSIFICATION	5.835413692213975E-6	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999999578084039	WITHOUT_CLASSIFICATION	4.2191596084502973E-7	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999999988411975	WITHOUT_CLASSIFICATION	1.1588024974071556E-8	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999584827956716	WITHOUT_CLASSIFICATION	4.1517204328440285E-5	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999488097879863	WITHOUT_CLASSIFICATION	5.119021201378267E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990965985847	WITHOUT_CLASSIFICATION	9.034014153930018E-7	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960928055361	WITHOUT_CLASSIFICATION	3.907194463881779E-6	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999998161704099	WITHOUT_CLASSIFICATION	1.8382959009258332E-7	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999966001155	WITHOUT_CLASSIFICATION	3.399884525051441E-9	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999995595201093	WITHOUT_CLASSIFICATION	4.4047989065618484E-7	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999991802784498	WITHOUT_CLASSIFICATION	8.197215502305825E-7	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999963912657731	WITHOUT_CLASSIFICATION	3.608734226769593E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999967756297026	WITHOUT_CLASSIFICATION	3.2243702975579534E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999391487682	WITHOUT_CLASSIFICATION	6.085123176906201E-8	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999999894227031	WITHOUT_CLASSIFICATION	1.0577296899647499E-7	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999998825097831	WITHOUT_CLASSIFICATION	1.1749021682397296E-7	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999901119238	WITHOUT_CLASSIFICATION	9.888076221693386E-9	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999510137024153	WITHOUT_CLASSIFICATION	4.8986297584680817E-5	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999980232757222	WITHOUT_CLASSIFICATION	1.9767242778717523E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999990083899076	WITHOUT_CLASSIFICATION	9.916100923579787E-7	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999996825660693	WITHOUT_CLASSIFICATION	3.1743393073037853E-7	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999958378240373	WITHOUT_CLASSIFICATION	4.162175962599253E-6	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999985373579	WITHOUT_CLASSIFICATION	1.4626421210488737E-9	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999614424939	WITHOUT_CLASSIFICATION	3.8557506145381746E-8	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999981684319009	WITHOUT_CLASSIFICATION	1.8315680990364387E-6	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999999991686923	WITHOUT_CLASSIFICATION	8.313077048227261E-9	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999704798559	WITHOUT_CLASSIFICATION	2.9520144091105916E-8	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999941437436658	WITHOUT_CLASSIFICATION	5.856256334207238E-6	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999342191229547	WITHOUT_CLASSIFICATION	6.578087704533486E-5	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999997272188309	WITHOUT_CLASSIFICATION	2.727811691250447E-7	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999821867067292	WITHOUT_CLASSIFICATION	1.7813293270691135E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999996611065436	WITHOUT_CLASSIFICATION	3.3889345638019283E-7	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999998332766895	WITHOUT_CLASSIFICATION	1.6672331059427412E-7	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999997768168474	WITHOUT_CLASSIFICATION	2.2318315270564567E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999933101927712	WITHOUT_CLASSIFICATION	6.689807228843024E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999998082023333	WITHOUT_CLASSIFICATION	1.917976668368133E-7	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999976579790683	WITHOUT_CLASSIFICATION	2.3420209316380348E-6	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999969448952342	WITHOUT_CLASSIFICATION	3.055104765827515E-6	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999999942855097	WITHOUT_CLASSIFICATION	5.714490289805898E-8	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999995114654489	WITHOUT_CLASSIFICATION	4.885345510523762E-7	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999995985193194	WITHOUT_CLASSIFICATION	4.014806806674303E-7	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999669129976281	WITHOUT_CLASSIFICATION	3.308700237193373E-5	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999989728571034	WITHOUT_CLASSIFICATION	1.0271428966137915E-6	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999941104400228	WITHOUT_CLASSIFICATION	5.889559977204692E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999986742155552	WITHOUT_CLASSIFICATION	1.3257844447905716E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999975630833502	WITHOUT_CLASSIFICATION	2.4369166498690156E-6	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999932267400128	WITHOUT_CLASSIFICATION	6.773259987192184E-6	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999919100994058	WITHOUT_CLASSIFICATION	8.0899005941836E-6	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999173358917246	WITHOUT_CLASSIFICATION	8.266410827530132E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999384217706046	WITHOUT_CLASSIFICATION	6.157822939539914E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999794650039847	WITHOUT_CLASSIFICATION	2.0534996015341256E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9589199573826435	WITHOUT_CLASSIFICATION	0.04108004261735656	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999462369448	WITHOUT_CLASSIFICATION	5.376305528765886E-8	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999057555416335	WITHOUT_CLASSIFICATION	9.424445836643392E-5	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999758347672246	WITHOUT_CLASSIFICATION	2.416523277539651E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999848366309521	WITHOUT_CLASSIFICATION	1.5163369048022216E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999807338765017	WITHOUT_CLASSIFICATION	1.9266123498381618E-5	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999993138004994	WITHOUT_CLASSIFICATION	6.861995005403293E-7	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999973189309052	WITHOUT_CLASSIFICATION	2.681069094763677E-6	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999846794356286	WITHOUT_CLASSIFICATION	1.5320564371387954E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999947500684666	WITHOUT_CLASSIFICATION	5.249931533306212E-6	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999890236064176	WITHOUT_CLASSIFICATION	1.0976393582310248E-5	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999961524252967	WITHOUT_CLASSIFICATION	3.847574703214887E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999922064264	WITHOUT_CLASSIFICATION	7.793573652968499E-9	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999942054657	WITHOUT_CLASSIFICATION	5.794534266179531E-9	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999971317884514	WITHOUT_CLASSIFICATION	2.8682115486294707E-6	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998613164305022	WITHOUT_CLASSIFICATION	1.386835694977182E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999999761259176	WITHOUT_CLASSIFICATION	2.3874082394851395E-7	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999964350454651	WITHOUT_CLASSIFICATION	3.5649545349281357E-6	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999987500291615	WITHOUT_CLASSIFICATION	1.2499708385613793E-6	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999992443626506	WITHOUT_CLASSIFICATION	7.556373494136534E-6	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9985558889661835	WITHOUT_CLASSIFICATION	0.0014441110338164578	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999997707990119	WITHOUT_CLASSIFICATION	2.2920098799098233E-7	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.999984611236207	WITHOUT_CLASSIFICATION	1.5388763792978587E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999977610564622	WITHOUT_CLASSIFICATION	2.23894353787719E-6	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999899372878	WITHOUT_CLASSIFICATION	1.0062712178953603E-8	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9998013515659568	WITHOUT_CLASSIFICATION	1.9864843404323522E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999412977529061	WITHOUT_CLASSIFICATION	5.870224709397661E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999993655549212	WITHOUT_CLASSIFICATION	6.344450787350251E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9998013515659568	WITHOUT_CLASSIFICATION	1.9864843404323522E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998054086642	WITHOUT_CLASSIFICATION	1.9459133569310657E-7	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999919365530076	WITHOUT_CLASSIFICATION	8.063446992430446E-6	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999999775278193	WITHOUT_CLASSIFICATION	2.2472180653378497E-8	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999988153446703	WITHOUT_CLASSIFICATION	1.1846553297668385E-6	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999959221713187	WITHOUT_CLASSIFICATION	4.077828681254721E-6	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999347362947	WITHOUT_CLASSIFICATION	6.526370531138801E-8	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999438212697094	WITHOUT_CLASSIFICATION	5.617873029055041E-5	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999890750206	WITHOUT_CLASSIFICATION	1.092497947274903E-8	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999951899003754	WITHOUT_CLASSIFICATION	4.810099624614792E-6	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999948932723216	WITHOUT_CLASSIFICATION	5.1067276784790534E-6	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999979455135807	WITHOUT_CLASSIFICATION	2.0544864192720775E-6	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999999795889111	WITHOUT_CLASSIFICATION	2.0411088984596804E-8	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999998462853686	WITHOUT_CLASSIFICATION	1.5371463141316868E-7	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999964715277	WITHOUT_CLASSIFICATION	3.5284723552003206E-9	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999588502941824	WITHOUT_CLASSIFICATION	4.114970581768E-5	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999989647001681	WITHOUT_CLASSIFICATION	1.0352998318908235E-6	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999540120250847	WITHOUT_CLASSIFICATION	4.598797491525299E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999540120250847	WITHOUT_CLASSIFICATION	4.598797491525299E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999989747332646	WITHOUT_CLASSIFICATION	1.0252667354016259E-5	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9999626021244433	WITHOUT_CLASSIFICATION	3.739787555656522E-5	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999417848744457	WITHOUT_CLASSIFICATION	5.821512555427011E-5	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999850287496538	WITHOUT_CLASSIFICATION	1.4971250346095038E-5	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999991908485323	WITHOUT_CLASSIFICATION	8.091514677584949E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9993483001263824	WITHOUT_CLASSIFICATION	6.516998736176476E-4	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998678897709541	WITHOUT_CLASSIFICATION	1.3211022904587898E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999839545827	WITHOUT_CLASSIFICATION	1.604541738002603E-8	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999993268781763	WITHOUT_CLASSIFICATION	6.731218236788021E-7	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999222521053684	WITHOUT_CLASSIFICATION	7.774789463147074E-5	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999986600917152	WITHOUT_CLASSIFICATION	1.3399082847613184E-6	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999953985358	WITHOUT_CLASSIFICATION	4.6014641648062005E-9	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999981903373937	WITHOUT_CLASSIFICATION	1.8096626062555792E-6	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999825175017352	WITHOUT_CLASSIFICATION	1.748249826485494E-5	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999999680897881	WITHOUT_CLASSIFICATION	3.19102118985523E-7	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.99999535374202	WITHOUT_CLASSIFICATION	4.646257980010161E-6	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999981156675283	WITHOUT_CLASSIFICATION	1.8843324717134532E-6	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999992706357738	WITHOUT_CLASSIFICATION	7.293642262560332E-7	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9985313208902734	WITHOUT_CLASSIFICATION	0.00146867910972661	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.999997634530003	WITHOUT_CLASSIFICATION	2.3654699969157024E-6	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999100713901093	WITHOUT_CLASSIFICATION	8.992860989070579E-5	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999905922818498	WITHOUT_CLASSIFICATION	9.407718150211287E-6	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999975187625	WITHOUT_CLASSIFICATION	2.4812375975883058E-9	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999092318538	WITHOUT_CLASSIFICATION	9.076814612793769E-8	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999004130342	WITHOUT_CLASSIFICATION	9.958696577493576E-8	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998684477021	WITHOUT_CLASSIFICATION	1.3155229793157428E-7	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999989644031	WITHOUT_CLASSIFICATION	1.0355968781898223E-9	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999959129869503	WITHOUT_CLASSIFICATION	4.087013049574094E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999957248609995	WITHOUT_CLASSIFICATION	4.27513900039942E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999954172717468	WITHOUT_CLASSIFICATION	4.582728253115603E-6	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999975620135425	WITHOUT_CLASSIFICATION	2.43798645756531E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999942033891839	WITHOUT_CLASSIFICATION	5.796610816113856E-6	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9999821225472143	WITHOUT_CLASSIFICATION	1.787745278566253E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999974738252557	WITHOUT_CLASSIFICATION	2.5261747442704444E-6	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999989966907394	WITHOUT_CLASSIFICATION	1.0033092605403409E-6	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999995904979654	WITHOUT_CLASSIFICATION	4.0950203470001463E-7	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999994403829073	WITHOUT_CLASSIFICATION	5.59617092607046E-7	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999992917251128	WITHOUT_CLASSIFICATION	7.08274887133603E-7	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999964308931729	WITHOUT_CLASSIFICATION	3.569106827195222E-6	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999858450294873	WITHOUT_CLASSIFICATION	1.4154970512742538E-5	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9998266850523659	WITHOUT_CLASSIFICATION	1.7331494763417525E-4	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999996676318637	WITHOUT_CLASSIFICATION	3.3236813628172524E-7	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9907813610427136	WITHOUT_CLASSIFICATION	0.009218638957286418	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999896564855703	WITHOUT_CLASSIFICATION	1.0343514429677342E-5	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999589074570615	WITHOUT_CLASSIFICATION	4.109254293855832E-5	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999997430119385	WITHOUT_CLASSIFICATION	2.5698806153876746E-7	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921092466596	WITHOUT_CLASSIFICATION	7.890753340429567E-6	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917648336382	WITHOUT_CLASSIFICATION	8.235166361794803E-6	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957643959916	WITHOUT_CLASSIFICATION	4.235604008503087E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999994402512029	WITHOUT_CLASSIFICATION	5.597487969700689E-7	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999993652468172	WITHOUT_CLASSIFICATION	6.347531828100057E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999653597121099	WITHOUT_CLASSIFICATION	3.464028789011593E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999653597121099	WITHOUT_CLASSIFICATION	3.464028789011593E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993735726402	WITHOUT_CLASSIFICATION	6.264273597080682E-7	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999986972972	WITHOUT_CLASSIFICATION	1.3027028060731583E-9	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9988239646486906	WITHOUT_CLASSIFICATION	0.0011760353513093817	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999974111519947	WITHOUT_CLASSIFICATION	2.5888480053057175E-5	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9988239646486906	WITHOUT_CLASSIFICATION	0.0011760353513093817	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999914927470723	WITHOUT_CLASSIFICATION	8.50725292763557E-6	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999988645019036	WITHOUT_CLASSIFICATION	1.1354980964482717E-6	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999997244373214	WITHOUT_CLASSIFICATION	2.75562678472087E-7	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999996743872756	WITHOUT_CLASSIFICATION	3.256127244373724E-7	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999606330271865	WITHOUT_CLASSIFICATION	3.936697281350051E-5	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999945378261562	WITHOUT_CLASSIFICATION	5.462173843718308E-6	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999984293760039	WITHOUT_CLASSIFICATION	1.570623996063601E-6	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999418031337975	WITHOUT_CLASSIFICATION	5.8196866202448585E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999382123991374	WITHOUT_CLASSIFICATION	6.178760086257527E-5	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999991529438542	WITHOUT_CLASSIFICATION	8.470561457481757E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999991168368338	WITHOUT_CLASSIFICATION	8.831631661622735E-7	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999935180339	WITHOUT_CLASSIFICATION	6.481966033041519E-9	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999987802559955	WITHOUT_CLASSIFICATION	1.219744004539292E-6	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999012585060398	WITHOUT_CLASSIFICATION	9.874149396020253E-5	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999848300889148	WITHOUT_CLASSIFICATION	1.5169911085231429E-5	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999962821032	WITHOUT_CLASSIFICATION	3.7178967300918136E-9	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999848325483031	WITHOUT_CLASSIFICATION	1.5167451696957343E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999848325483031	WITHOUT_CLASSIFICATION	1.5167451696957343E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999910535751042	WITHOUT_CLASSIFICATION	8.94642489586005E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999976607448	WITHOUT_CLASSIFICATION	2.339255125546058E-9	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999998040994832	WITHOUT_CLASSIFICATION	1.9590051669161941E-7	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999868743616	WITHOUT_CLASSIFICATION	1.3125638451504886E-8	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999969102509	WITHOUT_CLASSIFICATION	3.0897490742520746E-9	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999274726986	WITHOUT_CLASSIFICATION	7.252730142378176E-8	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998388245585224	WITHOUT_CLASSIFICATION	1.6117544147752704E-4	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999988721387624	WITHOUT_CLASSIFICATION	1.1278612375965244E-6	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999995223017084	WITHOUT_CLASSIFICATION	4.776982915576035E-7	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999997811989347	WITHOUT_CLASSIFICATION	2.188010653081033E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999489177666	WITHOUT_CLASSIFICATION	5.108223348735051E-8	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999985105141	WITHOUT_CLASSIFICATION	1.48948589691437E-9	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999902626515	WITHOUT_CLASSIFICATION	9.737348512641105E-9	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999999675125839	WITHOUT_CLASSIFICATION	3.2487416099755893E-7	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999999697890763	WITHOUT_CLASSIFICATION	3.021092362137054E-8	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999998937121986	WITHOUT_CLASSIFICATION	1.062878014674596E-7	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999997387608869	WITHOUT_CLASSIFICATION	2.612391131316427E-7	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999988036322678	WITHOUT_CLASSIFICATION	1.1963677322059228E-6	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999953841600991	WITHOUT_CLASSIFICATION	4.615839900929642E-6	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999880693571	WITHOUT_CLASSIFICATION	1.1930642945919406E-8	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.999999355021744	WITHOUT_CLASSIFICATION	6.449782559710561E-7	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999697514952	WITHOUT_CLASSIFICATION	3.02485047249773E-8	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999996145092377	WITHOUT_CLASSIFICATION	3.8549076234258E-7	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999998971805599	WITHOUT_CLASSIFICATION	1.028194400870384E-7	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999848190604458	WITHOUT_CLASSIFICATION	1.5180939554222565E-5	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999994388245804	WITHOUT_CLASSIFICATION	5.611754195308666E-7	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999958774905237	WITHOUT_CLASSIFICATION	4.122509476303083E-5	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999603496367134	WITHOUT_CLASSIFICATION	3.9650363286535337E-5	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999921073245289	WITHOUT_CLASSIFICATION	7.892675471023123E-6	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999512451078938	WITHOUT_CLASSIFICATION	4.875489210619997E-5	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999987755387092	WITHOUT_CLASSIFICATION	1.2244612907743447E-6	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999976009562144	WITHOUT_CLASSIFICATION	2.399043785656776E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998694214408064	WITHOUT_CLASSIFICATION	1.305785591936535E-4	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999801885738644	WITHOUT_CLASSIFICATION	1.981142613561661E-5	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999593319684876	WITHOUT_CLASSIFICATION	4.0668031512439885E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.99999993182142	WITHOUT_CLASSIFICATION	6.817857995112525E-8	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999955051954206	WITHOUT_CLASSIFICATION	4.494804579477972E-6	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999979279637339	WITHOUT_CLASSIFICATION	2.0720362661051726E-6	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999904555764648	WITHOUT_CLASSIFICATION	9.544423535279172E-6	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999941446019311	WITHOUT_CLASSIFICATION	5.855398068757761E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999973788393763	WITHOUT_CLASSIFICATION	2.6211606237101062E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985955140889	WITHOUT_CLASSIFICATION	1.4044859110849357E-6	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999966945959193	WITHOUT_CLASSIFICATION	3.3054040806483746E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999785045996663	WITHOUT_CLASSIFICATION	2.1495400333680448E-5	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998652591615	WITHOUT_CLASSIFICATION	1.3474083850676512E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999970927530181	WITHOUT_CLASSIFICATION	2.907246981998388E-6	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9996937868212376	WITHOUT_CLASSIFICATION	3.0621317876241893E-4	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999976249957	WITHOUT_CLASSIFICATION	2.375004274668885E-9	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998908528102	WITHOUT_CLASSIFICATION	1.0914718982005671E-7	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999997649475492	WITHOUT_CLASSIFICATION	2.3505245069653237E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989562765561	WITHOUT_CLASSIFICATION	1.0437234438397079E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999942473164	WITHOUT_CLASSIFICATION	5.752683496696792E-9	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998286351120238	WITHOUT_CLASSIFICATION	1.71364887976202E-4	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999977697298907	WITHOUT_CLASSIFICATION	2.2302701093260983E-6	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999959945361769	WITHOUT_CLASSIFICATION	4.0054638231021325E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999850984235115	WITHOUT_CLASSIFICATION	1.4901576488490208E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999850984235115	WITHOUT_CLASSIFICATION	1.4901576488490208E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999982211274611	WITHOUT_CLASSIFICATION	1.7788725390115457E-6	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999000793188573	WITHOUT_CLASSIFICATION	9.992068114264163E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999968834477825	WITHOUT_CLASSIFICATION	3.1165522175458045E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999605069102127	WITHOUT_CLASSIFICATION	3.94930897872378E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998232289299	WITHOUT_CLASSIFICATION	1.767710700530299E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999990749225607	WITHOUT_CLASSIFICATION	9.250774393434013E-7	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999703541967	WITHOUT_CLASSIFICATION	2.9645803244970825E-8	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999914702723344	WITHOUT_CLASSIFICATION	8.529727665612406E-6	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999876211039	WITHOUT_CLASSIFICATION	1.2378896035773437E-8	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999346522047	WITHOUT_CLASSIFICATION	6.53477952422804E-8	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999997977190135	WITHOUT_CLASSIFICATION	2.022809865010291E-6	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999985077335353	WITHOUT_CLASSIFICATION	1.492266464743475E-6	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999907623213102	WITHOUT_CLASSIFICATION	9.237678689831204E-6	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999630713914	WITHOUT_CLASSIFICATION	3.6928608580620876E-8	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999999592491918	WITHOUT_CLASSIFICATION	4.075080815361319E-8	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999906202830304	WITHOUT_CLASSIFICATION	9.379716969601374E-6	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999998705553933	WITHOUT_CLASSIFICATION	1.2944460669347153E-6	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999972193726726	WITHOUT_CLASSIFICATION	2.7806273274397094E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999937693870389	WITHOUT_CLASSIFICATION	6.230612961101537E-5	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999951642224283	WITHOUT_CLASSIFICATION	4.835777571721288E-6	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999982510758	WITHOUT_CLASSIFICATION	1.748924268054044E-9	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999795920592143	WITHOUT_CLASSIFICATION	2.0407940785682603E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999222189465466	WITHOUT_CLASSIFICATION	7.778105345329903E-5	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999379686089703	WITHOUT_CLASSIFICATION	6.203139102971093E-5	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9936838416324811	WITHOUT_CLASSIFICATION	0.006316158367518793	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9995755098277845	WITHOUT_CLASSIFICATION	4.2449017221543936E-4	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999998020188393	WITHOUT_CLASSIFICATION	1.9798116060647445E-7	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994480536750863	WITHOUT_CLASSIFICATION	5.51946324913598E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999998587461366	WITHOUT_CLASSIFICATION	1.412538634583674E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999222189465466	WITHOUT_CLASSIFICATION	7.778105345329903E-5	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999565082173537	WITHOUT_CLASSIFICATION	4.349178264622057E-5	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9998956480689565	WITHOUT_CLASSIFICATION	1.0435193104353437E-4	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9999450337571263	WITHOUT_CLASSIFICATION	5.4966242873821954E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999983666071346	WITHOUT_CLASSIFICATION	1.633392865290765E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999996981066	WITHOUT_CLASSIFICATION	3.0189342696951563E-10	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999963192429975	WITHOUT_CLASSIFICATION	3.680757002566336E-6	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999995619041233	WITHOUT_CLASSIFICATION	4.38095876636487E-7	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999968924157	WITHOUT_CLASSIFICATION	3.107584380521246E-9	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999999315997375	WITHOUT_CLASSIFICATION	6.840026235192659E-8	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999983666071346	WITHOUT_CLASSIFICATION	1.633392865290765E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999924398495	WITHOUT_CLASSIFICATION	7.560150597708317E-9	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999952952185	WITHOUT_CLASSIFICATION	4.704781508499929E-9	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999912766024839	WITHOUT_CLASSIFICATION	8.723397516107356E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999538501290262	WITHOUT_CLASSIFICATION	4.614987097384515E-5	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999135997827	WITHOUT_CLASSIFICATION	8.640021723956278E-8	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999489177666	WITHOUT_CLASSIFICATION	5.108223348735051E-8	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999950501809	WITHOUT_CLASSIFICATION	4.949819099780084E-8	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999998074073515	WITHOUT_CLASSIFICATION	1.9259264834497818E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999682727059	WITHOUT_CLASSIFICATION	3.172729403513187E-8	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999949110877516	WITHOUT_CLASSIFICATION	5.088912248412181E-6	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999919704796953	WITHOUT_CLASSIFICATION	8.02952030467964E-6	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999990930755963	WITHOUT_CLASSIFICATION	9.069244038277103E-7	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999999934803693	WITHOUT_CLASSIFICATION	6.519630705824097E-8	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999998739301621	WITHOUT_CLASSIFICATION	1.2606983798397137E-7	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999993229931836	WITHOUT_CLASSIFICATION	6.770068163979904E-7	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999999102919879	WITHOUT_CLASSIFICATION	8.970801217564761E-8	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998867599166888	WITHOUT_CLASSIFICATION	1.1324008331107303E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999475750717	WITHOUT_CLASSIFICATION	5.242492827367007E-8	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999982644884937	WITHOUT_CLASSIFICATION	1.7355115062789205E-6	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999933819739694	WITHOUT_CLASSIFICATION	6.6180260306465426E-6	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999246066822	WITHOUT_CLASSIFICATION	7.539331780228628E-8	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999999335035433	WITHOUT_CLASSIFICATION	6.64964566988683E-7	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999994042504312	WITHOUT_CLASSIFICATION	5.957495687939608E-6	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999963222668969	WITHOUT_CLASSIFICATION	3.677733102945122E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999998049755339	WITHOUT_CLASSIFICATION	1.9502446609875902E-6	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998620767828835	WITHOUT_CLASSIFICATION	1.3792321711646419E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998706093192296	WITHOUT_CLASSIFICATION	1.2939068077034885E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999997591873744	WITHOUT_CLASSIFICATION	2.408126256222876E-7	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999939587977332	WITHOUT_CLASSIFICATION	6.04120226684678E-6	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999725486813	WITHOUT_CLASSIFICATION	2.745131874016714E-8	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999876207804884	WITHOUT_CLASSIFICATION	1.2379219511662656E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999915280729368	WITHOUT_CLASSIFICATION	8.471927063188974E-6	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999615742537464	WITHOUT_CLASSIFICATION	3.8425746253507115E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967471125341	WITHOUT_CLASSIFICATION	3.25288746603587E-6	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979451565639	WITHOUT_CLASSIFICATION	2.054843436096019E-6	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999971233012819	WITHOUT_CLASSIFICATION	2.876698718190395E-6	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999908624997408	WITHOUT_CLASSIFICATION	9.137500259183617E-6	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999996302847336	WITHOUT_CLASSIFICATION	3.697152664062717E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999310646216	WITHOUT_CLASSIFICATION	6.893537840645209E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999310646216	WITHOUT_CLASSIFICATION	6.893537840645209E-8	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999938546198	WITHOUT_CLASSIFICATION	6.145380183767847E-9	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999471771027268	WITHOUT_CLASSIFICATION	5.282289727324318E-5	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999892883008751	WITHOUT_CLASSIFICATION	1.0711699124910924E-5	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999966136139682	WITHOUT_CLASSIFICATION	3.3863860318204735E-6	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999991815462435	WITHOUT_CLASSIFICATION	8.184537565601122E-7	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9955542208805629	WITHOUT_CLASSIFICATION	0.0044457791194371064	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999855366112258	WITHOUT_CLASSIFICATION	1.4463388774105548E-5	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999779034431011	WITHOUT_CLASSIFICATION	2.2096556898927015E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999997140294191	WITHOUT_CLASSIFICATION	2.859705808790704E-7	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999996386109052	WITHOUT_CLASSIFICATION	3.613890948167567E-7	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9905360375749335	WITHOUT_CLASSIFICATION	0.009463962425066514	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999997367205395	WITHOUT_CLASSIFICATION	2.632794603926227E-7	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999998507839356	WITHOUT_CLASSIFICATION	1.4921606440286446E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999310646216	WITHOUT_CLASSIFICATION	6.893537840645209E-8	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999676819318802	WITHOUT_CLASSIFICATION	3.2318068119736615E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999983681099947	WITHOUT_CLASSIFICATION	1.6318900053493645E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999927965547503	WITHOUT_CLASSIFICATION	7.203445249708968E-5	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999997549068357	WITHOUT_CLASSIFICATION	2.450931643210791E-7	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999991095346664	WITHOUT_CLASSIFICATION	8.904653336331394E-7	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998624037270878	WITHOUT_CLASSIFICATION	1.3759627291220472E-4	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999997874991622	WITHOUT_CLASSIFICATION	2.12500837783109E-7	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999995798643362	WITHOUT_CLASSIFICATION	4.201356638566125E-7	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999932893261991	WITHOUT_CLASSIFICATION	6.710673800822137E-6	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999998444585183	WITHOUT_CLASSIFICATION	1.5554148176350039E-7	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999999498620458	WITHOUT_CLASSIFICATION	5.013795420525521E-7	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967471125341	WITHOUT_CLASSIFICATION	3.25288746603587E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999310646216	WITHOUT_CLASSIFICATION	6.893537840645209E-8	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999672284044974	WITHOUT_CLASSIFICATION	3.277159550262738E-5	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999988124589652	WITHOUT_CLASSIFICATION	1.1875410347782844E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987890109636	WITHOUT_CLASSIFICATION	1.210989036371779E-6	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999926903747702	WITHOUT_CLASSIFICATION	7.309625229766341E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999982713545379	WITHOUT_CLASSIFICATION	1.7286454622181337E-6	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9998752330228189	WITHOUT_CLASSIFICATION	1.2476697718104163E-4	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992929137477	WITHOUT_CLASSIFICATION	7.070862523803547E-7	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999993049008649	WITHOUT_CLASSIFICATION	6.950991351602379E-7	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999986705092659	WITHOUT_CLASSIFICATION	1.3294907339803929E-6	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999984175072103	WITHOUT_CLASSIFICATION	1.5824927897500384E-6	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999998959030656	WITHOUT_CLASSIFICATION	1.0409693443103276E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999731670734473	WITHOUT_CLASSIFICATION	2.6832926552731427E-5	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999872650596	WITHOUT_CLASSIFICATION	1.2734940313677692E-8	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999947177811567	WITHOUT_CLASSIFICATION	5.282218843332246E-6	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999914927470723	WITHOUT_CLASSIFICATION	8.50725292763557E-6	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999984080627488	WITHOUT_CLASSIFICATION	1.5919372512896206E-6	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999891625424	WITHOUT_CLASSIFICATION	1.0837457485973043E-8	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999731721290479	WITHOUT_CLASSIFICATION	2.6827870952011574E-5	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999983170372518	WITHOUT_CLASSIFICATION	1.68296274816808E-6	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999810511686715	WITHOUT_CLASSIFICATION	1.894883132846693E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999960067743405	WITHOUT_CLASSIFICATION	3.993225659366058E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999960067743405	WITHOUT_CLASSIFICATION	3.993225659366058E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999997117601185	WITHOUT_CLASSIFICATION	2.882398814941375E-7	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999973757093822	WITHOUT_CLASSIFICATION	2.624290617847521E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999947291489301	WITHOUT_CLASSIFICATION	5.270851070040244E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999885750324145	WITHOUT_CLASSIFICATION	1.1424967585485297E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999812214026332	WITHOUT_CLASSIFICATION	1.8778597366716035E-5	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9997009332450326	WITHOUT_CLASSIFICATION	2.990667549673216E-4	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999709111161285	WITHOUT_CLASSIFICATION	2.9088883871546408E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999947017511246	WITHOUT_CLASSIFICATION	5.29824887541016E-6	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999947017511246	WITHOUT_CLASSIFICATION	5.29824887541016E-6	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999892757414142	WITHOUT_CLASSIFICATION	1.0724258585799248E-5	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999933755229082	WITHOUT_CLASSIFICATION	6.624477091743774E-6	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999951224579377	WITHOUT_CLASSIFICATION	4.877542062299995E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999992581372455	WITHOUT_CLASSIFICATION	7.418627544937671E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999992581372455	WITHOUT_CLASSIFICATION	7.418627544937671E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999992581372455	WITHOUT_CLASSIFICATION	7.418627544937671E-6	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999322158298168	WITHOUT_CLASSIFICATION	6.77841701832129E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999999721236114	WITHOUT_CLASSIFICATION	2.7876388605631504E-7	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999996240414043	WITHOUT_CLASSIFICATION	3.759585957360786E-7	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9852955440477104	WITHOUT_CLASSIFICATION	0.014704455952289742	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999975118609793	WITHOUT_CLASSIFICATION	2.4881390206989263E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999310646216	WITHOUT_CLASSIFICATION	6.893537840645209E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999310646216	WITHOUT_CLASSIFICATION	6.893537840645209E-8	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999999618469011	WITHOUT_CLASSIFICATION	3.815309891649215E-8	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999680750599	WITHOUT_CLASSIFICATION	3.192494003562371E-8	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999819546957194	WITHOUT_CLASSIFICATION	1.8045304280730685E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999484710179	WITHOUT_CLASSIFICATION	5.1528982064042783E-8	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999400450186227	WITHOUT_CLASSIFICATION	5.99549813774076E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999918168026568	WITHOUT_CLASSIFICATION	8.183197343133072E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9997594218985502	WITHOUT_CLASSIFICATION	2.405781014497593E-4	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999890171972655	WITHOUT_CLASSIFICATION	1.0982802734499279E-4	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999901962086771	WITHOUT_CLASSIFICATION	9.803791322994516E-6	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999734533748887	WITHOUT_CLASSIFICATION	2.6546625111291082E-5	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999511006564065	WITHOUT_CLASSIFICATION	4.88993435934135E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999874455317543	WITHOUT_CLASSIFICATION	1.2554468245667023E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999874455317543	WITHOUT_CLASSIFICATION	1.2554468245667023E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999900052674597	WITHOUT_CLASSIFICATION	9.994732540202701E-6	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999900052674597	WITHOUT_CLASSIFICATION	9.994732540202701E-6	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999910202099169	WITHOUT_CLASSIFICATION	8.979790083018539E-6	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999860896025915	WITHOUT_CLASSIFICATION	1.3910397408367533E-5	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999860896025915	WITHOUT_CLASSIFICATION	1.3910397408367533E-5	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999956790922596	WITHOUT_CLASSIFICATION	4.3209077404406055E-6	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999922528538053	WITHOUT_CLASSIFICATION	7.747146194560635E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999997434832572	WITHOUT_CLASSIFICATION	2.5651674280376113E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999960067743405	WITHOUT_CLASSIFICATION	3.993225659366058E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999968023879466	WITHOUT_CLASSIFICATION	3.197612053253186E-6	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999922528538053	WITHOUT_CLASSIFICATION	7.747146194560635E-6	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999750374304955	WITHOUT_CLASSIFICATION	2.4962569504413838E-5	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999237894330285	WITHOUT_CLASSIFICATION	7.62105669715651E-5	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.99999725618742	WITHOUT_CLASSIFICATION	2.7438125800634968E-6	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999979737512409	WITHOUT_CLASSIFICATION	2.026248759192341E-6	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999735455222	WITHOUT_CLASSIFICATION	2.6454477808988138E-8	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999997174135313	WITHOUT_CLASSIFICATION	2.8258646863556873E-7	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998463141232	WITHOUT_CLASSIFICATION	1.536858768560379E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9216171978584765	WITHOUT_CLASSIFICATION	0.07838280214152346	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9996342764114814	WITHOUT_CLASSIFICATION	3.6572358851868293E-4	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9983255964500377	WITHOUT_CLASSIFICATION	0.0016744035499623028	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999932460948832	WITHOUT_CLASSIFICATION	6.753905116891402E-6	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999778046532397	WITHOUT_CLASSIFICATION	2.219534676022922E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999995402111061	WITHOUT_CLASSIFICATION	4.597888939031178E-6	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999995494795116	WITHOUT_CLASSIFICATION	4.505204884226864E-7	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999453431037553	WITHOUT_CLASSIFICATION	5.465689624471224E-5	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999878691372781	WITHOUT_CLASSIFICATION	1.2130862721842488E-5	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999998412732402	WITHOUT_CLASSIFICATION	1.5872675976467036E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999962942054476	WITHOUT_CLASSIFICATION	3.7057945524881903E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999962942054476	WITHOUT_CLASSIFICATION	3.7057945524881903E-6	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999999275078778	WITHOUT_CLASSIFICATION	7.249212218815694E-8	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999878586922	WITHOUT_CLASSIFICATION	1.2141307834102848E-8	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999999364237954	WITHOUT_CLASSIFICATION	6.357620458931858E-8	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999776708979633	WITHOUT_CLASSIFICATION	2.232910203665057E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999998617590363	WITHOUT_CLASSIFICATION	1.3824096372964058E-7	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999871275785978	WITHOUT_CLASSIFICATION	1.2872421402169937E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999998046915571	WITHOUT_CLASSIFICATION	1.95308442857604E-7	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999980029991387	WITHOUT_CLASSIFICATION	1.9970008613270315E-6	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999701949107183	WITHOUT_CLASSIFICATION	2.98050892817651E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999995947742178	WITHOUT_CLASSIFICATION	4.0522578223463017E-7	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999998269265534	WITHOUT_CLASSIFICATION	1.7307344668073056E-7	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999731670734473	WITHOUT_CLASSIFICATION	2.6832926552731427E-5	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999917259258	WITHOUT_CLASSIFICATION	8.274074248682733E-9	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999971816950499	WITHOUT_CLASSIFICATION	2.818304950058612E-6	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999987119471022	WITHOUT_CLASSIFICATION	1.2880528978169969E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999885597112315	WITHOUT_CLASSIFICATION	1.1440288768498499E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999701554234	WITHOUT_CLASSIFICATION	2.984457651723442E-8	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999701554234	WITHOUT_CLASSIFICATION	2.984457651723442E-8	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999992704005769	WITHOUT_CLASSIFICATION	7.295994231267665E-7	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9993751827871014	WITHOUT_CLASSIFICATION	6.248172128986316E-4	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9991883696451076	WITHOUT_CLASSIFICATION	8.116303548922832E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9996261578218333	WITHOUT_CLASSIFICATION	3.7384217816670664E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9994010480613309	WITHOUT_CLASSIFICATION	5.989519386691125E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997462257778269	WITHOUT_CLASSIFICATION	2.537742221730973E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999999771922978	WITHOUT_CLASSIFICATION	2.2807702195712646E-8	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999975864074033	WITHOUT_CLASSIFICATION	2.413592596650939E-6	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999430921042513	WITHOUT_CLASSIFICATION	5.690789574879593E-5	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999995193883774	WITHOUT_CLASSIFICATION	4.806116226370651E-7	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999090660213	WITHOUT_CLASSIFICATION	9.093397875034967E-8	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999975864074033	WITHOUT_CLASSIFICATION	2.413592596650939E-6	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999262929846945	WITHOUT_CLASSIFICATION	7.370701530549569E-5	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999967749760915	WITHOUT_CLASSIFICATION	3.2250239085163605E-6	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999993272661648	WITHOUT_CLASSIFICATION	6.727338351191051E-7	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999865533182256	WITHOUT_CLASSIFICATION	1.3446681774348722E-5	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999226985635	WITHOUT_CLASSIFICATION	7.730143649736383E-8	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999687555672	WITHOUT_CLASSIFICATION	3.124443286212468E-8	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999825764194	WITHOUT_CLASSIFICATION	1.742358061913602E-8	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999992205793489	WITHOUT_CLASSIFICATION	7.794206511844569E-7	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999998551944818	WITHOUT_CLASSIFICATION	1.4480551819323051E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999927455067756	WITHOUT_CLASSIFICATION	7.254493224389935E-6	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999998590569213	WITHOUT_CLASSIFICATION	1.4094307876725813E-7	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999903265864061	WITHOUT_CLASSIFICATION	9.673413593875467E-6	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999268031694	WITHOUT_CLASSIFICATION	7.319683059934718E-8	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999999741440404	WITHOUT_CLASSIFICATION	2.585595959498804E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999900140163317	WITHOUT_CLASSIFICATION	9.985983668304382E-6	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.999999987862658	WITHOUT_CLASSIFICATION	1.213734197220941E-8	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999822263433	WITHOUT_CLASSIFICATION	1.7773656746687744E-8	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999918263185236	WITHOUT_CLASSIFICATION	8.173681476390202E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999104057104464	WITHOUT_CLASSIFICATION	8.959428955355286E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999910358204	WITHOUT_CLASSIFICATION	8.964179607281038E-9	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999920072425206	WITHOUT_CLASSIFICATION	7.9927574793269E-6	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999996270059586	WITHOUT_CLASSIFICATION	3.729940414363463E-7	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9989382024179341	WITHOUT_CLASSIFICATION	0.0010617975820659002	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999794485554985	WITHOUT_CLASSIFICATION	2.055144450145342E-5	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998573797028	WITHOUT_CLASSIFICATION	1.426202972194567E-7	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999971582315419	WITHOUT_CLASSIFICATION	2.841768458079369E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999991931516989	WITHOUT_CLASSIFICATION	8.068483010763039E-7	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999994873877132	WITHOUT_CLASSIFICATION	5.12612286958182E-7	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998965498936	WITHOUT_CLASSIFICATION	1.0345010644365995E-7	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999986764671448	WITHOUT_CLASSIFICATION	1.323532855214019E-6	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999999960894014	WITHOUT_CLASSIFICATION	3.910598599996929E-8	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9996142851997726	WITHOUT_CLASSIFICATION	3.857148002274166E-4	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999915922853388	WITHOUT_CLASSIFICATION	8.40771466108735E-6	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999770997532	WITHOUT_CLASSIFICATION	2.290024690297137E-8	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999999989569631	WITHOUT_CLASSIFICATION	1.0430368953686376E-8	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999997743314217	WITHOUT_CLASSIFICATION	2.256685781908041E-7	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999951861135761	WITHOUT_CLASSIFICATION	4.813886423927315E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999976165523248	WITHOUT_CLASSIFICATION	2.3834476752328643E-6	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999999747283906	WITHOUT_CLASSIFICATION	2.527160940324018E-7	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999530954333001	WITHOUT_CLASSIFICATION	4.6904566699889364E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999998728196937	WITHOUT_CLASSIFICATION	1.271803063234629E-7	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999848329251824	WITHOUT_CLASSIFICATION	1.5167074817644981E-5	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999998156228805	WITHOUT_CLASSIFICATION	1.8437711956462498E-7	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998539330843	WITHOUT_CLASSIFICATION	1.4606691576568956E-7	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999796583937437	WITHOUT_CLASSIFICATION	2.034160625626329E-5	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999973597566855	WITHOUT_CLASSIFICATION	2.6402433145962916E-6	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999377908618172	WITHOUT_CLASSIFICATION	6.220913818272964E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999999492279622	WITHOUT_CLASSIFICATION	5.077203779936337E-7	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999905211041389	WITHOUT_CLASSIFICATION	9.478895861148453E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999907583715614	WITHOUT_CLASSIFICATION	9.241628438746668E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999174120805	WITHOUT_CLASSIFICATION	8.258791951395837E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999999992172607	WITHOUT_CLASSIFICATION	7.827393064652025E-9	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999521342674	WITHOUT_CLASSIFICATION	4.786573262625601E-8	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999327400427818	WITHOUT_CLASSIFICATION	6.725995721825639E-5	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998868958802	WITHOUT_CLASSIFICATION	1.1310411983105082E-7	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999996855341333	WITHOUT_CLASSIFICATION	3.1446586671050755E-6	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997062014303	WITHOUT_CLASSIFICATION	2.937985697390874E-7	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999687846746514	WITHOUT_CLASSIFICATION	3.121532534858624E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999994714283678	WITHOUT_CLASSIFICATION	5.285716322278946E-7	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999987030463199	WITHOUT_CLASSIFICATION	1.296953680076656E-6	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999959521282886	WITHOUT_CLASSIFICATION	4.047871711367924E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999780678656308	WITHOUT_CLASSIFICATION	2.1932134369227533E-5	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9998364078469928	WITHOUT_CLASSIFICATION	1.635921530073073E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.8493271953005066	DEFECT	0.15067280469949335	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9975839866328601	WITHOUT_CLASSIFICATION	0.0024160133671400083	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998476326183223	WITHOUT_CLASSIFICATION	1.523673816777177E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999174120805	WITHOUT_CLASSIFICATION	8.258791951395837E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999734090118675	WITHOUT_CLASSIFICATION	2.659098813250786E-5	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999994813028811	WITHOUT_CLASSIFICATION	5.186971188731247E-7	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998529115569421	WITHOUT_CLASSIFICATION	1.4708844305796372E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999962322670177	WITHOUT_CLASSIFICATION	3.7677329823126406E-6	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9995051642641535	WITHOUT_CLASSIFICATION	4.948357358465744E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999903693070021	WITHOUT_CLASSIFICATION	9.630692997846429E-6	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999430921042513	WITHOUT_CLASSIFICATION	5.690789574879593E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999904984237459	WITHOUT_CLASSIFICATION	9.501576254151699E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999999989569631	WITHOUT_CLASSIFICATION	1.0430368953686376E-8	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9991197883044576	WITHOUT_CLASSIFICATION	8.802116955424412E-4	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998576149021	WITHOUT_CLASSIFICATION	1.4238509796540733E-7	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999822076172	WITHOUT_CLASSIFICATION	1.7792382802159607E-8	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999870670753	WITHOUT_CLASSIFICATION	1.2932924761397901E-8	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999998875592603	WITHOUT_CLASSIFICATION	1.1244073973119108E-7	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9997446084601462	WITHOUT_CLASSIFICATION	2.553915398537978E-4	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999851747801	WITHOUT_CLASSIFICATION	1.4825219885414956E-8	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999999737904137	WITHOUT_CLASSIFICATION	2.620958626556357E-8	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9960166926774466	WITHOUT_CLASSIFICATION	0.003983307322553385	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999352639585	WITHOUT_CLASSIFICATION	6.47360415419448E-8	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999989555977814	WITHOUT_CLASSIFICATION	1.0444022186221488E-6	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999615071039	WITHOUT_CLASSIFICATION	3.849289609171641E-8	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999908391124	WITHOUT_CLASSIFICATION	9.160887600099942E-9	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999908391124	WITHOUT_CLASSIFICATION	9.160887600099942E-9	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999997255563678	WITHOUT_CLASSIFICATION	2.7444363214455153E-7	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.99999554098345	WITHOUT_CLASSIFICATION	4.459016550018556E-6	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999567240423	WITHOUT_CLASSIFICATION	4.327595759107683E-8	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999974311353451	WITHOUT_CLASSIFICATION	2.5688646548391547E-6	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999031520842	WITHOUT_CLASSIFICATION	9.684791579324216E-8	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.99999844283806	WITHOUT_CLASSIFICATION	1.5571619398786455E-6	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999968834015799	WITHOUT_CLASSIFICATION	3.11659842004499E-6	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999478743905933	WITHOUT_CLASSIFICATION	5.21256094067576E-5	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999998371837169	WITHOUT_CLASSIFICATION	1.6281628304017638E-7	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999998244905348	WITHOUT_CLASSIFICATION	1.7550946522022105E-7	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999968717682763	WITHOUT_CLASSIFICATION	3.1282317237786803E-6	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999988590806088	WITHOUT_CLASSIFICATION	1.140919391198689E-6	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999929367040898	WITHOUT_CLASSIFICATION	7.063295910154089E-6	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999951857084	WITHOUT_CLASSIFICATION	4.814291529918924E-9	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997233130147449	WITHOUT_CLASSIFICATION	2.7668698525509805E-4	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999948738415754	WITHOUT_CLASSIFICATION	5.1261584246289415E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999969581876381	WITHOUT_CLASSIFICATION	3.0418123619383762E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999810236592	WITHOUT_CLASSIFICATION	1.8976340822656513E-8	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999980991951852	WITHOUT_CLASSIFICATION	1.9008048147117988E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999693293617796	WITHOUT_CLASSIFICATION	3.067063822043284E-5	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9980837738263529	WITHOUT_CLASSIFICATION	0.0019162261736470983	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999171155622	WITHOUT_CLASSIFICATION	8.288443767560117E-8	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999991298847566	WITHOUT_CLASSIFICATION	8.701152434180445E-7	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999488214333332	WITHOUT_CLASSIFICATION	5.117856666679098E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999990119040363	WITHOUT_CLASSIFICATION	9.880959637211524E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983030508812	WITHOUT_CLASSIFICATION	1.6969491187466543E-6	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999900386379426	WITHOUT_CLASSIFICATION	9.961362057410714E-6	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999982698226986	WITHOUT_CLASSIFICATION	1.7301773014297677E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999877020285168	WITHOUT_CLASSIFICATION	1.2297971483027583E-5	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999827644185342	WITHOUT_CLASSIFICATION	1.7235581465780713E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9933197865985777	WITHOUT_CLASSIFICATION	0.006680213401422281	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997116467369785	WITHOUT_CLASSIFICATION	2.8835326302150414E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999998291230039	WITHOUT_CLASSIFICATION	1.7087699609634074E-6	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999931386939171	WITHOUT_CLASSIFICATION	6.8613060828625E-6	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999976281481036	WITHOUT_CLASSIFICATION	2.3718518964485286E-6	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999964294546014	WITHOUT_CLASSIFICATION	3.570545398486617E-6	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999734973617308	WITHOUT_CLASSIFICATION	2.650263826916121E-5	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999902974417819	WITHOUT_CLASSIFICATION	9.702558218014193E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999997442576288	WITHOUT_CLASSIFICATION	2.557423711933834E-7	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999991311045412	WITHOUT_CLASSIFICATION	8.68895458662363E-7	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997952902502	WITHOUT_CLASSIFICATION	2.0470974992437473E-7	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999669313552	WITHOUT_CLASSIFICATION	3.3068644783076086E-8	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997394366707378	WITHOUT_CLASSIFICATION	2.605633292622413E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999480803157488	WITHOUT_CLASSIFICATION	5.191968425120256E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999915258428166	WITHOUT_CLASSIFICATION	8.474157183431724E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995226038798	WITHOUT_CLASSIFICATION	4.773961201199131E-7	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.991872491573242	WITHOUT_CLASSIFICATION	0.008127508426758093	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998331250401	WITHOUT_CLASSIFICATION	1.6687495995215482E-7	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999995105263364	WITHOUT_CLASSIFICATION	4.894736636295255E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999998725968814	WITHOUT_CLASSIFICATION	1.274031186001886E-6	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998980594259	WITHOUT_CLASSIFICATION	1.0194057409995842E-6	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999773964345	WITHOUT_CLASSIFICATION	2.2603565423819214E-8	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999997332584825	WITHOUT_CLASSIFICATION	2.667415175889499E-7	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999758403505644	WITHOUT_CLASSIFICATION	2.4159649435625164E-5	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999978518910386	WITHOUT_CLASSIFICATION	2.1481089614710943E-6	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9998038290421116	WITHOUT_CLASSIFICATION	1.9617095788848613E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998635708941594	WITHOUT_CLASSIFICATION	1.3642910584056855E-4	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.999999049339711	WITHOUT_CLASSIFICATION	9.506602889897452E-7	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999938509097634	WITHOUT_CLASSIFICATION	6.1490902365118585E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999731860669657	WITHOUT_CLASSIFICATION	2.6813933034203324E-5	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999963316868471	WITHOUT_CLASSIFICATION	3.6683131529369493E-6	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999233730384858	WITHOUT_CLASSIFICATION	7.66269615141757E-5	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999991535640732	WITHOUT_CLASSIFICATION	8.464359268527989E-7	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999990512940924	WITHOUT_CLASSIFICATION	9.487059075305441E-7	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999557107542242	WITHOUT_CLASSIFICATION	4.428924577572962E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999994916845063	WITHOUT_CLASSIFICATION	5.083154938193603E-7	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999281079043	WITHOUT_CLASSIFICATION	7.189209571950062E-8	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999046435745	WITHOUT_CLASSIFICATION	9.535642549882906E-8	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999999664053156	WITHOUT_CLASSIFICATION	3.3594684397669323E-7	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999990263077875	WITHOUT_CLASSIFICATION	9.736922125274483E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999999664053156	WITHOUT_CLASSIFICATION	3.3594684397669323E-7	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9997589302082674	WITHOUT_CLASSIFICATION	2.4106979173248185E-4	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999824315308932	WITHOUT_CLASSIFICATION	1.7568469106797473E-5	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999984721252104	WITHOUT_CLASSIFICATION	1.527874789629808E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999992135146104	WITHOUT_CLASSIFICATION	7.864853895789183E-7	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999860078205143	WITHOUT_CLASSIFICATION	1.3992179485651757E-5	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999990591405633	WITHOUT_CLASSIFICATION	9.408594367936585E-7	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999998492467373	WITHOUT_CLASSIFICATION	1.5075326266893514E-7	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999997640935264	WITHOUT_CLASSIFICATION	2.3590647366641E-7	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999943401504131	WITHOUT_CLASSIFICATION	5.659849586783753E-6	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999996128718236	WITHOUT_CLASSIFICATION	3.8712817634860414E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999622590336	WITHOUT_CLASSIFICATION	3.774096638243599E-8	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999989790596315	WITHOUT_CLASSIFICATION	1.0209403684148276E-6	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999996404649905	WITHOUT_CLASSIFICATION	3.5953500956317193E-7	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999345714239554	WITHOUT_CLASSIFICATION	6.542857604465344E-5	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999998941609705	WITHOUT_CLASSIFICATION	1.0583902953787049E-7	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999997830221807	WITHOUT_CLASSIFICATION	2.169778193034287E-7	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999997681129534	WITHOUT_CLASSIFICATION	2.318870467121781E-7	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999792576127726	WITHOUT_CLASSIFICATION	2.074238722745592E-5	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999569802254	WITHOUT_CLASSIFICATION	4.301977469444833E-8	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999992126672598	WITHOUT_CLASSIFICATION	7.873327402312747E-7	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999966090531728	WITHOUT_CLASSIFICATION	3.390946827294096E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999834402313174	WITHOUT_CLASSIFICATION	1.655976868261415E-5	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9993352529053217	WITHOUT_CLASSIFICATION	6.647470946784254E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999836248853717	WITHOUT_CLASSIFICATION	1.6375114628303958E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999951156535195	WITHOUT_CLASSIFICATION	4.884346480468601E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9841639275811073	WITHOUT_CLASSIFICATION	0.015836072418892767	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999756919306846	WITHOUT_CLASSIFICATION	2.4308069315444977E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999926420585317	WITHOUT_CLASSIFICATION	7.357941468206305E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999185997472	WITHOUT_CLASSIFICATION	8.140025286275272E-8	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999952011809707	WITHOUT_CLASSIFICATION	4.7988190292908025E-6	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999984791723967	WITHOUT_CLASSIFICATION	1.52082760340219E-6	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.8531728308377698	WITHOUT_CLASSIFICATION	0.1468271691622303	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.8519493761734205	WITHOUT_CLASSIFICATION	0.14805062382657952	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999956890581817	WITHOUT_CLASSIFICATION	4.310941818333122E-6	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999566905359816	WITHOUT_CLASSIFICATION	4.330946401842531E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.999991734348132	WITHOUT_CLASSIFICATION	8.265651867927782E-6	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999690341807921	WITHOUT_CLASSIFICATION	3.096581920789274E-5	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999943017273	WITHOUT_CLASSIFICATION	5.698272701953788E-8	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999913358380188	WITHOUT_CLASSIFICATION	8.664161981241807E-6	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999992775326709	WITHOUT_CLASSIFICATION	7.224673291030164E-7	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999952309063721	WITHOUT_CLASSIFICATION	4.769093627861656E-6	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999854371441819	WITHOUT_CLASSIFICATION	1.4562855818179655E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998937265429912	WITHOUT_CLASSIFICATION	1.0627345700881247E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9841639275811073	WITHOUT_CLASSIFICATION	0.015836072418892767	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999884421929383	WITHOUT_CLASSIFICATION	1.1557807061857058E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.999997911405306	WITHOUT_CLASSIFICATION	2.088594693931011E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9993872081319858	WITHOUT_CLASSIFICATION	6.127918680141057E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999699536905405	WITHOUT_CLASSIFICATION	3.004630945958011E-5	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999974047018761	WITHOUT_CLASSIFICATION	2.5952981239514183E-6	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999875866203433	WITHOUT_CLASSIFICATION	1.2413379656777612E-5	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999999634568189	WITHOUT_CLASSIFICATION	3.654318109951737E-7	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9335521778781954	WITHOUT_CLASSIFICATION	0.06644782212180465	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999969075554926	WITHOUT_CLASSIFICATION	3.0924445073278437E-6	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999904297205809	WITHOUT_CLASSIFICATION	9.570279419120078E-6	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999916766623733	WITHOUT_CLASSIFICATION	8.323337626605748E-6	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999918445929	WITHOUT_CLASSIFICATION	8.155407130936237E-9	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999888067077518	WITHOUT_CLASSIFICATION	1.1193292248212584E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999489025105546	WITHOUT_CLASSIFICATION	5.109748944555761E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999830207248266	WITHOUT_CLASSIFICATION	1.6979275173417555E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999999983346337	WITHOUT_CLASSIFICATION	1.6653662946976836E-8	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999961805186298	WITHOUT_CLASSIFICATION	3.819481370159975E-6	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999991693253453	WITHOUT_CLASSIFICATION	8.306746545968123E-7	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999991828143383	WITHOUT_CLASSIFICATION	8.171856616933081E-7	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999884421929383	WITHOUT_CLASSIFICATION	1.1557807061857058E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999738699249957	WITHOUT_CLASSIFICATION	2.6130075004190364E-5	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999613805880592	WITHOUT_CLASSIFICATION	3.8619411940738415E-5	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999965573881137	WITHOUT_CLASSIFICATION	3.44261188624447E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999982730333857	WITHOUT_CLASSIFICATION	1.7269666141941336E-6	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999795954650148	WITHOUT_CLASSIFICATION	2.040453498524896E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999656245483716	WITHOUT_CLASSIFICATION	3.437545162848374E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999656245483716	WITHOUT_CLASSIFICATION	3.437545162848374E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999895685334278	WITHOUT_CLASSIFICATION	1.0431466572121972E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999656245483716	WITHOUT_CLASSIFICATION	3.437545162848374E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999656245483716	WITHOUT_CLASSIFICATION	3.437545162848374E-5	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9115202669830292	WITHOUT_CLASSIFICATION	0.08847973301697074	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999924969546884	WITHOUT_CLASSIFICATION	7.503045311700962E-6	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999748418592	WITHOUT_CLASSIFICATION	2.515814080929542E-8	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999995298513954	WITHOUT_CLASSIFICATION	4.7014860468500923E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999783651520235	WITHOUT_CLASSIFICATION	2.163484797650843E-5	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999990337425917	WITHOUT_CLASSIFICATION	9.662574082602204E-7	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998019411100183	WITHOUT_CLASSIFICATION	1.980588899816468E-4	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999924519268	WITHOUT_CLASSIFICATION	7.54807325439231E-9	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999929510446356	WITHOUT_CLASSIFICATION	7.048955364467931E-6	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999934956826129	WITHOUT_CLASSIFICATION	6.504317387138141E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999979544692377	WITHOUT_CLASSIFICATION	2.0455307622887583E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999667528549707	WITHOUT_CLASSIFICATION	3.324714502927661E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999981725110743	WITHOUT_CLASSIFICATION	1.8274889257026084E-6	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999981120560181	WITHOUT_CLASSIFICATION	1.8879439819682304E-6	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999985031724431	WITHOUT_CLASSIFICATION	1.496827556816687E-6	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9993163508768849	WITHOUT_CLASSIFICATION	6.836491231151024E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993735726402	WITHOUT_CLASSIFICATION	6.264273597080682E-7	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9997504968820321	WITHOUT_CLASSIFICATION	2.495031179678999E-4	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9997840117064519	WITHOUT_CLASSIFICATION	2.1598829354820234E-4	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999983185870508	WITHOUT_CLASSIFICATION	1.6814129492049756E-6	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999995705428792	WITHOUT_CLASSIFICATION	4.2945712072703513E-7	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999947273270293	WITHOUT_CLASSIFICATION	5.272672970651076E-6	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993735726402	WITHOUT_CLASSIFICATION	6.264273597080682E-7	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999756919306846	WITHOUT_CLASSIFICATION	2.4308069315444977E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999921842976595	WITHOUT_CLASSIFICATION	7.815702340526655E-6	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999941645863077	WITHOUT_CLASSIFICATION	5.835413692213975E-6	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999584827956716	WITHOUT_CLASSIFICATION	4.1517204328440285E-5	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999944520360418	WITHOUT_CLASSIFICATION	5.54796395821654E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999942845901401	WITHOUT_CLASSIFICATION	5.715409860021826E-6	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999920837427545	WITHOUT_CLASSIFICATION	7.916257245503477E-6	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999946085788272	WITHOUT_CLASSIFICATION	5.391421172798285E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999995340180796	WITHOUT_CLASSIFICATION	4.6598192039724514E-7	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999349486458	WITHOUT_CLASSIFICATION	6.505135419612719E-8	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999994594147563	WITHOUT_CLASSIFICATION	5.405852437282074E-7	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999947806853074	WITHOUT_CLASSIFICATION	5.219314692504162E-6	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999937770657508	WITHOUT_CLASSIFICATION	6.2229342492705425E-6	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999795876178	WITHOUT_CLASSIFICATION	2.0412382208484306E-8	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999178074177836	WITHOUT_CLASSIFICATION	8.219258221639063E-5	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999977842592915	WITHOUT_CLASSIFICATION	2.215740708462378E-6	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999750900444979	WITHOUT_CLASSIFICATION	2.4909955502087735E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999832334959252	WITHOUT_CLASSIFICATION	1.6766504074806806E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999987734505317	WITHOUT_CLASSIFICATION	1.2265494683651192E-6	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999986538849958	WITHOUT_CLASSIFICATION	1.3461150042148526E-6	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999742361407523	WITHOUT_CLASSIFICATION	2.5763859247604316E-5	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999998328213728	WITHOUT_CLASSIFICATION	1.6717862712993643E-7	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999999972645621	WITHOUT_CLASSIFICATION	2.735437891684234E-8	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999995340180796	WITHOUT_CLASSIFICATION	4.6598192039724514E-7	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999995377885226	WITHOUT_CLASSIFICATION	4.622114773542658E-7	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.999998933191889	WITHOUT_CLASSIFICATION	1.0668081109059834E-6	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999995327244283	WITHOUT_CLASSIFICATION	4.672755715931674E-7	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999994730861832	WITHOUT_CLASSIFICATION	5.269138168248932E-7	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998344931211	WITHOUT_CLASSIFICATION	1.6550687884146964E-7	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999878441437746	WITHOUT_CLASSIFICATION	1.2155856225378131E-5	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999950220731669	WITHOUT_CLASSIFICATION	4.977926833039474E-6	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999991935194171	WITHOUT_CLASSIFICATION	8.06480582871226E-7	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999998231530633	WITHOUT_CLASSIFICATION	1.7684693669504472E-7	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999902580649972	WITHOUT_CLASSIFICATION	9.741935002847323E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999086755443	WITHOUT_CLASSIFICATION	9.13244555874709E-8	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999956948990832	WITHOUT_CLASSIFICATION	4.305100916788935E-6	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999986932928407	WITHOUT_CLASSIFICATION	1.3067071593125903E-6	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999971265593	WITHOUT_CLASSIFICATION	2.873440719168943E-9	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999963924451462	WITHOUT_CLASSIFICATION	3.6075548538475175E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999015875309253	WITHOUT_CLASSIFICATION	9.841246907471966E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999848903219	WITHOUT_CLASSIFICATION	1.5109678086395654E-8	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999086755443	WITHOUT_CLASSIFICATION	9.13244555874709E-8	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999981973521809	WITHOUT_CLASSIFICATION	1.8026478191551267E-6	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9993507985055405	WITHOUT_CLASSIFICATION	6.4920149445938E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995894972913	WITHOUT_CLASSIFICATION	4.1050270865799166E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999999851987316	WITHOUT_CLASSIFICATION	1.4801268490993824E-8	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999627021863972	WITHOUT_CLASSIFICATION	3.7297813602850915E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999989757032909	WITHOUT_CLASSIFICATION	1.0242967090643213E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999963924451462	WITHOUT_CLASSIFICATION	3.6075548538475175E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999995927045263	WITHOUT_CLASSIFICATION	4.0729547367548785E-7	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978465640659	WITHOUT_CLASSIFICATION	2.15343593404461E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995976222479	WITHOUT_CLASSIFICATION	4.02377752095686E-7	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988057657604	WITHOUT_CLASSIFICATION	1.194234239558691E-6	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956669845013	WITHOUT_CLASSIFICATION	4.333015498729321E-6	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996039338397	WITHOUT_CLASSIFICATION	3.9606616023398165E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999996022988864	WITHOUT_CLASSIFICATION	3.9770111365973653E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999996022988864	WITHOUT_CLASSIFICATION	3.9770111365973653E-7	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999990559305336	WITHOUT_CLASSIFICATION	9.440694663898615E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999985282450834	WITHOUT_CLASSIFICATION	1.471754916655944E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999961402988465	WITHOUT_CLASSIFICATION	3.8597011534604335E-6	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999904571671338	WITHOUT_CLASSIFICATION	9.542832866326676E-6	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9934612046833715	WITHOUT_CLASSIFICATION	0.006538795316628452	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995688156648	WITHOUT_CLASSIFICATION	4.311843352538172E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995526092605	WITHOUT_CLASSIFICATION	4.473907395068573E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949409633706	WITHOUT_CLASSIFICATION	5.059036629301091E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999989478480559	WITHOUT_CLASSIFICATION	1.0521519441029598E-6	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999981949276193	WITHOUT_CLASSIFICATION	1.8050723806948962E-5	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995688156648	WITHOUT_CLASSIFICATION	4.311843352538172E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995526092605	WITHOUT_CLASSIFICATION	4.473907395068573E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949409633706	WITHOUT_CLASSIFICATION	5.059036629301091E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999982672830756	WITHOUT_CLASSIFICATION	1.7327169243637845E-6	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999907533391313	WITHOUT_CLASSIFICATION	9.246660868574621E-6	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999813143735103	WITHOUT_CLASSIFICATION	1.868562648969269E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999960171682226	WITHOUT_CLASSIFICATION	3.9828317774259455E-6	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999420776455	WITHOUT_CLASSIFICATION	5.7922354520544145E-8	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.999996454560184	WITHOUT_CLASSIFICATION	3.545439815902346E-6	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997730308747671	WITHOUT_CLASSIFICATION	2.269691252329031E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999996540609088	WITHOUT_CLASSIFICATION	3.459390910921152E-7	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999825899399979	WITHOUT_CLASSIFICATION	1.7410060002151205E-5	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999987529277535	WITHOUT_CLASSIFICATION	1.247072246423326E-6	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999997477022328	WITHOUT_CLASSIFICATION	2.522977672691241E-7	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998034583638891	WITHOUT_CLASSIFICATION	1.9654163611089389E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999990525377054	WITHOUT_CLASSIFICATION	9.474622946000056E-6	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999999806265748	WITHOUT_CLASSIFICATION	1.9373425198994976E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999431775627	WITHOUT_CLASSIFICATION	5.68224373099993E-7	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999878869697213	WITHOUT_CLASSIFICATION	1.2113030278698049E-5	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999902732741354	WITHOUT_CLASSIFICATION	9.726725864674275E-6	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999328102363173	WITHOUT_CLASSIFICATION	6.718976368267375E-5	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999996621884114	WITHOUT_CLASSIFICATION	3.378115886717347E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999916274159659	WITHOUT_CLASSIFICATION	8.372584034052865E-6	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999995108498873	WITHOUT_CLASSIFICATION	4.891501128196791E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9439233319797975	WITHOUT_CLASSIFICATION	0.056076668020202454	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999338128186127	WITHOUT_CLASSIFICATION	6.618718138737177E-5	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999953210164693	WITHOUT_CLASSIFICATION	4.678983530735457E-6	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999912631348	WITHOUT_CLASSIFICATION	8.7368652773275E-9	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999987480244473	WITHOUT_CLASSIFICATION	1.251975552600197E-6	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999742669248952	WITHOUT_CLASSIFICATION	2.5733075104852112E-5	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989149161487	WITHOUT_CLASSIFICATION	1.0850838513423396E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999993270678373	WITHOUT_CLASSIFICATION	6.729321626998568E-6	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995732140802	WITHOUT_CLASSIFICATION	4.267859198338375E-7	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673114945908	WITHOUT_CLASSIFICATION	3.268850540924524E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999999761259176	WITHOUT_CLASSIFICATION	2.3874082394851395E-7	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999999761259176	WITHOUT_CLASSIFICATION	2.3874082394851395E-7	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999995785423242	WITHOUT_CLASSIFICATION	4.2145767578457263E-7	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999998733284935	WITHOUT_CLASSIFICATION	1.2667150657915673E-7	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999644470580571	WITHOUT_CLASSIFICATION	3.555294194283662E-5	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999731670734473	WITHOUT_CLASSIFICATION	2.6832926552731427E-5	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999999980607476	WITHOUT_CLASSIFICATION	1.939252438929102E-9	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999997992910592	WITHOUT_CLASSIFICATION	2.0070894073617046E-7	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9999477344128241	WITHOUT_CLASSIFICATION	5.2265587175864796E-5	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999999223634112	WITHOUT_CLASSIFICATION	7.763658879855684E-8	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999977610564622	WITHOUT_CLASSIFICATION	2.23894353787719E-6	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994975187309	WITHOUT_CLASSIFICATION	5.024812691253022E-7	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993293691757	WITHOUT_CLASSIFICATION	6.706308242633634E-7	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963329763278	WITHOUT_CLASSIFICATION	3.6670236723108887E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986524282456	WITHOUT_CLASSIFICATION	1.347571754372308E-6	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987341049911	WITHOUT_CLASSIFICATION	1.2658950088717199E-6	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961873211894	WITHOUT_CLASSIFICATION	3.812678810413538E-6	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993736782791	WITHOUT_CLASSIFICATION	6.263217210384778E-7	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990501254433	WITHOUT_CLASSIFICATION	9.49874556718381E-7	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980422378683	WITHOUT_CLASSIFICATION	1.9577621318075562E-6	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992374749118	WITHOUT_CLASSIFICATION	7.625250880980172E-7	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996748007541	WITHOUT_CLASSIFICATION	3.2519924585886895E-7	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999991309488838	WITHOUT_CLASSIFICATION	8.69051116261917E-7	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9881200538007316	WITHOUT_CLASSIFICATION	0.011879946199268486	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997909663621172	WITHOUT_CLASSIFICATION	2.0903363788290718E-4	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999890905549	WITHOUT_CLASSIFICATION	1.0909445124611409E-8	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999977918703	WITHOUT_CLASSIFICATION	2.208129729511813E-9	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999996049623955	WITHOUT_CLASSIFICATION	3.950376045230474E-7	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.999999983624409	WITHOUT_CLASSIFICATION	1.6375590970791683E-8	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999986806049568	WITHOUT_CLASSIFICATION	1.3193950432349629E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997909663621172	WITHOUT_CLASSIFICATION	2.0903363788290718E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997909663621172	WITHOUT_CLASSIFICATION	2.0903363788290718E-4	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999955433838038	WITHOUT_CLASSIFICATION	4.456616196163379E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999989196059437	WITHOUT_CLASSIFICATION	1.0803940563399032E-6	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999865155146699	WITHOUT_CLASSIFICATION	1.3484485330092829E-5	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999994369115046	WITHOUT_CLASSIFICATION	5.630884954168125E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999995402111061	WITHOUT_CLASSIFICATION	4.597888939031178E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999916274159659	WITHOUT_CLASSIFICATION	8.372584034052865E-6	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999962101507	WITHOUT_CLASSIFICATION	3.789849399910362E-9	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999654425657517	WITHOUT_CLASSIFICATION	3.455743424833851E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999991237512182	WITHOUT_CLASSIFICATION	8.762487818050005E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963503286621	WITHOUT_CLASSIFICATION	3.649671337811665E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999999184470044	WITHOUT_CLASSIFICATION	8.15529955844901E-8	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929190654501	WITHOUT_CLASSIFICATION	7.080934550025813E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999999439846716	WITHOUT_CLASSIFICATION	5.601532839360453E-7	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999999439846716	WITHOUT_CLASSIFICATION	5.601532839360453E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997781018232	WITHOUT_CLASSIFICATION	2.2189817672682785E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997781018232	WITHOUT_CLASSIFICATION	2.2189817672682785E-7	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963120151255	WITHOUT_CLASSIFICATION	3.6879848745089114E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997028407741	WITHOUT_CLASSIFICATION	2.9715922590677944E-6	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999995685271265	WITHOUT_CLASSIFICATION	4.314728735052319E-7	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953601988835	WITHOUT_CLASSIFICATION	4.639801116470971E-6	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999999945328405	WITHOUT_CLASSIFICATION	5.4671595100334955E-9	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9990281033890652	WITHOUT_CLASSIFICATION	9.718966109348465E-4	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999370281649226	WITHOUT_CLASSIFICATION	6.297183507740437E-5	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987029134273	WITHOUT_CLASSIFICATION	1.2970865727123905E-6	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999935806500574	WITHOUT_CLASSIFICATION	6.419349942676615E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999998825194262	WITHOUT_CLASSIFICATION	1.1748057379569188E-7	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998010908036	WITHOUT_CLASSIFICATION	1.9890919645773864E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999653597121099	WITHOUT_CLASSIFICATION	3.464028789011593E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999998628429116	WITHOUT_CLASSIFICATION	1.3715708832820408E-7	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999998136863683	WITHOUT_CLASSIFICATION	1.863136316829277E-7	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999964231660375	WITHOUT_CLASSIFICATION	3.576833962539071E-6	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999924407416074	WITHOUT_CLASSIFICATION	7.559258392553094E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.999998750505828	WITHOUT_CLASSIFICATION	1.2494941720955052E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.999998750505828	WITHOUT_CLASSIFICATION	1.2494941720955052E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999165083823	WITHOUT_CLASSIFICATION	8.349161770863129E-8	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9997543074832511	WITHOUT_CLASSIFICATION	2.456925167488791E-4	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999814787945	WITHOUT_CLASSIFICATION	1.8521205464199817E-8	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999000808708842	WITHOUT_CLASSIFICATION	9.99191291157425E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991571176903	WITHOUT_CLASSIFICATION	8.428823096935109E-6	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991843100878	WITHOUT_CLASSIFICATION	8.156899121603237E-7	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999993852147682	WITHOUT_CLASSIFICATION	6.147852318546604E-7	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999555155082273	WITHOUT_CLASSIFICATION	4.448449177285366E-5	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999938691864759	WITHOUT_CLASSIFICATION	6.130813524113032E-6	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999927072476	WITHOUT_CLASSIFICATION	7.292752382160515E-9	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999998463316556	WITHOUT_CLASSIFICATION	1.5366834450294972E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999551254040302	WITHOUT_CLASSIFICATION	4.487459596977625E-5	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604464083265	WITHOUT_CLASSIFICATION	3.955359167341217E-5	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9997774297992704	WITHOUT_CLASSIFICATION	2.225702007296349E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999999800895868	WITHOUT_CLASSIFICATION	1.9910413201455466E-7	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999023119739455	WITHOUT_CLASSIFICATION	9.768802605453088E-5	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999266850336	WITHOUT_CLASSIFICATION	7.331496650377801E-8	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999995038642683	WITHOUT_CLASSIFICATION	4.961357316802633E-7	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999991897474968	WITHOUT_CLASSIFICATION	8.102525033030527E-7	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999996419845134	WITHOUT_CLASSIFICATION	3.5801548655568046E-7	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999958720263	WITHOUT_CLASSIFICATION	4.127973667342674E-9	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999938821992839	WITHOUT_CLASSIFICATION	6.117800716188592E-6	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992884580511	WITHOUT_CLASSIFICATION	7.1154194900099E-7	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999414156175	WITHOUT_CLASSIFICATION	5.858438243559598E-8	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999996081952638	WITHOUT_CLASSIFICATION	3.918047362182628E-7	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999967472349791	WITHOUT_CLASSIFICATION	3.2527650208786728E-6	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999988777544331	WITHOUT_CLASSIFICATION	1.1222455669072383E-6	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999225237719308	WITHOUT_CLASSIFICATION	7.747622806920767E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999745234193	WITHOUT_CLASSIFICATION	2.5476580788382463E-8	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999974738252557	WITHOUT_CLASSIFICATION	2.5261747442704444E-6	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999997823325161	WITHOUT_CLASSIFICATION	2.1766748387316324E-7	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999981749020974	WITHOUT_CLASSIFICATION	1.825097902667579E-6	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998554864268828	WITHOUT_CLASSIFICATION	1.4451357311717167E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999969294917468	WITHOUT_CLASSIFICATION	3.07050825317091E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998221141081881	WITHOUT_CLASSIFICATION	1.7788589181201307E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999949311440881	WITHOUT_CLASSIFICATION	5.068855911833809E-6	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999998705553933	WITHOUT_CLASSIFICATION	1.2944460669347153E-6	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999950159484875	WITHOUT_CLASSIFICATION	4.984051512576206E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999935069958145	WITHOUT_CLASSIFICATION	6.493004185526611E-6	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999964310203356	WITHOUT_CLASSIFICATION	3.568979664395051E-6	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999994231938014	WITHOUT_CLASSIFICATION	5.768061986086391E-6	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999998413559738	WITHOUT_CLASSIFICATION	1.5864402622576847E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.999953049843088	WITHOUT_CLASSIFICATION	4.695015691204586E-5	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999984279589453	WITHOUT_CLASSIFICATION	1.572041054762334E-6	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999999108797145	WITHOUT_CLASSIFICATION	8.912028548853101E-7	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999790935746864	WITHOUT_CLASSIFICATION	2.0906425313590654E-5	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999988124279166	WITHOUT_CLASSIFICATION	1.1875720834121314E-6	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999848325483031	WITHOUT_CLASSIFICATION	1.5167451696957343E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999972680112578	WITHOUT_CLASSIFICATION	2.7319887422536494E-6	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999996090750156	WITHOUT_CLASSIFICATION	3.909249843798272E-7	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999997751441361	WITHOUT_CLASSIFICATION	2.2485586380399909E-7	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999955978126388	WITHOUT_CLASSIFICATION	4.402187361205556E-6	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999998264805348	WITHOUT_CLASSIFICATION	1.73519465177518E-7	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998935208130868	WITHOUT_CLASSIFICATION	1.0647918691320352E-4	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999993641776097	WITHOUT_CLASSIFICATION	6.358223902281315E-7	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999931912116002	WITHOUT_CLASSIFICATION	6.808788399695349E-6	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999999372594096	WITHOUT_CLASSIFICATION	6.274059043166988E-8	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999988608419544	WITHOUT_CLASSIFICATION	1.139158045575148E-6	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999992733286562	WITHOUT_CLASSIFICATION	7.266713438286911E-7	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999815532020033	WITHOUT_CLASSIFICATION	1.8446797996715662E-5	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999984082810776	WITHOUT_CLASSIFICATION	1.591718922527489E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999996582225669	WITHOUT_CLASSIFICATION	3.4177743303057724E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999998399697811	WITHOUT_CLASSIFICATION	1.600302187410031E-7	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999956314498746	WITHOUT_CLASSIFICATION	4.368550125426231E-6	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999998211379869	WITHOUT_CLASSIFICATION	1.788620131397693E-7	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999961240361667	WITHOUT_CLASSIFICATION	3.875963833281202E-6	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999995247772351	WITHOUT_CLASSIFICATION	4.752227649924414E-7	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999904566097457	WITHOUT_CLASSIFICATION	9.543390254225504E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999222189465466	WITHOUT_CLASSIFICATION	7.778105345329903E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999222189465466	WITHOUT_CLASSIFICATION	7.778105345329903E-5	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999978904758814	WITHOUT_CLASSIFICATION	2.10952411857757E-6	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999994947681329	WITHOUT_CLASSIFICATION	5.052318670884571E-7	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999998625096186	WITHOUT_CLASSIFICATION	1.3749038151636383E-7	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999958134008426	WITHOUT_CLASSIFICATION	4.186599157441135E-6	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999471910722	WITHOUT_CLASSIFICATION	5.280892778563737E-8	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999999900394193	WITHOUT_CLASSIFICATION	9.960580658098489E-9	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999902941491	WITHOUT_CLASSIFICATION	9.705850937064676E-9	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999953925247232	WITHOUT_CLASSIFICATION	4.607475276773052E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999953415082895	WITHOUT_CLASSIFICATION	4.658491710565451E-6	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999999768241468	WITHOUT_CLASSIFICATION	2.3175853193404094E-7	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999922153678451	WITHOUT_CLASSIFICATION	7.784632154869913E-6	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999983408312377	WITHOUT_CLASSIFICATION	1.6591687622086336E-6	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999983096938907	WITHOUT_CLASSIFICATION	1.6903061093844799E-6	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999998532822221	WITHOUT_CLASSIFICATION	1.467177779449555E-7	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999953978436788	WITHOUT_CLASSIFICATION	4.602156321186282E-5	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999996848573098	WITHOUT_CLASSIFICATION	3.151426901830148E-7	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999905227877995	WITHOUT_CLASSIFICATION	9.47721220051134E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9995918002795939	WITHOUT_CLASSIFICATION	4.0819972040605945E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9997111992796622	WITHOUT_CLASSIFICATION	2.88800720337809E-4	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999999931556406	WITHOUT_CLASSIFICATION	6.8443594399033064E-9	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.999998769669652	WITHOUT_CLASSIFICATION	1.2303303480858767E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999993373996914	WITHOUT_CLASSIFICATION	6.626003086732689E-7	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999145866171953	WITHOUT_CLASSIFICATION	8.541338280464363E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9996932306418521	WITHOUT_CLASSIFICATION	3.067693581479545E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999958219435283	WITHOUT_CLASSIFICATION	4.178056471684136E-6	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999770356628446	WITHOUT_CLASSIFICATION	2.296433715540827E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999976265649908	WITHOUT_CLASSIFICATION	2.3734350091248364E-6	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997113950617135	WITHOUT_CLASSIFICATION	2.8860493828652387E-4	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999988561098777	WITHOUT_CLASSIFICATION	1.1438901222425673E-6	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999250924455	WITHOUT_CLASSIFICATION	7.490755452592946E-8	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999992803513754	WITHOUT_CLASSIFICATION	7.196486245630358E-7	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999994433969771	WITHOUT_CLASSIFICATION	5.566030229746874E-7	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999982381284769	WITHOUT_CLASSIFICATION	1.7618715230607134E-6	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.999997526643375	WITHOUT_CLASSIFICATION	2.4733566250555425E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999935870518166	WITHOUT_CLASSIFICATION	6.4129481833735526E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999935870518166	WITHOUT_CLASSIFICATION	6.4129481833735526E-6	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999952989499772	WITHOUT_CLASSIFICATION	4.7010500228687635E-6	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999605544192613	WITHOUT_CLASSIFICATION	3.944558073858031E-5	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999995648783069	WITHOUT_CLASSIFICATION	4.351216931843273E-7	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999991060533187	WITHOUT_CLASSIFICATION	8.939466812947831E-7	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999998872356	WITHOUT_CLASSIFICATION	1.1276431833116582E-10	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999926979548126	WITHOUT_CLASSIFICATION	7.302045187436343E-6	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998545677985944	WITHOUT_CLASSIFICATION	1.4543220140559893E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999872264706204	WITHOUT_CLASSIFICATION	1.2773529379515462E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9996385129778074	WITHOUT_CLASSIFICATION	3.614870221927063E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999975331311937	WITHOUT_CLASSIFICATION	2.4668688064289355E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999886532148407	WITHOUT_CLASSIFICATION	1.1346785159348317E-5	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999941861932797	WITHOUT_CLASSIFICATION	5.813806720281694E-6	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999793212553458	WITHOUT_CLASSIFICATION	2.0678744654133854E-5	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999994009584939	WITHOUT_CLASSIFICATION	5.990415060509342E-7	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999999635829257	WITHOUT_CLASSIFICATION	3.641707429987649E-7	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999913862825189	WITHOUT_CLASSIFICATION	8.613717480992665E-6	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999913862825189	WITHOUT_CLASSIFICATION	8.613717480992665E-6	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999976679432666	WITHOUT_CLASSIFICATION	2.3320567332758174E-6	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999884767288454	WITHOUT_CLASSIFICATION	1.1523271154557723E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999604497775956	WITHOUT_CLASSIFICATION	3.955022240440534E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999992852615288	WITHOUT_CLASSIFICATION	7.147384712845252E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999653597121099	WITHOUT_CLASSIFICATION	3.464028789011593E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994480536750863	WITHOUT_CLASSIFICATION	5.51946324913598E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999993553940616	WITHOUT_CLASSIFICATION	6.446059384573511E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999929081196959	WITHOUT_CLASSIFICATION	7.091880304133722E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999929081196959	WITHOUT_CLASSIFICATION	7.091880304133722E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999917989398804	WITHOUT_CLASSIFICATION	8.201060119522663E-6	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999739194327	WITHOUT_CLASSIFICATION	2.60805671888339E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999934133173589	WITHOUT_CLASSIFICATION	6.5866826411053506E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999961157526231	WITHOUT_CLASSIFICATION	3.884247376842624E-6	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999886195566684	WITHOUT_CLASSIFICATION	1.1380443331550476E-5	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999538501290262	WITHOUT_CLASSIFICATION	4.614987097384515E-5	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999997061489123	WITHOUT_CLASSIFICATION	2.938510877161352E-7	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999997434832572	WITHOUT_CLASSIFICATION	2.5651674280376113E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999310646216	WITHOUT_CLASSIFICATION	6.893537840645209E-8	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999994283798678	WITHOUT_CLASSIFICATION	5.716201322628713E-7	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999927965547503	WITHOUT_CLASSIFICATION	7.203445249708968E-5	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999926903747702	WITHOUT_CLASSIFICATION	7.309625229766341E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999999854337039	WITHOUT_CLASSIFICATION	1.4566296097021161E-7	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999910202099169	WITHOUT_CLASSIFICATION	8.979790083018539E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999877020285168	WITHOUT_CLASSIFICATION	1.2297971483027583E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999984498850067	WITHOUT_CLASSIFICATION	1.5501149932774366E-6	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999990323185485	WITHOUT_CLASSIFICATION	9.676814515103683E-7	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999969301926831	WITHOUT_CLASSIFICATION	3.069807316909464E-6	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.99991049666938	WITHOUT_CLASSIFICATION	8.950333061998267E-5	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999685088665549	WITHOUT_CLASSIFICATION	3.149113344514156E-5	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999971620417597	WITHOUT_CLASSIFICATION	2.837958240224494E-6	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999956790922596	WITHOUT_CLASSIFICATION	4.3209077404406055E-6	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999882395996218	WITHOUT_CLASSIFICATION	1.1760400378327424E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999997328987201	WITHOUT_CLASSIFICATION	2.671012798329355E-7	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999966131007093	WITHOUT_CLASSIFICATION	3.3868992906948528E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999788416511665	WITHOUT_CLASSIFICATION	2.1158348833656927E-5	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999999944555257	WITHOUT_CLASSIFICATION	5.544474322393924E-9	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999999999597796	WITHOUT_CLASSIFICATION	4.0220403593860226E-10	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999998995815568	WITHOUT_CLASSIFICATION	1.0041844327983034E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999701554234	WITHOUT_CLASSIFICATION	2.984457651723442E-8	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999956782644489	WITHOUT_CLASSIFICATION	4.321735551057653E-6	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999990158564112	WITHOUT_CLASSIFICATION	9.84143588903204E-7	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9334646019154117	WITHOUT_CLASSIFICATION	0.06653539808458828	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999993685367509	WITHOUT_CLASSIFICATION	6.314632490958996E-7	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999993287784523	WITHOUT_CLASSIFICATION	6.712215475676665E-7	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999850306708162	WITHOUT_CLASSIFICATION	1.4969329183729312E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999910137611802	WITHOUT_CLASSIFICATION	8.986238819912292E-6	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999963658953052	WITHOUT_CLASSIFICATION	3.6341046948212102E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999996965211709	WITHOUT_CLASSIFICATION	3.0347882899691437E-7	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999951778431362	WITHOUT_CLASSIFICATION	4.8221568638604365E-6	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999998392355	WITHOUT_CLASSIFICATION	1.6076449089553323E-9	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999683984631893	WITHOUT_CLASSIFICATION	3.160153681070211E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999976296962547	WITHOUT_CLASSIFICATION	2.3703037453005433E-6	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999981022103	WITHOUT_CLASSIFICATION	1.8977896912623798E-9	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999987832810978	WITHOUT_CLASSIFICATION	1.2167189021486203E-6	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999994735473876	WITHOUT_CLASSIFICATION	5.264526124092732E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999996965211709	WITHOUT_CLASSIFICATION	3.0347882899691437E-7	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999951778431362	WITHOUT_CLASSIFICATION	4.8221568638604365E-6	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999992917247941	WITHOUT_CLASSIFICATION	7.082752060277846E-7	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999993559085133	WITHOUT_CLASSIFICATION	6.440914866482106E-7	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999995752841367	WITHOUT_CLASSIFICATION	4.2471586329857545E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999966249522458	WITHOUT_CLASSIFICATION	3.375047754077733E-6	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999988211955148	WITHOUT_CLASSIFICATION	1.1788044853103212E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999537677426299	WITHOUT_CLASSIFICATION	4.6232257370109505E-5	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.999852299358959	WITHOUT_CLASSIFICATION	1.4770064104103065E-4	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999858246186868	WITHOUT_CLASSIFICATION	1.417538131316117E-5	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999558426678	WITHOUT_CLASSIFICATION	4.415733226711507E-8	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6054554886502049	WITHOUT_CLASSIFICATION	0.39454451134979507	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999866418223	WITHOUT_CLASSIFICATION	1.3358177564558844E-8	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6054554886502049	WITHOUT_CLASSIFICATION	0.39454451134979507	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999996157599498	WITHOUT_CLASSIFICATION	3.842400501942869E-6	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999998173787076	WITHOUT_CLASSIFICATION	1.8262129249071446E-7	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999799566364648	WITHOUT_CLASSIFICATION	2.0043363535189606E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997067556188	WITHOUT_CLASSIFICATION	2.9324438126055433E-7	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998482387807017	WITHOUT_CLASSIFICATION	1.5176121929828508E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999675292103245	WITHOUT_CLASSIFICATION	3.247078967550546E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999675292103245	WITHOUT_CLASSIFICATION	3.247078967550546E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999877634529081	WITHOUT_CLASSIFICATION	1.2236547091968241E-5	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999962642974878	WITHOUT_CLASSIFICATION	3.7357025122706493E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999910129241517	WITHOUT_CLASSIFICATION	8.987075848307756E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998808941098501	WITHOUT_CLASSIFICATION	1.191058901499467E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999944999458825	WITHOUT_CLASSIFICATION	5.500054117440893E-6	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999999450467929	WITHOUT_CLASSIFICATION	5.495320704748E-8	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999931228626809	WITHOUT_CLASSIFICATION	6.877137319035967E-6	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999974413638006	WITHOUT_CLASSIFICATION	2.5586361993913903E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999818195278147	WITHOUT_CLASSIFICATION	1.818047218529576E-5	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9999910365223859	WITHOUT_CLASSIFICATION	8.963477614173412E-6	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999986451444974	WITHOUT_CLASSIFICATION	1.3548555024860473E-6	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999737123050799	WITHOUT_CLASSIFICATION	2.628769492010405E-5	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999664586907145	WITHOUT_CLASSIFICATION	3.3541309285417186E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999996355699045	WITHOUT_CLASSIFICATION	3.644300955393699E-7	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999999580605142	WITHOUT_CLASSIFICATION	4.193948579841698E-7	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999999294639307	WITHOUT_CLASSIFICATION	7.053606929490684E-7	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999941013856847	WITHOUT_CLASSIFICATION	5.8986143154380025E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999997488049843	WITHOUT_CLASSIFICATION	2.511950156980101E-6	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999973163435207	WITHOUT_CLASSIFICATION	2.6836564791328605E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999141280923941	WITHOUT_CLASSIFICATION	8.587190760587386E-5	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999995960318403	WITHOUT_CLASSIFICATION	4.039681597322894E-7	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999920380684107	WITHOUT_CLASSIFICATION	7.961931589254073E-6	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999987900708553	WITHOUT_CLASSIFICATION	1.2099291446326107E-6	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999998649716162	WITHOUT_CLASSIFICATION	1.350283836931765E-7	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999995983206481	WITHOUT_CLASSIFICATION	4.01679351919031E-7	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999756239770257	WITHOUT_CLASSIFICATION	2.4376022974432935E-5	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999995603980734	WITHOUT_CLASSIFICATION	4.3960192662127584E-7	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9993030035398317	WITHOUT_CLASSIFICATION	6.969964601682523E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999903960953711	WITHOUT_CLASSIFICATION	9.60390462894033E-6	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999981349219785	WITHOUT_CLASSIFICATION	1.8650780214027861E-6	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9909396932878283	WITHOUT_CLASSIFICATION	0.009060306712171768	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999390906997329	WITHOUT_CLASSIFICATION	6.090930026705947E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999931228626809	WITHOUT_CLASSIFICATION	6.877137319035967E-6	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999017958993309	WITHOUT_CLASSIFICATION	9.820410066899138E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999974897547714	WITHOUT_CLASSIFICATION	2.510245228475077E-6	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9239326396100958	WITHOUT_CLASSIFICATION	0.07606736038990428	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999866839168821	WITHOUT_CLASSIFICATION	1.3316083117965416E-5	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999986262724546	WITHOUT_CLASSIFICATION	1.3737275453977793E-6	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999998463667286	WITHOUT_CLASSIFICATION	1.5363327143723233E-7	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998808941098501	WITHOUT_CLASSIFICATION	1.191058901499467E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998808941098501	WITHOUT_CLASSIFICATION	1.191058901499467E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999999712918622	WITHOUT_CLASSIFICATION	2.8708137795989334E-8	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.999998174275373	WITHOUT_CLASSIFICATION	1.8257246270062873E-6	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998927700622864	WITHOUT_CLASSIFICATION	1.0722993771355744E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999999277673353	WITHOUT_CLASSIFICATION	7.223266470024663E-8	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999999281852457	WITHOUT_CLASSIFICATION	7.181475432650061E-8	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999968168655743	WITHOUT_CLASSIFICATION	3.1831344256681645E-6	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999999331910346	WITHOUT_CLASSIFICATION	6.680896541484428E-7	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999998311758624	WITHOUT_CLASSIFICATION	1.6882413761767617E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999957461538244	WITHOUT_CLASSIFICATION	4.25384617565734E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999973419364466	WITHOUT_CLASSIFICATION	2.6580635534096415E-6	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999994640800667	WITHOUT_CLASSIFICATION	5.3591993329373715E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999524343208923	WITHOUT_CLASSIFICATION	4.756567910769297E-5	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999987497805224	WITHOUT_CLASSIFICATION	1.2502194776549961E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999973419364466	WITHOUT_CLASSIFICATION	2.6580635534096415E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999992395989609	WITHOUT_CLASSIFICATION	7.604010391983499E-7	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999178951644906	WITHOUT_CLASSIFICATION	8.210483550934223E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999904295187552	WITHOUT_CLASSIFICATION	9.570481244766839E-6	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.7005452663810464	WITHOUT_CLASSIFICATION	0.29945473361895353	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999524343208923	WITHOUT_CLASSIFICATION	4.756567910769297E-5	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999007154729501	WITHOUT_CLASSIFICATION	9.92845270499565E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999961622410328	WITHOUT_CLASSIFICATION	3.837758967183583E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998455450041	WITHOUT_CLASSIFICATION	1.5445499590127423E-7	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999998578712983	WITHOUT_CLASSIFICATION	1.4212870169438947E-6	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999441137462478	WITHOUT_CLASSIFICATION	5.588625375204009E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.999999733069172	WITHOUT_CLASSIFICATION	2.6693082807090884E-7	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999996941387403	WITHOUT_CLASSIFICATION	3.05861259635015E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999872499237055	WITHOUT_CLASSIFICATION	1.2750076294566413E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999994287194554	WITHOUT_CLASSIFICATION	5.71280544602295E-7	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999997065792592	WITHOUT_CLASSIFICATION	2.934207407292465E-7	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9976640764443361	WITHOUT_CLASSIFICATION	0.0023359235556639326	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999995430919255	WITHOUT_CLASSIFICATION	4.56908074554201E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999973419364466	WITHOUT_CLASSIFICATION	2.6580635534096415E-6	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999007154729501	WITHOUT_CLASSIFICATION	9.92845270499565E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998455450041	WITHOUT_CLASSIFICATION	1.5445499590127423E-7	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.999989475700071	WITHOUT_CLASSIFICATION	1.0524299929063625E-5	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.99998296872706	WITHOUT_CLASSIFICATION	1.7031272939870154E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999307981475	WITHOUT_CLASSIFICATION	6.920185248937562E-8	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999524343208923	WITHOUT_CLASSIFICATION	4.756567910769297E-5	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999997504939747	WITHOUT_CLASSIFICATION	2.4950602537194286E-7	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999960913343852	WITHOUT_CLASSIFICATION	3.908665614749344E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999914269958019	WITHOUT_CLASSIFICATION	8.573004198171728E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999968947487324	WITHOUT_CLASSIFICATION	3.1052512675474574E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999872499237055	WITHOUT_CLASSIFICATION	1.2750076294566413E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999992395989609	WITHOUT_CLASSIFICATION	7.604010391983499E-7	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999736215461617	WITHOUT_CLASSIFICATION	2.6378453838421193E-5	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999969375833763	WITHOUT_CLASSIFICATION	3.0624166237239205E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999983747573663	WITHOUT_CLASSIFICATION	1.6252426336853702E-6	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999999958417782	WITHOUT_CLASSIFICATION	4.158221714973377E-9	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999999763820769	WITHOUT_CLASSIFICATION	2.3617923086180413E-8	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999998946665786	WITHOUT_CLASSIFICATION	1.0533342139736728E-7	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.999962185174944	WITHOUT_CLASSIFICATION	3.781482505609776E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997067556188	WITHOUT_CLASSIFICATION	2.9324438126055433E-7	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999985034186	WITHOUT_CLASSIFICATION	1.4965814059479947E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848255562388	WITHOUT_CLASSIFICATION	1.5174443761174854E-5	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998822511681	WITHOUT_CLASSIFICATION	1.1774883196610223E-7	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.99851764383297	WITHOUT_CLASSIFICATION	0.0014823561670299474	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999519655563898	WITHOUT_CLASSIFICATION	4.803444361020627E-4	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9998855965508725	WITHOUT_CLASSIFICATION	1.1440344912748375E-4	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999989953818738	WITHOUT_CLASSIFICATION	1.0046181261880023E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999974028004884	WITHOUT_CLASSIFICATION	2.597199511611084E-6	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999999786836559	WITHOUT_CLASSIFICATION	2.1316344110311962E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999968947487324	WITHOUT_CLASSIFICATION	3.1052512675474574E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848255562388	WITHOUT_CLASSIFICATION	1.5174443761174854E-5	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999913935097803	WITHOUT_CLASSIFICATION	8.606490219691026E-6	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999929878546658	WITHOUT_CLASSIFICATION	7.012145334215594E-6	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999924642342765	WITHOUT_CLASSIFICATION	7.53576572358733E-6	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999916412620667	WITHOUT_CLASSIFICATION	8.358737933290838E-6	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999963346926473	WITHOUT_CLASSIFICATION	3.6653073527895853E-6	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999992695039502	WITHOUT_CLASSIFICATION	7.304960497175232E-7	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999998109489146	WITHOUT_CLASSIFICATION	1.890510854018703E-6	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9997980034721621	WITHOUT_CLASSIFICATION	2.0199652783801345E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999943203460013	WITHOUT_CLASSIFICATION	5.679653998653386E-6	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9991359287855616	WITHOUT_CLASSIFICATION	8.640712144384177E-4	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999959732139896	WITHOUT_CLASSIFICATION	4.026786010418143E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999741129028435	WITHOUT_CLASSIFICATION	2.5887097156451935E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999995504481881	WITHOUT_CLASSIFICATION	4.4955181186677597E-7	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998087856362738	WITHOUT_CLASSIFICATION	1.912143637260372E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999328125253728	WITHOUT_CLASSIFICATION	6.71874746271598E-5	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999976237709831	WITHOUT_CLASSIFICATION	2.376229016862083E-6	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999972487450834	WITHOUT_CLASSIFICATION	2.751254916600915E-6	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999540305172	WITHOUT_CLASSIFICATION	4.596948270474334E-8	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999991968569563	WITHOUT_CLASSIFICATION	8.031430437313025E-7	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999887045806864	WITHOUT_CLASSIFICATION	1.1295419313496811E-5	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999931615412744	WITHOUT_CLASSIFICATION	6.838458725592158E-6	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999999326466062	WITHOUT_CLASSIFICATION	6.735339382194536E-8	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999997901667261	WITHOUT_CLASSIFICATION	2.09833273819303E-7	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999750240587	WITHOUT_CLASSIFICATION	2.49759413458386E-8	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999249405498	WITHOUT_CLASSIFICATION	7.505945015878835E-8	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5764265757282121	DEFECT	0.4235734242717878	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999935919339507	WITHOUT_CLASSIFICATION	6.408066049319314E-6	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999676487105829	WITHOUT_CLASSIFICATION	3.235128941719817E-5	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999760213851905	WITHOUT_CLASSIFICATION	2.3978614809540087E-5	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9933281603947038	WITHOUT_CLASSIFICATION	0.00667183960529618	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999972414159464	WITHOUT_CLASSIFICATION	2.758584053754915E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999927455067756	WITHOUT_CLASSIFICATION	7.254493224389935E-6	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999711137957	WITHOUT_CLASSIFICATION	2.888620434746101E-8	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999904984237459	WITHOUT_CLASSIFICATION	9.501576254151699E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999895775681128	WITHOUT_CLASSIFICATION	1.0422431887178557E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999985815902742	WITHOUT_CLASSIFICATION	1.4184097256918712E-6	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998390411642	WITHOUT_CLASSIFICATION	1.6095883582211725E-7	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998777654893	WITHOUT_CLASSIFICATION	1.2223451079826437E-7	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999985815902742	WITHOUT_CLASSIFICATION	1.4184097256918712E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999895775681128	WITHOUT_CLASSIFICATION	1.0422431887178557E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998390411642	WITHOUT_CLASSIFICATION	1.6095883582211725E-7	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999943911363144	WITHOUT_CLASSIFICATION	5.608863685580343E-6	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999999553915194	WITHOUT_CLASSIFICATION	4.460848061665462E-8	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999892338589749	WITHOUT_CLASSIFICATION	1.0766141025170572E-5	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999619592850313	WITHOUT_CLASSIFICATION	3.804071496870008E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997697222504	WITHOUT_CLASSIFICATION	2.3027774962895225E-7	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7068130220391331	DEFECT	0.29318697796086696	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998869044630179	WITHOUT_CLASSIFICATION	1.1309553698208365E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999877580854304	WITHOUT_CLASSIFICATION	1.2241914569684393E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999902314798	WITHOUT_CLASSIFICATION	9.768520165707114E-9	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999708459168617	WITHOUT_CLASSIFICATION	2.9154083138354124E-5	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999947499891035	WITHOUT_CLASSIFICATION	5.2500108964795175E-6	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999997703467571	WITHOUT_CLASSIFICATION	2.2965324277035688E-7	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997897564399835	WITHOUT_CLASSIFICATION	2.102435600166531E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999480922616922	WITHOUT_CLASSIFICATION	5.1907738307717964E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999999170193553	WITHOUT_CLASSIFICATION	8.29806447754498E-8	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999998957303161	WITHOUT_CLASSIFICATION	1.0426968383140233E-7	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997567746259	WITHOUT_CLASSIFICATION	2.432253740728879E-7	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999986546947279	WITHOUT_CLASSIFICATION	1.3453052721210485E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999992794979	WITHOUT_CLASSIFICATION	7.205020588430156E-10	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999800097189	WITHOUT_CLASSIFICATION	1.9990281180423483E-8	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999995902380151	WITHOUT_CLASSIFICATION	4.0976198481596244E-7	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999958486833	WITHOUT_CLASSIFICATION	4.151316743249475E-9	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999910013881306	WITHOUT_CLASSIFICATION	8.998611869355763E-6	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999971148608	WITHOUT_CLASSIFICATION	2.8851392772266437E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999782841409	WITHOUT_CLASSIFICATION	2.1715859169108314E-8	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999782841409	WITHOUT_CLASSIFICATION	2.1715859169108314E-8	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999406206608	WITHOUT_CLASSIFICATION	5.937933912913702E-8	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999406206608	WITHOUT_CLASSIFICATION	5.937933912913702E-8	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999998708742044	WITHOUT_CLASSIFICATION	1.291257957057544E-7	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997567746259	WITHOUT_CLASSIFICATION	2.432253740728879E-7	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999999607001329	WITHOUT_CLASSIFICATION	3.9299867164937255E-8	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999161888122	WITHOUT_CLASSIFICATION	8.381118772493088E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.99999921935923	WITHOUT_CLASSIFICATION	7.806407699323179E-7	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.99999921935923	WITHOUT_CLASSIFICATION	7.806407699323179E-7	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999993550813137	WITHOUT_CLASSIFICATION	6.449186863640257E-7	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999996797638905	WITHOUT_CLASSIFICATION	3.202361095260334E-7	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999873840557	WITHOUT_CLASSIFICATION	1.2615944259287202E-8	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.999999593003897	WITHOUT_CLASSIFICATION	4.0699610307415374E-7	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999591027754708	WITHOUT_CLASSIFICATION	4.089722452912847E-5	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9980592255852914	WITHOUT_CLASSIFICATION	0.0019407744147086601	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999438437474801	WITHOUT_CLASSIFICATION	5.6156252519895174E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999258511271356	WITHOUT_CLASSIFICATION	7.414887286435935E-5	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999311524513095	WITHOUT_CLASSIFICATION	6.884754869054417E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999986937751396	WITHOUT_CLASSIFICATION	1.3062248603430876E-6	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999862116659382	WITHOUT_CLASSIFICATION	1.3788334061781846E-5	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999937354778443	WITHOUT_CLASSIFICATION	6.2645221557464706E-6	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999998732369515	WITHOUT_CLASSIFICATION	1.2676304850156238E-6	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999972365849443	WITHOUT_CLASSIFICATION	2.763415055663654E-6	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999995282745512	WITHOUT_CLASSIFICATION	4.7172544888109834E-7	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999984481655987	WITHOUT_CLASSIFICATION	1.551834401387625E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876733796348	WITHOUT_CLASSIFICATION	1.2326620365175548E-5	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999989908816789	WITHOUT_CLASSIFICATION	1.0091183212061647E-6	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999869498116	WITHOUT_CLASSIFICATION	1.3050188499354483E-8	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999483295842093	WITHOUT_CLASSIFICATION	5.16704157907047E-5	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999998595693837	WITHOUT_CLASSIFICATION	1.4043061631207935E-6	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999756114145966	WITHOUT_CLASSIFICATION	2.4388585403413503E-5	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999987234773041	WITHOUT_CLASSIFICATION	1.2765226958535308E-6	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999998391820595	WITHOUT_CLASSIFICATION	1.608179405098884E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999731670734473	WITHOUT_CLASSIFICATION	2.6832926552731427E-5	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999266059045	WITHOUT_CLASSIFICATION	7.339409546339517E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848255562388	WITHOUT_CLASSIFICATION	1.5174443761174854E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999741129028435	WITHOUT_CLASSIFICATION	2.5887097156451935E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999982005955552	WITHOUT_CLASSIFICATION	1.7994044448567271E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999092486684021	WITHOUT_CLASSIFICATION	9.075133159774575E-5	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987136265157	WITHOUT_CLASSIFICATION	1.2863734842430561E-6	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880976714095	WITHOUT_CLASSIFICATION	1.1902328590447097E-5	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999984670298496	WITHOUT_CLASSIFICATION	1.5329701503585072E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999984670298496	WITHOUT_CLASSIFICATION	1.5329701503585072E-6	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999891872043054	WITHOUT_CLASSIFICATION	1.08127956945367E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999966365001732	WITHOUT_CLASSIFICATION	3.363499826817604E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9998671008898121	WITHOUT_CLASSIFICATION	1.328991101878291E-4	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9998671008898121	WITHOUT_CLASSIFICATION	1.328991101878291E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997062014303	WITHOUT_CLASSIFICATION	2.937985697390874E-7	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999438082504056	WITHOUT_CLASSIFICATION	5.6191749594356826E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.999904942548607	WITHOUT_CLASSIFICATION	9.505745139312276E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999995402111061	WITHOUT_CLASSIFICATION	4.597888939031178E-6	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.999999780942128	WITHOUT_CLASSIFICATION	2.1905787195545632E-7	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999995102638611	WITHOUT_CLASSIFICATION	4.897361387900704E-7	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999986366930996	WITHOUT_CLASSIFICATION	1.3633069004397896E-6	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999888107448509	WITHOUT_CLASSIFICATION	1.1189255149066416E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999947602735837	WITHOUT_CLASSIFICATION	5.239726416215102E-6	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999947602735837	WITHOUT_CLASSIFICATION	5.239726416215102E-6	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999995529444088	WITHOUT_CLASSIFICATION	4.4705559120317014E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999981844716448	WITHOUT_CLASSIFICATION	1.8155283552053353E-6	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999981844716448	WITHOUT_CLASSIFICATION	1.8155283552053353E-6	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999957150756933	WITHOUT_CLASSIFICATION	4.284924306751292E-6	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999994718102865	WITHOUT_CLASSIFICATION	5.281897135185384E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.997436448115515	WITHOUT_CLASSIFICATION	0.002563551884484949	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999979099685729	WITHOUT_CLASSIFICATION	2.0900314270592255E-6	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999968038802544	WITHOUT_CLASSIFICATION	3.1961197455890074E-6	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999992314380414	WITHOUT_CLASSIFICATION	7.685619586453031E-7	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999860932466114	WITHOUT_CLASSIFICATION	1.3906753388531968E-5	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999995330368704	WITHOUT_CLASSIFICATION	4.6696312959531833E-7	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999998838153153	WITHOUT_CLASSIFICATION	1.1618468463656502E-7	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9997902437637726	WITHOUT_CLASSIFICATION	2.0975623622743693E-4	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999966421305203	WITHOUT_CLASSIFICATION	3.357869479589041E-6	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999997907386209	WITHOUT_CLASSIFICATION	2.0926137907905158E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999934209125032	WITHOUT_CLASSIFICATION	6.579087496779384E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999934209125032	WITHOUT_CLASSIFICATION	6.579087496779384E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999934209125032	WITHOUT_CLASSIFICATION	6.579087496779384E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999934209125032	WITHOUT_CLASSIFICATION	6.579087496779384E-6	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999980736381465	WITHOUT_CLASSIFICATION	1.9263618534950694E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9880537403388926	WITHOUT_CLASSIFICATION	0.011946259661107534	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999863800044584	WITHOUT_CLASSIFICATION	1.3619995541545483E-5	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.999988026356068	WITHOUT_CLASSIFICATION	1.1973643932030467E-5	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999997531772342	WITHOUT_CLASSIFICATION	2.468227658607378E-7	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9998418562875302	WITHOUT_CLASSIFICATION	1.5814371246974777E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999653597121099	WITHOUT_CLASSIFICATION	3.464028789011593E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999972910717381	WITHOUT_CLASSIFICATION	2.7089282619917684E-6	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999971653302816	WITHOUT_CLASSIFICATION	2.834669718434577E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999653597121099	WITHOUT_CLASSIFICATION	3.464028789011593E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999653597121099	WITHOUT_CLASSIFICATION	3.464028789011593E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999999989971211	WITHOUT_CLASSIFICATION	1.0028789077006548E-8	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999990560583004	WITHOUT_CLASSIFICATION	9.439416995269789E-7	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999974815141857	WITHOUT_CLASSIFICATION	2.5184858144453984E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999885607260622	WITHOUT_CLASSIFICATION	1.1439273937831014E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999724440762318	WITHOUT_CLASSIFICATION	2.7555923768312796E-5	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999958641783757	WITHOUT_CLASSIFICATION	4.135821624256255E-6	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999985050726083	WITHOUT_CLASSIFICATION	1.4949273915824326E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999885607260622	WITHOUT_CLASSIFICATION	1.1439273937831014E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999979714145197	WITHOUT_CLASSIFICATION	2.0285854802871024E-6	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999958031075605	WITHOUT_CLASSIFICATION	4.1968924394907554E-6	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999994751077038	WITHOUT_CLASSIFICATION	5.248922962008196E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999884899330772	WITHOUT_CLASSIFICATION	1.1510066922837367E-5	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999015439541978	WITHOUT_CLASSIFICATION	9.84560458022354E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9994241702446901	WITHOUT_CLASSIFICATION	5.758297553098747E-4	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999990451969891	WITHOUT_CLASSIFICATION	9.54803010844147E-7	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999986420401754	WITHOUT_CLASSIFICATION	1.3579598245566166E-6	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998578668686	WITHOUT_CLASSIFICATION	1.421331313411819E-7	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999992480932881	WITHOUT_CLASSIFICATION	7.519067119711298E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999513237554	WITHOUT_CLASSIFICATION	4.8676244638503524E-8	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999997068360733	WITHOUT_CLASSIFICATION	2.9316392675943837E-7	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9950923147386574	WITHOUT_CLASSIFICATION	0.004907685261342579	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999989665758926	WITHOUT_CLASSIFICATION	1.0334241073064997E-6	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999963077483	WITHOUT_CLASSIFICATION	3.6922516231273777E-9	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998039535125454	WITHOUT_CLASSIFICATION	1.9604648745463377E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999943108322	WITHOUT_CLASSIFICATION	5.689167847598834E-9	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999325086374811	WITHOUT_CLASSIFICATION	6.74913625189389E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990689112029	WITHOUT_CLASSIFICATION	9.310887970242746E-7	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999325086374811	WITHOUT_CLASSIFICATION	6.74913625189389E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998852491557	WITHOUT_CLASSIFICATION	1.1475084433266954E-7	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999994134180095	WITHOUT_CLASSIFICATION	5.865819905373157E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999858801057354	WITHOUT_CLASSIFICATION	1.4119894264567399E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999674228944	WITHOUT_CLASSIFICATION	3.2577105554307015E-8	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999943108322	WITHOUT_CLASSIFICATION	5.689167847598834E-9	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990689112029	WITHOUT_CLASSIFICATION	9.310887970242746E-7	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998852491557	WITHOUT_CLASSIFICATION	1.1475084433266954E-7	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999996293594456	WITHOUT_CLASSIFICATION	3.706405543401174E-7	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999657495335652	WITHOUT_CLASSIFICATION	3.425046643482997E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999967987272832	WITHOUT_CLASSIFICATION	3.2012727168901294E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999953522162675	WITHOUT_CLASSIFICATION	4.647783732500388E-6	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999849427442056	WITHOUT_CLASSIFICATION	1.5057255794516245E-5	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999900597396	WITHOUT_CLASSIFICATION	9.940260451276743E-9	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876733796348	WITHOUT_CLASSIFICATION	1.2326620365175548E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999994134180095	WITHOUT_CLASSIFICATION	5.865819905373157E-7	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999998549287842	WITHOUT_CLASSIFICATION	1.4507121582164226E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999690505865577	WITHOUT_CLASSIFICATION	3.0949413442192027E-5	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.999999742483035	WITHOUT_CLASSIFICATION	2.575169650327466E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876733796348	WITHOUT_CLASSIFICATION	1.2326620365175548E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848255562388	WITHOUT_CLASSIFICATION	1.5174443761174854E-5	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999982601896472	WITHOUT_CLASSIFICATION	1.7398103528148954E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876733796348	WITHOUT_CLASSIFICATION	1.2326620365175548E-5	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999810852965	WITHOUT_CLASSIFICATION	1.8914703436536047E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999991311045412	WITHOUT_CLASSIFICATION	8.68895458662363E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848255562388	WITHOUT_CLASSIFICATION	1.5174443761174854E-5	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.998241980243393	WITHOUT_CLASSIFICATION	0.0017580197566069704	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999862784142	WITHOUT_CLASSIFICATION	1.372158579694736E-8	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998331250401	WITHOUT_CLASSIFICATION	1.6687495995215482E-7	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999916463854767	WITHOUT_CLASSIFICATION	8.353614523285222E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999876556388307	WITHOUT_CLASSIFICATION	1.2344361169338937E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999984090181843	WITHOUT_CLASSIFICATION	1.5909818157054888E-5	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999927795364242	WITHOUT_CLASSIFICATION	7.220463575766977E-6	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.999992378606356	WITHOUT_CLASSIFICATION	7.621393643957196E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999222189465466	WITHOUT_CLASSIFICATION	7.778105345329903E-5	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999986179601731	WITHOUT_CLASSIFICATION	1.3820398269713044E-6	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.997436448115515	WITHOUT_CLASSIFICATION	0.002563551884484949	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999983791145104	WITHOUT_CLASSIFICATION	1.6208854895873837E-5	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999459858879589	WITHOUT_CLASSIFICATION	5.401411204113482E-5	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999965813268613	WITHOUT_CLASSIFICATION	3.4186731387290063E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997394366707378	WITHOUT_CLASSIFICATION	2.605633292622413E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999156137981	WITHOUT_CLASSIFICATION	8.43862018935134E-8	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999993788681711	WITHOUT_CLASSIFICATION	6.211318288434316E-7	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999067346760951	WITHOUT_CLASSIFICATION	9.326532390487166E-5	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9996562519991696	WITHOUT_CLASSIFICATION	3.4374800083039066E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999994793857492	WITHOUT_CLASSIFICATION	5.206142509109834E-7	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999210688531783	WITHOUT_CLASSIFICATION	7.89311468217198E-5	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9976522492935925	WITHOUT_CLASSIFICATION	0.0023477507064074412	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9993627495460357	WITHOUT_CLASSIFICATION	6.372504539642846E-4	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9992512912582634	WITHOUT_CLASSIFICATION	7.48708741736612E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999988253714662	WITHOUT_CLASSIFICATION	1.1746285337620482E-6	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999971579354773	WITHOUT_CLASSIFICATION	2.842064522791152E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999345889611811	WITHOUT_CLASSIFICATION	6.541103881887201E-5	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999969584605537	WITHOUT_CLASSIFICATION	3.0415394462922308E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999974204324064	WITHOUT_CLASSIFICATION	2.5795675936811304E-6	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999892756352604	WITHOUT_CLASSIFICATION	1.0724364739623252E-5	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999436303774487	WITHOUT_CLASSIFICATION	5.636962255136034E-5	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9996863049336141	WITHOUT_CLASSIFICATION	3.136950663859651E-4	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.999784568282356	WITHOUT_CLASSIFICATION	2.154317176439835E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999281079043	WITHOUT_CLASSIFICATION	7.189209571950062E-8	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999895392295887	WITHOUT_CLASSIFICATION	1.0460770411350237E-5	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999770646049728	WITHOUT_CLASSIFICATION	2.2935395027200857E-5	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999991001822803	WITHOUT_CLASSIFICATION	8.998177196604766E-7	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999687607296096	WITHOUT_CLASSIFICATION	3.12392703902916E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9986941688247195	WITHOUT_CLASSIFICATION	0.0013058311752805296	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999985235686061	WITHOUT_CLASSIFICATION	1.476431394006765E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848255562388	WITHOUT_CLASSIFICATION	1.5174443761174854E-5	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999954473643763	WITHOUT_CLASSIFICATION	4.552635623694685E-6	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999888159788503	WITHOUT_CLASSIFICATION	1.1184021149683216E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999888159788503	WITHOUT_CLASSIFICATION	1.1184021149683216E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999928975330511	WITHOUT_CLASSIFICATION	7.102466948929978E-6	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999984090181843	WITHOUT_CLASSIFICATION	1.5909818157054888E-5	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999878097207764	WITHOUT_CLASSIFICATION	1.2190279223491415E-5	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999988285245646	WITHOUT_CLASSIFICATION	1.171475435373466E-6	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999064558881093	WITHOUT_CLASSIFICATION	9.354411189064556E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999816836504412	WITHOUT_CLASSIFICATION	1.831634955882795E-5	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999870835704812	WITHOUT_CLASSIFICATION	1.291642951889913E-5	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9999448118241712	WITHOUT_CLASSIFICATION	5.518817582870156E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999756584868078	WITHOUT_CLASSIFICATION	2.434151319218697E-5	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999774705185	WITHOUT_CLASSIFICATION	2.2529481422912368E-8	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999932287435709	WITHOUT_CLASSIFICATION	6.7712564291384E-6	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999973340848403	WITHOUT_CLASSIFICATION	2.6659151597101116E-6	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998896133097	WITHOUT_CLASSIFICATION	1.1038669033010166E-7	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999993629149551	WITHOUT_CLASSIFICATION	6.370850448989364E-7	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999991230972286	WITHOUT_CLASSIFICATION	8.769027712800296E-7	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999932254845	WITHOUT_CLASSIFICATION	6.774515566125083E-9	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999987785441703	WITHOUT_CLASSIFICATION	1.2214558296869086E-6	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999994795896217	WITHOUT_CLASSIFICATION	5.20410378327894E-7	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999998922967126	WITHOUT_CLASSIFICATION	1.0770328746524193E-7	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999992040998114	WITHOUT_CLASSIFICATION	7.959001887011539E-7	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999998630332086	WITHOUT_CLASSIFICATION	1.3696679142729545E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999978508940795	WITHOUT_CLASSIFICATION	2.149105920496725E-5	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999989036198134	WITHOUT_CLASSIFICATION	1.0963801865815613E-6	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999828676059554	WITHOUT_CLASSIFICATION	1.7132394044529975E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9986941688247195	WITHOUT_CLASSIFICATION	0.0013058311752805296	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999940612461719	WITHOUT_CLASSIFICATION	5.938753828088082E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9996230278551703	WITHOUT_CLASSIFICATION	3.7697214482975696E-4	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999998657960573	WITHOUT_CLASSIFICATION	1.342039428316584E-7	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999959488776626	WITHOUT_CLASSIFICATION	4.051122337394098E-5	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998372343415386	WITHOUT_CLASSIFICATION	1.627656584614143E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999999812686272	WITHOUT_CLASSIFICATION	1.873137279579543E-7	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999988652345217	WITHOUT_CLASSIFICATION	1.1347654782317487E-6	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999999850064398	WITHOUT_CLASSIFICATION	1.499356020037222E-7	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999021295322	WITHOUT_CLASSIFICATION	9.787046775143939E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999975792423178	WITHOUT_CLASSIFICATION	2.420757682286692E-6	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999997197304026	WITHOUT_CLASSIFICATION	2.8026959744051153E-7	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999993859850862	WITHOUT_CLASSIFICATION	6.140149138555794E-7	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999551573153821	WITHOUT_CLASSIFICATION	4.484268461793263E-5	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.972484139648971	WITHOUT_CLASSIFICATION	0.027515860351029015	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999993194914476	WITHOUT_CLASSIFICATION	6.805085523426277E-7	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999993194914476	WITHOUT_CLASSIFICATION	6.805085523426277E-7	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999957051218021	WITHOUT_CLASSIFICATION	4.294878197779284E-6	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999228568486	WITHOUT_CLASSIFICATION	7.714315133375747E-8	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9951798824136601	WITHOUT_CLASSIFICATION	0.004820117586339945	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9951798824136601	WITHOUT_CLASSIFICATION	0.004820117586339945	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999297569393	WITHOUT_CLASSIFICATION	7.024306071530975E-8	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999667528549707	WITHOUT_CLASSIFICATION	3.324714502927661E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999687739002189	WITHOUT_CLASSIFICATION	3.122609978108684E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999999978655071	WITHOUT_CLASSIFICATION	2.13449290313131E-8	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999988791317592	WITHOUT_CLASSIFICATION	1.1208682408021575E-6	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999354022980628	WITHOUT_CLASSIFICATION	6.459770193729275E-5	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999997983265949	WITHOUT_CLASSIFICATION	2.016734051517499E-7	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999997983265949	WITHOUT_CLASSIFICATION	2.016734051517499E-7	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999714698552937	WITHOUT_CLASSIFICATION	2.8530144706258298E-5	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999864092716146	WITHOUT_CLASSIFICATION	1.3590728385320058E-5	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999925309657793	WITHOUT_CLASSIFICATION	7.469034220651558E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999941190747056	WITHOUT_CLASSIFICATION	5.880925294485657E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999941190747056	WITHOUT_CLASSIFICATION	5.880925294485657E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999987989265635	WITHOUT_CLASSIFICATION	1.2010734364682655E-6	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999998942030195	WITHOUT_CLASSIFICATION	1.0579698049654175E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998334893282751	WITHOUT_CLASSIFICATION	1.6651067172483494E-4	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999998619883014	WITHOUT_CLASSIFICATION	1.38011698609732E-7	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999807669021685	WITHOUT_CLASSIFICATION	1.9233097831527693E-5	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999997842933734	WITHOUT_CLASSIFICATION	2.1570662663985907E-7	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999976300646162	WITHOUT_CLASSIFICATION	2.369935383751145E-6	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999988877589997	WITHOUT_CLASSIFICATION	1.1122410003287402E-6	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999094049132	WITHOUT_CLASSIFICATION	9.059508677931236E-8	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999973492709188	WITHOUT_CLASSIFICATION	2.6507290812712083E-6	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999594436225517	WITHOUT_CLASSIFICATION	4.055637744833271E-5	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999876619650606	WITHOUT_CLASSIFICATION	1.2338034939387593E-5	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.999998944197402	WITHOUT_CLASSIFICATION	1.0558025980539749E-6	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999581811632098	WITHOUT_CLASSIFICATION	4.1818836790196656E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999928652578989	WITHOUT_CLASSIFICATION	7.134742101096652E-6	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999990044224232	WITHOUT_CLASSIFICATION	9.955775768073222E-6	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999979794905479	WITHOUT_CLASSIFICATION	2.0205094521644188E-6	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999992442725133	WITHOUT_CLASSIFICATION	7.557274865781188E-7	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999567661205375	WITHOUT_CLASSIFICATION	4.3233879462403264E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999957245963145	WITHOUT_CLASSIFICATION	4.275403685472349E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999972113189718	WITHOUT_CLASSIFICATION	2.788681028299561E-6	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999364199012374	WITHOUT_CLASSIFICATION	6.358009876254755E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999966688207609	WITHOUT_CLASSIFICATION	3.3311792390580473E-6	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999607921807876	WITHOUT_CLASSIFICATION	3.9207819212431126E-5	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9997765627739558	WITHOUT_CLASSIFICATION	2.234372260441707E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999802455376381	WITHOUT_CLASSIFICATION	1.9754462361935428E-5	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999932731943845	WITHOUT_CLASSIFICATION	6.726805615547444E-6	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999970144202872	WITHOUT_CLASSIFICATION	2.9855797128059355E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999978660886	WITHOUT_CLASSIFICATION	2.1339113943663954E-8	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999431775627	WITHOUT_CLASSIFICATION	5.68224373099993E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9439233319797975	WITHOUT_CLASSIFICATION	0.056076668020202454	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999994723480531	WITHOUT_CLASSIFICATION	5.276519468690643E-7	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999992328077866	WITHOUT_CLASSIFICATION	7.671922133646067E-7	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999957650526721	WITHOUT_CLASSIFICATION	4.234947327929087E-6	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999964033747436	WITHOUT_CLASSIFICATION	3.5966252563558315E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999911505742581	WITHOUT_CLASSIFICATION	8.849425741861087E-6	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999926077930676	WITHOUT_CLASSIFICATION	7.392206932365629E-6	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999996291518728	WITHOUT_CLASSIFICATION	3.7084812709320814E-7	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999974623185309	WITHOUT_CLASSIFICATION	2.537681469051484E-6	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999997249548833	WITHOUT_CLASSIFICATION	2.750451166790443E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999607330885588	WITHOUT_CLASSIFICATION	3.926691144118011E-5	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9995767094670744	WITHOUT_CLASSIFICATION	4.2329053292549474E-4	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999939408497327	WITHOUT_CLASSIFICATION	6.059150267367332E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999982653638441	WITHOUT_CLASSIFICATION	1.7346361559110676E-6	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999993886725101	WITHOUT_CLASSIFICATION	6.113274897865892E-7	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999968863041905	WITHOUT_CLASSIFICATION	3.1136958095108327E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9999783651128412	WITHOUT_CLASSIFICATION	2.1634887158866213E-5	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999998433610019	WITHOUT_CLASSIFICATION	1.5663899809175185E-7	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999987288056573	WITHOUT_CLASSIFICATION	1.2711943426676934E-6	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999999992714456	WITHOUT_CLASSIFICATION	7.2855439660897946E-9	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999920451155829	WITHOUT_CLASSIFICATION	7.954884416965208E-6	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999829209817	WITHOUT_CLASSIFICATION	1.7079018274777196E-8	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999346012283	WITHOUT_CLASSIFICATION	6.539877171639244E-8	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999993100226	WITHOUT_CLASSIFICATION	6.899773203717455E-10	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999986315137575	WITHOUT_CLASSIFICATION	1.3684862425047887E-5	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999995730087471	WITHOUT_CLASSIFICATION	4.269912529099249E-7	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999371769341617	WITHOUT_CLASSIFICATION	6.282306583831264E-5	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999994935290574	WITHOUT_CLASSIFICATION	5.064709426295584E-7	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999998371778669	WITHOUT_CLASSIFICATION	1.6282213309544761E-6	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999986998361122	WITHOUT_CLASSIFICATION	1.3001638878549091E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999968402576672	WITHOUT_CLASSIFICATION	3.1597423326714572E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999968402576672	WITHOUT_CLASSIFICATION	3.1597423326714572E-6	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999974498898666	WITHOUT_CLASSIFICATION	2.5501101335155104E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999632959503053	WITHOUT_CLASSIFICATION	3.670404969465468E-5	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999964020551	WITHOUT_CLASSIFICATION	3.5979450657139563E-9	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999557359741	WITHOUT_CLASSIFICATION	4.426402583606841E-8	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999892798251716	WITHOUT_CLASSIFICATION	1.0720174828464657E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999994813817835	WITHOUT_CLASSIFICATION	5.186182165039183E-6	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999965227120017	WITHOUT_CLASSIFICATION	3.477287998265408E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999982890879	WITHOUT_CLASSIFICATION	1.7109120725764482E-9	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9996594482721586	WITHOUT_CLASSIFICATION	3.405517278414251E-4	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999803380688944	WITHOUT_CLASSIFICATION	1.966193110555407E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999828947105648	WITHOUT_CLASSIFICATION	1.710528943520356E-5	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999947174037832	WITHOUT_CLASSIFICATION	5.282596216769918E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999833247674	WITHOUT_CLASSIFICATION	1.6675232652394024E-8	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999904518642	WITHOUT_CLASSIFICATION	9.548135783021957E-9	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999848903219	WITHOUT_CLASSIFICATION	1.5109678086395654E-8	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999848903219	WITHOUT_CLASSIFICATION	1.5109678086395654E-8	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999996677179435	WITHOUT_CLASSIFICATION	3.3228205645730245E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9996986283584056	WITHOUT_CLASSIFICATION	3.013716415944377E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999996710503788	WITHOUT_CLASSIFICATION	3.2894962111412625E-7	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999998261923921	WITHOUT_CLASSIFICATION	1.7380760789779772E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999086755443	WITHOUT_CLASSIFICATION	9.13244555874709E-8	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993127021867	WITHOUT_CLASSIFICATION	6.872978133127631E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999930147041264	WITHOUT_CLASSIFICATION	6.9852958735910295E-6	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9992654176392376	WITHOUT_CLASSIFICATION	7.345823607623663E-4	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999997777787644	WITHOUT_CLASSIFICATION	2.222212356005175E-7	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.99999100760481	WITHOUT_CLASSIFICATION	8.9923951899651E-6	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999960574549015	WITHOUT_CLASSIFICATION	3.942545098477784E-6	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999904949224	WITHOUT_CLASSIFICATION	9.505077597959185E-9	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999254216505	WITHOUT_CLASSIFICATION	7.457834947511954E-8	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999998251255188	WITHOUT_CLASSIFICATION	1.7487448114706893E-7	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999983333261764	WITHOUT_CLASSIFICATION	1.6666738236292202E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999916139126458	WITHOUT_CLASSIFICATION	8.386087354220827E-6	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999979291291	WITHOUT_CLASSIFICATION	2.0708708993658906E-8	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999999434710993	WITHOUT_CLASSIFICATION	5.65289007003046E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999998679520429	WITHOUT_CLASSIFICATION	1.3204795710208167E-6	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999998049300391	WITHOUT_CLASSIFICATION	1.9506996095504654E-7	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999909048270108	WITHOUT_CLASSIFICATION	9.095172989133096E-6	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999993695116	WITHOUT_CLASSIFICATION	6.304883965630074E-9	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999996466469673	WITHOUT_CLASSIFICATION	3.533530327391322E-7	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999983145718784	WITHOUT_CLASSIFICATION	1.685428121662396E-6	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998034583638891	WITHOUT_CLASSIFICATION	1.9654163611089389E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998040766552323	WITHOUT_CLASSIFICATION	1.9592334476778016E-4	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999990483698847	WITHOUT_CLASSIFICATION	9.516301152358257E-7	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999787559903104	WITHOUT_CLASSIFICATION	2.1244009689601594E-5	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999147906165	WITHOUT_CLASSIFICATION	8.520938359954087E-8	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999998463338682	WITHOUT_CLASSIFICATION	1.536661318956035E-7	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999997124387211	WITHOUT_CLASSIFICATION	2.8756127882635417E-7	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9983482367963136	WITHOUT_CLASSIFICATION	0.0016517632036863574	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999982376832	WITHOUT_CLASSIFICATION	1.7623167864649042E-9	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999883795336344	WITHOUT_CLASSIFICATION	1.1620466365649987E-5	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.99975374367949	WITHOUT_CLASSIFICATION	2.462563205100129E-4	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999402036203	WITHOUT_CLASSIFICATION	5.979637968735967E-8	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999992038145987	WITHOUT_CLASSIFICATION	7.961854012302257E-7	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999557334042	WITHOUT_CLASSIFICATION	4.426659594871198E-8	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999797357891091	WITHOUT_CLASSIFICATION	2.026421089084675E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999962788648851	WITHOUT_CLASSIFICATION	3.721135114964901E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999980236260034	WITHOUT_CLASSIFICATION	1.9763739966036083E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999980236260034	WITHOUT_CLASSIFICATION	1.9763739966036083E-6	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999345829558	WITHOUT_CLASSIFICATION	6.541704432097309E-8	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999536096160778	WITHOUT_CLASSIFICATION	4.639038392213609E-5	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999945102724146	WITHOUT_CLASSIFICATION	5.489727585422333E-6	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999916544218922	WITHOUT_CLASSIFICATION	8.345578107850134E-6	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999989213568189	WITHOUT_CLASSIFICATION	1.0786431811000636E-6	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999998996916653	WITHOUT_CLASSIFICATION	1.0030833472348637E-7	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999841100062948	WITHOUT_CLASSIFICATION	1.5889993705147945E-5	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999321893708	WITHOUT_CLASSIFICATION	6.781062928932312E-8	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9997851530971787	WITHOUT_CLASSIFICATION	2.1484690282119498E-4	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980072411957	WITHOUT_CLASSIFICATION	1.992758804307096E-6	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988247909092	WITHOUT_CLASSIFICATION	1.1752090907897986E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997909663621172	WITHOUT_CLASSIFICATION	2.0903363788290718E-4	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.998924122723265	WITHOUT_CLASSIFICATION	0.001075877276735009	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999992966967248	WITHOUT_CLASSIFICATION	7.033032750762522E-7	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999998764997088	WITHOUT_CLASSIFICATION	1.235002911791989E-7	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999995827735244	WITHOUT_CLASSIFICATION	4.1722647557431863E-7	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9983490537781925	WITHOUT_CLASSIFICATION	0.0016509462218075154	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999991500978849	WITHOUT_CLASSIFICATION	8.499021151014735E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9991865344176274	WITHOUT_CLASSIFICATION	8.134655823725278E-4	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999948008985374	WITHOUT_CLASSIFICATION	5.199101462623141E-6	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999389415028084	WITHOUT_CLASSIFICATION	6.105849719157007E-5	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999904313104907	WITHOUT_CLASSIFICATION	9.568689509377883E-6	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999998685314619	WITHOUT_CLASSIFICATION	1.3146853803943668E-7	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999325753473435	WITHOUT_CLASSIFICATION	6.74246526564939E-5	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9998977799631505	WITHOUT_CLASSIFICATION	1.0222003684943084E-4	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999514745727967	WITHOUT_CLASSIFICATION	4.8525427203387066E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999307213082481	WITHOUT_CLASSIFICATION	6.927869175183551E-5	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999964264764147	WITHOUT_CLASSIFICATION	3.573523585192868E-6	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999999186492503	WITHOUT_CLASSIFICATION	8.135074971302476E-7	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999114351651943	WITHOUT_CLASSIFICATION	8.85648348057252E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999977582386	WITHOUT_CLASSIFICATION	2.241761476805659E-9	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999995699808794	WITHOUT_CLASSIFICATION	4.300191206493678E-7	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999941456545	WITHOUT_CLASSIFICATION	5.8543454189939825E-9	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999352639585	WITHOUT_CLASSIFICATION	6.47360415419448E-8	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999997976522061	WITHOUT_CLASSIFICATION	2.023477937877148E-7	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999836248853717	WITHOUT_CLASSIFICATION	1.6375114628303958E-5	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999997685017809	WITHOUT_CLASSIFICATION	2.3149821919319744E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999971386327	WITHOUT_CLASSIFICATION	2.861367258136194E-9	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999998554607589	WITHOUT_CLASSIFICATION	1.445392410959974E-6	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999974111400445	WITHOUT_CLASSIFICATION	2.5888599555491632E-6	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999868892092313	WITHOUT_CLASSIFICATION	1.3110790768655096E-5	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9995646924642047	WITHOUT_CLASSIFICATION	4.35307535795448E-4	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999994625361	WITHOUT_CLASSIFICATION	5.37463753790564E-10	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999998350787	WITHOUT_CLASSIFICATION	1.6492123416009593E-10	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999989399367162	WITHOUT_CLASSIFICATION	1.0600632838131685E-6	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999957398995833	WITHOUT_CLASSIFICATION	4.260100416702647E-6	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999971471055153	WITHOUT_CLASSIFICATION	2.8528944847266756E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999833247674	WITHOUT_CLASSIFICATION	1.6675232652394024E-8	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999998345666768	WITHOUT_CLASSIFICATION	1.6543332311916727E-7	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999862055279	WITHOUT_CLASSIFICATION	1.379447203967408E-8	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999936614302573	WITHOUT_CLASSIFICATION	6.3385697428037744E-6	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999998147222826	WITHOUT_CLASSIFICATION	1.8527771738085143E-7	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999998561516571	WITHOUT_CLASSIFICATION	1.4384834293616048E-7	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9997602734388371	WITHOUT_CLASSIFICATION	2.397265611629856E-4	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9983909665144988	WITHOUT_CLASSIFICATION	0.001609033485501282	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999995690133515	WITHOUT_CLASSIFICATION	4.309866484284105E-7	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998010908036	WITHOUT_CLASSIFICATION	1.9890919645773864E-7	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999543731256918	WITHOUT_CLASSIFICATION	4.562687430828322E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999994856100236	WITHOUT_CLASSIFICATION	5.14389976452261E-7	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999982730333857	WITHOUT_CLASSIFICATION	1.7269666141941336E-6	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999999968411413	WITHOUT_CLASSIFICATION	3.158858690653673E-8	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999979342641094	WITHOUT_CLASSIFICATION	2.0657358905137733E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999565514478	WITHOUT_CLASSIFICATION	4.3448552331610755E-8	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999991080537869	WITHOUT_CLASSIFICATION	8.919462130970868E-6	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999773166777663	WITHOUT_CLASSIFICATION	2.2683322233665125E-5	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999989771383	WITHOUT_CLASSIFICATION	1.0228616833264036E-9	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999998397284579	WITHOUT_CLASSIFICATION	1.6027154204207517E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999565514478	WITHOUT_CLASSIFICATION	4.3448552331610755E-8	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9996809534015251	WITHOUT_CLASSIFICATION	3.19046598474877E-4	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999998723786004	WITHOUT_CLASSIFICATION	1.276213996352105E-7	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999998367997451	WITHOUT_CLASSIFICATION	1.632002549334924E-7	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998976255697	WITHOUT_CLASSIFICATION	1.0237443024036644E-7	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999921105013397	WITHOUT_CLASSIFICATION	7.889498660341721E-6	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999990420816856	WITHOUT_CLASSIFICATION	9.579183144400594E-7	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999983546279	WITHOUT_CLASSIFICATION	1.645372098395238E-8	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999948927745697	WITHOUT_CLASSIFICATION	5.107225430259371E-6	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999981396638897	WITHOUT_CLASSIFICATION	1.8603361102013058E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999712679390649	WITHOUT_CLASSIFICATION	2.8732060935189087E-5	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999999135717021	WITHOUT_CLASSIFICATION	8.642829773733524E-8	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9994626718779855	WITHOUT_CLASSIFICATION	5.373281220145293E-4	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999983160055887	WITHOUT_CLASSIFICATION	1.6839944112054091E-6	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999549465719	WITHOUT_CLASSIFICATION	4.505342803819768E-8	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999997203236213	WITHOUT_CLASSIFICATION	2.7967637872468297E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999828676059554	WITHOUT_CLASSIFICATION	1.7132394044529975E-5	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999996995281933	WITHOUT_CLASSIFICATION	3.004718066161169E-7	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.99999998760731	WITHOUT_CLASSIFICATION	1.2392690033899303E-8	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9990827435412062	WITHOUT_CLASSIFICATION	9.172564587937667E-4	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9996607341321981	WITHOUT_CLASSIFICATION	3.3926586780187767E-4	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999875238281	WITHOUT_CLASSIFICATION	1.2476171949506366E-8	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999992531170488	WITHOUT_CLASSIFICATION	7.46882951107664E-7	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.999990689527124	WITHOUT_CLASSIFICATION	9.310472875991091E-6	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999988825342	WITHOUT_CLASSIFICATION	1.1174658024845137E-9	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.999999798014248	WITHOUT_CLASSIFICATION	2.0198575204418817E-7	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999997237524566	WITHOUT_CLASSIFICATION	2.762475433988834E-7	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.8889543551237313	WITHOUT_CLASSIFICATION	0.11104564487626864	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999266850336	WITHOUT_CLASSIFICATION	7.331496650377801E-8	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9995456428784342	WITHOUT_CLASSIFICATION	4.543571215658134E-4	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9886963079814436	WITHOUT_CLASSIFICATION	0.011303692018556518	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999988604807529	WITHOUT_CLASSIFICATION	1.1395192470562408E-6	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999964489001761	WITHOUT_CLASSIFICATION	3.5510998237669007E-6	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9982381613774626	WITHOUT_CLASSIFICATION	0.0017618386225374228	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999995891693833	WITHOUT_CLASSIFICATION	4.108306167789189E-7	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999985056278	WITHOUT_CLASSIFICATION	1.4943721952649583E-8	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999996547172386	WITHOUT_CLASSIFICATION	3.452827614008535E-7	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999998035135752	WITHOUT_CLASSIFICATION	1.9648642478997904E-7	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999992615384907	WITHOUT_CLASSIFICATION	7.384615093839856E-7	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999998082371443	WITHOUT_CLASSIFICATION	1.9176285580175072E-7	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999958219435283	WITHOUT_CLASSIFICATION	4.178056471684136E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999974903940961	WITHOUT_CLASSIFICATION	2.509605903897176E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999974903940961	WITHOUT_CLASSIFICATION	2.509605903897176E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999926979548126	WITHOUT_CLASSIFICATION	7.302045187436343E-6	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999975331311937	WITHOUT_CLASSIFICATION	2.4668688064289355E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999992852615288	WITHOUT_CLASSIFICATION	7.147384712845252E-7	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5275943677067564	WITHOUT_CLASSIFICATION	0.47240563229324367	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999995402111061	WITHOUT_CLASSIFICATION	4.597888939031178E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999995402111061	WITHOUT_CLASSIFICATION	4.597888939031178E-6	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999968283761267	WITHOUT_CLASSIFICATION	3.171623873237456E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999984498850067	WITHOUT_CLASSIFICATION	1.5501149932774366E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999673973340848	WITHOUT_CLASSIFICATION	3.26026659151932E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999882395996218	WITHOUT_CLASSIFICATION	1.1760400378327424E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999259946858	WITHOUT_CLASSIFICATION	7.400531420656391E-8	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999998621570754	WITHOUT_CLASSIFICATION	1.3784292459434453E-6	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.999999828958359	WITHOUT_CLASSIFICATION	1.710416408581915E-7	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999886912786	WITHOUT_CLASSIFICATION	1.1308721549251817E-8	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999834411494741	WITHOUT_CLASSIFICATION	1.6558850525939872E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984133930474	WITHOUT_CLASSIFICATION	1.5866069525404356E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984133930474	WITHOUT_CLASSIFICATION	1.5866069525404356E-6	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999659927133127	WITHOUT_CLASSIFICATION	3.4007286687270476E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999872499237055	WITHOUT_CLASSIFICATION	1.2750076294566413E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.999999733069172	WITHOUT_CLASSIFICATION	2.6693082807090884E-7	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9998986309142139	WITHOUT_CLASSIFICATION	1.0136908578597733E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848255562388	WITHOUT_CLASSIFICATION	1.5174443761174854E-5	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999996602829917	WITHOUT_CLASSIFICATION	3.397170083635838E-7	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999985034186	WITHOUT_CLASSIFICATION	1.4965814059479947E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848255562388	WITHOUT_CLASSIFICATION	1.5174443761174854E-5	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999624075557	WITHOUT_CLASSIFICATION	3.759244421851878E-8	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999984668491785	WITHOUT_CLASSIFICATION	1.53315082159236E-6	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999547586226822	WITHOUT_CLASSIFICATION	4.524137731779729E-5	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999003838661316	WITHOUT_CLASSIFICATION	9.961613386842019E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999712679390649	WITHOUT_CLASSIFICATION	2.8732060935189087E-5	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999983268957049	WITHOUT_CLASSIFICATION	1.6731042951020261E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998336622586154	WITHOUT_CLASSIFICATION	1.663377413845149E-4	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9997371497204937	WITHOUT_CLASSIFICATION	2.6285027950636724E-4	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999992355352864	WITHOUT_CLASSIFICATION	7.644647136115888E-7	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999916761131269	WITHOUT_CLASSIFICATION	8.323886873096056E-6	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999992060373819	WITHOUT_CLASSIFICATION	7.939626180759008E-7	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999957177787671	WITHOUT_CLASSIFICATION	4.282221233023536E-6	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.999999996379211	WITHOUT_CLASSIFICATION	3.6207889366187414E-9	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999894246621753	WITHOUT_CLASSIFICATION	1.0575337824617228E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999266255246785	WITHOUT_CLASSIFICATION	7.337447532158165E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999266255246785	WITHOUT_CLASSIFICATION	7.337447532158165E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999885607260622	WITHOUT_CLASSIFICATION	1.1439273937831014E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999684596002	WITHOUT_CLASSIFICATION	3.154039985970409E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999653597121099	WITHOUT_CLASSIFICATION	3.464028789011593E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999999049106275	WITHOUT_CLASSIFICATION	9.508937249551294E-7	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999986691419945	WITHOUT_CLASSIFICATION	1.3308580054641498E-6	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999805936153	WITHOUT_CLASSIFICATION	1.9406384657120268E-8	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999963077483	WITHOUT_CLASSIFICATION	3.6922516231273777E-9	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999578915445	WITHOUT_CLASSIFICATION	4.210845542317237E-8	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999996293594456	WITHOUT_CLASSIFICATION	3.706405543401174E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999989759773141	WITHOUT_CLASSIFICATION	1.0240226858400075E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876733796348	WITHOUT_CLASSIFICATION	1.2326620365175548E-5	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9978921052226041	WITHOUT_CLASSIFICATION	0.0021078947773959457	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999999219404979	WITHOUT_CLASSIFICATION	7.805950209749076E-8	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998215158172	WITHOUT_CLASSIFICATION	1.784841827885225E-7	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999993246971381	WITHOUT_CLASSIFICATION	6.753028618687396E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999837662442	WITHOUT_CLASSIFICATION	1.6233755824440686E-8	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999997415715597	WITHOUT_CLASSIFICATION	2.5842844031967063E-7	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999930294522431	WITHOUT_CLASSIFICATION	6.970547756979891E-6	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9991972221416824	WITHOUT_CLASSIFICATION	8.027778583175977E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9781396114016035	WITHOUT_CLASSIFICATION	0.02186038859839654	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999991670232041	WITHOUT_CLASSIFICATION	8.329767959912493E-7	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999972827223914	WITHOUT_CLASSIFICATION	2.7172776085356076E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998334893282751	WITHOUT_CLASSIFICATION	1.6651067172483494E-4	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.8982536375509811	WITHOUT_CLASSIFICATION	0.10174636244901879	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998890221456	WITHOUT_CLASSIFICATION	1.1097785427246133E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998890221456	WITHOUT_CLASSIFICATION	1.1097785427246133E-7	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999923141906142	WITHOUT_CLASSIFICATION	7.685809385848781E-6	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999997580669034	WITHOUT_CLASSIFICATION	2.4193309653788514E-7	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999999971745	WITHOUT_CLASSIFICATION	2.8255133901746526E-12	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.999999574306723	WITHOUT_CLASSIFICATION	4.256932769758022E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999963924451462	WITHOUT_CLASSIFICATION	3.6075548538475175E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9988998397862464	WITHOUT_CLASSIFICATION	0.0011001602137536701	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9999784257457122	WITHOUT_CLASSIFICATION	2.1574254287811806E-5	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999982419230338	WITHOUT_CLASSIFICATION	1.7580769662939836E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9906101535373709	WITHOUT_CLASSIFICATION	0.009389846462629112	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9194745131300022	DEFECT	0.0805254868699979	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.6471318292324512	WITHOUT_CLASSIFICATION	0.3528681707675489	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.5329530073437675	WITHOUT_CLASSIFICATION	0.46704699265623245	DEFECT
/*	DEFECT	0.9933197865985777	WITHOUT_CLASSIFICATION	0.006680213401422281	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.7795944322774013	WITHOUT_CLASSIFICATION	0.22040556772259867	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9330838398634232	DEFECT	0.06691616013657663	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.9998296299955831	DEFECT	1.7037000441694035E-4	WITHOUT_CLASSIFICATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9999835733642047	DEFECT	1.642663579528295E-5	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.6209991310805939	WITHOUT_CLASSIFICATION	0.37900086891940604	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8092836941127848	WITHOUT_CLASSIFICATION	0.19071630588721533	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8092836941127848	WITHOUT_CLASSIFICATION	0.19071630588721533	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.8951829273618033	WITHOUT_CLASSIFICATION	0.10481707263819676	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9995587604140739	WITHOUT_CLASSIFICATION	4.4123958592616594E-4	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.970010177717539	DEFECT	0.02998982228246106	WITHOUT_CLASSIFICATION
// this call is side-effecty	DEFECT	0.9999587832178638	WITHOUT_CLASSIFICATION	4.121678213613981E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9984392011097253	WITHOUT_CLASSIFICATION	0.0015607988902747538	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.6753942531884555	WITHOUT_CLASSIFICATION	0.32460574681154447	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.7222716984205574	WITHOUT_CLASSIFICATION	0.27772830157944267	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.8014220578044373	WITHOUT_CLASSIFICATION	0.19857794219556268	DEFECT
//TODO: is this completely correct?	DEFECT	0.9803607507395113	DEFECT	0.019639249260488694	WITHOUT_CLASSIFICATION
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9996320821859305	WITHOUT_CLASSIFICATION	3.679178140696245E-4	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.8849120641815824	WITHOUT_CLASSIFICATION	0.11508793581841752	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9799063372261899	WITHOUT_CLASSIFICATION	0.020093662773810167	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.552066607875551	WITHOUT_CLASSIFICATION	0.4479333921244491	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9999834729807364	DEFECT	1.6527019263628798E-5	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.981219577597643	WITHOUT_CLASSIFICATION	0.01878042240235706	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9664503254470339	WITHOUT_CLASSIFICATION	0.03354967455296609	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.6530684445921884	DEFECT	0.3469315554078116	WITHOUT_CLASSIFICATION
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.6629440768826086	DEFECT	0.3370559231173914	WITHOUT_CLASSIFICATION
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.8447310395140091	WITHOUT_CLASSIFICATION	0.155268960485991	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8092836941127848	WITHOUT_CLASSIFICATION	0.19071630588721533	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.997761720526064	DEFECT	0.00223827947393601	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9273412837711418	WITHOUT_CLASSIFICATION	0.07265871622885825	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.966954062279029	WITHOUT_CLASSIFICATION	0.03304593772097093	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9869997482239787	WITHOUT_CLASSIFICATION	0.013000251776021318	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999558757315197	WITHOUT_CLASSIFICATION	4.4124268480418635E-5	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9948029299994595	WITHOUT_CLASSIFICATION	0.005197070000540576	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9995596249849986	WITHOUT_CLASSIFICATION	4.403750150013942E-4	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.8059318451201174	WITHOUT_CLASSIFICATION	0.19406815487988252	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.7822461103296967	DEFECT	0.2177538896703034	WITHOUT_CLASSIFICATION
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.8936306358479195	WITHOUT_CLASSIFICATION	0.10636936415208052	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9986620052937185	WITHOUT_CLASSIFICATION	0.0013379947062815093	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.6577231377020095	DEFECT	0.34227686229799037	WITHOUT_CLASSIFICATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9971302351755607	WITHOUT_CLASSIFICATION	0.0028697648244393557	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.8443455841820601	WITHOUT_CLASSIFICATION	0.15565441581793993	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9693067592615632	WITHOUT_CLASSIFICATION	0.030693240738436864	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7095566801105716	WITHOUT_CLASSIFICATION	0.29044331988942845	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9996479263063676	DEFECT	3.5207369363253563E-4	WITHOUT_CLASSIFICATION
