test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999786182492	WITHOUT_CLASSIFICATION	2.138175077655744E-8	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999403882549898	WITHOUT_CLASSIFICATION	5.961174501025997E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999403882549898	WITHOUT_CLASSIFICATION	5.961174501025997E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999403882549898	WITHOUT_CLASSIFICATION	5.961174501025997E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999403882549898	WITHOUT_CLASSIFICATION	5.961174501025997E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999403882549898	WITHOUT_CLASSIFICATION	5.961174501025997E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999403882549898	WITHOUT_CLASSIFICATION	5.961174501025997E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999403882549898	WITHOUT_CLASSIFICATION	5.961174501025997E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999934691603122	WITHOUT_CLASSIFICATION	6.530839687803918E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999934691603122	WITHOUT_CLASSIFICATION	6.530839687803918E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999947607899118	WITHOUT_CLASSIFICATION	5.2392100881817435E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.99998229346068	WITHOUT_CLASSIFICATION	1.7706539320002912E-5	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999999078073023	WITHOUT_CLASSIFICATION	9.219269765694341E-8	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999934700954297	WITHOUT_CLASSIFICATION	6.5299045703318415E-6	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999934700954297	WITHOUT_CLASSIFICATION	6.5299045703318415E-6	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999968994742	WITHOUT_CLASSIFICATION	3.1005257956378036E-9	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999998028533837	WITHOUT_CLASSIFICATION	1.9714661630054865E-6	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999996578940668	WITHOUT_CLASSIFICATION	3.421059332726986E-7	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999843034983058	WITHOUT_CLASSIFICATION	1.5696501694167333E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999868135151948	WITHOUT_CLASSIFICATION	1.3186484805092978E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999868135151948	WITHOUT_CLASSIFICATION	1.3186484805092978E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9998307354191255	WITHOUT_CLASSIFICATION	1.6926458087446655E-4	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999998823504228	WITHOUT_CLASSIFICATION	1.1764957709461927E-7	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.999620951126749	WITHOUT_CLASSIFICATION	3.7904887325093537E-4	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999962242662233	WITHOUT_CLASSIFICATION	3.7757337767597994E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999984597395285	WITHOUT_CLASSIFICATION	1.540260471564811E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999877402006477	WITHOUT_CLASSIFICATION	1.2259799352279137E-5	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999930641699036	WITHOUT_CLASSIFICATION	6.935830096365631E-6	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999458972903478	WITHOUT_CLASSIFICATION	5.410270965220518E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998748292477488	WITHOUT_CLASSIFICATION	1.251707522511735E-4	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999999524768856	WITHOUT_CLASSIFICATION	4.752311442098409E-8	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999960357121527	WITHOUT_CLASSIFICATION	3.964287847331211E-6	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999843391555194	WITHOUT_CLASSIFICATION	1.566084448059178E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999963653752708	WITHOUT_CLASSIFICATION	3.634624729163421E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999872505833769	WITHOUT_CLASSIFICATION	1.2749416623117015E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999872505833769	WITHOUT_CLASSIFICATION	1.2749416623117015E-5	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.999996981167007	WITHOUT_CLASSIFICATION	3.0188329929767747E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999548470418455	WITHOUT_CLASSIFICATION	4.515295815461822E-5	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999620749715	WITHOUT_CLASSIFICATION	3.792502843281812E-8	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999996542955597	WITHOUT_CLASSIFICATION	3.457044402906933E-7	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999999546109571	WITHOUT_CLASSIFICATION	4.5389042828663526E-8	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999990064478871	WITHOUT_CLASSIFICATION	9.93552112910082E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999996701105142	WITHOUT_CLASSIFICATION	3.298894858612993E-7	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999899967702	WITHOUT_CLASSIFICATION	1.0003229761692127E-8	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999998884850111	WITHOUT_CLASSIFICATION	1.1151498897122791E-7	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999997164027677	WITHOUT_CLASSIFICATION	2.8359723220471314E-7	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999981641897991	WITHOUT_CLASSIFICATION	1.8358102009284784E-6	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999914417649104	WITHOUT_CLASSIFICATION	8.55823508962468E-6	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999866293986	WITHOUT_CLASSIFICATION	1.337060149057362E-8	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999991160457308	WITHOUT_CLASSIFICATION	8.839542693463724E-7	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999925030104676	WITHOUT_CLASSIFICATION	7.496989532360612E-6	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990049769427	WITHOUT_CLASSIFICATION	9.950230573243208E-7	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835742948399	WITHOUT_CLASSIFICATION	1.6425705160094324E-5	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999998857731311	WITHOUT_CLASSIFICATION	1.142268688432381E-7	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999990119134464	WITHOUT_CLASSIFICATION	9.880865536075544E-7	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999923075443519	WITHOUT_CLASSIFICATION	7.692455648091947E-6	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9703481776548442	WITHOUT_CLASSIFICATION	0.029651822345155836	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.999995823848575	WITHOUT_CLASSIFICATION	4.176151424921616E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999923075443519	WITHOUT_CLASSIFICATION	7.692455648091947E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.999995823848575	WITHOUT_CLASSIFICATION	4.176151424921616E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999964510497874	WITHOUT_CLASSIFICATION	3.5489502126749816E-6	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999999528936682	WITHOUT_CLASSIFICATION	4.710633182268623E-8	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999978319503541	WITHOUT_CLASSIFICATION	2.1680496458634428E-6	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999987673051246	WITHOUT_CLASSIFICATION	1.2326948753769915E-6	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999993453301	WITHOUT_CLASSIFICATION	6.546699248514571E-10	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999962795011	WITHOUT_CLASSIFICATION	3.7204989835472136E-9	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999225566804901	WITHOUT_CLASSIFICATION	7.744331950985847E-5	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999473683543268	WITHOUT_CLASSIFICATION	5.2631645673236155E-5	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999999493498361	WITHOUT_CLASSIFICATION	5.065016390432081E-7	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9999993567450162	WITHOUT_CLASSIFICATION	6.432549838890409E-7	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999954196083037	WITHOUT_CLASSIFICATION	4.580391696225597E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.999995823848575	WITHOUT_CLASSIFICATION	4.176151424921616E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999076449245	WITHOUT_CLASSIFICATION	9.235507550512028E-8	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999960563954051	WITHOUT_CLASSIFICATION	3.943604594900318E-6	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.999999781538653	WITHOUT_CLASSIFICATION	2.184613470746657E-7	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999953720139647	WITHOUT_CLASSIFICATION	4.627986035182663E-6	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999985896562849	WITHOUT_CLASSIFICATION	1.4103437152095728E-6	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999922300057582	WITHOUT_CLASSIFICATION	7.769994241860994E-6	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999989862159238	WITHOUT_CLASSIFICATION	1.0137840762566599E-6	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999995279935954	WITHOUT_CLASSIFICATION	4.7200640468926997E-7	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999996602752316	WITHOUT_CLASSIFICATION	3.397247684007865E-7	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999998460752	WITHOUT_CLASSIFICATION	1.5392483607453163E-10	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999700982748	WITHOUT_CLASSIFICATION	2.9901725285583584E-8	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999804157377459	WITHOUT_CLASSIFICATION	1.958426225413727E-5	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999837220688045	WITHOUT_CLASSIFICATION	1.6277931195512047E-5	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999981249847086	WITHOUT_CLASSIFICATION	1.8750152912497264E-6	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999998781496	WITHOUT_CLASSIFICATION	1.2185040451576393E-9	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999998209695692	WITHOUT_CLASSIFICATION	1.7903043074879632E-7	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999906895671	WITHOUT_CLASSIFICATION	9.310432743203237E-9	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999967027926	WITHOUT_CLASSIFICATION	3.2972073540328562E-9	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999897984765	WITHOUT_CLASSIFICATION	1.0201523627070413E-8	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999947210423	WITHOUT_CLASSIFICATION	5.278957706969051E-9	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998802267336379	WITHOUT_CLASSIFICATION	1.1977326636212247E-4	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999962710881125	WITHOUT_CLASSIFICATION	3.7289118874838837E-6	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999853335577618	WITHOUT_CLASSIFICATION	1.4666442238285744E-5	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998586048475	WITHOUT_CLASSIFICATION	1.4139515246573283E-7	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999962710881125	WITHOUT_CLASSIFICATION	3.7289118874838837E-6	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997196480943	WITHOUT_CLASSIFICATION	2.80351905732306E-7	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999985788242222	WITHOUT_CLASSIFICATION	1.4211757777762377E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999923075443519	WITHOUT_CLASSIFICATION	7.692455648091947E-6	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999995940114621	WITHOUT_CLASSIFICATION	4.059885379368945E-7	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999998684055953	WITHOUT_CLASSIFICATION	1.3159440469613087E-7	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999970055880351	WITHOUT_CLASSIFICATION	2.994411964988379E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999970055880351	WITHOUT_CLASSIFICATION	2.994411964988379E-6	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999776146252234	WITHOUT_CLASSIFICATION	2.2385374776712543E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999937602928	WITHOUT_CLASSIFICATION	6.239707136062566E-9	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999997214568113	WITHOUT_CLASSIFICATION	2.785431887138481E-7	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999995408423	WITHOUT_CLASSIFICATION	4.591577658711058E-10	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999941119243335	WITHOUT_CLASSIFICATION	5.8880756664657165E-6	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999649445264	WITHOUT_CLASSIFICATION	3.505547350233848E-8	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999990939899046	WITHOUT_CLASSIFICATION	9.060100954818265E-7	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999837108543302	WITHOUT_CLASSIFICATION	1.6289145669684448E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999076218319	WITHOUT_CLASSIFICATION	9.23781680727169E-8	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999996781860623	WITHOUT_CLASSIFICATION	3.218139377611298E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999913305617	WITHOUT_CLASSIFICATION	8.669438268583886E-9	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999913305617	WITHOUT_CLASSIFICATION	8.669438268583886E-9	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999907715904939	WITHOUT_CLASSIFICATION	9.228409506094082E-6	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999982345249513	WITHOUT_CLASSIFICATION	1.7654750487110083E-6	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999999842242953	WITHOUT_CLASSIFICATION	1.5775704695952838E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999913305617	WITHOUT_CLASSIFICATION	8.669438268583886E-9	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999907715904939	WITHOUT_CLASSIFICATION	9.228409506094082E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999907715904939	WITHOUT_CLASSIFICATION	9.228409506094082E-6	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999999980810033	WITHOUT_CLASSIFICATION	1.9189966894369163E-8	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999986243496867	WITHOUT_CLASSIFICATION	1.3756503133096357E-6	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999995668076371	WITHOUT_CLASSIFICATION	4.331923627778368E-7	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999968857987	WITHOUT_CLASSIFICATION	3.1142013236569216E-9	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999943734016636	WITHOUT_CLASSIFICATION	5.62659833634837E-6	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999943734016636	WITHOUT_CLASSIFICATION	5.62659833634837E-6	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999034890683	WITHOUT_CLASSIFICATION	9.651093170614033E-8	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999984988118936	WITHOUT_CLASSIFICATION	1.5011881064115184E-6	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999948721307993	WITHOUT_CLASSIFICATION	5.127869200720005E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999899271570567	WITHOUT_CLASSIFICATION	1.007284294330423E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999899271570567	WITHOUT_CLASSIFICATION	1.007284294330423E-5	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999976425453941	WITHOUT_CLASSIFICATION	2.3574546058262568E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9997604979854459	WITHOUT_CLASSIFICATION	2.3950201455400405E-4	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999935041121182	WITHOUT_CLASSIFICATION	6.49588788183935E-6	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999958846876	WITHOUT_CLASSIFICATION	4.11531248518255E-9	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999943407883	WITHOUT_CLASSIFICATION	5.659211661532976E-9	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999998788584886	WITHOUT_CLASSIFICATION	1.211415114183302E-7	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.999992305669322	WITHOUT_CLASSIFICATION	7.69433067806038E-6	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999998427415895	WITHOUT_CLASSIFICATION	1.5725841047907836E-7	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999992443798174	WITHOUT_CLASSIFICATION	7.55620182553589E-7	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999935041121182	WITHOUT_CLASSIFICATION	6.49588788183935E-6	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999505724296872	WITHOUT_CLASSIFICATION	4.942757031289386E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999789341075174	WITHOUT_CLASSIFICATION	2.1065892482640392E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999789341075174	WITHOUT_CLASSIFICATION	2.1065892482640392E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999998315887307	WITHOUT_CLASSIFICATION	1.6841126924646537E-7	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999988366452467	WITHOUT_CLASSIFICATION	1.1633547533600917E-6	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999065161952	WITHOUT_CLASSIFICATION	9.348380483018776E-8	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998486999931666	WITHOUT_CLASSIFICATION	1.5130000683330244E-4	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999509491320433	WITHOUT_CLASSIFICATION	4.905086795673182E-5	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999999348571031	WITHOUT_CLASSIFICATION	6.51428968923799E-8	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999687818203989	WITHOUT_CLASSIFICATION	3.121817960103194E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9990085107718225	WITHOUT_CLASSIFICATION	9.914892281775573E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999989648424	WITHOUT_CLASSIFICATION	1.0351575581876564E-9	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999982752339768	WITHOUT_CLASSIFICATION	1.724766023174457E-6	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999982752339768	WITHOUT_CLASSIFICATION	1.724766023174457E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999943102415804	WITHOUT_CLASSIFICATION	5.689758419717549E-6	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999786182492	WITHOUT_CLASSIFICATION	2.138175077655744E-8	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999992510264287	WITHOUT_CLASSIFICATION	7.48973571398434E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999403882549898	WITHOUT_CLASSIFICATION	5.961174501025997E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9999944478990033	WITHOUT_CLASSIFICATION	5.55210099668106E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999934691603122	WITHOUT_CLASSIFICATION	6.530839687803918E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999865775424381	WITHOUT_CLASSIFICATION	1.3422457561851114E-5	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999999046255653	WITHOUT_CLASSIFICATION	9.537443467041331E-8	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999993415094091	WITHOUT_CLASSIFICATION	6.584905909215913E-7	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9999811729467293	WITHOUT_CLASSIFICATION	1.8827053270791245E-5	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9992865902459658	WITHOUT_CLASSIFICATION	7.134097540342917E-4	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999780575996952	WITHOUT_CLASSIFICATION	2.194240030476344E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999536525225655	WITHOUT_CLASSIFICATION	4.634747743443675E-5	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999988223471679	WITHOUT_CLASSIFICATION	1.177652832133117E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.99998229346068	WITHOUT_CLASSIFICATION	1.7706539320002912E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999869292347197	WITHOUT_CLASSIFICATION	1.3070765280404748E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999869292347197	WITHOUT_CLASSIFICATION	1.3070765280404748E-5	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9999982244585067	WITHOUT_CLASSIFICATION	1.7755414931545274E-6	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999844148616995	WITHOUT_CLASSIFICATION	1.5585138300493762E-5	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999961056895773	WITHOUT_CLASSIFICATION	3.8943104226642085E-6	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999985532321327	WITHOUT_CLASSIFICATION	1.446767867201306E-6	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999942388031534	WITHOUT_CLASSIFICATION	5.761196846641303E-6	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999734564573	WITHOUT_CLASSIFICATION	2.6543542609312425E-8	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999934700954297	WITHOUT_CLASSIFICATION	6.5299045703318415E-6	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999981584125411	WITHOUT_CLASSIFICATION	1.8415874589046063E-6	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999961152980316	WITHOUT_CLASSIFICATION	3.884701968525622E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999981694771409	WITHOUT_CLASSIFICATION	1.8305228590354578E-6	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999970846933082	WITHOUT_CLASSIFICATION	2.9153066917963004E-6	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999923314694827	WITHOUT_CLASSIFICATION	7.668530517186713E-6	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9999192511653927	WITHOUT_CLASSIFICATION	8.07488346072548E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999996623034096	WITHOUT_CLASSIFICATION	3.3769659035216885E-7	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999536034575	WITHOUT_CLASSIFICATION	4.6396542430538325E-8	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999996788471233	WITHOUT_CLASSIFICATION	3.21152876645126E-7	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999896615359595	WITHOUT_CLASSIFICATION	1.0338464040624158E-5	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999930510878761	WITHOUT_CLASSIFICATION	6.948912123962416E-6	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.999999350794842	WITHOUT_CLASSIFICATION	6.492051579084894E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999403882549898	WITHOUT_CLASSIFICATION	5.961174501025997E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999403882549898	WITHOUT_CLASSIFICATION	5.961174501025997E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999934691603122	WITHOUT_CLASSIFICATION	6.530839687803918E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999934691603122	WITHOUT_CLASSIFICATION	6.530839687803918E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999536525225655	WITHOUT_CLASSIFICATION	4.634747743443675E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999869292347197	WITHOUT_CLASSIFICATION	1.3070765280404748E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999996623034096	WITHOUT_CLASSIFICATION	3.3769659035216885E-7	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999968994742	WITHOUT_CLASSIFICATION	3.1005257956378036E-9	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999945724760323	WITHOUT_CLASSIFICATION	5.427523967769273E-6	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999928570895087	WITHOUT_CLASSIFICATION	7.142910491345019E-6	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999118921364445	WITHOUT_CLASSIFICATION	8.810786355549983E-5	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999901032656322	WITHOUT_CLASSIFICATION	9.89673436787141E-6	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999992952761699	WITHOUT_CLASSIFICATION	7.047238299752524E-7	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9999522641248161	WITHOUT_CLASSIFICATION	4.7735875183872465E-5	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9995771598786998	WITHOUT_CLASSIFICATION	4.228401213002513E-4	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999805947248909	WITHOUT_CLASSIFICATION	1.9405275109198624E-5	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999999682395828	WITHOUT_CLASSIFICATION	3.1760417123510174E-8	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999953281170357	WITHOUT_CLASSIFICATION	4.671882964272035E-6	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999953281170357	WITHOUT_CLASSIFICATION	4.671882964272035E-6	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999941400971	WITHOUT_CLASSIFICATION	5.859902877202705E-9	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999976086410756	WITHOUT_CLASSIFICATION	2.3913589244812974E-6	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999981104820024	WITHOUT_CLASSIFICATION	1.8895179976547404E-6	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9996636452430812	WITHOUT_CLASSIFICATION	3.3635475691886187E-4	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.99999999821547	WITHOUT_CLASSIFICATION	1.7845299310394963E-9	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999999014634434	WITHOUT_CLASSIFICATION	9.85365566470554E-8	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999993584745517	WITHOUT_CLASSIFICATION	6.415254482912732E-7	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999998028533837	WITHOUT_CLASSIFICATION	1.9714661630054865E-6	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.999940047210631	WITHOUT_CLASSIFICATION	5.995278936901761E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999990625269031	WITHOUT_CLASSIFICATION	9.37473096897719E-7	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999990625269031	WITHOUT_CLASSIFICATION	9.37473096897719E-7	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9999999079203907	WITHOUT_CLASSIFICATION	9.207960933354598E-8	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999990790430133	WITHOUT_CLASSIFICATION	9.209569868216533E-7	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999971272260463	WITHOUT_CLASSIFICATION	2.872773953648201E-6	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.999997806957684	WITHOUT_CLASSIFICATION	2.1930423158899503E-6	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999582905791474	WITHOUT_CLASSIFICATION	4.170942085261927E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999934691603122	WITHOUT_CLASSIFICATION	6.530839687803918E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999536525225655	WITHOUT_CLASSIFICATION	4.634747743443675E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.99998229346068	WITHOUT_CLASSIFICATION	1.7706539320002912E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999996623034096	WITHOUT_CLASSIFICATION	3.3769659035216885E-7	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999996623034096	WITHOUT_CLASSIFICATION	3.3769659035216885E-7	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999938344693095	WITHOUT_CLASSIFICATION	6.165530690560869E-6	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999938344693095	WITHOUT_CLASSIFICATION	6.165530690560869E-6	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999991120866334	WITHOUT_CLASSIFICATION	8.879133665614168E-7	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999580584729464	WITHOUT_CLASSIFICATION	4.1941527053497536E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999580584729464	WITHOUT_CLASSIFICATION	4.1941527053497536E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999978124581238	WITHOUT_CLASSIFICATION	2.187541876191201E-6	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.999998743565354	WITHOUT_CLASSIFICATION	1.2564346459653418E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999993032624133	WITHOUT_CLASSIFICATION	6.967375868230961E-7	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999971137279002	WITHOUT_CLASSIFICATION	2.886272099743834E-6	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998162243982474	WITHOUT_CLASSIFICATION	1.837756017526241E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999843034983058	WITHOUT_CLASSIFICATION	1.5696501694167333E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999843034983058	WITHOUT_CLASSIFICATION	1.5696501694167333E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999889859988289	WITHOUT_CLASSIFICATION	1.1014001171106316E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999713947375747	WITHOUT_CLASSIFICATION	2.860526242534523E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999951335713562	WITHOUT_CLASSIFICATION	4.866428643775024E-6	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999651130201745	WITHOUT_CLASSIFICATION	3.488697982555024E-5	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999975467267818	WITHOUT_CLASSIFICATION	2.45327321831771E-6	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999951684450594	WITHOUT_CLASSIFICATION	4.8315549406020245E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999868135151948	WITHOUT_CLASSIFICATION	1.3186484805092978E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.999955349842354	WITHOUT_CLASSIFICATION	4.465015764598328E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.999955349842354	WITHOUT_CLASSIFICATION	4.465015764598328E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9998307354191255	WITHOUT_CLASSIFICATION	1.6926458087446655E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.9998307354191255	WITHOUT_CLASSIFICATION	1.6926458087446655E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999965439361947	WITHOUT_CLASSIFICATION	3.456063805106663E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999965439361947	WITHOUT_CLASSIFICATION	3.456063805106663E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999011692703	WITHOUT_CLASSIFICATION	9.883072964624989E-8	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999011692703	WITHOUT_CLASSIFICATION	9.883072964624989E-8	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999843034983058	WITHOUT_CLASSIFICATION	1.5696501694167333E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999868135151948	WITHOUT_CLASSIFICATION	1.3186484805092978E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.999955349842354	WITHOUT_CLASSIFICATION	4.465015764598328E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.999955349842354	WITHOUT_CLASSIFICATION	4.465015764598328E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9998307354191255	WITHOUT_CLASSIFICATION	1.6926458087446655E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999965439361947	WITHOUT_CLASSIFICATION	3.456063805106663E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999965439361947	WITHOUT_CLASSIFICATION	3.456063805106663E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999011692703	WITHOUT_CLASSIFICATION	9.883072964624989E-8	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999967520794577	WITHOUT_CLASSIFICATION	3.2479205422897734E-6	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999986689035133	WITHOUT_CLASSIFICATION	1.3310964866593313E-6	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999872934614947	WITHOUT_CLASSIFICATION	1.2706538505159742E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999996602032949	WITHOUT_CLASSIFICATION	3.397967050989184E-6	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999999227276375	WITHOUT_CLASSIFICATION	7.727236253770322E-8	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999665302043	WITHOUT_CLASSIFICATION	3.3469795699987034E-5	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999388353025211	WITHOUT_CLASSIFICATION	6.116469747882799E-5	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9870276707627953	WITHOUT_CLASSIFICATION	0.012972329237204556	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998376566566246	WITHOUT_CLASSIFICATION	1.623433433754098E-4	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999747033363	WITHOUT_CLASSIFICATION	2.529666369071734E-8	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999943561791408	WITHOUT_CLASSIFICATION	5.6438208592742486E-6	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997166207112	WITHOUT_CLASSIFICATION	2.8337928874649945E-7	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999776146252234	WITHOUT_CLASSIFICATION	2.2385374776712543E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999665302043	WITHOUT_CLASSIFICATION	3.3469795699987034E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999665302043	WITHOUT_CLASSIFICATION	3.3469795699987034E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999665302043	WITHOUT_CLASSIFICATION	3.3469795699987034E-5	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999813332469608	WITHOUT_CLASSIFICATION	1.8666753039258632E-5	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999867584578	WITHOUT_CLASSIFICATION	1.3241542203437642E-7	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999867584578	WITHOUT_CLASSIFICATION	1.3241542203437642E-7	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999838120083016	WITHOUT_CLASSIFICATION	1.6187991698378526E-5	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999933119531936	WITHOUT_CLASSIFICATION	6.688046806434748E-6	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999860983350455	WITHOUT_CLASSIFICATION	1.390166495458019E-5	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999907369418155	WITHOUT_CLASSIFICATION	9.26305818441549E-6	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999907369418155	WITHOUT_CLASSIFICATION	9.26305818441549E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999984597395285	WITHOUT_CLASSIFICATION	1.540260471564811E-6	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999968985860683	WITHOUT_CLASSIFICATION	3.101413931691565E-6	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999968985860683	WITHOUT_CLASSIFICATION	3.101413931691565E-6	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999974979422348	WITHOUT_CLASSIFICATION	2.5020577651143183E-6	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999997648706453	WITHOUT_CLASSIFICATION	2.3512935471695354E-7	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999947941590119	WITHOUT_CLASSIFICATION	5.205840988081797E-6	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998995606222463	WITHOUT_CLASSIFICATION	1.0043937775364094E-4	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9999652995037642	WITHOUT_CLASSIFICATION	3.4700496235662564E-5	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.99995664394507	WITHOUT_CLASSIFICATION	4.33560549301203E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999877402006477	WITHOUT_CLASSIFICATION	1.2259799352279137E-5	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998121194667441	WITHOUT_CLASSIFICATION	1.8788053325586562E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9900512368056839	WITHOUT_CLASSIFICATION	0.009948763194316182	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9998921314714418	WITHOUT_CLASSIFICATION	1.0786852855821765E-4	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999924825658377	WITHOUT_CLASSIFICATION	7.517434162353878E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998748292477488	WITHOUT_CLASSIFICATION	1.251707522511735E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999843001457	WITHOUT_CLASSIFICATION	1.569985430459762E-7	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999998801438836	WITHOUT_CLASSIFICATION	1.1985611641569532E-7	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999948600967712	WITHOUT_CLASSIFICATION	5.139903228725303E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998748292477488	WITHOUT_CLASSIFICATION	1.251707522511735E-4	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999993957218402	WITHOUT_CLASSIFICATION	6.042781597532796E-7	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999948166367804	WITHOUT_CLASSIFICATION	5.18336321967044E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999959130164938	WITHOUT_CLASSIFICATION	4.086983506161916E-6	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999229665808057	WITHOUT_CLASSIFICATION	7.703341919433231E-5	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999971210988453	WITHOUT_CLASSIFICATION	2.8789011547925207E-6	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999994921677153	WITHOUT_CLASSIFICATION	5.078322846977641E-6	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999964105798235	WITHOUT_CLASSIFICATION	3.5894201765937813E-6	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999843391555194	WITHOUT_CLASSIFICATION	1.566084448059178E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993054519004	WITHOUT_CLASSIFICATION	6.945480995712359E-7	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999963653752708	WITHOUT_CLASSIFICATION	3.634624729163421E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999968410959569	WITHOUT_CLASSIFICATION	3.1589040430393158E-6	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999997287013306	WITHOUT_CLASSIFICATION	2.7129866938119134E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999568865331258	WITHOUT_CLASSIFICATION	4.311346687431558E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999877402006477	WITHOUT_CLASSIFICATION	1.2259799352279137E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993054519004	WITHOUT_CLASSIFICATION	6.945480995712359E-7	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999968410959569	WITHOUT_CLASSIFICATION	3.1589040430393158E-6	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999568865331258	WITHOUT_CLASSIFICATION	4.311346687431558E-5	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999987286258234	WITHOUT_CLASSIFICATION	1.2713741765854026E-6	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9999418817240395	WITHOUT_CLASSIFICATION	5.811827596042691E-5	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999991777658364	WITHOUT_CLASSIFICATION	8.222341637250761E-7	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999872505833769	WITHOUT_CLASSIFICATION	1.2749416623117015E-5	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999931146942035	WITHOUT_CLASSIFICATION	6.885305796532954E-6	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9999783519297866	WITHOUT_CLASSIFICATION	2.1648070213427324E-5	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9999913706215383	WITHOUT_CLASSIFICATION	8.629378461730078E-6	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999993966033256	WITHOUT_CLASSIFICATION	6.0339667440652984E-6	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999972791380254	WITHOUT_CLASSIFICATION	2.7208619747106873E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.999999993379147	WITHOUT_CLASSIFICATION	6.620852994682059E-9	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998057477292	WITHOUT_CLASSIFICATION	1.942522708741201E-7	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999930399063934	WITHOUT_CLASSIFICATION	6.960093606558912E-6	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999980429437	WITHOUT_CLASSIFICATION	1.957056261162295E-9	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999995251851467	WITHOUT_CLASSIFICATION	4.7481485325205713E-7	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9999521553268702	WITHOUT_CLASSIFICATION	4.7844673129757864E-5	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999975410614179	WITHOUT_CLASSIFICATION	2.4589385821173355E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999548470418455	WITHOUT_CLASSIFICATION	4.515295815461822E-5	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999982098668475	WITHOUT_CLASSIFICATION	1.7901331526117456E-6	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.99997671591141	WITHOUT_CLASSIFICATION	2.3284088589986932E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993054519004	WITHOUT_CLASSIFICATION	6.945480995712359E-7	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999995511758188	WITHOUT_CLASSIFICATION	4.4882418107227747E-7	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999924068284	WITHOUT_CLASSIFICATION	7.593171661133647E-9	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999992867073124	WITHOUT_CLASSIFICATION	7.132926875465292E-7	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999998988411795	WITHOUT_CLASSIFICATION	1.0115882054953256E-7	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.999999798039044	WITHOUT_CLASSIFICATION	2.0196095607669652E-7	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999872807640772	WITHOUT_CLASSIFICATION	1.271923592271907E-5	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999996125964	WITHOUT_CLASSIFICATION	3.874035124256166E-10	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999706037872	WITHOUT_CLASSIFICATION	2.9396212790733124E-8	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999608938683998	WITHOUT_CLASSIFICATION	3.9106131600140454E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9999692885560165	WITHOUT_CLASSIFICATION	3.071144398343236E-5	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999935855055294	WITHOUT_CLASSIFICATION	6.41449447068132E-6	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999967448617725	WITHOUT_CLASSIFICATION	3.255138227509848E-6	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9998234540090098	WITHOUT_CLASSIFICATION	1.7654599099005644E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999996542955597	WITHOUT_CLASSIFICATION	3.457044402906933E-7	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999999346017922	WITHOUT_CLASSIFICATION	6.539820781677443E-8	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999982113138991	WITHOUT_CLASSIFICATION	1.7886861007985154E-6	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999954205776357	WITHOUT_CLASSIFICATION	4.579422364285128E-6	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999992328180778	WITHOUT_CLASSIFICATION	7.671819222307747E-7	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999994900141902	WITHOUT_CLASSIFICATION	5.099858098218589E-7	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999478126565472	WITHOUT_CLASSIFICATION	5.218734345290548E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999992707	WITHOUT_CLASSIFICATION	7.292525801473427E-13	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999994996261317	WITHOUT_CLASSIFICATION	5.003738682967917E-6	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999980659842	WITHOUT_CLASSIFICATION	1.9340158066321704E-8	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999970274019894	WITHOUT_CLASSIFICATION	2.972598010628077E-6	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999606433559983	WITHOUT_CLASSIFICATION	3.9356644001624815E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999606433559983	WITHOUT_CLASSIFICATION	3.9356644001624815E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999748141356399	WITHOUT_CLASSIFICATION	2.51858643600599E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999997894061515	WITHOUT_CLASSIFICATION	2.105938485028449E-6	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999997847294148	WITHOUT_CLASSIFICATION	2.152705852522081E-7	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999969822009181	WITHOUT_CLASSIFICATION	3.0177990818407307E-6	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999995971577171	WITHOUT_CLASSIFICATION	4.028422828468745E-7	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9974608333348604	WITHOUT_CLASSIFICATION	0.0025391666651396927	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999838672550082	WITHOUT_CLASSIFICATION	1.6132744991829722E-5	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999998130634286	WITHOUT_CLASSIFICATION	1.8693657152443633E-7	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999995288028433	WITHOUT_CLASSIFICATION	4.711971567084831E-6	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999983609105813	WITHOUT_CLASSIFICATION	1.6390894188508324E-6	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999970488155686	WITHOUT_CLASSIFICATION	2.9511844314672693E-6	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999994833436859	WITHOUT_CLASSIFICATION	5.166563141439021E-7	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999926889855395	WITHOUT_CLASSIFICATION	7.3110144604773085E-6	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999296475948605	WITHOUT_CLASSIFICATION	7.0352405139463E-5	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999947175985235	WITHOUT_CLASSIFICATION	5.282401476387888E-6	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999214258997379	WITHOUT_CLASSIFICATION	7.857410026208806E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.999987927901297	WITHOUT_CLASSIFICATION	1.2072098703063E-5	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999926381780846	WITHOUT_CLASSIFICATION	7.361821915411899E-6	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967618350508	WITHOUT_CLASSIFICATION	3.238164949076571E-6	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999586588062	WITHOUT_CLASSIFICATION	4.134119379813988E-8	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943066346794	WITHOUT_CLASSIFICATION	5.693365320678529E-6	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999445955537	WITHOUT_CLASSIFICATION	5.540444627387554E-8	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999963127195333	WITHOUT_CLASSIFICATION	3.687280466654173E-6	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9998656607194417	WITHOUT_CLASSIFICATION	1.3433928055828714E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999984556643099	WITHOUT_CLASSIFICATION	1.5443356900358783E-6	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999996898313266	WITHOUT_CLASSIFICATION	3.101686733131972E-7	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999986556132192	WITHOUT_CLASSIFICATION	1.344386780799307E-6	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999999808429659	WITHOUT_CLASSIFICATION	1.9157034108218135E-8	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999989124273283	WITHOUT_CLASSIFICATION	1.0875726716616486E-6	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999866847340926	WITHOUT_CLASSIFICATION	1.3315265907445264E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999586588062	WITHOUT_CLASSIFICATION	4.134119379813988E-8	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999693629271775	WITHOUT_CLASSIFICATION	3.063707282243346E-5	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999999923186484	WITHOUT_CLASSIFICATION	7.68135160395495E-8	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999999129327624	WITHOUT_CLASSIFICATION	8.706723768386852E-8	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999228733949493	WITHOUT_CLASSIFICATION	7.712660505074744E-5	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999228733949493	WITHOUT_CLASSIFICATION	7.712660505074744E-5	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999987662649	WITHOUT_CLASSIFICATION	1.2337350588161038E-9	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999991207905379	WITHOUT_CLASSIFICATION	8.792094621907072E-7	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999992147089975	WITHOUT_CLASSIFICATION	7.852910025058317E-6	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999992147089975	WITHOUT_CLASSIFICATION	7.852910025058317E-6	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999980659842	WITHOUT_CLASSIFICATION	1.9340158066321704E-8	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999957048435911	WITHOUT_CLASSIFICATION	4.295156408915968E-6	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999987072823879	WITHOUT_CLASSIFICATION	1.292717612018277E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999913325005	WITHOUT_CLASSIFICATION	8.667499491256932E-8	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999943102415804	WITHOUT_CLASSIFICATION	5.689758419717549E-6	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999987072823879	WITHOUT_CLASSIFICATION	1.292717612018277E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999913325005	WITHOUT_CLASSIFICATION	8.667499491256932E-8	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999999200573507	WITHOUT_CLASSIFICATION	7.994264938059146E-8	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999993192049623	WITHOUT_CLASSIFICATION	6.807950376545578E-7	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999841517812611	WITHOUT_CLASSIFICATION	1.58482187388857E-5	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999991445668805	WITHOUT_CLASSIFICATION	8.5543311932328E-7	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9997040166085124	WITHOUT_CLASSIFICATION	2.959833914876426E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999988580129338	WITHOUT_CLASSIFICATION	1.141987066247565E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999986570089008	WITHOUT_CLASSIFICATION	1.342991099214726E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999986570089008	WITHOUT_CLASSIFICATION	1.342991099214726E-6	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999736239670762	WITHOUT_CLASSIFICATION	2.637603292372528E-5	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999997373813	WITHOUT_CLASSIFICATION	2.626187721480539E-10	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999985265312159	WITHOUT_CLASSIFICATION	1.4734687840825669E-6	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999881036017	WITHOUT_CLASSIFICATION	1.1896398397437546E-8	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999999914327101	WITHOUT_CLASSIFICATION	8.567289916435756E-9	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999993118952653	WITHOUT_CLASSIFICATION	6.881047346561525E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999943102415804	WITHOUT_CLASSIFICATION	5.689758419717549E-6	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999976495950794	WITHOUT_CLASSIFICATION	2.3504049206686597E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999965461983752	WITHOUT_CLASSIFICATION	3.453801624835331E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999965461983752	WITHOUT_CLASSIFICATION	3.453801624835331E-6	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999934247544523	WITHOUT_CLASSIFICATION	6.575245547649331E-6	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999999200573507	WITHOUT_CLASSIFICATION	7.994264938059146E-8	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999143527186269	WITHOUT_CLASSIFICATION	8.564728137309727E-5	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9892532813772347	WITHOUT_CLASSIFICATION	0.01074671862276526	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999920128314822	WITHOUT_CLASSIFICATION	7.987168517799893E-5	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999982307244684	WITHOUT_CLASSIFICATION	1.7692755316309195E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993131316392069	WITHOUT_CLASSIFICATION	6.868683607930698E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999999200573507	WITHOUT_CLASSIFICATION	7.994264938059146E-8	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999982307244684	WITHOUT_CLASSIFICATION	1.7692755316309195E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993131316392069	WITHOUT_CLASSIFICATION	6.868683607930698E-4	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999963642522	WITHOUT_CLASSIFICATION	3.6357477312563757E-9	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999989442226218	WITHOUT_CLASSIFICATION	1.0557773782888656E-6	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999950635445376	WITHOUT_CLASSIFICATION	4.936455462409289E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999999200573507	WITHOUT_CLASSIFICATION	7.994264938059146E-8	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999999200573507	WITHOUT_CLASSIFICATION	7.994264938059146E-8	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999993643556847	WITHOUT_CLASSIFICATION	6.356443153279526E-7	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9999988059535996	WITHOUT_CLASSIFICATION	1.1940464003365532E-6	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999972436741824	WITHOUT_CLASSIFICATION	2.7563258175873633E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999991160457308	WITHOUT_CLASSIFICATION	8.839542693463724E-7	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999947759757217	WITHOUT_CLASSIFICATION	5.224024278322115E-6	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999712563352	WITHOUT_CLASSIFICATION	2.874366472582283E-8	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999994830620828	WITHOUT_CLASSIFICATION	5.169379172653737E-7	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999997508187409	WITHOUT_CLASSIFICATION	2.49181259051755E-7	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999985207874338	WITHOUT_CLASSIFICATION	1.479212566260903E-6	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9999906091620521	WITHOUT_CLASSIFICATION	9.39083794790326E-6	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999872603551733	WITHOUT_CLASSIFICATION	1.273964482678145E-5	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999999575337415	WITHOUT_CLASSIFICATION	4.24662585051339E-7	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999995397658793	WITHOUT_CLASSIFICATION	4.6023412068894076E-7	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999977404422858	WITHOUT_CLASSIFICATION	2.259557714130992E-6	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939234894849	WITHOUT_CLASSIFICATION	6.076510515149989E-6	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999985470677185	WITHOUT_CLASSIFICATION	1.4529322814794725E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999991160457308	WITHOUT_CLASSIFICATION	8.839542693463724E-7	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.999975101188712	WITHOUT_CLASSIFICATION	2.4898811287937723E-5	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999996491116879	WITHOUT_CLASSIFICATION	3.508883120076433E-7	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999949946979	WITHOUT_CLASSIFICATION	5.005302085280757E-9	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999982206109902	WITHOUT_CLASSIFICATION	1.7793890098778528E-6	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.999946711469755	WITHOUT_CLASSIFICATION	5.328853024492812E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.999946711469755	WITHOUT_CLASSIFICATION	5.328853024492812E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999991160457308	WITHOUT_CLASSIFICATION	8.839542693463724E-7	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999766451093307	WITHOUT_CLASSIFICATION	2.3354890669296632E-4	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999998456554985	WITHOUT_CLASSIFICATION	1.5434450164149073E-7	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998956013201131	WITHOUT_CLASSIFICATION	1.0439867988687041E-4	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999992413108509	WITHOUT_CLASSIFICATION	7.586891490657332E-7	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999981498832029	WITHOUT_CLASSIFICATION	1.8501167970218925E-6	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999995064585044	WITHOUT_CLASSIFICATION	4.93541495577015E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.99982653033761	WITHOUT_CLASSIFICATION	1.7346966238997532E-4	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999997283576563	WITHOUT_CLASSIFICATION	2.7164234374156574E-7	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999996693661	WITHOUT_CLASSIFICATION	3.306339111553042E-10	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998439184256	WITHOUT_CLASSIFICATION	1.56081574492982E-7	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998571720545645	WITHOUT_CLASSIFICATION	1.4282794543546325E-4	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9996787987937802	WITHOUT_CLASSIFICATION	3.212012062198836E-4	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999802118912189	WITHOUT_CLASSIFICATION	1.9788108781079926E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999996916115	WITHOUT_CLASSIFICATION	3.0838857145049196E-10	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979813185698	WITHOUT_CLASSIFICATION	2.018681430343966E-6	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999538289409614	WITHOUT_CLASSIFICATION	4.617105903856176E-5	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999984728923935	WITHOUT_CLASSIFICATION	1.527107606577978E-6	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999948755010681	WITHOUT_CLASSIFICATION	5.1244989319590965E-6	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986229930555	WITHOUT_CLASSIFICATION	1.377006944561423E-6	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999848447779028	WITHOUT_CLASSIFICATION	1.5155222097172221E-5	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999997967880673	WITHOUT_CLASSIFICATION	2.0321193273522563E-7	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999997939603542	WITHOUT_CLASSIFICATION	2.0603964582016794E-7	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999487795845188	WITHOUT_CLASSIFICATION	5.122041548126586E-5	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971983829995	WITHOUT_CLASSIFICATION	2.8016170004218053E-6	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772968165516	WITHOUT_CLASSIFICATION	2.2703183448493178E-5	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911696975493	WITHOUT_CLASSIFICATION	8.830302450657003E-6	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931191152338	WITHOUT_CLASSIFICATION	6.880884766085597E-6	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952680877707	WITHOUT_CLASSIFICATION	4.731912229327337E-6	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999792558890122	WITHOUT_CLASSIFICATION	2.074411098781489E-5	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977179912402	WITHOUT_CLASSIFICATION	2.2820087598847717E-6	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999991229541565	WITHOUT_CLASSIFICATION	8.77045843527686E-7	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999996253275764	WITHOUT_CLASSIFICATION	3.7467242361411197E-7	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972175918452	WITHOUT_CLASSIFICATION	2.7824081547664195E-6	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997289155523	WITHOUT_CLASSIFICATION	2.7108444762257885E-7	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994477399654	WITHOUT_CLASSIFICATION	5.522600346531163E-7	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987406326004	WITHOUT_CLASSIFICATION	1.2593673996057744E-6	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923757935004	WITHOUT_CLASSIFICATION	7.624206499522465E-6	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995481835798	WITHOUT_CLASSIFICATION	4.5181642021081185E-7	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988784920091	WITHOUT_CLASSIFICATION	1.1215079908556205E-6	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999749173248227	WITHOUT_CLASSIFICATION	2.5082675177259938E-5	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999116346040171	WITHOUT_CLASSIFICATION	8.836539598289999E-5	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999883183954807	WITHOUT_CLASSIFICATION	1.1681604519244913E-5	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9380075862637185	WITHOUT_CLASSIFICATION	0.06199241373628155	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999919396409775	WITHOUT_CLASSIFICATION	8.060359022533317E-6	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999999960223	WITHOUT_CLASSIFICATION	3.977656517271359E-12	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999989200164507	WITHOUT_CLASSIFICATION	1.0799835493451464E-6	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9999980373289844	WITHOUT_CLASSIFICATION	1.962671015648821E-6	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999992605616288	WITHOUT_CLASSIFICATION	7.394383712947491E-7	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999255767491	WITHOUT_CLASSIFICATION	7.44232508467409E-8	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999986277774808	WITHOUT_CLASSIFICATION	1.3722225191080488E-6	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999898137961287	WITHOUT_CLASSIFICATION	1.01862038712735E-5	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999994095028805	WITHOUT_CLASSIFICATION	5.904971194917353E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999994795988167	WITHOUT_CLASSIFICATION	5.204011833024914E-6	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999986288790547	WITHOUT_CLASSIFICATION	1.3711209453085328E-6	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999997201601702	WITHOUT_CLASSIFICATION	2.79839829677419E-7	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999934440666204	WITHOUT_CLASSIFICATION	6.555933379580047E-6	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999429776541582	WITHOUT_CLASSIFICATION	5.7022345841916774E-5	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9999268734693173	WITHOUT_CLASSIFICATION	7.312653068273666E-5	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9996750897707188	WITHOUT_CLASSIFICATION	3.249102292811483E-4	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952706092936	WITHOUT_CLASSIFICATION	4.729390706460586E-6	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999557442516295	WITHOUT_CLASSIFICATION	4.4255748370492416E-5	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996893529618	WITHOUT_CLASSIFICATION	3.1064703819594324E-6	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812339238678	WITHOUT_CLASSIFICATION	1.876607613210759E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9998968275049815	WITHOUT_CLASSIFICATION	1.0317249501847702E-4	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999998021856913	WITHOUT_CLASSIFICATION	1.9781430874287252E-7	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.999998992591318	WITHOUT_CLASSIFICATION	1.007408682054105E-6	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999497768370615	WITHOUT_CLASSIFICATION	5.0223162938502375E-5	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998777851661	WITHOUT_CLASSIFICATION	1.2221483394369406E-7	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999986655688621	WITHOUT_CLASSIFICATION	1.334431137887911E-6	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999906266656543	WITHOUT_CLASSIFICATION	9.373334345700006E-6	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999926937439211	WITHOUT_CLASSIFICATION	7.306256078855684E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999922494232	WITHOUT_CLASSIFICATION	7.750576931014672E-9	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999782789310065	WITHOUT_CLASSIFICATION	2.172106899339213E-5	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999992325226961	WITHOUT_CLASSIFICATION	7.674773038972273E-7	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999994341439796	WITHOUT_CLASSIFICATION	5.658560203033827E-7	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998693022474633	WITHOUT_CLASSIFICATION	1.3069775253669855E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999989200164507	WITHOUT_CLASSIFICATION	1.0799835493451464E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999891661506078	WITHOUT_CLASSIFICATION	1.0833849392196872E-4	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999776356447	WITHOUT_CLASSIFICATION	2.2364355240559294E-8	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999994856689265	WITHOUT_CLASSIFICATION	5.143310735492975E-7	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999856642146998	WITHOUT_CLASSIFICATION	1.4335785300271201E-5	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999632193822303	WITHOUT_CLASSIFICATION	3.678061776971285E-5	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9999994719817055	WITHOUT_CLASSIFICATION	5.280182944575777E-7	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9998968275049815	WITHOUT_CLASSIFICATION	1.0317249501847702E-4	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9995711161522942	WITHOUT_CLASSIFICATION	4.2888384770581946E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999993464942325	WITHOUT_CLASSIFICATION	6.535057676175503E-7	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999921768817044	WITHOUT_CLASSIFICATION	7.823118295604328E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999531847278395	WITHOUT_CLASSIFICATION	4.681527216048151E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999551781653419	WITHOUT_CLASSIFICATION	4.482183465815246E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999689965273	WITHOUT_CLASSIFICATION	3.100347276927744E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999991195848583	WITHOUT_CLASSIFICATION	8.804151417125267E-7	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999458433154	WITHOUT_CLASSIFICATION	5.41566845780336E-8	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999994653061671	WITHOUT_CLASSIFICATION	5.346938327979741E-7	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999900012112045	WITHOUT_CLASSIFICATION	9.998788795457686E-6	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.999999964162804	WITHOUT_CLASSIFICATION	3.583719600972759E-8	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999948020906088	WITHOUT_CLASSIFICATION	5.197909391223268E-6	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999999992527058	WITHOUT_CLASSIFICATION	7.472942136459868E-9	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9999988723406851	WITHOUT_CLASSIFICATION	1.1276593149410913E-6	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999974585491218	WITHOUT_CLASSIFICATION	2.541450878271532E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999998362534072	WITHOUT_CLASSIFICATION	1.6374659279210848E-6	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999855956272	WITHOUT_CLASSIFICATION	1.4404372808164535E-8	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999998965939173	WITHOUT_CLASSIFICATION	1.0340608278378355E-7	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999997850339705	WITHOUT_CLASSIFICATION	2.149660294876761E-7	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999955910149693	WITHOUT_CLASSIFICATION	4.4089850308080455E-6	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999840745557418	WITHOUT_CLASSIFICATION	1.5925444258158267E-5	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999988212470293	WITHOUT_CLASSIFICATION	1.1787529706933131E-6	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999998909707799	WITHOUT_CLASSIFICATION	1.0902922017801191E-7	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9814222889181992	WITHOUT_CLASSIFICATION	0.018577711081800823	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999991491993883	WITHOUT_CLASSIFICATION	8.508006117835159E-7	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999252881561	WITHOUT_CLASSIFICATION	7.471184395255942E-8	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999963858750116	WITHOUT_CLASSIFICATION	3.614124988268798E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999989200164507	WITHOUT_CLASSIFICATION	1.0799835493451464E-6	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9996888448522591	WITHOUT_CLASSIFICATION	3.1115514774097177E-4	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999392335376	WITHOUT_CLASSIFICATION	6.076646248428422E-8	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9995967237266531	WITHOUT_CLASSIFICATION	4.0327627334686917E-4	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999982501182176	WITHOUT_CLASSIFICATION	1.7498817823621125E-6	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999914653716624	WITHOUT_CLASSIFICATION	8.534628337554094E-6	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999926127024502	WITHOUT_CLASSIFICATION	7.387297549788188E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999989200164507	WITHOUT_CLASSIFICATION	1.0799835493451464E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999969261152244	WITHOUT_CLASSIFICATION	3.0738847756954736E-6	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999855956272	WITHOUT_CLASSIFICATION	1.4404372808164535E-8	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9993545714927081	WITHOUT_CLASSIFICATION	6.454285072918251E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999998362534072	WITHOUT_CLASSIFICATION	1.6374659279210848E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998489733191	WITHOUT_CLASSIFICATION	1.510266809518573E-7	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998380238980421	WITHOUT_CLASSIFICATION	1.6197610195793798E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998224577864	WITHOUT_CLASSIFICATION	1.7754221365631212E-7	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999921768817044	WITHOUT_CLASSIFICATION	7.823118295604328E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999531847278395	WITHOUT_CLASSIFICATION	4.681527216048151E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999551781653419	WITHOUT_CLASSIFICATION	4.482183465815246E-5	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.999999898956958	WITHOUT_CLASSIFICATION	1.0104304206724005E-7	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.999997521966126	WITHOUT_CLASSIFICATION	2.4780338740264195E-6	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999998694150284	WITHOUT_CLASSIFICATION	1.3058497161858194E-7	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999998362534072	WITHOUT_CLASSIFICATION	1.6374659279210848E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998489733191	WITHOUT_CLASSIFICATION	1.510266809518573E-7	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999989200164507	WITHOUT_CLASSIFICATION	1.0799835493451464E-6	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999689965273	WITHOUT_CLASSIFICATION	3.100347276927744E-8	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999991195848583	WITHOUT_CLASSIFICATION	8.804151417125267E-7	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999458433154	WITHOUT_CLASSIFICATION	5.41566845780336E-8	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999149325985	WITHOUT_CLASSIFICATION	8.506740143657676E-8	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959528727023	WITHOUT_CLASSIFICATION	4.047127297750344E-6	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999996583080705	WITHOUT_CLASSIFICATION	3.416919295867461E-7	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999767655782	WITHOUT_CLASSIFICATION	2.323442184098991E-8	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999994179748384	WITHOUT_CLASSIFICATION	5.820251615978441E-7	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999879342490477	WITHOUT_CLASSIFICATION	1.2065750952379308E-5	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999749173248227	WITHOUT_CLASSIFICATION	2.5082675177259938E-5	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999960768822551	WITHOUT_CLASSIFICATION	3.923117744897746E-5	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999998479891047	WITHOUT_CLASSIFICATION	1.5201089532575896E-7	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999993248089613	WITHOUT_CLASSIFICATION	6.751910387803843E-7	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999998889552915	WITHOUT_CLASSIFICATION	1.1104470862651958E-7	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999356847613	WITHOUT_CLASSIFICATION	6.43152386335913E-8	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931191152338	WITHOUT_CLASSIFICATION	6.880884766085597E-6	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952680877707	WITHOUT_CLASSIFICATION	4.731912229327337E-6	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997289155523	WITHOUT_CLASSIFICATION	2.7108444762257885E-7	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999356847613	WITHOUT_CLASSIFICATION	6.43152386335913E-8	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999995007250837	WITHOUT_CLASSIFICATION	4.992749162705444E-7	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999979528166784	WITHOUT_CLASSIFICATION	2.0471833215538427E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999548844110049	WITHOUT_CLASSIFICATION	4.511558899510267E-5	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999809639335688	WITHOUT_CLASSIFICATION	1.9036066431181498E-5	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999922615104465	WITHOUT_CLASSIFICATION	7.738489553427318E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999880978069267	WITHOUT_CLASSIFICATION	1.1902193073274227E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994477399654	WITHOUT_CLASSIFICATION	5.522600346531163E-7	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995481835798	WITHOUT_CLASSIFICATION	4.5181642021081185E-7	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999922494232	WITHOUT_CLASSIFICATION	7.750576931014672E-9	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999996932175548	WITHOUT_CLASSIFICATION	3.067824451882871E-7	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999999162864992	WITHOUT_CLASSIFICATION	8.371350080320937E-7	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999997467405054	WITHOUT_CLASSIFICATION	2.5325949451740134E-7	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999770590748	WITHOUT_CLASSIFICATION	2.2940925210186504E-8	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999999232413932	WITHOUT_CLASSIFICATION	7.675860679146546E-7	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999745215514	WITHOUT_CLASSIFICATION	2.5478448550999282E-8	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999970607435007	WITHOUT_CLASSIFICATION	2.9392564993829053E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.999995474330367	WITHOUT_CLASSIFICATION	4.5256696329941555E-6	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999996693661	WITHOUT_CLASSIFICATION	3.306339111553042E-10	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999897497171768	WITHOUT_CLASSIFICATION	1.0250282823114927E-5	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999908321445	WITHOUT_CLASSIFICATION	9.167855548602193E-9	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999947892980574	WITHOUT_CLASSIFICATION	5.210701942612767E-6	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999966383252078	WITHOUT_CLASSIFICATION	3.3616747921821506E-6	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998814095377	WITHOUT_CLASSIFICATION	1.1859046244884852E-7	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999987557373313	WITHOUT_CLASSIFICATION	1.2442626686554913E-6	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988712994438	WITHOUT_CLASSIFICATION	1.1287005562660473E-6	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975514641798	WITHOUT_CLASSIFICATION	2.4485358201879918E-5	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998774015852	WITHOUT_CLASSIFICATION	1.2259841472506112E-7	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999993494665854	WITHOUT_CLASSIFICATION	6.5053341460906E-6	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999566752507997	WITHOUT_CLASSIFICATION	4.3324749200319575E-5	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999584065006	WITHOUT_CLASSIFICATION	4.1593499398463774E-7	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997887046271	WITHOUT_CLASSIFICATION	2.1129537284981996E-7	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993750023937	WITHOUT_CLASSIFICATION	6.249976064129429E-7	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995935328522	WITHOUT_CLASSIFICATION	4.064671478819931E-7	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999979634851365	WITHOUT_CLASSIFICATION	2.0365148635077163E-6	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999999236870317	WITHOUT_CLASSIFICATION	7.631296830716654E-8	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996355142174	WITHOUT_CLASSIFICATION	3.644857826383057E-7	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999920724671683	WITHOUT_CLASSIFICATION	7.927532831650376E-6	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999753309567	WITHOUT_CLASSIFICATION	2.4669043246272385E-8	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974967526651	WITHOUT_CLASSIFICATION	2.5032473349414847E-6	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999998056916082	WITHOUT_CLASSIFICATION	1.9430839186008163E-7	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999995325066432	WITHOUT_CLASSIFICATION	4.6749335673746835E-7	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999887731887819	WITHOUT_CLASSIFICATION	1.1226811218136233E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999882313075509	WITHOUT_CLASSIFICATION	1.176869244912872E-5	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999920049418224	WITHOUT_CLASSIFICATION	7.995058177578107E-6	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999966047847366	WITHOUT_CLASSIFICATION	3.395215263397714E-6	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999994302470211	WITHOUT_CLASSIFICATION	5.697529788931888E-7	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999924813997568	WITHOUT_CLASSIFICATION	7.518600243166072E-6	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999999431138334	WITHOUT_CLASSIFICATION	5.688616648432488E-8	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999999875838423	WITHOUT_CLASSIFICATION	1.2416157698463604E-7	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9995531684300947	WITHOUT_CLASSIFICATION	4.4683156990541444E-4	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999999237353155	WITHOUT_CLASSIFICATION	7.626468449361412E-7	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999993163398	WITHOUT_CLASSIFICATION	6.836603147158039E-10	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999995481756759	WITHOUT_CLASSIFICATION	4.5182432394196146E-7	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999990784747376	WITHOUT_CLASSIFICATION	9.215252623976453E-7	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999999160527903	WITHOUT_CLASSIFICATION	8.394720979756689E-8	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999517503194	WITHOUT_CLASSIFICATION	4.82496804859666E-8	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999992444269895	WITHOUT_CLASSIFICATION	7.555730103968309E-7	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999852553678	WITHOUT_CLASSIFICATION	1.474463223544555E-8	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999610233514	WITHOUT_CLASSIFICATION	3.897664866507823E-8	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999990308246184	WITHOUT_CLASSIFICATION	9.691753816369928E-7	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999395861747881	WITHOUT_CLASSIFICATION	6.041382521190474E-4	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999992516693629	WITHOUT_CLASSIFICATION	7.483306372159074E-7	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999824160648619	WITHOUT_CLASSIFICATION	1.7583935138016536E-5	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999931811291	WITHOUT_CLASSIFICATION	6.81887091695173E-9	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999983464278793	WITHOUT_CLASSIFICATION	1.653572120749882E-6	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999988667587006	WITHOUT_CLASSIFICATION	1.1332412994653068E-6	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999977079109265	WITHOUT_CLASSIFICATION	2.2920890735822383E-6	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999972364547937	WITHOUT_CLASSIFICATION	2.763545206395233E-6	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999991163301557	WITHOUT_CLASSIFICATION	8.836698443052309E-7	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999996604202759	WITHOUT_CLASSIFICATION	3.39579724085973E-7	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999997570063591	WITHOUT_CLASSIFICATION	2.4299364089243053E-7	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999797592942947	WITHOUT_CLASSIFICATION	2.024070570531104E-5	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999750809957358	WITHOUT_CLASSIFICATION	2.4919004264120845E-5	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9995799135618123	WITHOUT_CLASSIFICATION	4.200864381876281E-4	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999859544952296	WITHOUT_CLASSIFICATION	1.4045504770386178E-5	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999724762872959	WITHOUT_CLASSIFICATION	2.7523712704204712E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999993694362571	WITHOUT_CLASSIFICATION	6.305637429455593E-7	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999812966274	WITHOUT_CLASSIFICATION	1.8703372713573862E-8	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999975489677628	WITHOUT_CLASSIFICATION	2.4510322371877036E-6	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999985967801679	WITHOUT_CLASSIFICATION	1.403219832051355E-6	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9992360156174422	WITHOUT_CLASSIFICATION	7.639843825577975E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9994482737290683	WITHOUT_CLASSIFICATION	5.517262709317942E-4	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999972963400784	WITHOUT_CLASSIFICATION	2.7036599216297066E-6	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8662053734866947	WITHOUT_CLASSIFICATION	0.13379462651330534	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999972753805	WITHOUT_CLASSIFICATION	2.7246195622707495E-9	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998519821934378	WITHOUT_CLASSIFICATION	1.480178065621612E-4	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999923457747	WITHOUT_CLASSIFICATION	7.654225198796086E-9	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999953228323	WITHOUT_CLASSIFICATION	4.6771676375255456E-9	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999968448906075	WITHOUT_CLASSIFICATION	3.1551093924668298E-6	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999907193526	WITHOUT_CLASSIFICATION	9.28064738910912E-9	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999987662085348	WITHOUT_CLASSIFICATION	1.2337914652304567E-6	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999990330409947	WITHOUT_CLASSIFICATION	9.669590053546564E-7	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999776870841978	WITHOUT_CLASSIFICATION	2.2312915802247468E-5	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999984288884631	WITHOUT_CLASSIFICATION	1.5711115368754935E-6	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999995265793326	WITHOUT_CLASSIFICATION	4.7342066755530336E-7	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999820547714	WITHOUT_CLASSIFICATION	1.7945228631492738E-8	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999990445215	WITHOUT_CLASSIFICATION	9.554784685753715E-10	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999992946402326	WITHOUT_CLASSIFICATION	7.053597674416917E-7	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999934640746964	WITHOUT_CLASSIFICATION	6.535925303717854E-6	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998045823982	WITHOUT_CLASSIFICATION	1.9541760179012148E-7	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999997178022763	WITHOUT_CLASSIFICATION	2.821977237130488E-7	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999990101898198	WITHOUT_CLASSIFICATION	9.898101801542008E-7	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999351345083178	WITHOUT_CLASSIFICATION	6.48654916821821E-5	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.999999920897501	WITHOUT_CLASSIFICATION	7.910249892563693E-8	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.999999706269683	WITHOUT_CLASSIFICATION	2.9373031692272525E-7	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9999522070385641	WITHOUT_CLASSIFICATION	4.779296143580211E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999997314750737	WITHOUT_CLASSIFICATION	2.6852492637600015E-7	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999549872222	WITHOUT_CLASSIFICATION	4.501277783761192E-8	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9991170880488275	WITHOUT_CLASSIFICATION	8.829119511726255E-4	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9999649801389906	WITHOUT_CLASSIFICATION	3.501986100947576E-5	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999997373938907	WITHOUT_CLASSIFICATION	2.626061092553329E-7	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9991170880488275	WITHOUT_CLASSIFICATION	8.829119511726255E-4	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999343103992	WITHOUT_CLASSIFICATION	6.568960070279214E-8	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999993411043303	WITHOUT_CLASSIFICATION	6.588956697667036E-7	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999995094910246	WITHOUT_CLASSIFICATION	4.905089753722501E-7	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999642129620155	WITHOUT_CLASSIFICATION	3.578703798446551E-5	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999998310185223	WITHOUT_CLASSIFICATION	1.6898147763598524E-7	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999861526311	WITHOUT_CLASSIFICATION	1.3847368890811137E-8	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999905762193415	WITHOUT_CLASSIFICATION	9.423780658400881E-6	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999999960106351	WITHOUT_CLASSIFICATION	3.98936490120962E-8	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.999999776106184	WITHOUT_CLASSIFICATION	2.2389381606212865E-7	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999976586426615	WITHOUT_CLASSIFICATION	2.341357338432865E-6	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999981685799774	WITHOUT_CLASSIFICATION	1.831420022519647E-6	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999957436272331	WITHOUT_CLASSIFICATION	4.256372766955747E-6	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999915519694	WITHOUT_CLASSIFICATION	8.448030579633958E-9	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999984152579	WITHOUT_CLASSIFICATION	1.5847421234098765E-9	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999996147027937	WITHOUT_CLASSIFICATION	3.852972061449665E-7	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999984844745257	WITHOUT_CLASSIFICATION	1.5155254742886707E-6	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999349534533024	WITHOUT_CLASSIFICATION	6.504654669757316E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999349534533024	WITHOUT_CLASSIFICATION	6.504654669757316E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999998409153216	WITHOUT_CLASSIFICATION	1.5908467839945747E-6	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9998314975000453	WITHOUT_CLASSIFICATION	1.6850249995471197E-4	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999772064762653	WITHOUT_CLASSIFICATION	2.279352373465578E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9999967534677818	WITHOUT_CLASSIFICATION	3.2465322183061532E-6	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999975058542844	WITHOUT_CLASSIFICATION	2.494145715606744E-6	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9392293634582112	WITHOUT_CLASSIFICATION	0.060770636541788846	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9999621747151025	WITHOUT_CLASSIFICATION	3.782528489758136E-5	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999996852915337	WITHOUT_CLASSIFICATION	3.147084663034213E-7	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999983172974007	WITHOUT_CLASSIFICATION	1.682702599259457E-6	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9997488620625086	WITHOUT_CLASSIFICATION	2.511379374914489E-4	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999986212645847	WITHOUT_CLASSIFICATION	1.3787354153117455E-6	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999992554851	WITHOUT_CLASSIFICATION	7.445148720915847E-10	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999998684479677	WITHOUT_CLASSIFICATION	1.3155203231918464E-7	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999999041059186	WITHOUT_CLASSIFICATION	9.589408140035004E-7	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999937746771	WITHOUT_CLASSIFICATION	6.225322942210514E-9	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999987557373313	WITHOUT_CLASSIFICATION	1.2442626686554913E-6	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.999999429451687	WITHOUT_CLASSIFICATION	5.705483130237777E-7	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999466196635	WITHOUT_CLASSIFICATION	5.338033645284044E-8	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.999997441934263	WITHOUT_CLASSIFICATION	2.558065737000902E-6	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999982039801341	WITHOUT_CLASSIFICATION	1.7960198659009445E-6	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999514181566	WITHOUT_CLASSIFICATION	4.8581843412769324E-8	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999991823284619	WITHOUT_CLASSIFICATION	8.176715379950279E-7	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999997762257107	WITHOUT_CLASSIFICATION	2.237742893306254E-7	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999006839018	WITHOUT_CLASSIFICATION	9.931609829107276E-8	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999238838264	WITHOUT_CLASSIFICATION	7.61161735696301E-8	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998195168148	WITHOUT_CLASSIFICATION	1.8048318516636066E-7	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999924279612	WITHOUT_CLASSIFICATION	7.572038861034157E-9	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999925236101597	WITHOUT_CLASSIFICATION	7.476389840277909E-6	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999982380353901	WITHOUT_CLASSIFICATION	1.761964609794912E-6	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9999722161242063	WITHOUT_CLASSIFICATION	2.7783875793693854E-5	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999929390049123	WITHOUT_CLASSIFICATION	7.060995087806869E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999999706521051	WITHOUT_CLASSIFICATION	2.934789489985523E-7	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9999469198994563	WITHOUT_CLASSIFICATION	5.3080100543774675E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999996519668277	WITHOUT_CLASSIFICATION	3.480331721929668E-7	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999965534863529	WITHOUT_CLASSIFICATION	3.446513647130935E-6	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999997640362975	WITHOUT_CLASSIFICATION	2.3596370240606184E-7	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999948990522733	WITHOUT_CLASSIFICATION	5.1009477266963715E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999897734167376	WITHOUT_CLASSIFICATION	1.0226583262473138E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999999685145979	WITHOUT_CLASSIFICATION	3.148540209284868E-7	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998802227117779	WITHOUT_CLASSIFICATION	1.1977728822207738E-4	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9999994798252352	WITHOUT_CLASSIFICATION	5.201747647175997E-7	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999998506110539	WITHOUT_CLASSIFICATION	1.4938894603569474E-7	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9982921859810399	WITHOUT_CLASSIFICATION	0.0017078140189600937	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999990811481457	WITHOUT_CLASSIFICATION	9.188518541848508E-7	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999953609838026	WITHOUT_CLASSIFICATION	4.639016197488051E-6	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999997394144889	WITHOUT_CLASSIFICATION	2.605855109774639E-7	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999540503977012	WITHOUT_CLASSIFICATION	4.594960229867627E-5	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999631312764928	WITHOUT_CLASSIFICATION	3.686872350706371E-5	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999664533502567	WITHOUT_CLASSIFICATION	3.354664974328756E-5	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.999605359770073	WITHOUT_CLASSIFICATION	3.9464022992689266E-4	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999910426729091	WITHOUT_CLASSIFICATION	8.957327090914788E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.999995474330367	WITHOUT_CLASSIFICATION	4.5256696329941555E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.999995474330367	WITHOUT_CLASSIFICATION	4.5256696329941555E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999987125143401	WITHOUT_CLASSIFICATION	1.2874856598960515E-6	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999962092980009	WITHOUT_CLASSIFICATION	3.790701998925784E-6	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9987266314827113	WITHOUT_CLASSIFICATION	0.0012733685172885533	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994847085571222	WITHOUT_CLASSIFICATION	5.152914428777669E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9987266314827113	WITHOUT_CLASSIFICATION	0.0012733685172885533	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999980578100808	WITHOUT_CLASSIFICATION	1.942189919273869E-6	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999979212832016	WITHOUT_CLASSIFICATION	2.0787167983406134E-6	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9999980622493165	WITHOUT_CLASSIFICATION	1.9377506834809295E-6	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999991820295672	WITHOUT_CLASSIFICATION	8.179704329319214E-7	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999994038427267	WITHOUT_CLASSIFICATION	5.961572733958466E-7	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999978207386586	WITHOUT_CLASSIFICATION	2.1792613413395796E-6	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999435533717	WITHOUT_CLASSIFICATION	5.64466282900823E-8	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9999495780697345	WITHOUT_CLASSIFICATION	5.04219302654336E-5	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999944958501	WITHOUT_CLASSIFICATION	5.504149893091107E-9	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999978033935588	WITHOUT_CLASSIFICATION	2.1966064412298392E-6	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999982864015536	WITHOUT_CLASSIFICATION	1.7135984463582607E-6	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999993147949396	WITHOUT_CLASSIFICATION	6.852050602737513E-7	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999992616777684	WITHOUT_CLASSIFICATION	7.383222315274161E-7	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9996342891708575	WITHOUT_CLASSIFICATION	3.657108291425249E-4	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999997971789	WITHOUT_CLASSIFICATION	2.0282116119144343E-10	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999987828576234	WITHOUT_CLASSIFICATION	1.2171423764765275E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999981737222039	WITHOUT_CLASSIFICATION	1.826277796048648E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999981737222039	WITHOUT_CLASSIFICATION	1.826277796048648E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999966887431828	WITHOUT_CLASSIFICATION	3.3112568171183503E-6	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999997837992968	WITHOUT_CLASSIFICATION	2.162007032798681E-7	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.99999958538633	WITHOUT_CLASSIFICATION	4.146136700212286E-7	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999993552497098	WITHOUT_CLASSIFICATION	6.447502901580981E-7	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999020957623	WITHOUT_CLASSIFICATION	9.790423769154842E-8	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999989743327553	WITHOUT_CLASSIFICATION	1.0256672447466995E-6	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999987474135622	WITHOUT_CLASSIFICATION	1.2525864377943526E-5	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999991388759057	WITHOUT_CLASSIFICATION	8.611240942936172E-7	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999997609915602	WITHOUT_CLASSIFICATION	2.390084398482889E-7	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999980596521229	WITHOUT_CLASSIFICATION	1.9403478771995633E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999986991730508	WITHOUT_CLASSIFICATION	1.3008269491058286E-6	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999934413555	WITHOUT_CLASSIFICATION	6.55864451308294E-9	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999753700036	WITHOUT_CLASSIFICATION	2.4629996387887725E-8	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999832741635227	WITHOUT_CLASSIFICATION	1.6725836477242496E-5	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999999159621562	WITHOUT_CLASSIFICATION	8.403784378920207E-7	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999562523982	WITHOUT_CLASSIFICATION	4.374760183786358E-8	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999990231814204	WITHOUT_CLASSIFICATION	9.768185796397416E-7	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999999104207971	WITHOUT_CLASSIFICATION	8.957920289409478E-7	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999990324979315	WITHOUT_CLASSIFICATION	9.675020684851059E-7	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999999995436212	WITHOUT_CLASSIFICATION	4.563788000936467E-9	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999891220429071	WITHOUT_CLASSIFICATION	1.087795709279922E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999856567588	WITHOUT_CLASSIFICATION	1.4343241154521913E-8	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999998808507334	WITHOUT_CLASSIFICATION	1.1914926650719783E-7	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999999998280487	WITHOUT_CLASSIFICATION	1.719512989289536E-9	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999994563784158	WITHOUT_CLASSIFICATION	5.436215842109511E-7	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999964690837627	WITHOUT_CLASSIFICATION	3.5309162371876964E-6	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999994079205106	WITHOUT_CLASSIFICATION	5.920794894560755E-7	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999651466037807	WITHOUT_CLASSIFICATION	3.485339621942005E-5	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999932710589763	WITHOUT_CLASSIFICATION	6.728941023646324E-6	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999725093628276	WITHOUT_CLASSIFICATION	2.7490637172420236E-5	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999996457666741	WITHOUT_CLASSIFICATION	3.5423332591717406E-7	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999996381400496	WITHOUT_CLASSIFICATION	3.618599505422545E-7	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999775661211577	WITHOUT_CLASSIFICATION	2.2433878842216506E-5	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999998885225055	WITHOUT_CLASSIFICATION	1.11477494494913E-7	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999955425708474	WITHOUT_CLASSIFICATION	4.457429152519865E-6	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999969769342	WITHOUT_CLASSIFICATION	3.023065805361901E-9	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999173563816	WITHOUT_CLASSIFICATION	8.264361845279666E-8	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999982220118765	WITHOUT_CLASSIFICATION	1.7779881234913557E-6	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999884196016176	WITHOUT_CLASSIFICATION	1.1580398382399675E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999980611661183	WITHOUT_CLASSIFICATION	1.9388338816978313E-5	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999971440015428	WITHOUT_CLASSIFICATION	2.8559984571247676E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938459564025	WITHOUT_CLASSIFICATION	6.154043597518246E-6	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9999983013373333	WITHOUT_CLASSIFICATION	1.6986626667718001E-6	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999880043890806	WITHOUT_CLASSIFICATION	1.1995610919394685E-4	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996531288217	WITHOUT_CLASSIFICATION	3.468711783756402E-7	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9992062031602416	WITHOUT_CLASSIFICATION	7.937968397583623E-4	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.954070285881321	WITHOUT_CLASSIFICATION	0.045929714118678994	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999979621431	WITHOUT_CLASSIFICATION	2.037856885669473E-9	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999980323623254	WITHOUT_CLASSIFICATION	1.9676376745434454E-6	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.999987393797282	WITHOUT_CLASSIFICATION	1.2606202718112493E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995433804468	WITHOUT_CLASSIFICATION	4.566195532076924E-6	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999598178486	WITHOUT_CLASSIFICATION	4.0182151309397194E-8	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9989971808917434	WITHOUT_CLASSIFICATION	0.0010028191082565735	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999999477835189	WITHOUT_CLASSIFICATION	5.221648108409204E-8	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999982297605957	WITHOUT_CLASSIFICATION	1.7702394042713013E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999969261152244	WITHOUT_CLASSIFICATION	3.0738847756954736E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999969261152244	WITHOUT_CLASSIFICATION	3.0738847756954736E-6	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999994408664902	WITHOUT_CLASSIFICATION	5.591335098829612E-7	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998718247259205	WITHOUT_CLASSIFICATION	1.2817527407949574E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999940379051901	WITHOUT_CLASSIFICATION	5.962094809801859E-6	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999880076651488	WITHOUT_CLASSIFICATION	1.199233485113619E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999995338555955	WITHOUT_CLASSIFICATION	4.6614440453156776E-7	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.999999943891983	WITHOUT_CLASSIFICATION	5.6108016977643886E-8	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999977546227641	WITHOUT_CLASSIFICATION	2.245377235910262E-6	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999999506469265	WITHOUT_CLASSIFICATION	4.935307349580707E-7	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999999885890972	WITHOUT_CLASSIFICATION	1.1410902676489243E-8	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999981760672317	WITHOUT_CLASSIFICATION	1.8239327683444914E-6	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999637451283	WITHOUT_CLASSIFICATION	3.625487166438522E-8	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999982952571639	WITHOUT_CLASSIFICATION	1.7047428361581204E-6	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999894495024858	WITHOUT_CLASSIFICATION	1.0550497514092617E-5	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999998441817721	WITHOUT_CLASSIFICATION	1.5581822790225198E-6	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999995686957073	WITHOUT_CLASSIFICATION	4.313042927407637E-7	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999475328742738	WITHOUT_CLASSIFICATION	5.246712572607225E-5	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999758094963815	WITHOUT_CLASSIFICATION	2.419050361840664E-5	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999994333142264	WITHOUT_CLASSIFICATION	5.66685773602338E-6	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.999990587631674	WITHOUT_CLASSIFICATION	9.412368325969941E-6	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998605982176509	WITHOUT_CLASSIFICATION	1.3940178234897474E-4	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999611056069797	WITHOUT_CLASSIFICATION	3.889439302023214E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999912812015	WITHOUT_CLASSIFICATION	8.718798467967724E-9	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999249867890797	WITHOUT_CLASSIFICATION	7.501321092028885E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998762881850828	WITHOUT_CLASSIFICATION	1.2371181491718712E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999066463829509	WITHOUT_CLASSIFICATION	9.33536170491364E-5	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9992526204713893	WITHOUT_CLASSIFICATION	7.473795286107668E-4	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9661567677689564	WITHOUT_CLASSIFICATION	0.03384323223104358	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999999478288169	WITHOUT_CLASSIFICATION	5.217118310768988E-7	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999351506455078	WITHOUT_CLASSIFICATION	6.484935449220545E-4	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999991818107041	WITHOUT_CLASSIFICATION	8.181892957789555E-7	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998762881850828	WITHOUT_CLASSIFICATION	1.2371181491718712E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999973939042842	WITHOUT_CLASSIFICATION	2.606095715890098E-6	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999974062542903	WITHOUT_CLASSIFICATION	2.593745709706047E-5	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9999813502182513	WITHOUT_CLASSIFICATION	1.8649781748685836E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999930257158588	WITHOUT_CLASSIFICATION	6.974284141299081E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999988594168	WITHOUT_CLASSIFICATION	1.1405831893408454E-9	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999996948851103	WITHOUT_CLASSIFICATION	3.0511488968329736E-7	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999983664071774	WITHOUT_CLASSIFICATION	1.6335928226102693E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999400162102	WITHOUT_CLASSIFICATION	5.998378989859169E-8	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999995474152804	WITHOUT_CLASSIFICATION	4.52584719637944E-7	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999930257158588	WITHOUT_CLASSIFICATION	6.974284141299081E-6	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999999475396658	WITHOUT_CLASSIFICATION	5.246033425026644E-8	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999400162102	WITHOUT_CLASSIFICATION	5.998378989859169E-8	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999700971392278	WITHOUT_CLASSIFICATION	2.990286077220303E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999921049580323	WITHOUT_CLASSIFICATION	7.895041967821276E-6	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999520902157	WITHOUT_CLASSIFICATION	4.7909784217895296E-8	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999986991730508	WITHOUT_CLASSIFICATION	1.3008269491058286E-6	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999854734605	WITHOUT_CLASSIFICATION	1.4526539490544846E-8	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999995347386277	WITHOUT_CLASSIFICATION	4.6526137226985715E-7	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999998772227661	WITHOUT_CLASSIFICATION	1.227772339706558E-7	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9997917677739451	WITHOUT_CLASSIFICATION	2.0823222605491178E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999812127222	WITHOUT_CLASSIFICATION	1.8787277866894213E-8	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999986064829544	WITHOUT_CLASSIFICATION	1.3935170456978702E-6	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999976647875	WITHOUT_CLASSIFICATION	2.33521234639303E-9	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999996632727561	WITHOUT_CLASSIFICATION	3.3672724389165075E-7	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998374831596	WITHOUT_CLASSIFICATION	1.6251684050895248E-7	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999996026256799	WITHOUT_CLASSIFICATION	3.973743200862629E-7	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999969673295011	WITHOUT_CLASSIFICATION	3.0326704989107792E-5	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999933514955	WITHOUT_CLASSIFICATION	6.648504565359551E-9	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999998914054116	WITHOUT_CLASSIFICATION	1.0859458851991077E-7	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.999934297920651	WITHOUT_CLASSIFICATION	6.57020793489776E-5	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999928620679	WITHOUT_CLASSIFICATION	7.1379321273644315E-9	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999990912068795	WITHOUT_CLASSIFICATION	9.087931205306793E-7	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999995453286771	WITHOUT_CLASSIFICATION	4.546713229408967E-7	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999983538190639	WITHOUT_CLASSIFICATION	1.6461809361391323E-6	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999989084511478	WITHOUT_CLASSIFICATION	1.0915488522159102E-6	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999868532890668	WITHOUT_CLASSIFICATION	1.3146710933178286E-5	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999853966928812	WITHOUT_CLASSIFICATION	1.4603307118723637E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.999999903697803	WITHOUT_CLASSIFICATION	9.630219696009788E-8	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999996822228768	WITHOUT_CLASSIFICATION	3.1777712320385956E-6	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999996419629156	WITHOUT_CLASSIFICATION	3.5803708446945817E-7	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999888786003212	WITHOUT_CLASSIFICATION	1.1121399678927677E-5	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999982614797425	WITHOUT_CLASSIFICATION	1.7385202575072034E-6	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999911467315317	WITHOUT_CLASSIFICATION	8.85326846829547E-6	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998191306768	WITHOUT_CLASSIFICATION	1.8086932323413233E-7	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610231163271	WITHOUT_CLASSIFICATION	3.8976883672856136E-5	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999054341608695	WITHOUT_CLASSIFICATION	9.456583913053993E-5	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999977483157397	WITHOUT_CLASSIFICATION	2.2516842602049016E-6	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999993568118246	WITHOUT_CLASSIFICATION	6.431881753989946E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999755592007	WITHOUT_CLASSIFICATION	2.4440799294802084E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999755592007	WITHOUT_CLASSIFICATION	2.4440799294802084E-8	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999991701852	WITHOUT_CLASSIFICATION	8.298147167369093E-10	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999959843105575	WITHOUT_CLASSIFICATION	4.015689442604108E-6	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999999592455227	WITHOUT_CLASSIFICATION	4.0754477293934885E-7	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999945887558193	WITHOUT_CLASSIFICATION	5.41124418075976E-6	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999985036460209	WITHOUT_CLASSIFICATION	1.4963539790370401E-6	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9995491010352446	WITHOUT_CLASSIFICATION	4.508989647554134E-4	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999964240145951	WITHOUT_CLASSIFICATION	3.575985405031083E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999987019454241	WITHOUT_CLASSIFICATION	1.2980545759212237E-6	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999378741125	WITHOUT_CLASSIFICATION	6.21258876017517E-8	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999998320741335	WITHOUT_CLASSIFICATION	1.6792586649971784E-6	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9996929716833696	WITHOUT_CLASSIFICATION	3.0702831663041057E-4	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999879151712	WITHOUT_CLASSIFICATION	1.2084828732932456E-8	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999977238873921	WITHOUT_CLASSIFICATION	2.276112607899076E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999755592007	WITHOUT_CLASSIFICATION	2.4440799294802084E-8	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999897344941208	WITHOUT_CLASSIFICATION	1.026550587929222E-5	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999623201450674	WITHOUT_CLASSIFICATION	3.7679854932738E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9983613250056096	WITHOUT_CLASSIFICATION	0.0016386749943903582	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999998533636907	WITHOUT_CLASSIFICATION	1.466363093414213E-7	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999989936222481	WITHOUT_CLASSIFICATION	1.0063777519811008E-6	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999962882370047	WITHOUT_CLASSIFICATION	3.7117629952685267E-6	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999960113064071	WITHOUT_CLASSIFICATION	3.9886935928434086E-6	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999995298952	WITHOUT_CLASSIFICATION	4.701047812418285E-10	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999988950498865	WITHOUT_CLASSIFICATION	1.1049501135591862E-6	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999998209451694	WITHOUT_CLASSIFICATION	1.7905483054771268E-7	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999975182816322	WITHOUT_CLASSIFICATION	2.481718367737843E-6	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998191306768	WITHOUT_CLASSIFICATION	1.8086932323413233E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999755592007	WITHOUT_CLASSIFICATION	2.4440799294802084E-8	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999867520173857	WITHOUT_CLASSIFICATION	1.3247982614249833E-5	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998296773844	WITHOUT_CLASSIFICATION	1.7032261565830878E-7	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999976712988834	WITHOUT_CLASSIFICATION	2.3287011165774444E-6	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999429270008924	WITHOUT_CLASSIFICATION	5.707299910771392E-5	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999976069284	WITHOUT_CLASSIFICATION	2.393071653972891E-9	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999950425309695	WITHOUT_CLASSIFICATION	4.9574690306013215E-6	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971389610132	WITHOUT_CLASSIFICATION	2.8610389867527383E-6	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999993438270052	WITHOUT_CLASSIFICATION	6.561729949461439E-7	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.99999962918703	WITHOUT_CLASSIFICATION	3.7081296999925567E-7	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999741291370742	WITHOUT_CLASSIFICATION	2.5870862925763517E-5	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999966397993569	WITHOUT_CLASSIFICATION	3.360200643061032E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999336554406513	WITHOUT_CLASSIFICATION	6.634455934867988E-5	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999983234441	WITHOUT_CLASSIFICATION	1.6765558762659892E-9	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999983397772003	WITHOUT_CLASSIFICATION	1.660222799630113E-6	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999980578100808	WITHOUT_CLASSIFICATION	1.942189919273869E-6	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999984616064026	WITHOUT_CLASSIFICATION	1.5383935974512652E-6	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999980493306214	WITHOUT_CLASSIFICATION	1.9506693785712677E-6	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999391310618944	WITHOUT_CLASSIFICATION	6.0868938105679015E-5	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.999999287425047	WITHOUT_CLASSIFICATION	7.125749531239823E-7	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999916342297002	WITHOUT_CLASSIFICATION	8.365770299788126E-6	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999997462683454	WITHOUT_CLASSIFICATION	2.537316545136537E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999997462683454	WITHOUT_CLASSIFICATION	2.537316545136537E-7	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999984972928075	WITHOUT_CLASSIFICATION	1.5027071924881259E-6	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999701916434	WITHOUT_CLASSIFICATION	2.980835654941303E-8	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999942872040964	WITHOUT_CLASSIFICATION	5.712795903583539E-6	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999699238423125	WITHOUT_CLASSIFICATION	3.0076157687478893E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999965458001491	WITHOUT_CLASSIFICATION	3.4541998509195538E-6	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999963290582857	WITHOUT_CLASSIFICATION	3.670941714196898E-6	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999992579007032	WITHOUT_CLASSIFICATION	7.420992968882441E-7	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999595858458485	WITHOUT_CLASSIFICATION	4.041415415155869E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999595858458485	WITHOUT_CLASSIFICATION	4.041415415155869E-5	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999888278138517	WITHOUT_CLASSIFICATION	1.1172186148343714E-5	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999999396644185	WITHOUT_CLASSIFICATION	6.033558158927953E-8	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999920796001626	WITHOUT_CLASSIFICATION	7.920399837545182E-6	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999823314426367	WITHOUT_CLASSIFICATION	1.7668557363383685E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999823314426367	WITHOUT_CLASSIFICATION	1.7668557363383685E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999823314426367	WITHOUT_CLASSIFICATION	1.7668557363383685E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999763851597213	WITHOUT_CLASSIFICATION	2.36148402787E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999994054131438	WITHOUT_CLASSIFICATION	5.945868561803402E-7	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999434232009	WITHOUT_CLASSIFICATION	5.6576799083245124E-8	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.8344573453017117	WITHOUT_CLASSIFICATION	0.16554265469828838	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999707556116099	WITHOUT_CLASSIFICATION	2.9244388390130563E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999755592007	WITHOUT_CLASSIFICATION	2.4440799294802084E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999755592007	WITHOUT_CLASSIFICATION	2.4440799294802084E-8	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999061499008763	WITHOUT_CLASSIFICATION	9.38500991236157E-5	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999995266962	WITHOUT_CLASSIFICATION	4.733038028456215E-10	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9997631639513421	WITHOUT_CLASSIFICATION	2.368360486577479E-4	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999990476288076	WITHOUT_CLASSIFICATION	9.523711923442665E-7	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998646339558	WITHOUT_CLASSIFICATION	1.3536604421530182E-7	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9991520286883161	WITHOUT_CLASSIFICATION	8.479713116837846E-4	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999989691237848	WITHOUT_CLASSIFICATION	1.03087621510587E-6	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9970158333937623	WITHOUT_CLASSIFICATION	0.0029841666062376377	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999946150071196	WITHOUT_CLASSIFICATION	5.3849928803062555E-6	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999746873872478	WITHOUT_CLASSIFICATION	2.5312612752146692E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997191249038	WITHOUT_CLASSIFICATION	2.808750960912088E-7	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999506459557227	WITHOUT_CLASSIFICATION	4.9354044277315574E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999978998090742	WITHOUT_CLASSIFICATION	2.100190925738723E-6	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999978998090742	WITHOUT_CLASSIFICATION	2.100190925738723E-6	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999988027312045	WITHOUT_CLASSIFICATION	1.197268795509224E-6	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999988027312045	WITHOUT_CLASSIFICATION	1.197268795509224E-6	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999991187030246	WITHOUT_CLASSIFICATION	8.812969754270573E-7	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999977003496586	WITHOUT_CLASSIFICATION	2.299650341385167E-6	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999977003496586	WITHOUT_CLASSIFICATION	2.299650341385167E-6	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999990677842809	WITHOUT_CLASSIFICATION	9.322157189895005E-7	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999967273203416	WITHOUT_CLASSIFICATION	3.272679658278103E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999323405565	WITHOUT_CLASSIFICATION	6.765944344972475E-8	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999997462683454	WITHOUT_CLASSIFICATION	2.537316545136537E-7	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999997656839069	WITHOUT_CLASSIFICATION	2.343160930762699E-7	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999967273203416	WITHOUT_CLASSIFICATION	3.272679658278103E-6	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999995146983	WITHOUT_CLASSIFICATION	4.853017266457327E-10	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999953531515325	WITHOUT_CLASSIFICATION	4.646848467480137E-6	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999986597088389	WITHOUT_CLASSIFICATION	1.3402911610840887E-6	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999991018078707	WITHOUT_CLASSIFICATION	8.98192129454372E-7	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999998403191	WITHOUT_CLASSIFICATION	1.5968096466135745E-10	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999999182008593	WITHOUT_CLASSIFICATION	8.179914063942526E-8	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999996654361343	WITHOUT_CLASSIFICATION	3.345638657128099E-7	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9775168250886614	WITHOUT_CLASSIFICATION	0.02248317491133851	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9979368281860238	WITHOUT_CLASSIFICATION	0.0020631718139762574	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999961140502063	WITHOUT_CLASSIFICATION	3.885949793814909E-6	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999998232150425	WITHOUT_CLASSIFICATION	1.7678495748028886E-7	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999944488958707	WITHOUT_CLASSIFICATION	5.551104129267368E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999975699849645	WITHOUT_CLASSIFICATION	2.430015035454041E-6	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999998982182708	WITHOUT_CLASSIFICATION	1.0178172917050036E-7	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9549363573342711	WITHOUT_CLASSIFICATION	0.04506364266572896	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999029840168691	WITHOUT_CLASSIFICATION	9.70159831308237E-5	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999644656846	WITHOUT_CLASSIFICATION	3.553431537400508E-8	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999985586133316	WITHOUT_CLASSIFICATION	1.441386668365353E-6	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999985586133316	WITHOUT_CLASSIFICATION	1.441386668365353E-6	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999998920241612	WITHOUT_CLASSIFICATION	1.0797583890931983E-7	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999995521882783	WITHOUT_CLASSIFICATION	4.478117217618527E-7	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999999874471508	WITHOUT_CLASSIFICATION	1.255284925988244E-8	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999989600241119	WITHOUT_CLASSIFICATION	1.0399758880225918E-6	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999998262670998	WITHOUT_CLASSIFICATION	1.737329002924869E-7	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999955682688663	WITHOUT_CLASSIFICATION	4.4317311336916876E-5	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999803870783	WITHOUT_CLASSIFICATION	1.961292169776542E-8	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999992155677841	WITHOUT_CLASSIFICATION	7.844322158191341E-7	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999932201760705	WITHOUT_CLASSIFICATION	6.779823929537805E-6	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999345318021	WITHOUT_CLASSIFICATION	6.546819780230157E-8	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999998527923938	WITHOUT_CLASSIFICATION	1.4720760624755105E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999336554406513	WITHOUT_CLASSIFICATION	6.634455934867988E-5	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999464750303	WITHOUT_CLASSIFICATION	5.3524969807640235E-8	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999100408261974	WITHOUT_CLASSIFICATION	8.995917380260521E-5	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999884795696593	WITHOUT_CLASSIFICATION	1.1520430340686637E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999891697076206	WITHOUT_CLASSIFICATION	1.0830292379350256E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999979848488969	WITHOUT_CLASSIFICATION	2.0151511029700226E-6	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999979848488969	WITHOUT_CLASSIFICATION	2.0151511029700226E-6	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999994485010422	WITHOUT_CLASSIFICATION	5.514989577578058E-7	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9997446378516597	WITHOUT_CLASSIFICATION	2.553621483402811E-4	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.995988632356973	WITHOUT_CLASSIFICATION	0.004011367643027015	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9987125422069073	WITHOUT_CLASSIFICATION	0.0012874577930926659	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9995150025644487	WITHOUT_CLASSIFICATION	4.8499743555128984E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999770713571481	WITHOUT_CLASSIFICATION	2.292864285194941E-5	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999999598170443	WITHOUT_CLASSIFICATION	4.018295573172526E-8	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999993904600515	WITHOUT_CLASSIFICATION	6.0953994849783005E-6	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999882711484684	WITHOUT_CLASSIFICATION	1.172885153154287E-5	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999982567393555	WITHOUT_CLASSIFICATION	1.7432606444409957E-6	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999996843074599	WITHOUT_CLASSIFICATION	3.1569254009270602E-6	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999993904600515	WITHOUT_CLASSIFICATION	6.0953994849783005E-6	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999916837812222	WITHOUT_CLASSIFICATION	8.316218777935494E-6	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999568564375	WITHOUT_CLASSIFICATION	4.314356253099383E-8	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999995949413658	WITHOUT_CLASSIFICATION	4.05058634207095E-7	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9999576756434221	WITHOUT_CLASSIFICATION	4.2324356577917384E-5	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999998889416347	WITHOUT_CLASSIFICATION	1.1105836516868133E-7	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998467847396	WITHOUT_CLASSIFICATION	1.532152602777429E-7	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999945136352	WITHOUT_CLASSIFICATION	5.486364707901442E-9	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999997813659409	WITHOUT_CLASSIFICATION	2.1863405913244774E-7	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999992338924867	WITHOUT_CLASSIFICATION	7.661075133464275E-7	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996040862273331	WITHOUT_CLASSIFICATION	3.9591377266697214E-4	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999977870547704	WITHOUT_CLASSIFICATION	2.2129452295970938E-5	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999925913525196	WITHOUT_CLASSIFICATION	7.408647480390614E-6	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999312413738	WITHOUT_CLASSIFICATION	6.87586262247019E-8	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999995624112465	WITHOUT_CLASSIFICATION	4.3758875336924444E-7	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999965962682968	WITHOUT_CLASSIFICATION	3.4037317031508215E-6	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999453957306	WITHOUT_CLASSIFICATION	5.4604269452434146E-8	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999882304998	WITHOUT_CLASSIFICATION	1.1769500109666441E-8	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999093720902611	WITHOUT_CLASSIFICATION	9.062790973902104E-5	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997537654546336	WITHOUT_CLASSIFICATION	2.4623454536635105E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999983142266	WITHOUT_CLASSIFICATION	1.6857733607148616E-9	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999964271115879	WITHOUT_CLASSIFICATION	3.572888412106492E-6	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999952084692287	WITHOUT_CLASSIFICATION	4.79153077124788E-6	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9974226575808446	WITHOUT_CLASSIFICATION	0.002577342419155353	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9998892514772689	WITHOUT_CLASSIFICATION	1.1074852273108006E-4	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999847342997	WITHOUT_CLASSIFICATION	1.526570025094693E-8	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999789341075174	WITHOUT_CLASSIFICATION	2.1065892482640392E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999992875563165	WITHOUT_CLASSIFICATION	7.124436834460251E-7	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999993810062953	WITHOUT_CLASSIFICATION	6.189937047754318E-7	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999993688063161	WITHOUT_CLASSIFICATION	6.311936839436616E-7	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999990990064822	WITHOUT_CLASSIFICATION	9.009935179171662E-7	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999389189279	WITHOUT_CLASSIFICATION	6.10810720125894E-8	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999817368602889	WITHOUT_CLASSIFICATION	1.8263139711134437E-5	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9996182233609266	WITHOUT_CLASSIFICATION	3.8177663907326426E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999990144316	WITHOUT_CLASSIFICATION	9.855683624158274E-10	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998155383862	WITHOUT_CLASSIFICATION	1.8446161387195112E-7	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999995749227925	WITHOUT_CLASSIFICATION	4.2507720751421795E-7	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999339627546	WITHOUT_CLASSIFICATION	6.603724547330058E-8	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999988090781404	WITHOUT_CLASSIFICATION	1.190921859606556E-6	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999912387962	WITHOUT_CLASSIFICATION	8.761203724430705E-9	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999785851296972	WITHOUT_CLASSIFICATION	2.141487030280983E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999227189985	WITHOUT_CLASSIFICATION	7.728100146776806E-8	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999978762179104	WITHOUT_CLASSIFICATION	2.123782089600295E-6	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999998708834706	WITHOUT_CLASSIFICATION	1.2911652940733083E-7	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999999979108	WITHOUT_CLASSIFICATION	2.089199998518526E-8	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999989879049005	WITHOUT_CLASSIFICATION	1.01209509942092E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999992369450782	WITHOUT_CLASSIFICATION	7.630549217319223E-7	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999900786449617	WITHOUT_CLASSIFICATION	9.921355038286856E-6	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999999862198189	WITHOUT_CLASSIFICATION	1.3780181099811697E-7	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999993183330053	WITHOUT_CLASSIFICATION	6.816669947416659E-7	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999816406512241	WITHOUT_CLASSIFICATION	1.835934877595575E-5	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986162518597	WITHOUT_CLASSIFICATION	1.38374814027049E-6	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997597231643	WITHOUT_CLASSIFICATION	2.4027683561345973E-7	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999954581864	WITHOUT_CLASSIFICATION	4.541813487086562E-9	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999277226037389	WITHOUT_CLASSIFICATION	7.227739626107597E-5	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999635797769	WITHOUT_CLASSIFICATION	3.642022306565014E-8	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999957250764614	WITHOUT_CLASSIFICATION	4.274923538613677E-6	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999336803554881	WITHOUT_CLASSIFICATION	6.631964451185369E-5	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.99996568058994	WITHOUT_CLASSIFICATION	3.4319410060074304E-5	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999997280448331	WITHOUT_CLASSIFICATION	2.7195516698170515E-7	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999771678462782	WITHOUT_CLASSIFICATION	2.2832153721798353E-5	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999978903276547	WITHOUT_CLASSIFICATION	2.109672345267117E-6	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999998661755645	WITHOUT_CLASSIFICATION	1.338244355274625E-7	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9990097443683595	WITHOUT_CLASSIFICATION	9.90255631640425E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9635470907599443	DEFECT	0.03645290924005575	WITHOUT_CLASSIFICATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999934429200723	WITHOUT_CLASSIFICATION	6.557079927699634E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999970072979708	WITHOUT_CLASSIFICATION	2.992702029218966E-6	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986162518597	WITHOUT_CLASSIFICATION	1.38374814027049E-6	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999994987784891	WITHOUT_CLASSIFICATION	5.012215107647254E-7	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999959142406015	WITHOUT_CLASSIFICATION	4.0857593984885544E-6	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999994909858987	WITHOUT_CLASSIFICATION	5.090141012672805E-7	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999996670972869	WITHOUT_CLASSIFICATION	3.329027130942474E-7	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999799062984005	WITHOUT_CLASSIFICATION	2.009370159950389E-4	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999690048889256	WITHOUT_CLASSIFICATION	3.099511107439393E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999882711484684	WITHOUT_CLASSIFICATION	1.172885153154287E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997726542371	WITHOUT_CLASSIFICATION	2.2734576282545564E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998155383862	WITHOUT_CLASSIFICATION	1.8446161387195112E-7	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9785937098099051	WITHOUT_CLASSIFICATION	0.021406290190094806	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999997607633792	WITHOUT_CLASSIFICATION	2.3923662082507397E-7	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999809179816	WITHOUT_CLASSIFICATION	1.9082018411145383E-8	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999833963005	WITHOUT_CLASSIFICATION	1.660369952768965E-8	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999995896225518	WITHOUT_CLASSIFICATION	4.103774482808858E-7	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999921757231124	WITHOUT_CLASSIFICATION	7.824276887589149E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998212658355186	WITHOUT_CLASSIFICATION	1.7873416448150331E-4	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999980484697572	WITHOUT_CLASSIFICATION	1.9515302427504514E-6	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9951837850457531	WITHOUT_CLASSIFICATION	0.004816214954246914	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999979855641218	WITHOUT_CLASSIFICATION	2.0144358782571783E-6	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998579232583	WITHOUT_CLASSIFICATION	1.4207674177481216E-7	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999996600880823	WITHOUT_CLASSIFICATION	3.399119176786377E-7	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999876056666884	WITHOUT_CLASSIFICATION	1.2394333311674878E-5	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999876056666884	WITHOUT_CLASSIFICATION	1.2394333311674878E-5	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999999898633297	WITHOUT_CLASSIFICATION	1.0136670307510589E-7	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998135115408	WITHOUT_CLASSIFICATION	1.8648845920628465E-7	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999962254494	WITHOUT_CLASSIFICATION	3.774550573182182E-9	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999998759993	WITHOUT_CLASSIFICATION	1.2400075943564689E-10	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999713533799	WITHOUT_CLASSIFICATION	2.864662010423991E-7	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999975768593424	WITHOUT_CLASSIFICATION	2.423140657541434E-6	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999781771064784	WITHOUT_CLASSIFICATION	2.1822893521550757E-5	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999996417634222	WITHOUT_CLASSIFICATION	3.5823657788031984E-7	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999994167370758	WITHOUT_CLASSIFICATION	5.832629242562319E-7	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999649592389492	WITHOUT_CLASSIFICATION	3.504076105071022E-5	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999016071174319	WITHOUT_CLASSIFICATION	9.839288256810802E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9999956383001204	WITHOUT_CLASSIFICATION	4.361699879603369E-6	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.999983098707204	WITHOUT_CLASSIFICATION	1.6901292795991723E-5	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998113785319	WITHOUT_CLASSIFICATION	1.8862146817912874E-7	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9995912461612789	WITHOUT_CLASSIFICATION	4.08753838720986E-4	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999878597138409	WITHOUT_CLASSIFICATION	1.2140286159155498E-5	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999998445646603	WITHOUT_CLASSIFICATION	1.5543533976549393E-7	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999882303146364	WITHOUT_CLASSIFICATION	1.1769685363606178E-5	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999995178941	WITHOUT_CLASSIFICATION	4.821058867697654E-10	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999769093850679	WITHOUT_CLASSIFICATION	2.309061493202456E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999777760833	WITHOUT_CLASSIFICATION	2.2223916706842904E-8	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9989360926924967	WITHOUT_CLASSIFICATION	0.0010639073075032102	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999999880588821	WITHOUT_CLASSIFICATION	1.19411178946812E-7	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999983457634074	WITHOUT_CLASSIFICATION	1.6542365926187437E-6	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999975926105383	WITHOUT_CLASSIFICATION	2.407389461622387E-6	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999999587852364	WITHOUT_CLASSIFICATION	4.121476357371848E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970612546413	WITHOUT_CLASSIFICATION	2.938745358745526E-6	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998571720545645	WITHOUT_CLASSIFICATION	1.4282794543546325E-4	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999998919620143	WITHOUT_CLASSIFICATION	1.080379857063457E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999979218546858	WITHOUT_CLASSIFICATION	2.078145314163346E-6	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999716370971597	WITHOUT_CLASSIFICATION	2.836290284027471E-5	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999977371094395	WITHOUT_CLASSIFICATION	2.262890560586385E-6	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999993201018806	WITHOUT_CLASSIFICATION	6.798981194246258E-7	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999862780387	WITHOUT_CLASSIFICATION	1.3721961378242008E-8	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999955981041448	WITHOUT_CLASSIFICATION	4.401895855141128E-6	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999997532041619	WITHOUT_CLASSIFICATION	2.4679583811550375E-7	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999995636637197	WITHOUT_CLASSIFICATION	4.363362802782604E-7	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999960237154107	WITHOUT_CLASSIFICATION	3.976284589292846E-6	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999985323989768	WITHOUT_CLASSIFICATION	1.4676010232113143E-6	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999996606148712	WITHOUT_CLASSIFICATION	3.393851288634307E-7	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999316889002	WITHOUT_CLASSIFICATION	6.831109979797384E-7	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970598835819	WITHOUT_CLASSIFICATION	2.9401164181063115E-5	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999644852777	WITHOUT_CLASSIFICATION	3.551472225947444E-8	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999592402497403	WITHOUT_CLASSIFICATION	4.075975025965357E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999991344911933	WITHOUT_CLASSIFICATION	8.655088066612094E-7	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999993337772926	WITHOUT_CLASSIFICATION	6.662227075085042E-7	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999548844110049	WITHOUT_CLASSIFICATION	4.511558899510267E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9900512368056839	WITHOUT_CLASSIFICATION	0.009948763194316182	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999436071619	WITHOUT_CLASSIFICATION	5.6392838116153365E-8	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999892414682	WITHOUT_CLASSIFICATION	1.0758531893414751E-8	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999995500147874	WITHOUT_CLASSIFICATION	4.4998521262416213E-7	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999176089941961	WITHOUT_CLASSIFICATION	8.239100580387202E-5	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999965141675	WITHOUT_CLASSIFICATION	3.4858324658584496E-9	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999693905492	WITHOUT_CLASSIFICATION	3.0609450669572415E-8	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999984561980065	WITHOUT_CLASSIFICATION	1.5438019933851834E-6	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999942829912062	WITHOUT_CLASSIFICATION	5.717008793846888E-6	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9997026760480249	WITHOUT_CLASSIFICATION	2.9732395197510926E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999942097474168	WITHOUT_CLASSIFICATION	5.790252583259267E-6	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999992408121375	WITHOUT_CLASSIFICATION	7.591878624556554E-7	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999940240703542	WITHOUT_CLASSIFICATION	5.9759296458074576E-6	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999176993564897	WITHOUT_CLASSIFICATION	8.230064351032052E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999964884540193	WITHOUT_CLASSIFICATION	3.5115459807195927E-6	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999956987718271	WITHOUT_CLASSIFICATION	4.3012281728544645E-6	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999997831922626	WITHOUT_CLASSIFICATION	2.1680773740935352E-7	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999269398775	WITHOUT_CLASSIFICATION	7.306012247978584E-8	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999960432285971	WITHOUT_CLASSIFICATION	3.956771402843142E-6	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999872106022554	WITHOUT_CLASSIFICATION	1.2789397744604526E-5	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998167433853	WITHOUT_CLASSIFICATION	1.8325661468693868E-7	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999999290174846	WITHOUT_CLASSIFICATION	7.098251540166897E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999345259841	WITHOUT_CLASSIFICATION	6.547401591041159E-8	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999997251173866	WITHOUT_CLASSIFICATION	2.748826134628262E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999345259841	WITHOUT_CLASSIFICATION	6.547401591041159E-8	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999977589898714	WITHOUT_CLASSIFICATION	2.241010128694492E-6	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999982455820605	WITHOUT_CLASSIFICATION	1.754417939561267E-6	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999974479576811	WITHOUT_CLASSIFICATION	2.5520423190054762E-6	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999510485362	WITHOUT_CLASSIFICATION	4.8951463797798335E-8	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999995960772053	WITHOUT_CLASSIFICATION	4.0392279456032305E-7	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999996121270793	WITHOUT_CLASSIFICATION	3.878729205769582E-7	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999979716629807	WITHOUT_CLASSIFICATION	2.028337019413585E-6	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999996070315179	WITHOUT_CLASSIFICATION	3.929684820792074E-7	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9997345282432475	WITHOUT_CLASSIFICATION	2.6547175675245083E-4	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999999861909707	WITHOUT_CLASSIFICATION	1.380902930421362E-7	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998470708412	WITHOUT_CLASSIFICATION	1.529291588278422E-7	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999992529052559	WITHOUT_CLASSIFICATION	7.470947440829418E-7	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999999999791678	WITHOUT_CLASSIFICATION	2.0832204526111155E-10	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999741277360777	WITHOUT_CLASSIFICATION	2.587226392225954E-5	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.99998189046422	WITHOUT_CLASSIFICATION	1.8109535779986843E-5	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999562630097	WITHOUT_CLASSIFICATION	4.373699028790204E-8	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.99999984846369	WITHOUT_CLASSIFICATION	1.5153631006882918E-7	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999996081605256	WITHOUT_CLASSIFICATION	3.918394743711321E-7	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999989382419	WITHOUT_CLASSIFICATION	1.0617582062432235E-9	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999851982199	WITHOUT_CLASSIFICATION	1.480178002421968E-8	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.99999925808009	WITHOUT_CLASSIFICATION	7.419199099483251E-7	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999999501922429	WITHOUT_CLASSIFICATION	4.9807757181861604E-8	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9991524131389585	WITHOUT_CLASSIFICATION	8.475868610414193E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999967661653195	WITHOUT_CLASSIFICATION	3.2338346805056735E-6	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.99999989936079	WITHOUT_CLASSIFICATION	1.0063921001048295E-7	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996056560260848	WITHOUT_CLASSIFICATION	3.943439739152521E-4	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9998866079971024	WITHOUT_CLASSIFICATION	1.1339200289763735E-4	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999916540155167	WITHOUT_CLASSIFICATION	8.345984483303045E-6	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999860491211	WITHOUT_CLASSIFICATION	1.3950878960905063E-8	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999811357549482	WITHOUT_CLASSIFICATION	1.8864245051805983E-5	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999915426064742	WITHOUT_CLASSIFICATION	8.457393525755924E-6	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9770078073252338	WITHOUT_CLASSIFICATION	0.022992192674766137	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9994072875409721	WITHOUT_CLASSIFICATION	5.927124590280139E-4	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9995962661635966	WITHOUT_CLASSIFICATION	4.0373383640335904E-4	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999757208027366	WITHOUT_CLASSIFICATION	2.4279197263371635E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999929004606541	WITHOUT_CLASSIFICATION	7.099539345864579E-6	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9999902362469859	WITHOUT_CLASSIFICATION	9.763753014136752E-6	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999907125672	WITHOUT_CLASSIFICATION	9.287432873192287E-9	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.999881555864906	WITHOUT_CLASSIFICATION	1.1844413509399721E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999142300702	WITHOUT_CLASSIFICATION	8.576992972464608E-8	DEFECT
an association	WITHOUT_CLASSIFICATION	0.999998628854081	WITHOUT_CLASSIFICATION	1.3711459190574772E-6	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9999193013702103	WITHOUT_CLASSIFICATION	8.06986297896967E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9995967237266531	WITHOUT_CLASSIFICATION	4.0327627334686917E-4	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996056560260848	WITHOUT_CLASSIFICATION	3.943439739152521E-4	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9997394453875316	WITHOUT_CLASSIFICATION	2.6055461246843185E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999944400080168	WITHOUT_CLASSIFICATION	5.559991983154105E-6	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9976943276236758	WITHOUT_CLASSIFICATION	0.0023056723763242876	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999671442694703	WITHOUT_CLASSIFICATION	3.285573052968298E-5	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9999984888008868	WITHOUT_CLASSIFICATION	1.5111991132042373E-6	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.999998003947487	WITHOUT_CLASSIFICATION	1.996052512944812E-6	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999335352261	WITHOUT_CLASSIFICATION	6.646477386908465E-8	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9882567851775257	DEFECT	0.011743214822474292	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.99999994154903	WITHOUT_CLASSIFICATION	5.845096993554448E-8	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999571215492902	WITHOUT_CLASSIFICATION	4.287845070991478E-5	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999930733636775	WITHOUT_CLASSIFICATION	6.926636322457041E-6	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999787809761	WITHOUT_CLASSIFICATION	2.1219023957466767E-8	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999828657721125	WITHOUT_CLASSIFICATION	1.7134227887495962E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999586658442309	WITHOUT_CLASSIFICATION	4.133415576912641E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999163269778	WITHOUT_CLASSIFICATION	8.367302214732363E-8	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999978011439	WITHOUT_CLASSIFICATION	2.1988561404929436E-9	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999450279848	WITHOUT_CLASSIFICATION	5.497201510941334E-8	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999998365428632	WITHOUT_CLASSIFICATION	1.6345713694854762E-7	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999981958779137	WITHOUT_CLASSIFICATION	1.80412208628199E-6	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9997394453875316	WITHOUT_CLASSIFICATION	2.6055461246843185E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999912407532812	WITHOUT_CLASSIFICATION	8.759246718971569E-6	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9994730102609842	WITHOUT_CLASSIFICATION	5.269897390158197E-4	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999956963014299	WITHOUT_CLASSIFICATION	4.303698570021757E-6	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998130582529	WITHOUT_CLASSIFICATION	1.8694174705937226E-7	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999839800138728	WITHOUT_CLASSIFICATION	1.601998612725613E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998156515811856	WITHOUT_CLASSIFICATION	1.843484188144137E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998156515811856	WITHOUT_CLASSIFICATION	1.843484188144137E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999971905930897	WITHOUT_CLASSIFICATION	2.8094069104529886E-6	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998156515811856	WITHOUT_CLASSIFICATION	1.843484188144137E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998156515811856	WITHOUT_CLASSIFICATION	1.843484188144137E-4	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9947675784864889	WITHOUT_CLASSIFICATION	0.005232421513511028	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998169089175595	WITHOUT_CLASSIFICATION	1.8309108244042387E-4	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999727457219	WITHOUT_CLASSIFICATION	2.725427807411342E-8	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998307417918	WITHOUT_CLASSIFICATION	1.6925820814676803E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9993681034847371	WITHOUT_CLASSIFICATION	6.318965152628165E-4	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999964107725	WITHOUT_CLASSIFICATION	3.5892273140158525E-9	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9967314661902131	WITHOUT_CLASSIFICATION	0.0032685338097869204	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999957491643	WITHOUT_CLASSIFICATION	4.250835705414941E-9	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999671161549722	WITHOUT_CLASSIFICATION	3.28838450277331E-5	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999937556115295	WITHOUT_CLASSIFICATION	6.244388470465166E-6	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999881009040423	WITHOUT_CLASSIFICATION	1.1899095957666296E-5	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999757177981571	WITHOUT_CLASSIFICATION	2.4282201842904575E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999992790688456	WITHOUT_CLASSIFICATION	7.209311544628503E-7	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999993396744873	WITHOUT_CLASSIFICATION	6.603255126096624E-7	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999998511653669	WITHOUT_CLASSIFICATION	1.4883463301942838E-7	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9910042957337111	WITHOUT_CLASSIFICATION	0.00899570426628898	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999987125143401	WITHOUT_CLASSIFICATION	1.2874856598960515E-6	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999404426425369	WITHOUT_CLASSIFICATION	5.9557357463048635E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998218939972628	WITHOUT_CLASSIFICATION	1.7810600273713585E-4	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999985712873602	WITHOUT_CLASSIFICATION	1.4287126397086938E-6	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999988085373733	WITHOUT_CLASSIFICATION	1.1914626266625054E-6	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999925856417579	WITHOUT_CLASSIFICATION	7.414358242198512E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999987125143401	WITHOUT_CLASSIFICATION	1.2874856598960515E-6	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9998866079971024	WITHOUT_CLASSIFICATION	1.1339200289763735E-4	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9999872081490335	WITHOUT_CLASSIFICATION	1.2791850966517673E-5	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995935328522	WITHOUT_CLASSIFICATION	4.064671478819931E-7	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996355142174	WITHOUT_CLASSIFICATION	3.644857826383057E-7	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9999974935740945	WITHOUT_CLASSIFICATION	2.506425905423942E-6	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999832766552132	WITHOUT_CLASSIFICATION	1.672334478679608E-4	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999997921308156	WITHOUT_CLASSIFICATION	2.0786918457292395E-7	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9984763165445675	WITHOUT_CLASSIFICATION	0.0015236834554324939	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999995438949715	WITHOUT_CLASSIFICATION	4.5610502847770873E-7	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999957665368	WITHOUT_CLASSIFICATION	4.233463229973999E-9	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999925703686425	WITHOUT_CLASSIFICATION	7.429631357489985E-6	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999953558410907	WITHOUT_CLASSIFICATION	4.644158909307904E-6	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999989784805517	WITHOUT_CLASSIFICATION	1.0215194482576874E-6	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999892540218	WITHOUT_CLASSIFICATION	1.0745978219696349E-8	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9995925736467853	WITHOUT_CLASSIFICATION	4.0742635321461957E-4	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999920355747	WITHOUT_CLASSIFICATION	7.964425305116226E-9	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999836745269326	WITHOUT_CLASSIFICATION	1.632547306749319E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999710101314145	WITHOUT_CLASSIFICATION	2.8989868585420995E-5	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999981950138863	WITHOUT_CLASSIFICATION	1.8049861137595527E-6	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999926259708365	WITHOUT_CLASSIFICATION	7.374029163568965E-6	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998954085157274	WITHOUT_CLASSIFICATION	1.0459148427259985E-4	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999999169205799	WITHOUT_CLASSIFICATION	8.307942017793183E-8	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999071788425	WITHOUT_CLASSIFICATION	9.28211575421039E-8	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999995438949715	WITHOUT_CLASSIFICATION	4.5610502847770873E-7	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.999999973891776	WITHOUT_CLASSIFICATION	2.610822404204017E-8	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999998411482521	WITHOUT_CLASSIFICATION	1.5885174791959207E-7	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999969024531802	WITHOUT_CLASSIFICATION	3.0975468197780253E-6	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999992962516857	WITHOUT_CLASSIFICATION	7.037483143586415E-7	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999808751837	WITHOUT_CLASSIFICATION	1.912481619330162E-8	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9999967739230292	WITHOUT_CLASSIFICATION	3.2260769707693054E-6	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999958211340718	WITHOUT_CLASSIFICATION	4.1788659281188506E-6	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9999997108779997	WITHOUT_CLASSIFICATION	2.8912200030349724E-7	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999994024602915	WITHOUT_CLASSIFICATION	5.975397085150666E-7	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9999573678860096	WITHOUT_CLASSIFICATION	4.263211399044347E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999733847054	WITHOUT_CLASSIFICATION	2.6615294572990788E-8	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999993867921754	WITHOUT_CLASSIFICATION	6.132078245957573E-7	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999959788634729	WITHOUT_CLASSIFICATION	4.02113652710566E-6	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999998590133	WITHOUT_CLASSIFICATION	1.4098660202729534E-10	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999943102415804	WITHOUT_CLASSIFICATION	5.689758419717549E-6	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999796387295714	WITHOUT_CLASSIFICATION	2.0361270428593727E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998747401577	WITHOUT_CLASSIFICATION	1.2525984223855056E-7	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999733847054	WITHOUT_CLASSIFICATION	2.6615294572990788E-8	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999736337135	WITHOUT_CLASSIFICATION	2.6366286497023622E-8	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9998972344316469	WITHOUT_CLASSIFICATION	1.0276556835305625E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999967351705641	WITHOUT_CLASSIFICATION	3.264829435881875E-6	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999996961679333	WITHOUT_CLASSIFICATION	3.0383206678752747E-7	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999403827212217	WITHOUT_CLASSIFICATION	5.961727877835704E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999998645035251	WITHOUT_CLASSIFICATION	1.3549647499691178E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999943102415804	WITHOUT_CLASSIFICATION	5.689758419717549E-6	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999937245854739	WITHOUT_CLASSIFICATION	6.275414526175401E-6	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934258558877	WITHOUT_CLASSIFICATION	6.5741441122790264E-6	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999049288116	WITHOUT_CLASSIFICATION	9.507118841841835E-8	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979925127815	WITHOUT_CLASSIFICATION	2.0074872183907806E-6	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983614327718	WITHOUT_CLASSIFICATION	1.6385672282327426E-6	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998466027377	WITHOUT_CLASSIFICATION	1.533972622226484E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999996427231652	WITHOUT_CLASSIFICATION	3.5727683478758864E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999996427231652	WITHOUT_CLASSIFICATION	3.5727683478758864E-7	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999802360492104	WITHOUT_CLASSIFICATION	1.9763950789698533E-5	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.99999940999161	WITHOUT_CLASSIFICATION	5.900083900639116E-7	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.999997937298168	WITHOUT_CLASSIFICATION	2.062701831994479E-6	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9999496984299078	WITHOUT_CLASSIFICATION	5.030157009215618E-5	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9895599831129558	WITHOUT_CLASSIFICATION	0.01044001688704416	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985192451829	WITHOUT_CLASSIFICATION	1.4807548171026735E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856257235832	WITHOUT_CLASSIFICATION	1.4374276416806612E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952857910652	WITHOUT_CLASSIFICATION	4.714208934776552E-6	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999982047354848	WITHOUT_CLASSIFICATION	1.7952645151863243E-6	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987764187409	WITHOUT_CLASSIFICATION	1.2235812591128006E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985192451829	WITHOUT_CLASSIFICATION	1.4807548171026735E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856257235832	WITHOUT_CLASSIFICATION	1.4374276416806612E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952857910652	WITHOUT_CLASSIFICATION	4.714208934776552E-6	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999985439699727	WITHOUT_CLASSIFICATION	1.4560300273392063E-6	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9999976263618795	WITHOUT_CLASSIFICATION	2.373638120534093E-6	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999963903297702	WITHOUT_CLASSIFICATION	3.6096702298602113E-6	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999996128950207	WITHOUT_CLASSIFICATION	3.871049794050088E-7	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999997471362059	WITHOUT_CLASSIFICATION	2.5286379417079906E-7	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9980094495580056	WITHOUT_CLASSIFICATION	0.0019905504419943597	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999923812768071	WITHOUT_CLASSIFICATION	7.618723192936486E-6	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999998732297237	WITHOUT_CLASSIFICATION	1.267702761901962E-7	DEFECT
stats	WITHOUT_CLASSIFICATION	0.999995996460368	WITHOUT_CLASSIFICATION	4.003539631929149E-6	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999958616263389	WITHOUT_CLASSIFICATION	4.1383736610230115E-6	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999705922231	WITHOUT_CLASSIFICATION	2.9407776885078665E-8	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9990306023359027	WITHOUT_CLASSIFICATION	9.693976640972907E-4	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9995100106104023	WITHOUT_CLASSIFICATION	4.899893895977033E-4	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999987938589548	WITHOUT_CLASSIFICATION	1.2061410451981309E-6	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999389679219	WITHOUT_CLASSIFICATION	6.103207809774446E-7	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999913606518338	WITHOUT_CLASSIFICATION	8.639348166180866E-6	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999999576256849	WITHOUT_CLASSIFICATION	4.2374315121115134E-8	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999884020711921	WITHOUT_CLASSIFICATION	1.1597928807877873E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.999997638762726	WITHOUT_CLASSIFICATION	2.3612372740607135E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999990142272126	WITHOUT_CLASSIFICATION	9.857727874118315E-7	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999973279758897	WITHOUT_CLASSIFICATION	2.6720241102779005E-6	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9995624286668731	WITHOUT_CLASSIFICATION	4.3757133312691786E-4	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999931950065	WITHOUT_CLASSIFICATION	6.804993342341392E-9	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999987437412405	WITHOUT_CLASSIFICATION	1.2562587594814522E-6	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999783921115	WITHOUT_CLASSIFICATION	2.1607888435323704E-8	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999842089590805	WITHOUT_CLASSIFICATION	1.5791040919486178E-5	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880841114276	WITHOUT_CLASSIFICATION	1.1915888572425341E-5	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912553848853	WITHOUT_CLASSIFICATION	8.744615114587304E-6	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999964570621	WITHOUT_CLASSIFICATION	3.5429380128459424E-9	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920728533122	WITHOUT_CLASSIFICATION	7.927146687913573E-6	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997368351986887	WITHOUT_CLASSIFICATION	2.6316480131125994E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998045823982	WITHOUT_CLASSIFICATION	1.9541760179012148E-7	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998045823982	WITHOUT_CLASSIFICATION	1.9541760179012148E-7	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999757220375	WITHOUT_CLASSIFICATION	2.4277962510438083E-8	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999988519325278	WITHOUT_CLASSIFICATION	1.1480674721751842E-6	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999996778457584	WITHOUT_CLASSIFICATION	3.2215424152184095E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999336554406513	WITHOUT_CLASSIFICATION	6.634455934867988E-5	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999999863971919	WITHOUT_CLASSIFICATION	1.3602808053104318E-8	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999986572738873	WITHOUT_CLASSIFICATION	1.3427261127124965E-6	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999923880531115	WITHOUT_CLASSIFICATION	7.611946888466433E-6	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999999420673883	WITHOUT_CLASSIFICATION	5.793261183482273E-8	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999997314750737	WITHOUT_CLASSIFICATION	2.6852492637600015E-7	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998251090155	WITHOUT_CLASSIFICATION	1.7489098448036313E-7	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993555814338	WITHOUT_CLASSIFICATION	6.44418566112082E-7	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992449740722	WITHOUT_CLASSIFICATION	7.550259278136708E-7	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997573201608	WITHOUT_CLASSIFICATION	2.426798391545782E-7	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999551361254	WITHOUT_CLASSIFICATION	4.486387468155658E-8	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999631869861	WITHOUT_CLASSIFICATION	3.6813013903341574E-7	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995522523465	WITHOUT_CLASSIFICATION	4.4774765345258504E-7	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998283067211	WITHOUT_CLASSIFICATION	1.7169327892863894E-7	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992555460552	WITHOUT_CLASSIFICATION	7.444539447412186E-7	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990365758725	WITHOUT_CLASSIFICATION	9.63424127437013E-7	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999557217144	WITHOUT_CLASSIFICATION	4.427828562808798E-8	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999999907197898	WITHOUT_CLASSIFICATION	9.280210199970592E-8	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.999038131099699	WITHOUT_CLASSIFICATION	9.618689003011502E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999935579470997	WITHOUT_CLASSIFICATION	6.442052900339221E-6	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999990764627869	WITHOUT_CLASSIFICATION	9.235372131002963E-7	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998801211324	WITHOUT_CLASSIFICATION	1.1987886756705076E-7	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9999991337746316	WITHOUT_CLASSIFICATION	8.662253684260537E-7	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.999999979991497	WITHOUT_CLASSIFICATION	2.0008502946711282E-8	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999744428997703	WITHOUT_CLASSIFICATION	2.555710022967407E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999935579470997	WITHOUT_CLASSIFICATION	6.442052900339221E-6	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999935579470997	WITHOUT_CLASSIFICATION	6.442052900339221E-6	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999975125748328	WITHOUT_CLASSIFICATION	2.4874251672136493E-6	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999994940950566	WITHOUT_CLASSIFICATION	5.059049433404738E-7	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999919357739	WITHOUT_CLASSIFICATION	8.064225991077298E-9	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999981902754828	WITHOUT_CLASSIFICATION	1.809724517186117E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999975699849645	WITHOUT_CLASSIFICATION	2.430015035454041E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999990142272126	WITHOUT_CLASSIFICATION	9.857727874118315E-7	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999438002711	WITHOUT_CLASSIFICATION	5.619972890311845E-8	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999343916105555	WITHOUT_CLASSIFICATION	6.560838944441228E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999984865176744	WITHOUT_CLASSIFICATION	1.5134823256594464E-6	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914386054832	WITHOUT_CLASSIFICATION	8.56139451686136E-6	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999951726396658	WITHOUT_CLASSIFICATION	4.8273603342723194E-6	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999565869336063	WITHOUT_CLASSIFICATION	4.341306639362526E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999924652073482	WITHOUT_CLASSIFICATION	7.534792651835627E-6	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999924652073482	WITHOUT_CLASSIFICATION	7.534792651835627E-6	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999993573301184	WITHOUT_CLASSIFICATION	6.426698817147943E-7	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999993573301184	WITHOUT_CLASSIFICATION	6.426698817147943E-7	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969333522181	WITHOUT_CLASSIFICATION	3.0666477818537067E-6	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932775944749	WITHOUT_CLASSIFICATION	6.722405525181332E-6	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999879146651764	WITHOUT_CLASSIFICATION	1.2085334823646466E-5	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988519500682	WITHOUT_CLASSIFICATION	1.148049931831246E-6	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999625882810845	WITHOUT_CLASSIFICATION	3.741171891542116E-5	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9997548122135606	WITHOUT_CLASSIFICATION	2.4518778643945144E-4	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998145584359465	WITHOUT_CLASSIFICATION	1.8544156405344455E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860303801406	WITHOUT_CLASSIFICATION	1.3969619859370802E-5	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999977246455134	WITHOUT_CLASSIFICATION	2.27535448669866E-6	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999999616095315	WITHOUT_CLASSIFICATION	3.8390468522931174E-8	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999261135577	WITHOUT_CLASSIFICATION	7.388644227549303E-8	DEFECT
package	WITHOUT_CLASSIFICATION	0.999995474330367	WITHOUT_CLASSIFICATION	4.5256696329941555E-6	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999992729997258	WITHOUT_CLASSIFICATION	7.270002741334531E-7	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999984682667094	WITHOUT_CLASSIFICATION	1.5317332907343387E-6	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999973782988423	WITHOUT_CLASSIFICATION	2.621701157697989E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999961030977892	WITHOUT_CLASSIFICATION	3.896902210818298E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999961030977892	WITHOUT_CLASSIFICATION	3.896902210818298E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999961030977892	WITHOUT_CLASSIFICATION	3.896902210818298E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999957111835	WITHOUT_CLASSIFICATION	4.288816509189084E-9	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9997689872871618	WITHOUT_CLASSIFICATION	2.3101271283825395E-4	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999997909591	WITHOUT_CLASSIFICATION	2.090409130635424E-10	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998718690938304	WITHOUT_CLASSIFICATION	1.2813090616965072E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990435286453	WITHOUT_CLASSIFICATION	9.56471354604104E-7	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994720574662	WITHOUT_CLASSIFICATION	5.279425338122815E-7	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999981321638496	WITHOUT_CLASSIFICATION	1.867836150360172E-6	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998137752816224	WITHOUT_CLASSIFICATION	1.8622471837751172E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999997573424685	WITHOUT_CLASSIFICATION	2.4265753153929896E-7	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999999930264367	WITHOUT_CLASSIFICATION	6.973563302904914E-8	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999387122982	WITHOUT_CLASSIFICATION	6.128770178741817E-8	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9982103021726243	WITHOUT_CLASSIFICATION	0.001789697827375776	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939234894849	WITHOUT_CLASSIFICATION	6.076510515149989E-6	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999982584413982	WITHOUT_CLASSIFICATION	1.7415586017838465E-6	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999991395328257	WITHOUT_CLASSIFICATION	8.604671743400442E-7	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9996414369412795	WITHOUT_CLASSIFICATION	3.585630587204895E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999149570218	WITHOUT_CLASSIFICATION	8.504297816975238E-8	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999672615005578	WITHOUT_CLASSIFICATION	3.2738499442116195E-5	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999942991216487	WITHOUT_CLASSIFICATION	5.70087835130557E-5	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999945836000268	WITHOUT_CLASSIFICATION	5.416399973277548E-6	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999907559421	WITHOUT_CLASSIFICATION	9.244057837312819E-9	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999887576488676	WITHOUT_CLASSIFICATION	1.1242351132304705E-5	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.99999879303767	WITHOUT_CLASSIFICATION	1.2069623300336518E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999911646865	WITHOUT_CLASSIFICATION	8.835313573523932E-9	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998852006959	WITHOUT_CLASSIFICATION	1.1479930406819956E-7	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999795103375737	WITHOUT_CLASSIFICATION	2.0489662426269413E-5	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999865213495045	WITHOUT_CLASSIFICATION	1.3478650495550781E-5	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999929030353554	WITHOUT_CLASSIFICATION	7.096964644712952E-6	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999758009624	WITHOUT_CLASSIFICATION	2.4199037552717882E-8	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999996519668277	WITHOUT_CLASSIFICATION	3.480331721929668E-7	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999896586605558	WITHOUT_CLASSIFICATION	1.0341339444176278E-5	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999964907335527	WITHOUT_CLASSIFICATION	3.5092664473041708E-6	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999061580492651	WITHOUT_CLASSIFICATION	9.38419507349358E-5	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999991131211788	WITHOUT_CLASSIFICATION	8.868788211046642E-7	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9998872165694468	WITHOUT_CLASSIFICATION	1.1278343055328556E-4	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999994966955419	WITHOUT_CLASSIFICATION	5.033044581013282E-6	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999994333142264	WITHOUT_CLASSIFICATION	5.66685773602338E-6	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.9999996712132672	WITHOUT_CLASSIFICATION	3.287867328511694E-7	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999936695545	WITHOUT_CLASSIFICATION	6.330445505534246E-8	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999999061244351	WITHOUT_CLASSIFICATION	9.387556490325025E-8	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999993681047973	WITHOUT_CLASSIFICATION	6.318952026699071E-7	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999989845650328	WITHOUT_CLASSIFICATION	1.0154349671863383E-6	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9997698782152856	WITHOUT_CLASSIFICATION	2.3012178471428058E-4	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999982663381111	WITHOUT_CLASSIFICATION	1.7336618888963858E-6	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999998032497812	WITHOUT_CLASSIFICATION	1.967502188336395E-7	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999981951957766	WITHOUT_CLASSIFICATION	1.804804223407045E-5	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9999998169704719	WITHOUT_CLASSIFICATION	1.8302952803926982E-7	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999981737222039	WITHOUT_CLASSIFICATION	1.826277796048648E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999861368623094	WITHOUT_CLASSIFICATION	1.3863137690640171E-5	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999999514407399	WITHOUT_CLASSIFICATION	4.855926017634621E-8	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999985969787071	WITHOUT_CLASSIFICATION	1.4030212928340233E-6	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999932559511656	WITHOUT_CLASSIFICATION	6.744048834396689E-6	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999993543109963	WITHOUT_CLASSIFICATION	6.456890037612867E-7	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997772742872033	WITHOUT_CLASSIFICATION	2.2272571279677197E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999993725190995	WITHOUT_CLASSIFICATION	6.274809004243751E-7	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9999749605704679	WITHOUT_CLASSIFICATION	2.503942953211043E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999984775707492	WITHOUT_CLASSIFICATION	1.522429250787085E-6	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999985054335707	WITHOUT_CLASSIFICATION	1.4945664293218348E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999993901817987	WITHOUT_CLASSIFICATION	6.098182011556185E-7	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999989637467711	WITHOUT_CLASSIFICATION	1.0362532288678097E-6	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999946416567128	WITHOUT_CLASSIFICATION	5.358343287091664E-6	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999999923430342	WITHOUT_CLASSIFICATION	7.656965790140666E-8	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999797786923	WITHOUT_CLASSIFICATION	2.02213076922962E-8	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999945129213	WITHOUT_CLASSIFICATION	5.487078702764511E-8	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999879815869	WITHOUT_CLASSIFICATION	1.2018413108232198E-7	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999997928710083	WITHOUT_CLASSIFICATION	2.071289916664528E-7	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999986420334106	WITHOUT_CLASSIFICATION	1.3579665894101657E-6	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999380834369	WITHOUT_CLASSIFICATION	6.191656313113914E-8	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998762881850828	WITHOUT_CLASSIFICATION	1.2371181491718712E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998762881850828	WITHOUT_CLASSIFICATION	1.2371181491718712E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999999488597603	WITHOUT_CLASSIFICATION	5.1140239847728044E-8	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999649565223	WITHOUT_CLASSIFICATION	3.504347773900937E-8	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999998483581671	WITHOUT_CLASSIFICATION	1.5164183290221667E-6	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999998775179593	WITHOUT_CLASSIFICATION	1.2248204069232145E-6	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999744575259963	WITHOUT_CLASSIFICATION	2.5542474003638976E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999971224321117	WITHOUT_CLASSIFICATION	2.8775678883084663E-6	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999984998949525	WITHOUT_CLASSIFICATION	1.5001050476115237E-6	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999975849776257	WITHOUT_CLASSIFICATION	2.4150223743953075E-6	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999180290557111	WITHOUT_CLASSIFICATION	8.197094428885629E-5	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999999641756161	WITHOUT_CLASSIFICATION	3.5824383959173303E-8	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999998086215973	WITHOUT_CLASSIFICATION	1.9137840269850862E-7	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999998077585079	WITHOUT_CLASSIFICATION	1.9224149211528376E-6	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9999985909277228	WITHOUT_CLASSIFICATION	1.4090722772190109E-6	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999819109696	WITHOUT_CLASSIFICATION	1.808903039514652E-8	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999980903546358	WITHOUT_CLASSIFICATION	1.9096453640765105E-6	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.999998172404048	WITHOUT_CLASSIFICATION	1.8275959520115724E-6	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999997287744808	WITHOUT_CLASSIFICATION	2.712255191965904E-7	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9976296475723744	WITHOUT_CLASSIFICATION	0.0023703524276257083	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999838682699014	WITHOUT_CLASSIFICATION	1.613173009856314E-5	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999999466016349	WITHOUT_CLASSIFICATION	5.339836492672864E-8	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999888044250882	WITHOUT_CLASSIFICATION	1.1195574911740141E-5	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999998806653002	WITHOUT_CLASSIFICATION	1.1933469977658643E-7	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999795419560541	WITHOUT_CLASSIFICATION	2.045804394600316E-5	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999930368063867	WITHOUT_CLASSIFICATION	6.963193613242722E-6	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999996175535452	WITHOUT_CLASSIFICATION	3.824464548042603E-6	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.999994475180408	WITHOUT_CLASSIFICATION	5.524819591971948E-6	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999994377720971	WITHOUT_CLASSIFICATION	5.622279029619179E-7	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999936115281788	WITHOUT_CLASSIFICATION	6.3884718212040105E-6	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999983247294995	WITHOUT_CLASSIFICATION	1.6752705005324087E-6	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999937021224	WITHOUT_CLASSIFICATION	6.29787754857894E-9	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999998988384897	WITHOUT_CLASSIFICATION	1.0116151031775935E-7	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999993737782236	WITHOUT_CLASSIFICATION	6.262217764309112E-7	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999990911485014	WITHOUT_CLASSIFICATION	9.08851498522836E-7	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999931846846389	WITHOUT_CLASSIFICATION	6.815315360998314E-6	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999886936511913	WITHOUT_CLASSIFICATION	1.1306348808792457E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999886936511913	WITHOUT_CLASSIFICATION	1.1306348808792457E-5	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999988142472023	WITHOUT_CLASSIFICATION	1.1857527976894646E-6	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999981818704841	WITHOUT_CLASSIFICATION	1.8181295158997716E-6	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999966856703382	WITHOUT_CLASSIFICATION	3.3143296617664463E-6	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999843667734798	WITHOUT_CLASSIFICATION	1.5633226520243864E-5	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999947011	WITHOUT_CLASSIFICATION	5.298853991215834E-12	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999694256883297	WITHOUT_CLASSIFICATION	3.057431167029692E-5	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999892709875781	WITHOUT_CLASSIFICATION	1.0729012422019542E-5	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999824880271841	WITHOUT_CLASSIFICATION	1.7511972815834882E-5	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999991032034397	WITHOUT_CLASSIFICATION	8.967965604068507E-7	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999951460678812	WITHOUT_CLASSIFICATION	4.853932118799869E-5	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999440922822	WITHOUT_CLASSIFICATION	5.590771779004844E-7	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998926948104607	WITHOUT_CLASSIFICATION	1.0730518953926398E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999834140906698	WITHOUT_CLASSIFICATION	1.6585909330263545E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999921274994601	WITHOUT_CLASSIFICATION	7.872500539843533E-6	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999861942417086	WITHOUT_CLASSIFICATION	1.3805758291437084E-5	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999996349351771	WITHOUT_CLASSIFICATION	3.6506482296424773E-7	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993641960016277	WITHOUT_CLASSIFICATION	6.358039983722512E-4	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993641960016277	WITHOUT_CLASSIFICATION	6.358039983722512E-4	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999416815734318	WITHOUT_CLASSIFICATION	5.8318426568160575E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998471789148115	WITHOUT_CLASSIFICATION	1.528210851884953E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999947968452425	WITHOUT_CLASSIFICATION	5.203154757465407E-6	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999796487976	WITHOUT_CLASSIFICATION	2.0351202422786857E-8	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999996881509317	WITHOUT_CLASSIFICATION	3.118490683357612E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.999995474330367	WITHOUT_CLASSIFICATION	4.5256696329941555E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999351506455078	WITHOUT_CLASSIFICATION	6.484935449220545E-4	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999649201907	WITHOUT_CLASSIFICATION	3.5079809294057654E-8	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998738114113	WITHOUT_CLASSIFICATION	1.2618858867652575E-7	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999544402622	WITHOUT_CLASSIFICATION	4.55597378949171E-8	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.999999456953634	WITHOUT_CLASSIFICATION	5.430463659524556E-7	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.999999456953634	WITHOUT_CLASSIFICATION	5.430463659524556E-7	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999926919627787	WITHOUT_CLASSIFICATION	7.308037221282532E-6	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999997353244762	WITHOUT_CLASSIFICATION	2.646755238309295E-7	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999998268555363	WITHOUT_CLASSIFICATION	1.7314446358297272E-7	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999999638682436	WITHOUT_CLASSIFICATION	3.6131756402020244E-8	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999996169894402	WITHOUT_CLASSIFICATION	3.8301055983707947E-7	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9972914574525995	WITHOUT_CLASSIFICATION	0.002708542547400527	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999997951111796	WITHOUT_CLASSIFICATION	2.048888204172909E-7	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999921049580323	WITHOUT_CLASSIFICATION	7.895041967821276E-6	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999989235685549	WITHOUT_CLASSIFICATION	1.0764314450838935E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999323405565	WITHOUT_CLASSIFICATION	6.765944344972475E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999755592007	WITHOUT_CLASSIFICATION	2.4440799294802084E-8	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999910372203679	WITHOUT_CLASSIFICATION	8.962779632123764E-6	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9983613250056096	WITHOUT_CLASSIFICATION	0.0016386749943903582	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999429270008924	WITHOUT_CLASSIFICATION	5.707299910771392E-5	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999202943588	WITHOUT_CLASSIFICATION	7.970564111529975E-8	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999991187030246	WITHOUT_CLASSIFICATION	8.812969754270573E-7	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999979218546858	WITHOUT_CLASSIFICATION	2.078145314163346E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999339927833	WITHOUT_CLASSIFICATION	6.600721664756151E-8	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999988876740358	WITHOUT_CLASSIFICATION	1.1123259642926695E-6	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999989775563904	WITHOUT_CLASSIFICATION	1.022443609566767E-6	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.99999318188133	WITHOUT_CLASSIFICATION	6.818118669973561E-6	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999836796381842	WITHOUT_CLASSIFICATION	1.6320361815743178E-5	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.99999969904522	WITHOUT_CLASSIFICATION	3.0095477992217555E-7	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999990677842809	WITHOUT_CLASSIFICATION	9.322157189895005E-7	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999992562944946	WITHOUT_CLASSIFICATION	7.437055054727373E-7	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999853527172546	WITHOUT_CLASSIFICATION	1.4647282745354333E-5	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999958345698571	WITHOUT_CLASSIFICATION	4.165430143004915E-6	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999588751364751	WITHOUT_CLASSIFICATION	4.1124863524990826E-5	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999965785796362	WITHOUT_CLASSIFICATION	3.4214203637962604E-6	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999999930086	WITHOUT_CLASSIFICATION	6.991368042139596E-12	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999989914401479	WITHOUT_CLASSIFICATION	1.0085598521100448E-6	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999979848488969	WITHOUT_CLASSIFICATION	2.0151511029700226E-6	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999997320384763	WITHOUT_CLASSIFICATION	2.679615237037564E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9999991919058998	WITHOUT_CLASSIFICATION	8.080941001076832E-7	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9961478352099723	WITHOUT_CLASSIFICATION	0.003852164790027667	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999998634172588	WITHOUT_CLASSIFICATION	1.3658274130172106E-7	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999999525306307	WITHOUT_CLASSIFICATION	4.746936928544986E-8	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999787782723092	WITHOUT_CLASSIFICATION	2.1221727690876705E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999901621818065	WITHOUT_CLASSIFICATION	9.837818193555479E-6	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999901621818065	WITHOUT_CLASSIFICATION	9.837818193555479E-6	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999556769003	WITHOUT_CLASSIFICATION	4.4323099799963844E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999843001457	WITHOUT_CLASSIFICATION	1.569985430459762E-7	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999735693265	WITHOUT_CLASSIFICATION	2.6430673506494612E-8	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9999247420983253	WITHOUT_CLASSIFICATION	7.525790167480858E-5	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999876272228301	WITHOUT_CLASSIFICATION	1.2372777169953903E-5	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999839038078	WITHOUT_CLASSIFICATION	1.6096192131691547E-8	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999910633	WITHOUT_CLASSIFICATION	8.936762752165274E-12	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999664805569122	WITHOUT_CLASSIFICATION	3.351944308779767E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999556769003	WITHOUT_CLASSIFICATION	4.4323099799963844E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999843001457	WITHOUT_CLASSIFICATION	1.569985430459762E-7	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999993591027896	WITHOUT_CLASSIFICATION	6.408972103374084E-7	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999996567026336	WITHOUT_CLASSIFICATION	3.4329736643661E-7	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999996291730586	WITHOUT_CLASSIFICATION	3.708269413915642E-7	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999693862569126	WITHOUT_CLASSIFICATION	3.06137430874356E-5	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999998177428	WITHOUT_CLASSIFICATION	1.822571999842623E-7	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9991305391935096	WITHOUT_CLASSIFICATION	8.694608064903879E-4	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999780646975	WITHOUT_CLASSIFICATION	2.1935302440360575E-8	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999475202058505	WITHOUT_CLASSIFICATION	5.247979414948858E-5	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999978510317529	WITHOUT_CLASSIFICATION	2.1489682471023248E-6	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9724787717677065	WITHOUT_CLASSIFICATION	0.02752122823229354	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999990726013	WITHOUT_CLASSIFICATION	9.273987223308044E-10	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9724787717677065	WITHOUT_CLASSIFICATION	0.02752122823229354	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999748603645859	WITHOUT_CLASSIFICATION	2.5139635414102165E-5	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999999408492648	WITHOUT_CLASSIFICATION	5.915073520696473E-7	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998416621620774	WITHOUT_CLASSIFICATION	1.5833783792265039E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999988156752	WITHOUT_CLASSIFICATION	1.1843248048992483E-8	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9986605326363298	WITHOUT_CLASSIFICATION	0.001339467363670191	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999475202058505	WITHOUT_CLASSIFICATION	5.247979414948858E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999475202058505	WITHOUT_CLASSIFICATION	5.247979414948858E-5	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999945295491068	WITHOUT_CLASSIFICATION	5.470450893262878E-6	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999997988573309	WITHOUT_CLASSIFICATION	2.0114266907567904E-7	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999964157063674	WITHOUT_CLASSIFICATION	3.584293632458976E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999927694606897	WITHOUT_CLASSIFICATION	7.2305393103755635E-6	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999989387830162	WITHOUT_CLASSIFICATION	1.0612169838454284E-6	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999964722691206	WITHOUT_CLASSIFICATION	3.527730879411564E-6	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999986825439611	WITHOUT_CLASSIFICATION	1.3174560389433976E-6	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999996803587275	WITHOUT_CLASSIFICATION	3.1964127251619837E-7	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997160209749	WITHOUT_CLASSIFICATION	2.839790251062635E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999568865331258	WITHOUT_CLASSIFICATION	4.311346687431558E-5	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999952923013122	WITHOUT_CLASSIFICATION	4.707698687834646E-6	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999998184367965	WITHOUT_CLASSIFICATION	1.8156320349161312E-7	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999901990484374	WITHOUT_CLASSIFICATION	9.800951562601695E-6	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999888940064827	WITHOUT_CLASSIFICATION	1.1105993517274899E-5	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999998298641306	WITHOUT_CLASSIFICATION	1.701358694682053E-7	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999998600983355	WITHOUT_CLASSIFICATION	1.3990166446331975E-7	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999975268284874	WITHOUT_CLASSIFICATION	2.47317151253983E-6	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999989107952093	WITHOUT_CLASSIFICATION	1.0892047907308553E-6	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999994430967382	WITHOUT_CLASSIFICATION	5.569032618357588E-7	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999998641325488	WITHOUT_CLASSIFICATION	1.3586745111629072E-7	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9999745215560396	WITHOUT_CLASSIFICATION	2.5478443960473733E-5	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999680775215	WITHOUT_CLASSIFICATION	3.192247849940376E-8	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999962527534441	WITHOUT_CLASSIFICATION	3.747246555975955E-6	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999988729983902	WITHOUT_CLASSIFICATION	1.1270016097608905E-6	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999593822184	WITHOUT_CLASSIFICATION	4.061778152280848E-8	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999992070077667	WITHOUT_CLASSIFICATION	7.929922333734262E-7	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999828680454089	WITHOUT_CLASSIFICATION	1.7131954591066986E-5	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999998874800482	WITHOUT_CLASSIFICATION	1.1251995188740038E-7	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999334169904178	WITHOUT_CLASSIFICATION	6.658300958216707E-5	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999998419749926	WITHOUT_CLASSIFICATION	1.5802500748504128E-7	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999998910979	WITHOUT_CLASSIFICATION	1.089020999296327E-7	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9991881460041919	WITHOUT_CLASSIFICATION	8.118539958080981E-4	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999168554355342	WITHOUT_CLASSIFICATION	8.314456446571264E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999996803587275	WITHOUT_CLASSIFICATION	3.1964127251619837E-7	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.999202129315186	WITHOUT_CLASSIFICATION	7.97870684814001E-4	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999983326568138	WITHOUT_CLASSIFICATION	1.6673431861981734E-6	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9829623629675053	WITHOUT_CLASSIFICATION	0.01703763703249474	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999996152215178	WITHOUT_CLASSIFICATION	3.8477848220167413E-7	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999994820182532	WITHOUT_CLASSIFICATION	5.179817468086847E-7	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999999279904573	WITHOUT_CLASSIFICATION	7.200954271216417E-8	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999927694606897	WITHOUT_CLASSIFICATION	7.2305393103755635E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999927694606897	WITHOUT_CLASSIFICATION	7.2305393103755635E-6	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999999798018052	WITHOUT_CLASSIFICATION	2.0198194856836717E-8	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999996972552558	WITHOUT_CLASSIFICATION	3.027447441559845E-7	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9999959862067189	WITHOUT_CLASSIFICATION	4.013793281047715E-6	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999999139843767	WITHOUT_CLASSIFICATION	8.601562324596867E-8	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999944405023466	WITHOUT_CLASSIFICATION	5.559497653272505E-6	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9980608247392233	WITHOUT_CLASSIFICATION	0.0019391752607767277	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999719321619114	WITHOUT_CLASSIFICATION	2.806783808859732E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999982155556235	WITHOUT_CLASSIFICATION	1.7844443764481734E-6	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999971961479464	WITHOUT_CLASSIFICATION	2.803852053682199E-6	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999959100841639	WITHOUT_CLASSIFICATION	4.089915836146945E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999987080514591	WITHOUT_CLASSIFICATION	1.29194854083248E-6	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999992712750116	WITHOUT_CLASSIFICATION	7.287249883861007E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997642253122022	WITHOUT_CLASSIFICATION	2.357746877977039E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999556769003	WITHOUT_CLASSIFICATION	4.4323099799963844E-8	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999987080514591	WITHOUT_CLASSIFICATION	1.29194854083248E-6	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999982709792897	WITHOUT_CLASSIFICATION	1.7290207103129988E-6	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999976127324476	WITHOUT_CLASSIFICATION	2.3872675524381913E-6	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999804938273478	WITHOUT_CLASSIFICATION	1.9506172652275302E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9905239029652771	WITHOUT_CLASSIFICATION	0.009476097034722767	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997642253122022	WITHOUT_CLASSIFICATION	2.357746877977039E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998036059886841	WITHOUT_CLASSIFICATION	1.9639401131581874E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999796966789493	WITHOUT_CLASSIFICATION	2.030332105080618E-5	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999188212512	WITHOUT_CLASSIFICATION	8.117874874363791E-8	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9995210980749086	WITHOUT_CLASSIFICATION	4.7890192509133454E-4	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998414164831401	WITHOUT_CLASSIFICATION	1.5858351685989685E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999998701316242	WITHOUT_CLASSIFICATION	1.2986837585404092E-7	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999882142216375	WITHOUT_CLASSIFICATION	1.1785778362434883E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999735595123792	WITHOUT_CLASSIFICATION	2.6440487620829695E-5	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999999862566156	WITHOUT_CLASSIFICATION	1.3743384389634702E-7	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999609136304	WITHOUT_CLASSIFICATION	3.908636951803835E-8	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9961747915789985	WITHOUT_CLASSIFICATION	0.0038252084210016186	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999991727528136	WITHOUT_CLASSIFICATION	8.272471863883123E-7	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999987080514591	WITHOUT_CLASSIFICATION	1.29194854083248E-6	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998036059886841	WITHOUT_CLASSIFICATION	1.9639401131581874E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999188212512	WITHOUT_CLASSIFICATION	8.117874874363791E-8	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999854445118742	WITHOUT_CLASSIFICATION	1.455548812574577E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999988444483682	WITHOUT_CLASSIFICATION	1.1555516318238215E-6	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999993653172683	WITHOUT_CLASSIFICATION	6.346827318240963E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997642253122022	WITHOUT_CLASSIFICATION	2.357746877977039E-4	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999175443732	WITHOUT_CLASSIFICATION	8.245562676444088E-8	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999908888736302	WITHOUT_CLASSIFICATION	9.111126369922828E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998748292477488	WITHOUT_CLASSIFICATION	1.251707522511735E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999872505833769	WITHOUT_CLASSIFICATION	1.2749416623117015E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999735595123792	WITHOUT_CLASSIFICATION	2.6440487620829695E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999982709792897	WITHOUT_CLASSIFICATION	1.7290207103129988E-6	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9999789014308443	WITHOUT_CLASSIFICATION	2.1098569155559366E-5	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999988752063708	WITHOUT_CLASSIFICATION	1.1247936292603016E-6	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.999999680457314	WITHOUT_CLASSIFICATION	3.195426859823614E-7	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999995202752854	WITHOUT_CLASSIFICATION	4.797247146126548E-7	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999999333736007	WITHOUT_CLASSIFICATION	6.662639934344487E-8	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999999317443174	WITHOUT_CLASSIFICATION	6.825568256106835E-8	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999857438961917	WITHOUT_CLASSIFICATION	1.4256103808188503E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999988156752	WITHOUT_CLASSIFICATION	1.1843248048992483E-8	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999958097476	WITHOUT_CLASSIFICATION	4.190252411501294E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986847636675005	WITHOUT_CLASSIFICATION	0.0013152363324995158	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999980596529	WITHOUT_CLASSIFICATION	1.940347157006193E-9	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9989897643789208	WITHOUT_CLASSIFICATION	0.0010102356210791473	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999364484773714	WITHOUT_CLASSIFICATION	6.355152262851844E-5	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999957105831159	WITHOUT_CLASSIFICATION	4.2894168841681214E-6	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999992839792157	WITHOUT_CLASSIFICATION	7.160207843730836E-7	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9999952016215121	WITHOUT_CLASSIFICATION	4.798378487840041E-6	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999050041717	WITHOUT_CLASSIFICATION	9.499582831978377E-8	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999872505833769	WITHOUT_CLASSIFICATION	1.2749416623117015E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986847636675005	WITHOUT_CLASSIFICATION	0.0013152363324995158	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999503034411	WITHOUT_CLASSIFICATION	4.969655889991577E-5	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9999849152049586	WITHOUT_CLASSIFICATION	1.5084795041448874E-5	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999960822827093	WITHOUT_CLASSIFICATION	3.917717290741838E-6	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999953263423235	WITHOUT_CLASSIFICATION	4.673657676546679E-6	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9999805225449562	WITHOUT_CLASSIFICATION	1.9477455043829115E-5	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999675960565	WITHOUT_CLASSIFICATION	3.2403943557118995E-8	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999866519628192	WITHOUT_CLASSIFICATION	1.3348037180651866E-5	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9989777103543059	WITHOUT_CLASSIFICATION	0.0010222896456941423	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999494837982186	WITHOUT_CLASSIFICATION	5.051620178149687E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.982396938994942	WITHOUT_CLASSIFICATION	0.017603061005058016	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999996741128434	WITHOUT_CLASSIFICATION	3.2588715653199463E-7	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999958795458609	WITHOUT_CLASSIFICATION	4.120454139203762E-6	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999999459010344	WITHOUT_CLASSIFICATION	5.4098965711353E-8	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9999965090837071	WITHOUT_CLASSIFICATION	3.4909162929235155E-6	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999992383232605	WITHOUT_CLASSIFICATION	7.616767393757357E-7	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998777539126	WITHOUT_CLASSIFICATION	1.2224608726207453E-7	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999999563980003	WITHOUT_CLASSIFICATION	4.360199969967863E-7	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999999976625971	WITHOUT_CLASSIFICATION	2.3374029141422332E-8	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999997340554978	WITHOUT_CLASSIFICATION	2.659445022918968E-7	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999928593177999	WITHOUT_CLASSIFICATION	7.1406822000492845E-6	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9999547757440514	WITHOUT_CLASSIFICATION	4.522425594862422E-5	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999999079594754	WITHOUT_CLASSIFICATION	9.204052467956665E-8	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998684669906	WITHOUT_CLASSIFICATION	1.315330094142196E-7	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999493315003	WITHOUT_CLASSIFICATION	5.0668499628510144E-8	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999995116816776	WITHOUT_CLASSIFICATION	4.883183223926184E-7	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9981787652925977	WITHOUT_CLASSIFICATION	0.0018212347074022881	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999985935368492	WITHOUT_CLASSIFICATION	1.4064631508048244E-6	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997971392862532	WITHOUT_CLASSIFICATION	2.02860713746758E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999747774074586	WITHOUT_CLASSIFICATION	2.5222592541399366E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8476372477725466	WITHOUT_CLASSIFICATION	0.1523627522274535	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999900646006977	WITHOUT_CLASSIFICATION	9.935399302279666E-6	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996040862273331	WITHOUT_CLASSIFICATION	3.9591377266697214E-4	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999997252997544	WITHOUT_CLASSIFICATION	2.747002456437548E-7	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997726542371	WITHOUT_CLASSIFICATION	2.2734576282545564E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999200902072964	WITHOUT_CLASSIFICATION	7.990979270356349E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.999999721237184	WITHOUT_CLASSIFICATION	2.7876281614181575E-7	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999027128871	WITHOUT_CLASSIFICATION	9.728711299214848E-8	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999764936326527	WITHOUT_CLASSIFICATION	2.3506367347205272E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.999999721237184	WITHOUT_CLASSIFICATION	2.7876281614181575E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999200902072964	WITHOUT_CLASSIFICATION	7.990979270356349E-5	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999027128871	WITHOUT_CLASSIFICATION	9.728711299214848E-8	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999985328002893	WITHOUT_CLASSIFICATION	1.4671997106671146E-6	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999998970495204	WITHOUT_CLASSIFICATION	1.0295047958374047E-7	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999960020612829	WITHOUT_CLASSIFICATION	3.997938717088326E-6	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999567727014849	WITHOUT_CLASSIFICATION	4.3227298515194265E-5	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999685071047	WITHOUT_CLASSIFICATION	3.149289529060163E-8	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5901553077182141	WITHOUT_CLASSIFICATION	0.4098446922817859	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999848866847025	WITHOUT_CLASSIFICATION	1.5113315297471133E-5	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999842481450293	WITHOUT_CLASSIFICATION	1.575185497077497E-5	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999976091698	WITHOUT_CLASSIFICATION	2.390830322570302E-9	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999243321617165	WITHOUT_CLASSIFICATION	7.566783828352545E-5	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.9999909439639819	WITHOUT_CLASSIFICATION	9.05603601807885E-6	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999995348664324	WITHOUT_CLASSIFICATION	4.651335675406331E-7	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999735193515688	WITHOUT_CLASSIFICATION	2.648064843120256E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999567727014849	WITHOUT_CLASSIFICATION	4.3227298515194265E-5	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998418494475	WITHOUT_CLASSIFICATION	1.5815055256171087E-7	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999990165230629	WITHOUT_CLASSIFICATION	9.834769371180877E-7	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999975369758878	WITHOUT_CLASSIFICATION	2.46302411228538E-6	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999197641536	WITHOUT_CLASSIFICATION	8.023584637020991E-8	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999991304370544	WITHOUT_CLASSIFICATION	8.695629455536494E-7	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999948725039	WITHOUT_CLASSIFICATION	5.1274960288032126E-9	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999986225951941	WITHOUT_CLASSIFICATION	1.3774048058901388E-6	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999997967194	WITHOUT_CLASSIFICATION	2.0328066230150982E-10	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999969532570843	WITHOUT_CLASSIFICATION	3.0467429157040313E-5	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999999973333728	WITHOUT_CLASSIFICATION	2.6666271971028723E-8	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999949743719	WITHOUT_CLASSIFICATION	5.025628180584103E-9	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999949743719	WITHOUT_CLASSIFICATION	5.025628180584103E-9	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999955759783	WITHOUT_CLASSIFICATION	4.424021672472999E-9	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999955759783	WITHOUT_CLASSIFICATION	4.424021672472999E-9	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9999837842453124	WITHOUT_CLASSIFICATION	1.6215754687628044E-5	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999975369758878	WITHOUT_CLASSIFICATION	2.46302411228538E-6	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999999557632294	WITHOUT_CLASSIFICATION	4.42367705683249E-8	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999989626814	WITHOUT_CLASSIFICATION	1.0373185971897182E-9	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.999999983106022	WITHOUT_CLASSIFICATION	1.6893977976368252E-8	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.999999983106022	WITHOUT_CLASSIFICATION	1.6893977976368252E-8	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999982394763036	WITHOUT_CLASSIFICATION	1.7605236964310372E-6	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999999549985897	WITHOUT_CLASSIFICATION	4.500141029964574E-8	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999989413414	WITHOUT_CLASSIFICATION	1.0586585232451366E-9	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999998333031769	WITHOUT_CLASSIFICATION	1.6669682313882838E-7	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9998958299566051	WITHOUT_CLASSIFICATION	1.0417004339501501E-4	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9937226233158906	WITHOUT_CLASSIFICATION	0.006277376684109491	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999933558560623	WITHOUT_CLASSIFICATION	6.644143937715662E-6	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999670359124766	WITHOUT_CLASSIFICATION	3.296408752345628E-5	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999940933021019	WITHOUT_CLASSIFICATION	5.906697898185118E-6	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999959668497042	WITHOUT_CLASSIFICATION	4.033150295741906E-6	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.9999983007586107	WITHOUT_CLASSIFICATION	1.6992413892373484E-6	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9999990354743449	WITHOUT_CLASSIFICATION	9.64525655129068E-7	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999998424978812	WITHOUT_CLASSIFICATION	1.5750211873388455E-7	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999999139682161	WITHOUT_CLASSIFICATION	8.603178401774232E-8	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999999979265847	WITHOUT_CLASSIFICATION	2.073415288392515E-8	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999996562410814	WITHOUT_CLASSIFICATION	3.437589185254362E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953794689744	WITHOUT_CLASSIFICATION	4.620531025605995E-6	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999987505468618	WITHOUT_CLASSIFICATION	1.249453138167739E-6	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999998692421346	WITHOUT_CLASSIFICATION	1.3075786541642903E-7	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999996583914618	WITHOUT_CLASSIFICATION	3.4160853818415427E-7	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999989772266678	WITHOUT_CLASSIFICATION	1.0227733322046144E-6	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999912248951405	WITHOUT_CLASSIFICATION	8.77510485949704E-6	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999992850038774	WITHOUT_CLASSIFICATION	7.149961227339348E-7	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999998703644704	WITHOUT_CLASSIFICATION	1.296355296988666E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999336554406513	WITHOUT_CLASSIFICATION	6.634455934867988E-5	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999997528771146	WITHOUT_CLASSIFICATION	2.471228853791117E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986847636675005	WITHOUT_CLASSIFICATION	0.0013152363324995158	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999958795458609	WITHOUT_CLASSIFICATION	4.120454139203762E-6	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999987125815245	WITHOUT_CLASSIFICATION	1.2874184754566252E-6	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9992440483012669	WITHOUT_CLASSIFICATION	7.559516987331058E-4	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990229738846	WITHOUT_CLASSIFICATION	9.770261153878951E-6	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719633344355	WITHOUT_CLASSIFICATION	2.8036665564439144E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999944486742735	WITHOUT_CLASSIFICATION	5.551325726497062E-6	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999944486742735	WITHOUT_CLASSIFICATION	5.551325726497062E-6	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999911436979181	WITHOUT_CLASSIFICATION	8.856302081906618E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999975758921973	WITHOUT_CLASSIFICATION	2.4241078028004406E-6	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9998122873394399	WITHOUT_CLASSIFICATION	1.877126605600502E-4	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9998122873394399	WITHOUT_CLASSIFICATION	1.877126605600502E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999336803554881	WITHOUT_CLASSIFICATION	6.631964451185369E-5	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9995228266355373	WITHOUT_CLASSIFICATION	4.771733644627793E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9998820309881393	WITHOUT_CLASSIFICATION	1.1796901186061403E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999975699849645	WITHOUT_CLASSIFICATION	2.430015035454041E-6	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999976671024355	WITHOUT_CLASSIFICATION	2.332897564535067E-6	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999998654403416	WITHOUT_CLASSIFICATION	1.3455965844157213E-7	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999979761977967	WITHOUT_CLASSIFICATION	2.0238022032535644E-6	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999967520794577	WITHOUT_CLASSIFICATION	3.2479205422897734E-6	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999889934127658	WITHOUT_CLASSIFICATION	1.1006587234213533E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999889934127658	WITHOUT_CLASSIFICATION	1.1006587234213533E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999992551022419	WITHOUT_CLASSIFICATION	7.4489775809817355E-6	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999998536013	WITHOUT_CLASSIFICATION	1.4639869996333648E-7	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999998536013	WITHOUT_CLASSIFICATION	1.4639869996333648E-7	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999965767906518	WITHOUT_CLASSIFICATION	3.4232093483137005E-6	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999993344673911	WITHOUT_CLASSIFICATION	6.655326089743276E-7	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9973435676607316	WITHOUT_CLASSIFICATION	0.0026564323392684447	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.999997918128461	WITHOUT_CLASSIFICATION	2.0818715391301798E-6	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999992401313721	WITHOUT_CLASSIFICATION	7.598686280270545E-7	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999291059292	WITHOUT_CLASSIFICATION	7.089407084783668E-8	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999998437914429	WITHOUT_CLASSIFICATION	1.5620855712375506E-7	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999987327747274	WITHOUT_CLASSIFICATION	1.2672252726485538E-6	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999302812443	WITHOUT_CLASSIFICATION	6.971875562216162E-8	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9943994119762416	WITHOUT_CLASSIFICATION	0.0056005880237583825	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.99999815037432	WITHOUT_CLASSIFICATION	1.8496256799343872E-6	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.999991982929902	WITHOUT_CLASSIFICATION	8.017070097993331E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999981498832029	WITHOUT_CLASSIFICATION	1.8501167970218925E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999981498832029	WITHOUT_CLASSIFICATION	1.8501167970218925E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999981498832029	WITHOUT_CLASSIFICATION	1.8501167970218925E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999981498832029	WITHOUT_CLASSIFICATION	1.8501167970218925E-6	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999921582591822	WITHOUT_CLASSIFICATION	7.841740817823678E-6	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.933764424012993	WITHOUT_CLASSIFICATION	0.066235575987007	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999737258048751	WITHOUT_CLASSIFICATION	2.627419512488876E-5	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999974315200131	WITHOUT_CLASSIFICATION	2.5684799870089425E-6	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999998206721682	WITHOUT_CLASSIFICATION	1.7932783190363013E-7	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9997747173611456	WITHOUT_CLASSIFICATION	2.252826388544342E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.999995474330367	WITHOUT_CLASSIFICATION	4.5256696329941555E-6	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999981458919539	WITHOUT_CLASSIFICATION	1.854108046041424E-6	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999975102708096	WITHOUT_CLASSIFICATION	2.4897291903800254E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.999995474330367	WITHOUT_CLASSIFICATION	4.5256696329941555E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.999995474330367	WITHOUT_CLASSIFICATION	4.5256696329941555E-6	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999998967252955	WITHOUT_CLASSIFICATION	1.0327470455789504E-7	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999997121029873	WITHOUT_CLASSIFICATION	2.878970127032419E-7	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999996637238799	WITHOUT_CLASSIFICATION	3.3627612006051955E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999960272663968	WITHOUT_CLASSIFICATION	3.972733603140719E-6	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999319364674453	WITHOUT_CLASSIFICATION	6.806353255483191E-5	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999993318153881	WITHOUT_CLASSIFICATION	6.681846119099066E-7	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999999259102728	WITHOUT_CLASSIFICATION	7.408972715659749E-8	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999960272663968	WITHOUT_CLASSIFICATION	3.972733603140719E-6	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999877779487316	WITHOUT_CLASSIFICATION	1.2222051268492014E-5	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999945528268698	WITHOUT_CLASSIFICATION	5.447173130131789E-6	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999981203120067	WITHOUT_CLASSIFICATION	1.8796879932247258E-6	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999882913176329	WITHOUT_CLASSIFICATION	1.1708682367164836E-5	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999984750148259	WITHOUT_CLASSIFICATION	1.5249851740841665E-5	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999280546109395	WITHOUT_CLASSIFICATION	7.194538906043665E-5	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999998879658603	WITHOUT_CLASSIFICATION	1.120341398520303E-7	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999937641599069	WITHOUT_CLASSIFICATION	6.235840092993799E-6	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999665213909	WITHOUT_CLASSIFICATION	3.347860897985569E-8	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999999333235952	WITHOUT_CLASSIFICATION	6.667640479819183E-7	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999726427511	WITHOUT_CLASSIFICATION	2.7357248932060084E-8	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999999036864261	WITHOUT_CLASSIFICATION	9.631357387833918E-8	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9942846447644392	WITHOUT_CLASSIFICATION	0.005715355235560758	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999657840763522	WITHOUT_CLASSIFICATION	3.4215923647757396E-5	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998060552305	WITHOUT_CLASSIFICATION	1.9394476943692113E-7	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999975518406294	WITHOUT_CLASSIFICATION	2.4481593705866655E-6	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999433589866	WITHOUT_CLASSIFICATION	5.6641013387031494E-8	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999959866029379	WITHOUT_CLASSIFICATION	4.013397062149986E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999997872232681	WITHOUT_CLASSIFICATION	2.1277673190196786E-7	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999959866029379	WITHOUT_CLASSIFICATION	4.013397062149986E-6	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999415759254	WITHOUT_CLASSIFICATION	5.842407456482528E-8	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999971720689569	WITHOUT_CLASSIFICATION	2.827931043011573E-6	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999988098716417	WITHOUT_CLASSIFICATION	1.1901283583031698E-6	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9998665983334875	WITHOUT_CLASSIFICATION	1.3340166651260347E-4	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999999658117402	WITHOUT_CLASSIFICATION	3.418825975546061E-8	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999990040160953	WITHOUT_CLASSIFICATION	9.959839046871073E-7	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999998851867304	WITHOUT_CLASSIFICATION	1.148132695818674E-7	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999433589866	WITHOUT_CLASSIFICATION	5.6641013387031494E-8	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999997872232681	WITHOUT_CLASSIFICATION	2.1277673190196786E-7	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999415759254	WITHOUT_CLASSIFICATION	5.842407456482528E-8	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999627707026	WITHOUT_CLASSIFICATION	3.722929743659406E-8	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.99997106317577	WITHOUT_CLASSIFICATION	2.8936824229973632E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9999925432157133	WITHOUT_CLASSIFICATION	7.456784286662794E-6	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999951162526466	WITHOUT_CLASSIFICATION	4.883747353354365E-6	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.999995417959986	WITHOUT_CLASSIFICATION	4.5820400138993115E-6	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.998411705752374	WITHOUT_CLASSIFICATION	0.0015882942476259578	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999840146983	WITHOUT_CLASSIFICATION	1.598530185073824E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953794689744	WITHOUT_CLASSIFICATION	4.620531025605995E-6	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999971720689569	WITHOUT_CLASSIFICATION	2.827931043011573E-6	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999857874690604	WITHOUT_CLASSIFICATION	1.4212530939569232E-5	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999901365913831	WITHOUT_CLASSIFICATION	9.863408616868898E-6	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998993443211645	WITHOUT_CLASSIFICATION	1.006556788356091E-4	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999998732430715	WITHOUT_CLASSIFICATION	1.2675692848057553E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953794689744	WITHOUT_CLASSIFICATION	4.620531025605995E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986847636675005	WITHOUT_CLASSIFICATION	0.0013152363324995158	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999806774105	WITHOUT_CLASSIFICATION	1.9322589556138618E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953794689744	WITHOUT_CLASSIFICATION	4.620531025605995E-6	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999979702398	WITHOUT_CLASSIFICATION	2.029760163787366E-9	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999316889002	WITHOUT_CLASSIFICATION	6.831109979797384E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986847636675005	WITHOUT_CLASSIFICATION	0.0013152363324995158	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9995947303412137	WITHOUT_CLASSIFICATION	4.0526965878617935E-4	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999485547654	WITHOUT_CLASSIFICATION	5.1445234659532235E-8	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999436071619	WITHOUT_CLASSIFICATION	5.6392838116153365E-8	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9999867045381453	WITHOUT_CLASSIFICATION	1.3295461854615862E-5	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999728099372813	WITHOUT_CLASSIFICATION	2.719006271864365E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999830419117863	WITHOUT_CLASSIFICATION	1.695808821367694E-5	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999997112606324	WITHOUT_CLASSIFICATION	2.8873936767952933E-7	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999987895250492	WITHOUT_CLASSIFICATION	1.2104749507768144E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998762881850828	WITHOUT_CLASSIFICATION	1.2371181491718712E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999924196893997	WITHOUT_CLASSIFICATION	7.580310600259298E-6	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9973435676607316	WITHOUT_CLASSIFICATION	0.0026564323392684447	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999975564175398	WITHOUT_CLASSIFICATION	2.443582460033645E-6	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9792350244305484	WITHOUT_CLASSIFICATION	0.0207649755694515	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.999999124890345	WITHOUT_CLASSIFICATION	8.751096548713069E-7	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999592402497403	WITHOUT_CLASSIFICATION	4.075975025965357E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999990555492435	WITHOUT_CLASSIFICATION	9.444507563395544E-7	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999997346198315	WITHOUT_CLASSIFICATION	2.6538016850338574E-7	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9992557740269186	WITHOUT_CLASSIFICATION	7.442259730814202E-4	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999907137533317	WITHOUT_CLASSIFICATION	9.286246668236252E-6	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999770119157	WITHOUT_CLASSIFICATION	2.2988084313654657E-8	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999761136434516	WITHOUT_CLASSIFICATION	2.38863565483577E-5	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9972479764462907	WITHOUT_CLASSIFICATION	0.0027520235537093537	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9993422030863982	WITHOUT_CLASSIFICATION	6.57796913601765E-4	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997509242443027	WITHOUT_CLASSIFICATION	2.490757556973452E-4	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999186614588	WITHOUT_CLASSIFICATION	8.133854122344181E-8	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999992404748642	WITHOUT_CLASSIFICATION	7.595251356872155E-7	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999665302043	WITHOUT_CLASSIFICATION	3.3469795699987034E-5	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999979771778408	WITHOUT_CLASSIFICATION	2.022822159197019E-6	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999991527743346	WITHOUT_CLASSIFICATION	8.472256654327243E-7	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999978962885613	WITHOUT_CLASSIFICATION	2.103711438739246E-6	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999996611034007	WITHOUT_CLASSIFICATION	3.3889659943338345E-7	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9993793229449139	WITHOUT_CLASSIFICATION	6.206770550860394E-4	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9984093965098282	WITHOUT_CLASSIFICATION	0.0015906034901717436	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998167433853	WITHOUT_CLASSIFICATION	1.8325661468693868E-7	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999894718071486	WITHOUT_CLASSIFICATION	1.0528192851344889E-5	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999997599926898	WITHOUT_CLASSIFICATION	2.4000731023035376E-7	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999773769476052	WITHOUT_CLASSIFICATION	2.262305239480799E-5	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999083025410738	WITHOUT_CLASSIFICATION	9.169745892617466E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9837358555579323	WITHOUT_CLASSIFICATION	0.01626414444206771	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995447487462	WITHOUT_CLASSIFICATION	4.552512538553834E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986847636675005	WITHOUT_CLASSIFICATION	0.0013152363324995158	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999977829003962	WITHOUT_CLASSIFICATION	2.2170996038227073E-6	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999789341075174	WITHOUT_CLASSIFICATION	2.1065892482640392E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999789341075174	WITHOUT_CLASSIFICATION	2.1065892482640392E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999970252035955	WITHOUT_CLASSIFICATION	2.974796404574402E-6	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999830419117863	WITHOUT_CLASSIFICATION	1.695808821367694E-5	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999884084606803	WITHOUT_CLASSIFICATION	1.1591539319705387E-4	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999999989501484	WITHOUT_CLASSIFICATION	1.0498515894283705E-8	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9997591949733423	WITHOUT_CLASSIFICATION	2.4080502665763462E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999984342591178	WITHOUT_CLASSIFICATION	1.5657408822039518E-5	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9999905088660946	WITHOUT_CLASSIFICATION	9.491133905304545E-6	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999831093105077	WITHOUT_CLASSIFICATION	1.6890689492205175E-5	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999966981354719	WITHOUT_CLASSIFICATION	3.3018645281174574E-6	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999998826891972	WITHOUT_CLASSIFICATION	1.1731080280314933E-7	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999990662855788	WITHOUT_CLASSIFICATION	9.337144211735886E-7	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.999998640377169	WITHOUT_CLASSIFICATION	1.3596228309553552E-6	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998542467928	WITHOUT_CLASSIFICATION	1.4575320714565624E-7	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999496458666	WITHOUT_CLASSIFICATION	5.035413341942255E-8	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999391750343	WITHOUT_CLASSIFICATION	6.082496569268526E-8	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999938420068	WITHOUT_CLASSIFICATION	6.1579932515561955E-9	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999996454654739	WITHOUT_CLASSIFICATION	3.545345261228095E-7	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999857647505	WITHOUT_CLASSIFICATION	1.4235249590699505E-8	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.99999994443566	WITHOUT_CLASSIFICATION	5.556434013937166E-8	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999993247116394	WITHOUT_CLASSIFICATION	6.752883605217313E-7	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999991591851536	WITHOUT_CLASSIFICATION	8.408148463213597E-7	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999376648646501	WITHOUT_CLASSIFICATION	6.23351353498326E-5	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999993115498058	WITHOUT_CLASSIFICATION	6.884501941746524E-7	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999975368122666	WITHOUT_CLASSIFICATION	2.463187733443594E-6	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9837358555579323	WITHOUT_CLASSIFICATION	0.01626414444206771	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999978775907357	WITHOUT_CLASSIFICATION	2.1224092643886784E-6	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999938836841785	WITHOUT_CLASSIFICATION	6.1163158214833745E-6	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999991493387455	WITHOUT_CLASSIFICATION	8.506612545778412E-7	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999800288415865	WITHOUT_CLASSIFICATION	1.9971158413465345E-5	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9934842508832582	WITHOUT_CLASSIFICATION	0.006515749116741855	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999967001865436	WITHOUT_CLASSIFICATION	3.2998134562827864E-6	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999945731937333	WITHOUT_CLASSIFICATION	5.426806266634507E-6	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999998107077711	WITHOUT_CLASSIFICATION	1.892922289344269E-7	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999997443546176	WITHOUT_CLASSIFICATION	2.556453824926542E-7	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999964228794	WITHOUT_CLASSIFICATION	3.5771206673900657E-9	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999979492156298	WITHOUT_CLASSIFICATION	2.0507843702190217E-6	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999993691400213	WITHOUT_CLASSIFICATION	6.308599787141668E-7	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999961703338484	WITHOUT_CLASSIFICATION	3.829666151553302E-6	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9987193371193753	WITHOUT_CLASSIFICATION	0.001280662880624647	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9820412160408848	WITHOUT_CLASSIFICATION	0.01795878395911518	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999597589481	WITHOUT_CLASSIFICATION	4.024105195353827E-8	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999597589481	WITHOUT_CLASSIFICATION	4.024105195353827E-8	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999982883205895	WITHOUT_CLASSIFICATION	1.7116794104964366E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999852224672	WITHOUT_CLASSIFICATION	1.477753271870623E-8	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999888406759935	WITHOUT_CLASSIFICATION	1.1159324006508446E-4	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999888406759935	WITHOUT_CLASSIFICATION	1.1159324006508446E-4	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999999740951131	WITHOUT_CLASSIFICATION	2.5904886893259852E-8	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999757177981571	WITHOUT_CLASSIFICATION	2.4282201842904575E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999973389225577	WITHOUT_CLASSIFICATION	2.6610774423011935E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999984009063	WITHOUT_CLASSIFICATION	1.5990936574509719E-9	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999922805267778	WITHOUT_CLASSIFICATION	7.719473222188832E-6	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992203876513	WITHOUT_CLASSIFICATION	7.79612348779917E-7	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999994621047257	WITHOUT_CLASSIFICATION	5.378952742871883E-7	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999994621047257	WITHOUT_CLASSIFICATION	5.378952742871883E-7	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999997185687431	WITHOUT_CLASSIFICATION	2.8143125693711115E-7	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999987333052535	WITHOUT_CLASSIFICATION	1.266694746531406E-6	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999998925101653	WITHOUT_CLASSIFICATION	1.0748983464751928E-7	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999675920778524	WITHOUT_CLASSIFICATION	3.2407922147649076E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999675920778524	WITHOUT_CLASSIFICATION	3.2407922147649076E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9999961716335043	WITHOUT_CLASSIFICATION	3.828366495767757E-6	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999409741379695	WITHOUT_CLASSIFICATION	5.902586203054845E-5	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9975817562384053	WITHOUT_CLASSIFICATION	0.0024182437615946697	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999999650169772	WITHOUT_CLASSIFICATION	3.4983022739721447E-8	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999949659276269	WITHOUT_CLASSIFICATION	5.034072372987468E-6	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999518053604	WITHOUT_CLASSIFICATION	4.8194639580935836E-8	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999964326329258	WITHOUT_CLASSIFICATION	3.5673670742569704E-6	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999996941713885	WITHOUT_CLASSIFICATION	3.058286115084027E-7	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999933021674	WITHOUT_CLASSIFICATION	6.6978326078935904E-9	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999865298250589	WITHOUT_CLASSIFICATION	1.3470174941006696E-5	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999974061716	WITHOUT_CLASSIFICATION	2.593828451704123E-9	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9996801658904397	WITHOUT_CLASSIFICATION	3.198341095602996E-4	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999993407591761	WITHOUT_CLASSIFICATION	6.592408238329665E-7	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9993297068664886	WITHOUT_CLASSIFICATION	6.70293133511496E-4	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999987203364473	WITHOUT_CLASSIFICATION	1.2796635527069336E-6	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999964756583547	WITHOUT_CLASSIFICATION	3.5243416454029654E-6	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999005233609	WITHOUT_CLASSIFICATION	9.947663911724667E-8	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999996527683213	WITHOUT_CLASSIFICATION	3.4723167868902688E-6	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999522769381699	WITHOUT_CLASSIFICATION	4.7723061830121186E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999935435882788	WITHOUT_CLASSIFICATION	6.456411721209984E-5	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9997533131698171	WITHOUT_CLASSIFICATION	2.4668683018293447E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999915761814334	WITHOUT_CLASSIFICATION	8.423818566554209E-6	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999995478301521	WITHOUT_CLASSIFICATION	4.52169847895978E-7	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999997723957106	WITHOUT_CLASSIFICATION	2.2760428940980045E-6	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999990855475529	WITHOUT_CLASSIFICATION	9.144524471281387E-7	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999790844823703	WITHOUT_CLASSIFICATION	2.0915517629707363E-5	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999983706695118	WITHOUT_CLASSIFICATION	1.6293304882442183E-6	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999059162994012	WITHOUT_CLASSIFICATION	9.408370059879462E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999988701936	WITHOUT_CLASSIFICATION	1.1298062521746625E-9	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999389679219	WITHOUT_CLASSIFICATION	6.103207809774446E-7	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9995624286668731	WITHOUT_CLASSIFICATION	4.3757133312691786E-4	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999996861573436	WITHOUT_CLASSIFICATION	3.138426563492888E-7	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999997901270335	WITHOUT_CLASSIFICATION	2.098729665060985E-7	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999920606955247	WITHOUT_CLASSIFICATION	7.939304475387062E-6	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999999572485084	WITHOUT_CLASSIFICATION	4.275149160346118E-7	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999581475175859	WITHOUT_CLASSIFICATION	4.185248241399223E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9999963877141183	WITHOUT_CLASSIFICATION	3.6122858817346406E-6	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999994942620949	WITHOUT_CLASSIFICATION	5.057379051041378E-7	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999941451341255	WITHOUT_CLASSIFICATION	5.854865874398552E-6	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996459675177	WITHOUT_CLASSIFICATION	3.540324823697724E-7	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9988041530455743	WITHOUT_CLASSIFICATION	0.001195846954425684	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9985012437376344	WITHOUT_CLASSIFICATION	0.00149875626236561	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9999969254954398	WITHOUT_CLASSIFICATION	3.0745045601712993E-6	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999993275759049	WITHOUT_CLASSIFICATION	6.724240951462575E-7	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999992827556876	WITHOUT_CLASSIFICATION	7.172443123073758E-7	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999963842910035	WITHOUT_CLASSIFICATION	3.6157089966060025E-6	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.998803094456292	WITHOUT_CLASSIFICATION	0.0011969055437080589	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999984198394075	WITHOUT_CLASSIFICATION	1.5801605924765317E-6	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999733070907771	WITHOUT_CLASSIFICATION	2.6692909222905686E-5	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999466833802	WITHOUT_CLASSIFICATION	5.33166198314877E-8	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.999210740458586	WITHOUT_CLASSIFICATION	7.892595414139669E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999997489402067	WITHOUT_CLASSIFICATION	2.510597933209916E-7	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999848084389	WITHOUT_CLASSIFICATION	1.5191561129179404E-8	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999928295066	WITHOUT_CLASSIFICATION	7.170493494212929E-9	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999216647696163	WITHOUT_CLASSIFICATION	7.833523038364131E-5	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999970018199071	WITHOUT_CLASSIFICATION	2.9981800927612613E-6	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9994659990528683	WITHOUT_CLASSIFICATION	5.340009471317047E-4	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999991853557768	WITHOUT_CLASSIFICATION	8.146442231976665E-7	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9997514459501602	WITHOUT_CLASSIFICATION	2.4855404983971315E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999979489198897	WITHOUT_CLASSIFICATION	2.0510801102623322E-6	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999897469785625	WITHOUT_CLASSIFICATION	1.0253021437519674E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999897469785625	WITHOUT_CLASSIFICATION	1.0253021437519674E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999953455887	WITHOUT_CLASSIFICATION	4.654411356961028E-9	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999988005832465	WITHOUT_CLASSIFICATION	1.1994167534377363E-6	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999985354379	WITHOUT_CLASSIFICATION	1.4645620747202093E-9	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999977534835	WITHOUT_CLASSIFICATION	2.246516498613167E-9	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999996065700194	WITHOUT_CLASSIFICATION	3.934299806077088E-6	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999997717710031	WITHOUT_CLASSIFICATION	2.2822899695066154E-7	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999891736382	WITHOUT_CLASSIFICATION	1.0826361883836479E-8	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999777145991	WITHOUT_CLASSIFICATION	2.2285400873677668E-8	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999987851821475	WITHOUT_CLASSIFICATION	1.2148178525245586E-6	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.999995280434657	WITHOUT_CLASSIFICATION	4.719565343025798E-6	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999595904489484	WITHOUT_CLASSIFICATION	4.0409551051491234E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999876676918174	WITHOUT_CLASSIFICATION	1.2332308182750776E-5	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999992571799405	WITHOUT_CLASSIFICATION	7.428200595374826E-7	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999998495138	WITHOUT_CLASSIFICATION	1.504862133096571E-10	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998747401577	WITHOUT_CLASSIFICATION	1.2525984223855056E-7	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998747401577	WITHOUT_CLASSIFICATION	1.2525984223855056E-7	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999995993030729	WITHOUT_CLASSIFICATION	4.006969271817002E-7	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9996668850861453	WITHOUT_CLASSIFICATION	3.3311491385474987E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999724626207	WITHOUT_CLASSIFICATION	2.7537379310787534E-8	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999562120295	WITHOUT_CLASSIFICATION	4.3787970582248375E-8	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999733847054	WITHOUT_CLASSIFICATION	2.6615294572990788E-8	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960592347771	WITHOUT_CLASSIFICATION	3.940765222896357E-6	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999984964502	WITHOUT_CLASSIFICATION	1.5035498739007812E-9	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9999931111063709	WITHOUT_CLASSIFICATION	6.888893629045112E-6	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9957089158706113	WITHOUT_CLASSIFICATION	0.004291084129388653	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999997354431	WITHOUT_CLASSIFICATION	2.645568451654113E-10	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999660450267709	WITHOUT_CLASSIFICATION	3.395497322899558E-5	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999957751805	WITHOUT_CLASSIFICATION	4.224819486262665E-9	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999998119496027	WITHOUT_CLASSIFICATION	1.8805039719526283E-7	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999360836429	WITHOUT_CLASSIFICATION	6.391635699826776E-8	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999481998831	WITHOUT_CLASSIFICATION	5.1800116973803595E-8	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999810365351911	WITHOUT_CLASSIFICATION	1.8963464808881276E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999891661506078	WITHOUT_CLASSIFICATION	1.0833849392196872E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998224577864	WITHOUT_CLASSIFICATION	1.7754221365631212E-7	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999988595489274	WITHOUT_CLASSIFICATION	1.1404510725733576E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998489733191	WITHOUT_CLASSIFICATION	1.510266809518573E-7	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999991434524	WITHOUT_CLASSIFICATION	8.565477632274151E-10	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999484387442	WITHOUT_CLASSIFICATION	5.156125582262881E-8	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999989177787357	WITHOUT_CLASSIFICATION	1.0822212642994855E-6	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998068998383	WITHOUT_CLASSIFICATION	1.931001617555186E-7	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999258203884	WITHOUT_CLASSIFICATION	7.41796116068346E-8	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9999994731046713	WITHOUT_CLASSIFICATION	5.26895328617462E-7	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9990306023359027	WITHOUT_CLASSIFICATION	9.693976640972907E-4	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999963007141333	WITHOUT_CLASSIFICATION	3.699285866803074E-6	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999839179282434	WITHOUT_CLASSIFICATION	1.608207175659663E-5	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9996831542607847	WITHOUT_CLASSIFICATION	3.168457392153936E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999998424651823	WITHOUT_CLASSIFICATION	1.5753481771138138E-6	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999998709320019	WITHOUT_CLASSIFICATION	1.2906799794987544E-7	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999958304386444	WITHOUT_CLASSIFICATION	4.1695613555384685E-6	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999880685813372	WITHOUT_CLASSIFICATION	1.1931418662919096E-5	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999991359777	WITHOUT_CLASSIFICATION	8.640222671443761E-10	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999960860240563	WITHOUT_CLASSIFICATION	3.9139759436587526E-6	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999996287248445	WITHOUT_CLASSIFICATION	3.712751555661776E-7	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999988609031711	WITHOUT_CLASSIFICATION	1.1390968288350842E-6	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999700423109	WITHOUT_CLASSIFICATION	2.995768910767545E-8	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999998983245526	WITHOUT_CLASSIFICATION	1.0167544744239682E-7	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9990230561161395	WITHOUT_CLASSIFICATION	9.769438838606473E-4	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9998189475088517	WITHOUT_CLASSIFICATION	1.8105249114836963E-4	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990641592822467	WITHOUT_CLASSIFICATION	9.358407177532245E-4	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990641592822467	WITHOUT_CLASSIFICATION	9.358407177532245E-4	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999875679413	WITHOUT_CLASSIFICATION	1.2432058741397417E-8	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998991533006069	WITHOUT_CLASSIFICATION	1.0084669939320981E-4	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999802511825576	WITHOUT_CLASSIFICATION	1.974881744238754E-5	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999105346436489	WITHOUT_CLASSIFICATION	8.946535635115386E-5	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999967182658387	WITHOUT_CLASSIFICATION	3.281734161264654E-6	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999804551701	WITHOUT_CLASSIFICATION	1.9544829953476824E-8	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998817901199708	WITHOUT_CLASSIFICATION	1.1820988002927412E-4	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999760078118	WITHOUT_CLASSIFICATION	2.3992188240406077E-8	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9984037352925486	WITHOUT_CLASSIFICATION	0.0015962647074514674	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994720158246	WITHOUT_CLASSIFICATION	5.279841753959114E-7	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998349524202	WITHOUT_CLASSIFICATION	1.6504757987178774E-7	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999935579470997	WITHOUT_CLASSIFICATION	6.442052900339221E-6	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999995045208722	WITHOUT_CLASSIFICATION	4.954791277815769E-7	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999900481703	WITHOUT_CLASSIFICATION	9.951829780826834E-9	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.999996636094774	WITHOUT_CLASSIFICATION	3.363905226067557E-6	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999934818314464	WITHOUT_CLASSIFICATION	6.518168553609802E-6	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9997411643809069	WITHOUT_CLASSIFICATION	2.588356190930819E-4	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999965957302167	WITHOUT_CLASSIFICATION	3.4042697832189258E-6	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999643423739	WITHOUT_CLASSIFICATION	3.565762605734278E-8	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9981819283826273	WITHOUT_CLASSIFICATION	0.0018180716173727487	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999996618096048	WITHOUT_CLASSIFICATION	3.3819039520673227E-6	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9984778317782915	WITHOUT_CLASSIFICATION	0.001522168221708522	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999918698225359	WITHOUT_CLASSIFICATION	8.130177464233653E-6	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999993716897	WITHOUT_CLASSIFICATION	6.283102573942831E-10	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.999999448100421	WITHOUT_CLASSIFICATION	5.518995790592226E-7	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.99986444378324	WITHOUT_CLASSIFICATION	1.3555621675997033E-4	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999770980122487	WITHOUT_CLASSIFICATION	2.2901987751381077E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999975203855139	WITHOUT_CLASSIFICATION	2.479614486130478E-6	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999997023410568	WITHOUT_CLASSIFICATION	2.976589431309082E-7	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999946854134912	WITHOUT_CLASSIFICATION	5.314586508666874E-6	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998913253811093	WITHOUT_CLASSIFICATION	1.0867461889071152E-4	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999761295657	WITHOUT_CLASSIFICATION	2.387043436517933E-8	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999995056246705	WITHOUT_CLASSIFICATION	4.943753293763796E-7	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999417708655	WITHOUT_CLASSIFICATION	5.8229134470038046E-8	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999979855641218	WITHOUT_CLASSIFICATION	2.0144358782571783E-6	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999995712694	WITHOUT_CLASSIFICATION	4.2873064756674615E-10	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999967661653195	WITHOUT_CLASSIFICATION	3.2338346805056735E-6	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999879212801	WITHOUT_CLASSIFICATION	1.2078719916731763E-8	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999987474771422	WITHOUT_CLASSIFICATION	1.2525228577185703E-6	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999902397672	WITHOUT_CLASSIFICATION	9.760232904344894E-9	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999995467592794	WITHOUT_CLASSIFICATION	4.5324072066283655E-7	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.999995089642081	WITHOUT_CLASSIFICATION	4.9103579191024604E-6	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999994452071939	WITHOUT_CLASSIFICATION	5.547928062718779E-7	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9991497151957827	WITHOUT_CLASSIFICATION	8.502848042173792E-4	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999844652123	WITHOUT_CLASSIFICATION	1.553478765119425E-8	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999948325022	WITHOUT_CLASSIFICATION	5.1674977661499635E-9	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999346502833	WITHOUT_CLASSIFICATION	6.534971679009565E-8	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999061662869534	WITHOUT_CLASSIFICATION	9.383371304652534E-5	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999977201615929	WITHOUT_CLASSIFICATION	2.2798384070130768E-6	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999992571799405	WITHOUT_CLASSIFICATION	7.428200595374826E-7	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999998217146002	WITHOUT_CLASSIFICATION	1.782853997192713E-7	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999994586986	WITHOUT_CLASSIFICATION	5.413014136569653E-10	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999377014722406	WITHOUT_CLASSIFICATION	6.229852775939266E-5	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999749263525	WITHOUT_CLASSIFICATION	2.50736474011193E-8	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999790734331	WITHOUT_CLASSIFICATION	2.092656694759418E-8	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999230147647088	WITHOUT_CLASSIFICATION	7.698523529130994E-5	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999806648879432	WITHOUT_CLASSIFICATION	1.9335112056717973E-5	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9981171562859281	WITHOUT_CLASSIFICATION	0.0018828437140718914	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999261135577	WITHOUT_CLASSIFICATION	7.388644227549303E-8	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9991181914289438	WITHOUT_CLASSIFICATION	8.818085710562589E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.999999867645837	WITHOUT_CLASSIFICATION	1.3235416300872738E-7	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9996831067185006	WITHOUT_CLASSIFICATION	3.1689328149935774E-4	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998130582529	WITHOUT_CLASSIFICATION	1.8694174705937226E-7	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999985893639621	WITHOUT_CLASSIFICATION	1.4106360378742954E-6	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999955558121925	WITHOUT_CLASSIFICATION	4.444187807497663E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999589824561	WITHOUT_CLASSIFICATION	4.101754400228918E-8	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999990315640896	WITHOUT_CLASSIFICATION	9.684359103532413E-7	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999977068089221	WITHOUT_CLASSIFICATION	2.293191077933113E-6	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998836635854	WITHOUT_CLASSIFICATION	1.1633641470255325E-7	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998581714366029	WITHOUT_CLASSIFICATION	1.4182856339707125E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999589824561	WITHOUT_CLASSIFICATION	4.101754400228918E-8	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9857479625743754	WITHOUT_CLASSIFICATION	0.014252037425624708	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999895026079321	WITHOUT_CLASSIFICATION	1.0497392067851508E-5	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999992946574	WITHOUT_CLASSIFICATION	7.053425393553923E-10	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999999990721636	WITHOUT_CLASSIFICATION	9.278363970530444E-9	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999996018845069	WITHOUT_CLASSIFICATION	3.981154931309352E-7	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999847511227989	WITHOUT_CLASSIFICATION	1.5248877201058658E-5	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999907584	WITHOUT_CLASSIFICATION	9.241602840519363E-12	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999313613326041	WITHOUT_CLASSIFICATION	6.863866739596846E-5	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999999967255531	WITHOUT_CLASSIFICATION	3.27444690605281E-8	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9966582658281951	WITHOUT_CLASSIFICATION	0.003341734171804937	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999991131874821	WITHOUT_CLASSIFICATION	8.868125177644797E-7	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999146261088011	WITHOUT_CLASSIFICATION	8.537389119894163E-5	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999986978585744	WITHOUT_CLASSIFICATION	1.3021414256105496E-6	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999999082898301	WITHOUT_CLASSIFICATION	9.17101699764262E-8	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999977166957478	WITHOUT_CLASSIFICATION	2.2833042522462054E-6	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9997843601264202	WITHOUT_CLASSIFICATION	2.156398735797278E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999975368122666	WITHOUT_CLASSIFICATION	2.463187733443594E-6	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999997583452607	WITHOUT_CLASSIFICATION	2.4165473935450715E-7	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998771330256	WITHOUT_CLASSIFICATION	1.2286697440719295E-7	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999873729426327	WITHOUT_CLASSIFICATION	1.2627057367239512E-5	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9997562851716051	WITHOUT_CLASSIFICATION	2.4371482839480603E-4	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999990609737	WITHOUT_CLASSIFICATION	9.390263256947292E-10	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999998945946926	WITHOUT_CLASSIFICATION	1.0540530740947307E-6	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999944457756552	WITHOUT_CLASSIFICATION	5.5542243448229555E-6	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999615449	WITHOUT_CLASSIFICATION	3.845517333995343E-11	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.999999895897333	WITHOUT_CLASSIFICATION	1.0410266705624103E-7	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999978430782812	WITHOUT_CLASSIFICATION	2.156921718728206E-6	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9996681137130401	WITHOUT_CLASSIFICATION	3.3188628695982476E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999149570218	WITHOUT_CLASSIFICATION	8.504297816975238E-8	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999935966064938	WITHOUT_CLASSIFICATION	6.403393506199882E-6	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.7136631962583244	WITHOUT_CLASSIFICATION	0.2863368037416756	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.999999624512868	WITHOUT_CLASSIFICATION	3.75487132046028E-7	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9995538231511912	WITHOUT_CLASSIFICATION	4.461768488087464E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9829123100590149	WITHOUT_CLASSIFICATION	0.017087689940985147	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999948849135706	WITHOUT_CLASSIFICATION	5.115086429430693E-6	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999992945225	WITHOUT_CLASSIFICATION	7.054775470777385E-10	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999999346123	WITHOUT_CLASSIFICATION	6.538768604794465E-10	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999980531811	WITHOUT_CLASSIFICATION	1.94681884255055E-9	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999972052594412	WITHOUT_CLASSIFICATION	2.794740558699877E-6	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999417453197	WITHOUT_CLASSIFICATION	5.8254680209196814E-8	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999996175535452	WITHOUT_CLASSIFICATION	3.824464548042603E-6	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999987883457049	WITHOUT_CLASSIFICATION	1.2116542951484454E-6	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999987883457049	WITHOUT_CLASSIFICATION	1.2116542951484454E-6	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999694256883297	WITHOUT_CLASSIFICATION	3.057431167029692E-5	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999440922822	WITHOUT_CLASSIFICATION	5.590771779004844E-7	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999796487976	WITHOUT_CLASSIFICATION	2.0351202422786857E-8	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999971080569396	WITHOUT_CLASSIFICATION	2.8919430604198303E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999975699849645	WITHOUT_CLASSIFICATION	2.430015035454041E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999975699849645	WITHOUT_CLASSIFICATION	2.430015035454041E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999475202058505	WITHOUT_CLASSIFICATION	5.247979414948858E-5	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999940151134	WITHOUT_CLASSIFICATION	5.984886584135839E-9	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999998210482876	WITHOUT_CLASSIFICATION	1.7895171240749125E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999339927833	WITHOUT_CLASSIFICATION	6.600721664756151E-8	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999998791052402	WITHOUT_CLASSIFICATION	1.2089475967956884E-7	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999992562944946	WITHOUT_CLASSIFICATION	7.437055054727373E-7	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999999960450642	WITHOUT_CLASSIFICATION	3.954935795926825E-8	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999779058754715	WITHOUT_CLASSIFICATION	2.209412452838612E-5	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999933204873988	WITHOUT_CLASSIFICATION	6.679512601237992E-6	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999916704031	WITHOUT_CLASSIFICATION	8.329596901844394E-9	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999799271897579	WITHOUT_CLASSIFICATION	2.007281024204876E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999346497692	WITHOUT_CLASSIFICATION	6.535023073690651E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999346497692	WITHOUT_CLASSIFICATION	6.535023073690651E-8	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999982670568	WITHOUT_CLASSIFICATION	1.7329431910185074E-9	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999735595123792	WITHOUT_CLASSIFICATION	2.6440487620829695E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999998701316242	WITHOUT_CLASSIFICATION	1.2986837585404092E-7	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999999649958398	WITHOUT_CLASSIFICATION	3.500416021421546E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986847636675005	WITHOUT_CLASSIFICATION	0.0013152363324995158	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999999736254285	WITHOUT_CLASSIFICATION	2.6374571518542935E-8	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999958097476	WITHOUT_CLASSIFICATION	4.190252411501294E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986847636675005	WITHOUT_CLASSIFICATION	0.0013152363324995158	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999814971349	WITHOUT_CLASSIFICATION	1.850286511732509E-8	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999925311534282	WITHOUT_CLASSIFICATION	7.468846571807912E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999953676087637	WITHOUT_CLASSIFICATION	4.632391236351278E-6	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999973470032	WITHOUT_CLASSIFICATION	2.652996875586096E-9	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9966582658281951	WITHOUT_CLASSIFICATION	0.003341734171804937	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999996407630969	WITHOUT_CLASSIFICATION	3.592369031488867E-7	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9994376256231873	WITHOUT_CLASSIFICATION	5.623743768127504E-4	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999950520832653	WITHOUT_CLASSIFICATION	4.947916734618045E-6	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.999999818429092	WITHOUT_CLASSIFICATION	1.815709080105956E-7	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999995021996315	WITHOUT_CLASSIFICATION	4.978003684107202E-7	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999994518521645	WITHOUT_CLASSIFICATION	5.481478354537366E-7	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999994596458652	WITHOUT_CLASSIFICATION	5.403541347317601E-7	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999999872775677	WITHOUT_CLASSIFICATION	1.27224323436661E-8	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999974058931446	WITHOUT_CLASSIFICATION	2.594106855446118E-6	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9970505649091788	WITHOUT_CLASSIFICATION	0.0029494350908211577	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9970505649091788	WITHOUT_CLASSIFICATION	0.0029494350908211577	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999960272663968	WITHOUT_CLASSIFICATION	3.972733603140719E-6	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999987510884	WITHOUT_CLASSIFICATION	1.2489116228711151E-9	DEFECT
package	WITHOUT_CLASSIFICATION	0.999995474330367	WITHOUT_CLASSIFICATION	4.5256696329941555E-6	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999991975985789	WITHOUT_CLASSIFICATION	8.024014211162556E-7	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999995940114621	WITHOUT_CLASSIFICATION	4.059885379368945E-7	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999137529255	WITHOUT_CLASSIFICATION	8.624707452388738E-8	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998060552305	WITHOUT_CLASSIFICATION	1.9394476943692113E-7	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999969517723247	WITHOUT_CLASSIFICATION	3.0482276753039357E-5	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999627707026	WITHOUT_CLASSIFICATION	3.722929743659406E-8	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999987673051246	WITHOUT_CLASSIFICATION	1.2326948753769915E-6	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953794689744	WITHOUT_CLASSIFICATION	4.620531025605995E-6	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9809657196700249	WITHOUT_CLASSIFICATION	0.019034280329975103	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999994918847428	WITHOUT_CLASSIFICATION	5.081152571302372E-7	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999076449245	WITHOUT_CLASSIFICATION	9.235507550512028E-8	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999987224368659	WITHOUT_CLASSIFICATION	1.277563134153544E-6	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999700982748	WITHOUT_CLASSIFICATION	2.9901725285583584E-8	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.999973892261697	WITHOUT_CLASSIFICATION	2.610773830298954E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999804157377459	WITHOUT_CLASSIFICATION	1.958426225413727E-5	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9990916772626576	WITHOUT_CLASSIFICATION	9.083227373424468E-4	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9994183973027663	WITHOUT_CLASSIFICATION	5.816026972338049E-4	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999992653790194	WITHOUT_CLASSIFICATION	7.34620980635139E-7	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999992669286	WITHOUT_CLASSIFICATION	7.330713397211889E-10	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9975817562384053	WITHOUT_CLASSIFICATION	0.0024182437615946697	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999988817284	WITHOUT_CLASSIFICATION	1.1182715983147388E-9	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999970055880351	WITHOUT_CLASSIFICATION	2.994411964988379E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999970055880351	WITHOUT_CLASSIFICATION	2.994411964988379E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9997604979854459	WITHOUT_CLASSIFICATION	2.3950201455400405E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998486999931666	WITHOUT_CLASSIFICATION	1.5130000683330244E-4	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999993349504	WITHOUT_CLASSIFICATION	6.6504953543423E-10	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999908046086582	WITHOUT_CLASSIFICATION	9.195391341734838E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999943102415804	WITHOUT_CLASSIFICATION	5.689758419717549E-6	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999372231009573	WITHOUT_CLASSIFICATION	6.277689904261313E-5	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.8898000850190523	WITHOUT_CLASSIFICATION	0.11019991498094775	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999910469469487	WITHOUT_CLASSIFICATION	8.953053051314298E-6	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.5033488592023091	WITHOUT_CLASSIFICATION	0.4966511407976909	DEFECT
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.783277839250849	DEFECT	0.21672216074915088	WITHOUT_CLASSIFICATION
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.7909324773953771	DEFECT	0.2090675226046229	WITHOUT_CLASSIFICATION
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9565013718554137	DEFECT	0.04349862814458638	WITHOUT_CLASSIFICATION
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9999999979361479	WITHOUT_CLASSIFICATION	2.063852131959597E-9	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.999141381542239	WITHOUT_CLASSIFICATION	8.586184577609457E-4	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9663392189637392	DEFECT	0.03366078103626082	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.7093628647393612	WITHOUT_CLASSIFICATION	0.29063713526063883	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.9991425554286594	DEFECT	8.574445713406801E-4	WITHOUT_CLASSIFICATION
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.7118875415604058	WITHOUT_CLASSIFICATION	0.2881124584395942	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9339640853788785	DEFECT	0.06603591462112143	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9339640853788785	DEFECT	0.06603591462112143	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.985124557579375	WITHOUT_CLASSIFICATION	0.01487544242062503	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999737032019401	WITHOUT_CLASSIFICATION	2.6296798059892853E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9871348404433437	DEFECT	0.012865159556656326	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.9998915695177227	WITHOUT_CLASSIFICATION	1.0843048227723142E-4	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9439443545155061	WITHOUT_CLASSIFICATION	0.05605564548449399	DEFECT
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9659793352182307	WITHOUT_CLASSIFICATION	0.034020664781769405	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.8091555584588201	DEFECT	0.19084444154117983	WITHOUT_CLASSIFICATION
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.7845864290396005	WITHOUT_CLASSIFICATION	0.21541357096039943	DEFECT
TODO: is this completely correct?	DEFECT	0.7512047734186341	WITHOUT_CLASSIFICATION	0.24879522658136582	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.8709715696466998	DEFECT	0.12902843035330022	WITHOUT_CLASSIFICATION
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.894790453760655	DEFECT	0.105209546239345	WITHOUT_CLASSIFICATION
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9998210140441917	WITHOUT_CLASSIFICATION	1.7898595580834444E-4	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.9826120218740544	DEFECT	0.017387978125945627	WITHOUT_CLASSIFICATION
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9678431738910116	DEFECT	0.03215682610898842	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9976540679706789	WITHOUT_CLASSIFICATION	0.002345932029321141	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.8308411388169953	WITHOUT_CLASSIFICATION	0.16915886118300477	DEFECT
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8598538280005743	DEFECT	0.14014617199942572	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.6279457171584429	DEFECT	0.3720542828415571	WITHOUT_CLASSIFICATION
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.7573470149096997	DEFECT	0.24265298509030034	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9339640853788785	DEFECT	0.06603591462112143	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9996877362662643	DEFECT	3.1226373373567954E-4	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.8275516160000046	WITHOUT_CLASSIFICATION	0.1724483839999954	DEFECT
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.6839321886074071	WITHOUT_CLASSIFICATION	0.3160678113925929	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9984236862850288	WITHOUT_CLASSIFICATION	0.0015763137149712694	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9999902088445067	WITHOUT_CLASSIFICATION	9.791155493292343E-6	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9997603125286819	WITHOUT_CLASSIFICATION	2.3968747131821326E-4	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9945482867602969	WITHOUT_CLASSIFICATION	0.005451713239703083	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.7466200348719944	DEFECT	0.2533799651280056	WITHOUT_CLASSIFICATION
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.908344619325336	DEFECT	0.09165538067466407	WITHOUT_CLASSIFICATION
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9955607213853326	WITHOUT_CLASSIFICATION	0.00443927861466743	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.9983578933928188	WITHOUT_CLASSIFICATION	0.0016421066071813223	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.9611845057149807	DEFECT	0.038815494285019264	WITHOUT_CLASSIFICATION
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9997268145530666	WITHOUT_CLASSIFICATION	2.731854469333859E-4	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9974812242455227	WITHOUT_CLASSIFICATION	0.0025187757544772953	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.9857768064935742	WITHOUT_CLASSIFICATION	0.014223193506425733	DEFECT
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.8536508330436824	WITHOUT_CLASSIFICATION	0.14634916695631758	DEFECT
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.9560818994765197	DEFECT	0.04391810052348034	WITHOUT_CLASSIFICATION
