test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999857331044	WITHOUT_CLASSIFICATION	1.4266895539807109E-8	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999747294820539	WITHOUT_CLASSIFICATION	2.52705179460715E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999747294820539	WITHOUT_CLASSIFICATION	2.52705179460715E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999747294820539	WITHOUT_CLASSIFICATION	2.52705179460715E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999747294820539	WITHOUT_CLASSIFICATION	2.52705179460715E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999747294820539	WITHOUT_CLASSIFICATION	2.52705179460715E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999747294820539	WITHOUT_CLASSIFICATION	2.52705179460715E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999747294820539	WITHOUT_CLASSIFICATION	2.52705179460715E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957934714253	WITHOUT_CLASSIFICATION	4.206528574736155E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957934714253	WITHOUT_CLASSIFICATION	4.206528574736155E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999956054115093	WITHOUT_CLASSIFICATION	4.394588490618655E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999926575676701	WITHOUT_CLASSIFICATION	7.342432329929909E-6	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999999371293813	WITHOUT_CLASSIFICATION	6.287061871062264E-8	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999952386382092	WITHOUT_CLASSIFICATION	4.761361790853796E-6	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999952386382092	WITHOUT_CLASSIFICATION	4.761361790853796E-6	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999975688657	WITHOUT_CLASSIFICATION	2.4311342261433975E-9	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988204776269	WITHOUT_CLASSIFICATION	1.1795223731278235E-6	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999999060292081	WITHOUT_CLASSIFICATION	9.397079198823855E-8	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999873202837447	WITHOUT_CLASSIFICATION	1.2679716255333117E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999954510911898	WITHOUT_CLASSIFICATION	4.5489088101176005E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999954510911898	WITHOUT_CLASSIFICATION	4.5489088101176005E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999605165738973	WITHOUT_CLASSIFICATION	3.948342610270171E-5	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999998533694553	WITHOUT_CLASSIFICATION	1.466305446172829E-7	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9997188400915021	WITHOUT_CLASSIFICATION	2.8115990849794545E-4	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999962149453867	WITHOUT_CLASSIFICATION	3.785054613367191E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999982202369326	WITHOUT_CLASSIFICATION	1.7797630674426286E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999946262721076	WITHOUT_CLASSIFICATION	5.3737278924772665E-6	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.999996422215231	WITHOUT_CLASSIFICATION	3.5777847690252767E-6	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999736528358941	WITHOUT_CLASSIFICATION	2.6347164105906155E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999052430146821	WITHOUT_CLASSIFICATION	9.475698531791637E-5	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999999391219286	WITHOUT_CLASSIFICATION	6.087807142656917E-8	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999997815744695	WITHOUT_CLASSIFICATION	2.184255305032576E-6	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999933963373644	WITHOUT_CLASSIFICATION	6.603662635589038E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999985605723452	WITHOUT_CLASSIFICATION	1.439427654738273E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.999994483971682	WITHOUT_CLASSIFICATION	5.5160283180146255E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.999994483971682	WITHOUT_CLASSIFICATION	5.5160283180146255E-6	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.999997010548302	WITHOUT_CLASSIFICATION	2.9894516978399928E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.999979863309995	WITHOUT_CLASSIFICATION	2.0136690005068366E-5	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999320088064	WITHOUT_CLASSIFICATION	6.799119357462145E-8	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997344565072	WITHOUT_CLASSIFICATION	2.6554349271730445E-7	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999994557939472	WITHOUT_CLASSIFICATION	5.442060528622856E-7	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999976836767918	WITHOUT_CLASSIFICATION	2.3163232082715724E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999998429968813	WITHOUT_CLASSIFICATION	1.5700311873825697E-7	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.999999997161911	WITHOUT_CLASSIFICATION	2.8380889045898525E-9	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999998020590886	WITHOUT_CLASSIFICATION	1.979409113913102E-7	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999998063438986	WITHOUT_CLASSIFICATION	1.9365610140503786E-7	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999994095157428	WITHOUT_CLASSIFICATION	5.904842571656704E-7	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999355677819325	WITHOUT_CLASSIFICATION	6.443221806746766E-5	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999998348982944	WITHOUT_CLASSIFICATION	1.651017057721895E-7	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999992397423567	WITHOUT_CLASSIFICATION	7.602576433775076E-7	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999919213092767	WITHOUT_CLASSIFICATION	8.078690723261507E-6	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986093089004	WITHOUT_CLASSIFICATION	1.3906910996114713E-6	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780683947043	WITHOUT_CLASSIFICATION	2.1931605295707458E-5	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999997885333969	WITHOUT_CLASSIFICATION	2.1146660319977025E-7	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999994321181229	WITHOUT_CLASSIFICATION	5.67881877105778E-7	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999955793648642	WITHOUT_CLASSIFICATION	4.420635135801647E-6	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9940702745753534	WITHOUT_CLASSIFICATION	0.005929725424646669	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999978010463155	WITHOUT_CLASSIFICATION	2.1989536844379264E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999955793648642	WITHOUT_CLASSIFICATION	4.420635135801647E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999978010463155	WITHOUT_CLASSIFICATION	2.1989536844379264E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999981035385541	WITHOUT_CLASSIFICATION	1.8964614458186497E-6	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999999428991974	WITHOUT_CLASSIFICATION	5.7100802696941805E-8	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999987166786211	WITHOUT_CLASSIFICATION	1.283321379033699E-6	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999993062493788	WITHOUT_CLASSIFICATION	6.937506210878583E-7	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999999996160987	WITHOUT_CLASSIFICATION	3.839013037985396E-9	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999978113838	WITHOUT_CLASSIFICATION	2.1886162009715355E-9	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998753443061336	WITHOUT_CLASSIFICATION	1.2465569386638394E-4	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999209543228342	WITHOUT_CLASSIFICATION	7.904567716573637E-5	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999135175678	WITHOUT_CLASSIFICATION	8.648243223743548E-8	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.999999321432973	WITHOUT_CLASSIFICATION	6.78567026993984E-7	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999973246919427	WITHOUT_CLASSIFICATION	2.6753080572123024E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999978010463155	WITHOUT_CLASSIFICATION	2.1989536844379264E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999996635325434	WITHOUT_CLASSIFICATION	3.3646745655200166E-7	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999928483385463	WITHOUT_CLASSIFICATION	7.151661453731493E-6	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999995826549253	WITHOUT_CLASSIFICATION	4.1734507475133854E-7	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999955490914265	WITHOUT_CLASSIFICATION	4.450908573557273E-6	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999989467623079	WITHOUT_CLASSIFICATION	1.0532376919667293E-6	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999912020345177	WITHOUT_CLASSIFICATION	8.79796548225462E-6	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999996213791658	WITHOUT_CLASSIFICATION	3.786208342723123E-7	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997292393541	WITHOUT_CLASSIFICATION	2.707606458374673E-7	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999999567826012	WITHOUT_CLASSIFICATION	4.3217398814034446E-7	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999988791741	WITHOUT_CLASSIFICATION	1.1208258790405877E-9	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999606586345	WITHOUT_CLASSIFICATION	3.934136551544099E-8	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999994441012689	WITHOUT_CLASSIFICATION	5.558987311051067E-6	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999974872827112	WITHOUT_CLASSIFICATION	2.512717288893661E-6	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999990534007046	WITHOUT_CLASSIFICATION	9.465992955359856E-7	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999997382696	WITHOUT_CLASSIFICATION	2.6173037857666057E-10	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999487816951	WITHOUT_CLASSIFICATION	5.12183049271398E-8	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999854627055	WITHOUT_CLASSIFICATION	1.4537294399432168E-8	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999924936467	WITHOUT_CLASSIFICATION	7.506353439168343E-9	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999797854653	WITHOUT_CLASSIFICATION	2.0214534742333666E-8	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999841526719	WITHOUT_CLASSIFICATION	1.584732811304998E-8	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999967433541882	WITHOUT_CLASSIFICATION	3.256645811800883E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999963601358713	WITHOUT_CLASSIFICATION	3.639864128630922E-6	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999829349024786	WITHOUT_CLASSIFICATION	1.706509752136494E-5	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999726266103	WITHOUT_CLASSIFICATION	2.7373389692463805E-8	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999963601358713	WITHOUT_CLASSIFICATION	3.639864128630922E-6	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999981508938759	WITHOUT_CLASSIFICATION	1.849106124122343E-6	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999756884934827	WITHOUT_CLASSIFICATION	2.431150651727639E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999955793648642	WITHOUT_CLASSIFICATION	4.420635135801647E-6	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999998158367481	WITHOUT_CLASSIFICATION	1.8416325185354262E-7	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.999999899677049	WITHOUT_CLASSIFICATION	1.0032295102235723E-7	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999985501419381	WITHOUT_CLASSIFICATION	1.4498580619034427E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999985501419381	WITHOUT_CLASSIFICATION	1.4498580619034427E-6	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999831032961938	WITHOUT_CLASSIFICATION	1.6896703806239656E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999698002879	WITHOUT_CLASSIFICATION	3.019971210152759E-8	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999998280417894	WITHOUT_CLASSIFICATION	1.719582106528182E-7	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999998221876	WITHOUT_CLASSIFICATION	1.7781250103824185E-10	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999977654362657	WITHOUT_CLASSIFICATION	2.2345637343681643E-6	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999716806758	WITHOUT_CLASSIFICATION	2.8319324146880077E-8	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.99999891117777	WITHOUT_CLASSIFICATION	1.0888222299959148E-6	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999742566443128	WITHOUT_CLASSIFICATION	2.5743355687104435E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999340310591	WITHOUT_CLASSIFICATION	6.596894088344736E-8	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998407368429	WITHOUT_CLASSIFICATION	1.592631571565865E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999942888896	WITHOUT_CLASSIFICATION	5.711110391560876E-9	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999942888896	WITHOUT_CLASSIFICATION	5.711110391560876E-9	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999903012469774	WITHOUT_CLASSIFICATION	9.698753022654293E-6	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999992699522479	WITHOUT_CLASSIFICATION	7.300477521354122E-7	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999996203944185	WITHOUT_CLASSIFICATION	3.796055814702332E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999942888896	WITHOUT_CLASSIFICATION	5.711110391560876E-9	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999903012469774	WITHOUT_CLASSIFICATION	9.698753022654293E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999903012469774	WITHOUT_CLASSIFICATION	9.698753022654293E-6	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999729875562	WITHOUT_CLASSIFICATION	2.7012443889974222E-8	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999986722519808	WITHOUT_CLASSIFICATION	1.3277480191883463E-6	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999995994605523	WITHOUT_CLASSIFICATION	4.005394477431827E-7	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999981766018	WITHOUT_CLASSIFICATION	1.8233982003722679E-9	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999955230899275	WITHOUT_CLASSIFICATION	4.476910072530313E-6	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999955230899275	WITHOUT_CLASSIFICATION	4.476910072530313E-6	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999998500730413	WITHOUT_CLASSIFICATION	1.4992695867165636E-7	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999983719477165	WITHOUT_CLASSIFICATION	1.6280522835478848E-6	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999971036868054	WITHOUT_CLASSIFICATION	2.896313194581919E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999932931539621	WITHOUT_CLASSIFICATION	6.7068460378482255E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999932931539621	WITHOUT_CLASSIFICATION	6.7068460378482255E-6	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999985037597305	WITHOUT_CLASSIFICATION	1.4962402693760545E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998995110358729	WITHOUT_CLASSIFICATION	1.0048896412697783E-4	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999936558560384	WITHOUT_CLASSIFICATION	6.344143961580584E-6	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999962482279	WITHOUT_CLASSIFICATION	3.7517720165174555E-9	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999899901603	WITHOUT_CLASSIFICATION	1.000983971706364E-8	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999702317676	WITHOUT_CLASSIFICATION	2.976823244951413E-8	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999955564970231	WITHOUT_CLASSIFICATION	4.443502976954994E-6	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999999166968552	WITHOUT_CLASSIFICATION	8.330314476533497E-8	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999995989212687	WITHOUT_CLASSIFICATION	4.0107873131718397E-7	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999936558560384	WITHOUT_CLASSIFICATION	6.344143961580584E-6	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999865967395755	WITHOUT_CLASSIFICATION	1.3403260424474258E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.999986703809159	WITHOUT_CLASSIFICATION	1.3296190840967174E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.999986703809159	WITHOUT_CLASSIFICATION	1.3296190840967174E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999995502179911	WITHOUT_CLASSIFICATION	4.4978200895698325E-7	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999993695339696	WITHOUT_CLASSIFICATION	6.304660304894644E-7	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999825639022	WITHOUT_CLASSIFICATION	1.74360977690386E-8	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999874614639336	WITHOUT_CLASSIFICATION	1.253853606639139E-4	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999891877093942	WITHOUT_CLASSIFICATION	1.0812290605841226E-5	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999999364761744	WITHOUT_CLASSIFICATION	6.352382563065042E-8	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999878638801666	WITHOUT_CLASSIFICATION	1.2136119833453358E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9996121825186355	WITHOUT_CLASSIFICATION	3.878174813644336E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999973424561	WITHOUT_CLASSIFICATION	2.6575438212524374E-9	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993863872731	WITHOUT_CLASSIFICATION	6.136127267892201E-7	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993863872731	WITHOUT_CLASSIFICATION	6.136127267892201E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999972366487025	WITHOUT_CLASSIFICATION	2.763351297459522E-6	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999857331044	WITHOUT_CLASSIFICATION	1.4266895539807109E-8	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997468140787	WITHOUT_CLASSIFICATION	2.531859212676797E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999747294820539	WITHOUT_CLASSIFICATION	2.52705179460715E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9999967414394436	WITHOUT_CLASSIFICATION	3.2585605563857736E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957934714253	WITHOUT_CLASSIFICATION	4.206528574736155E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999945421486811	WITHOUT_CLASSIFICATION	5.457851318887034E-6	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999999412378201	WITHOUT_CLASSIFICATION	5.8762179939753344E-8	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999996706735954	WITHOUT_CLASSIFICATION	3.293264044816199E-7	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9999882596900801	WITHOUT_CLASSIFICATION	1.1740309919997971E-5	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.999582211201316	WITHOUT_CLASSIFICATION	4.1778879868403855E-4	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999918427162802	WITHOUT_CLASSIFICATION	8.157283719744266E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999824063987103	WITHOUT_CLASSIFICATION	1.7593601289780796E-5	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999992298826235	WITHOUT_CLASSIFICATION	7.701173765286997E-7	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999926575676701	WITHOUT_CLASSIFICATION	7.342432329929909E-6	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999933451834829	WITHOUT_CLASSIFICATION	6.654816517093126E-6	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999933451834829	WITHOUT_CLASSIFICATION	6.654816517093126E-6	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9999989655873428	WITHOUT_CLASSIFICATION	1.0344126571856282E-6	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.999990965487316	WITHOUT_CLASSIFICATION	9.034512683961689E-6	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999973213679731	WITHOUT_CLASSIFICATION	2.678632026912886E-6	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999987290247971	WITHOUT_CLASSIFICATION	1.2709752028533599E-6	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999964035714881	WITHOUT_CLASSIFICATION	3.596428511949316E-6	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999786078729	WITHOUT_CLASSIFICATION	2.1392127086509233E-8	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999952386382092	WITHOUT_CLASSIFICATION	4.761361790853796E-6	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999999599547547	WITHOUT_CLASSIFICATION	4.004524529143251E-7	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999982697078661	WITHOUT_CLASSIFICATION	1.7302921339186268E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999987104068699	WITHOUT_CLASSIFICATION	1.2895931299901693E-6	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999978140008021	WITHOUT_CLASSIFICATION	2.1859991978103766E-6	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999946809471253	WITHOUT_CLASSIFICATION	5.319052874670961E-6	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9999666392092229	WITHOUT_CLASSIFICATION	3.336079077705997E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999998470546506	WITHOUT_CLASSIFICATION	1.5294534931861189E-7	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999392318346	WITHOUT_CLASSIFICATION	6.076816537369951E-8	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999997012382017	WITHOUT_CLASSIFICATION	2.987617983108577E-7	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.999993599702841	WITHOUT_CLASSIFICATION	6.400297158992113E-6	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999978058233799	WITHOUT_CLASSIFICATION	2.1941766200078677E-6	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9999996419087165	WITHOUT_CLASSIFICATION	3.580912834939165E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999747294820539	WITHOUT_CLASSIFICATION	2.52705179460715E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999747294820539	WITHOUT_CLASSIFICATION	2.52705179460715E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957934714253	WITHOUT_CLASSIFICATION	4.206528574736155E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957934714253	WITHOUT_CLASSIFICATION	4.206528574736155E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999824063987103	WITHOUT_CLASSIFICATION	1.7593601289780796E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999933451834829	WITHOUT_CLASSIFICATION	6.654816517093126E-6	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999998470546506	WITHOUT_CLASSIFICATION	1.5294534931861189E-7	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999975688657	WITHOUT_CLASSIFICATION	2.4311342261433975E-9	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999954791528618	WITHOUT_CLASSIFICATION	4.520847138219069E-6	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999924897010374	WITHOUT_CLASSIFICATION	7.510298962659359E-6	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999469012861117	WITHOUT_CLASSIFICATION	5.3098713888191365E-5	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.999995630948334	WITHOUT_CLASSIFICATION	4.369051665995155E-6	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999994783010729	WITHOUT_CLASSIFICATION	5.216989269843728E-7	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9999857608961497	WITHOUT_CLASSIFICATION	1.4239103850379741E-5	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9996450943757607	WITHOUT_CLASSIFICATION	3.549056242394167E-4	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.999994365652078	WITHOUT_CLASSIFICATION	5.634347921954952E-6	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999999416829869	WITHOUT_CLASSIFICATION	5.831701314550056E-8	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.999995108682769	WITHOUT_CLASSIFICATION	4.891317231042892E-6	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.999995108682769	WITHOUT_CLASSIFICATION	4.891317231042892E-6	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999839956308	WITHOUT_CLASSIFICATION	1.600436911961554E-8	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999987115746647	WITHOUT_CLASSIFICATION	1.2884253353001011E-6	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999970117528798	WITHOUT_CLASSIFICATION	2.988247120259809E-6	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9997181366794752	WITHOUT_CLASSIFICATION	2.8186332052478844E-4	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999932221121	WITHOUT_CLASSIFICATION	6.777887949425607E-9	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999998856046755	WITHOUT_CLASSIFICATION	1.1439532454604296E-7	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999998049855197	WITHOUT_CLASSIFICATION	1.9501448031484762E-7	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988204776269	WITHOUT_CLASSIFICATION	1.1795223731278235E-6	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9999767435761935	WITHOUT_CLASSIFICATION	2.325642380658135E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999993357715318	WITHOUT_CLASSIFICATION	6.642284681850154E-7	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999993357715318	WITHOUT_CLASSIFICATION	6.642284681850154E-7	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9999999365827016	WITHOUT_CLASSIFICATION	6.341729847700138E-8	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999995988536515	WITHOUT_CLASSIFICATION	4.0114634845167466E-7	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999987819055425	WITHOUT_CLASSIFICATION	1.21809445752103E-6	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999980458661253	WITHOUT_CLASSIFICATION	1.9541338746951438E-6	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999796212970639	WITHOUT_CLASSIFICATION	2.0378702936053702E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957934714253	WITHOUT_CLASSIFICATION	4.206528574736155E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999824063987103	WITHOUT_CLASSIFICATION	1.7593601289780796E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999926575676701	WITHOUT_CLASSIFICATION	7.342432329929909E-6	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999998470546506	WITHOUT_CLASSIFICATION	1.5294534931861189E-7	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999998470546506	WITHOUT_CLASSIFICATION	1.5294534931861189E-7	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999996621963782	WITHOUT_CLASSIFICATION	3.3780362178959924E-6	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999996621963782	WITHOUT_CLASSIFICATION	3.3780362178959924E-6	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999996279456101	WITHOUT_CLASSIFICATION	3.7205438979792895E-7	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999816406434548	WITHOUT_CLASSIFICATION	1.8359356545135408E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999816406434548	WITHOUT_CLASSIFICATION	1.8359356545135408E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999992192335652	WITHOUT_CLASSIFICATION	7.807664349380292E-7	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999990613092531	WITHOUT_CLASSIFICATION	9.386907469200979E-7	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999996544463017	WITHOUT_CLASSIFICATION	3.455536983357211E-7	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999981766828776	WITHOUT_CLASSIFICATION	1.8233171223443505E-6	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999422598804631	WITHOUT_CLASSIFICATION	5.7740119536913624E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999873202837447	WITHOUT_CLASSIFICATION	1.2679716255333117E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999873202837447	WITHOUT_CLASSIFICATION	1.2679716255333117E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999907180693242	WITHOUT_CLASSIFICATION	9.28193067581188E-6	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999643514161584	WITHOUT_CLASSIFICATION	3.5648583841619454E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999994299173217	WITHOUT_CLASSIFICATION	5.700826781905473E-7	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999820737674302	WITHOUT_CLASSIFICATION	1.7926232569721623E-5	DEFECT
char	WITHOUT_CLASSIFICATION	0.999998586478868	WITHOUT_CLASSIFICATION	1.413521132091094E-6	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999975158797376	WITHOUT_CLASSIFICATION	2.4841202624026084E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999954510911898	WITHOUT_CLASSIFICATION	4.5489088101176005E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999851649019499	WITHOUT_CLASSIFICATION	1.4835098049972619E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999851649019499	WITHOUT_CLASSIFICATION	1.4835098049972619E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999605165738973	WITHOUT_CLASSIFICATION	3.948342610270171E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999605165738973	WITHOUT_CLASSIFICATION	3.948342610270171E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.999998265619609	WITHOUT_CLASSIFICATION	1.7343803910032524E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.999998265619609	WITHOUT_CLASSIFICATION	1.7343803910032524E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999974705365	WITHOUT_CLASSIFICATION	2.5294635074207675E-8	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999974705365	WITHOUT_CLASSIFICATION	2.5294635074207675E-8	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999873202837447	WITHOUT_CLASSIFICATION	1.2679716255333117E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999954510911898	WITHOUT_CLASSIFICATION	4.5489088101176005E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999851649019499	WITHOUT_CLASSIFICATION	1.4835098049972619E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999851649019499	WITHOUT_CLASSIFICATION	1.4835098049972619E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999605165738973	WITHOUT_CLASSIFICATION	3.948342610270171E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.999998265619609	WITHOUT_CLASSIFICATION	1.7343803910032524E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.999998265619609	WITHOUT_CLASSIFICATION	1.7343803910032524E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999974705365	WITHOUT_CLASSIFICATION	2.5294635074207675E-8	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999951812832835	WITHOUT_CLASSIFICATION	4.818716716547845E-6	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999990574557616	WITHOUT_CLASSIFICATION	9.425442384588987E-7	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.999992959882402	WITHOUT_CLASSIFICATION	7.0401175980791716E-6	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999947234791918	WITHOUT_CLASSIFICATION	5.276520808145903E-6	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999999068624187	WITHOUT_CLASSIFICATION	9.313758123968899E-8	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999867117346073	WITHOUT_CLASSIFICATION	1.3288265392599775E-5	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999973239312571	WITHOUT_CLASSIFICATION	2.6760687428943394E-5	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9879894299629388	WITHOUT_CLASSIFICATION	0.012010570037061238	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.99984870711407	WITHOUT_CLASSIFICATION	1.5129288592987742E-4	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999160329814	WITHOUT_CLASSIFICATION	8.396701855188728E-8	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999893126497179	WITHOUT_CLASSIFICATION	1.0687350282230177E-5	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999996785072272	WITHOUT_CLASSIFICATION	3.214927728740325E-7	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999831032961938	WITHOUT_CLASSIFICATION	1.6896703806239656E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999867117346073	WITHOUT_CLASSIFICATION	1.3288265392599775E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999867117346073	WITHOUT_CLASSIFICATION	1.3288265392599775E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999867117346073	WITHOUT_CLASSIFICATION	1.3288265392599775E-5	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999824134142618	WITHOUT_CLASSIFICATION	1.7586585738236953E-5	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999997527896478	WITHOUT_CLASSIFICATION	2.4721035220488515E-7	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999997527896478	WITHOUT_CLASSIFICATION	2.4721035220488515E-7	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999654779991025	WITHOUT_CLASSIFICATION	3.452200089737011E-5	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999949124857735	WITHOUT_CLASSIFICATION	5.0875142263951965E-6	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999710004214721	WITHOUT_CLASSIFICATION	2.8999578527889506E-5	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999903358468999	WITHOUT_CLASSIFICATION	9.664153100114849E-6	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999903358468999	WITHOUT_CLASSIFICATION	9.664153100114849E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999982202369326	WITHOUT_CLASSIFICATION	1.7797630674426286E-6	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999751696942099	WITHOUT_CLASSIFICATION	2.4830305790110448E-5	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999751696942099	WITHOUT_CLASSIFICATION	2.4830305790110448E-5	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999922169158701	WITHOUT_CLASSIFICATION	7.78308412987929E-6	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999104033248	WITHOUT_CLASSIFICATION	8.959667527539802E-8	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999976649422488	WITHOUT_CLASSIFICATION	2.33505775116515E-6	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999268895128401	WITHOUT_CLASSIFICATION	7.311048715984302E-5	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9999862507907799	WITHOUT_CLASSIFICATION	1.3749209220207889E-5	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.9999832979706682	WITHOUT_CLASSIFICATION	1.6702029331813078E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999946262721076	WITHOUT_CLASSIFICATION	5.3737278924772665E-6	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999098018012582	WITHOUT_CLASSIFICATION	9.019819874187873E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9930765352586495	WITHOUT_CLASSIFICATION	0.0069234647413505225	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9999554795280194	WITHOUT_CLASSIFICATION	4.4520471980641094E-5	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999969506603703	WITHOUT_CLASSIFICATION	3.049339629818357E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999052430146821	WITHOUT_CLASSIFICATION	9.475698531791637E-5	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998714168937	WITHOUT_CLASSIFICATION	1.2858310626391984E-7	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999998892927587	WITHOUT_CLASSIFICATION	1.1070724120569658E-7	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999991031800389	WITHOUT_CLASSIFICATION	8.968199610512289E-7	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999052430146821	WITHOUT_CLASSIFICATION	9.475698531791637E-5	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999990038097681	WITHOUT_CLASSIFICATION	9.961902318057074E-7	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999975868539903	WITHOUT_CLASSIFICATION	2.413146009788441E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999982009493719	WITHOUT_CLASSIFICATION	1.7990506280413224E-6	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999688798820214	WITHOUT_CLASSIFICATION	3.112011797861978E-5	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999986057746073	WITHOUT_CLASSIFICATION	1.3942253927082285E-6	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999950870289248	WITHOUT_CLASSIFICATION	4.912971075087651E-6	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999984266831179	WITHOUT_CLASSIFICATION	1.573316882199989E-6	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999933963373644	WITHOUT_CLASSIFICATION	6.603662635589038E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999995546619214	WITHOUT_CLASSIFICATION	4.453380785823172E-7	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999985605723452	WITHOUT_CLASSIFICATION	1.439427654738273E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999986164405563	WITHOUT_CLASSIFICATION	1.3835594436571238E-6	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999995451469424	WITHOUT_CLASSIFICATION	4.548530576508982E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999813837527428	WITHOUT_CLASSIFICATION	1.8616247257128403E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999946262721076	WITHOUT_CLASSIFICATION	5.3737278924772665E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999995546619214	WITHOUT_CLASSIFICATION	4.453380785823172E-7	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999986164405563	WITHOUT_CLASSIFICATION	1.3835594436571238E-6	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999813837527428	WITHOUT_CLASSIFICATION	1.8616247257128403E-5	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999982492805903	WITHOUT_CLASSIFICATION	1.7507194096329837E-6	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9999810304363803	WITHOUT_CLASSIFICATION	1.896956361967753E-5	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999993587186434	WITHOUT_CLASSIFICATION	6.412813565242098E-7	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.999994483971682	WITHOUT_CLASSIFICATION	5.5160283180146255E-6	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999967876815294	WITHOUT_CLASSIFICATION	3.2123184706207964E-6	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9999902907202732	WITHOUT_CLASSIFICATION	9.709279726812902E-6	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9999959803574712	WITHOUT_CLASSIFICATION	4.0196425287534965E-6	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999994756110308	WITHOUT_CLASSIFICATION	5.243889692086586E-7	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999990963703366	WITHOUT_CLASSIFICATION	9.036296634004737E-7	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999968743439	WITHOUT_CLASSIFICATION	3.12565610404377E-9	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999387077315	WITHOUT_CLASSIFICATION	6.129226845726249E-8	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999937758692816	WITHOUT_CLASSIFICATION	6.224130718356796E-6	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999992218055	WITHOUT_CLASSIFICATION	7.781944681704074E-10	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998448592439	WITHOUT_CLASSIFICATION	1.5514075603754554E-7	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.999983531786818	WITHOUT_CLASSIFICATION	1.6468213182044865E-5	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999985155424438	WITHOUT_CLASSIFICATION	1.4844575562134927E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.999979863309995	WITHOUT_CLASSIFICATION	2.0136690005068366E-5	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999985826008452	WITHOUT_CLASSIFICATION	1.4173991548454821E-6	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.9999863642181844	WITHOUT_CLASSIFICATION	1.3635781815690426E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999995546619214	WITHOUT_CLASSIFICATION	4.453380785823172E-7	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999997700427325	WITHOUT_CLASSIFICATION	2.2995726744192222E-7	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999949118017	WITHOUT_CLASSIFICATION	5.088198266836261E-9	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.999999759055751	WITHOUT_CLASSIFICATION	2.409442490105808E-7	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999997909423305	WITHOUT_CLASSIFICATION	2.0905766959245278E-7	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9999996153997112	WITHOUT_CLASSIFICATION	3.8460028881964665E-7	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999918824559975	WITHOUT_CLASSIFICATION	8.11754400255501E-6	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999987154216	WITHOUT_CLASSIFICATION	1.2845784530902928E-9	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999870837346	WITHOUT_CLASSIFICATION	1.2916265346495574E-8	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999690199168925	WITHOUT_CLASSIFICATION	3.098008310751731E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9999841409336022	WITHOUT_CLASSIFICATION	1.5859066397782345E-5	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999965455432842	WITHOUT_CLASSIFICATION	3.454456715773412E-6	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999967606568434	WITHOUT_CLASSIFICATION	3.239343156657448E-6	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9998968921695449	WITHOUT_CLASSIFICATION	1.0310783045497638E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997344565072	WITHOUT_CLASSIFICATION	2.6554349271730445E-7	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999999162229384	WITHOUT_CLASSIFICATION	8.377706158333401E-8	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999973956054806	WITHOUT_CLASSIFICATION	2.604394519371056E-6	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999967988579647	WITHOUT_CLASSIFICATION	3.201142035379483E-6	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999993955955719	WITHOUT_CLASSIFICATION	6.044044280491442E-7	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999995466475284	WITHOUT_CLASSIFICATION	4.5335247149602793E-7	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999471871604437	WITHOUT_CLASSIFICATION	5.281283955628507E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999994086	WITHOUT_CLASSIFICATION	5.913836606747391E-13	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999997429592517	WITHOUT_CLASSIFICATION	2.5704074829697534E-6	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999629690514	WITHOUT_CLASSIFICATION	3.7030948589897626E-8	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999984515060113	WITHOUT_CLASSIFICATION	1.548493988725356E-6	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999749767176469	WITHOUT_CLASSIFICATION	2.5023282353095464E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999749767176469	WITHOUT_CLASSIFICATION	2.5023282353095464E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999858151024776	WITHOUT_CLASSIFICATION	1.4184897522243799E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999956178367886	WITHOUT_CLASSIFICATION	4.38216321138934E-6	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999998087127587	WITHOUT_CLASSIFICATION	1.9128724127059546E-7	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999967835056007	WITHOUT_CLASSIFICATION	3.2164943991917083E-6	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999996278744934	WITHOUT_CLASSIFICATION	3.7212550654311333E-7	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9980732916199693	WITHOUT_CLASSIFICATION	0.0019267083800306787	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999877809827982	WITHOUT_CLASSIFICATION	1.2219017201843238E-5	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999999366834296	WITHOUT_CLASSIFICATION	6.331657046161607E-8	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999905263303882	WITHOUT_CLASSIFICATION	9.473669611734195E-6	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999987429904266	WITHOUT_CLASSIFICATION	1.2570095733844086E-6	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999985372372392	WITHOUT_CLASSIFICATION	1.4627627607407437E-6	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999995641349543	WITHOUT_CLASSIFICATION	4.358650457371288E-7	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999970523336609	WITHOUT_CLASSIFICATION	2.947666339049206E-6	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999732432692775	WITHOUT_CLASSIFICATION	2.675673072250289E-5	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999980149239373	WITHOUT_CLASSIFICATION	1.9850760626309104E-6	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9983087262331252	WITHOUT_CLASSIFICATION	0.001691273766874896	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999833825541538	WITHOUT_CLASSIFICATION	1.661744584631889E-5	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9998659324224553	WITHOUT_CLASSIFICATION	1.3406757754470214E-4	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924828919519	WITHOUT_CLASSIFICATION	7.5171080480859315E-6	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99999975142653	WITHOUT_CLASSIFICATION	2.4857347001911197E-7	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860893680954	WITHOUT_CLASSIFICATION	1.3910631904519327E-5	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999890671184	WITHOUT_CLASSIFICATION	1.093288149754688E-8	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999963162765535	WITHOUT_CLASSIFICATION	3.6837234464822537E-6	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999396320860945	WITHOUT_CLASSIFICATION	6.036791390549413E-5	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999723477538193	WITHOUT_CLASSIFICATION	2.765224618071663E-5	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999997039068567	WITHOUT_CLASSIFICATION	2.9609314329631216E-7	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999989968525728	WITHOUT_CLASSIFICATION	1.0031474272520405E-6	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999999447893544	WITHOUT_CLASSIFICATION	5.521064568753117E-8	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999992067143353	WITHOUT_CLASSIFICATION	7.932856647858008E-7	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999957773598489	WITHOUT_CLASSIFICATION	4.222640151092029E-6	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99999975142653	WITHOUT_CLASSIFICATION	2.4857347001911197E-7	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999428971660234	WITHOUT_CLASSIFICATION	5.7102833976527536E-5	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999999335196401	WITHOUT_CLASSIFICATION	6.64803598908626E-8	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999999366135739	WITHOUT_CLASSIFICATION	6.338642610893825E-8	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999791924924692	WITHOUT_CLASSIFICATION	2.0807507530816706E-5	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999791924924692	WITHOUT_CLASSIFICATION	2.0807507530816706E-5	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999886789562	WITHOUT_CLASSIFICATION	1.1321043700431993E-8	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999994790511113	WITHOUT_CLASSIFICATION	5.209488887075531E-7	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999995571462757	WITHOUT_CLASSIFICATION	4.428537243122339E-6	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999995571462757	WITHOUT_CLASSIFICATION	4.428537243122339E-6	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999629690514	WITHOUT_CLASSIFICATION	3.7030948589897626E-8	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.99999741596888	WITHOUT_CLASSIFICATION	2.5840311198418996E-6	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999979203794069	WITHOUT_CLASSIFICATION	2.0796205929825893E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998978694833	WITHOUT_CLASSIFICATION	1.0213051668474801E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999972366487025	WITHOUT_CLASSIFICATION	2.763351297459522E-6	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999979203794069	WITHOUT_CLASSIFICATION	2.0796205929825893E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998978694833	WITHOUT_CLASSIFICATION	1.0213051668474801E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999997700993108	WITHOUT_CLASSIFICATION	2.2990068927520204E-7	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999994514262419	WITHOUT_CLASSIFICATION	5.485737580457493E-7	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999903543001003	WITHOUT_CLASSIFICATION	9.645699899776595E-6	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999994233905223	WITHOUT_CLASSIFICATION	5.76609477718542E-7	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9989250477390687	WITHOUT_CLASSIFICATION	0.001074952260931406	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999978286455611	WITHOUT_CLASSIFICATION	2.1713544389607532E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999980227358536	WITHOUT_CLASSIFICATION	1.977264146421712E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999980227358536	WITHOUT_CLASSIFICATION	1.977264146421712E-6	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9997091669846223	WITHOUT_CLASSIFICATION	2.908330153777856E-4	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999998701702	WITHOUT_CLASSIFICATION	1.2982980723118327E-9	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999980879101025	WITHOUT_CLASSIFICATION	1.912089897628536E-6	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999851831759	WITHOUT_CLASSIFICATION	1.4816824100226298E-8	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999999863755649	WITHOUT_CLASSIFICATION	1.3624435180093918E-8	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999988551386048	WITHOUT_CLASSIFICATION	1.1448613952436243E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999972366487025	WITHOUT_CLASSIFICATION	2.763351297459522E-6	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999969422813264	WITHOUT_CLASSIFICATION	3.0577186737252837E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999973561129699	WITHOUT_CLASSIFICATION	2.6438870300296724E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999973561129699	WITHOUT_CLASSIFICATION	2.6438870300296724E-6	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999962605162097	WITHOUT_CLASSIFICATION	3.7394837901857435E-6	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999997700993108	WITHOUT_CLASSIFICATION	2.2990068927520204E-7	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999467169860898	WITHOUT_CLASSIFICATION	5.328301391025045E-5	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9932442527224363	WITHOUT_CLASSIFICATION	0.006755747277563561	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9998881432552604	WITHOUT_CLASSIFICATION	1.1185674473965114E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999964017505598	WITHOUT_CLASSIFICATION	3.5982494401390632E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9976924646547466	WITHOUT_CLASSIFICATION	0.0023075353452533492	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999997700993108	WITHOUT_CLASSIFICATION	2.2990068927520204E-7	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999964017505598	WITHOUT_CLASSIFICATION	3.5982494401390632E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9976924646547466	WITHOUT_CLASSIFICATION	0.0023075353452533492	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999984762217	WITHOUT_CLASSIFICATION	1.5237783740028122E-9	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999993286963679	WITHOUT_CLASSIFICATION	6.713036319957326E-7	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999844565342815	WITHOUT_CLASSIFICATION	1.554346571858703E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999997700993108	WITHOUT_CLASSIFICATION	2.2990068927520204E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999997700993108	WITHOUT_CLASSIFICATION	2.2990068927520204E-7	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999997294618287	WITHOUT_CLASSIFICATION	2.705381713167623E-7	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9999993810809743	WITHOUT_CLASSIFICATION	6.189190256921881E-7	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999982410712417	WITHOUT_CLASSIFICATION	1.7589287583862366E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999992397423567	WITHOUT_CLASSIFICATION	7.602576433775076E-7	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999983641997282	WITHOUT_CLASSIFICATION	1.6358002716964727E-6	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999724926073	WITHOUT_CLASSIFICATION	2.7507392659315248E-8	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999106629712	WITHOUT_CLASSIFICATION	8.933702883555668E-8	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999271761543	WITHOUT_CLASSIFICATION	7.28238457291134E-8	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999974845953612	WITHOUT_CLASSIFICATION	2.5154046388510853E-6	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9999960358120862	WITHOUT_CLASSIFICATION	3.9641879137928395E-6	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999749221266022	WITHOUT_CLASSIFICATION	2.5077873397789314E-5	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999986957080185	WITHOUT_CLASSIFICATION	1.3042919815886936E-6	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999994495322728	WITHOUT_CLASSIFICATION	5.504677272211172E-7	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999977423999902	WITHOUT_CLASSIFICATION	2.257600009956164E-6	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401968256766	WITHOUT_CLASSIFICATION	5.980317432335438E-5	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999994844179525	WITHOUT_CLASSIFICATION	5.1558204750093535E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999992397423567	WITHOUT_CLASSIFICATION	7.602576433775076E-7	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999764216022096	WITHOUT_CLASSIFICATION	2.357839779040599E-5	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999995666920458	WITHOUT_CLASSIFICATION	4.333079541590361E-7	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999951655317	WITHOUT_CLASSIFICATION	4.834468270407258E-9	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999986290527301	WITHOUT_CLASSIFICATION	1.370947269911418E-6	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999668999474132	WITHOUT_CLASSIFICATION	3.3100052586818036E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999668999474132	WITHOUT_CLASSIFICATION	3.3100052586818036E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999992397423567	WITHOUT_CLASSIFICATION	7.602576433775076E-7	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999279373961998	WITHOUT_CLASSIFICATION	7.206260380023269E-5	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999998122008091	WITHOUT_CLASSIFICATION	1.8779919087816416E-7	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999722721749832	WITHOUT_CLASSIFICATION	2.7727825016794387E-5	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999992576537705	WITHOUT_CLASSIFICATION	7.423462294645843E-7	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99999874876894	WITHOUT_CLASSIFICATION	1.2512310599797974E-6	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999993875040734	WITHOUT_CLASSIFICATION	6.124959267219842E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9998900597592988	WITHOUT_CLASSIFICATION	1.0994024070122659E-4	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999996765215614	WITHOUT_CLASSIFICATION	3.2347843854840744E-7	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999999941761	WITHOUT_CLASSIFICATION	5.823894106061512E-11	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998037411097	WITHOUT_CLASSIFICATION	1.9625889021866434E-7	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999781921441916	WITHOUT_CLASSIFICATION	2.1807855808485744E-5	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9998409965214374	WITHOUT_CLASSIFICATION	1.5900347856256648E-4	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999696390371756	WITHOUT_CLASSIFICATION	3.0360962824279822E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999999623568	WITHOUT_CLASSIFICATION	3.764319979015937E-10	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994718164509	WITHOUT_CLASSIFICATION	5.281835490845633E-7	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999672682378397	WITHOUT_CLASSIFICATION	3.273176216025744E-5	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999981343953028	WITHOUT_CLASSIFICATION	1.8656046971904672E-6	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.99999206793421	WITHOUT_CLASSIFICATION	7.932065789978964E-6	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985936382391	WITHOUT_CLASSIFICATION	1.4063617609781812E-6	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999947199060107	WITHOUT_CLASSIFICATION	5.2800939892550126E-6	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999996215903362	WITHOUT_CLASSIFICATION	3.7840966378446766E-7	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999401244515	WITHOUT_CLASSIFICATION	5.987554849504113E-8	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999771523287405	WITHOUT_CLASSIFICATION	2.2847671259441088E-5	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984134623563	WITHOUT_CLASSIFICATION	1.5865376436949262E-6	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917473251444	WITHOUT_CLASSIFICATION	8.2526748556742E-6	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895305959534	WITHOUT_CLASSIFICATION	1.0469404046547867E-5	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962665051503	WITHOUT_CLASSIFICATION	3.733494849741084E-6	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953503183189	WITHOUT_CLASSIFICATION	4.649681681178612E-6	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999882782122396	WITHOUT_CLASSIFICATION	1.17217877605454E-5	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986189409418	WITHOUT_CLASSIFICATION	1.3810590583124522E-6	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999995559251125	WITHOUT_CLASSIFICATION	4.440748875440455E-7	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999997063860971	WITHOUT_CLASSIFICATION	2.936139028341672E-7	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999850951244	WITHOUT_CLASSIFICATION	1.49048755999915E-6	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997372992225	WITHOUT_CLASSIFICATION	2.627007774241399E-7	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996998469655	WITHOUT_CLASSIFICATION	3.0015303446668836E-7	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989982584732	WITHOUT_CLASSIFICATION	1.001741526869485E-6	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931118468071	WITHOUT_CLASSIFICATION	6.888153192841897E-6	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994950982649	WITHOUT_CLASSIFICATION	5.049017350681006E-7	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997323284263	WITHOUT_CLASSIFICATION	2.676715736741607E-7	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844984179993	WITHOUT_CLASSIFICATION	1.550158200076221E-5	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999262059461943	WITHOUT_CLASSIFICATION	7.379405380565289E-5	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920628455355	WITHOUT_CLASSIFICATION	7.937154464405177E-6	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8044020656774203	WITHOUT_CLASSIFICATION	0.19559793432257977	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999956669793972	WITHOUT_CLASSIFICATION	4.33302060275725E-6	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999999996851	WITHOUT_CLASSIFICATION	3.147536676145291E-13	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999987671011081	WITHOUT_CLASSIFICATION	1.2328988919141931E-6	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9999986609143773	WITHOUT_CLASSIFICATION	1.3390856227519558E-6	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999994615677928	WITHOUT_CLASSIFICATION	5.384322071949186E-7	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.999999982385198	WITHOUT_CLASSIFICATION	1.7614801945886723E-8	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999990789481464	WITHOUT_CLASSIFICATION	9.210518535022569E-7	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999903396613321	WITHOUT_CLASSIFICATION	9.660338667919298E-6	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999954001820461	WITHOUT_CLASSIFICATION	4.599817953908754E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999949327250297	WITHOUT_CLASSIFICATION	5.067274970341804E-6	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999991860195044	WITHOUT_CLASSIFICATION	8.139804956095403E-7	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.999999941727349	WITHOUT_CLASSIFICATION	5.827265107183622E-8	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.999997675632375	WITHOUT_CLASSIFICATION	2.3243676250645095E-6	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999673908699288	WITHOUT_CLASSIFICATION	3.2609130071291403E-5	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9999683983289824	WITHOUT_CLASSIFICATION	3.1601671017495486E-5	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998245749228357	WITHOUT_CLASSIFICATION	1.754250771643317E-4	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993947329499	WITHOUT_CLASSIFICATION	6.052670501092429E-6	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999820220538395	WITHOUT_CLASSIFICATION	1.79779461605955E-5	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987992764005	WITHOUT_CLASSIFICATION	1.200723599546818E-6	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896020082408	WITHOUT_CLASSIFICATION	1.0397991759244626E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9999121860270717	WITHOUT_CLASSIFICATION	8.781397292838926E-5	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999996072461566	WITHOUT_CLASSIFICATION	3.927538435607408E-7	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999986253440939	WITHOUT_CLASSIFICATION	1.3746559061691435E-6	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999680163496594	WITHOUT_CLASSIFICATION	3.198365034069107E-5	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998216247211	WITHOUT_CLASSIFICATION	1.783752788633136E-7	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999998389682018	WITHOUT_CLASSIFICATION	1.610317981933354E-6	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999930501434574	WITHOUT_CLASSIFICATION	6.949856542636462E-6	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999873954912154	WITHOUT_CLASSIFICATION	1.2604508784631764E-5	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999986284239	WITHOUT_CLASSIFICATION	1.3715761652863467E-9	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999622286067142	WITHOUT_CLASSIFICATION	3.777139328574747E-5	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999983286583135	WITHOUT_CLASSIFICATION	1.6713416864186852E-6	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999982843303091	WITHOUT_CLASSIFICATION	1.7156696908036336E-6	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999129318701657	WITHOUT_CLASSIFICATION	8.706812983419804E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999987671011081	WITHOUT_CLASSIFICATION	1.2328988919141931E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999212958825571	WITHOUT_CLASSIFICATION	7.87041174429722E-5	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999628301159	WITHOUT_CLASSIFICATION	3.716988411612301E-8	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999996505825036	WITHOUT_CLASSIFICATION	3.4941749640153436E-7	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999991953379646	WITHOUT_CLASSIFICATION	8.046620353999023E-6	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999848903571361	WITHOUT_CLASSIFICATION	1.5109642863837044E-5	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9999998455494836	WITHOUT_CLASSIFICATION	1.5445051644121901E-7	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9999121860270717	WITHOUT_CLASSIFICATION	8.781397292838926E-5	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998427629431644	WITHOUT_CLASSIFICATION	1.572370568355417E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999994086972435	WITHOUT_CLASSIFICATION	5.913027566530852E-7	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999701258175688	WITHOUT_CLASSIFICATION	2.9874182431232863E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999690342219734	WITHOUT_CLASSIFICATION	3.09657780265745E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999848061087837	WITHOUT_CLASSIFICATION	1.5193891216291961E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999468650509	WITHOUT_CLASSIFICATION	5.313494916030415E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999999195891419	WITHOUT_CLASSIFICATION	8.041085809534633E-7	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999999989426158	WITHOUT_CLASSIFICATION	1.0573841917865068E-8	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999990439551318	WITHOUT_CLASSIFICATION	9.560448681031823E-7	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999884483568696	WITHOUT_CLASSIFICATION	1.1551643130248758E-5	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999906967432	WITHOUT_CLASSIFICATION	9.303256775604093E-9	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999961994467159	WITHOUT_CLASSIFICATION	3.800553284150926E-6	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999920565164	WITHOUT_CLASSIFICATION	7.943483720258334E-9	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9999996345434347	WITHOUT_CLASSIFICATION	3.654565652794265E-7	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999939801491483	WITHOUT_CLASSIFICATION	6.019850851591923E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999991350764834	WITHOUT_CLASSIFICATION	8.649235165586875E-7	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999965364346	WITHOUT_CLASSIFICATION	3.463565402605559E-8	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999039680544	WITHOUT_CLASSIFICATION	9.60319455644364E-8	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999997169478981	WITHOUT_CLASSIFICATION	2.830521019098648E-7	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999964126313738	WITHOUT_CLASSIFICATION	3.5873686260613905E-6	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999932374728662	WITHOUT_CLASSIFICATION	6.7625271337875536E-6	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999979671925151	WITHOUT_CLASSIFICATION	2.0328074848409905E-6	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.999999929822687	WITHOUT_CLASSIFICATION	7.017731300885425E-8	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9092106909109321	WITHOUT_CLASSIFICATION	0.09078930908906789	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.999999502727295	WITHOUT_CLASSIFICATION	4.972727050658595E-7	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999572666496	WITHOUT_CLASSIFICATION	4.2733350396329597E-8	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999981831344333	WITHOUT_CLASSIFICATION	1.816865566744808E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999987671011081	WITHOUT_CLASSIFICATION	1.2328988919141931E-6	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9997705838000374	WITHOUT_CLASSIFICATION	2.294161999626274E-4	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999470833854	WITHOUT_CLASSIFICATION	5.291661467994812E-8	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999021297277937	WITHOUT_CLASSIFICATION	9.787027220630032E-5	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999970311966401	WITHOUT_CLASSIFICATION	2.9688033599812655E-6	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999819081685821	WITHOUT_CLASSIFICATION	1.809183141794139E-5	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999828968793324	WITHOUT_CLASSIFICATION	1.7103120667624207E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999987671011081	WITHOUT_CLASSIFICATION	1.2328988919141931E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999979204824982	WITHOUT_CLASSIFICATION	2.0795175016820437E-6	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999965364346	WITHOUT_CLASSIFICATION	3.463565402605559E-8	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9992052782366825	WITHOUT_CLASSIFICATION	7.947217633175219E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999991350764834	WITHOUT_CLASSIFICATION	8.649235165586875E-7	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999622776077	WITHOUT_CLASSIFICATION	3.772239229834355E-8	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998499336379122	WITHOUT_CLASSIFICATION	1.50066362087773E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998414473245	WITHOUT_CLASSIFICATION	1.5855267556860969E-7	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999701258175688	WITHOUT_CLASSIFICATION	2.9874182431232863E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999690342219734	WITHOUT_CLASSIFICATION	3.09657780265745E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999848061087837	WITHOUT_CLASSIFICATION	1.5193891216291961E-5	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999443567117	WITHOUT_CLASSIFICATION	5.56432881725223E-8	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9999983675049129	WITHOUT_CLASSIFICATION	1.63249508707717E-6	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999999447698044	WITHOUT_CLASSIFICATION	5.5230195735791156E-8	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999991350764834	WITHOUT_CLASSIFICATION	8.649235165586875E-7	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999622776077	WITHOUT_CLASSIFICATION	3.772239229834355E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999987671011081	WITHOUT_CLASSIFICATION	1.2328988919141931E-6	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999468650509	WITHOUT_CLASSIFICATION	5.313494916030415E-8	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999999195891419	WITHOUT_CLASSIFICATION	8.041085809534633E-7	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999999989426158	WITHOUT_CLASSIFICATION	1.0573841917865068E-8	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999945219544	WITHOUT_CLASSIFICATION	5.478045600828545E-8	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954815722674	WITHOUT_CLASSIFICATION	4.518427732648505E-6	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999997801278765	WITHOUT_CLASSIFICATION	2.1987212361165133E-7	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999885355375	WITHOUT_CLASSIFICATION	1.1464462395783926E-8	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999994680913582	WITHOUT_CLASSIFICATION	5.319086417739644E-7	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999966435407037	WITHOUT_CLASSIFICATION	3.3564592963817502E-6	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844984179993	WITHOUT_CLASSIFICATION	1.550158200076221E-5	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999684023319813	WITHOUT_CLASSIFICATION	3.159766801876905E-5	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999997921487351	WITHOUT_CLASSIFICATION	2.0785126485861793E-7	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999995870566728	WITHOUT_CLASSIFICATION	4.1294332719876823E-7	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999363060664	WITHOUT_CLASSIFICATION	6.369393358189232E-8	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999691855006	WITHOUT_CLASSIFICATION	3.081449943672909E-8	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962665051503	WITHOUT_CLASSIFICATION	3.733494849741084E-6	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953503183189	WITHOUT_CLASSIFICATION	4.649681681178612E-6	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997372992225	WITHOUT_CLASSIFICATION	2.627007774241399E-7	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999691855006	WITHOUT_CLASSIFICATION	3.081449943672909E-8	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.99999982289305	WITHOUT_CLASSIFICATION	1.771069499091645E-7	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999979083485921	WITHOUT_CLASSIFICATION	2.091651407889385E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999659893607811	WITHOUT_CLASSIFICATION	3.401063921884846E-5	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999862525651846	WITHOUT_CLASSIFICATION	1.3747434815383125E-5	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999955855065349	WITHOUT_CLASSIFICATION	4.414493465053577E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999945967682596	WITHOUT_CLASSIFICATION	5.403231740375737E-6	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996998469655	WITHOUT_CLASSIFICATION	3.0015303446668836E-7	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994950982649	WITHOUT_CLASSIFICATION	5.049017350681006E-7	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999986284239	WITHOUT_CLASSIFICATION	1.3715761652863467E-9	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999998690826555	WITHOUT_CLASSIFICATION	1.309173444920564E-7	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999993804989744	WITHOUT_CLASSIFICATION	6.195010255746016E-7	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999999846138455	WITHOUT_CLASSIFICATION	1.538615449556252E-7	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999364048182	WITHOUT_CLASSIFICATION	6.359518174670654E-8	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999999416125428	WITHOUT_CLASSIFICATION	5.838745727246381E-8	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999887991896	WITHOUT_CLASSIFICATION	1.120081046711295E-8	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999998658438837	WITHOUT_CLASSIFICATION	1.3415611630385292E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999977665073302	WITHOUT_CLASSIFICATION	2.233492669720311E-6	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999999941761	WITHOUT_CLASSIFICATION	5.823894106061512E-11	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999922329874736	WITHOUT_CLASSIFICATION	7.76701252635289E-6	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999872242209	WITHOUT_CLASSIFICATION	1.2775778999411738E-8	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999939245507978	WITHOUT_CLASSIFICATION	6.0754492022267785E-6	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999959719929008	WITHOUT_CLASSIFICATION	4.02800709919794E-6	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999336644902	WITHOUT_CLASSIFICATION	6.633550968921532E-8	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999989769010044	WITHOUT_CLASSIFICATION	1.0230989955836415E-6	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987118415729	WITHOUT_CLASSIFICATION	1.2881584270836094E-6	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999715568191422	WITHOUT_CLASSIFICATION	2.8443180857778656E-5	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990577521913	WITHOUT_CLASSIFICATION	9.422478087491593E-7	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999965325762635	WITHOUT_CLASSIFICATION	3.4674237364790964E-6	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999691120084269	WITHOUT_CLASSIFICATION	3.0887991573114E-5	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999970706438147	WITHOUT_CLASSIFICATION	2.9293561851661443E-6	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990377757412	WITHOUT_CLASSIFICATION	9.622242589160098E-7	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999943604002669	WITHOUT_CLASSIFICATION	5.639599733018486E-6	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999959758475943	WITHOUT_CLASSIFICATION	4.02415240575373E-6	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999991068032007	WITHOUT_CLASSIFICATION	8.931967991472659E-7	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999998982089934	WITHOUT_CLASSIFICATION	1.017910066134165E-7	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999950750198865	WITHOUT_CLASSIFICATION	4.9249801135867715E-6	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999949474369667	WITHOUT_CLASSIFICATION	5.052563033348145E-6	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998523648929	WITHOUT_CLASSIFICATION	1.4763510705347227E-7	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976669290788	WITHOUT_CLASSIFICATION	2.333070921283622E-6	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999998287242866	WITHOUT_CLASSIFICATION	1.7127571337546294E-7	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999995937295975	WITHOUT_CLASSIFICATION	4.062704025611428E-7	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999899750945813	WITHOUT_CLASSIFICATION	1.0024905418794919E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999951287623714	WITHOUT_CLASSIFICATION	4.871237628686859E-6	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999946261948574	WITHOUT_CLASSIFICATION	5.373805142588811E-6	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999971164177813	WITHOUT_CLASSIFICATION	2.8835822187785862E-6	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999999649613863	WITHOUT_CLASSIFICATION	3.503861369668973E-7	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999933584076316	WITHOUT_CLASSIFICATION	6.641592368473984E-6	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999999954718688	WITHOUT_CLASSIFICATION	4.528131200827463E-8	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999998991244627	WITHOUT_CLASSIFICATION	1.0087553723469827E-7	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998565162623826	WITHOUT_CLASSIFICATION	1.4348373761732713E-4	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999999095119868	WITHOUT_CLASSIFICATION	9.048801321782264E-7	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999989335013	WITHOUT_CLASSIFICATION	1.0664986594087818E-9	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999998638556105	WITHOUT_CLASSIFICATION	1.3614438947914935E-7	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999996104286435	WITHOUT_CLASSIFICATION	3.895713565036029E-7	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999999789193563	WITHOUT_CLASSIFICATION	2.1080643706368502E-8	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999890726132	WITHOUT_CLASSIFICATION	1.0927386683078284E-8	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999992019738732	WITHOUT_CLASSIFICATION	7.980261268495388E-7	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999977905206	WITHOUT_CLASSIFICATION	2.2094793605182065E-9	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999668601645	WITHOUT_CLASSIFICATION	3.313983552612954E-8	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999995045915563	WITHOUT_CLASSIFICATION	4.954084436585047E-7	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9998265448455188	WITHOUT_CLASSIFICATION	1.7345515448111354E-4	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999983985211088	WITHOUT_CLASSIFICATION	1.601478891225307E-6	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999989622914009	WITHOUT_CLASSIFICATION	1.0377085991159696E-5	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999790341993	WITHOUT_CLASSIFICATION	2.0965800665184698E-8	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999999063889202	WITHOUT_CLASSIFICATION	9.361107979803552E-7	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999996211697172	WITHOUT_CLASSIFICATION	3.7883028285034477E-7	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999974376487748	WITHOUT_CLASSIFICATION	2.5623512251658145E-6	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999966218239519	WITHOUT_CLASSIFICATION	3.378176048130087E-6	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999993738958419	WITHOUT_CLASSIFICATION	6.261041580425008E-7	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998430413427	WITHOUT_CLASSIFICATION	1.5695865723730615E-7	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998249513579	WITHOUT_CLASSIFICATION	1.7504864207770923E-7	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999836499212917	WITHOUT_CLASSIFICATION	1.6350078708270727E-5	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999418234164443	WITHOUT_CLASSIFICATION	5.8176583555739884E-5	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.996872064189551	WITHOUT_CLASSIFICATION	0.0031279358104489693	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999934612273935	WITHOUT_CLASSIFICATION	6.538772606421488E-6	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999165854036377	WITHOUT_CLASSIFICATION	8.341459636223654E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999995525403574	WITHOUT_CLASSIFICATION	4.474596425902691E-7	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999440988155	WITHOUT_CLASSIFICATION	5.590118447950872E-8	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999948080890598	WITHOUT_CLASSIFICATION	5.191910940243326E-6	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999985143565995	WITHOUT_CLASSIFICATION	1.485643400565512E-6	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9995951842965592	WITHOUT_CLASSIFICATION	4.0481570344077654E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9996945491361338	WITHOUT_CLASSIFICATION	3.054508638662404E-4	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999998378939094	WITHOUT_CLASSIFICATION	1.6210609060090066E-6	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9527474116650699	WITHOUT_CLASSIFICATION	0.04725258833493018	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999993702379	WITHOUT_CLASSIFICATION	6.297622093216202E-10	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999933831950407	WITHOUT_CLASSIFICATION	6.616804959301177E-5	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999944994696	WITHOUT_CLASSIFICATION	5.5005303650961785E-9	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999974533464	WITHOUT_CLASSIFICATION	2.5466535076492518E-9	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999961394073509	WITHOUT_CLASSIFICATION	3.8605926491111585E-6	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999812027544	WITHOUT_CLASSIFICATION	1.8797245725853973E-8	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999975391474203	WITHOUT_CLASSIFICATION	2.460852579774187E-6	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999661274866588	WITHOUT_CLASSIFICATION	3.387251334117316E-5	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999941901257539	WITHOUT_CLASSIFICATION	5.809874246197443E-6	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999991768953148	WITHOUT_CLASSIFICATION	8.231046852393695E-7	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999990156055302	WITHOUT_CLASSIFICATION	9.843944698446617E-7	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999888079284	WITHOUT_CLASSIFICATION	1.1192071581390603E-8	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999998860268	WITHOUT_CLASSIFICATION	1.1397320918618611E-10	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999995575486138	WITHOUT_CLASSIFICATION	4.424513862141457E-7	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999948550514698	WITHOUT_CLASSIFICATION	5.144948530189763E-6	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999999951604492	WITHOUT_CLASSIFICATION	4.839550814129755E-8	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999998294348361	WITHOUT_CLASSIFICATION	1.705651639564148E-7	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999993401840267	WITHOUT_CLASSIFICATION	6.598159732236626E-7	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999639219395033	WITHOUT_CLASSIFICATION	3.607806049669019E-5	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999998212477067	WITHOUT_CLASSIFICATION	1.787522933934874E-7	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999997410657484	WITHOUT_CLASSIFICATION	2.589342515768302E-7	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9999847609279079	WITHOUT_CLASSIFICATION	1.5239072092062926E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999998470487925	WITHOUT_CLASSIFICATION	1.5295120743950823E-7	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999902379673	WITHOUT_CLASSIFICATION	9.762032811747772E-9	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9992759358844197	WITHOUT_CLASSIFICATION	7.24064115580276E-4	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9999491356999706	WITHOUT_CLASSIFICATION	5.086430002940276E-5	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999999579317682	WITHOUT_CLASSIFICATION	4.2068231792526594E-7	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9992759358844197	WITHOUT_CLASSIFICATION	7.24064115580276E-4	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999752218014	WITHOUT_CLASSIFICATION	2.477819862536876E-8	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999996460955636	WITHOUT_CLASSIFICATION	3.5390443650225264E-7	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999998044156122	WITHOUT_CLASSIFICATION	1.9558438790458893E-7	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999307266255809	WITHOUT_CLASSIFICATION	6.927337441906731E-5	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999995529713338	WITHOUT_CLASSIFICATION	4.4702866616760085E-7	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999918854315	WITHOUT_CLASSIFICATION	8.114568442387577E-9	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999948020406628	WITHOUT_CLASSIFICATION	5.1979593372378E-6	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999662483677	WITHOUT_CLASSIFICATION	3.3751632299695786E-8	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999883286014949	WITHOUT_CLASSIFICATION	1.1671398504998664E-5	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999981820699568	WITHOUT_CLASSIFICATION	1.817930043254613E-6	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999991478038787	WITHOUT_CLASSIFICATION	8.521961213234171E-7	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999973284455118	WITHOUT_CLASSIFICATION	2.6715544882021733E-6	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999906529519	WITHOUT_CLASSIFICATION	9.347048165853519E-9	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999988520718	WITHOUT_CLASSIFICATION	1.147928177279086E-9	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998662083476	WITHOUT_CLASSIFICATION	1.337916524780513E-7	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999981461295663	WITHOUT_CLASSIFICATION	1.853870433733664E-6	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999230827885721	WITHOUT_CLASSIFICATION	7.69172114279178E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999230827885721	WITHOUT_CLASSIFICATION	7.69172114279178E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999994177054479	WITHOUT_CLASSIFICATION	5.822945521525548E-7	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9999039522768105	WITHOUT_CLASSIFICATION	9.604772318945171E-5	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999787143887916	WITHOUT_CLASSIFICATION	2.1285611208389565E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9999979582678443	WITHOUT_CLASSIFICATION	2.0417321556485318E-6	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999986269008198	WITHOUT_CLASSIFICATION	1.3730991802874659E-6	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8267938191205941	WITHOUT_CLASSIFICATION	0.17320618087940587	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9999710347825589	WITHOUT_CLASSIFICATION	2.8965217441220738E-5	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999997735035461	WITHOUT_CLASSIFICATION	2.2649645380685838E-7	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999989218119308	WITHOUT_CLASSIFICATION	1.078188069149706E-6	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9997971609558325	WITHOUT_CLASSIFICATION	2.028390441674596E-4	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999965290472372	WITHOUT_CLASSIFICATION	3.4709527627608806E-6	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999998207326	WITHOUT_CLASSIFICATION	1.7926743833029513E-10	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999998646551576	WITHOUT_CLASSIFICATION	1.3534484237423857E-7	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999994889914816	WITHOUT_CLASSIFICATION	5.110085184370862E-7	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999796430638	WITHOUT_CLASSIFICATION	2.0356936320777304E-8	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999989769010044	WITHOUT_CLASSIFICATION	1.0230989955836415E-6	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999995639087754	WITHOUT_CLASSIFICATION	4.36091224574037E-7	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999463775232	WITHOUT_CLASSIFICATION	5.3622476742006025E-8	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999979183529263	WITHOUT_CLASSIFICATION	2.0816470737786656E-6	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999984332174586	WITHOUT_CLASSIFICATION	1.5667825413375753E-6	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999995365925712	WITHOUT_CLASSIFICATION	4.634074288657148E-7	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999995995166298	WITHOUT_CLASSIFICATION	4.00483370251327E-7	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999062196925	WITHOUT_CLASSIFICATION	9.378030757360178E-8	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999997707500585	WITHOUT_CLASSIFICATION	2.2924994152603916E-7	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999754012153	WITHOUT_CLASSIFICATION	2.4598784655563943E-8	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999414623488	WITHOUT_CLASSIFICATION	5.8537651205314264E-8	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999964917335	WITHOUT_CLASSIFICATION	3.508266408908989E-9	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999931288495315	WITHOUT_CLASSIFICATION	6.8711504685380386E-6	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999996153019254	WITHOUT_CLASSIFICATION	3.846980745526323E-7	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.999989977453683	WITHOUT_CLASSIFICATION	1.002254631705778E-5	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999982418872613	WITHOUT_CLASSIFICATION	1.7581127387490702E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.99999979871578	WITHOUT_CLASSIFICATION	2.012842198765173E-7	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9999841551897871	WITHOUT_CLASSIFICATION	1.584481021289927E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999999646856417	WITHOUT_CLASSIFICATION	3.5314358308740514E-7	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999980980431904	WITHOUT_CLASSIFICATION	1.9019568096042541E-6	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999999098638137	WITHOUT_CLASSIFICATION	9.013618630761644E-7	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999981009926482	WITHOUT_CLASSIFICATION	1.8990073517641032E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999908839435864	WITHOUT_CLASSIFICATION	9.116056413726518E-6	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999128124977	WITHOUT_CLASSIFICATION	8.718750231589786E-8	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998446195187364	WITHOUT_CLASSIFICATION	1.55380481263684E-4	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9999984278218492	WITHOUT_CLASSIFICATION	1.5721781507872262E-6	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999999100809592	WITHOUT_CLASSIFICATION	8.991904077226851E-8	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9923273321228719	WITHOUT_CLASSIFICATION	0.007672667877128049	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999994854865147	WITHOUT_CLASSIFICATION	5.145134852202817E-7	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999896191087249	WITHOUT_CLASSIFICATION	1.0380891275132423E-5	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999995195879364	WITHOUT_CLASSIFICATION	4.804120636120518E-7	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999650721730604	WITHOUT_CLASSIFICATION	3.492782693969174E-5	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999774955822153	WITHOUT_CLASSIFICATION	2.250441778479834E-5	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765705639649	WITHOUT_CLASSIFICATION	2.342943603504709E-5	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999500999905248	WITHOUT_CLASSIFICATION	4.990000947518177E-5	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999981168317518	WITHOUT_CLASSIFICATION	1.8831682482172284E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999977665073302	WITHOUT_CLASSIFICATION	2.233492669720311E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999977665073302	WITHOUT_CLASSIFICATION	2.233492669720311E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999987053776423	WITHOUT_CLASSIFICATION	1.2946223576570525E-6	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999995715041609	WITHOUT_CLASSIFICATION	4.2849583908836226E-7	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9992680459275214	WITHOUT_CLASSIFICATION	7.319540724786328E-4	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996887425994252	WITHOUT_CLASSIFICATION	3.112574005748527E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9992680459275214	WITHOUT_CLASSIFICATION	7.319540724786328E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999977546291838	WITHOUT_CLASSIFICATION	2.245370816114137E-6	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999985146474382	WITHOUT_CLASSIFICATION	1.4853525618705677E-6	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9999985216214059	WITHOUT_CLASSIFICATION	1.4783785940748953E-6	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992769622374	WITHOUT_CLASSIFICATION	7.230377626735455E-7	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999981957117549	WITHOUT_CLASSIFICATION	1.804288245077929E-6	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999987953204116	WITHOUT_CLASSIFICATION	1.2046795884349168E-6	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999999921738153	WITHOUT_CLASSIFICATION	7.82618470443211E-8	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9999678459648201	WITHOUT_CLASSIFICATION	3.215403517986037E-5	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999868849037	WITHOUT_CLASSIFICATION	1.3115096237060601E-8	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999991682405702	WITHOUT_CLASSIFICATION	8.317594296355711E-7	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999992363570148	WITHOUT_CLASSIFICATION	7.636429852629896E-7	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999995996050799	WITHOUT_CLASSIFICATION	4.003949200440628E-7	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999983500698371	WITHOUT_CLASSIFICATION	1.649930162966093E-6	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9992972991204023	WITHOUT_CLASSIFICATION	7.027008795976692E-4	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999993697685	WITHOUT_CLASSIFICATION	6.302315961765617E-10	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999993469732781	WITHOUT_CLASSIFICATION	6.530267220187886E-7	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999989459930467	WITHOUT_CLASSIFICATION	1.0540069531917773E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999989459930467	WITHOUT_CLASSIFICATION	1.0540069531917773E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999966370081323	WITHOUT_CLASSIFICATION	3.3629918677084584E-6	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999995796008334	WITHOUT_CLASSIFICATION	4.203991665558059E-7	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999991005189646	WITHOUT_CLASSIFICATION	8.994810353895229E-7	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999997915184501	WITHOUT_CLASSIFICATION	2.0848154986225845E-7	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999417112447	WITHOUT_CLASSIFICATION	5.828875525396097E-8	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999975871682173	WITHOUT_CLASSIFICATION	2.4128317825887043E-6	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999658011592464	WITHOUT_CLASSIFICATION	3.419884075366622E-5	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999996218632149	WITHOUT_CLASSIFICATION	3.781367851297013E-7	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999998143761337	WITHOUT_CLASSIFICATION	1.8562386635642195E-7	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999959749155777	WITHOUT_CLASSIFICATION	4.0250844223238065E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999992637189407	WITHOUT_CLASSIFICATION	7.362810593487243E-7	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999986752486	WITHOUT_CLASSIFICATION	1.3247513820788864E-9	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999611533601	WITHOUT_CLASSIFICATION	3.8846639991443824E-8	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999910398845984	WITHOUT_CLASSIFICATION	8.960115401709968E-6	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999997682681698	WITHOUT_CLASSIFICATION	2.317318301989497E-7	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999997874525557	WITHOUT_CLASSIFICATION	2.1254744432520422E-7	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999995958041503	WITHOUT_CLASSIFICATION	4.041958497265395E-7	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999997337313333	WITHOUT_CLASSIFICATION	2.6626866662821347E-7	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999991243593576	WITHOUT_CLASSIFICATION	8.75640642515484E-7	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999877496148	WITHOUT_CLASSIFICATION	1.2250385125213533E-8	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999868951114572	WITHOUT_CLASSIFICATION	1.3104888542838377E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999756113002	WITHOUT_CLASSIFICATION	2.438869976162499E-8	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999998771284175	WITHOUT_CLASSIFICATION	1.228715824171705E-7	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999955600466	WITHOUT_CLASSIFICATION	4.439953459856639E-9	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999989543439147	WITHOUT_CLASSIFICATION	1.045656085318596E-6	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999968315074882	WITHOUT_CLASSIFICATION	3.168492511881347E-6	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999994065099811	WITHOUT_CLASSIFICATION	5.934900189744188E-7	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999576265527974	WITHOUT_CLASSIFICATION	4.2373447202538946E-5	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999969131395336	WITHOUT_CLASSIFICATION	3.0868604663816116E-6	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999965468902209	WITHOUT_CLASSIFICATION	3.453109779088041E-5	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999995435174018	WITHOUT_CLASSIFICATION	4.564825982729582E-7	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999998402342017	WITHOUT_CLASSIFICATION	1.5976579828716718E-7	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999710981988325	WITHOUT_CLASSIFICATION	2.8901801167548966E-5	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999996028126135	WITHOUT_CLASSIFICATION	3.9718738657102887E-7	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999948345392116	WITHOUT_CLASSIFICATION	5.1654607884381375E-6	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999844158042	WITHOUT_CLASSIFICATION	1.558419578218336E-8	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999990811541485	WITHOUT_CLASSIFICATION	9.18845851455451E-7	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999944982032491	WITHOUT_CLASSIFICATION	5.501796750792062E-6	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999941117063632	WITHOUT_CLASSIFICATION	5.888293636764186E-6	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999868264587589	WITHOUT_CLASSIFICATION	1.3173541241197067E-5	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999891596747367	WITHOUT_CLASSIFICATION	1.0840325263417355E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976378027439	WITHOUT_CLASSIFICATION	2.3621972561094623E-6	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.999998953287442	WITHOUT_CLASSIFICATION	1.0467125579624117E-6	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998444743951067	WITHOUT_CLASSIFICATION	1.5552560489328886E-4	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996757851688	WITHOUT_CLASSIFICATION	3.2421483119146313E-7	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9996458753895824	WITHOUT_CLASSIFICATION	3.5412461041757997E-4	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9785001218942391	WITHOUT_CLASSIFICATION	0.021499878105760928	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999990031418	WITHOUT_CLASSIFICATION	9.968581442182652E-10	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999992237673764	WITHOUT_CLASSIFICATION	7.762326235913002E-7	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999919825173151	WITHOUT_CLASSIFICATION	8.017482684758843E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977892067595	WITHOUT_CLASSIFICATION	2.2107932404844488E-6	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999790808378	WITHOUT_CLASSIFICATION	2.091916221966602E-8	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998110719432182	WITHOUT_CLASSIFICATION	1.8892805678174637E-4	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999999861560354	WITHOUT_CLASSIFICATION	1.3843964651559264E-8	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999995421310984	WITHOUT_CLASSIFICATION	4.578689015993211E-7	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999979204824982	WITHOUT_CLASSIFICATION	2.0795175016820437E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999979204824982	WITHOUT_CLASSIFICATION	2.0795175016820437E-6	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999996514095709	WITHOUT_CLASSIFICATION	3.4859042912625206E-7	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999100909104466	WITHOUT_CLASSIFICATION	8.990908955348654E-5	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999946068429263	WITHOUT_CLASSIFICATION	5.393157073712912E-6	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999835703438257	WITHOUT_CLASSIFICATION	1.6429656174243228E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998328968969	WITHOUT_CLASSIFICATION	1.6710310315300535E-7	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999243151791	WITHOUT_CLASSIFICATION	7.568482081977569E-8	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999987324648713	WITHOUT_CLASSIFICATION	1.267535128744512E-6	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999993525651024	WITHOUT_CLASSIFICATION	6.474348974789841E-7	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999999423144237	WITHOUT_CLASSIFICATION	5.7685576194232E-8	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999992767199588	WITHOUT_CLASSIFICATION	7.232800411192762E-7	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998846666086	WITHOUT_CLASSIFICATION	1.1533339134824994E-7	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999966409198503	WITHOUT_CLASSIFICATION	3.3590801496589417E-6	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.999982044371053	WITHOUT_CLASSIFICATION	1.7955628947067648E-5	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999999064063482	WITHOUT_CLASSIFICATION	9.359365181035529E-7	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999995166938379	WITHOUT_CLASSIFICATION	4.833061620125096E-7	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999756518722815	WITHOUT_CLASSIFICATION	2.434812771840061E-5	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999503698191881	WITHOUT_CLASSIFICATION	4.9630180811883624E-5	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999924429218977	WITHOUT_CLASSIFICATION	7.557078102342275E-6	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9999951722437752	WITHOUT_CLASSIFICATION	4.827756224814698E-6	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999837573731625	WITHOUT_CLASSIFICATION	1.6242626837506685E-4	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999696948217832	WITHOUT_CLASSIFICATION	3.0305178216773284E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999988541859	WITHOUT_CLASSIFICATION	1.1458140042927498E-9	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999771902870306	WITHOUT_CLASSIFICATION	2.2809712969442136E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999119592986767	WITHOUT_CLASSIFICATION	8.804070132339159E-5	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9997947358934867	WITHOUT_CLASSIFICATION	2.0526410651338292E-4	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9981627424566685	WITHOUT_CLASSIFICATION	0.0018372575433316342	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.6457402644844292	WITHOUT_CLASSIFICATION	0.35425973551557083	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999990850868679	WITHOUT_CLASSIFICATION	9.149131321518059E-7	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992007629524434	WITHOUT_CLASSIFICATION	7.99237047556482E-4	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999992885054816	WITHOUT_CLASSIFICATION	7.11494518362787E-7	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999119592986767	WITHOUT_CLASSIFICATION	8.804070132339159E-5	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999966814104799	WITHOUT_CLASSIFICATION	3.318589520009817E-6	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999507166640519	WITHOUT_CLASSIFICATION	4.9283335948147125E-5	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.999992314949211	WITHOUT_CLASSIFICATION	7.685050788954172E-6	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999957191164729	WITHOUT_CLASSIFICATION	4.280883527161636E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999978833106	WITHOUT_CLASSIFICATION	2.1166893872683E-9	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999539003483	WITHOUT_CLASSIFICATION	4.609965167483548E-8	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999964076264004	WITHOUT_CLASSIFICATION	3.592373599621716E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999051351793	WITHOUT_CLASSIFICATION	9.48648207388966E-8	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999985860202206	WITHOUT_CLASSIFICATION	1.413979779426663E-6	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999957191164729	WITHOUT_CLASSIFICATION	4.280883527161636E-6	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.999999924684052	WITHOUT_CLASSIFICATION	7.531594803019086E-8	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999051351793	WITHOUT_CLASSIFICATION	9.48648207388966E-8	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999306461193121	WITHOUT_CLASSIFICATION	6.935388068787797E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999996318881927	WITHOUT_CLASSIFICATION	3.681118072939268E-6	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999676696197	WITHOUT_CLASSIFICATION	3.2330380264092056E-8	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999992637189407	WITHOUT_CLASSIFICATION	7.362810593487243E-7	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999829166164	WITHOUT_CLASSIFICATION	1.7083383541046406E-8	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999996250412388	WITHOUT_CLASSIFICATION	3.7495876120933776E-7	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999695590974	WITHOUT_CLASSIFICATION	3.04409025861591E-8	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9996115609084727	WITHOUT_CLASSIFICATION	3.8843909152719926E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999999986643808	WITHOUT_CLASSIFICATION	1.3356192115480962E-8	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999985839557956	WITHOUT_CLASSIFICATION	1.4160442043791585E-6	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999947512596	WITHOUT_CLASSIFICATION	5.248740392100955E-9	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999999861100711	WITHOUT_CLASSIFICATION	1.3889928903339064E-7	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998178347926	WITHOUT_CLASSIFICATION	1.8216520734900394E-7	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999995735725623	WITHOUT_CLASSIFICATION	4.2642743775961116E-7	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999677954369212	WITHOUT_CLASSIFICATION	3.220456307891763E-5	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999949230752	WITHOUT_CLASSIFICATION	5.076924834689462E-9	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999999937688867	WITHOUT_CLASSIFICATION	6.231113306981811E-8	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9999552378930691	WITHOUT_CLASSIFICATION	4.476210693099003E-5	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999930846626	WITHOUT_CLASSIFICATION	6.915337432901277E-9	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999985706163705	WITHOUT_CLASSIFICATION	1.4293836295257627E-6	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999995699881095	WITHOUT_CLASSIFICATION	4.3001189056976063E-7	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999988889780391	WITHOUT_CLASSIFICATION	1.1110219608763598E-6	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999990619728846	WITHOUT_CLASSIFICATION	9.380271153189934E-7	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999910066010584	WITHOUT_CLASSIFICATION	8.993398941578188E-6	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999889532146278	WITHOUT_CLASSIFICATION	1.1046785372162729E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999441550723	WITHOUT_CLASSIFICATION	5.584492770289069E-8	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999990268792656	WITHOUT_CLASSIFICATION	9.731207343970847E-7	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999996812869404	WITHOUT_CLASSIFICATION	3.187130595461333E-7	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999891991424461	WITHOUT_CLASSIFICATION	1.0800857553969543E-5	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999984523661212	WITHOUT_CLASSIFICATION	1.5476338787520554E-6	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999855823176582	WITHOUT_CLASSIFICATION	1.44176823419056E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998416025474	WITHOUT_CLASSIFICATION	1.5839745261394815E-7	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801301297352	WITHOUT_CLASSIFICATION	1.9869870264800828E-5	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999446471095508	WITHOUT_CLASSIFICATION	5.535289044911337E-5	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999968957515996	WITHOUT_CLASSIFICATION	3.1042484005318123E-6	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999989996783197	WITHOUT_CLASSIFICATION	1.000321680354893E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999915382234	WITHOUT_CLASSIFICATION	8.461776577427485E-9	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999915382234	WITHOUT_CLASSIFICATION	8.461776577427485E-9	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999999696472	WITHOUT_CLASSIFICATION	3.035280484452084E-10	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999964340531547	WITHOUT_CLASSIFICATION	3.56594684534133E-6	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999995884794032	WITHOUT_CLASSIFICATION	4.115205968278653E-7	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999992473647216	WITHOUT_CLASSIFICATION	7.526352783593206E-7	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999999291795609	WITHOUT_CLASSIFICATION	7.082043909369861E-7	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9959039094455973	WITHOUT_CLASSIFICATION	0.004096090554402793	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999996500062284	WITHOUT_CLASSIFICATION	3.499937716127342E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999992326393657	WITHOUT_CLASSIFICATION	7.673606342247932E-7	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999293623716	WITHOUT_CLASSIFICATION	7.063762838701219E-8	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999996539746671	WITHOUT_CLASSIFICATION	3.460253328713906E-7	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9993367299175526	WITHOUT_CLASSIFICATION	6.632700824473316E-4	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999926099109	WITHOUT_CLASSIFICATION	7.390089136292439E-9	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999782045999052	WITHOUT_CLASSIFICATION	2.1795400094823514E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999915382234	WITHOUT_CLASSIFICATION	8.461776577427485E-9	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999936494911852	WITHOUT_CLASSIFICATION	6.350508814837343E-6	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999810950449028	WITHOUT_CLASSIFICATION	1.890495509721552E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.998699409910085	WITHOUT_CLASSIFICATION	0.0013005900899150228	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999999470390523	WITHOUT_CLASSIFICATION	5.296094776728397E-8	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999994796951738	WITHOUT_CLASSIFICATION	5.20304826121428E-7	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999967112508569	WITHOUT_CLASSIFICATION	3.2887491432275254E-6	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999896248500045	WITHOUT_CLASSIFICATION	1.0375149995344971E-5	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999991023852	WITHOUT_CLASSIFICATION	8.976148807386478E-10	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999982144703287	WITHOUT_CLASSIFICATION	1.7855296712943652E-6	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999998398027591	WITHOUT_CLASSIFICATION	1.6019724085120714E-7	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999989788428951	WITHOUT_CLASSIFICATION	1.0211571048383112E-6	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998416025474	WITHOUT_CLASSIFICATION	1.5839745261394815E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999915382234	WITHOUT_CLASSIFICATION	8.461776577427485E-9	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999928428570923	WITHOUT_CLASSIFICATION	7.157142907693298E-6	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999997668129272	WITHOUT_CLASSIFICATION	2.33187072674715E-7	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999989587238554	WITHOUT_CLASSIFICATION	1.0412761446794252E-6	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999795533307315	WITHOUT_CLASSIFICATION	2.0446669268545447E-5	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999982124224	WITHOUT_CLASSIFICATION	1.7875776758163264E-9	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999865023376842	WITHOUT_CLASSIFICATION	1.3497662315835822E-5	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968468708634	WITHOUT_CLASSIFICATION	3.153129136527261E-6	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999996281848947	WITHOUT_CLASSIFICATION	3.7181510529071985E-7	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.99999992385218	WITHOUT_CLASSIFICATION	7.614782000374198E-8	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999563617221501	WITHOUT_CLASSIFICATION	4.3638277849946594E-5	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999954028489062	WITHOUT_CLASSIFICATION	4.597151093837127E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999700979030025	WITHOUT_CLASSIFICATION	2.990209699744535E-5	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999992319858	WITHOUT_CLASSIFICATION	7.680143260289681E-10	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999999599242295	WITHOUT_CLASSIFICATION	4.00757705100635E-7	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999977546291838	WITHOUT_CLASSIFICATION	2.245370816114137E-6	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999998062933227	WITHOUT_CLASSIFICATION	1.9370667713495513E-7	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999986746725782	WITHOUT_CLASSIFICATION	1.325327421839619E-6	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999800857666841	WITHOUT_CLASSIFICATION	1.991423331584809E-5	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999995316114353	WITHOUT_CLASSIFICATION	4.6838856473295747E-7	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999987610449023	WITHOUT_CLASSIFICATION	1.2389550977736585E-6	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999998349300456	WITHOUT_CLASSIFICATION	1.6506995432086908E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999998349300456	WITHOUT_CLASSIFICATION	1.6506995432086908E-7	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999950458716519	WITHOUT_CLASSIFICATION	4.954128348144551E-6	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999929327134	WITHOUT_CLASSIFICATION	7.067286601101276E-9	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999968444439732	WITHOUT_CLASSIFICATION	3.155556026860373E-6	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999785857474656	WITHOUT_CLASSIFICATION	2.1414252534431086E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999952806708129	WITHOUT_CLASSIFICATION	4.719329187060255E-6	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999957280148579	WITHOUT_CLASSIFICATION	4.27198514213717E-6	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999998789868674	WITHOUT_CLASSIFICATION	1.2101313259707314E-6	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999637348547333	WITHOUT_CLASSIFICATION	3.626514526668923E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999637348547333	WITHOUT_CLASSIFICATION	3.626514526668923E-5	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999944627920571	WITHOUT_CLASSIFICATION	5.53720794286135E-6	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999999216610106	WITHOUT_CLASSIFICATION	7.833898942697471E-8	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999911511304301	WITHOUT_CLASSIFICATION	8.848869569935091E-6	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999951259836919	WITHOUT_CLASSIFICATION	4.874016308082343E-6	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999951259836919	WITHOUT_CLASSIFICATION	4.874016308082343E-6	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999951259836919	WITHOUT_CLASSIFICATION	4.874016308082343E-6	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999757550380489	WITHOUT_CLASSIFICATION	2.4244961951100004E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998945878161	WITHOUT_CLASSIFICATION	1.054121838592542E-7	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999494561654	WITHOUT_CLASSIFICATION	5.0543834458525774E-8	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.972501227729704	WITHOUT_CLASSIFICATION	0.027498772270295915	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999763248511963	WITHOUT_CLASSIFICATION	2.3675148803784774E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999915382234	WITHOUT_CLASSIFICATION	8.461776577427485E-9	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999915382234	WITHOUT_CLASSIFICATION	8.461776577427485E-9	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999743934452833	WITHOUT_CLASSIFICATION	2.5606554716669715E-5	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999998060229	WITHOUT_CLASSIFICATION	1.9397712762744779E-10	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9998085361708561	WITHOUT_CLASSIFICATION	1.9146382914401165E-4	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999996317044784	WITHOUT_CLASSIFICATION	3.682955216639307E-7	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999997177608917	WITHOUT_CLASSIFICATION	2.822391082144259E-7	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9995294224956127	WITHOUT_CLASSIFICATION	4.7057750438729074E-4	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999984282010113	WITHOUT_CLASSIFICATION	1.5717989888349465E-6	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9981324216344238	WITHOUT_CLASSIFICATION	0.0018675783655761958	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999987191304326	WITHOUT_CLASSIFICATION	1.2808695674106694E-6	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999938902017533	WITHOUT_CLASSIFICATION	6.1097982466273254E-6	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999998720204551	WITHOUT_CLASSIFICATION	1.279795449031148E-7	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999671060474009	WITHOUT_CLASSIFICATION	3.289395259916575E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999971910917674	WITHOUT_CLASSIFICATION	2.8089082325917564E-6	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999971910917674	WITHOUT_CLASSIFICATION	2.8089082325917564E-6	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999998677222706	WITHOUT_CLASSIFICATION	1.3227772939805245E-6	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999998677222706	WITHOUT_CLASSIFICATION	1.3227772939805245E-6	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999989708055103	WITHOUT_CLASSIFICATION	1.0291944897073609E-6	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999976990460313	WITHOUT_CLASSIFICATION	2.3009539686529103E-6	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999976990460313	WITHOUT_CLASSIFICATION	2.3009539686529103E-6	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999999216750605	WITHOUT_CLASSIFICATION	7.832493949802471E-7	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999975299144807	WITHOUT_CLASSIFICATION	2.4700855192629673E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999524725186	WITHOUT_CLASSIFICATION	4.7527481467501224E-8	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999998349300456	WITHOUT_CLASSIFICATION	1.6506995432086908E-7	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999998438577185	WITHOUT_CLASSIFICATION	1.56142281650621E-7	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999975299144807	WITHOUT_CLASSIFICATION	2.4700855192629673E-6	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.999999998026271	WITHOUT_CLASSIFICATION	1.9737289040373482E-9	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999956225579827	WITHOUT_CLASSIFICATION	4.3774420173014735E-6	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999989537366516	WITHOUT_CLASSIFICATION	1.046263348330878E-6	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999994435940945	WITHOUT_CLASSIFICATION	5.564059054982923E-7	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999997141444	WITHOUT_CLASSIFICATION	2.8585555514039223E-10	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999999604405406	WITHOUT_CLASSIFICATION	3.955945942356443E-8	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999996257775656	WITHOUT_CLASSIFICATION	3.742224342745394E-7	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9963348846759253	WITHOUT_CLASSIFICATION	0.0036651153240746435	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9994279551656341	WITHOUT_CLASSIFICATION	5.720448343659507E-4	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999975750946533	WITHOUT_CLASSIFICATION	2.424905346690729E-6	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999501594807	WITHOUT_CLASSIFICATION	4.9840519381342715E-8	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999966885480507	WITHOUT_CLASSIFICATION	3.3114519493256533E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999988670111295	WITHOUT_CLASSIFICATION	1.1329888704693071E-6	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999999145696735	WITHOUT_CLASSIFICATION	8.543032652234542E-8	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9587012102846832	WITHOUT_CLASSIFICATION	0.041298789715316836	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999704690230122	WITHOUT_CLASSIFICATION	2.953097698779938E-5	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999604759948	WITHOUT_CLASSIFICATION	3.952400525043211E-8	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999976458180135	WITHOUT_CLASSIFICATION	2.3541819865215054E-6	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999976458180135	WITHOUT_CLASSIFICATION	2.3541819865215054E-6	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999999341656042	WITHOUT_CLASSIFICATION	6.583439581832604E-8	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999997316732675	WITHOUT_CLASSIFICATION	2.6832673258509094E-7	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999999910133875	WITHOUT_CLASSIFICATION	8.986612458193028E-9	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999996382669815	WITHOUT_CLASSIFICATION	3.617330185509027E-7	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999998354026499	WITHOUT_CLASSIFICATION	1.6459734998904874E-7	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999910700727633	WITHOUT_CLASSIFICATION	8.929927236745952E-6	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999960479636	WITHOUT_CLASSIFICATION	3.952036263634283E-9	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999995945428046	WITHOUT_CLASSIFICATION	4.0545719536087306E-7	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999947011959942	WITHOUT_CLASSIFICATION	5.2988040058465984E-6	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999417417468	WITHOUT_CLASSIFICATION	5.825825331628134E-8	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999998022118055	WITHOUT_CLASSIFICATION	1.9778819454511902E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999700979030025	WITHOUT_CLASSIFICATION	2.990209699744535E-5	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999856409005	WITHOUT_CLASSIFICATION	1.4359099389797218E-8	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999079862683017	WITHOUT_CLASSIFICATION	9.201373169826505E-5	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999726927707832	WITHOUT_CLASSIFICATION	2.730722921684282E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999893862174588	WITHOUT_CLASSIFICATION	1.0613782541176471E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996836270855	WITHOUT_CLASSIFICATION	3.1637291452629244E-7	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996836270855	WITHOUT_CLASSIFICATION	3.1637291452629244E-7	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999985499598155	WITHOUT_CLASSIFICATION	1.4500401845041159E-6	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9997023053040394	WITHOUT_CLASSIFICATION	2.9769469596074177E-4	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9973223386865593	WITHOUT_CLASSIFICATION	0.002677661313440672	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9982441518926322	WITHOUT_CLASSIFICATION	0.0017558481073679335	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.999671711220457	WITHOUT_CLASSIFICATION	3.2828877954302E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999674377568716	WITHOUT_CLASSIFICATION	3.2562243128353365E-5	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998984427603	WITHOUT_CLASSIFICATION	1.0155723970783828E-7	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999889386272544	WITHOUT_CLASSIFICATION	1.1061372745751956E-5	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.99999385249409	WITHOUT_CLASSIFICATION	6.147505910015685E-6	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999971582255971	WITHOUT_CLASSIFICATION	2.8417744029575823E-6	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999984822423078	WITHOUT_CLASSIFICATION	1.5177576921868658E-6	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999889386272544	WITHOUT_CLASSIFICATION	1.1061372745751956E-5	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999971857806418	WITHOUT_CLASSIFICATION	2.81421935829342E-6	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999999909463909	WITHOUT_CLASSIFICATION	9.053609084154603E-8	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999965606244743	WITHOUT_CLASSIFICATION	3.4393755257996585E-6	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9999362915661685	WITHOUT_CLASSIFICATION	6.3708433831505E-5	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999378030037	WITHOUT_CLASSIFICATION	6.21969963133773E-8	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999214215561	WITHOUT_CLASSIFICATION	7.857844394646345E-8	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999960749812	WITHOUT_CLASSIFICATION	3.9250187870186284E-9	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999999749624895	WITHOUT_CLASSIFICATION	2.503751049483482E-7	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999998344787266	WITHOUT_CLASSIFICATION	1.6552127345350258E-7	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996280883572665	WITHOUT_CLASSIFICATION	3.7191164273356407E-4	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999744481893776	WITHOUT_CLASSIFICATION	2.5551810622300225E-5	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.99999430590298	WITHOUT_CLASSIFICATION	5.6940970199870345E-6	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999742185195	WITHOUT_CLASSIFICATION	2.578148041036222E-8	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999997325718947	WITHOUT_CLASSIFICATION	2.674281053452685E-7	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999941489531385	WITHOUT_CLASSIFICATION	5.8510468614629645E-6	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999528849194	WITHOUT_CLASSIFICATION	4.711508067112235E-8	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999896226532	WITHOUT_CLASSIFICATION	1.0377346766647926E-8	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999629012190359	WITHOUT_CLASSIFICATION	3.709878096418901E-5	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998968893559373	WITHOUT_CLASSIFICATION	1.031106440627221E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999985647533	WITHOUT_CLASSIFICATION	1.4352467072575094E-9	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999998211174277	WITHOUT_CLASSIFICATION	1.7888257230517005E-6	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999996812488469	WITHOUT_CLASSIFICATION	3.187511530813661E-7	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9989881284325646	WITHOUT_CLASSIFICATION	0.001011871567435406	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9999516564123059	WITHOUT_CLASSIFICATION	4.8343587694128654E-5	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999850841544	WITHOUT_CLASSIFICATION	1.4915845493665925E-8	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.999986703809159	WITHOUT_CLASSIFICATION	1.3296190840967174E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999995024829167	WITHOUT_CLASSIFICATION	4.975170833158734E-7	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999996281941996	WITHOUT_CLASSIFICATION	3.7180580039230114E-7	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999999823840598	WITHOUT_CLASSIFICATION	1.761594019855528E-7	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999997611037996	WITHOUT_CLASSIFICATION	2.388962004423423E-7	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999826558345	WITHOUT_CLASSIFICATION	1.7344165661496693E-8	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999652790603502	WITHOUT_CLASSIFICATION	3.4720939649892515E-5	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998681774822441	WITHOUT_CLASSIFICATION	1.3182251775590355E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999982959387	WITHOUT_CLASSIFICATION	1.7040613805111812E-9	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999661261212	WITHOUT_CLASSIFICATION	3.3873878822935486E-8	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999979434766133	WITHOUT_CLASSIFICATION	2.0565233866528282E-6	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998819899307	WITHOUT_CLASSIFICATION	1.1801006918817098E-7	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999982274971373	WITHOUT_CLASSIFICATION	1.7725028626452561E-6	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999941806194	WITHOUT_CLASSIFICATION	5.819380609203777E-9	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999912663544089	WITHOUT_CLASSIFICATION	8.733645591106593E-6	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999998700840693	WITHOUT_CLASSIFICATION	1.2991593067522128E-7	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999980351070803	WITHOUT_CLASSIFICATION	1.9648929195845305E-6	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999352993177	WITHOUT_CLASSIFICATION	6.470068223489203E-8	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999831987421	WITHOUT_CLASSIFICATION	1.680125803098296E-8	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999976946580563	WITHOUT_CLASSIFICATION	2.3053419437815175E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999961384137207	WITHOUT_CLASSIFICATION	3.861586279281257E-6	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999871345473248	WITHOUT_CLASSIFICATION	1.2865452675284658E-5	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999999377278879	WITHOUT_CLASSIFICATION	6.227211221991403E-8	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999999877508865	WITHOUT_CLASSIFICATION	1.224911350817248E-7	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999876910422835	WITHOUT_CLASSIFICATION	1.2308957716421027E-5	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977347519912	WITHOUT_CLASSIFICATION	2.2652480089340906E-6	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999597842344	WITHOUT_CLASSIFICATION	4.02157655360256E-8	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999976123255	WITHOUT_CLASSIFICATION	2.3876744718976277E-9	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997010733979828	WITHOUT_CLASSIFICATION	2.9892660201723004E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999999991096932	WITHOUT_CLASSIFICATION	8.903067963244204E-9	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999973975853148	WITHOUT_CLASSIFICATION	2.602414685211987E-6	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999537851380809	WITHOUT_CLASSIFICATION	4.62148619191468E-5	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999759260212361	WITHOUT_CLASSIFICATION	2.407397876382733E-5	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999996997879962	WITHOUT_CLASSIFICATION	3.002120038966113E-7	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999958199731365	WITHOUT_CLASSIFICATION	4.18002686361434E-6	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999954838941518	WITHOUT_CLASSIFICATION	4.51610584819591E-6	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999999283838465	WITHOUT_CLASSIFICATION	7.161615347900176E-8	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.999841327826278	WITHOUT_CLASSIFICATION	1.5867217372207343E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9690109583823877	DEFECT	0.030989041617612262	WITHOUT_CLASSIFICATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9997981274280426	WITHOUT_CLASSIFICATION	2.0187257195737618E-4	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999986234396885	WITHOUT_CLASSIFICATION	1.376560311476514E-6	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977347519912	WITHOUT_CLASSIFICATION	2.2652480089340906E-6	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999994204708934	WITHOUT_CLASSIFICATION	5.795291066074402E-7	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999976090883888	WITHOUT_CLASSIFICATION	2.3909116112600304E-6	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996288417424	WITHOUT_CLASSIFICATION	3.7115825759990936E-7	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.999999702164972	WITHOUT_CLASSIFICATION	2.9783502807271263E-7	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998819417809561	WITHOUT_CLASSIFICATION	1.1805821904385546E-4	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998944324980888	WITHOUT_CLASSIFICATION	1.0556750191111976E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.99999385249409	WITHOUT_CLASSIFICATION	6.147505910015685E-6	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997762324914	WITHOUT_CLASSIFICATION	2.2376750864432588E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999661261212	WITHOUT_CLASSIFICATION	3.3873878822935486E-8	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9856320530147183	WITHOUT_CLASSIFICATION	0.014367946985281602	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998345248593	WITHOUT_CLASSIFICATION	1.6547514069356513E-7	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999898031421	WITHOUT_CLASSIFICATION	1.0196857864447133E-8	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999910787034	WITHOUT_CLASSIFICATION	8.921296675581656E-9	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999995490734775	WITHOUT_CLASSIFICATION	4.5092652255388703E-7	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999951186015339	WITHOUT_CLASSIFICATION	4.881398466065024E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999295270345817	WITHOUT_CLASSIFICATION	7.04729654182899E-5	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999992790510533	WITHOUT_CLASSIFICATION	7.209489466667303E-7	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9917850516945277	WITHOUT_CLASSIFICATION	0.008214948305472265	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999955887664058	WITHOUT_CLASSIFICATION	4.4112335941626506E-6	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999996717328348	WITHOUT_CLASSIFICATION	3.2826716529201784E-7	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999998471203942	WITHOUT_CLASSIFICATION	1.5287960574696924E-7	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999840875491611	WITHOUT_CLASSIFICATION	1.591245083885224E-5	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999840875491611	WITHOUT_CLASSIFICATION	1.591245083885224E-5	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999449530478	WITHOUT_CLASSIFICATION	5.5046952176880756E-8	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997558478286	WITHOUT_CLASSIFICATION	2.441521713254193E-7	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999948347378	WITHOUT_CLASSIFICATION	5.165262224345444E-9	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999995528104	WITHOUT_CLASSIFICATION	4.471895519638795E-10	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999355708628	WITHOUT_CLASSIFICATION	6.442913721450401E-8	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999975560040747	WITHOUT_CLASSIFICATION	2.4439959252468866E-6	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999907496236493	WITHOUT_CLASSIFICATION	9.250376350669087E-6	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999996873381218	WITHOUT_CLASSIFICATION	3.1266187817550563E-7	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999997021967184	WITHOUT_CLASSIFICATION	2.978032816247451E-7	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999899308069595	WITHOUT_CLASSIFICATION	1.0069193040442356E-5	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999496223192235	WITHOUT_CLASSIFICATION	5.037768077649528E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9999974932294906	WITHOUT_CLASSIFICATION	2.5067705094250317E-6	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999961182859665	WITHOUT_CLASSIFICATION	3.881714033555753E-6	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998770305292	WITHOUT_CLASSIFICATION	1.2296947075584962E-7	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997646172132473	WITHOUT_CLASSIFICATION	2.3538278675272578E-4	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999932334932712	WITHOUT_CLASSIFICATION	6.766506728779375E-6	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999998246017512	WITHOUT_CLASSIFICATION	1.753982487631218E-7	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999947585690965	WITHOUT_CLASSIFICATION	5.241430903504264E-6	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999998677539	WITHOUT_CLASSIFICATION	1.3224614655406653E-10	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999988147508573	WITHOUT_CLASSIFICATION	1.1852491427069995E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999610070835	WITHOUT_CLASSIFICATION	3.899291647419834E-8	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9990819608236357	WITHOUT_CLASSIFICATION	9.180391763643208E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999698592078	WITHOUT_CLASSIFICATION	3.0140792174905585E-8	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999982187081691	WITHOUT_CLASSIFICATION	1.7812918309113018E-6	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999984267559796	WITHOUT_CLASSIFICATION	1.573244020398105E-6	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999999309407915	WITHOUT_CLASSIFICATION	6.905920848604882E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975872207626	WITHOUT_CLASSIFICATION	2.412779237359288E-6	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999781921441916	WITHOUT_CLASSIFICATION	2.1807855808485744E-5	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999982419556139	WITHOUT_CLASSIFICATION	1.7580443861824755E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999960299477474	WITHOUT_CLASSIFICATION	3.97005225257995E-6	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999858386437611	WITHOUT_CLASSIFICATION	1.4161356238864297E-5	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999843889126154	WITHOUT_CLASSIFICATION	1.561108738448704E-5	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999978848113859	WITHOUT_CLASSIFICATION	2.1151886141847464E-6	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999832050559	WITHOUT_CLASSIFICATION	1.679494408088445E-8	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999989149598069	WITHOUT_CLASSIFICATION	1.0850401930892313E-6	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999991528211359	WITHOUT_CLASSIFICATION	8.471788640708372E-7	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999999940812684	WITHOUT_CLASSIFICATION	5.918731606694393E-8	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999900532276548	WITHOUT_CLASSIFICATION	9.946772345163725E-6	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999986094764134	WITHOUT_CLASSIFICATION	1.3905235866670406E-6	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999996812231302	WITHOUT_CLASSIFICATION	3.1877686980260196E-7	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994659075508	WITHOUT_CLASSIFICATION	5.340924491461221E-7	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861333173276	WITHOUT_CLASSIFICATION	1.3866682672479236E-5	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999999978811833	WITHOUT_CLASSIFICATION	2.1188167071697866E-8	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999942870136845	WITHOUT_CLASSIFICATION	5.712986315489165E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999972382297574	WITHOUT_CLASSIFICATION	2.7617702427263594E-6	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999975710721288	WITHOUT_CLASSIFICATION	2.428927871217899E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999659893607811	WITHOUT_CLASSIFICATION	3.401063921884846E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9930765352586495	WITHOUT_CLASSIFICATION	0.0069234647413505225	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997740385804	WITHOUT_CLASSIFICATION	2.2596141968600495E-7	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999845201263	WITHOUT_CLASSIFICATION	1.5479873738383955E-8	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999992356384382	WITHOUT_CLASSIFICATION	7.643615616918886E-7	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999439116490451	WITHOUT_CLASSIFICATION	5.608835095502323E-5	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999962083628	WITHOUT_CLASSIFICATION	3.791637315425076E-9	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999999972345269	WITHOUT_CLASSIFICATION	2.76547308837499E-8	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999978389557861	WITHOUT_CLASSIFICATION	2.1610442139533207E-6	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999985382267035	WITHOUT_CLASSIFICATION	1.461773296521797E-6	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999891548598029	WITHOUT_CLASSIFICATION	1.0845140197093474E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999972247332608	WITHOUT_CLASSIFICATION	2.775266739157487E-6	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999995977196525	WITHOUT_CLASSIFICATION	4.022803475653056E-7	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999965022638927	WITHOUT_CLASSIFICATION	3.497736107221698E-6	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999525101007678	WITHOUT_CLASSIFICATION	4.7489899232198915E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999966933216329	WITHOUT_CLASSIFICATION	3.306678367050428E-6	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999969988370232	WITHOUT_CLASSIFICATION	3.0011629767850934E-6	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999994924037253	WITHOUT_CLASSIFICATION	5.075962745925093E-7	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999526530561	WITHOUT_CLASSIFICATION	4.734694387441942E-8	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999985665000237	WITHOUT_CLASSIFICATION	1.4334999763192086E-6	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999943749272974	WITHOUT_CLASSIFICATION	5.625072702630464E-6	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997572880379	WITHOUT_CLASSIFICATION	2.4271196215522784E-7	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999999663146254	WITHOUT_CLASSIFICATION	3.3685374611516296E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999350530118	WITHOUT_CLASSIFICATION	6.494698825528413E-8	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999995836382568	WITHOUT_CLASSIFICATION	4.163617432005611E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999350530118	WITHOUT_CLASSIFICATION	6.494698825528413E-8	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999967473337066	WITHOUT_CLASSIFICATION	3.252666293500905E-6	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999985112456015	WITHOUT_CLASSIFICATION	1.4887543985327069E-6	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999989559750604	WITHOUT_CLASSIFICATION	1.0440249396041825E-6	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999185469419	WITHOUT_CLASSIFICATION	8.145305805759949E-8	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999995147145365	WITHOUT_CLASSIFICATION	4.852854634642052E-7	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999997354378067	WITHOUT_CLASSIFICATION	2.6456219324378434E-7	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999999554257538	WITHOUT_CLASSIFICATION	4.4574246215336575E-7	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999998169206182	WITHOUT_CLASSIFICATION	1.8307938168065217E-7	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9997864650415546	WITHOUT_CLASSIFICATION	2.1353495844548328E-4	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998058872261	WITHOUT_CLASSIFICATION	1.9411277381593655E-7	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999999961671748	WITHOUT_CLASSIFICATION	3.832825202350752E-8	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999996317105175	WITHOUT_CLASSIFICATION	3.68289482448166E-7	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999990979748	WITHOUT_CLASSIFICATION	9.020252705035445E-10	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999229473533972	WITHOUT_CLASSIFICATION	7.705264660289205E-5	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999909710275428	WITHOUT_CLASSIFICATION	9.028972457209125E-6	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999194260389	WITHOUT_CLASSIFICATION	8.057396108438225E-8	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999997335033648	WITHOUT_CLASSIFICATION	2.664966351453514E-7	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999999321217355	WITHOUT_CLASSIFICATION	6.787826449402769E-7	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999981200782	WITHOUT_CLASSIFICATION	1.879921805364577E-9	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999765650598	WITHOUT_CLASSIFICATION	2.3434940309000926E-8	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999739372689	WITHOUT_CLASSIFICATION	2.6062731102295455E-7	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999999496533432	WITHOUT_CLASSIFICATION	5.034665698949528E-8	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9989484273388071	WITHOUT_CLASSIFICATION	0.0010515726611929656	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999973959198691	WITHOUT_CLASSIFICATION	2.6040801309266027E-6	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999997276513611	WITHOUT_CLASSIFICATION	2.7234863884307535E-7	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9994245815085846	WITHOUT_CLASSIFICATION	5.754184914152886E-4	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9998878552121837	WITHOUT_CLASSIFICATION	1.1214478781622885E-4	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999965088469747	WITHOUT_CLASSIFICATION	3.491153025186823E-6	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999904538707	WITHOUT_CLASSIFICATION	9.546129450467991E-9	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.999972200216482	WITHOUT_CLASSIFICATION	2.7799783518005487E-5	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999922062182445	WITHOUT_CLASSIFICATION	7.793781755577337E-6	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9798424587543277	WITHOUT_CLASSIFICATION	0.020157541245672282	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9998009062490013	WITHOUT_CLASSIFICATION	1.990937509986707E-4	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998467684508375	WITHOUT_CLASSIFICATION	1.5323154916236373E-4	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999772311367466	WITHOUT_CLASSIFICATION	2.276886325325936E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999943068746818	WITHOUT_CLASSIFICATION	5.69312531809494E-6	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9999884171449145	WITHOUT_CLASSIFICATION	1.1582855085563418E-5	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999923674514	WITHOUT_CLASSIFICATION	7.632548571166637E-9	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9998846474586118	WITHOUT_CLASSIFICATION	1.1535254138821528E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999998791845064	WITHOUT_CLASSIFICATION	1.2081549353685748E-7	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999993154443841	WITHOUT_CLASSIFICATION	6.845556158506965E-7	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9999778398299873	WITHOUT_CLASSIFICATION	2.216017001265183E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999021297277937	WITHOUT_CLASSIFICATION	9.787027220630032E-5	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9994245815085846	WITHOUT_CLASSIFICATION	5.754184914152886E-4	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998149795951239	WITHOUT_CLASSIFICATION	1.850204048760764E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999969496431268	WITHOUT_CLASSIFICATION	3.050356873152932E-6	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9990603208845296	WITHOUT_CLASSIFICATION	9.396791154703681E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999913811407714	WITHOUT_CLASSIFICATION	8.61885922861483E-5	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9999989745823216	WITHOUT_CLASSIFICATION	1.025417678427647E-6	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999996991455535	WITHOUT_CLASSIFICATION	3.008544464543946E-7	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999120048861	WITHOUT_CLASSIFICATION	8.79951139198654E-8	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9592717806717492	DEFECT	0.040728219328250756	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998751405097	WITHOUT_CLASSIFICATION	1.2485949021304975E-7	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9997962431486946	WITHOUT_CLASSIFICATION	2.037568513054678E-4	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.999996272808392	WITHOUT_CLASSIFICATION	3.7271916079185033E-6	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999958106223	WITHOUT_CLASSIFICATION	4.189377756377507E-9	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999849806813703	WITHOUT_CLASSIFICATION	1.5019318629706478E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999399672444347	WITHOUT_CLASSIFICATION	6.003275556517739E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999998624718422	WITHOUT_CLASSIFICATION	1.3752815774515624E-7	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999943965913	WITHOUT_CLASSIFICATION	5.60340871344316E-9	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999349389043	WITHOUT_CLASSIFICATION	6.506109580277778E-8	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999998520137219	WITHOUT_CLASSIFICATION	1.4798627813058057E-7	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999986619774912	WITHOUT_CLASSIFICATION	1.3380225087689783E-6	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998149795951239	WITHOUT_CLASSIFICATION	1.850204048760764E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999927009922402	WITHOUT_CLASSIFICATION	7.2990077598127914E-6	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9992342348697444	WITHOUT_CLASSIFICATION	7.657651302555451E-4	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999934395730842	WITHOUT_CLASSIFICATION	6.56042691589012E-6	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999995363125138	WITHOUT_CLASSIFICATION	4.6368748608834435E-7	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999898272155736	WITHOUT_CLASSIFICATION	1.0172784426395657E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998408398684676	WITHOUT_CLASSIFICATION	1.5916013153236227E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998408398684676	WITHOUT_CLASSIFICATION	1.5916013153236227E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999954817163242	WITHOUT_CLASSIFICATION	4.5182836757390114E-6	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998408398684676	WITHOUT_CLASSIFICATION	1.5916013153236227E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998408398684676	WITHOUT_CLASSIFICATION	1.5916013153236227E-4	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9840355110078097	WITHOUT_CLASSIFICATION	0.015964488992190277	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999929158666997	WITHOUT_CLASSIFICATION	7.08413330039856E-6	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999671118657	WITHOUT_CLASSIFICATION	3.288813439416404E-8	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999999731764747	WITHOUT_CLASSIFICATION	2.682352529547883E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9995677936947159	WITHOUT_CLASSIFICATION	4.322063052840736E-4	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999922750339	WITHOUT_CLASSIFICATION	7.724966103578328E-9	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9988125752114257	WITHOUT_CLASSIFICATION	0.0011874247885742986	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999996907186	WITHOUT_CLASSIFICATION	3.0928140705509517E-10	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999724041996968	WITHOUT_CLASSIFICATION	2.75958003031887E-5	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999956173664427	WITHOUT_CLASSIFICATION	4.3826335573641884E-6	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999906743315919	WITHOUT_CLASSIFICATION	9.32566840798542E-6	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999699812607372	WITHOUT_CLASSIFICATION	3.0018739262668584E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999992772592247	WITHOUT_CLASSIFICATION	7.227407753900512E-7	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999989832414029	WITHOUT_CLASSIFICATION	1.016758597156708E-6	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999999514022245	WITHOUT_CLASSIFICATION	4.859777550270502E-7	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9977999944281476	WITHOUT_CLASSIFICATION	0.0022000055718523624	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999987053776423	WITHOUT_CLASSIFICATION	1.2946223576570525E-6	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999680258173086	WITHOUT_CLASSIFICATION	3.1974182691427384E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999216740071412	WITHOUT_CLASSIFICATION	7.832599285889823E-5	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999980378835872	WITHOUT_CLASSIFICATION	1.9621164127810817E-6	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.999999348762505	WITHOUT_CLASSIFICATION	6.512374950877653E-7	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999966002805633	WITHOUT_CLASSIFICATION	3.3997194367749903E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999987053776423	WITHOUT_CLASSIFICATION	1.2946223576570525E-6	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9998878552121837	WITHOUT_CLASSIFICATION	1.1214478781622885E-4	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.999993615065741	WITHOUT_CLASSIFICATION	6.384934258942555E-6	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999959758475943	WITHOUT_CLASSIFICATION	4.02415240575373E-6	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999950750198865	WITHOUT_CLASSIFICATION	4.9249801135867715E-6	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9999984585923682	WITHOUT_CLASSIFICATION	1.5414076317699388E-6	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999414817536015	WITHOUT_CLASSIFICATION	5.851824639838928E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999997632064036	WITHOUT_CLASSIFICATION	2.3679359633343999E-7	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9989031560796511	WITHOUT_CLASSIFICATION	0.0010968439203488342	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.999999590314313	WITHOUT_CLASSIFICATION	4.0968568701479945E-7	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999904722832	WITHOUT_CLASSIFICATION	9.52771676173472E-9	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999959810428116	WITHOUT_CLASSIFICATION	4.018957188429731E-6	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999991413505508	WITHOUT_CLASSIFICATION	8.586494491351843E-7	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999990942029136	WITHOUT_CLASSIFICATION	9.05797086464931E-7	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999943323779	WITHOUT_CLASSIFICATION	5.667622173773085E-9	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9997975016825873	WITHOUT_CLASSIFICATION	2.0249831741279105E-4	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999425858371	WITHOUT_CLASSIFICATION	5.741416294212446E-8	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.999972983769544	WITHOUT_CLASSIFICATION	2.7016230455901754E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999753483482456	WITHOUT_CLASSIFICATION	2.4651651754327498E-5	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999988072427447	WITHOUT_CLASSIFICATION	1.1927572552580432E-6	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999945963896342	WITHOUT_CLASSIFICATION	5.403610365859074E-6	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999096083317035	WITHOUT_CLASSIFICATION	9.039166829641994E-5	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999999096199168	WITHOUT_CLASSIFICATION	9.038008315176894E-8	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999560540278	WITHOUT_CLASSIFICATION	4.394597224428849E-8	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.999999590314313	WITHOUT_CLASSIFICATION	4.0968568701479945E-7	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999748420406	WITHOUT_CLASSIFICATION	2.5157959444464637E-8	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999999012081167	WITHOUT_CLASSIFICATION	9.87918832768686E-8	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999988742963489	WITHOUT_CLASSIFICATION	1.1257036509610152E-6	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999999563170799	WITHOUT_CLASSIFICATION	4.3682920096224106E-7	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999799294929	WITHOUT_CLASSIFICATION	2.0070507126466413E-8	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9999977261322951	WITHOUT_CLASSIFICATION	2.273867704899825E-6	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999966617719723	WITHOUT_CLASSIFICATION	3.338228027662475E-6	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9999998454043739	WITHOUT_CLASSIFICATION	1.545956260785179E-7	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999997137887023	WITHOUT_CLASSIFICATION	2.8621129768555105E-7	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9999711193528604	WITHOUT_CLASSIFICATION	2.888064713967233E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999666603735	WITHOUT_CLASSIFICATION	3.33396265232339E-8	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999984898181283	WITHOUT_CLASSIFICATION	1.5101818716746545E-6	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999954848388266	WITHOUT_CLASSIFICATION	4.515161173407826E-6	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999998215716	WITHOUT_CLASSIFICATION	1.7842829786818464E-10	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999972366487025	WITHOUT_CLASSIFICATION	2.763351297459522E-6	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999807715856417	WITHOUT_CLASSIFICATION	1.922841435827519E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999179847487	WITHOUT_CLASSIFICATION	8.201525125792441E-8	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999666603735	WITHOUT_CLASSIFICATION	3.33396265232339E-8	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999998503738564	WITHOUT_CLASSIFICATION	1.4962614361959622E-7	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9998599404608454	WITHOUT_CLASSIFICATION	1.4005953915461006E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999976056277041	WITHOUT_CLASSIFICATION	2.3943722958353793E-6	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999998506384588	WITHOUT_CLASSIFICATION	1.4936154119684573E-7	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999599624813005	WITHOUT_CLASSIFICATION	4.0037518699520174E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999997502141695	WITHOUT_CLASSIFICATION	2.4978583042409143E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999972366487025	WITHOUT_CLASSIFICATION	2.763351297459522E-6	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999981066400666	WITHOUT_CLASSIFICATION	1.8933599334654732E-6	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848466428307	WITHOUT_CLASSIFICATION	1.5153357169207791E-5	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998913286758	WITHOUT_CLASSIFICATION	1.0867132413128476E-7	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999740758879	WITHOUT_CLASSIFICATION	2.592411209986667E-6	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985281449039	WITHOUT_CLASSIFICATION	1.471855096129332E-6	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998501475637	WITHOUT_CLASSIFICATION	1.4985243639820727E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999718770714	WITHOUT_CLASSIFICATION	2.8122928600704783E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999718770714	WITHOUT_CLASSIFICATION	2.8122928600704783E-7	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999967911697245	WITHOUT_CLASSIFICATION	3.208830275509388E-5	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.999999308472067	WITHOUT_CLASSIFICATION	6.915279330570585E-7	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9999982166482634	WITHOUT_CLASSIFICATION	1.7833517366801876E-6	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9999571921643312	WITHOUT_CLASSIFICATION	4.2807835668840284E-5	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.8919899051521157	WITHOUT_CLASSIFICATION	0.10801009484788424	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978527725757	WITHOUT_CLASSIFICATION	2.1472274242656493E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916613052154	WITHOUT_CLASSIFICATION	8.338694784594055E-6	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851461490084	WITHOUT_CLASSIFICATION	1.4853850991542043E-5	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999979682512028	WITHOUT_CLASSIFICATION	2.031748797204724E-6	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806033623594	WITHOUT_CLASSIFICATION	1.939663764066016E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978527725757	WITHOUT_CLASSIFICATION	2.1472274242656493E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916613052154	WITHOUT_CLASSIFICATION	8.338694784594055E-6	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851461490084	WITHOUT_CLASSIFICATION	1.4853850991542043E-5	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999992200367696	WITHOUT_CLASSIFICATION	7.799632304120057E-7	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9999983578149806	WITHOUT_CLASSIFICATION	1.642185019357159E-6	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999991001669625	WITHOUT_CLASSIFICATION	8.998330374676159E-7	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999992106187705	WITHOUT_CLASSIFICATION	7.893812295924587E-7	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999996834757058	WITHOUT_CLASSIFICATION	3.165242941539026E-7	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9989858784853336	WITHOUT_CLASSIFICATION	0.0010141215146664123	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999580699290437	WITHOUT_CLASSIFICATION	4.193007095635272E-5	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999998460347836	WITHOUT_CLASSIFICATION	1.5396521631369445E-7	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999980270441201	WITHOUT_CLASSIFICATION	1.9729558799337875E-6	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999984693354586	WITHOUT_CLASSIFICATION	1.5306645414062258E-6	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999998917174007	WITHOUT_CLASSIFICATION	1.0828259931391773E-7	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996664317381746	WITHOUT_CLASSIFICATION	3.3356826182542355E-4	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999601842047277	WITHOUT_CLASSIFICATION	3.9815795272294036E-4	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999992791662491	WITHOUT_CLASSIFICATION	7.208337508289997E-7	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997340707706	WITHOUT_CLASSIFICATION	2.6592922936854087E-7	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999947945765585	WITHOUT_CLASSIFICATION	5.205423441479606E-6	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999998905823316	WITHOUT_CLASSIFICATION	1.0941766836111076E-7	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999894725118897	WITHOUT_CLASSIFICATION	1.0527488110289913E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999966915231889	WITHOUT_CLASSIFICATION	3.30847681111991E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999988489994802	WITHOUT_CLASSIFICATION	1.1510005197660631E-6	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999967712937914	WITHOUT_CLASSIFICATION	3.2287062085072776E-6	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9794368324610797	WITHOUT_CLASSIFICATION	0.020563167538920256	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999998965496841	WITHOUT_CLASSIFICATION	1.0345031582087735E-7	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999989989728426	WITHOUT_CLASSIFICATION	1.0010271573633127E-6	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999901533039	WITHOUT_CLASSIFICATION	9.846696108440886E-9	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999906686122367	WITHOUT_CLASSIFICATION	9.331387763368455E-6	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844363214304	WITHOUT_CLASSIFICATION	1.5563678569595594E-5	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924210714557	WITHOUT_CLASSIFICATION	7.578928544384461E-6	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999864159669	WITHOUT_CLASSIFICATION	1.3584033214967208E-8	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947973939428	WITHOUT_CLASSIFICATION	5.202606057168259E-6	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998152349625852	WITHOUT_CLASSIFICATION	1.8476503741470608E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999999951604492	WITHOUT_CLASSIFICATION	4.839550814129755E-8	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999999951604492	WITHOUT_CLASSIFICATION	4.839550814129755E-8	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999697303127	WITHOUT_CLASSIFICATION	3.02696872207086E-8	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999993417562165	WITHOUT_CLASSIFICATION	6.582437834480731E-7	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999974813288061	WITHOUT_CLASSIFICATION	2.5186711938768944E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999700979030025	WITHOUT_CLASSIFICATION	2.990209699744535E-5	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999999869574201	WITHOUT_CLASSIFICATION	1.3042579972271658E-8	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999987054959918	WITHOUT_CLASSIFICATION	1.294504008142079E-6	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999966754094932	WITHOUT_CLASSIFICATION	3.324590506748539E-6	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999999569301397	WITHOUT_CLASSIFICATION	4.306986029026717E-8	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999998470487925	WITHOUT_CLASSIFICATION	1.5295120743950823E-7	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997662819545	WITHOUT_CLASSIFICATION	2.3371804541930564E-7	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993561982109	WITHOUT_CLASSIFICATION	6.438017891047924E-7	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990182130526	WITHOUT_CLASSIFICATION	9.81786947392096E-7	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996886675738	WITHOUT_CLASSIFICATION	3.113324262170837E-7	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999927472643	WITHOUT_CLASSIFICATION	7.252735703545725E-8	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995354301432	WITHOUT_CLASSIFICATION	4.645698566840409E-7	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990630126866	WITHOUT_CLASSIFICATION	9.369873134678944E-7	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997856247075	WITHOUT_CLASSIFICATION	2.143752925801042E-7	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990938204965	WITHOUT_CLASSIFICATION	9.061795034786742E-7	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999214396953	WITHOUT_CLASSIFICATION	7.856030470290894E-7	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999956807598	WITHOUT_CLASSIFICATION	4.3192401995474326E-8	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999997986105066	WITHOUT_CLASSIFICATION	2.0138949349154203E-7	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9992495535863848	WITHOUT_CLASSIFICATION	7.504464136152986E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999828905504763	WITHOUT_CLASSIFICATION	1.710944952372785E-5	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999997382101932	WITHOUT_CLASSIFICATION	2.6178980676524625E-7	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999496346541	WITHOUT_CLASSIFICATION	5.036534596741514E-8	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9999992265641237	WITHOUT_CLASSIFICATION	7.734358763578977E-7	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999999935894831	WITHOUT_CLASSIFICATION	6.410516836284799E-9	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999975844941048	WITHOUT_CLASSIFICATION	2.415505895199307E-6	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999828905504763	WITHOUT_CLASSIFICATION	1.710944952372785E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999828905504763	WITHOUT_CLASSIFICATION	1.710944952372785E-5	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.999994990399253	WITHOUT_CLASSIFICATION	5.009600747053067E-6	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.99999892600202	WITHOUT_CLASSIFICATION	1.0739979799419137E-6	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999400594877	WITHOUT_CLASSIFICATION	5.994051229483979E-8	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999988894835203	WITHOUT_CLASSIFICATION	1.1105164795772622E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999988670111295	WITHOUT_CLASSIFICATION	1.1329888704693071E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999988489994802	WITHOUT_CLASSIFICATION	1.1510005197660631E-6	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999833413332	WITHOUT_CLASSIFICATION	1.6658666772062342E-8	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999951449566418	WITHOUT_CLASSIFICATION	4.855043358197444E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999992178177449	WITHOUT_CLASSIFICATION	7.821822550856743E-7	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909051538614	WITHOUT_CLASSIFICATION	9.094846138648972E-6	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999964411897045	WITHOUT_CLASSIFICATION	3.558810295444848E-6	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689612171102	WITHOUT_CLASSIFICATION	3.1038782889725314E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999951862561633	WITHOUT_CLASSIFICATION	4.813743836715888E-6	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999951862561633	WITHOUT_CLASSIFICATION	4.813743836715888E-6	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999994605623374	WITHOUT_CLASSIFICATION	5.394376625319624E-7	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999994605623374	WITHOUT_CLASSIFICATION	5.394376625319624E-7	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968914910964	WITHOUT_CLASSIFICATION	3.1085089036497206E-6	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992226840115	WITHOUT_CLASSIFICATION	7.773159884945334E-6	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999962143351281	WITHOUT_CLASSIFICATION	3.7856648718265633E-6	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989209151319	WITHOUT_CLASSIFICATION	1.0790848681229182E-6	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999803576295315	WITHOUT_CLASSIFICATION	1.964237046845439E-5	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9997544104699924	WITHOUT_CLASSIFICATION	2.4558953000765056E-4	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998346606497021	WITHOUT_CLASSIFICATION	1.6533935029788558E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917161783557	WITHOUT_CLASSIFICATION	8.283821644212276E-6	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999992563351077	WITHOUT_CLASSIFICATION	7.43664892411983E-7	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999999701408299	WITHOUT_CLASSIFICATION	2.985917023383898E-8	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998598097039	WITHOUT_CLASSIFICATION	1.4019029616476403E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999977665073302	WITHOUT_CLASSIFICATION	2.233492669720311E-6	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999996007441169	WITHOUT_CLASSIFICATION	3.992558831162551E-7	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999996729866867	WITHOUT_CLASSIFICATION	3.2701331330074176E-7	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999987186925007	WITHOUT_CLASSIFICATION	1.2813074993101664E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999982322670838	WITHOUT_CLASSIFICATION	1.7677329160764068E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999982322670838	WITHOUT_CLASSIFICATION	1.7677329160764068E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999982322670838	WITHOUT_CLASSIFICATION	1.7677329160764068E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999731190575	WITHOUT_CLASSIFICATION	2.688094256156127E-8	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9999254589740311	WITHOUT_CLASSIFICATION	7.454102596896108E-5	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999983879637	WITHOUT_CLASSIFICATION	1.612036260726052E-9	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999101298752441	WITHOUT_CLASSIFICATION	8.987012475589846E-5	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983654440148	WITHOUT_CLASSIFICATION	1.6345559851470084E-6	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995307061014	WITHOUT_CLASSIFICATION	4.6929389865903467E-7	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999985101200567	WITHOUT_CLASSIFICATION	1.4898799434284633E-6	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996960118614693	WITHOUT_CLASSIFICATION	3.0398813853070627E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999993582650453	WITHOUT_CLASSIFICATION	6.417349547786237E-7	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999407582065	WITHOUT_CLASSIFICATION	5.924179346885766E-8	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999422561674	WITHOUT_CLASSIFICATION	5.7743832589799335E-8	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9986701425905887	WITHOUT_CLASSIFICATION	0.0013298574094112192	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401968256766	WITHOUT_CLASSIFICATION	5.980317432335438E-5	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999979750244551	WITHOUT_CLASSIFICATION	2.0249755449761977E-6	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999999396329596	WITHOUT_CLASSIFICATION	6.036704040275027E-7	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9985972333236733	WITHOUT_CLASSIFICATION	0.001402766676326691	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999612378102	WITHOUT_CLASSIFICATION	3.876218976391962E-8	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999893062975408	WITHOUT_CLASSIFICATION	1.0693702459159401E-5	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999893226921212	WITHOUT_CLASSIFICATION	1.0677307878825424E-5	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.999997111600844	WITHOUT_CLASSIFICATION	2.888399155989686E-6	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.999999994631974	WITHOUT_CLASSIFICATION	5.368026002703665E-9	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999758199594256	WITHOUT_CLASSIFICATION	2.4180040574375642E-5	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999958054275755	WITHOUT_CLASSIFICATION	4.194572424533384E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999981736601	WITHOUT_CLASSIFICATION	1.8263399556262781E-9	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999997587643853	WITHOUT_CLASSIFICATION	2.412356147446429E-7	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999932628251225	WITHOUT_CLASSIFICATION	6.737174877555921E-6	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999847898727835	WITHOUT_CLASSIFICATION	1.5210127216532403E-5	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999959490847417	WITHOUT_CLASSIFICATION	4.0509152583378015E-6	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999411296892	WITHOUT_CLASSIFICATION	5.887031090668193E-8	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999999646856417	WITHOUT_CLASSIFICATION	3.5314358308740514E-7	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9998859941391289	WITHOUT_CLASSIFICATION	1.1400586087104101E-4	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999976750916841	WITHOUT_CLASSIFICATION	2.324908315938818E-6	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998719735009662	WITHOUT_CLASSIFICATION	1.2802649903382557E-4	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999991557457961	WITHOUT_CLASSIFICATION	8.442542040076708E-7	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9996865958043837	WITHOUT_CLASSIFICATION	3.134041956163741E-4	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999918123814866	WITHOUT_CLASSIFICATION	8.187618513372419E-6	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999924429218977	WITHOUT_CLASSIFICATION	7.557078102342275E-6	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.999999673903425	WITHOUT_CLASSIFICATION	3.2609657498254456E-7	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999020092101	WITHOUT_CLASSIFICATION	9.799078999224361E-8	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999999016464788	WITHOUT_CLASSIFICATION	9.835352120899908E-8	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999988802747304	WITHOUT_CLASSIFICATION	1.1197252697154757E-6	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999995314215144	WITHOUT_CLASSIFICATION	4.6857848556334254E-7	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999349892139499	WITHOUT_CLASSIFICATION	6.501078605011194E-5	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999986496383192	WITHOUT_CLASSIFICATION	1.3503616807448926E-6	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999995051327583	WITHOUT_CLASSIFICATION	4.948672417097983E-7	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999853286491395	WITHOUT_CLASSIFICATION	1.4671350860478321E-5	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9999997739852718	WITHOUT_CLASSIFICATION	2.2601472806784043E-7	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999989459930467	WITHOUT_CLASSIFICATION	1.0540069531917773E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999784309404204	WITHOUT_CLASSIFICATION	2.156905957959913E-5	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999999236769647	WITHOUT_CLASSIFICATION	7.632303536266557E-8	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999995948898179	WITHOUT_CLASSIFICATION	4.0511018210499646E-6	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999915527155482	WITHOUT_CLASSIFICATION	8.447284451736045E-6	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999999730299121	WITHOUT_CLASSIFICATION	2.6970087889699656E-7	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997690398564512	WITHOUT_CLASSIFICATION	2.3096014354881712E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999979424306308	WITHOUT_CLASSIFICATION	2.0575693692265523E-6	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9999893739682754	WITHOUT_CLASSIFICATION	1.0626031724643426E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999992167568905	WITHOUT_CLASSIFICATION	7.832431095197582E-7	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999988891696651	WITHOUT_CLASSIFICATION	1.110830334964598E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999996441727359	WITHOUT_CLASSIFICATION	3.5582726403131915E-7	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.999999086956174	WITHOUT_CLASSIFICATION	9.130438260063654E-7	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999909214951745	WITHOUT_CLASSIFICATION	9.078504825522082E-6	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999854582649	WITHOUT_CLASSIFICATION	1.4541735237055043E-8	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999704080749	WITHOUT_CLASSIFICATION	2.959192506651817E-8	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999748663345	WITHOUT_CLASSIFICATION	2.513366550755046E-7	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999427145666	WITHOUT_CLASSIFICATION	5.7285433444134886E-8	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999971944255298	WITHOUT_CLASSIFICATION	2.8055744702980817E-6	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999995642889721	WITHOUT_CLASSIFICATION	4.357110279900112E-7	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999997934708315	WITHOUT_CLASSIFICATION	2.0652916860239417E-7	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999119592986767	WITHOUT_CLASSIFICATION	8.804070132339159E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999119592986767	WITHOUT_CLASSIFICATION	8.804070132339159E-5	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999999361272099	WITHOUT_CLASSIFICATION	6.38727900670456E-8	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999132408536	WITHOUT_CLASSIFICATION	8.675914646457554E-8	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999983544159704	WITHOUT_CLASSIFICATION	1.6455840295977918E-6	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999995565015767	WITHOUT_CLASSIFICATION	4.434984233227605E-7	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999859672307528	WITHOUT_CLASSIFICATION	1.4032769247131033E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999992028289082	WITHOUT_CLASSIFICATION	7.971710916629521E-7	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999953769681794	WITHOUT_CLASSIFICATION	4.623031820536538E-6	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999995530469745	WITHOUT_CLASSIFICATION	4.4695302536549093E-7	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999407015769805	WITHOUT_CLASSIFICATION	5.929842301942519E-5	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.999999991852972	WITHOUT_CLASSIFICATION	8.147028169780519E-9	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999998934491758	WITHOUT_CLASSIFICATION	1.0655082410777889E-7	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999988582055592	WITHOUT_CLASSIFICATION	1.1417944407554615E-6	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9999990939852104	WITHOUT_CLASSIFICATION	9.060147896588986E-7	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999991947173	WITHOUT_CLASSIFICATION	8.052826925361188E-9	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999986905919896	WITHOUT_CLASSIFICATION	1.3094080103873263E-6	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999986784154331	WITHOUT_CLASSIFICATION	1.3215845668256908E-6	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999998084822008	WITHOUT_CLASSIFICATION	1.9151779921041746E-7	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9994358831982758	WITHOUT_CLASSIFICATION	5.641168017241781E-4	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999903252857889	WITHOUT_CLASSIFICATION	9.67471421102071E-6	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999999891311393	WITHOUT_CLASSIFICATION	1.0868860641955539E-8	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999964199408259	WITHOUT_CLASSIFICATION	3.5800591741021494E-6	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999998559071157	WITHOUT_CLASSIFICATION	1.4409288428502592E-7	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999829466332718	WITHOUT_CLASSIFICATION	1.7053366728181284E-5	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999810429231741	WITHOUT_CLASSIFICATION	1.895707682582175E-5	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999995212372042	WITHOUT_CLASSIFICATION	4.787627958017992E-6	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999919133379311	WITHOUT_CLASSIFICATION	8.086662068908078E-6	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999994937818111	WITHOUT_CLASSIFICATION	5.062181888998345E-7	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999922580573399	WITHOUT_CLASSIFICATION	7.741942660044025E-6	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999990520158684	WITHOUT_CLASSIFICATION	9.479841317487407E-7	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999999990604382	WITHOUT_CLASSIFICATION	9.395617916610168E-9	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999997443974001	WITHOUT_CLASSIFICATION	2.556025999541593E-7	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999997551592174	WITHOUT_CLASSIFICATION	2.4484078265598106E-7	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999987233758771	WITHOUT_CLASSIFICATION	1.276624122789639E-6	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999962624695503	WITHOUT_CLASSIFICATION	3.7375304496235933E-6	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999964423096883	WITHOUT_CLASSIFICATION	3.5576903117798996E-6	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999964423096883	WITHOUT_CLASSIFICATION	3.5576903117798996E-6	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999985793025145	WITHOUT_CLASSIFICATION	1.420697485514997E-6	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999976665152387	WITHOUT_CLASSIFICATION	2.3334847613499392E-6	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999984945673754	WITHOUT_CLASSIFICATION	1.5054326246506674E-6	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999844529760323	WITHOUT_CLASSIFICATION	1.5547023967692623E-5	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999950253	WITHOUT_CLASSIFICATION	4.974742826070248E-12	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999862940700034	WITHOUT_CLASSIFICATION	1.3705929996488E-5	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999907059464831	WITHOUT_CLASSIFICATION	9.294053516845506E-6	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999864099665295	WITHOUT_CLASSIFICATION	1.3590033470389924E-5	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.999998942379893	WITHOUT_CLASSIFICATION	1.0576201069466342E-6	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998316224306897	WITHOUT_CLASSIFICATION	1.6837756931028293E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999996634232258	WITHOUT_CLASSIFICATION	3.3657677428184154E-7	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9997479967113555	WITHOUT_CLASSIFICATION	2.5200328864452445E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999985798905689	WITHOUT_CLASSIFICATION	1.420109431095804E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999935860847359	WITHOUT_CLASSIFICATION	6.413915264076945E-6	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999995285786223	WITHOUT_CLASSIFICATION	4.714213776922032E-6	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999997104267844	WITHOUT_CLASSIFICATION	2.895732156389604E-7	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9984494557075811	WITHOUT_CLASSIFICATION	0.0015505442924187822	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9984494557075811	WITHOUT_CLASSIFICATION	0.0015505442924187822	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999842542799905	WITHOUT_CLASSIFICATION	1.5745720009451318E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998560944857643	WITHOUT_CLASSIFICATION	1.439055142356656E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999976771903524	WITHOUT_CLASSIFICATION	2.3228096476408075E-6	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999758678735	WITHOUT_CLASSIFICATION	2.4132126538816846E-8	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999996426803285	WITHOUT_CLASSIFICATION	3.573196714630382E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999977665073302	WITHOUT_CLASSIFICATION	2.233492669720311E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992007629524434	WITHOUT_CLASSIFICATION	7.99237047556482E-4	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998616514133	WITHOUT_CLASSIFICATION	1.3834858670695087E-7	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999997963337791	WITHOUT_CLASSIFICATION	2.036662208168018E-7	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999995264695626	WITHOUT_CLASSIFICATION	4.735304374444561E-7	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.999999067026975	WITHOUT_CLASSIFICATION	9.329730249934211E-7	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.999999067026975	WITHOUT_CLASSIFICATION	9.329730249934211E-7	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999969733563446	WITHOUT_CLASSIFICATION	3.026643655350349E-6	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999987326993754	WITHOUT_CLASSIFICATION	1.267300624578834E-6	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999993598576052	WITHOUT_CLASSIFICATION	6.401423947594295E-7	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999993932396543	WITHOUT_CLASSIFICATION	6.067603456439982E-7	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999991449941804	WITHOUT_CLASSIFICATION	8.550058194818671E-7	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9942483052702644	WITHOUT_CLASSIFICATION	0.005751694729735608	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999997014918008	WITHOUT_CLASSIFICATION	2.9850819911574173E-7	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999996318881927	WITHOUT_CLASSIFICATION	3.681118072939268E-6	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999983675903346	WITHOUT_CLASSIFICATION	1.6324096655342066E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999524725186	WITHOUT_CLASSIFICATION	4.7527481467501224E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999915382234	WITHOUT_CLASSIFICATION	8.461776577427485E-9	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999837136116189	WITHOUT_CLASSIFICATION	1.628638838121686E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.998699409910085	WITHOUT_CLASSIFICATION	0.0013005900899150228	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999795533307315	WITHOUT_CLASSIFICATION	2.0446669268545447E-5	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999685345099	WITHOUT_CLASSIFICATION	3.1465490011926967E-8	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999989708055103	WITHOUT_CLASSIFICATION	1.0291944897073609E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999960299477474	WITHOUT_CLASSIFICATION	3.97005225257995E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999426688853	WITHOUT_CLASSIFICATION	5.7331114711134944E-8	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999976781422651	WITHOUT_CLASSIFICATION	2.3218577348628813E-6	DEFECT
by default	WITHOUT_CLASSIFICATION	0.999999692896817	WITHOUT_CLASSIFICATION	3.071031830785202E-7	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999906285956333	WITHOUT_CLASSIFICATION	9.371404366697055E-6	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999883005567846	WITHOUT_CLASSIFICATION	1.1699443215464063E-5	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999997997786452	WITHOUT_CLASSIFICATION	2.002213549124156E-7	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999999216750605	WITHOUT_CLASSIFICATION	7.832493949802471E-7	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999993504381036	WITHOUT_CLASSIFICATION	6.495618964125677E-7	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999990838320461	WITHOUT_CLASSIFICATION	9.16167953904369E-6	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999970689591478	WITHOUT_CLASSIFICATION	2.9310408521376995E-6	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999734919013885	WITHOUT_CLASSIFICATION	2.6508098611526365E-5	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999994831834998	WITHOUT_CLASSIFICATION	5.168165000322496E-7	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999999993194	WITHOUT_CLASSIFICATION	6.806225625645294E-13	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999991130580154	WITHOUT_CLASSIFICATION	8.869419845749969E-7	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996836270855	WITHOUT_CLASSIFICATION	3.1637291452629244E-7	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999945958079463	WITHOUT_CLASSIFICATION	5.404192053742048E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9999995725937293	WITHOUT_CLASSIFICATION	4.2740627079829346E-7	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9867902125834289	WITHOUT_CLASSIFICATION	0.013209787416571127	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.99999994015925	WITHOUT_CLASSIFICATION	5.984075001022466E-8	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999999785182287	WITHOUT_CLASSIFICATION	2.148177132002781E-8	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999819522204567	WITHOUT_CLASSIFICATION	1.804777954329426E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999932885687833	WITHOUT_CLASSIFICATION	6.711431216679417E-6	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999932885687833	WITHOUT_CLASSIFICATION	6.711431216679417E-6	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999660623384	WITHOUT_CLASSIFICATION	3.393766161976939E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998714168937	WITHOUT_CLASSIFICATION	1.2858310626391984E-7	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999776085473	WITHOUT_CLASSIFICATION	2.239145273060563E-8	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9999624372377305	WITHOUT_CLASSIFICATION	3.756276226942035E-5	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999986978363156	WITHOUT_CLASSIFICATION	1.3021636844103942E-5	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999985631484	WITHOUT_CLASSIFICATION	1.4368515866917136E-9	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999802338	WITHOUT_CLASSIFICATION	1.9766188979607016E-11	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999836350159207	WITHOUT_CLASSIFICATION	1.6364984079324984E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999660623384	WITHOUT_CLASSIFICATION	3.393766161976939E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998714168937	WITHOUT_CLASSIFICATION	1.2858310626391984E-7	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999991800739836	WITHOUT_CLASSIFICATION	8.199260163518131E-7	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999996612774886	WITHOUT_CLASSIFICATION	3.3872251138001605E-7	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999996096569786	WITHOUT_CLASSIFICATION	3.9034302146314246E-7	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999890173965624	WITHOUT_CLASSIFICATION	1.0982603437540121E-5	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999998452624379	WITHOUT_CLASSIFICATION	1.547375620853265E-7	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9993329766265698	WITHOUT_CLASSIFICATION	6.670233734302371E-4	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999879436944	WITHOUT_CLASSIFICATION	1.2056305603366946E-8	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999726582838675	WITHOUT_CLASSIFICATION	2.7341716132528987E-5	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999985775709994	WITHOUT_CLASSIFICATION	1.4224290004798659E-6	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9625207058082454	WITHOUT_CLASSIFICATION	0.03747929419175464	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999995724509	WITHOUT_CLASSIFICATION	4.2754905362023665E-10	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9625207058082454	WITHOUT_CLASSIFICATION	0.03747929419175464	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999772730257416	WITHOUT_CLASSIFICATION	2.2726974258396115E-5	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999998317568801	WITHOUT_CLASSIFICATION	1.6824311995683146E-7	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9997996199295774	WITHOUT_CLASSIFICATION	2.003800704225488E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999946195741	WITHOUT_CLASSIFICATION	5.380425903951905E-8	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9993658504818859	WITHOUT_CLASSIFICATION	6.341495181141907E-4	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999726582838675	WITHOUT_CLASSIFICATION	2.7341716132528987E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999726582838675	WITHOUT_CLASSIFICATION	2.7341716132528987E-5	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999900639810615	WITHOUT_CLASSIFICATION	9.936018938489763E-6	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999992343907855	WITHOUT_CLASSIFICATION	7.656092145853066E-7	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999991974192544	WITHOUT_CLASSIFICATION	8.025807455850372E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999950430272712	WITHOUT_CLASSIFICATION	4.956972728831338E-6	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999970846323941	WITHOUT_CLASSIFICATION	2.915367605923025E-6	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999965258259345	WITHOUT_CLASSIFICATION	3.474174065476917E-6	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999997336788126	WITHOUT_CLASSIFICATION	2.6632118747789227E-7	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999997773369197	WITHOUT_CLASSIFICATION	2.226630803775679E-7	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999494716403	WITHOUT_CLASSIFICATION	5.052835967631936E-8	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999813837527428	WITHOUT_CLASSIFICATION	1.8616247257128403E-5	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999978785178326	WITHOUT_CLASSIFICATION	2.121482167280502E-6	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999998886375147	WITHOUT_CLASSIFICATION	1.1136248529749073E-7	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999957226315607	WITHOUT_CLASSIFICATION	4.277368439317474E-6	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999932375781679	WITHOUT_CLASSIFICATION	6.76242183208664E-6	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999998649751756	WITHOUT_CLASSIFICATION	1.3502482449330199E-7	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999999518117572	WITHOUT_CLASSIFICATION	4.8188242858255835E-8	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999985407583762	WITHOUT_CLASSIFICATION	1.459241623790317E-6	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999986448872705	WITHOUT_CLASSIFICATION	1.3551127295497177E-6	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999994432222803	WITHOUT_CLASSIFICATION	5.567777196987695E-7	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999997207023359	WITHOUT_CLASSIFICATION	2.7929766400254196E-7	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9999926415165974	WITHOUT_CLASSIFICATION	7.358483402660648E-6	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999674615724	WITHOUT_CLASSIFICATION	3.2538427714545953E-8	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999976599996503	WITHOUT_CLASSIFICATION	2.3400003496606378E-6	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999989121766211	WITHOUT_CLASSIFICATION	1.0878233788966408E-6	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999700069302	WITHOUT_CLASSIFICATION	2.9993069866312054E-8	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999995976746354	WITHOUT_CLASSIFICATION	4.023253645450729E-7	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999892611860908	WITHOUT_CLASSIFICATION	1.0738813909207815E-5	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999995064960014	WITHOUT_CLASSIFICATION	4.935039985950492E-7	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998849950452162	WITHOUT_CLASSIFICATION	1.1500495478378987E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999997194236787	WITHOUT_CLASSIFICATION	2.805763212479288E-7	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999997606815368	WITHOUT_CLASSIFICATION	2.393184631546913E-7	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9988195498271772	WITHOUT_CLASSIFICATION	0.0011804501728227073	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999735058122801	WITHOUT_CLASSIFICATION	2.6494187719864976E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999997773369197	WITHOUT_CLASSIFICATION	2.226630803775679E-7	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9994287781841051	WITHOUT_CLASSIFICATION	5.712218158947826E-4	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999983656334972	WITHOUT_CLASSIFICATION	1.634366502866693E-6	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.991971241972215	WITHOUT_CLASSIFICATION	0.008028758027785049	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999997066162691	WITHOUT_CLASSIFICATION	2.9338373078691873E-7	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999993675246533	WITHOUT_CLASSIFICATION	6.324753465356485E-7	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999999689459	WITHOUT_CLASSIFICATION	3.105409986100556E-8	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999950430272712	WITHOUT_CLASSIFICATION	4.956972728831338E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999950430272712	WITHOUT_CLASSIFICATION	4.956972728831338E-6	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999999840927086	WITHOUT_CLASSIFICATION	1.590729144336088E-8	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999998224960426	WITHOUT_CLASSIFICATION	1.7750395753769615E-7	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9999942306243201	WITHOUT_CLASSIFICATION	5.769375679802312E-6	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999999497466036	WITHOUT_CLASSIFICATION	5.025339646924978E-8	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999949469692063	WITHOUT_CLASSIFICATION	5.053030793652308E-6	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9993239589760321	WITHOUT_CLASSIFICATION	6.760410239678818E-4	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9998371234096992	WITHOUT_CLASSIFICATION	1.628765903007551E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999993490664426	WITHOUT_CLASSIFICATION	6.509335573960481E-7	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999988058208461	WITHOUT_CLASSIFICATION	1.19417915391453E-6	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999996379927106	WITHOUT_CLASSIFICATION	3.620072894135977E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999984990348235	WITHOUT_CLASSIFICATION	1.500965176547235E-6	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999999818491105	WITHOUT_CLASSIFICATION	1.8150889505406776E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998783237307921	WITHOUT_CLASSIFICATION	1.2167626920782436E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999660623384	WITHOUT_CLASSIFICATION	3.393766161976939E-8	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999984990348235	WITHOUT_CLASSIFICATION	1.500965176547235E-6	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999999288490213	WITHOUT_CLASSIFICATION	7.11509787038104E-7	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999984638450162	WITHOUT_CLASSIFICATION	1.5361549838197478E-6	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999888783189733	WITHOUT_CLASSIFICATION	1.11216810267155E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9836421133447735	WITHOUT_CLASSIFICATION	0.01635788665522646	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998783237307921	WITHOUT_CLASSIFICATION	1.2167626920782436E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998292255866367	WITHOUT_CLASSIFICATION	1.7077441336335396E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999920937283121	WITHOUT_CLASSIFICATION	7.906271687935213E-6	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999796634448	WITHOUT_CLASSIFICATION	2.033655517242817E-8	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999618843255629	WITHOUT_CLASSIFICATION	3.811567443712479E-5	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999272576997981	WITHOUT_CLASSIFICATION	7.274230020201304E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999998886444396	WITHOUT_CLASSIFICATION	1.1135556053117772E-7	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999921853031241	WITHOUT_CLASSIFICATION	7.814696875925511E-6	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999869396503919	WITHOUT_CLASSIFICATION	1.3060349608185467E-5	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999996515541836	WITHOUT_CLASSIFICATION	3.4844581642883514E-7	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999999935966995	WITHOUT_CLASSIFICATION	6.403300502815191E-8	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9968042002800437	WITHOUT_CLASSIFICATION	0.003195799719956362	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999996917367019	WITHOUT_CLASSIFICATION	3.082632980995425E-7	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999984990348235	WITHOUT_CLASSIFICATION	1.500965176547235E-6	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998292255866367	WITHOUT_CLASSIFICATION	1.7077441336335396E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999796634448	WITHOUT_CLASSIFICATION	2.033655517242817E-8	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999911797590667	WITHOUT_CLASSIFICATION	8.820240933298659E-6	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999976699059353	WITHOUT_CLASSIFICATION	2.330094064738003E-6	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999994719691183	WITHOUT_CLASSIFICATION	5.280308817308758E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998783237307921	WITHOUT_CLASSIFICATION	1.2167626920782436E-4	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999548106686	WITHOUT_CLASSIFICATION	4.518933144209318E-8	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999925242206498	WITHOUT_CLASSIFICATION	7.475779350160291E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999052430146821	WITHOUT_CLASSIFICATION	9.475698531791637E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.999994483971682	WITHOUT_CLASSIFICATION	5.5160283180146255E-6	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999869396503919	WITHOUT_CLASSIFICATION	1.3060349608185467E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999999288490213	WITHOUT_CLASSIFICATION	7.11509787038104E-7	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.99998606092385	WITHOUT_CLASSIFICATION	1.3939076149940498E-5	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999998325435717	WITHOUT_CLASSIFICATION	1.6745642829717806E-6	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.999999704297311	WITHOUT_CLASSIFICATION	2.957026889407732E-7	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999998490461591	WITHOUT_CLASSIFICATION	1.509538408594106E-7	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999999536160005	WITHOUT_CLASSIFICATION	4.63839994701053E-8	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999999401399312	WITHOUT_CLASSIFICATION	5.986006881515802E-8	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999924814969947	WITHOUT_CLASSIFICATION	7.518503005334865E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999946195741	WITHOUT_CLASSIFICATION	5.380425903951905E-8	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999601582017	WITHOUT_CLASSIFICATION	3.984179833299661E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990686644877392	WITHOUT_CLASSIFICATION	9.31335512260789E-4	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999967508699	WITHOUT_CLASSIFICATION	3.249130083470854E-9	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9988135051873549	WITHOUT_CLASSIFICATION	0.001186494812645088	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999475381552488	WITHOUT_CLASSIFICATION	5.246184475123676E-5	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999965735733095	WITHOUT_CLASSIFICATION	3.4264266904668837E-6	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999968247632905	WITHOUT_CLASSIFICATION	3.1752367094821216E-6	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9999946765850091	WITHOUT_CLASSIFICATION	5.323414990884013E-6	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999177375668	WITHOUT_CLASSIFICATION	8.226243317581235E-8	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.999994483971682	WITHOUT_CLASSIFICATION	5.5160283180146255E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990686644877392	WITHOUT_CLASSIFICATION	9.31335512260789E-4	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999839176649528	WITHOUT_CLASSIFICATION	1.6082335047155282E-5	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9999931829305914	WITHOUT_CLASSIFICATION	6.817069408664853E-6	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999968936344024	WITHOUT_CLASSIFICATION	3.1063655975855234E-6	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999940806004732	WITHOUT_CLASSIFICATION	5.9193995267043E-6	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9999943116800337	WITHOUT_CLASSIFICATION	5.688319966334443E-6	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999497216007	WITHOUT_CLASSIFICATION	5.027839932591255E-8	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999865215292644	WITHOUT_CLASSIFICATION	1.3478470735591846E-5	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9993902373441287	WITHOUT_CLASSIFICATION	6.097626558714183E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999080795647404	WITHOUT_CLASSIFICATION	9.192043525965121E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9863193006071448	WITHOUT_CLASSIFICATION	0.013680699392855246	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999997506466078	WITHOUT_CLASSIFICATION	2.4935339212808797E-7	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999976461663969	WITHOUT_CLASSIFICATION	2.3538336030925543E-6	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999997947561281	WITHOUT_CLASSIFICATION	2.0524387196234517E-7	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.999995680314175	WITHOUT_CLASSIFICATION	4.319685825049253E-6	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999995619445172	WITHOUT_CLASSIFICATION	4.38055482825094E-7	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998582339023	WITHOUT_CLASSIFICATION	1.4176609780195696E-7	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999997358728229	WITHOUT_CLASSIFICATION	2.6412717719876766E-7	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999783931063	WITHOUT_CLASSIFICATION	2.1606893777357584E-8	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999998984386441	WITHOUT_CLASSIFICATION	1.0156135589483725E-7	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999941473674316	WITHOUT_CLASSIFICATION	5.8526325682782995E-6	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9999827657431655	WITHOUT_CLASSIFICATION	1.7234256834587806E-5	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999999031605736	WITHOUT_CLASSIFICATION	9.683942637818105E-8	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999996779080176	WITHOUT_CLASSIFICATION	3.2209198242769196E-7	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999275865961	WITHOUT_CLASSIFICATION	7.241340393551494E-8	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999991656144336	WITHOUT_CLASSIFICATION	8.343855664756672E-7	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.998107569175324	WITHOUT_CLASSIFICATION	0.001892430824676083	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999997860642002	WITHOUT_CLASSIFICATION	2.139357998008439E-6	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998069085332133	WITHOUT_CLASSIFICATION	1.9309146678669025E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998753621211504	WITHOUT_CLASSIFICATION	1.2463787884966216E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8072907715659325	WITHOUT_CLASSIFICATION	0.19270922843406743	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999988815020241	WITHOUT_CLASSIFICATION	1.1184979759107685E-5	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996280883572665	WITHOUT_CLASSIFICATION	3.7191164273356407E-4	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999994469831059	WITHOUT_CLASSIFICATION	5.530168939601668E-7	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997762324914	WITHOUT_CLASSIFICATION	2.2376750864432588E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999514191240433	WITHOUT_CLASSIFICATION	4.858087595673642E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999996784445387	WITHOUT_CLASSIFICATION	3.2155546125055597E-7	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998862915052	WITHOUT_CLASSIFICATION	1.1370849484968983E-7	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999942528057615	WITHOUT_CLASSIFICATION	5.747194238452707E-6	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999996784445387	WITHOUT_CLASSIFICATION	3.2155546125055597E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999514191240433	WITHOUT_CLASSIFICATION	4.858087595673642E-5	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998862915052	WITHOUT_CLASSIFICATION	1.1370849484968983E-7	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999994605035128	WITHOUT_CLASSIFICATION	5.394964872373403E-7	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999999291467359	WITHOUT_CLASSIFICATION	7.08532640840972E-8	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999721808636459	WITHOUT_CLASSIFICATION	2.7819136354054003E-5	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999828290758648	WITHOUT_CLASSIFICATION	1.7170924135289523E-5	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999641521871	WITHOUT_CLASSIFICATION	3.584781297799457E-8	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5553462207887511	WITHOUT_CLASSIFICATION	0.4446537792112489	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999662962931025	WITHOUT_CLASSIFICATION	3.3703706897515085E-5	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999952988714721	WITHOUT_CLASSIFICATION	4.7011285279553486E-6	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999995611057	WITHOUT_CLASSIFICATION	4.388943043421092E-10	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999356772884589	WITHOUT_CLASSIFICATION	6.432271154108668E-5	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.9999953217914788	WITHOUT_CLASSIFICATION	4.678208521212889E-6	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999992384711068	WITHOUT_CLASSIFICATION	7.61528893065548E-7	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997174478442944	WITHOUT_CLASSIFICATION	2.825521557056508E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999828290758648	WITHOUT_CLASSIFICATION	1.7170924135289523E-5	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996938974647	WITHOUT_CLASSIFICATION	3.061025353138643E-7	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999990255644567	WITHOUT_CLASSIFICATION	9.74435543178619E-7	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999985814355378	WITHOUT_CLASSIFICATION	1.4185644622323728E-6	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999288425471	WITHOUT_CLASSIFICATION	7.115745297769341E-8	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999999606530398	WITHOUT_CLASSIFICATION	3.934696021208165E-8	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999955268399	WITHOUT_CLASSIFICATION	4.4731600711182365E-9	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999958012843259	WITHOUT_CLASSIFICATION	4.198715674196368E-6	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999997434473	WITHOUT_CLASSIFICATION	2.565526708790851E-10	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999658680061724	WITHOUT_CLASSIFICATION	3.413199382766449E-5	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999768309821	WITHOUT_CLASSIFICATION	2.3169017845658206E-8	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999951666021	WITHOUT_CLASSIFICATION	4.833397969249074E-9	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999951666021	WITHOUT_CLASSIFICATION	4.833397969249074E-9	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999949324812	WITHOUT_CLASSIFICATION	5.067518802723833E-9	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999949324812	WITHOUT_CLASSIFICATION	5.067518802723833E-9	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9999863524264488	WITHOUT_CLASSIFICATION	1.3647573551111127E-5	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999985814355378	WITHOUT_CLASSIFICATION	1.4185644622323728E-6	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999999407533933	WITHOUT_CLASSIFICATION	5.9246606685457304E-8	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999992309777	WITHOUT_CLASSIFICATION	7.690223134500627E-10	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999853875302	WITHOUT_CLASSIFICATION	1.4612469775574021E-8	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999853875302	WITHOUT_CLASSIFICATION	1.4612469775574021E-8	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999990583431849	WITHOUT_CLASSIFICATION	9.416568151318265E-7	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999999932971005	WITHOUT_CLASSIFICATION	6.702899498056494E-8	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999990063558	WITHOUT_CLASSIFICATION	9.936441910310659E-10	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999998864119489	WITHOUT_CLASSIFICATION	1.135880511269373E-7	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9997684528097459	WITHOUT_CLASSIFICATION	2.315471902539613E-4	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9918801303382181	WITHOUT_CLASSIFICATION	0.008119869661781989	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999972622561598	WITHOUT_CLASSIFICATION	2.737743840169187E-6	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999314303931173	WITHOUT_CLASSIFICATION	6.856960688268592E-5	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999973928982914	WITHOUT_CLASSIFICATION	2.6071017085298503E-6	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999980614262883	WITHOUT_CLASSIFICATION	1.9385737116308854E-6	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.999998464346234	WITHOUT_CLASSIFICATION	1.53565376602462E-6	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.999999252598515	WITHOUT_CLASSIFICATION	7.474014849451847E-7	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999998116400594	WITHOUT_CLASSIFICATION	1.8835994064590275E-7	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999999419296293	WITHOUT_CLASSIFICATION	5.8070370668607874E-8	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999999669590482	WITHOUT_CLASSIFICATION	3.304095176003705E-8	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999996689375155	WITHOUT_CLASSIFICATION	3.310624845754915E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948937932439	WITHOUT_CLASSIFICATION	5.106206756115089E-6	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999990975667913	WITHOUT_CLASSIFICATION	9.024332086783211E-7	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999997967879175	WITHOUT_CLASSIFICATION	2.0321208248727054E-7	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999979988335902	WITHOUT_CLASSIFICATION	2.0011664098116363E-6	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999980200522346	WITHOUT_CLASSIFICATION	1.9799477654691638E-6	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999882809813789	WITHOUT_CLASSIFICATION	1.1719018621021326E-5	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999965242040182	WITHOUT_CLASSIFICATION	3.47579598181545E-6	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999997332763183	WITHOUT_CLASSIFICATION	2.667236816553182E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999700979030025	WITHOUT_CLASSIFICATION	2.990209699744535E-5	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999998354150311	WITHOUT_CLASSIFICATION	1.6458496890744594E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990686644877392	WITHOUT_CLASSIFICATION	9.31335512260789E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999976461663969	WITHOUT_CLASSIFICATION	2.3538336030925543E-6	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999983375774119	WITHOUT_CLASSIFICATION	1.6624225882166032E-6	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9996474497088966	WITHOUT_CLASSIFICATION	3.5255029110329585E-4	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911639640263	WITHOUT_CLASSIFICATION	8.83603597368558E-6	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815773392056	WITHOUT_CLASSIFICATION	1.8422660794504883E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999970955834677	WITHOUT_CLASSIFICATION	2.904416532218212E-6	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999970955834677	WITHOUT_CLASSIFICATION	2.904416532218212E-6	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999190670110185	WITHOUT_CLASSIFICATION	8.093298898152603E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999990252409225	WITHOUT_CLASSIFICATION	9.747590774839703E-7	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999058423419486	WITHOUT_CLASSIFICATION	9.415765805140726E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999058423419486	WITHOUT_CLASSIFICATION	9.415765805140726E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999537851380809	WITHOUT_CLASSIFICATION	4.62148619191468E-5	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999442054960755	WITHOUT_CLASSIFICATION	5.579450392438123E-5	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9999022358531187	WITHOUT_CLASSIFICATION	9.77641468813344E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999988670111295	WITHOUT_CLASSIFICATION	1.1329888704693071E-6	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999985966028369	WITHOUT_CLASSIFICATION	1.4033971630623202E-6	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999997503685021	WITHOUT_CLASSIFICATION	2.4963149789945923E-7	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999995409311712	WITHOUT_CLASSIFICATION	4.590688288114074E-7	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999951812832835	WITHOUT_CLASSIFICATION	4.818716716547845E-6	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999664608056007	WITHOUT_CLASSIFICATION	3.3539194399345605E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999664608056007	WITHOUT_CLASSIFICATION	3.3539194399345605E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999962012982035	WITHOUT_CLASSIFICATION	3.798701796422852E-6	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996532331209	WITHOUT_CLASSIFICATION	3.467668791326005E-7	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996532331209	WITHOUT_CLASSIFICATION	3.467668791326005E-7	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999878201371655	WITHOUT_CLASSIFICATION	1.2179862834462324E-5	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999996162468602	WITHOUT_CLASSIFICATION	3.837531398756379E-7	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9975470385374573	WITHOUT_CLASSIFICATION	0.0024529614625426743	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999991680463634	WITHOUT_CLASSIFICATION	8.319536367740967E-7	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999995899798819	WITHOUT_CLASSIFICATION	4.100201180794996E-7	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999458484023	WITHOUT_CLASSIFICATION	5.415159755867859E-8	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999998866162937	WITHOUT_CLASSIFICATION	1.1338370637780642E-7	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999995643595577	WITHOUT_CLASSIFICATION	4.3564044236021666E-7	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999823803223	WITHOUT_CLASSIFICATION	1.761967765325E-8	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9706107977985379	WITHOUT_CLASSIFICATION	0.029389202201462163	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997224382928	WITHOUT_CLASSIFICATION	2.775617072001563E-6	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999961036561971	WITHOUT_CLASSIFICATION	3.896343802894408E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99999874876894	WITHOUT_CLASSIFICATION	1.2512310599797974E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99999874876894	WITHOUT_CLASSIFICATION	1.2512310599797974E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99999874876894	WITHOUT_CLASSIFICATION	1.2512310599797974E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99999874876894	WITHOUT_CLASSIFICATION	1.2512310599797974E-6	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999951777497496	WITHOUT_CLASSIFICATION	4.822250250490153E-6	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.960288472733782	WITHOUT_CLASSIFICATION	0.03971152726621799	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999788459141385	WITHOUT_CLASSIFICATION	2.1154085861546146E-5	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999988783433459	WITHOUT_CLASSIFICATION	1.121656654042441E-6	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999375510575	WITHOUT_CLASSIFICATION	6.244894243478145E-8	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9997436867939264	WITHOUT_CLASSIFICATION	2.5631320607356146E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999977665073302	WITHOUT_CLASSIFICATION	2.233492669720311E-6	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999998978086124	WITHOUT_CLASSIFICATION	1.0219138759805266E-6	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.999995940732568	WITHOUT_CLASSIFICATION	4.0592674319093665E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999977665073302	WITHOUT_CLASSIFICATION	2.233492669720311E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999977665073302	WITHOUT_CLASSIFICATION	2.233492669720311E-6	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999590604957	WITHOUT_CLASSIFICATION	4.0939504328033105E-8	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999995983595225	WITHOUT_CLASSIFICATION	4.0164047763411446E-7	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999996723776065	WITHOUT_CLASSIFICATION	3.2762239347721706E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999975066542314	WITHOUT_CLASSIFICATION	2.493345768595768E-6	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999918093277814	WITHOUT_CLASSIFICATION	8.19067221853901E-6	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999993860239063	WITHOUT_CLASSIFICATION	6.139760937911985E-7	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999998408675199	WITHOUT_CLASSIFICATION	1.5913248013669128E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999975066542314	WITHOUT_CLASSIFICATION	2.493345768595768E-6	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999859779212656	WITHOUT_CLASSIFICATION	1.4022078734263897E-5	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999851158027254	WITHOUT_CLASSIFICATION	1.4884197274546825E-5	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999950074349885	WITHOUT_CLASSIFICATION	4.992565011497175E-6	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999923825271075	WITHOUT_CLASSIFICATION	7.617472892393307E-6	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999889168063747	WITHOUT_CLASSIFICATION	1.108319362525563E-5	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999655915297432	WITHOUT_CLASSIFICATION	3.440847025680853E-5	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999145488533	WITHOUT_CLASSIFICATION	8.54511467874187E-8	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999948454966039	WITHOUT_CLASSIFICATION	5.154503396219361E-6	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999094477576	WITHOUT_CLASSIFICATION	9.055224244960664E-8	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999997044285246	WITHOUT_CLASSIFICATION	2.955714753963335E-7	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999430904376	WITHOUT_CLASSIFICATION	5.690956239736379E-8	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998031528642	WITHOUT_CLASSIFICATION	1.9684713583361272E-7	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.997348586605785	WITHOUT_CLASSIFICATION	0.002651413394215076	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999794980117263	WITHOUT_CLASSIFICATION	2.050198827376765E-5	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999992001363188	WITHOUT_CLASSIFICATION	7.998636811321282E-7	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999968365984418	WITHOUT_CLASSIFICATION	3.163401558208972E-5	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999562011629	WITHOUT_CLASSIFICATION	4.379883712961622E-8	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999963141764332	WITHOUT_CLASSIFICATION	3.685823566850931E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999997827206861	WITHOUT_CLASSIFICATION	2.172793138484989E-7	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999963141764332	WITHOUT_CLASSIFICATION	3.685823566850931E-6	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999144995293	WITHOUT_CLASSIFICATION	8.550047077936107E-8	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999992858516135	WITHOUT_CLASSIFICATION	7.141483865618304E-7	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999988634372275	WITHOUT_CLASSIFICATION	1.1365627724715372E-6	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999513974697307	WITHOUT_CLASSIFICATION	4.8602530269337656E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999999256582592	WITHOUT_CLASSIFICATION	7.434174080410834E-8	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999992187260123	WITHOUT_CLASSIFICATION	7.81273987784822E-7	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999328869925	WITHOUT_CLASSIFICATION	6.711300746117985E-8	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999562011629	WITHOUT_CLASSIFICATION	4.379883712961622E-8	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999997827206861	WITHOUT_CLASSIFICATION	2.172793138484989E-7	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999144995293	WITHOUT_CLASSIFICATION	8.550047077936107E-8	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999690858481	WITHOUT_CLASSIFICATION	3.091415191382313E-8	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999743919408026	WITHOUT_CLASSIFICATION	2.560805919742338E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9999918920169529	WITHOUT_CLASSIFICATION	8.1079830470808E-6	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999822498148103	WITHOUT_CLASSIFICATION	1.7750185189716194E-5	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9999962984636039	WITHOUT_CLASSIFICATION	3.7015363959640523E-6	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9995790413094234	WITHOUT_CLASSIFICATION	4.2095869057653826E-4	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999819994762	WITHOUT_CLASSIFICATION	1.8000523885461492E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948937932439	WITHOUT_CLASSIFICATION	5.106206756115089E-6	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999992858516135	WITHOUT_CLASSIFICATION	7.141483865618304E-7	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999934507098649	WITHOUT_CLASSIFICATION	6.549290135120729E-6	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999886150176643	WITHOUT_CLASSIFICATION	1.1384982335652134E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998810573227297	WITHOUT_CLASSIFICATION	1.1894267727025144E-4	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999997971575904	WITHOUT_CLASSIFICATION	2.0284240963213872E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948937932439	WITHOUT_CLASSIFICATION	5.106206756115089E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990686644877392	WITHOUT_CLASSIFICATION	9.31335512260789E-4	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999841870352	WITHOUT_CLASSIFICATION	1.5812964820033162E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948937932439	WITHOUT_CLASSIFICATION	5.106206756115089E-6	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999988931538	WITHOUT_CLASSIFICATION	1.1068461226975067E-9	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994659075508	WITHOUT_CLASSIFICATION	5.340924491461221E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990686644877392	WITHOUT_CLASSIFICATION	9.31335512260789E-4	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9995298982503038	WITHOUT_CLASSIFICATION	4.7010174969626774E-4	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999693404655	WITHOUT_CLASSIFICATION	3.0659534444848557E-8	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997740385804	WITHOUT_CLASSIFICATION	2.2596141968600495E-7	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9999906122762244	WITHOUT_CLASSIFICATION	9.387723775595101E-6	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999734339444081	WITHOUT_CLASSIFICATION	2.6566055591932295E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999826422212856	WITHOUT_CLASSIFICATION	1.735777871433606E-5	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999994756444607	WITHOUT_CLASSIFICATION	5.243555393004697E-7	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999983892015035	WITHOUT_CLASSIFICATION	1.6107984965285148E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999119592986767	WITHOUT_CLASSIFICATION	8.804070132339159E-5	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999955745283401	WITHOUT_CLASSIFICATION	4.425471659891392E-6	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9975470385374573	WITHOUT_CLASSIFICATION	0.0024529614625426743	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.999996975325111	WITHOUT_CLASSIFICATION	3.0246748891360008E-6	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9874213349159352	WITHOUT_CLASSIFICATION	0.012578665084064864	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.999999201444308	WITHOUT_CLASSIFICATION	7.985556920292029E-7	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999942870136845	WITHOUT_CLASSIFICATION	5.712986315489165E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999999414087	WITHOUT_CLASSIFICATION	5.859130000521606E-7	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999996850703329	WITHOUT_CLASSIFICATION	3.1492966718413335E-7	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999303530572939	WITHOUT_CLASSIFICATION	6.964694270609636E-5	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999696790329561	WITHOUT_CLASSIFICATION	3.0320967044026607E-5	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999884074626	WITHOUT_CLASSIFICATION	1.1592537444002403E-8	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999960787508656	WITHOUT_CLASSIFICATION	3.9212491343688045E-6	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9974951078373323	WITHOUT_CLASSIFICATION	0.002504892162667595	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9957810531931568	WITHOUT_CLASSIFICATION	0.004218946806843292	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9988251864564746	WITHOUT_CLASSIFICATION	0.0011748135435255102	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999998961538885	WITHOUT_CLASSIFICATION	1.0384611151215422E-7	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999991100557097	WITHOUT_CLASSIFICATION	8.899442903428301E-7	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999867117346073	WITHOUT_CLASSIFICATION	1.3288265392599775E-5	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999981733428036	WITHOUT_CLASSIFICATION	1.8266571963786156E-6	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999987959107518	WITHOUT_CLASSIFICATION	1.2040892481262744E-6	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999987484436019	WITHOUT_CLASSIFICATION	1.2515563980384852E-6	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999994452310859	WITHOUT_CLASSIFICATION	5.547689141712571E-7	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9997875709991185	WITHOUT_CLASSIFICATION	2.1242900088146863E-4	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9987296176127964	WITHOUT_CLASSIFICATION	0.0012703823872036398	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997572880379	WITHOUT_CLASSIFICATION	2.4271196215522784E-7	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999897971932533	WITHOUT_CLASSIFICATION	1.0202806746656454E-5	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.999999842852645	WITHOUT_CLASSIFICATION	1.571473550041441E-7	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999727574951477	WITHOUT_CLASSIFICATION	2.7242504852204324E-5	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999824428062816	WITHOUT_CLASSIFICATION	1.7557193718431366E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9807519175123453	WITHOUT_CLASSIFICATION	0.01924808248765476	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995660561326	WITHOUT_CLASSIFICATION	4.3394386743869867E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990686644877392	WITHOUT_CLASSIFICATION	9.31335512260789E-4	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999953982436232	WITHOUT_CLASSIFICATION	4.601756376902574E-6	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.999986703809159	WITHOUT_CLASSIFICATION	1.3296190840967174E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.999986703809159	WITHOUT_CLASSIFICATION	1.3296190840967174E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999990265420274	WITHOUT_CLASSIFICATION	9.734579725720825E-7	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999826422212856	WITHOUT_CLASSIFICATION	1.735777871433606E-5	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999607568871492	WITHOUT_CLASSIFICATION	3.9243112850753756E-5	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999772553436	WITHOUT_CLASSIFICATION	2.2744656375231336E-8	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9985661699723515	WITHOUT_CLASSIFICATION	0.0014338300276486207	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999859293403176	WITHOUT_CLASSIFICATION	1.4070659682358304E-5	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9999938396537363	WITHOUT_CLASSIFICATION	6.160346263568728E-6	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999907918489422	WITHOUT_CLASSIFICATION	9.208151057672202E-6	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999936380554891	WITHOUT_CLASSIFICATION	6.3619445109879165E-6	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999577688488	WITHOUT_CLASSIFICATION	4.2231151156131487E-8	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999980029855965	WITHOUT_CLASSIFICATION	1.997014403577245E-6	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999983691420098	WITHOUT_CLASSIFICATION	1.6308579902932487E-6	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999452733859	WITHOUT_CLASSIFICATION	5.472661417822042E-8	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999618923108	WITHOUT_CLASSIFICATION	3.810768922301021E-8	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999999976497961	WITHOUT_CLASSIFICATION	2.350203904699577E-8	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999932775769	WITHOUT_CLASSIFICATION	6.722422991694218E-9	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997539493026	WITHOUT_CLASSIFICATION	2.4605069729020047E-7	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999882256605	WITHOUT_CLASSIFICATION	1.1774339471044125E-8	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999894327664	WITHOUT_CLASSIFICATION	1.0567233602367692E-8	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999985883203512	WITHOUT_CLASSIFICATION	1.4116796489390369E-6	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999995285929865	WITHOUT_CLASSIFICATION	4.7140701344941776E-7	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999600946546142	WITHOUT_CLASSIFICATION	3.990534538572023E-5	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999975923020931	WITHOUT_CLASSIFICATION	2.4076979069941796E-6	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999896321125396	WITHOUT_CLASSIFICATION	1.0367887460516178E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9807519175123453	WITHOUT_CLASSIFICATION	0.01924808248765476	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999995707043278	WITHOUT_CLASSIFICATION	4.292956722019182E-6	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999916466867302	WITHOUT_CLASSIFICATION	8.353313269724827E-6	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999995676672911	WITHOUT_CLASSIFICATION	4.323327088842773E-7	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999930563231013	WITHOUT_CLASSIFICATION	6.943676898747673E-6	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9957003748956637	WITHOUT_CLASSIFICATION	0.004299625104336329	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999950329882423	WITHOUT_CLASSIFICATION	4.967011757696862E-6	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999963515432271	WITHOUT_CLASSIFICATION	3.6484567728550855E-6	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999997280409274	WITHOUT_CLASSIFICATION	2.7195907268785807E-7	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999997138955937	WITHOUT_CLASSIFICATION	2.8610440632961466E-7	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999959842998	WITHOUT_CLASSIFICATION	4.015700246692226E-9	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999998650380766	WITHOUT_CLASSIFICATION	1.3496192340604151E-6	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999996650073052	WITHOUT_CLASSIFICATION	3.349926948512069E-7	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999979339855958	WITHOUT_CLASSIFICATION	2.066014404239009E-6	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9986631659391015	WITHOUT_CLASSIFICATION	0.0013368340608985055	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9923354161461422	WITHOUT_CLASSIFICATION	0.007664583853857809	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999715449432	WITHOUT_CLASSIFICATION	2.845505674211307E-8	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999715449432	WITHOUT_CLASSIFICATION	2.845505674211307E-8	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999751998601293	WITHOUT_CLASSIFICATION	2.480013987070849E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999949949792	WITHOUT_CLASSIFICATION	5.005020765047154E-9	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999909661670795	WITHOUT_CLASSIFICATION	9.033832920496348E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999909661670795	WITHOUT_CLASSIFICATION	9.033832920496348E-5	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999999865547986	WITHOUT_CLASSIFICATION	1.344520141969997E-8	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999699812607372	WITHOUT_CLASSIFICATION	3.0018739262668584E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.99998610399125	WITHOUT_CLASSIFICATION	1.3896008749985237E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999961235546	WITHOUT_CLASSIFICATION	3.876445294031551E-9	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999949222319935	WITHOUT_CLASSIFICATION	5.077768006572549E-6	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999931174188389	WITHOUT_CLASSIFICATION	6.882581161120564E-6	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999994635263575	WITHOUT_CLASSIFICATION	5.364736425890051E-7	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999994635263575	WITHOUT_CLASSIFICATION	5.364736425890051E-7	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999946517316106	WITHOUT_CLASSIFICATION	5.348268389392143E-6	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999981021707126	WITHOUT_CLASSIFICATION	1.8978292873914005E-6	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999999034616773	WITHOUT_CLASSIFICATION	9.653832265346083E-8	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999664160184972	WITHOUT_CLASSIFICATION	3.3583981502687495E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999664160184972	WITHOUT_CLASSIFICATION	3.3583981502687495E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9999987970142599	WITHOUT_CLASSIFICATION	1.2029857402044838E-6	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999921995153896	WITHOUT_CLASSIFICATION	7.800484610429329E-6	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9990919439743862	WITHOUT_CLASSIFICATION	9.080560256139155E-4	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999999321196809	WITHOUT_CLASSIFICATION	6.788031916424659E-8	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999968905788744	WITHOUT_CLASSIFICATION	3.1094211255132792E-6	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999534730062	WITHOUT_CLASSIFICATION	4.652699389755781E-8	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999932141418767	WITHOUT_CLASSIFICATION	6.785858123285248E-6	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999998122444915	WITHOUT_CLASSIFICATION	1.8775550842478694E-7	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999951784131	WITHOUT_CLASSIFICATION	4.8215869430743145E-9	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.999996905661509	WITHOUT_CLASSIFICATION	3.094338491091662E-6	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999969216544	WITHOUT_CLASSIFICATION	3.078345438493942E-9	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9997563026308897	WITHOUT_CLASSIFICATION	2.436973691102739E-4	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999996800469692	WITHOUT_CLASSIFICATION	3.1995303084734056E-7	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999717720349274	WITHOUT_CLASSIFICATION	2.822796507261051E-4	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999995325806427	WITHOUT_CLASSIFICATION	4.674193573271585E-7	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999937287427639	WITHOUT_CLASSIFICATION	6.271257236047505E-6	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999045212457	WITHOUT_CLASSIFICATION	9.547875437890956E-8	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999999231928316	WITHOUT_CLASSIFICATION	7.680716841116045E-7	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999169765723938	WITHOUT_CLASSIFICATION	8.30234276062992E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998881954780946	WITHOUT_CLASSIFICATION	1.1180452190542754E-4	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9997260074568829	WITHOUT_CLASSIFICATION	2.7399254311716146E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999987106021835	WITHOUT_CLASSIFICATION	1.2893978164987665E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999998428919484	WITHOUT_CLASSIFICATION	1.5710805164047735E-7	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999976847675178	WITHOUT_CLASSIFICATION	2.315232482055863E-6	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999995752853343	WITHOUT_CLASSIFICATION	4.2471466566698866E-7	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.999996742443728	WITHOUT_CLASSIFICATION	3.257556271935756E-6	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999988769294432	WITHOUT_CLASSIFICATION	1.1230705567756258E-6	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999357958665379	WITHOUT_CLASSIFICATION	6.420413346205876E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999996855559	WITHOUT_CLASSIFICATION	3.144441724272809E-10	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997340707706	WITHOUT_CLASSIFICATION	2.6592922936854087E-7	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9794368324610797	WITHOUT_CLASSIFICATION	0.020563167538920256	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999999866822234	WITHOUT_CLASSIFICATION	1.3317776612272833E-7	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998956710489	WITHOUT_CLASSIFICATION	1.043289511260706E-7	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999939080882323	WITHOUT_CLASSIFICATION	6.091911767766214E-6	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999996386452727	WITHOUT_CLASSIFICATION	3.613547272890121E-7	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999543581522317	WITHOUT_CLASSIFICATION	4.564184776841883E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9999947950875754	WITHOUT_CLASSIFICATION	5.204912424593719E-6	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999995633458976	WITHOUT_CLASSIFICATION	4.3665410249250666E-7	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999950066524738	WITHOUT_CLASSIFICATION	4.993347526217602E-6	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996255519695	WITHOUT_CLASSIFICATION	3.744480305183907E-7	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998134863713538	WITHOUT_CLASSIFICATION	1.8651362864616843E-4	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9995148457098928	WITHOUT_CLASSIFICATION	4.8515429010713375E-4	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9999983269003375	WITHOUT_CLASSIFICATION	1.6730996625639636E-6	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999995752349173	WITHOUT_CLASSIFICATION	4.2476508271249316E-7	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999995855870716	WITHOUT_CLASSIFICATION	4.1441292841580577E-7	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999983669809136	WITHOUT_CLASSIFICATION	1.6330190864727692E-6	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9996469312707177	WITHOUT_CLASSIFICATION	3.530687292823285E-4	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999991159904124	WITHOUT_CLASSIFICATION	8.84009587612616E-7	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999872963051635	WITHOUT_CLASSIFICATION	1.2703694836594166E-5	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999582290805	WITHOUT_CLASSIFICATION	4.177091957179641E-8	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9994467763988314	WITHOUT_CLASSIFICATION	5.532236011686103E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999998434532626	WITHOUT_CLASSIFICATION	1.565467374064639E-7	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999408317057	WITHOUT_CLASSIFICATION	5.9168294337760163E-8	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999735602301	WITHOUT_CLASSIFICATION	2.6439769923036416E-8	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999545365301464	WITHOUT_CLASSIFICATION	4.546346985363055E-5	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999974297963486	WITHOUT_CLASSIFICATION	2.570203651402126E-6	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.999730440676912	WITHOUT_CLASSIFICATION	2.695593230880216E-4	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999991970444577	WITHOUT_CLASSIFICATION	8.029555423201739E-7	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999634316607204	WITHOUT_CLASSIFICATION	3.656833927959134E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.999999770783233	WITHOUT_CLASSIFICATION	2.29216766947599E-7	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999887772326295	WITHOUT_CLASSIFICATION	1.1222767370578781E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999887772326295	WITHOUT_CLASSIFICATION	1.1222767370578781E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999947496799	WITHOUT_CLASSIFICATION	5.250320081154172E-9	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999983181689399	WITHOUT_CLASSIFICATION	1.6818310600493028E-6	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999996838903	WITHOUT_CLASSIFICATION	3.161096933435706E-10	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999999994085072	WITHOUT_CLASSIFICATION	5.914927956065423E-9	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999922894121193	WITHOUT_CLASSIFICATION	7.710587880815647E-6	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999993926826397	WITHOUT_CLASSIFICATION	6.073173603201327E-7	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999529516563	WITHOUT_CLASSIFICATION	4.704834355060585E-8	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999963908663	WITHOUT_CLASSIFICATION	3.609133724661074E-9	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999981104164737	WITHOUT_CLASSIFICATION	1.889583526313529E-6	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999912051414278	WITHOUT_CLASSIFICATION	8.794858572246333E-6	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999443128705838	WITHOUT_CLASSIFICATION	5.56871294162188E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999992292053205	WITHOUT_CLASSIFICATION	7.7079467950431E-6	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999998242287314	WITHOUT_CLASSIFICATION	1.7577126858820972E-6	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999999999911856	WITHOUT_CLASSIFICATION	8.814407584175918E-11	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999179847487	WITHOUT_CLASSIFICATION	8.201525125792441E-8	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999179847487	WITHOUT_CLASSIFICATION	8.201525125792441E-8	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999995780717708	WITHOUT_CLASSIFICATION	4.2192822925199887E-7	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995136492526447	WITHOUT_CLASSIFICATION	4.8635074735524787E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999855643993	WITHOUT_CLASSIFICATION	1.4435600641643726E-8	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999497601703	WITHOUT_CLASSIFICATION	5.0239829643102314E-8	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999666603735	WITHOUT_CLASSIFICATION	3.33396265232339E-8	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972239627881	WITHOUT_CLASSIFICATION	2.7760372118954927E-6	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999953826391	WITHOUT_CLASSIFICATION	4.617361013177547E-9	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9999959275410413	WITHOUT_CLASSIFICATION	4.0724589586867785E-6	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9869329927234941	WITHOUT_CLASSIFICATION	0.013067007276505763	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999998926395	WITHOUT_CLASSIFICATION	1.0736046341300622E-10	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999950934499529	WITHOUT_CLASSIFICATION	4.906550047151816E-6	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999872118663	WITHOUT_CLASSIFICATION	1.2788133740181936E-8	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999924990608	WITHOUT_CLASSIFICATION	7.500939207835481E-8	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999929593506	WITHOUT_CLASSIFICATION	7.04064935098593E-9	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999307703545	WITHOUT_CLASSIFICATION	6.92296454841593E-8	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999966276546597	WITHOUT_CLASSIFICATION	3.3723453402608646E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999212958825571	WITHOUT_CLASSIFICATION	7.87041174429722E-5	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998414473245	WITHOUT_CLASSIFICATION	1.5855267556860969E-7	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999993848244731	WITHOUT_CLASSIFICATION	6.151755268646996E-7	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999622776077	WITHOUT_CLASSIFICATION	3.772239229834355E-8	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999985931064	WITHOUT_CLASSIFICATION	1.406893604615983E-9	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999801800027	WITHOUT_CLASSIFICATION	1.9819997289231136E-8	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999977107631699	WITHOUT_CLASSIFICATION	2.289236830029372E-6	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999018513008	WITHOUT_CLASSIFICATION	9.814869915465748E-8	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998249506176	WITHOUT_CLASSIFICATION	1.750493824363966E-7	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9999993778004018	WITHOUT_CLASSIFICATION	6.221995982204848E-7	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996664317381746	WITHOUT_CLASSIFICATION	3.3356826182542355E-4	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999856979327107	WITHOUT_CLASSIFICATION	1.4302067289274451E-5	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999880297716348	WITHOUT_CLASSIFICATION	1.1970228365162645E-5	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999205303684814	WITHOUT_CLASSIFICATION	7.946963151860126E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999997118121764	WITHOUT_CLASSIFICATION	2.881878236155272E-7	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999998084858517	WITHOUT_CLASSIFICATION	1.915141482943604E-7	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.999997668368618	WITHOUT_CLASSIFICATION	2.3316313820315862E-6	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999720116517542	WITHOUT_CLASSIFICATION	2.7988348245879457E-5	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999994857276	WITHOUT_CLASSIFICATION	5.142723567861341E-10	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999977317254028	WITHOUT_CLASSIFICATION	2.268274597134599E-6	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999065762580919	WITHOUT_CLASSIFICATION	9.342374190806554E-5	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999992968638547	WITHOUT_CLASSIFICATION	7.031361452166862E-7	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998850156208	WITHOUT_CLASSIFICATION	1.1498437912680236E-7	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999111099278	WITHOUT_CLASSIFICATION	8.889007217647665E-8	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9987529437465517	WITHOUT_CLASSIFICATION	0.0012470562534483733	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999822384689693	WITHOUT_CLASSIFICATION	1.7761531030786487E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9988368984486837	WITHOUT_CLASSIFICATION	0.0011631015513162556	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9988368984486837	WITHOUT_CLASSIFICATION	0.0011631015513162556	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999944975397	WITHOUT_CLASSIFICATION	5.502460249459309E-9	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9997946746598	WITHOUT_CLASSIFICATION	2.0532534019995316E-4	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999699134764669	WITHOUT_CLASSIFICATION	3.0086523533143388E-5	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998603509287921	WITHOUT_CLASSIFICATION	1.39649071207959E-4	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999977812521955	WITHOUT_CLASSIFICATION	2.2187478046032423E-6	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999998473929507	WITHOUT_CLASSIFICATION	1.5260704940923868E-7	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998524172034476	WITHOUT_CLASSIFICATION	1.4758279655233952E-4	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999729738608	WITHOUT_CLASSIFICATION	2.7026139228028007E-8	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9930788171581353	WITHOUT_CLASSIFICATION	0.006921182841864743	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992856725314	WITHOUT_CLASSIFICATION	7.143274686365479E-7	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998210337354	WITHOUT_CLASSIFICATION	1.7896626458521842E-7	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999828905504763	WITHOUT_CLASSIFICATION	1.710944952372785E-5	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999961585338984	WITHOUT_CLASSIFICATION	3.841466101539224E-6	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999912618239	WITHOUT_CLASSIFICATION	8.738176184342603E-9	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999990606924808	WITHOUT_CLASSIFICATION	9.393075192769569E-7	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.999999006832242	WITHOUT_CLASSIFICATION	9.93167758091317E-7	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9998276713869653	WITHOUT_CLASSIFICATION	1.723286130348161E-4	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999977500580882	WITHOUT_CLASSIFICATION	2.249941911708536E-6	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999406019621	WITHOUT_CLASSIFICATION	5.939803799956907E-8	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9994960514050131	WITHOUT_CLASSIFICATION	5.039485949869048E-4	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999954211982538	WITHOUT_CLASSIFICATION	4.5788017462045765E-6	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9993004835404717	WITHOUT_CLASSIFICATION	6.995164595282883E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999991562937147	WITHOUT_CLASSIFICATION	8.437062852237592E-7	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999996357232	WITHOUT_CLASSIFICATION	3.642767820994928E-10	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999992017491497	WITHOUT_CLASSIFICATION	7.982508502057032E-7	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999744092517332	WITHOUT_CLASSIFICATION	2.559074826690298E-5	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999802364481228	WITHOUT_CLASSIFICATION	1.9763551877206562E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999958128508729	WITHOUT_CLASSIFICATION	4.187149127074053E-6	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999988771783811	WITHOUT_CLASSIFICATION	1.1228216188630295E-6	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999995028024042	WITHOUT_CLASSIFICATION	4.971975957783815E-7	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.999923442178467	WITHOUT_CLASSIFICATION	7.655782153306691E-5	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999918036757	WITHOUT_CLASSIFICATION	8.196324345604623E-9	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999999585312195	WITHOUT_CLASSIFICATION	4.146878051021671E-7	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999711600458	WITHOUT_CLASSIFICATION	2.8839954321947156E-8	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999955887664058	WITHOUT_CLASSIFICATION	4.4112335941626506E-6	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999996294406	WITHOUT_CLASSIFICATION	3.7055934011148515E-10	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999973959198691	WITHOUT_CLASSIFICATION	2.6040801309266027E-6	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999931015636	WITHOUT_CLASSIFICATION	6.89843639084867E-9	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999986483812842	WITHOUT_CLASSIFICATION	1.3516187158077236E-6	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999993684652	WITHOUT_CLASSIFICATION	6.315348451509647E-10	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999999617213906	WITHOUT_CLASSIFICATION	3.827860941334127E-8	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999874498739219	WITHOUT_CLASSIFICATION	1.2550126078181568E-5	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999977232701167	WITHOUT_CLASSIFICATION	2.2767298834256783E-6	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9997405275689303	WITHOUT_CLASSIFICATION	2.594724310697126E-4	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999931097675	WITHOUT_CLASSIFICATION	6.8902325543535215E-9	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999989923751	WITHOUT_CLASSIFICATION	1.0076248960801211E-9	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999834505647	WITHOUT_CLASSIFICATION	1.654943528058898E-8	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.99989877560628	WITHOUT_CLASSIFICATION	1.0122439371992612E-4	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.999998319671938	WITHOUT_CLASSIFICATION	1.6803280620518426E-6	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999998242287314	WITHOUT_CLASSIFICATION	1.7577126858820972E-6	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999997847039274	WITHOUT_CLASSIFICATION	2.1529607265494244E-7	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999990871391	WITHOUT_CLASSIFICATION	9.12860871933906E-10	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999340154789471	WITHOUT_CLASSIFICATION	6.598452105293036E-5	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999924865576	WITHOUT_CLASSIFICATION	7.513442447733056E-9	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999942114506	WITHOUT_CLASSIFICATION	5.788549402441836E-9	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998880557670268	WITHOUT_CLASSIFICATION	1.1194423297322448E-4	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999653311188959	WITHOUT_CLASSIFICATION	3.466888110413225E-5	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9998844131439967	WITHOUT_CLASSIFICATION	1.1558685600331095E-4	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998598097039	WITHOUT_CLASSIFICATION	1.4019029616476403E-7	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996638241081574	WITHOUT_CLASSIFICATION	3.3617589184258565E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999995024061693	WITHOUT_CLASSIFICATION	4.975938306323699E-7	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999333431492397	WITHOUT_CLASSIFICATION	6.665685076033351E-5	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999995363125138	WITHOUT_CLASSIFICATION	4.6368748608834435E-7	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999958691348417	WITHOUT_CLASSIFICATION	4.130865158242328E-6	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999636269480652	WITHOUT_CLASSIFICATION	3.637305193485893E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999930465576	WITHOUT_CLASSIFICATION	6.953442396226607E-8	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999993431599469	WITHOUT_CLASSIFICATION	6.568400531448504E-7	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999966230409653	WITHOUT_CLASSIFICATION	3.3769590348281567E-6	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999997995256864	WITHOUT_CLASSIFICATION	2.0047431361975256E-7	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998637680850586	WITHOUT_CLASSIFICATION	1.3623191494131531E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999930465576	WITHOUT_CLASSIFICATION	6.953442396226607E-8	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9879196164450622	WITHOUT_CLASSIFICATION	0.012080383554937697	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999578130481414	WITHOUT_CLASSIFICATION	4.2186951858607165E-5	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999998755208	WITHOUT_CLASSIFICATION	1.2447915668801411E-10	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998680214633	WITHOUT_CLASSIFICATION	1.3197853656317273E-7	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999997107605652	WITHOUT_CLASSIFICATION	2.892394348188414E-7	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999913234172374	WITHOUT_CLASSIFICATION	8.676582762498654E-6	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999999946631	WITHOUT_CLASSIFICATION	5.3369014531383674E-11	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999528519956827	WITHOUT_CLASSIFICATION	4.714800431731318E-5	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999548375849	WITHOUT_CLASSIFICATION	4.516241516395822E-8	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9995067852755268	WITHOUT_CLASSIFICATION	4.93214724473281E-4	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999994833310047	WITHOUT_CLASSIFICATION	5.166689951988023E-7	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.999991501273811	WITHOUT_CLASSIFICATION	8.49872618904515E-6	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999948070434822	WITHOUT_CLASSIFICATION	5.192956517832118E-6	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999998816565141	WITHOUT_CLASSIFICATION	1.1834348590338264E-7	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999911426195828	WITHOUT_CLASSIFICATION	8.857380417171361E-6	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9997214792518611	WITHOUT_CLASSIFICATION	2.785207481389887E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999896321125396	WITHOUT_CLASSIFICATION	1.0367887460516178E-5	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999999892301164	WITHOUT_CLASSIFICATION	1.0769883597524173E-7	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999581766814	WITHOUT_CLASSIFICATION	4.182331862095806E-8	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999921446915738	WITHOUT_CLASSIFICATION	7.855308426122219E-6	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.999500702028617	WITHOUT_CLASSIFICATION	4.992979713830656E-4	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999976117988	WITHOUT_CLASSIFICATION	2.388201244155848E-9	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999990792190495	WITHOUT_CLASSIFICATION	9.207809504593222E-7	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.999998214028974	WITHOUT_CLASSIFICATION	1.7859710259614236E-6	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999999992314	WITHOUT_CLASSIFICATION	7.685958576489633E-12	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999998438088514	WITHOUT_CLASSIFICATION	1.5619114859565094E-7	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999958293933279	WITHOUT_CLASSIFICATION	4.170606672080702E-6	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9928806440227915	WITHOUT_CLASSIFICATION	0.007119355977208454	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999612378102	WITHOUT_CLASSIFICATION	3.876218976391962E-8	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999822654561761	WITHOUT_CLASSIFICATION	1.773454382384357E-5	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.8496765474880444	WITHOUT_CLASSIFICATION	0.15032345251195559	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999998083808305	WITHOUT_CLASSIFICATION	1.916191695105851E-7	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999572771085402	WITHOUT_CLASSIFICATION	4.2722891459792553E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9900676254739886	WITHOUT_CLASSIFICATION	0.009932374526011308	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999967069254626	WITHOUT_CLASSIFICATION	3.2930745374783675E-6	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999962946802	WITHOUT_CLASSIFICATION	3.7053197770529677E-9	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999996419995	WITHOUT_CLASSIFICATION	3.5800048032128724E-9	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999772928367	WITHOUT_CLASSIFICATION	2.2707163296822677E-8	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999981631392989	WITHOUT_CLASSIFICATION	1.8368607010956031E-6	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999574614413	WITHOUT_CLASSIFICATION	4.2538558691338993E-8	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999995212372042	WITHOUT_CLASSIFICATION	4.787627958017992E-6	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999992294603125	WITHOUT_CLASSIFICATION	7.705396875628758E-7	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999992294603125	WITHOUT_CLASSIFICATION	7.705396875628758E-7	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999862940700034	WITHOUT_CLASSIFICATION	1.3705929996488E-5	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999996634232258	WITHOUT_CLASSIFICATION	3.3657677428184154E-7	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999758678735	WITHOUT_CLASSIFICATION	2.4132126538816846E-8	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.99999294455123	WITHOUT_CLASSIFICATION	7.055448769899532E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999988670111295	WITHOUT_CLASSIFICATION	1.1329888704693071E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999988670111295	WITHOUT_CLASSIFICATION	1.1329888704693071E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999726582838675	WITHOUT_CLASSIFICATION	2.7341716132528987E-5	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999948544723	WITHOUT_CLASSIFICATION	5.145527635834714E-9	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999996911240083	WITHOUT_CLASSIFICATION	3.0887599169647437E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999426688853	WITHOUT_CLASSIFICATION	5.7331114711134944E-8	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999999225113609	WITHOUT_CLASSIFICATION	7.748863909956503E-8	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999993504381036	WITHOUT_CLASSIFICATION	6.495618964125677E-7	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999581275848	WITHOUT_CLASSIFICATION	4.1872415239163765E-8	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999917137661701	WITHOUT_CLASSIFICATION	8.286233829871957E-6	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999976510752803	WITHOUT_CLASSIFICATION	2.3489247197762253E-6	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999999993366897	WITHOUT_CLASSIFICATION	6.633102992723396E-9	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999878510823488	WITHOUT_CLASSIFICATION	1.214891765135719E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996674643304	WITHOUT_CLASSIFICATION	3.3253566953010424E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996674643304	WITHOUT_CLASSIFICATION	3.3253566953010424E-7	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999988278495	WITHOUT_CLASSIFICATION	1.172150491702073E-9	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999869396503919	WITHOUT_CLASSIFICATION	1.3060349608185467E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999998886444396	WITHOUT_CLASSIFICATION	1.1135556053117772E-7	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999999888754396	WITHOUT_CLASSIFICATION	1.1124560316180562E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990686644877392	WITHOUT_CLASSIFICATION	9.31335512260789E-4	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999999985725573	WITHOUT_CLASSIFICATION	1.4274426886917199E-8	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999601582017	WITHOUT_CLASSIFICATION	3.984179833299661E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990686644877392	WITHOUT_CLASSIFICATION	9.31335512260789E-4	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999718968484	WITHOUT_CLASSIFICATION	2.8103151563811608E-8	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999480602174481	WITHOUT_CLASSIFICATION	5.1939782551882E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999944487565772	WITHOUT_CLASSIFICATION	5.55124342278963E-6	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999981533623	WITHOUT_CLASSIFICATION	1.84663782227506E-9	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9995067852755268	WITHOUT_CLASSIFICATION	4.93214724473281E-4	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999998054696015	WITHOUT_CLASSIFICATION	1.9453039835253564E-7	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9995563853473014	WITHOUT_CLASSIFICATION	4.4361465269856967E-4	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999972480384868	WITHOUT_CLASSIFICATION	2.7519615131562417E-6	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999997694247134	WITHOUT_CLASSIFICATION	2.3057528653576818E-7	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999993564477585	WITHOUT_CLASSIFICATION	6.435522415062965E-7	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999989224960318	WITHOUT_CLASSIFICATION	1.0775039682256992E-6	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999993846071771	WITHOUT_CLASSIFICATION	6.153928229797754E-7	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999999885730249	WITHOUT_CLASSIFICATION	1.1426975053907882E-8	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999944143256951	WITHOUT_CLASSIFICATION	5.585674304793233E-6	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9976262805753386	WITHOUT_CLASSIFICATION	0.002373719424661355	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9976262805753386	WITHOUT_CLASSIFICATION	0.002373719424661355	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999975066542314	WITHOUT_CLASSIFICATION	2.493345768595768E-6	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999979704908	WITHOUT_CLASSIFICATION	2.029509157116697E-9	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999977665073302	WITHOUT_CLASSIFICATION	2.233492669720311E-6	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999999377348269	WITHOUT_CLASSIFICATION	6.226517309022594E-7	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999998158367481	WITHOUT_CLASSIFICATION	1.8416325185354262E-7	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999997150492532	WITHOUT_CLASSIFICATION	2.8495074681198884E-7	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999992001363188	WITHOUT_CLASSIFICATION	7.998636811321282E-7	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999972433612072	WITHOUT_CLASSIFICATION	2.756638792700849E-6	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999690858481	WITHOUT_CLASSIFICATION	3.091415191382313E-8	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999993062493788	WITHOUT_CLASSIFICATION	6.937506210878583E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948937932439	WITHOUT_CLASSIFICATION	5.106206756115089E-6	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9609736941452293	WITHOUT_CLASSIFICATION	0.039026305854770786	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999997308102822	WITHOUT_CLASSIFICATION	2.69189717875431E-7	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999996635325434	WITHOUT_CLASSIFICATION	3.3646745655200166E-7	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999980827211928	WITHOUT_CLASSIFICATION	1.91727880706686E-6	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999606586345	WITHOUT_CLASSIFICATION	3.934136551544099E-8	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999685303176604	WITHOUT_CLASSIFICATION	3.146968233961405E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999994441012689	WITHOUT_CLASSIFICATION	5.558987311051067E-6	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9983163842600727	WITHOUT_CLASSIFICATION	0.0016836157399271804	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9935750044320897	WITHOUT_CLASSIFICATION	0.006424995567910281	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999957908818153	WITHOUT_CLASSIFICATION	4.209118184660616E-6	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.999999996062346	WITHOUT_CLASSIFICATION	3.937654026052011E-9	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9990919439743862	WITHOUT_CLASSIFICATION	9.080560256139155E-4	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999928460831	WITHOUT_CLASSIFICATION	7.1539169113189905E-9	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999985501419381	WITHOUT_CLASSIFICATION	1.4498580619034427E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999985501419381	WITHOUT_CLASSIFICATION	1.4498580619034427E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998995110358729	WITHOUT_CLASSIFICATION	1.0048896412697783E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999874614639336	WITHOUT_CLASSIFICATION	1.253853606639139E-4	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999996146247	WITHOUT_CLASSIFICATION	3.8537519051114767E-10	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999952850225636	WITHOUT_CLASSIFICATION	4.714977436349816E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999972366487025	WITHOUT_CLASSIFICATION	2.763351297459522E-6	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999534009337633	WITHOUT_CLASSIFICATION	4.6599066236665504E-5	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9745299741219641	WITHOUT_CLASSIFICATION	0.02547002587803595	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999933256565063	WITHOUT_CLASSIFICATION	6.67434349360828E-6	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.7806017665091933	WITHOUT_CLASSIFICATION	0.21939823349080675	DEFECT
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.8338498580288216	DEFECT	0.16615014197117836	WITHOUT_CLASSIFICATION
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.7336387364689398	DEFECT	0.26636126353106016	WITHOUT_CLASSIFICATION
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9289771762188601	DEFECT	0.07102282378113997	WITHOUT_CLASSIFICATION
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9999999410955116	WITHOUT_CLASSIFICATION	5.890448847046104E-8	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9994267659704822	WITHOUT_CLASSIFICATION	5.732340295177518E-4	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9563948610574398	DEFECT	0.0436051389425602	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.533492664396926	WITHOUT_CLASSIFICATION	0.46650733560307384	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.9988470036185507	DEFECT	0.001152996381449313	WITHOUT_CLASSIFICATION
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.6449799643071518	DEFECT	0.35502003569284823	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9196886697412004	DEFECT	0.08031133025879957	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9196886697412004	DEFECT	0.08031133025879957	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.988683046796802	WITHOUT_CLASSIFICATION	0.01131695320319794	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999919917404243	WITHOUT_CLASSIFICATION	8.008259575751959E-6	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9959942533495887	DEFECT	0.004005746650411271	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.9999600879325123	WITHOUT_CLASSIFICATION	3.991206748759555E-5	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9707188639130859	WITHOUT_CLASSIFICATION	0.029281136086914118	DEFECT
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.8510603065398928	WITHOUT_CLASSIFICATION	0.14893969346010727	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.8215204289027955	DEFECT	0.17847957109720441	WITHOUT_CLASSIFICATION
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.841072449470528	WITHOUT_CLASSIFICATION	0.15892755052947216	DEFECT
TODO: is this completely correct?	DEFECT	0.520750082498177	WITHOUT_CLASSIFICATION	0.47924991750182294	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.9870453491434821	DEFECT	0.01295465085651801	WITHOUT_CLASSIFICATION
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.7625190306961726	DEFECT	0.23748096930382742	WITHOUT_CLASSIFICATION
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9995401985525774	WITHOUT_CLASSIFICATION	4.5980144742269836E-4	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.9942531542337728	DEFECT	0.005746845766227163	WITHOUT_CLASSIFICATION
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9982139843956847	DEFECT	0.0017860156043153642	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9930575180197094	WITHOUT_CLASSIFICATION	0.006942481980290557	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.752190963368543	WITHOUT_CLASSIFICATION	0.24780903663145712	DEFECT
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8368296072579934	DEFECT	0.1631703927420065	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.6586884033330779	DEFECT	0.34131159666692207	WITHOUT_CLASSIFICATION
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.8468287776732952	DEFECT	0.1531712223267048	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9196886697412004	DEFECT	0.08031133025879957	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9999389115296435	DEFECT	6.108847035649931E-5	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.8190893219431137	WITHOUT_CLASSIFICATION	0.18091067805688626	DEFECT
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.5064819323597399	DEFECT	0.4935180676402599	WITHOUT_CLASSIFICATION
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9981757189481566	WITHOUT_CLASSIFICATION	0.0018242810518433314	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.999991693952748	WITHOUT_CLASSIFICATION	8.306047251951377E-6	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9966838772602881	WITHOUT_CLASSIFICATION	0.0033161227397118897	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9971934966720545	WITHOUT_CLASSIFICATION	0.002806503327945628	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.8214811904867161	DEFECT	0.1785188095132839	WITHOUT_CLASSIFICATION
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.8968973889302932	DEFECT	0.10310261106970679	WITHOUT_CLASSIFICATION
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9965508175140632	WITHOUT_CLASSIFICATION	0.0034491824859369385	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.9994070946513225	WITHOUT_CLASSIFICATION	5.929053486774053E-4	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.9755700668593341	DEFECT	0.024429933140665952	WITHOUT_CLASSIFICATION
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9995035700739897	WITHOUT_CLASSIFICATION	4.964299260103663E-4	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9492046763318243	WITHOUT_CLASSIFICATION	0.05079532366817567	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.9561490419593857	WITHOUT_CLASSIFICATION	0.043850958040614375	DEFECT
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.907609961154879	WITHOUT_CLASSIFICATION	0.09239003884512098	DEFECT
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.928213178772015	DEFECT	0.07178682122798499	WITHOUT_CLASSIFICATION
