//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999612372474	WITHOUT_CLASSIFICATION	3.876275261095894E-8	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999995771352743	WITHOUT_CLASSIFICATION	4.228647257101229E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999995771352743	WITHOUT_CLASSIFICATION	4.228647257101229E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999995771352743	WITHOUT_CLASSIFICATION	4.228647257101229E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999995771352743	WITHOUT_CLASSIFICATION	4.228647257101229E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999995771352743	WITHOUT_CLASSIFICATION	4.228647257101229E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999995771352743	WITHOUT_CLASSIFICATION	4.228647257101229E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999995771352743	WITHOUT_CLASSIFICATION	4.228647257101229E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999965234087189	WITHOUT_CLASSIFICATION	3.47659128098805E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999965234087189	WITHOUT_CLASSIFICATION	3.47659128098805E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999958079769289	WITHOUT_CLASSIFICATION	4.192023071061463E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.99999847599221	WITHOUT_CLASSIFICATION	1.5240077899188282E-6	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999999238175526	WITHOUT_CLASSIFICATION	7.618244739467658E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999896844822109	WITHOUT_CLASSIFICATION	1.0315517789056623E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999896844822109	WITHOUT_CLASSIFICATION	1.0315517789056623E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999719732648	WITHOUT_CLASSIFICATION	2.8026735194807015E-8	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999996324615157	WITHOUT_CLASSIFICATION	3.6753848429233128E-6	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999996004957404	WITHOUT_CLASSIFICATION	3.9950425950704963E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999974951421509	WITHOUT_CLASSIFICATION	2.5048578491161683E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999862443376788	WITHOUT_CLASSIFICATION	1.3755662321177142E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999862443376788	WITHOUT_CLASSIFICATION	1.3755662321177142E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9997006135761585	WITHOUT_CLASSIFICATION	2.9938642384153013E-4	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999992367344844	WITHOUT_CLASSIFICATION	7.632655155257978E-7	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9993359856820478	WITHOUT_CLASSIFICATION	6.64014317952143E-4	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999942703023986	WITHOUT_CLASSIFICATION	5.729697601300691E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999900497414	WITHOUT_CLASSIFICATION	9.950258583978283E-8	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.999996503970692	WITHOUT_CLASSIFICATION	3.496029308104003E-6	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999486626315	WITHOUT_CLASSIFICATION	5.1337368500057284E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999982841993063	WITHOUT_CLASSIFICATION	1.7158006937066694E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999998064968042	WITHOUT_CLASSIFICATION	1.9350319580197386E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9878390148436388	WITHOUT_CLASSIFICATION	0.012160985156361227	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999991392639282	WITHOUT_CLASSIFICATION	8.607360716557388E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.999998316449914	WITHOUT_CLASSIFICATION	1.6835500859193507E-6	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.99999889735171	WITHOUT_CLASSIFICATION	1.102648290025033E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999984726502653	WITHOUT_CLASSIFICATION	1.5273497346029462E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999984726502653	WITHOUT_CLASSIFICATION	1.5273497346029462E-6	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999969251071622	WITHOUT_CLASSIFICATION	3.0748928377467673E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999729123575252	WITHOUT_CLASSIFICATION	2.7087642474916143E-5	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999998889268438	WITHOUT_CLASSIFICATION	1.1107315616490056E-7	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999978669543269	WITHOUT_CLASSIFICATION	2.133045673107481E-6	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999984969242091	WITHOUT_CLASSIFICATION	1.5030757909505928E-6	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5251494685482343	WITHOUT_CLASSIFICATION	0.47485053145176576	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5251494685482343	WITHOUT_CLASSIFICATION	0.47485053145176576	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999980429279901	WITHOUT_CLASSIFICATION	1.9570720099599313E-6	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999824343652697	WITHOUT_CLASSIFICATION	1.7565634730361934E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999865140236	WITHOUT_CLASSIFICATION	1.348597642112437E-8	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999990870448594	WITHOUT_CLASSIFICATION	9.129551405494501E-7	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999910070760557	WITHOUT_CLASSIFICATION	8.992923944279393E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998309366969	WITHOUT_CLASSIFICATION	1.6906330310927791E-7	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976943574344	WITHOUT_CLASSIFICATION	2.3056425655966506E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999998411921857	WITHOUT_CLASSIFICATION	1.5880781430693806E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.999888874487328	WITHOUT_CLASSIFICATION	1.1112551267202681E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9455443483719437	WITHOUT_CLASSIFICATION	0.05445565162805626	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.999974299189271	WITHOUT_CLASSIFICATION	2.5700810728957852E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.999888874487328	WITHOUT_CLASSIFICATION	1.1112551267202681E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.999974299189271	WITHOUT_CLASSIFICATION	2.5700810728957852E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999951631076174	WITHOUT_CLASSIFICATION	4.836892382590094E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999960084086339	WITHOUT_CLASSIFICATION	3.991591366097694E-5	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999978931971757	WITHOUT_CLASSIFICATION	2.106802824237113E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999936741336236	WITHOUT_CLASSIFICATION	6.3258663763409425E-6	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999996503990012	WITHOUT_CLASSIFICATION	3.4960099874100525E-7	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999686373923	WITHOUT_CLASSIFICATION	3.136260774753383E-8	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999426272104236	WITHOUT_CLASSIFICATION	5.737278957634245E-5	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999633982841134	WITHOUT_CLASSIFICATION	3.660171588664274E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999966026863571	WITHOUT_CLASSIFICATION	3.3973136429256522E-6	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999997797895757	WITHOUT_CLASSIFICATION	2.20210424201502E-7	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999982198337076	WITHOUT_CLASSIFICATION	1.7801662923732953E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999880554038308	WITHOUT_CLASSIFICATION	1.1944596169155823E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999350540322	WITHOUT_CLASSIFICATION	6.49459677236366E-8	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999976089548048	WITHOUT_CLASSIFICATION	2.3910451952905147E-6	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999986266297132	WITHOUT_CLASSIFICATION	1.3733702867613313E-6	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999957364685782	WITHOUT_CLASSIFICATION	4.263531421801111E-5	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999994882525096	WITHOUT_CLASSIFICATION	5.117474904779445E-7	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999768657467798	WITHOUT_CLASSIFICATION	2.3134253220120398E-5	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999984389767858	WITHOUT_CLASSIFICATION	1.561023214283942E-6	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999993315193665	WITHOUT_CLASSIFICATION	6.684806335602834E-7	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999999410403767	WITHOUT_CLASSIFICATION	5.8959623355700517E-8	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999999079591	WITHOUT_CLASSIFICATION	9.204091355757681E-11	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999773276056	WITHOUT_CLASSIFICATION	2.2672394362866595E-8	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999958110175716	WITHOUT_CLASSIFICATION	4.1889824283958064E-5	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9998432787709207	WITHOUT_CLASSIFICATION	1.5672122907927407E-4	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999980701948956	WITHOUT_CLASSIFICATION	1.929805104469067E-6	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999922697648	WITHOUT_CLASSIFICATION	7.73023516793496E-9	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.999999938320659	WITHOUT_CLASSIFICATION	6.167934094473621E-8	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999242834517	WITHOUT_CLASSIFICATION	7.571654833663747E-8	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999847503855	WITHOUT_CLASSIFICATION	1.524961445648978E-8	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999999967239512	WITHOUT_CLASSIFICATION	3.276048803863945E-8	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999969627394	WITHOUT_CLASSIFICATION	3.0372605215001873E-9	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999996876012423	WITHOUT_CLASSIFICATION	3.1239875769915155E-6	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999213988886617	WITHOUT_CLASSIFICATION	7.86011113382962E-5	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999947160939969	WITHOUT_CLASSIFICATION	5.2839060030420274E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999536381394	WITHOUT_CLASSIFICATION	4.6361860596589263E-8	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999213988886617	WITHOUT_CLASSIFICATION	7.86011113382962E-5	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997936207478	WITHOUT_CLASSIFICATION	2.0637925222721565E-7	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999901170947266	WITHOUT_CLASSIFICATION	9.882905273382727E-6	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999896680560868	WITHOUT_CLASSIFICATION	1.0331943913206645E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999980480297312	WITHOUT_CLASSIFICATION	1.951970268666627E-6	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999327375838	WITHOUT_CLASSIFICATION	6.726241614100506E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999885260594084	WITHOUT_CLASSIFICATION	1.1473940591733752E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999885260594084	WITHOUT_CLASSIFICATION	1.1473940591733752E-5	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999764419420268	WITHOUT_CLASSIFICATION	2.355805797317793E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998588599469	WITHOUT_CLASSIFICATION	1.411400531977426E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999374982520844	WITHOUT_CLASSIFICATION	6.25017479155135E-5	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999949931307	WITHOUT_CLASSIFICATION	5.006869255473011E-9	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999991408864715	WITHOUT_CLASSIFICATION	8.591135286037102E-7	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999774679085	WITHOUT_CLASSIFICATION	2.2532091497032824E-8	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999979349806973	WITHOUT_CLASSIFICATION	2.0650193027335204E-6	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999956504353472	WITHOUT_CLASSIFICATION	4.3495646527807195E-6	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999286613985	WITHOUT_CLASSIFICATION	7.13386014951592E-8	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998674514935	WITHOUT_CLASSIFICATION	1.3254850651212571E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999878555732	WITHOUT_CLASSIFICATION	1.2144426697754479E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999878555732	WITHOUT_CLASSIFICATION	1.2144426697754479E-8	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998886933436285	WITHOUT_CLASSIFICATION	1.1130665637148384E-4	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999968185777319	WITHOUT_CLASSIFICATION	3.181422267996716E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999996160899959	WITHOUT_CLASSIFICATION	3.8391000411658743E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999878555732	WITHOUT_CLASSIFICATION	1.2144426697754479E-8	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998886933436285	WITHOUT_CLASSIFICATION	1.1130665637148384E-4	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998886933436285	WITHOUT_CLASSIFICATION	1.1130665637148384E-4	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999514991533	WITHOUT_CLASSIFICATION	4.850084667052068E-8	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999912605829256	WITHOUT_CLASSIFICATION	8.739417074331547E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999710205365464	WITHOUT_CLASSIFICATION	2.8979463453513493E-5	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999998389772823	WITHOUT_CLASSIFICATION	1.610227177895372E-7	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999767084547414	WITHOUT_CLASSIFICATION	2.329154525861767E-5	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999767084547414	WITHOUT_CLASSIFICATION	2.329154525861767E-5	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999994031104629	WITHOUT_CLASSIFICATION	5.968895371417403E-7	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999960827812607	WITHOUT_CLASSIFICATION	3.9172187393293305E-6	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999977412253414	WITHOUT_CLASSIFICATION	2.2587746586825473E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999994646736774	WITHOUT_CLASSIFICATION	5.353263226359184E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999994646736774	WITHOUT_CLASSIFICATION	5.353263226359184E-7	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999986340041312	WITHOUT_CLASSIFICATION	1.3659958687931023E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9996828007643532	WITHOUT_CLASSIFICATION	3.171992356467946E-4	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999850538990336	WITHOUT_CLASSIFICATION	1.4946100966421519E-5	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999998862791634	WITHOUT_CLASSIFICATION	1.1372083666654066E-7	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.999999978724384	WITHOUT_CLASSIFICATION	2.1275615988233685E-8	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999993592033992	WITHOUT_CLASSIFICATION	6.407966007976166E-7	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999217863563455	WITHOUT_CLASSIFICATION	7.821364365438485E-5	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999991787832228	WITHOUT_CLASSIFICATION	8.212167773372063E-7	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.999999713517017	WITHOUT_CLASSIFICATION	2.864829830215226E-7	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999850538990336	WITHOUT_CLASSIFICATION	1.4946100966421519E-5	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999289807146253	WITHOUT_CLASSIFICATION	7.101928537468114E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999934613325197	WITHOUT_CLASSIFICATION	6.538667480365118E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999934613325197	WITHOUT_CLASSIFICATION	6.538667480365118E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999986432618861	WITHOUT_CLASSIFICATION	1.3567381139104346E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999996670536406	WITHOUT_CLASSIFICATION	3.329463594619095E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999194879479509	WITHOUT_CLASSIFICATION	8.05120520490355E-5	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998825865476577	WITHOUT_CLASSIFICATION	1.1741345234226101E-4	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999998986639802	WITHOUT_CLASSIFICATION	1.0133601969995086E-7	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999691078744187	WITHOUT_CLASSIFICATION	3.089212558122508E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9994012772879904	WITHOUT_CLASSIFICATION	5.987227120095656E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999961900647	WITHOUT_CLASSIFICATION	3.80993521266603E-9	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997723736682	WITHOUT_CLASSIFICATION	2.2762633176159947E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997723736682	WITHOUT_CLASSIFICATION	2.2762633176159947E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981622329152	WITHOUT_CLASSIFICATION	1.8377670847451195E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999612372474	WITHOUT_CLASSIFICATION	3.876275261095894E-8	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999990259428517	WITHOUT_CLASSIFICATION	9.74057148346011E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999995771352743	WITHOUT_CLASSIFICATION	4.228647257101229E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999992147139649	WITHOUT_CLASSIFICATION	7.852860349508921E-7	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999965234087189	WITHOUT_CLASSIFICATION	3.47659128098805E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999998564473002	WITHOUT_CLASSIFICATION	1.4355269981530715E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999999361940793	WITHOUT_CLASSIFICATION	6.380592061378307E-8	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999284750885	WITHOUT_CLASSIFICATION	7.15249115576244E-8	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999995918370495	WITHOUT_CLASSIFICATION	4.081629504949247E-6	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9997853988632249	WITHOUT_CLASSIFICATION	2.1460113677513796E-4	DEFECT
// new	WITHOUT_CLASSIFICATION	0.99999099775309	WITHOUT_CLASSIFICATION	9.00224691007867E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999606955453557	WITHOUT_CLASSIFICATION	3.93044546442569E-5	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999989241429476	WITHOUT_CLASSIFICATION	1.075857052379782E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.99999847599221	WITHOUT_CLASSIFICATION	1.5240077899188282E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999973147490402	WITHOUT_CLASSIFICATION	2.6852509598865255E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999973147490402	WITHOUT_CLASSIFICATION	2.6852509598865255E-6	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999995304004998	WITHOUT_CLASSIFICATION	4.6959950010057855E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999947367954675	WITHOUT_CLASSIFICATION	5.263204532461694E-6	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999985315181434	WITHOUT_CLASSIFICATION	1.4684818565654665E-6	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999995873251813	WITHOUT_CLASSIFICATION	4.1267481866904497E-7	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.999999502451591	WITHOUT_CLASSIFICATION	4.975484090247112E-7	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999998686452957	WITHOUT_CLASSIFICATION	1.313547042710904E-7	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999896844822109	WITHOUT_CLASSIFICATION	1.0315517789056623E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999968647876931	WITHOUT_CLASSIFICATION	3.1352123068835075E-6	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999970060724656	WITHOUT_CLASSIFICATION	2.9939275344992094E-6	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999986503614237	WITHOUT_CLASSIFICATION	1.3496385763873244E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999991537030951	WITHOUT_CLASSIFICATION	8.462969049416103E-7	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999967362968751	WITHOUT_CLASSIFICATION	3.263703124829588E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999957774031593	WITHOUT_CLASSIFICATION	4.222596840714588E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999998752288825	WITHOUT_CLASSIFICATION	1.2477111763290868E-7	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999992972372893	WITHOUT_CLASSIFICATION	7.027627106407169E-7	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999991153640339	WITHOUT_CLASSIFICATION	8.84635966213451E-7	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999750699403462	WITHOUT_CLASSIFICATION	2.4930059653783087E-5	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999873780522276	WITHOUT_CLASSIFICATION	1.2621947772347322E-5	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999262386665	WITHOUT_CLASSIFICATION	7.376133342286616E-8	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999995771352743	WITHOUT_CLASSIFICATION	4.228647257101229E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999995771352743	WITHOUT_CLASSIFICATION	4.228647257101229E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999965234087189	WITHOUT_CLASSIFICATION	3.47659128098805E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999965234087189	WITHOUT_CLASSIFICATION	3.47659128098805E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999606955453557	WITHOUT_CLASSIFICATION	3.93044546442569E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999973147490402	WITHOUT_CLASSIFICATION	2.6852509598865255E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999998752288825	WITHOUT_CLASSIFICATION	1.2477111763290868E-7	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999719732648	WITHOUT_CLASSIFICATION	2.8026735194807015E-8	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999997353654154	WITHOUT_CLASSIFICATION	2.6463458456450957E-7	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999729008772099	WITHOUT_CLASSIFICATION	2.70991227900301E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999971532550305	WITHOUT_CLASSIFICATION	2.8467449695653663E-6	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999931097486074	WITHOUT_CLASSIFICATION	6.890251392541011E-6	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999963898193857	WITHOUT_CLASSIFICATION	3.610180614459474E-6	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999853686813317	WITHOUT_CLASSIFICATION	1.4631318668305468E-5	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998997803223538	WITHOUT_CLASSIFICATION	1.002196776461517E-4	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999055927886326	WITHOUT_CLASSIFICATION	9.440721136736383E-5	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999999642501549	WITHOUT_CLASSIFICATION	3.5749845148655936E-8	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999990735099749	WITHOUT_CLASSIFICATION	9.264900250740255E-7	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999990735099749	WITHOUT_CLASSIFICATION	9.264900250740255E-7	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999942726354	WITHOUT_CLASSIFICATION	5.727364516992805E-9	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999992564746237	WITHOUT_CLASSIFICATION	7.435253762884905E-7	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999891740260449	WITHOUT_CLASSIFICATION	1.08259739550653E-5	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999826230335471	WITHOUT_CLASSIFICATION	1.7376966452872423E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999958357148	WITHOUT_CLASSIFICATION	4.164285178981232E-9	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999996619056777	WITHOUT_CLASSIFICATION	3.3809432232632504E-7	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999998109694521	WITHOUT_CLASSIFICATION	1.8903054796494165E-7	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999996324615157	WITHOUT_CLASSIFICATION	3.6753848429233128E-6	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999882340686103	WITHOUT_CLASSIFICATION	1.1765931389619687E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999996583601479	WITHOUT_CLASSIFICATION	3.4163985213157797E-7	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999996583601479	WITHOUT_CLASSIFICATION	3.4163985213157797E-7	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999345457795	WITHOUT_CLASSIFICATION	6.545422044539199E-8	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999997161215517	WITHOUT_CLASSIFICATION	2.838784483840249E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999995795378152	WITHOUT_CLASSIFICATION	4.204621848132338E-7	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999848186145246	WITHOUT_CLASSIFICATION	1.5181385475287863E-5	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999860178849288	WITHOUT_CLASSIFICATION	1.3982115071332025E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999965234087189	WITHOUT_CLASSIFICATION	3.47659128098805E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999606955453557	WITHOUT_CLASSIFICATION	3.93044546442569E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.99999847599221	WITHOUT_CLASSIFICATION	1.5240077899188282E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999998752288825	WITHOUT_CLASSIFICATION	1.2477111763290868E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999998752288825	WITHOUT_CLASSIFICATION	1.2477111763290868E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999996276908003	WITHOUT_CLASSIFICATION	3.723091997072673E-6	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999996276908003	WITHOUT_CLASSIFICATION	3.723091997072673E-6	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999995438025082	WITHOUT_CLASSIFICATION	4.5619749188036414E-7	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999940996128361	WITHOUT_CLASSIFICATION	5.900387163803962E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999940996128361	WITHOUT_CLASSIFICATION	5.900387163803962E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999988036401612	WITHOUT_CLASSIFICATION	1.196359838711971E-6	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999975605793275	WITHOUT_CLASSIFICATION	2.439420672425004E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999995156893784	WITHOUT_CLASSIFICATION	4.843106216072989E-7	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999986336970897	WITHOUT_CLASSIFICATION	1.3663029102417592E-6	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9997289325573412	WITHOUT_CLASSIFICATION	2.7106744265877216E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999974951421509	WITHOUT_CLASSIFICATION	2.5048578491161683E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999974951421509	WITHOUT_CLASSIFICATION	2.5048578491161683E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999702609340179	WITHOUT_CLASSIFICATION	2.9739065982176016E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999984022652828	WITHOUT_CLASSIFICATION	1.5977347172404638E-6	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999984549120613	WITHOUT_CLASSIFICATION	1.5450879387653585E-6	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999959774038448	WITHOUT_CLASSIFICATION	4.022596155135535E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999986072536614	WITHOUT_CLASSIFICATION	1.3927463385651154E-6	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999953970465016	WITHOUT_CLASSIFICATION	4.6029534983517096E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999862443376788	WITHOUT_CLASSIFICATION	1.3755662321177142E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999782474389204	WITHOUT_CLASSIFICATION	2.1752561079605216E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999782474389204	WITHOUT_CLASSIFICATION	2.1752561079605216E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9997006135761585	WITHOUT_CLASSIFICATION	2.9938642384153013E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9997006135761585	WITHOUT_CLASSIFICATION	2.9938642384153013E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999973058025151	WITHOUT_CLASSIFICATION	2.6941974848449418E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999973058025151	WITHOUT_CLASSIFICATION	2.6941974848449418E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999013487297	WITHOUT_CLASSIFICATION	9.865127029356853E-8	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999013487297	WITHOUT_CLASSIFICATION	9.865127029356853E-8	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999974951421509	WITHOUT_CLASSIFICATION	2.5048578491161683E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999862443376788	WITHOUT_CLASSIFICATION	1.3755662321177142E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999782474389204	WITHOUT_CLASSIFICATION	2.1752561079605216E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999782474389204	WITHOUT_CLASSIFICATION	2.1752561079605216E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9997006135761585	WITHOUT_CLASSIFICATION	2.9938642384153013E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999973058025151	WITHOUT_CLASSIFICATION	2.6941974848449418E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999973058025151	WITHOUT_CLASSIFICATION	2.6941974848449418E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999013487297	WITHOUT_CLASSIFICATION	9.865127029356853E-8	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999051200686	WITHOUT_CLASSIFICATION	9.487993146989616E-8	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999983910946014	WITHOUT_CLASSIFICATION	1.6089053986184133E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999647826466129	WITHOUT_CLASSIFICATION	3.521735338707754E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999906026248805	WITHOUT_CLASSIFICATION	9.397375119426266E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999999445460966	WITHOUT_CLASSIFICATION	5.545390338297105E-8	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999875052414678	WITHOUT_CLASSIFICATION	1.2494758532279591E-5	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9995906131724309	WITHOUT_CLASSIFICATION	4.093868275691123E-4	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9201317107214847	WITHOUT_CLASSIFICATION	0.07986828927851525	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9981700143286718	WITHOUT_CLASSIFICATION	0.001829985671328219	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999987844492524	WITHOUT_CLASSIFICATION	1.2155507476008615E-6	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999924203219167	WITHOUT_CLASSIFICATION	7.579678083190961E-6	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999993538904125	WITHOUT_CLASSIFICATION	6.461095873782913E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999764419420268	WITHOUT_CLASSIFICATION	2.355805797317793E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999875052414678	WITHOUT_CLASSIFICATION	1.2494758532279591E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9997266248675994	WITHOUT_CLASSIFICATION	2.733751324004769E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9997266248675994	WITHOUT_CLASSIFICATION	2.733751324004769E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999893427802236	WITHOUT_CLASSIFICATION	1.0657219776406705E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996299590238	WITHOUT_CLASSIFICATION	3.7004097609764807E-7	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996299590238	WITHOUT_CLASSIFICATION	3.7004097609764807E-7	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999974715558355	WITHOUT_CLASSIFICATION	2.52844416450059E-5	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999905702069221	WITHOUT_CLASSIFICATION	9.42979307786928E-6	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999997449378518	WITHOUT_CLASSIFICATION	2.550621481940478E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999992855407381	WITHOUT_CLASSIFICATION	7.144592619069326E-7	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999992855407381	WITHOUT_CLASSIFICATION	7.144592619069326E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999900497414	WITHOUT_CLASSIFICATION	9.950258583978283E-8	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999983499210814	WITHOUT_CLASSIFICATION	1.6500789186007728E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999983499210814	WITHOUT_CLASSIFICATION	1.6500789186007728E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999971479897161	WITHOUT_CLASSIFICATION	2.8520102839335943E-6	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.99999826258183	WITHOUT_CLASSIFICATION	1.7374181700138413E-6	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999985609521169	WITHOUT_CLASSIFICATION	1.439047883080244E-6	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999974115138247	WITHOUT_CLASSIFICATION	2.5884861753234834E-6	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999952077927836	WITHOUT_CLASSIFICATION	4.792207216475397E-6	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999725779303654	WITHOUT_CLASSIFICATION	2.7422069634686075E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.999996503970692	WITHOUT_CLASSIFICATION	3.496029308104003E-6	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999956900202188	WITHOUT_CLASSIFICATION	4.309979781240548E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9962871723569449	WITHOUT_CLASSIFICATION	0.003712827643055033	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999697922977759	WITHOUT_CLASSIFICATION	3.020770222405629E-5	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999972318808434	WITHOUT_CLASSIFICATION	2.7681191566008147E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999998064968042	WITHOUT_CLASSIFICATION	1.9350319580197386E-6	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999888725009	WITHOUT_CLASSIFICATION	1.1127499233487727E-8	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999989759338151	WITHOUT_CLASSIFICATION	1.0240661848767193E-6	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999992369233741	WITHOUT_CLASSIFICATION	7.630766258366078E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999998064968042	WITHOUT_CLASSIFICATION	1.9350319580197386E-6	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999986824640108	WITHOUT_CLASSIFICATION	1.3175359891933625E-6	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.999999096026836	WITHOUT_CLASSIFICATION	9.039731640753631E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999991893988494	WITHOUT_CLASSIFICATION	8.106011507490513E-7	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999653551654528	WITHOUT_CLASSIFICATION	3.464483454707549E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999893553551844	WITHOUT_CLASSIFICATION	1.0644644815607735E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999992334090242	WITHOUT_CLASSIFICATION	7.665909758247683E-7	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999996212522402	WITHOUT_CLASSIFICATION	3.787477598243415E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.999998316449914	WITHOUT_CLASSIFICATION	1.6835500859193507E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999991064603777	WITHOUT_CLASSIFICATION	8.935396222066834E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.99999889735171	WITHOUT_CLASSIFICATION	1.102648290025033E-6	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999978266090779	WITHOUT_CLASSIFICATION	2.1733909221294894E-6	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999998725822747	WITHOUT_CLASSIFICATION	1.274177252638346E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999848993738107	WITHOUT_CLASSIFICATION	1.5100626189299702E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.999996503970692	WITHOUT_CLASSIFICATION	3.496029308104003E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999991064603777	WITHOUT_CLASSIFICATION	8.935396222066834E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999978266090779	WITHOUT_CLASSIFICATION	2.1733909221294894E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999848993738107	WITHOUT_CLASSIFICATION	1.5100626189299702E-5	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999965013279689	WITHOUT_CLASSIFICATION	3.4986720310592927E-6	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.99997000635885	WITHOUT_CLASSIFICATION	2.9993641149973162E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999993821885486	WITHOUT_CLASSIFICATION	6.178114514850247E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999984726502653	WITHOUT_CLASSIFICATION	1.5273497346029462E-6	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999987096601414	WITHOUT_CLASSIFICATION	1.290339858642234E-6	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.999951462557476	WITHOUT_CLASSIFICATION	4.853744252406902E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999906538233952	WITHOUT_CLASSIFICATION	9.346176604867367E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999764996541307	WITHOUT_CLASSIFICATION	2.3500345869277285E-5	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999964361086563	WITHOUT_CLASSIFICATION	3.5638913437450073E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999897694108	WITHOUT_CLASSIFICATION	1.0230589180847442E-8	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998453284077	WITHOUT_CLASSIFICATION	1.5467159231763706E-7	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999908851833271	WITHOUT_CLASSIFICATION	9.11481667286104E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999853134771	WITHOUT_CLASSIFICATION	1.4686522888175532E-8	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999994695241238	WITHOUT_CLASSIFICATION	5.304758763266238E-7	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999631707099318	WITHOUT_CLASSIFICATION	3.6829290068115885E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999991749123277	WITHOUT_CLASSIFICATION	8.250876722187739E-7	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999729123575252	WITHOUT_CLASSIFICATION	2.7087642474916143E-5	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999999709319895	WITHOUT_CLASSIFICATION	2.9068010505777714E-7	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999928820317455	WITHOUT_CLASSIFICATION	7.117968254454154E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999991064603777	WITHOUT_CLASSIFICATION	8.935396222066834E-7	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998995654116	WITHOUT_CLASSIFICATION	1.0043458846116146E-7	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999896067107	WITHOUT_CLASSIFICATION	1.0393289444672477E-8	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999994064093893	WITHOUT_CLASSIFICATION	5.935906106325123E-7	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999999836703259	WITHOUT_CLASSIFICATION	1.632967406898095E-8	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.999999973684944	WITHOUT_CLASSIFICATION	2.631505594581481E-8	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999885448220468	WITHOUT_CLASSIFICATION	1.1455177953208936E-5	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999929366552	WITHOUT_CLASSIFICATION	7.063344766762155E-9	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999698992644	WITHOUT_CLASSIFICATION	3.010073547914244E-8	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999703524383208	WITHOUT_CLASSIFICATION	2.964756167933975E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999955297963519	WITHOUT_CLASSIFICATION	4.470203648160031E-6	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999957682492854	WITHOUT_CLASSIFICATION	4.231750714650941E-6	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999988303922344	WITHOUT_CLASSIFICATION	1.169607765640335E-6	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999966146324234	WITHOUT_CLASSIFICATION	3.3853675765337844E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999978669543269	WITHOUT_CLASSIFICATION	2.133045673107481E-6	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999998909936938	WITHOUT_CLASSIFICATION	1.0900630624266316E-7	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999973068568042	WITHOUT_CLASSIFICATION	2.6931431958203715E-6	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999773527028909	WITHOUT_CLASSIFICATION	2.264729710917211E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999994650251547	WITHOUT_CLASSIFICATION	5.349748453055594E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999981904751868	WITHOUT_CLASSIFICATION	1.8095248132568243E-6	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999750913234616	WITHOUT_CLASSIFICATION	2.4908676538430403E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999964736	WITHOUT_CLASSIFICATION	3.526342242131957E-12	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998885260194955	WITHOUT_CLASSIFICATION	1.1147398050439631E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998783743789	WITHOUT_CLASSIFICATION	1.2162562109627348E-7	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999987746938848	WITHOUT_CLASSIFICATION	1.2253061152951137E-6	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999614517026347	WITHOUT_CLASSIFICATION	3.8548297365251466E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999614517026347	WITHOUT_CLASSIFICATION	3.8548297365251466E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999904387994667	WITHOUT_CLASSIFICATION	9.561200533319078E-6	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.99999815386671	WITHOUT_CLASSIFICATION	1.8461332900876565E-6	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999996737914634	WITHOUT_CLASSIFICATION	3.2620853662948745E-7	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999977263588097	WITHOUT_CLASSIFICATION	2.2736411903225407E-6	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999988816532029	WITHOUT_CLASSIFICATION	1.1183467970980796E-6	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9984291710345397	WITHOUT_CLASSIFICATION	0.0015708289654603185	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999987439925179	WITHOUT_CLASSIFICATION	1.2560074820884082E-5	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999959646248807	WITHOUT_CLASSIFICATION	4.035375119348958E-6	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999963450272198	WITHOUT_CLASSIFICATION	3.654972780265878E-6	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999962569153729	WITHOUT_CLASSIFICATION	3.743084627196776E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.999990593220252	WITHOUT_CLASSIFICATION	9.406779748058081E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999281645675572	WITHOUT_CLASSIFICATION	7.183543244280632E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999098609090122	WITHOUT_CLASSIFICATION	9.0139090987805E-4	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999892163699663	WITHOUT_CLASSIFICATION	1.0783630033672089E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975693971801	WITHOUT_CLASSIFICATION	2.430602819954983E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999882089345223	WITHOUT_CLASSIFICATION	1.1791065477649596E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999561174440347	WITHOUT_CLASSIFICATION	4.388255596534704E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999975407558686	WITHOUT_CLASSIFICATION	2.4592441314567047E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999235759449389	WITHOUT_CLASSIFICATION	7.642405506109024E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999809470910234	WITHOUT_CLASSIFICATION	1.905290897663576E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999859083958464	WITHOUT_CLASSIFICATION	1.4091604153615007E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999859083958464	WITHOUT_CLASSIFICATION	1.4091604153615007E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999841891015209	WITHOUT_CLASSIFICATION	1.58108984791104E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999841891015209	WITHOUT_CLASSIFICATION	1.58108984791104E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998783743789	WITHOUT_CLASSIFICATION	1.2162562109627348E-7	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999982501494018	WITHOUT_CLASSIFICATION	1.7498505981203406E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999855181109788	WITHOUT_CLASSIFICATION	1.4481889021138313E-5	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996095316463	WITHOUT_CLASSIFICATION	3.9046835366539074E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981622329152	WITHOUT_CLASSIFICATION	1.8377670847451195E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999855181109788	WITHOUT_CLASSIFICATION	1.4481889021138313E-5	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996095316463	WITHOUT_CLASSIFICATION	3.9046835366539074E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999997819688517	WITHOUT_CLASSIFICATION	2.180311483015923E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999994218678632	WITHOUT_CLASSIFICATION	5.781321369301777E-7	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999832391125443	WITHOUT_CLASSIFICATION	1.67608874557743E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999999276588047	WITHOUT_CLASSIFICATION	7.23411952814125E-8	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998937610589865	WITHOUT_CLASSIFICATION	1.0623894101335487E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999887488535911	WITHOUT_CLASSIFICATION	1.1251146408887814E-5	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998200742723	WITHOUT_CLASSIFICATION	1.7992572770825934E-7	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999995894278815	WITHOUT_CLASSIFICATION	4.105721185971501E-7	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999958129958901	WITHOUT_CLASSIFICATION	4.187004109891331E-6	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999998484404	WITHOUT_CLASSIFICATION	1.5155960284672617E-9	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999958707467951	WITHOUT_CLASSIFICATION	4.129253204912755E-6	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999986915549439	WITHOUT_CLASSIFICATION	1.308445056168212E-6	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999957783281	WITHOUT_CLASSIFICATION	4.221671872204512E-9	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999890284033701	WITHOUT_CLASSIFICATION	1.0971596629810022E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981622329152	WITHOUT_CLASSIFICATION	1.8377670847451195E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999821827625041	WITHOUT_CLASSIFICATION	1.781723749601413E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999722873161355	WITHOUT_CLASSIFICATION	2.7712683864531764E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999722873161355	WITHOUT_CLASSIFICATION	2.7712683864531764E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999694717451227	WITHOUT_CLASSIFICATION	3.052825487719117E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999997819688517	WITHOUT_CLASSIFICATION	2.180311483015923E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9996728723855292	WITHOUT_CLASSIFICATION	3.2712761447078467E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9996401608947147	WITHOUT_CLASSIFICATION	3.5983910528515845E-4	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9988211328455155	WITHOUT_CLASSIFICATION	0.0011788671544844182	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999895381623934	WITHOUT_CLASSIFICATION	1.0461837606567002E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9994311124658097	WITHOUT_CLASSIFICATION	5.688875341902563E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999997819688517	WITHOUT_CLASSIFICATION	2.180311483015923E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999895381623934	WITHOUT_CLASSIFICATION	1.0461837606567002E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9994311124658097	WITHOUT_CLASSIFICATION	5.688875341902563E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999946746293027	WITHOUT_CLASSIFICATION	5.32537069735311E-6	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999995097254488	WITHOUT_CLASSIFICATION	4.90274551125775E-7	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999740872967178	WITHOUT_CLASSIFICATION	2.5912703282201643E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999997819688517	WITHOUT_CLASSIFICATION	2.180311483015923E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999997819688517	WITHOUT_CLASSIFICATION	2.180311483015923E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999953990883776	WITHOUT_CLASSIFICATION	4.6009116223620095E-6	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999985215361532	WITHOUT_CLASSIFICATION	1.4784638467920786E-6	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999983384115773	WITHOUT_CLASSIFICATION	1.6615884227783386E-6	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999991209199829	WITHOUT_CLASSIFICATION	8.790800169972429E-7	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999977110381064	WITHOUT_CLASSIFICATION	2.288961893585088E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999531343001	WITHOUT_CLASSIFICATION	4.686569985632526E-8	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999991623929311	WITHOUT_CLASSIFICATION	8.376070688362855E-7	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999998915848769	WITHOUT_CLASSIFICATION	1.0841512308241225E-7	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999985066689921	WITHOUT_CLASSIFICATION	1.4933310078432993E-6	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.999991937628489	WITHOUT_CLASSIFICATION	8.0623715109058E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999876672850557	WITHOUT_CLASSIFICATION	1.2332714944274459E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999983465962808	WITHOUT_CLASSIFICATION	1.6534037191863485E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999687592	WITHOUT_CLASSIFICATION	3.12407999834549E-8	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999973670542012	WITHOUT_CLASSIFICATION	2.6329457989632947E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922352373873	WITHOUT_CLASSIFICATION	7.764762612630326E-6	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999628213161655	WITHOUT_CLASSIFICATION	3.7178683834558114E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999990870448594	WITHOUT_CLASSIFICATION	9.129551405494501E-7	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999973771751933	WITHOUT_CLASSIFICATION	2.622824806598064E-6	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9993795674371031	WITHOUT_CLASSIFICATION	6.204325628968468E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999604681428	WITHOUT_CLASSIFICATION	3.9531857223909854E-8	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.999993410998579	WITHOUT_CLASSIFICATION	6.589001421118589E-6	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999584631096571	WITHOUT_CLASSIFICATION	4.153689034285451E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999584631096571	WITHOUT_CLASSIFICATION	4.153689034285451E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999990870448594	WITHOUT_CLASSIFICATION	9.129551405494501E-7	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9996582251054338	WITHOUT_CLASSIFICATION	3.417748945662119E-4	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999700122401527	WITHOUT_CLASSIFICATION	2.9987759847356262E-5	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9980678758688952	WITHOUT_CLASSIFICATION	0.0019321241311048593	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999995094423959	WITHOUT_CLASSIFICATION	4.90557604106686E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999960445727912	WITHOUT_CLASSIFICATION	3.9554272087975205E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999995551744417	WITHOUT_CLASSIFICATION	4.448255582104329E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9994172814400644	WITHOUT_CLASSIFICATION	5.827185599355464E-4	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999999976734666	WITHOUT_CLASSIFICATION	2.326533394296368E-9	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999331936	WITHOUT_CLASSIFICATION	6.680638191304454E-11	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999357618585	WITHOUT_CLASSIFICATION	6.423814152131956E-8	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9989291302833931	WITHOUT_CLASSIFICATION	0.0010708697166068922	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999110344801222	WITHOUT_CLASSIFICATION	8.896551987779274E-5	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999778756753941	WITHOUT_CLASSIFICATION	2.2124324605917155E-5	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999960233824	WITHOUT_CLASSIFICATION	3.976617616948363E-9	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969672594831	WITHOUT_CLASSIFICATION	3.0327405169100956E-6	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999620914219646	WITHOUT_CLASSIFICATION	3.790857803533379E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999878202420962	WITHOUT_CLASSIFICATION	1.2179757903688956E-5	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999977694120809	WITHOUT_CLASSIFICATION	2.230587919143275E-6	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993215972778	WITHOUT_CLASSIFICATION	6.784027221533032E-7	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999882255186452	WITHOUT_CLASSIFICATION	1.1774481354830614E-5	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999990000812332	WITHOUT_CLASSIFICATION	9.999187667394096E-7	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999999520316932	WITHOUT_CLASSIFICATION	4.796830680562932E-7	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998053034251252	WITHOUT_CLASSIFICATION	1.9469657487477984E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917525105235	WITHOUT_CLASSIFICATION	8.247489476464573E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918268801855	WITHOUT_CLASSIFICATION	8.173119814411416E-6	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968405261501	WITHOUT_CLASSIFICATION	3.1594738499564907E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880867170124	WITHOUT_CLASSIFICATION	1.1913282987611698E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949698066863	WITHOUT_CLASSIFICATION	5.030193313700184E-6	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889193281808	WITHOUT_CLASSIFICATION	1.1080671819158812E-5	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999846294833189	WITHOUT_CLASSIFICATION	1.5370516681083738E-5	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999995328234131	WITHOUT_CLASSIFICATION	4.6717658687137703E-7	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999994938617227	WITHOUT_CLASSIFICATION	5.061382772719687E-7	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997937773957	WITHOUT_CLASSIFICATION	2.062226042977814E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999752000723	WITHOUT_CLASSIFICATION	2.4799927701250043E-7	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959733170541	WITHOUT_CLASSIFICATION	4.026682945872421E-6	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917659511156	WITHOUT_CLASSIFICATION	8.234048884375393E-6	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930753819724	WITHOUT_CLASSIFICATION	6.924618027613581E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984618395255	WITHOUT_CLASSIFICATION	1.538160474566926E-6	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994821615326	WITHOUT_CLASSIFICATION	5.178384673901166E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858319510448	WITHOUT_CLASSIFICATION	1.4168048955272618E-5	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999945503234757	WITHOUT_CLASSIFICATION	5.449676524306194E-5	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707005445096	WITHOUT_CLASSIFICATION	2.9299455490241697E-5	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9682485237152859	WITHOUT_CLASSIFICATION	0.03175147628471404	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999641534144311	WITHOUT_CLASSIFICATION	3.5846585568866354E-5	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999999045642	WITHOUT_CLASSIFICATION	9.543568020884011E-11	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995475571911	WITHOUT_CLASSIFICATION	4.5244280889121235E-7	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999987168755488	WITHOUT_CLASSIFICATION	1.2831244512327821E-6	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999992481663692	WITHOUT_CLASSIFICATION	7.518336307342159E-7	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999974673230125	WITHOUT_CLASSIFICATION	2.532676987389997E-6	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999991914601081	WITHOUT_CLASSIFICATION	8.085398918673166E-7	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999965628067005	WITHOUT_CLASSIFICATION	3.437193299511268E-6	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999983892360524	WITHOUT_CLASSIFICATION	1.6107639474722826E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999995787320511	WITHOUT_CLASSIFICATION	4.212679488524364E-7	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999964007744909	WITHOUT_CLASSIFICATION	3.5992255090358916E-6	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999990038997265	WITHOUT_CLASSIFICATION	9.9610027341278E-7	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9950819168630984	WITHOUT_CLASSIFICATION	0.004918083136901508	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999619066591187	WITHOUT_CLASSIFICATION	3.8093340881439384E-5	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999806880271492	WITHOUT_CLASSIFICATION	1.9311972850738778E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9995151503558312	WITHOUT_CLASSIFICATION	4.848496441688913E-4	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993469253715	WITHOUT_CLASSIFICATION	6.5307462850019576E-6	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999180466492905	WITHOUT_CLASSIFICATION	8.195335070952958E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938484445361	WITHOUT_CLASSIFICATION	6.1515554638895206E-6	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806243187027	WITHOUT_CLASSIFICATION	1.9375681297222844E-5	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999816229941477	WITHOUT_CLASSIFICATION	1.837700585231939E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999998105178913	WITHOUT_CLASSIFICATION	1.8948210876568033E-7	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999997352894654	WITHOUT_CLASSIFICATION	2.6471053462054017E-7	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999226474387067	WITHOUT_CLASSIFICATION	7.735256129325725E-5	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999732623908	WITHOUT_CLASSIFICATION	2.6737609184988014E-8	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999021517822	WITHOUT_CLASSIFICATION	9.784821779133163E-7	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999914519675275	WITHOUT_CLASSIFICATION	8.548032472442748E-6	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999999049221939	WITHOUT_CLASSIFICATION	9.507780610047351E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999949219252	WITHOUT_CLASSIFICATION	5.078074863439268E-9	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999999074371162	WITHOUT_CLASSIFICATION	9.256288380386563E-7	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.999999607277798	WITHOUT_CLASSIFICATION	3.927222020219063E-7	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999943416459601	WITHOUT_CLASSIFICATION	5.65835403986115E-6	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999993077296397	WITHOUT_CLASSIFICATION	6.922703603061292E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995475571911	WITHOUT_CLASSIFICATION	4.5244280889121235E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999950703669467	WITHOUT_CLASSIFICATION	4.929633053285119E-6	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998557007842	WITHOUT_CLASSIFICATION	1.4429921581068502E-7	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999976077189319	WITHOUT_CLASSIFICATION	2.3922810681399712E-6	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996202891989004	WITHOUT_CLASSIFICATION	3.7971080109955606E-4	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999724582807548	WITHOUT_CLASSIFICATION	2.7541719245209072E-5	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999995928254736	WITHOUT_CLASSIFICATION	4.0717452639621244E-7	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999167379463658	WITHOUT_CLASSIFICATION	8.326205363421377E-5	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.998319357913231	WITHOUT_CLASSIFICATION	0.001680642086769024	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999974956454598	WITHOUT_CLASSIFICATION	2.504354540221085E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999754949090675	WITHOUT_CLASSIFICATION	2.450509093265537E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999740068063453	WITHOUT_CLASSIFICATION	2.5993193654792343E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999815173043398	WITHOUT_CLASSIFICATION	1.8482695660188173E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999999994533603	WITHOUT_CLASSIFICATION	5.466396971764003E-9	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999893493079652	WITHOUT_CLASSIFICATION	1.0650692034779138E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999977237479324	WITHOUT_CLASSIFICATION	2.276252067699899E-6	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999995368691131	WITHOUT_CLASSIFICATION	4.631308869426286E-7	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.999980393557798	WITHOUT_CLASSIFICATION	1.960644220203947E-5	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998744821017227	WITHOUT_CLASSIFICATION	1.2551789827731303E-4	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998837822419	WITHOUT_CLASSIFICATION	1.1621775806584232E-7	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999987505482946	WITHOUT_CLASSIFICATION	1.2494517053765041E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.99999990372878	WITHOUT_CLASSIFICATION	9.627122004432005E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999986649903323	WITHOUT_CLASSIFICATION	1.3350096676165764E-6	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999759805793131	WITHOUT_CLASSIFICATION	2.4019420686870923E-5	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999932831915953	WITHOUT_CLASSIFICATION	6.7168084046813645E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999963113809209	WITHOUT_CLASSIFICATION	3.688619078992094E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999794506504	WITHOUT_CLASSIFICATION	2.0549349496652203E-8	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9878390148436388	WITHOUT_CLASSIFICATION	0.012160985156361227	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999957532417488	WITHOUT_CLASSIFICATION	4.246758251151611E-6	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999997424798415	WITHOUT_CLASSIFICATION	2.575201585003779E-7	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999810427332761	WITHOUT_CLASSIFICATION	1.8957266723917863E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995475571911	WITHOUT_CLASSIFICATION	4.5244280889121235E-7	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9511386026598947	WITHOUT_CLASSIFICATION	0.0488613973401053	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999976520767653	WITHOUT_CLASSIFICATION	2.347923234706268E-6	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9929002816462792	WITHOUT_CLASSIFICATION	0.007099718353720779	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995475571911	WITHOUT_CLASSIFICATION	4.5244280889121235E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999996053255727	WITHOUT_CLASSIFICATION	3.946744272071695E-7	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.99999990372878	WITHOUT_CLASSIFICATION	9.627122004432005E-8	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9986807941430558	WITHOUT_CLASSIFICATION	0.001319205856944333	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993418897515906	WITHOUT_CLASSIFICATION	6.581102484094496E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999962683961	WITHOUT_CLASSIFICATION	3.7316038965345504E-8	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999754949090675	WITHOUT_CLASSIFICATION	2.450509093265537E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999740068063453	WITHOUT_CLASSIFICATION	2.5993193654792343E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999815173043398	WITHOUT_CLASSIFICATION	1.8482695660188173E-5	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.99999995427881	WITHOUT_CLASSIFICATION	4.572118993103815E-8	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999994547472288	WITHOUT_CLASSIFICATION	5.452527711484084E-7	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999986934297905	WITHOUT_CLASSIFICATION	1.3065702093746718E-6	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999386052369301	WITHOUT_CLASSIFICATION	6.139476306992264E-5	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999949054712041	WITHOUT_CLASSIFICATION	5.094528795959972E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995475571911	WITHOUT_CLASSIFICATION	4.5244280889121235E-7	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999999994533603	WITHOUT_CLASSIFICATION	5.466396971764003E-9	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999893493079652	WITHOUT_CLASSIFICATION	1.0650692034779138E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996758817943	WITHOUT_CLASSIFICATION	3.2411820572644486E-7	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999520897122698	WITHOUT_CLASSIFICATION	4.791028773009371E-5	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999998013924478	WITHOUT_CLASSIFICATION	1.9860755224629192E-7	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999996798769792	WITHOUT_CLASSIFICATION	3.201230207370674E-7	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999992552260909	WITHOUT_CLASSIFICATION	7.447739091233314E-7	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999995208348696	WITHOUT_CLASSIFICATION	4.79165130306314E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858319510448	WITHOUT_CLASSIFICATION	1.4168048955272618E-5	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999814856838793	WITHOUT_CLASSIFICATION	1.8514316120724875E-5	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999998487747201	WITHOUT_CLASSIFICATION	1.51225279903697E-7	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999997010072359	WITHOUT_CLASSIFICATION	2.989927640699767E-7	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999629583909	WITHOUT_CLASSIFICATION	3.704160906469345E-8	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999866200441	WITHOUT_CLASSIFICATION	1.3379955805543899E-8	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880867170124	WITHOUT_CLASSIFICATION	1.1913282987611698E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949698066863	WITHOUT_CLASSIFICATION	5.030193313700184E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999752000723	WITHOUT_CLASSIFICATION	2.4799927701250043E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999866200441	WITHOUT_CLASSIFICATION	1.3379955805543899E-8	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999998899911042	WITHOUT_CLASSIFICATION	1.1000889576271332E-7	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999987382168908	WITHOUT_CLASSIFICATION	1.2617831091700888E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998387196999912	WITHOUT_CLASSIFICATION	1.6128030000874072E-4	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620962220042	WITHOUT_CLASSIFICATION	3.7903777995787706E-5	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9998717039296641	WITHOUT_CLASSIFICATION	1.2829607033603733E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.999763404271496	WITHOUT_CLASSIFICATION	2.3659572850412902E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959733170541	WITHOUT_CLASSIFICATION	4.026682945872421E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984618395255	WITHOUT_CLASSIFICATION	1.538160474566926E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999949219252	WITHOUT_CLASSIFICATION	5.078074863439268E-9	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999993275359889	WITHOUT_CLASSIFICATION	6.724640111481489E-7	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999295620046	WITHOUT_CLASSIFICATION	7.043799541921547E-8	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.99999970253388	WITHOUT_CLASSIFICATION	2.974661199955446E-7	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999892003163	WITHOUT_CLASSIFICATION	1.079968365707841E-8	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999993557188093	WITHOUT_CLASSIFICATION	6.442811908030624E-7	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999249808017	WITHOUT_CLASSIFICATION	7.5019198230313E-8	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999967711991595	WITHOUT_CLASSIFICATION	3.2288008405056914E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999748346758635	WITHOUT_CLASSIFICATION	2.5165324136546932E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999331936	WITHOUT_CLASSIFICATION	6.680638191304454E-11	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999892460372456	WITHOUT_CLASSIFICATION	1.07539627543375E-5	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999281489474	WITHOUT_CLASSIFICATION	7.185105255317986E-8	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999958131958506	WITHOUT_CLASSIFICATION	4.186804149365561E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999946137714372	WITHOUT_CLASSIFICATION	5.386228562769715E-6	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999999806230621	WITHOUT_CLASSIFICATION	1.937693790319478E-7	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999992105743724	WITHOUT_CLASSIFICATION	7.894256276785125E-7	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989399984259	WITHOUT_CLASSIFICATION	1.0600015740440197E-6	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973250949318	WITHOUT_CLASSIFICATION	2.6749050681956744E-5	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998642212613	WITHOUT_CLASSIFICATION	1.3577873870266798E-7	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999918356537324	WITHOUT_CLASSIFICATION	8.164346267570822E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999301675190169	WITHOUT_CLASSIFICATION	6.983248098308344E-5	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991722354968	WITHOUT_CLASSIFICATION	8.277645030682447E-7	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995422820365	WITHOUT_CLASSIFICATION	4.5771796361114763E-7	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997024640565	WITHOUT_CLASSIFICATION	2.9753594352803515E-7	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997783641804	WITHOUT_CLASSIFICATION	2.2163581956808768E-7	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999978205642274	WITHOUT_CLASSIFICATION	2.1794357725950716E-6	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999999747468029	WITHOUT_CLASSIFICATION	2.5253197080362146E-8	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997744321255	WITHOUT_CLASSIFICATION	2.255678744443499E-7	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998894979589094	WITHOUT_CLASSIFICATION	1.1050204109064583E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999541015763	WITHOUT_CLASSIFICATION	4.589842361007231E-8	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939733919674	WITHOUT_CLASSIFICATION	6.026608032683151E-6	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999995973483601	WITHOUT_CLASSIFICATION	4.0265163996558493E-7	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9998567871867964	WITHOUT_CLASSIFICATION	1.4321281320371702E-4	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999754121211583	WITHOUT_CLASSIFICATION	2.4587878841806956E-5	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999729915934411	WITHOUT_CLASSIFICATION	2.7008406558915663E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999992870634131	WITHOUT_CLASSIFICATION	7.129365869003779E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999963426480115	WITHOUT_CLASSIFICATION	3.6573519885236843E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999982959803809	WITHOUT_CLASSIFICATION	1.7040196191328489E-6	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999962224262733	WITHOUT_CLASSIFICATION	3.7775737266342644E-6	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999996034847795	WITHOUT_CLASSIFICATION	3.96515220428858E-7	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999995408418263	WITHOUT_CLASSIFICATION	4.591581737516998E-7	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9989663118238667	WITHOUT_CLASSIFICATION	0.001033688176133284	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999982731859093	WITHOUT_CLASSIFICATION	1.7268140906627425E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999447580926	WITHOUT_CLASSIFICATION	5.524190737366946E-8	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999066185055	WITHOUT_CLASSIFICATION	9.338149461167727E-8	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999998160510188	WITHOUT_CLASSIFICATION	1.8394898120702663E-6	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998366883606	WITHOUT_CLASSIFICATION	1.6331163950331679E-7	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999996271769289	WITHOUT_CLASSIFICATION	3.728230710207275E-7	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999996704277924	WITHOUT_CLASSIFICATION	3.295722075735385E-7	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999271577048	WITHOUT_CLASSIFICATION	7.284229514403913E-8	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999118987957	WITHOUT_CLASSIFICATION	8.810120423795856E-8	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999971041317676	WITHOUT_CLASSIFICATION	2.8958682324330334E-6	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.980308850131772	WITHOUT_CLASSIFICATION	0.019691149868228036	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999998684605653	WITHOUT_CLASSIFICATION	1.3153943463722713E-7	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999760234194982	WITHOUT_CLASSIFICATION	2.3976580501851126E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999714933785	WITHOUT_CLASSIFICATION	2.8506621495062167E-8	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999995082862746	WITHOUT_CLASSIFICATION	4.917137254676085E-7	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999977893739828	WITHOUT_CLASSIFICATION	2.2106260171883864E-6	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999901547564788	WITHOUT_CLASSIFICATION	9.84524352114632E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999964573915713	WITHOUT_CLASSIFICATION	3.5426084287923217E-6	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999984785388034	WITHOUT_CLASSIFICATION	1.5214611965798883E-6	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999991760157919	WITHOUT_CLASSIFICATION	8.239842079778671E-7	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999983982135117	WITHOUT_CLASSIFICATION	1.601786488436267E-6	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999979377369157	WITHOUT_CLASSIFICATION	2.062263084384318E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999843193075875	WITHOUT_CLASSIFICATION	1.5680692412487565E-5	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.999158025079304	WITHOUT_CLASSIFICATION	8.419749206960826E-4	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999909126308943	WITHOUT_CLASSIFICATION	9.087369105668972E-6	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999902213500766	WITHOUT_CLASSIFICATION	9.778649923445867E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999960082181661	WITHOUT_CLASSIFICATION	3.99178183378704E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999996037030522	WITHOUT_CLASSIFICATION	3.96296947889096E-7	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999935618801898	WITHOUT_CLASSIFICATION	6.4381198101355345E-6	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999980079835044	WITHOUT_CLASSIFICATION	1.9920164956708217E-6	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9965749356798745	WITHOUT_CLASSIFICATION	0.0034250643201254303	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9992710277774961	WITHOUT_CLASSIFICATION	7.28972222503785E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999955230860894	WITHOUT_CLASSIFICATION	4.476913910611893E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9888240930224211	WITHOUT_CLASSIFICATION	0.011175906977578906	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999995688499581	WITHOUT_CLASSIFICATION	4.3115004195147543E-7	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9984267756887936	WITHOUT_CLASSIFICATION	0.0015732243112064257	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999568379442094	WITHOUT_CLASSIFICATION	4.31620557905786E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999745695958501	WITHOUT_CLASSIFICATION	2.543040414991016E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999995237678406	WITHOUT_CLASSIFICATION	4.762321593947341E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999560848268	WITHOUT_CLASSIFICATION	4.391517319167935E-8	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999967983426207	WITHOUT_CLASSIFICATION	3.2016573792328035E-6	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999962221511216	WITHOUT_CLASSIFICATION	3.777848878407315E-6	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999483067069652	WITHOUT_CLASSIFICATION	5.169329303474523E-5	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999943458671794	WITHOUT_CLASSIFICATION	5.654132820634188E-6	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999998530382148	WITHOUT_CLASSIFICATION	1.4696178520106818E-7	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999650694817	WITHOUT_CLASSIFICATION	3.493051823784804E-8	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999634996354	WITHOUT_CLASSIFICATION	3.6500364547875786E-8	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999995889471595	WITHOUT_CLASSIFICATION	4.1105284058832447E-7	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999898470267029	WITHOUT_CLASSIFICATION	1.0152973297237733E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999989300907021	WITHOUT_CLASSIFICATION	1.0699092979434027E-6	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999987657400193	WITHOUT_CLASSIFICATION	1.2342599806431482E-6	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999992528886023	WITHOUT_CLASSIFICATION	7.47111397638944E-7	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999362412818128	WITHOUT_CLASSIFICATION	6.375871818720373E-5	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997264496125102	WITHOUT_CLASSIFICATION	2.7355038748972727E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999963693933737	WITHOUT_CLASSIFICATION	3.6306066262473668E-6	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999861193566534	WITHOUT_CLASSIFICATION	1.3880643346661823E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999993548276215	WITHOUT_CLASSIFICATION	6.451723784138393E-7	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999994205913243	WITHOUT_CLASSIFICATION	5.794086756203842E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.999247266639376	WITHOUT_CLASSIFICATION	7.527333606238947E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999241131452005	WITHOUT_CLASSIFICATION	7.58868547995261E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999996871416089	WITHOUT_CLASSIFICATION	3.128583909973818E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.999247266639376	WITHOUT_CLASSIFICATION	7.527333606238947E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999669292895	WITHOUT_CLASSIFICATION	3.307071049515832E-8	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.999999927648008	WITHOUT_CLASSIFICATION	7.235199197907626E-8	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999984277783563	WITHOUT_CLASSIFICATION	1.5722216437134942E-6	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998994252410421	WITHOUT_CLASSIFICATION	1.0057475895790652E-4	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999158691932	WITHOUT_CLASSIFICATION	8.413080677273159E-8	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999783889264	WITHOUT_CLASSIFICATION	2.1611073599592634E-8	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999794127307413	WITHOUT_CLASSIFICATION	2.0587269258694295E-5	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999284339235	WITHOUT_CLASSIFICATION	7.156607645817888E-8	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999995512650407	WITHOUT_CLASSIFICATION	4.487349593034246E-7	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999981133469066	WITHOUT_CLASSIFICATION	1.886653093494881E-6	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999961542848496	WITHOUT_CLASSIFICATION	3.8457151505076095E-6	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999993227715554	WITHOUT_CLASSIFICATION	6.77228444611695E-6	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999998788998198	WITHOUT_CLASSIFICATION	1.2110018012139717E-7	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999999994601168	WITHOUT_CLASSIFICATION	5.398832115149871E-9	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999994752491687	WITHOUT_CLASSIFICATION	5.247508312720563E-7	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999978187824802	WITHOUT_CLASSIFICATION	2.1812175197213317E-6	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999974421792239	WITHOUT_CLASSIFICATION	2.557820776095263E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999974421792239	WITHOUT_CLASSIFICATION	2.557820776095263E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999992736268972	WITHOUT_CLASSIFICATION	7.263731027733336E-7	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9999383811767626	WITHOUT_CLASSIFICATION	6.161882323742127E-5	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999569316051037	WITHOUT_CLASSIFICATION	4.3068394896389875E-5	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999887613253224	WITHOUT_CLASSIFICATION	1.1238674677623122E-5	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999990590842522	WITHOUT_CLASSIFICATION	9.409157477190315E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.96432858347315	WITHOUT_CLASSIFICATION	0.03567141652685003	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9999359241111571	WITHOUT_CLASSIFICATION	6.407588884294967E-5	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999801599795	WITHOUT_CLASSIFICATION	1.9840020553145444E-8	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999982452498525	WITHOUT_CLASSIFICATION	1.754750147504321E-6	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9996103719577976	WITHOUT_CLASSIFICATION	3.8962804220240004E-4	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9998225132794886	WITHOUT_CLASSIFICATION	1.7748672051143315E-4	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999884804246	WITHOUT_CLASSIFICATION	1.1519575384977714E-8	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999759679159	WITHOUT_CLASSIFICATION	2.4032084086753498E-8	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999989664530042	WITHOUT_CLASSIFICATION	1.0335469958626593E-6	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999917007644	WITHOUT_CLASSIFICATION	8.299235635389572E-9	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999992105743724	WITHOUT_CLASSIFICATION	7.894256276785125E-7	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999975075889211	WITHOUT_CLASSIFICATION	2.4924110787802294E-6	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999999750164946	WITHOUT_CLASSIFICATION	2.4983505393287976E-7	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9997909687330325	WITHOUT_CLASSIFICATION	2.0903126696749147E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.99999912958572	WITHOUT_CLASSIFICATION	8.704142799133771E-7	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999741080674	WITHOUT_CLASSIFICATION	2.589193261483772E-8	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999776932754962	WITHOUT_CLASSIFICATION	2.23067245037982E-5	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998785474982	WITHOUT_CLASSIFICATION	1.2145250181355787E-7	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998683487399	WITHOUT_CLASSIFICATION	1.3165126011954884E-7	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999999909396592	WITHOUT_CLASSIFICATION	9.060340797421475E-8	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998215608623	WITHOUT_CLASSIFICATION	1.784391376131563E-7	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999703959154	WITHOUT_CLASSIFICATION	2.960408463160002E-8	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999986336243406	WITHOUT_CLASSIFICATION	1.3663756593154504E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999946099007104	WITHOUT_CLASSIFICATION	5.390099289670677E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999900202382527	WITHOUT_CLASSIFICATION	9.97976174735777E-6	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999969497316324	WITHOUT_CLASSIFICATION	3.0502683674928876E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999988151198641	WITHOUT_CLASSIFICATION	1.1848801358453233E-6	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9998375596525687	WITHOUT_CLASSIFICATION	1.6244034743138357E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999993949526964	WITHOUT_CLASSIFICATION	6.050473035093208E-7	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999979969629185	WITHOUT_CLASSIFICATION	2.0030370815276468E-6	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999984768400109	WITHOUT_CLASSIFICATION	1.5231599892072475E-6	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999947788620409	WITHOUT_CLASSIFICATION	5.221137959101286E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999989331941877	WITHOUT_CLASSIFICATION	1.0668058123016491E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999979905437709	WITHOUT_CLASSIFICATION	2.0094562290995746E-6	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9996085261956219	WITHOUT_CLASSIFICATION	3.9147380437815955E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999999207284354	WITHOUT_CLASSIFICATION	7.92715646904623E-8	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999994601163839	WITHOUT_CLASSIFICATION	5.39883616182968E-7	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9970102091674411	WITHOUT_CLASSIFICATION	0.0029897908325589094	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999989122988112	WITHOUT_CLASSIFICATION	1.0877011887292831E-6	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999942029550726	WITHOUT_CLASSIFICATION	5.797044927432335E-6	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999993849145845	WITHOUT_CLASSIFICATION	6.150854154386911E-7	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707359950454	WITHOUT_CLASSIFICATION	2.9264004954653105E-5	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516974981356	WITHOUT_CLASSIFICATION	4.830250186449012E-5	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994126543183	WITHOUT_CLASSIFICATION	5.8734568171159174E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9920603368947571	WITHOUT_CLASSIFICATION	0.007939663105242873	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999847209016864	WITHOUT_CLASSIFICATION	1.5279098313528594E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999748346758635	WITHOUT_CLASSIFICATION	2.5165324136546932E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999748346758635	WITHOUT_CLASSIFICATION	2.5165324136546932E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999992135178087	WITHOUT_CLASSIFICATION	7.864821912593482E-7	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999382230895094	WITHOUT_CLASSIFICATION	6.177691049051519E-5	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9956092058886775	WITHOUT_CLASSIFICATION	0.004390794111322407	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994087691686243	WITHOUT_CLASSIFICATION	5.912308313756803E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9956092058886775	WITHOUT_CLASSIFICATION	0.004390794111322407	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999984929443885	WITHOUT_CLASSIFICATION	1.5070556116111253E-6	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999980312324883	WITHOUT_CLASSIFICATION	1.968767511795336E-6	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999996725029597	WITHOUT_CLASSIFICATION	3.274970402667739E-7	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999977831964207	WITHOUT_CLASSIFICATION	2.216803579156338E-6	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998380703808	WITHOUT_CLASSIFICATION	1.619296190933207E-7	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999988770151325	WITHOUT_CLASSIFICATION	1.122984867547852E-6	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999457843268	WITHOUT_CLASSIFICATION	5.421567308202192E-8	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999940797975507	WITHOUT_CLASSIFICATION	5.920202449208798E-6	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999998894470337	WITHOUT_CLASSIFICATION	1.1055296636307287E-7	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999970701274526	WITHOUT_CLASSIFICATION	2.9298725473672E-6	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999980203192564	WITHOUT_CLASSIFICATION	1.9796807435018255E-6	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999981718124108	WITHOUT_CLASSIFICATION	1.8281875891874358E-6	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999980890106662	WITHOUT_CLASSIFICATION	1.9109893338188663E-6	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9987001970036266	WITHOUT_CLASSIFICATION	0.0012998029963734487	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999804624425	WITHOUT_CLASSIFICATION	1.9537557415427065E-8	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999922680135526	WITHOUT_CLASSIFICATION	7.73198644736031E-6	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999911526383175	WITHOUT_CLASSIFICATION	8.847361682449529E-6	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999911526383175	WITHOUT_CLASSIFICATION	8.847361682449529E-6	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999971336885299	WITHOUT_CLASSIFICATION	2.866311470149201E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999983860099888	WITHOUT_CLASSIFICATION	1.6139900111772279E-6	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999989998715166	WITHOUT_CLASSIFICATION	1.0001284833360822E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999906021987	WITHOUT_CLASSIFICATION	9.397801412056059E-9	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999975553615261	WITHOUT_CLASSIFICATION	2.4446384737749792E-6	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999977759975122	WITHOUT_CLASSIFICATION	2.2240024877853597E-6	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999978321929103	WITHOUT_CLASSIFICATION	2.1678070896983825E-5	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999972121876598	WITHOUT_CLASSIFICATION	2.787812340162594E-6	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999996137491333	WITHOUT_CLASSIFICATION	3.8625086673627706E-7	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999991005380273	WITHOUT_CLASSIFICATION	8.994619726443468E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999989087513875	WITHOUT_CLASSIFICATION	1.091248612451954E-6	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999717751383	WITHOUT_CLASSIFICATION	2.822486172532077E-8	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999992096284814	WITHOUT_CLASSIFICATION	7.903715185524468E-7	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999911229805619	WITHOUT_CLASSIFICATION	8.877019438103225E-6	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999986594978068	WITHOUT_CLASSIFICATION	1.3405021932242367E-6	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999522424879	WITHOUT_CLASSIFICATION	4.7757511958976977E-8	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999998253035995	WITHOUT_CLASSIFICATION	1.746964005690182E-7	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999986919937748	WITHOUT_CLASSIFICATION	1.3080062251722793E-6	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999988456543274	WITHOUT_CLASSIFICATION	1.1543456725682591E-6	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999968605466	WITHOUT_CLASSIFICATION	3.1394534035770303E-9	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999981657856164	WITHOUT_CLASSIFICATION	1.8342143835350569E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999465996562	WITHOUT_CLASSIFICATION	5.340034383829103E-8	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999299927607	WITHOUT_CLASSIFICATION	7.000723936822286E-8	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999943055732	WITHOUT_CLASSIFICATION	5.694426763160719E-9	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.999997185633784	WITHOUT_CLASSIFICATION	2.8143662158780183E-6	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999995849459151	WITHOUT_CLASSIFICATION	4.150540849066449E-7	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.99999735152553	WITHOUT_CLASSIFICATION	2.6484744699766313E-6	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999560578084529	WITHOUT_CLASSIFICATION	4.394219154707321E-5	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999800403557039	WITHOUT_CLASSIFICATION	1.9959644296102818E-5	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999782298494285	WITHOUT_CLASSIFICATION	2.1770150571453326E-5	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999931415032295	WITHOUT_CLASSIFICATION	6.858496770533409E-6	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999990820383462	WITHOUT_CLASSIFICATION	9.179616538371488E-7	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998635570120812	WITHOUT_CLASSIFICATION	1.3644298791887593E-4	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999995772256409	WITHOUT_CLASSIFICATION	4.227743590104904E-7	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999988532471292	WITHOUT_CLASSIFICATION	1.1467528707891926E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999227998904	WITHOUT_CLASSIFICATION	7.720010962650748E-8	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999997573162492	WITHOUT_CLASSIFICATION	2.4268375073021747E-7	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999994005339122	WITHOUT_CLASSIFICATION	5.994660877552092E-7	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999620085043858	WITHOUT_CLASSIFICATION	3.79914956141783E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999935037628794	WITHOUT_CLASSIFICATION	6.496237120546233E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999962673011338	WITHOUT_CLASSIFICATION	3.7326988663077777E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860301501098	WITHOUT_CLASSIFICATION	1.3969849890241018E-5	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999961093273677	WITHOUT_CLASSIFICATION	3.890672632321362E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998797888540659	WITHOUT_CLASSIFICATION	1.2021114593404046E-4	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999997104290738	WITHOUT_CLASSIFICATION	2.8957092619401093E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9948543653063764	WITHOUT_CLASSIFICATION	0.005145634693623624	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9894672477295385	WITHOUT_CLASSIFICATION	0.010532752270461522	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999888071426	WITHOUT_CLASSIFICATION	1.1192857486112363E-8	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999988456172526	WITHOUT_CLASSIFICATION	1.1543827473461257E-6	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999979474686516	WITHOUT_CLASSIFICATION	2.052531348390458E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951056924944	WITHOUT_CLASSIFICATION	4.894307505587195E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999330098664	WITHOUT_CLASSIFICATION	6.699013346675945E-8	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9952444690093734	WITHOUT_CLASSIFICATION	0.004755530990626573	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999997257044806	WITHOUT_CLASSIFICATION	2.742955193956747E-7	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999973867493249	WITHOUT_CLASSIFICATION	2.6132506749964187E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999996053255727	WITHOUT_CLASSIFICATION	3.946744272071695E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999996053255727	WITHOUT_CLASSIFICATION	3.946744272071695E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999997915718415	WITHOUT_CLASSIFICATION	2.0842815862188678E-7	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999650100937705	WITHOUT_CLASSIFICATION	3.498990622951653E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999940790729926	WITHOUT_CLASSIFICATION	5.920927007350542E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999930280232793	WITHOUT_CLASSIFICATION	6.971976720691905E-6	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999984681996147	WITHOUT_CLASSIFICATION	1.531800385308837E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999750018039304	WITHOUT_CLASSIFICATION	2.4998196069510556E-5	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999956244446362	WITHOUT_CLASSIFICATION	4.375555363857387E-6	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999999837115026	WITHOUT_CLASSIFICATION	1.6288497491978758E-8	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999965064769498	WITHOUT_CLASSIFICATION	3.493523050120244E-6	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.999999939450449	WITHOUT_CLASSIFICATION	6.054955106587899E-8	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999794534197449	WITHOUT_CLASSIFICATION	2.0546580255104968E-5	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999911501833326	WITHOUT_CLASSIFICATION	8.849816667403532E-6	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999969343024816	WITHOUT_CLASSIFICATION	3.0656975184030854E-6	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999908560478	WITHOUT_CLASSIFICATION	9.143952203251035E-9	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999941518973695	WITHOUT_CLASSIFICATION	5.848102630489223E-6	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999807402867747	WITHOUT_CLASSIFICATION	1.9259713225286193E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999859707355226	WITHOUT_CLASSIFICATION	1.4029264477425807E-5	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999978574525792	WITHOUT_CLASSIFICATION	2.1425474208882295E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9995597535355164	WITHOUT_CLASSIFICATION	4.4024646448361665E-4	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999577159942135	WITHOUT_CLASSIFICATION	4.2284005786401317E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999991844003833	WITHOUT_CLASSIFICATION	8.15599616722332E-7	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999299939443363	WITHOUT_CLASSIFICATION	7.000605566364234E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999378705632169	WITHOUT_CLASSIFICATION	6.212943678301003E-5	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9987977891643444	WITHOUT_CLASSIFICATION	0.001202210835655684	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9995915772675832	WITHOUT_CLASSIFICATION	4.0842273241686845E-4	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9838875401659284	WITHOUT_CLASSIFICATION	0.016112459834071603	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999939829388017	WITHOUT_CLASSIFICATION	6.017061198228644E-6	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995609331903504	WITHOUT_CLASSIFICATION	4.390668096494726E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999965249359545	WITHOUT_CLASSIFICATION	3.475064045440449E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999378705632169	WITHOUT_CLASSIFICATION	6.212943678301003E-5	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999980516946274	WITHOUT_CLASSIFICATION	1.948305372542414E-6	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999993769630904	WITHOUT_CLASSIFICATION	6.23036909644755E-7	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9999541015342632	WITHOUT_CLASSIFICATION	4.589846573682795E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999909926403476	WITHOUT_CLASSIFICATION	9.007359652339354E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999937847126	WITHOUT_CLASSIFICATION	6.215287459399275E-9	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999480756299	WITHOUT_CLASSIFICATION	5.19243701256374E-8	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9993733155922219	WITHOUT_CLASSIFICATION	6.26684407778247E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999758190982	WITHOUT_CLASSIFICATION	2.4180901807701007E-7	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999994738111315	WITHOUT_CLASSIFICATION	5.261888683983987E-7	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999909926403476	WITHOUT_CLASSIFICATION	9.007359652339354E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.999999887414953	WITHOUT_CLASSIFICATION	1.1258504688595663E-7	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999997743218391	WITHOUT_CLASSIFICATION	2.2567816092577304E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9991972349640643	WITHOUT_CLASSIFICATION	8.02765035935762E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999784202744009	WITHOUT_CLASSIFICATION	2.1579725599155526E-5	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999986769126864	WITHOUT_CLASSIFICATION	1.3230873135746597E-6	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999989087513875	WITHOUT_CLASSIFICATION	1.091248612451954E-6	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.99999987133416	WITHOUT_CLASSIFICATION	1.28665840050634E-7	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999990281396128	WITHOUT_CLASSIFICATION	9.718603872169325E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999962822082551	WITHOUT_CLASSIFICATION	3.7177917448547866E-6	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9994288978802209	WITHOUT_CLASSIFICATION	5.711021197790047E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999997639496897	WITHOUT_CLASSIFICATION	2.3605031033843565E-7	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999985475408297	WITHOUT_CLASSIFICATION	1.4524591702387896E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999948683892	WITHOUT_CLASSIFICATION	5.131610833938278E-9	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999993893680873	WITHOUT_CLASSIFICATION	6.106319128142335E-7	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998328981181	WITHOUT_CLASSIFICATION	1.6710188183651505E-7	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999994811287445	WITHOUT_CLASSIFICATION	5.188712554573866E-7	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999829464585661	WITHOUT_CLASSIFICATION	1.705354143394301E-5	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999965629582	WITHOUT_CLASSIFICATION	3.437041717238429E-9	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999988578632498	WITHOUT_CLASSIFICATION	1.1421367501716757E-6	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999723925871772	WITHOUT_CLASSIFICATION	2.7607412822747786E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999984419948	WITHOUT_CLASSIFICATION	1.558005130367305E-9	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999980277189239	WITHOUT_CLASSIFICATION	1.9722810761144372E-6	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999991736243087	WITHOUT_CLASSIFICATION	8.26375691266544E-7	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999984899155485	WITHOUT_CLASSIFICATION	1.510084451477267E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.99999931597973	WITHOUT_CLASSIFICATION	6.840202700012693E-7	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998655991216516	WITHOUT_CLASSIFICATION	1.3440087834834785E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999841306513716	WITHOUT_CLASSIFICATION	1.5869348628401054E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.999999971839626	WITHOUT_CLASSIFICATION	2.8160374076663687E-8	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999639529610169	WITHOUT_CLASSIFICATION	3.6047038983064886E-5	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999990894946181	WITHOUT_CLASSIFICATION	9.105053818625907E-7	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999539707907057	WITHOUT_CLASSIFICATION	4.602920929428304E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999992907656859	WITHOUT_CLASSIFICATION	7.092343140121111E-7	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999920908169513	WITHOUT_CLASSIFICATION	7.909183048662806E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995836224274	WITHOUT_CLASSIFICATION	4.163775725872854E-7	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859544829248	WITHOUT_CLASSIFICATION	1.404551707525006E-5	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.997331463603299	WITHOUT_CLASSIFICATION	0.002668536396700873	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999995237790006	WITHOUT_CLASSIFICATION	4.7622099952694807E-7	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999985163742518	WITHOUT_CLASSIFICATION	1.4836257482094953E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999669035418	WITHOUT_CLASSIFICATION	3.309645819242212E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999669035418	WITHOUT_CLASSIFICATION	3.309645819242212E-8	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999755390987	WITHOUT_CLASSIFICATION	2.4460901250670432E-8	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999955906738956	WITHOUT_CLASSIFICATION	4.409326104408403E-5	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999984535490656	WITHOUT_CLASSIFICATION	1.5464509344159265E-6	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999400388627282	WITHOUT_CLASSIFICATION	5.996113727178167E-5	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999849129150996	WITHOUT_CLASSIFICATION	1.5087084900339197E-5	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9985133094887394	WITHOUT_CLASSIFICATION	0.0014866905112606139	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999995068770972	WITHOUT_CLASSIFICATION	4.931229029074762E-7	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999970810036385	WITHOUT_CLASSIFICATION	2.918996361525449E-6	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999991795671558	WITHOUT_CLASSIFICATION	8.204328442381984E-7	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999970642069318	WITHOUT_CLASSIFICATION	2.9357930682635265E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9916870927102959	WITHOUT_CLASSIFICATION	0.008312907289704108	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999916319264	WITHOUT_CLASSIFICATION	8.368073560156698E-9	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999817871821545	WITHOUT_CLASSIFICATION	1.8212817845591076E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999669035418	WITHOUT_CLASSIFICATION	3.309645819242212E-8	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999860745840372	WITHOUT_CLASSIFICATION	1.3925415962854745E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999982777345158	WITHOUT_CLASSIFICATION	1.7222654842308285E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999538558611933	WITHOUT_CLASSIFICATION	4.6144138806680116E-5	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999998252733285	WITHOUT_CLASSIFICATION	1.7472667139680357E-7	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999961350854618	WITHOUT_CLASSIFICATION	3.864914538190615E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999977504798544	WITHOUT_CLASSIFICATION	2.2495201456424105E-6	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999884583117504	WITHOUT_CLASSIFICATION	1.1541688249680341E-5	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999979150754	WITHOUT_CLASSIFICATION	2.084924661481904E-9	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999984829524871	WITHOUT_CLASSIFICATION	1.5170475129579613E-6	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999997685474374	WITHOUT_CLASSIFICATION	2.3145256263311136E-7	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999984050725027	WITHOUT_CLASSIFICATION	1.594927497270795E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995836224274	WITHOUT_CLASSIFICATION	4.163775725872854E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999669035418	WITHOUT_CLASSIFICATION	3.309645819242212E-8	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998824064717432	WITHOUT_CLASSIFICATION	1.1759352825685045E-4	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998529433849	WITHOUT_CLASSIFICATION	1.4705661502976794E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987567618343	WITHOUT_CLASSIFICATION	1.243238165732614E-6	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999898848395322	WITHOUT_CLASSIFICATION	1.0115160467787094E-5	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999985477538	WITHOUT_CLASSIFICATION	1.4522461642917806E-9	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999861292145331	WITHOUT_CLASSIFICATION	1.3870785466860295E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977056427727	WITHOUT_CLASSIFICATION	2.2943572273179054E-6	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999995679246196	WITHOUT_CLASSIFICATION	4.320753803276704E-7	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999989152324128	WITHOUT_CLASSIFICATION	1.084767587254116E-6	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998275098010305	WITHOUT_CLASSIFICATION	1.7249019896961297E-4	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999987052474764	WITHOUT_CLASSIFICATION	1.2947525236073494E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999431238574223	WITHOUT_CLASSIFICATION	5.6876142577588146E-5	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999989850963	WITHOUT_CLASSIFICATION	1.014903711592259E-9	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999994605954136	WITHOUT_CLASSIFICATION	5.394045864925655E-7	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999984929443885	WITHOUT_CLASSIFICATION	1.5070556116111253E-6	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999937896465565	WITHOUT_CLASSIFICATION	6.2103534434810136E-6	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999967937565715	WITHOUT_CLASSIFICATION	3.2062434286436564E-6	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9991379390231897	WITHOUT_CLASSIFICATION	8.620609768102378E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999987648289753	WITHOUT_CLASSIFICATION	1.2351710246861682E-6	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999925028749312	WITHOUT_CLASSIFICATION	7.4971250687719855E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999950492102011	WITHOUT_CLASSIFICATION	4.950789798816538E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999950492102011	WITHOUT_CLASSIFICATION	4.950789798816538E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999938512158649	WITHOUT_CLASSIFICATION	6.1487841350569545E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999985812156741	WITHOUT_CLASSIFICATION	1.4187843258875333E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999913392278856	WITHOUT_CLASSIFICATION	8.660772114344105E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999463604224047	WITHOUT_CLASSIFICATION	5.363957759523295E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999934029397077	WITHOUT_CLASSIFICATION	6.5970602923010985E-6	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999869954621934	WITHOUT_CLASSIFICATION	1.3004537806699973E-5	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999996221225282	WITHOUT_CLASSIFICATION	3.77877471707088E-7	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999478405617228	WITHOUT_CLASSIFICATION	5.215943827719778E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999478405617228	WITHOUT_CLASSIFICATION	5.215943827719778E-5	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998526994443068	WITHOUT_CLASSIFICATION	1.473005556933165E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999999393998275	WITHOUT_CLASSIFICATION	6.060017253249653E-8	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999904868514671	WITHOUT_CLASSIFICATION	9.513148533006815E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999508789690639	WITHOUT_CLASSIFICATION	4.912103093617109E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999508789690639	WITHOUT_CLASSIFICATION	4.912103093617109E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999508789690639	WITHOUT_CLASSIFICATION	4.912103093617109E-5	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998839386752181	WITHOUT_CLASSIFICATION	1.1606132478181559E-4	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999999368170202	WITHOUT_CLASSIFICATION	6.318297979982497E-7	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999995895470658	WITHOUT_CLASSIFICATION	4.104529342390559E-7	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.669293168961475	DEFECT	0.33070683103852505	WITHOUT_CLASSIFICATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999631931580355	WITHOUT_CLASSIFICATION	3.680684196454819E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999669035418	WITHOUT_CLASSIFICATION	3.309645819242212E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999669035418	WITHOUT_CLASSIFICATION	3.309645819242212E-8	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999982089387646	WITHOUT_CLASSIFICATION	1.7910612353961083E-5	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999964478353	WITHOUT_CLASSIFICATION	3.552164787638594E-9	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9923088887831484	WITHOUT_CLASSIFICATION	0.007691111216851677	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999665067891	WITHOUT_CLASSIFICATION	3.3493210874929536E-8	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9986278840232613	WITHOUT_CLASSIFICATION	0.0013721159767387397	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999964516612567	WITHOUT_CLASSIFICATION	3.5483387432124507E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9992069047422675	WITHOUT_CLASSIFICATION	7.930952577325208E-4	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998943148551871	WITHOUT_CLASSIFICATION	1.0568514481303323E-4	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999983770540397	WITHOUT_CLASSIFICATION	1.6229459603032952E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999994217622171	WITHOUT_CLASSIFICATION	5.782377828904695E-7	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999791273031778	WITHOUT_CLASSIFICATION	2.0872696822121288E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999995755827262	WITHOUT_CLASSIFICATION	4.2441727379020793E-7	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999995755827262	WITHOUT_CLASSIFICATION	4.2441727379020873E-7	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.99999959335198	WITHOUT_CLASSIFICATION	4.066480200482391E-7	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.99999959335198	WITHOUT_CLASSIFICATION	4.066480200482391E-7	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999999702619762	WITHOUT_CLASSIFICATION	2.973802379350289E-7	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999986302391519	WITHOUT_CLASSIFICATION	1.369760848098386E-6	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999986302391519	WITHOUT_CLASSIFICATION	1.369760848098386E-6	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999999348247226	WITHOUT_CLASSIFICATION	6.517527739727952E-7	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999977819142539	WITHOUT_CLASSIFICATION	2.2180857460781847E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999994912179869	WITHOUT_CLASSIFICATION	5.087820130852855E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999950492102011	WITHOUT_CLASSIFICATION	4.950789798816538E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999998458286546	WITHOUT_CLASSIFICATION	1.5417134526907735E-7	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999977819142539	WITHOUT_CLASSIFICATION	2.2180857460781847E-6	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999912050920008	WITHOUT_CLASSIFICATION	8.794907999181983E-6	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999966344482716	WITHOUT_CLASSIFICATION	3.3655517284585216E-6	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999997175432662	WITHOUT_CLASSIFICATION	2.8245673380284166E-7	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999998235403655	WITHOUT_CLASSIFICATION	1.7645963437202217E-7	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999989570094	WITHOUT_CLASSIFICATION	1.0429905554133976E-9	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999999552939303	WITHOUT_CLASSIFICATION	4.4706069727322643E-8	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998617950328	WITHOUT_CLASSIFICATION	1.3820496721209027E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9706124999239298	WITHOUT_CLASSIFICATION	0.029387500076070203	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9922357469140106	WITHOUT_CLASSIFICATION	0.0077642530859893255	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999742331133307	WITHOUT_CLASSIFICATION	2.5766886669375312E-5	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999980402826395	WITHOUT_CLASSIFICATION	1.9597173604556562E-6	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999289340694945	WITHOUT_CLASSIFICATION	7.106593050561131E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999977133240734	WITHOUT_CLASSIFICATION	2.2866759266006503E-6	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999996671560948	WITHOUT_CLASSIFICATION	3.328439051821243E-7	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9457821054543076	WITHOUT_CLASSIFICATION	0.054217894545692334	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999847830866883	WITHOUT_CLASSIFICATION	1.5216913311752815E-5	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999999993506132	WITHOUT_CLASSIFICATION	6.493868046492138E-9	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998262725501	WITHOUT_CLASSIFICATION	1.7372744978806367E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998262725501	WITHOUT_CLASSIFICATION	1.7372744978806367E-7	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999995235009113	WITHOUT_CLASSIFICATION	4.7649908874466487E-7	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999996125448031	WITHOUT_CLASSIFICATION	3.874551969548701E-7	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.99999988180799	WITHOUT_CLASSIFICATION	1.1819201005079012E-7	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999967846557871	WITHOUT_CLASSIFICATION	3.2153442129387165E-6	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999990462906063	WITHOUT_CLASSIFICATION	9.53709393660145E-7	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999712451443556	WITHOUT_CLASSIFICATION	2.8754855644285964E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999999915616976	WITHOUT_CLASSIFICATION	8.438302400826264E-8	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999835995464909	WITHOUT_CLASSIFICATION	1.6400453509071566E-5	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999931471168088	WITHOUT_CLASSIFICATION	6.852883191285917E-6	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999727308675	WITHOUT_CLASSIFICATION	2.7269132565738073E-8	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999997339037746	WITHOUT_CLASSIFICATION	2.6609622541198036E-7	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999431238574223	WITHOUT_CLASSIFICATION	5.6876142577588146E-5	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999805438532	WITHOUT_CLASSIFICATION	1.9456146752518188E-8	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999975834722381	WITHOUT_CLASSIFICATION	2.4165277618749243E-6	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999911650765283	WITHOUT_CLASSIFICATION	8.834923471695601E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999927567445098	WITHOUT_CLASSIFICATION	7.243255490293319E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989123675382	WITHOUT_CLASSIFICATION	1.0876324617828512E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989123675382	WITHOUT_CLASSIFICATION	1.0876324617828512E-6	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999986007417309	WITHOUT_CLASSIFICATION	1.3992582691933783E-6	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.995944865163175	WITHOUT_CLASSIFICATION	0.0040551348368249585	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9983416863618612	WITHOUT_CLASSIFICATION	0.0016583136381389217	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9968958604751704	WITHOUT_CLASSIFICATION	0.003104139524829556	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9997977699799441	WITHOUT_CLASSIFICATION	2.0223002005596022E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999954565768543	WITHOUT_CLASSIFICATION	4.543423145641317E-6	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999996487874088	WITHOUT_CLASSIFICATION	3.5121259121647066E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999876138158423	WITHOUT_CLASSIFICATION	1.2386184157602047E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999621413399276	WITHOUT_CLASSIFICATION	3.785866007245902E-5	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999975458785724	WITHOUT_CLASSIFICATION	2.4541214275374685E-6	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999990491327038	WITHOUT_CLASSIFICATION	9.508672961655725E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999876138158423	WITHOUT_CLASSIFICATION	1.2386184157602047E-5	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9988623019784969	WITHOUT_CLASSIFICATION	0.001137698021503129	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999754201384	WITHOUT_CLASSIFICATION	2.4579861570014827E-8	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999885540052	WITHOUT_CLASSIFICATION	1.1445994703450932E-8	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999936543039596	WITHOUT_CLASSIFICATION	6.345696040451481E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999976398140193	WITHOUT_CLASSIFICATION	2.3601859807184896E-6	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999993174037173	WITHOUT_CLASSIFICATION	6.825962827593967E-7	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999483435625	WITHOUT_CLASSIFICATION	5.1656437452753013E-8	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999991484031626	WITHOUT_CLASSIFICATION	8.515968373417054E-7	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999995022989675	WITHOUT_CLASSIFICATION	4.977010324564839E-7	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999934730421637	WITHOUT_CLASSIFICATION	6.526957836393595E-6	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997143377219054	WITHOUT_CLASSIFICATION	2.856622780946083E-4	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999846166451225	WITHOUT_CLASSIFICATION	1.5383354877494227E-5	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999998498082591	WITHOUT_CLASSIFICATION	1.5019174083756572E-7	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999999260941444	WITHOUT_CLASSIFICATION	7.390585561032803E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999927837075445	WITHOUT_CLASSIFICATION	7.216292455546579E-6	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.999999995773762	WITHOUT_CLASSIFICATION	4.226238068115884E-9	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999994992259993	WITHOUT_CLASSIFICATION	5.007740006679915E-7	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999889576651542	WITHOUT_CLASSIFICATION	1.104233484592222E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999774754861931	WITHOUT_CLASSIFICATION	2.2524513806906096E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999585313386	WITHOUT_CLASSIFICATION	4.146866140434458E-8	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999626333907219	WITHOUT_CLASSIFICATION	3.736660927807542E-5	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999898853974808	WITHOUT_CLASSIFICATION	1.0114602519303273E-5	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999488677625722	WITHOUT_CLASSIFICATION	5.113223742780955E-4	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999691574959588	WITHOUT_CLASSIFICATION	3.084250404112762E-5	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999866265976	WITHOUT_CLASSIFICATION	1.3373402408795263E-8	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999934613325197	WITHOUT_CLASSIFICATION	6.538667480365118E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999977847967291	WITHOUT_CLASSIFICATION	2.2152032708139383E-6	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999999146393579	WITHOUT_CLASSIFICATION	8.536064208536238E-7	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999997680445428	WITHOUT_CLASSIFICATION	2.3195545733177717E-7	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999990350021131	WITHOUT_CLASSIFICATION	9.649978869077036E-7	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999380020642	WITHOUT_CLASSIFICATION	6.199793583046476E-8	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9998727606624273	WITHOUT_CLASSIFICATION	1.272393375727459E-4	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9980914883359423	WITHOUT_CLASSIFICATION	0.0019085116640576588	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999948097622	WITHOUT_CLASSIFICATION	5.190237885523549E-9	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999994204452638	WITHOUT_CLASSIFICATION	5.795547362682148E-7	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999999547147516	WITHOUT_CLASSIFICATION	4.5285248432997874E-8	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998484391189	WITHOUT_CLASSIFICATION	1.515608811068576E-7	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999993061253465	WITHOUT_CLASSIFICATION	6.938746535958706E-7	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999692279469	WITHOUT_CLASSIFICATION	3.077205304434642E-8	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998462013437367	WITHOUT_CLASSIFICATION	1.537986562632871E-4	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999995543156982	WITHOUT_CLASSIFICATION	4.456843017744927E-7	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999981257130496	WITHOUT_CLASSIFICATION	1.8742869503946412E-6	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999990969133037	WITHOUT_CLASSIFICATION	9.030866962784545E-7	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999867274086	WITHOUT_CLASSIFICATION	1.3272591359093483E-8	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999733769016	WITHOUT_CLASSIFICATION	2.6623098369044084E-8	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999989869931566	WITHOUT_CLASSIFICATION	1.0130068434406115E-6	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999938466312303	WITHOUT_CLASSIFICATION	6.153368769821362E-6	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999992269535487	WITHOUT_CLASSIFICATION	7.730464513732919E-7	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999605802781765	WITHOUT_CLASSIFICATION	3.941972182350245E-5	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999955169921522	WITHOUT_CLASSIFICATION	4.483007847867145E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993560048774	WITHOUT_CLASSIFICATION	6.439951224716469E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999994058741923	WITHOUT_CLASSIFICATION	5.941258075798191E-7	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999961035334	WITHOUT_CLASSIFICATION	3.896466576522367E-9	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999951731463756	WITHOUT_CLASSIFICATION	4.826853624405805E-5	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999787252729	WITHOUT_CLASSIFICATION	2.1274727047142346E-8	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999992900287364	WITHOUT_CLASSIFICATION	7.0997126357831E-7	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999643563075625	WITHOUT_CLASSIFICATION	3.5643692437495843E-4	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999951233611077	WITHOUT_CLASSIFICATION	4.876638892293665E-6	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999996922301432	WITHOUT_CLASSIFICATION	3.077698568241719E-7	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998363581481349	WITHOUT_CLASSIFICATION	1.6364185186523258E-4	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999826498394043	WITHOUT_CLASSIFICATION	1.7350160595756428E-5	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999995052953884	WITHOUT_CLASSIFICATION	4.947046116317203E-7	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9979138400522323	WITHOUT_CLASSIFICATION	0.002086159947767619	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.8944241327445852	DEFECT	0.10557586725541473	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999808949008749	WITHOUT_CLASSIFICATION	1.9105099125037054E-5	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999856604302465	WITHOUT_CLASSIFICATION	1.4339569753430029E-5	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993560048774	WITHOUT_CLASSIFICATION	6.439951224716469E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999986313185317	WITHOUT_CLASSIFICATION	1.3686814683213343E-6	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9998798065809401	WITHOUT_CLASSIFICATION	1.2019341905981843E-4	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999652628607	WITHOUT_CLASSIFICATION	3.473713924501521E-8	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998679603807	WITHOUT_CLASSIFICATION	1.3203961936437682E-7	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999717197102194	WITHOUT_CLASSIFICATION	2.828028978063083E-5	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998375944005794	WITHOUT_CLASSIFICATION	1.624055994206972E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999621413399276	WITHOUT_CLASSIFICATION	3.785866007245902E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997664750836	WITHOUT_CLASSIFICATION	2.3352491639433784E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999994204452638	WITHOUT_CLASSIFICATION	5.795547362682148E-7	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9947382864607761	WITHOUT_CLASSIFICATION	0.005261713539223921	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999990280282043	WITHOUT_CLASSIFICATION	9.719717956899492E-7	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999304187326	WITHOUT_CLASSIFICATION	6.958126737735243E-8	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999356546024	WITHOUT_CLASSIFICATION	6.434539756695452E-8	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999987323845448	WITHOUT_CLASSIFICATION	1.2676154551014102E-6	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999077056846549	WITHOUT_CLASSIFICATION	9.229431534504704E-5	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999994285420899	WITHOUT_CLASSIFICATION	5.714579101492083E-7	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999933856994757	WITHOUT_CLASSIFICATION	6.614300524265376E-6	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9751689535768329	WITHOUT_CLASSIFICATION	0.024831046423167153	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999994193513149	WITHOUT_CLASSIFICATION	5.806486849967518E-7	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998912123856	WITHOUT_CLASSIFICATION	1.0878761442175439E-7	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999991685191557	WITHOUT_CLASSIFICATION	8.314808442099829E-7	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997442988042	WITHOUT_CLASSIFICATION	2.5570119584861154E-7	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997442988042	WITHOUT_CLASSIFICATION	2.5570119584861154E-7	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998448377605	WITHOUT_CLASSIFICATION	1.5516223951882985E-7	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999999883205007	WITHOUT_CLASSIFICATION	1.1679499291907334E-7	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999909037388	WITHOUT_CLASSIFICATION	9.096261310247138E-9	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999996674267	WITHOUT_CLASSIFICATION	3.3257328787013973E-10	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999991257428367	WITHOUT_CLASSIFICATION	8.742571633480569E-7	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999991612074027	WITHOUT_CLASSIFICATION	8.387925972520013E-7	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999545246525707	WITHOUT_CLASSIFICATION	4.5475347429238564E-5	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999966100680899	WITHOUT_CLASSIFICATION	3.3899319100717406E-6	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999999860517219	WITHOUT_CLASSIFICATION	1.394827809418991E-7	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999798979977816	WITHOUT_CLASSIFICATION	2.0102002218448063E-5	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9995081789764284	WITHOUT_CLASSIFICATION	4.918210235715796E-4	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9998403707637651	WITHOUT_CLASSIFICATION	1.5962923623495865E-4	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9998456733662593	WITHOUT_CLASSIFICATION	1.5432663374079892E-4	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998330179075	WITHOUT_CLASSIFICATION	1.6698209250729052E-7	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998216909389026	WITHOUT_CLASSIFICATION	1.7830906109737342E-4	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999766392971291	WITHOUT_CLASSIFICATION	2.3360702870810602E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999801088667101	WITHOUT_CLASSIFICATION	1.9891133289912388E-5	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999909981235	WITHOUT_CLASSIFICATION	9.001876329264451E-9	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999694125133747	WITHOUT_CLASSIFICATION	3.0587486625430487E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999999972508053	WITHOUT_CLASSIFICATION	2.7491947058943377E-8	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9997675071032589	WITHOUT_CLASSIFICATION	2.3249289674101927E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999280202146	WITHOUT_CLASSIFICATION	7.197978541714896E-8	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999996814367705	WITHOUT_CLASSIFICATION	3.18563229504069E-6	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999804987867599	WITHOUT_CLASSIFICATION	1.9501213240041573E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999999936777972	WITHOUT_CLASSIFICATION	6.322202798319827E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977683078995	WITHOUT_CLASSIFICATION	2.231692100397262E-6	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9989291302833931	WITHOUT_CLASSIFICATION	0.0010708697166068922	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999920900706951	WITHOUT_CLASSIFICATION	7.90992930488025E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999973170554315	WITHOUT_CLASSIFICATION	2.682944568608225E-6	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998202294910847	WITHOUT_CLASSIFICATION	1.7977050891530526E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9878390148436388	WITHOUT_CLASSIFICATION	0.012160985156361227	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999324883293799	WITHOUT_CLASSIFICATION	6.75116706201443E-5	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999480653395	WITHOUT_CLASSIFICATION	5.193466032705308E-8	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999974245355494	WITHOUT_CLASSIFICATION	2.575464450652563E-6	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999988658614692	WITHOUT_CLASSIFICATION	1.1341385307552788E-6	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999968126147304	WITHOUT_CLASSIFICATION	3.1873852697259564E-6	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999990238301432	WITHOUT_CLASSIFICATION	9.761698568018136E-6	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999978377634292	WITHOUT_CLASSIFICATION	2.162236570739605E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.999999933169953	WITHOUT_CLASSIFICATION	6.68300469655588E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999984837133294	WITHOUT_CLASSIFICATION	1.5162866706103693E-6	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694775778812	WITHOUT_CLASSIFICATION	3.052242211873853E-5	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999995585470656	WITHOUT_CLASSIFICATION	4.414529344604406E-7	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999646425588148	WITHOUT_CLASSIFICATION	3.535744118523155E-5	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999748744539263	WITHOUT_CLASSIFICATION	2.5125546073710075E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999982862308899	WITHOUT_CLASSIFICATION	1.713769110112628E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998387196999912	WITHOUT_CLASSIFICATION	1.6128030000874072E-4	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9985192463022483	WITHOUT_CLASSIFICATION	0.0014807536977516386	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999035662755	WITHOUT_CLASSIFICATION	9.643372447780373E-8	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999798736462	WITHOUT_CLASSIFICATION	2.0126353724395955E-8	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998735679442	WITHOUT_CLASSIFICATION	1.2643205576192145E-7	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999269181785314	WITHOUT_CLASSIFICATION	7.30818214685475E-5	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999981143197	WITHOUT_CLASSIFICATION	1.8856802211964963E-9	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999999914976526	WITHOUT_CLASSIFICATION	8.502347400239592E-8	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999991398984558	WITHOUT_CLASSIFICATION	8.601015442584702E-7	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999993411303644	WITHOUT_CLASSIFICATION	6.588696356190392E-7	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999943953246702	WITHOUT_CLASSIFICATION	5.604675329916219E-6	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999918570617862	WITHOUT_CLASSIFICATION	8.142938213872372E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999991080087487	WITHOUT_CLASSIFICATION	8.9199125124263E-7	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999985395294726	WITHOUT_CLASSIFICATION	1.4604705273508342E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999598449727458	WITHOUT_CLASSIFICATION	4.015502725412337E-5	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999089235874304	WITHOUT_CLASSIFICATION	9.107641256955403E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999972939201034	WITHOUT_CLASSIFICATION	2.706079896665753E-6	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999995227008336	WITHOUT_CLASSIFICATION	4.772991663971189E-7	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999959354262	WITHOUT_CLASSIFICATION	4.0645737429986996E-9	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999987941169279	WITHOUT_CLASSIFICATION	1.205883071974015E-6	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999992452289622	WITHOUT_CLASSIFICATION	7.547710378022679E-6	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999999797276636	WITHOUT_CLASSIFICATION	2.027233639855974E-7	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999995401339574	WITHOUT_CLASSIFICATION	4.598660425556999E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998087714577	WITHOUT_CLASSIFICATION	1.9122854235248742E-7	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999988332003502	WITHOUT_CLASSIFICATION	1.166799649770586E-6	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998087714577	WITHOUT_CLASSIFICATION	1.9122854235248742E-7	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999936229221579	WITHOUT_CLASSIFICATION	6.377077842084693E-6	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999994472459059	WITHOUT_CLASSIFICATION	5.527540940868363E-6	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999968029717801	WITHOUT_CLASSIFICATION	3.19702822004304E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999997490272645	WITHOUT_CLASSIFICATION	2.5097273547828753E-7	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999988603327018	WITHOUT_CLASSIFICATION	1.139667298158858E-6	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999996573976776	WITHOUT_CLASSIFICATION	3.4260232242393667E-7	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999968227950684	WITHOUT_CLASSIFICATION	3.177204931571947E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999333276325	WITHOUT_CLASSIFICATION	6.667236761390967E-8	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999811000476235	WITHOUT_CLASSIFICATION	1.8899952376498096E-4	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999996280262557	WITHOUT_CLASSIFICATION	3.719737442539123E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999986090218327	WITHOUT_CLASSIFICATION	1.3909781673466427E-6	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999907655392121	WITHOUT_CLASSIFICATION	9.234460787897559E-6	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999992924761	WITHOUT_CLASSIFICATION	7.075238617302145E-10	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9992042809351608	WITHOUT_CLASSIFICATION	7.957190648390844E-4	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9993478809654932	WITHOUT_CLASSIFICATION	6.52119034506825E-4	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999996839271753	WITHOUT_CLASSIFICATION	3.160728247717038E-7	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999946360340933	WITHOUT_CLASSIFICATION	5.36396590665288E-6	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999986031869711	WITHOUT_CLASSIFICATION	1.396813028927432E-6	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999631120556	WITHOUT_CLASSIFICATION	3.6887944425055137E-8	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999329065646	WITHOUT_CLASSIFICATION	6.70934353573075E-8	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999898025238063	WITHOUT_CLASSIFICATION	1.0197476193766448E-5	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999926736171623	WITHOUT_CLASSIFICATION	7.326382837789393E-6	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.997575836343653	WITHOUT_CLASSIFICATION	0.002424163656346944	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999606400655843	WITHOUT_CLASSIFICATION	3.9359934415635674E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999997297253991	WITHOUT_CLASSIFICATION	2.7027460083967134E-7	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999332443619632	WITHOUT_CLASSIFICATION	6.675563803675689E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999703272571001	WITHOUT_CLASSIFICATION	2.967274289980959E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999941474124354	WITHOUT_CLASSIFICATION	5.852587564631841E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998105777919	WITHOUT_CLASSIFICATION	1.894222082612443E-7	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9990107296188305	WITHOUT_CLASSIFICATION	9.89270381169435E-4	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.999961281668243	WITHOUT_CLASSIFICATION	3.871833175698224E-5	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9439270046573993	WITHOUT_CLASSIFICATION	0.056072995342600684	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9975044891755922	WITHOUT_CLASSIFICATION	0.002495510824407829	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999465094217831	WITHOUT_CLASSIFICATION	5.349057821683233E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999842594469553	WITHOUT_CLASSIFICATION	1.5740553044662558E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999914031886995	WITHOUT_CLASSIFICATION	8.596811300530407E-6	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999996245593896	WITHOUT_CLASSIFICATION	3.7544061033220274E-7	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998424714618	WITHOUT_CLASSIFICATION	1.575285381294559E-7	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999187836011051	WITHOUT_CLASSIFICATION	8.121639889499091E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999998383770915	WITHOUT_CLASSIFICATION	1.6162290851530118E-7	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999998700611886	WITHOUT_CLASSIFICATION	1.2993881143293758E-7	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999192489642466	WITHOUT_CLASSIFICATION	8.075103575336987E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9929002816462792	WITHOUT_CLASSIFICATION	0.007099718353720779	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999332443619632	WITHOUT_CLASSIFICATION	6.675563803675689E-5	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999298623265205	WITHOUT_CLASSIFICATION	7.013767347956126E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.999995568430604	WITHOUT_CLASSIFICATION	4.431569395958228E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9986604644156569	WITHOUT_CLASSIFICATION	0.0013395355843430338	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997981809276101	WITHOUT_CLASSIFICATION	2.0181907238981195E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999986564834378	WITHOUT_CLASSIFICATION	1.3435165623086602E-6	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999997932533093	WITHOUT_CLASSIFICATION	2.0674669078022487E-7	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999123810651	WITHOUT_CLASSIFICATION	8.76189349394642E-8	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.623818984649918	DEFECT	0.376181015350082	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999999770282086	WITHOUT_CLASSIFICATION	2.2971791411093876E-7	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999739329919587	WITHOUT_CLASSIFICATION	2.6067008041225742E-5	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999923971744237	WITHOUT_CLASSIFICATION	7.6028255763401675E-6	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999318704905	WITHOUT_CLASSIFICATION	6.812950952866237E-8	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999552339529999	WITHOUT_CLASSIFICATION	4.4766047000048464E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999948271995221	WITHOUT_CLASSIFICATION	5.172800477914954E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999523467787	WITHOUT_CLASSIFICATION	4.76532213071064E-8	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999967129913	WITHOUT_CLASSIFICATION	3.2870087182399767E-9	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999639814485	WITHOUT_CLASSIFICATION	3.601855160109789E-8	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999250031333	WITHOUT_CLASSIFICATION	7.499686679387457E-8	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999936246257137	WITHOUT_CLASSIFICATION	6.3753742862693015E-6	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999298623265205	WITHOUT_CLASSIFICATION	7.013767347956126E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999901451183677	WITHOUT_CLASSIFICATION	9.85488163224373E-6	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9966883792000365	WITHOUT_CLASSIFICATION	0.0033116207999634825	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999950527301683	WITHOUT_CLASSIFICATION	4.9472698316674615E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997264182672	WITHOUT_CLASSIFICATION	2.735817328393298E-7	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9996088821289589	WITHOUT_CLASSIFICATION	3.9111787104117405E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9983909734278196	WITHOUT_CLASSIFICATION	0.0016090265721803404	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9983909734278196	WITHOUT_CLASSIFICATION	0.0016090265721803404	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999961038213895	WITHOUT_CLASSIFICATION	3.8961786105092305E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9983909734278196	WITHOUT_CLASSIFICATION	0.0016090265721803404	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9983909734278196	WITHOUT_CLASSIFICATION	0.0016090265721803404	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9988626077955839	WITHOUT_CLASSIFICATION	0.0011373922044162087	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9997993866863714	WITHOUT_CLASSIFICATION	2.0061331362862544E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999740470827	WITHOUT_CLASSIFICATION	2.595291729598795E-8	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999253112887	WITHOUT_CLASSIFICATION	7.468871131572049E-8	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9941935126018655	WITHOUT_CLASSIFICATION	0.005806487398134412	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999998714698421	WITHOUT_CLASSIFICATION	1.2853015796024688E-7	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9986899295590741	WITHOUT_CLASSIFICATION	0.001310070440925989	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999972996418729	WITHOUT_CLASSIFICATION	2.700358127095069E-6	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999766102160216	WITHOUT_CLASSIFICATION	2.3389783978414345E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999970638990845	WITHOUT_CLASSIFICATION	2.936100915473834E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999985201379854	WITHOUT_CLASSIFICATION	1.4798620146592011E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999656181235035	WITHOUT_CLASSIFICATION	3.438187649663227E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999995621369999	WITHOUT_CLASSIFICATION	4.378630000490799E-7	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999986358973064	WITHOUT_CLASSIFICATION	1.364102693570337E-6	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999987793735287	WITHOUT_CLASSIFICATION	1.2206264713002685E-6	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9992426424152867	WITHOUT_CLASSIFICATION	7.573575847133587E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999992135178087	WITHOUT_CLASSIFICATION	7.864821912593482E-7	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999644444914862	WITHOUT_CLASSIFICATION	3.555550851367784E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999675807493784	WITHOUT_CLASSIFICATION	3.241925062159683E-4	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999986410662886	WITHOUT_CLASSIFICATION	1.358933711500579E-6	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999985588693118	WITHOUT_CLASSIFICATION	1.4411306881733506E-6	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999926290989891	WITHOUT_CLASSIFICATION	7.370901010929187E-6	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999992135178087	WITHOUT_CLASSIFICATION	7.864821912593482E-7	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999703272571001	WITHOUT_CLASSIFICATION	2.967274289980959E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.99999681147574	WITHOUT_CLASSIFICATION	3.1885242599443795E-6	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997783641804	WITHOUT_CLASSIFICATION	2.2163581956808768E-7	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997744321255	WITHOUT_CLASSIFICATION	2.255678744443499E-7	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.999995762887884	WITHOUT_CLASSIFICATION	4.237112115942653E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999992736041217	WITHOUT_CLASSIFICATION	7.263958783089585E-6	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.999998781078469	WITHOUT_CLASSIFICATION	1.2189215311197397E-6	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998905570801515	WITHOUT_CLASSIFICATION	1.09442919848581E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999997671758297	WITHOUT_CLASSIFICATION	2.3282417029299865E-7	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999998982763151	WITHOUT_CLASSIFICATION	1.0172368493800594E-7	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999590822398317	WITHOUT_CLASSIFICATION	4.0917760168254476E-5	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999974142928133	WITHOUT_CLASSIFICATION	2.5857071867054425E-5	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999999529253033	WITHOUT_CLASSIFICATION	4.7074696697185946E-7	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999686976159	WITHOUT_CLASSIFICATION	3.1302384209091745E-8	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.999773818456666	WITHOUT_CLASSIFICATION	2.2618154333411234E-4	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999694848457	WITHOUT_CLASSIFICATION	3.051515425289146E-8	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999935554284829	WITHOUT_CLASSIFICATION	6.444571517115775E-6	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999871976255165	WITHOUT_CLASSIFICATION	1.280237448361826E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999972965110525	WITHOUT_CLASSIFICATION	2.703488947368305E-6	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999975692278521	WITHOUT_CLASSIFICATION	2.4307721478852633E-6	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999820240837622	WITHOUT_CLASSIFICATION	1.7975916237804974E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999998104378031	WITHOUT_CLASSIFICATION	1.895621968572814E-7	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999999418192687	WITHOUT_CLASSIFICATION	5.818073130382595E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999997671758297	WITHOUT_CLASSIFICATION	2.3282417029299865E-7	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999138079582	WITHOUT_CLASSIFICATION	8.619204182739519E-8	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.999999550424591	WITHOUT_CLASSIFICATION	4.4957540900897405E-7	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999890938492942	WITHOUT_CLASSIFICATION	1.0906150705737947E-5	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999999121687615	WITHOUT_CLASSIFICATION	8.783123856004211E-8	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998284702734	WITHOUT_CLASSIFICATION	1.715297267456802E-7	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999922717010923	WITHOUT_CLASSIFICATION	7.728298907830492E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999881393287487	WITHOUT_CLASSIFICATION	1.1860671251261165E-5	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999999460100207	WITHOUT_CLASSIFICATION	5.39899793248117E-8	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999993120879513	WITHOUT_CLASSIFICATION	6.879120487708935E-7	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999442425551385	WITHOUT_CLASSIFICATION	5.5757444861442275E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999151435752	WITHOUT_CLASSIFICATION	8.485642485906707E-8	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999865226446143	WITHOUT_CLASSIFICATION	1.34773553856918E-5	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999938383453597	WITHOUT_CLASSIFICATION	6.1616546402648244E-6	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999999108226	WITHOUT_CLASSIFICATION	8.917745020658329E-11	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981622329152	WITHOUT_CLASSIFICATION	1.8377670847451195E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999918765355397	WITHOUT_CLASSIFICATION	8.123464460351237E-6	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994130150003	WITHOUT_CLASSIFICATION	5.869849996779364E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999151435752	WITHOUT_CLASSIFICATION	8.485642485906707E-8	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999478445959	WITHOUT_CLASSIFICATION	5.2155404184651326E-8	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9994825023197866	WITHOUT_CLASSIFICATION	5.174976802134164E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999990339945061	WITHOUT_CLASSIFICATION	9.660054939345927E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999995359083114	WITHOUT_CLASSIFICATION	4.640916886308208E-7	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999486898790696	WITHOUT_CLASSIFICATION	5.131012093051403E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999998754156302	WITHOUT_CLASSIFICATION	1.2458436987082527E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981622329152	WITHOUT_CLASSIFICATION	1.8377670847451195E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999982810908226	WITHOUT_CLASSIFICATION	1.7189091773900973E-5	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964850308778	WITHOUT_CLASSIFICATION	3.514969122205876E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999236015918	WITHOUT_CLASSIFICATION	7.639840816458604E-8	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971219908254	WITHOUT_CLASSIFICATION	2.8780091746541003E-6	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912966788987	WITHOUT_CLASSIFICATION	8.703321101246732E-6	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996200558082	WITHOUT_CLASSIFICATION	3.7994419174934364E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995926810479	WITHOUT_CLASSIFICATION	4.073189521652046E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995926810479	WITHOUT_CLASSIFICATION	4.073189521652046E-7	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999989800849222	WITHOUT_CLASSIFICATION	1.0199150778666449E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999993119444032	WITHOUT_CLASSIFICATION	6.880555967504521E-7	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999978480741659	WITHOUT_CLASSIFICATION	2.1519258340908684E-6	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.999962996478561	WITHOUT_CLASSIFICATION	3.700352143899701E-5	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9443719792425405	WITHOUT_CLASSIFICATION	0.055628020757459484	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994263448354	WITHOUT_CLASSIFICATION	5.736551645730348E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957870833132	WITHOUT_CLASSIFICATION	4.21291668683762E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956245674898	WITHOUT_CLASSIFICATION	4.375432510158582E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999998540417832	WITHOUT_CLASSIFICATION	1.4595821693807708E-7	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999784283277783	WITHOUT_CLASSIFICATION	2.1571672221808932E-5	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994263448354	WITHOUT_CLASSIFICATION	5.736551645730348E-7	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957870833132	WITHOUT_CLASSIFICATION	4.21291668683762E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956245674898	WITHOUT_CLASSIFICATION	4.375432510158582E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999996341891538	WITHOUT_CLASSIFICATION	3.6581084618429427E-7	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.999996386020956	WITHOUT_CLASSIFICATION	3.613979043926255E-6	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9998631959571186	WITHOUT_CLASSIFICATION	1.368040428814634E-4	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999986886014237	WITHOUT_CLASSIFICATION	1.3113985762200568E-6	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999998962036017	WITHOUT_CLASSIFICATION	1.0379639824948532E-7	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999407587057263	WITHOUT_CLASSIFICATION	5.924129427376351E-5	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999906882487042	WITHOUT_CLASSIFICATION	9.311751295898201E-6	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999997640991735	WITHOUT_CLASSIFICATION	2.3590082658172303E-7	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999811734811976	WITHOUT_CLASSIFICATION	1.8826518802400558E-5	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999991314586956	WITHOUT_CLASSIFICATION	8.685413043788087E-7	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999810907967	WITHOUT_CLASSIFICATION	1.8909203232234454E-8	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9991614600294785	WITHOUT_CLASSIFICATION	8.385399705215649E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999489691246468	WITHOUT_CLASSIFICATION	5.1030875353283386E-5	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999999135702652	WITHOUT_CLASSIFICATION	8.642973479407655E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999989645731079	WITHOUT_CLASSIFICATION	1.0354268922044594E-6	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999535922965977	WITHOUT_CLASSIFICATION	4.640770340232105E-5	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999996440351977	WITHOUT_CLASSIFICATION	3.5596480234503905E-7	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999940768830902	WITHOUT_CLASSIFICATION	5.923116909810432E-6	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999990435495999	WITHOUT_CLASSIFICATION	9.564504000780485E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999996395015324	WITHOUT_CLASSIFICATION	3.604984676638354E-7	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999983726930288	WITHOUT_CLASSIFICATION	1.6273069712747803E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999803398524373	WITHOUT_CLASSIFICATION	1.9660147562704572E-4	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.99999996793804	WITHOUT_CLASSIFICATION	3.206195994463492E-8	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999274116551	WITHOUT_CLASSIFICATION	7.258834491302255E-8	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999836999623	WITHOUT_CLASSIFICATION	1.630003770960164E-8	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999476018039152	WITHOUT_CLASSIFICATION	5.239819608485638E-5	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937229448672	WITHOUT_CLASSIFICATION	6.277055132811194E-6	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922635959948	WITHOUT_CLASSIFICATION	7.73640400526607E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999760375892	WITHOUT_CLASSIFICATION	2.3962410739762506E-8	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980797498216	WITHOUT_CLASSIFICATION	1.9202501784057614E-6	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999109249476263	WITHOUT_CLASSIFICATION	8.907505237362224E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999989300907021	WITHOUT_CLASSIFICATION	1.0699092979434027E-6	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999989300907021	WITHOUT_CLASSIFICATION	1.0699092979434027E-6	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999984551959	WITHOUT_CLASSIFICATION	1.544804177837805E-9	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999998219270412	WITHOUT_CLASSIFICATION	1.7807295881938792E-7	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999986060655653	WITHOUT_CLASSIFICATION	1.3939344346768834E-6	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999431238574223	WITHOUT_CLASSIFICATION	5.6876142577588146E-5	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999998427595141	WITHOUT_CLASSIFICATION	1.5724048573880618E-7	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999895414887621	WITHOUT_CLASSIFICATION	1.0458511237931721E-5	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9998861697550767	WITHOUT_CLASSIFICATION	1.1383024492323478E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999999528125805	WITHOUT_CLASSIFICATION	4.718741952942006E-8	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999993548276215	WITHOUT_CLASSIFICATION	6.451723784138393E-7	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997301306351	WITHOUT_CLASSIFICATION	2.698693648528372E-7	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999240146011	WITHOUT_CLASSIFICATION	7.59853988927079E-7	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935401689585	WITHOUT_CLASSIFICATION	6.459831041477433E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995570424718	WITHOUT_CLASSIFICATION	4.429575281374495E-7	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998145017569	WITHOUT_CLASSIFICATION	1.854982432121389E-7	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992495233265	WITHOUT_CLASSIFICATION	7.504766734538808E-7	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995548668608	WITHOUT_CLASSIFICATION	4.451331392537982E-7	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989065350762	WITHOUT_CLASSIFICATION	1.093464923840444E-6	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982491277731	WITHOUT_CLASSIFICATION	1.7508722268234184E-6	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959497976694	WITHOUT_CLASSIFICATION	4.050202330666537E-6	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998353832338	WITHOUT_CLASSIFICATION	1.646167661521526E-7	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999989970579954	WITHOUT_CLASSIFICATION	1.002942004613855E-6	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9991408567155906	WITHOUT_CLASSIFICATION	8.591432844094831E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999990345795311	WITHOUT_CLASSIFICATION	9.654204688459545E-7	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999952798269821	WITHOUT_CLASSIFICATION	4.720173017906097E-6	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999997449186988	WITHOUT_CLASSIFICATION	2.550813011110979E-7	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999987922565241	WITHOUT_CLASSIFICATION	1.2077434758956195E-6	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999801772023	WITHOUT_CLASSIFICATION	1.9822797733231748E-8	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999871097094438	WITHOUT_CLASSIFICATION	1.2890290556172203E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999990345795311	WITHOUT_CLASSIFICATION	9.654204688459545E-7	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999990345795311	WITHOUT_CLASSIFICATION	9.654204688459545E-7	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999978301296422	WITHOUT_CLASSIFICATION	2.169870357911961E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999997865655417	WITHOUT_CLASSIFICATION	2.1343445827418297E-7	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999992311872	WITHOUT_CLASSIFICATION	7.688128798817213E-10	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999995074986071	WITHOUT_CLASSIFICATION	4.925013928807974E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999977133240734	WITHOUT_CLASSIFICATION	2.2866759266006503E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999996395015324	WITHOUT_CLASSIFICATION	3.604984676638354E-7	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999911710926	WITHOUT_CLASSIFICATION	8.828907386217385E-9	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9998363936668553	WITHOUT_CLASSIFICATION	1.6360633314475788E-4	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999935374483016	WITHOUT_CLASSIFICATION	6.462551698349361E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964793152295	WITHOUT_CLASSIFICATION	3.5206847704182526E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999995175683624	WITHOUT_CLASSIFICATION	4.824316375527802E-7	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933144366608	WITHOUT_CLASSIFICATION	6.685563339169772E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991569021096	WITHOUT_CLASSIFICATION	8.430978904525612E-7	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991569021096	WITHOUT_CLASSIFICATION	8.430978904525612E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999998395595925	WITHOUT_CLASSIFICATION	1.6044040745115356E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999998395595925	WITHOUT_CLASSIFICATION	1.6044040745115356E-7	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972697192326	WITHOUT_CLASSIFICATION	2.730280767298582E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977357835128	WITHOUT_CLASSIFICATION	2.264216487217282E-6	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999189946340395	WITHOUT_CLASSIFICATION	8.100536596045755E-5	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976713312022	WITHOUT_CLASSIFICATION	2.328668797838465E-6	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999157921361649	WITHOUT_CLASSIFICATION	8.420786383502563E-5	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999670447726252	WITHOUT_CLASSIFICATION	3.29552273747973E-4	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996863371551536	WITHOUT_CLASSIFICATION	3.1366284484631024E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804776733491	WITHOUT_CLASSIFICATION	1.9522326650955756E-5	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999850578185073	WITHOUT_CLASSIFICATION	1.4942181492674371E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999610210932	WITHOUT_CLASSIFICATION	3.8978906756839474E-8	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999521100585	WITHOUT_CLASSIFICATION	4.788994149289023E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999748346758635	WITHOUT_CLASSIFICATION	2.5165324136546932E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.99999639871236	WITHOUT_CLASSIFICATION	3.6012876399825475E-6	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999690423800517	WITHOUT_CLASSIFICATION	3.095761994839528E-5	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.999995541623217	WITHOUT_CLASSIFICATION	4.458376783012805E-6	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999929467815935	WITHOUT_CLASSIFICATION	7.053218406645974E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999993816773293	WITHOUT_CLASSIFICATION	6.183226707301971E-7	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999993816773293	WITHOUT_CLASSIFICATION	6.183226707301971E-7	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999998828341314	WITHOUT_CLASSIFICATION	1.1716586853511636E-7	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999932674985886	WITHOUT_CLASSIFICATION	6.732501411328666E-6	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999921363322	WITHOUT_CLASSIFICATION	7.863667878814123E-9	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999650608654416	WITHOUT_CLASSIFICATION	3.493913455835889E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998921515987	WITHOUT_CLASSIFICATION	1.0784840130023928E-5	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969945231272	WITHOUT_CLASSIFICATION	3.0054768727314026E-6	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999986979369172	WITHOUT_CLASSIFICATION	1.3020630828076767E-6	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997488108405532	WITHOUT_CLASSIFICATION	2.5118915944668483E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999980514465935	WITHOUT_CLASSIFICATION	1.9485534063968447E-6	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999600006739	WITHOUT_CLASSIFICATION	3.999932606174363E-8	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999990704138026	WITHOUT_CLASSIFICATION	9.295861973981341E-6	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997458532627308	WITHOUT_CLASSIFICATION	2.54146737269236E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922352373873	WITHOUT_CLASSIFICATION	7.764762612630326E-6	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999963353102646	WITHOUT_CLASSIFICATION	3.6646897355275016E-6	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999998443908689	WITHOUT_CLASSIFICATION	1.5560913110909465E-6	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999054894638378	WITHOUT_CLASSIFICATION	9.451053616220448E-5	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998156885482	WITHOUT_CLASSIFICATION	1.843114517069328E-7	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999125319669253	WITHOUT_CLASSIFICATION	8.746803307471812E-5	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998373697326437	WITHOUT_CLASSIFICATION	1.626302673563642E-4	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.999990250127426	WITHOUT_CLASSIFICATION	9.749872573894217E-6	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999973359276	WITHOUT_CLASSIFICATION	2.6640724447123086E-9	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999979204726078	WITHOUT_CLASSIFICATION	2.0795273921970982E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999985976467862	WITHOUT_CLASSIFICATION	1.4023532137814232E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999994622031374	WITHOUT_CLASSIFICATION	5.377968626110518E-7	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999994653239409	WITHOUT_CLASSIFICATION	5.346760591173855E-7	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998117846399966	WITHOUT_CLASSIFICATION	1.8821536000340278E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999834325311707	WITHOUT_CLASSIFICATION	1.6567468829289578E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999660417568169	WITHOUT_CLASSIFICATION	3.395824318311326E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999904331955	WITHOUT_CLASSIFICATION	9.566804354376805E-9	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999993949526964	WITHOUT_CLASSIFICATION	6.050473035093208E-7	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999984940418267	WITHOUT_CLASSIFICATION	1.5059581733171125E-6	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999985788641697	WITHOUT_CLASSIFICATION	1.4211358303561013E-6	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999947919129807	WITHOUT_CLASSIFICATION	5.208087019420411E-6	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.99999940277408	WITHOUT_CLASSIFICATION	5.972259201400482E-7	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999974988865158	WITHOUT_CLASSIFICATION	2.5011134841954522E-5	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999944040289118	WITHOUT_CLASSIFICATION	5.595971088188104E-6	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999859707355226	WITHOUT_CLASSIFICATION	1.4029264477425807E-5	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999999050810897	WITHOUT_CLASSIFICATION	9.491891035750564E-8	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999996984581249	WITHOUT_CLASSIFICATION	3.0154187510761046E-7	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999999486886604	WITHOUT_CLASSIFICATION	5.131133952394331E-8	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999986690686359	WITHOUT_CLASSIFICATION	1.330931364075646E-6	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999991685005797	WITHOUT_CLASSIFICATION	8.314994202298161E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9942171828105025	WITHOUT_CLASSIFICATION	0.005782817189497432	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999964206623039	WITHOUT_CLASSIFICATION	3.579337696034303E-6	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999953835541224	WITHOUT_CLASSIFICATION	4.616445877647963E-6	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998161587548364	WITHOUT_CLASSIFICATION	1.838412451636804E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999999151061073	WITHOUT_CLASSIFICATION	8.489389268853078E-8	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999911526383175	WITHOUT_CLASSIFICATION	8.847361682449529E-6	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999739698665515	WITHOUT_CLASSIFICATION	2.6030133448511135E-5	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999991145031858	WITHOUT_CLASSIFICATION	8.854968141168663E-7	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999988182095708	WITHOUT_CLASSIFICATION	1.1817904291546508E-6	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999854734267956	WITHOUT_CLASSIFICATION	1.452657320438316E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999956387702998	WITHOUT_CLASSIFICATION	4.361229700092892E-6	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999435240249771	WITHOUT_CLASSIFICATION	5.647597502285241E-5	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999992274015417	WITHOUT_CLASSIFICATION	7.725984583052205E-6	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999660957200238	WITHOUT_CLASSIFICATION	3.390427997619933E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999953017287501	WITHOUT_CLASSIFICATION	4.6982712498383E-6	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999879206587154	WITHOUT_CLASSIFICATION	1.2079341284508848E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999690121373	WITHOUT_CLASSIFICATION	3.098786279423402E-8	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999947876302282	WITHOUT_CLASSIFICATION	5.212369771819254E-6	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999963343285959	WITHOUT_CLASSIFICATION	3.665671404180233E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999993159478835	WITHOUT_CLASSIFICATION	6.840521164671826E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999971619695	WITHOUT_CLASSIFICATION	2.8380306222380925E-9	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999804517015	WITHOUT_CLASSIFICATION	1.9548298494631437E-7	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999264219	WITHOUT_CLASSIFICATION	7.357809991148903E-8	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999989174837824	WITHOUT_CLASSIFICATION	1.0825162175991855E-6	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999399877746137	WITHOUT_CLASSIFICATION	6.001222538617792E-5	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999996962051042	WITHOUT_CLASSIFICATION	3.0379489583847306E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999378705632169	WITHOUT_CLASSIFICATION	6.212943678301003E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999378705632169	WITHOUT_CLASSIFICATION	6.212943678301003E-5	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999998844726482	WITHOUT_CLASSIFICATION	1.1552735183686202E-7	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999989285361724	WITHOUT_CLASSIFICATION	1.0714638275700513E-6	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999976373748269	WITHOUT_CLASSIFICATION	2.3626251730917055E-6	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999993369492477	WITHOUT_CLASSIFICATION	6.630507522995422E-6	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999905321495338	WITHOUT_CLASSIFICATION	9.467850466197117E-6	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999977160031285	WITHOUT_CLASSIFICATION	2.2839968714994376E-6	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999983199491002	WITHOUT_CLASSIFICATION	1.6800508999054E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999505625605442	WITHOUT_CLASSIFICATION	4.943743945583089E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998851106882064	WITHOUT_CLASSIFICATION	1.1488931179348639E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999965409058824	WITHOUT_CLASSIFICATION	3.4590941175792822E-6	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999986211954633	WITHOUT_CLASSIFICATION	1.3788045365646546E-6	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996537868769	WITHOUT_CLASSIFICATION	3.4621312302100756E-7	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999996927393588	WITHOUT_CLASSIFICATION	3.072606411664239E-7	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999858093391	WITHOUT_CLASSIFICATION	1.4190660897913118E-8	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999981021665658	WITHOUT_CLASSIFICATION	1.897833434198305E-6	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999904595421186	WITHOUT_CLASSIFICATION	9.54045788135345E-6	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999969215371716	WITHOUT_CLASSIFICATION	3.078462828342719E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9807694569361416	WITHOUT_CLASSIFICATION	0.019230543063858394	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999988678172165	WITHOUT_CLASSIFICATION	1.132182783556503E-6	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999992857149481	WITHOUT_CLASSIFICATION	7.142850518520674E-7	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999950587322249	WITHOUT_CLASSIFICATION	4.941267775072114E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999998521972034	WITHOUT_CLASSIFICATION	1.4780279644633262E-7	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999921827405875	WITHOUT_CLASSIFICATION	7.817259412482574E-6	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999596503447503	WITHOUT_CLASSIFICATION	4.0349655249669095E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999407066861997	WITHOUT_CLASSIFICATION	5.929331380024897E-5	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999815927291342	WITHOUT_CLASSIFICATION	1.840727086577372E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999989652043972	WITHOUT_CLASSIFICATION	1.0347956027788963E-6	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999964453568173	WITHOUT_CLASSIFICATION	3.554643182587197E-6	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999995612698462	WITHOUT_CLASSIFICATION	4.3873015376886926E-7	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999576317371	WITHOUT_CLASSIFICATION	4.236826302116488E-8	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999998664941037	WITHOUT_CLASSIFICATION	1.3350589628797667E-7	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999997191347729	WITHOUT_CLASSIFICATION	2.8086522718603945E-7	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999997296316923	WITHOUT_CLASSIFICATION	2.7036830768340837E-7	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999981318024638	WITHOUT_CLASSIFICATION	1.8681975362912564E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999552080729115	WITHOUT_CLASSIFICATION	4.479192708837568E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999552080729115	WITHOUT_CLASSIFICATION	4.479192708837568E-5	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999954555421533	WITHOUT_CLASSIFICATION	4.544457846603449E-6	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999263750352362	WITHOUT_CLASSIFICATION	7.362496476378158E-5	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999884484539688	WITHOUT_CLASSIFICATION	1.1551546031110504E-5	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999915064691514	WITHOUT_CLASSIFICATION	8.493530848604723E-6	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999115861	WITHOUT_CLASSIFICATION	8.841394699658639E-11	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999777647128958	WITHOUT_CLASSIFICATION	2.22352871042037E-5	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999967586785139	WITHOUT_CLASSIFICATION	3.2413214861096387E-6	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999942724636367	WITHOUT_CLASSIFICATION	5.727536363337545E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9997965926694233	WITHOUT_CLASSIFICATION	2.034073305766014E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999855833529696	WITHOUT_CLASSIFICATION	1.441664703035557E-5	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9995923445442179	WITHOUT_CLASSIFICATION	4.076554557821175E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999896561016762	WITHOUT_CLASSIFICATION	1.0343898323754634E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999955332630894	WITHOUT_CLASSIFICATION	4.466736910546291E-6	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999883111863267	WITHOUT_CLASSIFICATION	1.168881367342956E-5	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999391077985	WITHOUT_CLASSIFICATION	6.089220155194734E-8	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9903537047840957	WITHOUT_CLASSIFICATION	0.009646295215904311	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9903537047840957	WITHOUT_CLASSIFICATION	0.009646295215904311	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999291186862663	WITHOUT_CLASSIFICATION	7.088131373367805E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999963894674827	WITHOUT_CLASSIFICATION	3.610532517409216E-6	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999970597807628	WITHOUT_CLASSIFICATION	2.9402192371369903E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999518644583	WITHOUT_CLASSIFICATION	4.8135541603645426E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999748346758635	WITHOUT_CLASSIFICATION	2.5165324136546932E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995609331903504	WITHOUT_CLASSIFICATION	4.390668096494726E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999371337174	WITHOUT_CLASSIFICATION	6.28662825272541E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999992823336566	WITHOUT_CLASSIFICATION	7.176663434237467E-7	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999992823336566	WITHOUT_CLASSIFICATION	7.176663434237467E-7	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999274174411171	WITHOUT_CLASSIFICATION	7.258255888283545E-5	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999919086506	WITHOUT_CLASSIFICATION	8.091349410424892E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999998716734483	WITHOUT_CLASSIFICATION	1.2832655172114738E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9998629889479443	WITHOUT_CLASSIFICATION	1.3701105205562596E-4	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999992499691502	WITHOUT_CLASSIFICATION	7.500308497432805E-7	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999784202744009	WITHOUT_CLASSIFICATION	2.1579725599155526E-5	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999894131817627	WITHOUT_CLASSIFICATION	1.0586818237194849E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999994912179869	WITHOUT_CLASSIFICATION	5.087820130852855E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999669035418	WITHOUT_CLASSIFICATION	3.309645819242212E-8	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9997011642122637	WITHOUT_CLASSIFICATION	2.988357877362155E-4	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999538558611933	WITHOUT_CLASSIFICATION	4.6144138806680116E-5	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999898848395322	WITHOUT_CLASSIFICATION	1.0115160467787094E-5	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999998251161644	WITHOUT_CLASSIFICATION	1.7488383570092885E-7	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999999702619762	WITHOUT_CLASSIFICATION	2.973802379350289E-7	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999973170554315	WITHOUT_CLASSIFICATION	2.682944568608225E-6	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999996801988777	WITHOUT_CLASSIFICATION	3.1980112219532875E-7	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999994425567977	WITHOUT_CLASSIFICATION	5.574432023358305E-7	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999969111163796	WITHOUT_CLASSIFICATION	3.0888836204519053E-6	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999935586462395	WITHOUT_CLASSIFICATION	6.4413537605133035E-6	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999725091487772	WITHOUT_CLASSIFICATION	2.7490851222768358E-5	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999995300563465	WITHOUT_CLASSIFICATION	4.699436535620131E-7	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999999348247226	WITHOUT_CLASSIFICATION	6.517527739727952E-7	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999032859030866	WITHOUT_CLASSIFICATION	9.671409691332289E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9998842834864415	WITHOUT_CLASSIFICATION	1.1571651355839292E-4	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999975167276816	WITHOUT_CLASSIFICATION	2.48327231853549E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999925678622515	WITHOUT_CLASSIFICATION	7.432137748536118E-6	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999871844028626	WITHOUT_CLASSIFICATION	1.281559713742503E-5	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999998574978	WITHOUT_CLASSIFICATION	1.42502253305547E-10	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999999399809897	WITHOUT_CLASSIFICATION	6.001901029900254E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999989123675382	WITHOUT_CLASSIFICATION	1.0876324617828512E-6	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999772739475814	WITHOUT_CLASSIFICATION	2.2726052418539682E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999956735149093	WITHOUT_CLASSIFICATION	4.326485090696732E-6	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9993162283822828	WITHOUT_CLASSIFICATION	6.837716177171172E-4	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999997781342933	WITHOUT_CLASSIFICATION	2.218657066873594E-7	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999998958594077	WITHOUT_CLASSIFICATION	1.041405922482397E-7	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999643720447949	WITHOUT_CLASSIFICATION	3.562795520502082E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999882518295204	WITHOUT_CLASSIFICATION	1.1748170479444148E-5	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999915515032176	WITHOUT_CLASSIFICATION	8.448496782302577E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999192957539	WITHOUT_CLASSIFICATION	8.070424603746997E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999548279995	WITHOUT_CLASSIFICATION	4.517200043526962E-8	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998824496191	WITHOUT_CLASSIFICATION	1.1755038087980595E-7	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9998053852712195	WITHOUT_CLASSIFICATION	1.9461472878041865E-4	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999931212430418	WITHOUT_CLASSIFICATION	6.878756958089884E-6	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999998907582316	WITHOUT_CLASSIFICATION	1.0924176841239819E-7	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999300797	WITHOUT_CLASSIFICATION	6.992036462943863E-11	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999293301386997	WITHOUT_CLASSIFICATION	7.066986130027074E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999192957539	WITHOUT_CLASSIFICATION	8.070424603746997E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999548279995	WITHOUT_CLASSIFICATION	4.517200043526962E-8	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999959586924578	WITHOUT_CLASSIFICATION	4.041307542129305E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999992233288979	WITHOUT_CLASSIFICATION	7.766711019859208E-7	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999999902232653	WITHOUT_CLASSIFICATION	9.77673469650103E-8	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999985955198301	WITHOUT_CLASSIFICATION	1.4044801699449263E-6	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999999132314354	WITHOUT_CLASSIFICATION	8.676856460785068E-7	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999468102864828	WITHOUT_CLASSIFICATION	5.318971351714335E-5	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998961199153634	WITHOUT_CLASSIFICATION	1.0388008463658102E-4	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999883115707604	WITHOUT_CLASSIFICATION	1.168842923967164E-5	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999985450121675	WITHOUT_CLASSIFICATION	1.4549878324760168E-6	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9956086788583681	WITHOUT_CLASSIFICATION	0.004391321141631938	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999999999901933	WITHOUT_CLASSIFICATION	9.806699535781567E-11	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9956086788583681	WITHOUT_CLASSIFICATION	0.004391321141631938	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999983673790186	WITHOUT_CLASSIFICATION	1.632620981494729E-6	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999991664573065	WITHOUT_CLASSIFICATION	8.335426935164438E-7	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999886466056469	WITHOUT_CLASSIFICATION	1.135339435308998E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999585668881	WITHOUT_CLASSIFICATION	4.143311190296156E-8	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9956409788507494	WITHOUT_CLASSIFICATION	0.004359021149250664	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999580952760208	WITHOUT_CLASSIFICATION	4.190472397933678E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999580952760208	WITHOUT_CLASSIFICATION	4.190472397933678E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999958560603424	WITHOUT_CLASSIFICATION	4.1439396576499746E-6	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999996990333437	WITHOUT_CLASSIFICATION	3.0096665625823877E-7	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999970718470393	WITHOUT_CLASSIFICATION	2.928152960755792E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999399007566537	WITHOUT_CLASSIFICATION	6.009924334619939E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999976289714796	WITHOUT_CLASSIFICATION	2.3710285204225457E-6	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.999960490889959	WITHOUT_CLASSIFICATION	3.950911004106722E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999990129526743	WITHOUT_CLASSIFICATION	9.870473256360056E-7	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999996454776745	WITHOUT_CLASSIFICATION	3.545223254721707E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999848993738107	WITHOUT_CLASSIFICATION	1.5100626189299702E-5	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.999977861457243	WITHOUT_CLASSIFICATION	2.2138542756990892E-5	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999996225015938	WITHOUT_CLASSIFICATION	3.7749840618733523E-7	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999925674715591	WITHOUT_CLASSIFICATION	7.432528440941579E-6	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999814918385594	WITHOUT_CLASSIFICATION	1.8508161440488852E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999995813244116	WITHOUT_CLASSIFICATION	4.1867558834432066E-7	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999995467553959	WITHOUT_CLASSIFICATION	4.5324460404809784E-7	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999915543378128	WITHOUT_CLASSIFICATION	8.445662187232924E-6	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999957522411279	WITHOUT_CLASSIFICATION	4.247758872134385E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998907994188	WITHOUT_CLASSIFICATION	1.0920058120644534E-7	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999943095858187	WITHOUT_CLASSIFICATION	5.690414181264059E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.999921625427658	WITHOUT_CLASSIFICATION	7.837457234209771E-5	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999544627268	WITHOUT_CLASSIFICATION	4.5537273230568394E-8	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999987833705714	WITHOUT_CLASSIFICATION	1.2166294286011822E-6	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999982597126018	WITHOUT_CLASSIFICATION	1.740287398200901E-6	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999998257223669	WITHOUT_CLASSIFICATION	1.7427763302763833E-7	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999999158414499	WITHOUT_CLASSIFICATION	8.41585501084344E-7	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999905532165524	WITHOUT_CLASSIFICATION	9.446783447670835E-6	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999998219818771	WITHOUT_CLASSIFICATION	1.7801812281691502E-7	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9992361789866474	WITHOUT_CLASSIFICATION	7.638210133525228E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.999999800867004	WITHOUT_CLASSIFICATION	1.9913299602570922E-7	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999998880789126	WITHOUT_CLASSIFICATION	1.1192108738146294E-7	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999611070560303	WITHOUT_CLASSIFICATION	3.889294396974769E-5	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999297245640133	WITHOUT_CLASSIFICATION	7.02754359867184E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999990129526743	WITHOUT_CLASSIFICATION	9.870473256360056E-7	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998499114561644	WITHOUT_CLASSIFICATION	1.500885438356255E-4	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999878518473644	WITHOUT_CLASSIFICATION	1.2148152635641058E-5	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.992486026645389	WITHOUT_CLASSIFICATION	0.007513973354610947	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999989711277579	WITHOUT_CLASSIFICATION	1.0288722420874245E-6	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999993851508533	WITHOUT_CLASSIFICATION	6.148491466534855E-7	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999998580680858	WITHOUT_CLASSIFICATION	1.419319141987011E-7	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999399007566537	WITHOUT_CLASSIFICATION	6.009924334619939E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999399007566537	WITHOUT_CLASSIFICATION	6.009924334619939E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999997978056789	WITHOUT_CLASSIFICATION	2.0219432101872768E-7	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999996681793302	WITHOUT_CLASSIFICATION	3.3182066976374807E-7	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999952497653576	WITHOUT_CLASSIFICATION	4.7502346424610205E-6	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999995406391655	WITHOUT_CLASSIFICATION	4.5936083446173583E-7	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999523702960046	WITHOUT_CLASSIFICATION	4.762970399548613E-5	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9994694899916522	WITHOUT_CLASSIFICATION	5.305100083478144E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9998928395063975	WITHOUT_CLASSIFICATION	1.071604936024524E-4	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999977797966036	WITHOUT_CLASSIFICATION	2.220203396404959E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999945115121877	WITHOUT_CLASSIFICATION	5.488487812345477E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999395415287	WITHOUT_CLASSIFICATION	6.04584713058463E-7	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999986829158205	WITHOUT_CLASSIFICATION	1.3170841794986978E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999179727207893	WITHOUT_CLASSIFICATION	8.202727921069186E-5	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999997254740407	WITHOUT_CLASSIFICATION	2.7452595927530616E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999395415287	WITHOUT_CLASSIFICATION	6.04584713058463E-7	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999994541857011	WITHOUT_CLASSIFICATION	5.458142987385323E-7	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999968504185415	WITHOUT_CLASSIFICATION	3.149581458441101E-6	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999879715451473	WITHOUT_CLASSIFICATION	1.2028454852629605E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9956153656943411	WITHOUT_CLASSIFICATION	0.004384634305658927	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999179727207893	WITHOUT_CLASSIFICATION	8.202727921069186E-5	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999769463897954	WITHOUT_CLASSIFICATION	2.3053610204612467E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999869959046829	WITHOUT_CLASSIFICATION	1.3004095317205375E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999990141109631	WITHOUT_CLASSIFICATION	9.8588903686567E-7	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999778042189388	WITHOUT_CLASSIFICATION	2.2195781061207925E-5	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999649454286084	WITHOUT_CLASSIFICATION	3.5054571391649606E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999998332803974	WITHOUT_CLASSIFICATION	1.6671960259799132E-7	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999965081274226	WITHOUT_CLASSIFICATION	3.491872577433655E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999942184174284	WITHOUT_CLASSIFICATION	5.78158257157382E-6	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999995187644916	WITHOUT_CLASSIFICATION	4.812355083854404E-7	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999440088361	WITHOUT_CLASSIFICATION	5.599116400640862E-8	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9995296079243305	WITHOUT_CLASSIFICATION	4.703920756695278E-4	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999994754538049	WITHOUT_CLASSIFICATION	5.245461951080072E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999395415287	WITHOUT_CLASSIFICATION	6.04584713058463E-7	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999769463897954	WITHOUT_CLASSIFICATION	2.3053610204612467E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999990141109631	WITHOUT_CLASSIFICATION	9.8588903686567E-7	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999754903431318	WITHOUT_CLASSIFICATION	2.4509656868130908E-5	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999820313792395	WITHOUT_CLASSIFICATION	1.7968620760549725E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999983714138186	WITHOUT_CLASSIFICATION	1.6285861812596776E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999179727207893	WITHOUT_CLASSIFICATION	8.202727921069186E-5	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999998603065267	WITHOUT_CLASSIFICATION	1.396934733627043E-7	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999984401033865	WITHOUT_CLASSIFICATION	1.5598966135027267E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999998064968042	WITHOUT_CLASSIFICATION	1.9350319580197386E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999984726502653	WITHOUT_CLASSIFICATION	1.5273497346029462E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999942184174284	WITHOUT_CLASSIFICATION	5.78158257157382E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999994541857011	WITHOUT_CLASSIFICATION	5.458142987385323E-7	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999909497430683	WITHOUT_CLASSIFICATION	9.050256931650316E-6	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999993833180406	WITHOUT_CLASSIFICATION	6.16681959441032E-7	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999993331806727	WITHOUT_CLASSIFICATION	6.668193272637683E-7	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999981035451067	WITHOUT_CLASSIFICATION	1.8964548933285668E-6	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999994011650759	WITHOUT_CLASSIFICATION	5.988349240857727E-7	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999999737229902	WITHOUT_CLASSIFICATION	2.6277009803384717E-7	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999739674963206	WITHOUT_CLASSIFICATION	2.6032503679498656E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999585668881	WITHOUT_CLASSIFICATION	4.143311190296156E-8	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997969294244	WITHOUT_CLASSIFICATION	2.0307057550936781E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999642515864946	WITHOUT_CLASSIFICATION	3.574841350551096E-5	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999901920588	WITHOUT_CLASSIFICATION	9.807941292408595E-9	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9996111724112089	WITHOUT_CLASSIFICATION	3.8882758879105076E-4	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999879140099535	WITHOUT_CLASSIFICATION	1.2085990046566602E-5	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999967966683186	WITHOUT_CLASSIFICATION	3.2033316814102277E-6	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999998832189602	WITHOUT_CLASSIFICATION	1.1678103979670105E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.999995111283421	WITHOUT_CLASSIFICATION	4.88871657898782E-6	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999467862998	WITHOUT_CLASSIFICATION	5.321370012910366E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999984726502653	WITHOUT_CLASSIFICATION	1.5273497346029462E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999642515864946	WITHOUT_CLASSIFICATION	3.574841350551096E-5	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999886393238103	WITHOUT_CLASSIFICATION	1.1360676189584846E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999929615658786	WITHOUT_CLASSIFICATION	7.038434121461354E-6	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999953855882779	WITHOUT_CLASSIFICATION	4.614411722002812E-6	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999993050181333	WITHOUT_CLASSIFICATION	6.949818667056313E-7	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999708506450667	WITHOUT_CLASSIFICATION	2.9149354933201253E-5	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999404825501	WITHOUT_CLASSIFICATION	5.9517449875708934E-8	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999794341384324	WITHOUT_CLASSIFICATION	2.056586156761274E-5	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9980336189120094	WITHOUT_CLASSIFICATION	0.0019663810879905607	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999798861334026	WITHOUT_CLASSIFICATION	2.0113866597388046E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998115500327177	WITHOUT_CLASSIFICATION	1.8844996728221744E-4	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999990414478221	WITHOUT_CLASSIFICATION	9.585521778870424E-7	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999689361733152	WITHOUT_CLASSIFICATION	3.1063826684780666E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999989462981131	WITHOUT_CLASSIFICATION	1.0537018867951168E-6	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999821129583129	WITHOUT_CLASSIFICATION	1.7887041687080217E-5	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999999169089715	WITHOUT_CLASSIFICATION	8.30910285127415E-7	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998406299692	WITHOUT_CLASSIFICATION	1.593700308635062E-7	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999950473776623	WITHOUT_CLASSIFICATION	4.9526223376729E-6	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999814527933	WITHOUT_CLASSIFICATION	1.8547206707674696E-8	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999998359144072	WITHOUT_CLASSIFICATION	1.6408559271757747E-7	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999846987074966	WITHOUT_CLASSIFICATION	1.5301292503312585E-5	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999726903837002	WITHOUT_CLASSIFICATION	2.7309616299850714E-5	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999999140655862	WITHOUT_CLASSIFICATION	8.593441382132608E-8	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999517190681	WITHOUT_CLASSIFICATION	4.828093196192283E-8	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999997900117624	WITHOUT_CLASSIFICATION	2.099882375311526E-7	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999998678577384	WITHOUT_CLASSIFICATION	1.3214226158863706E-7	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9992020089389071	WITHOUT_CLASSIFICATION	7.979910610930336E-4	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999803751065889	WITHOUT_CLASSIFICATION	1.9624893411173255E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9994007860072162	WITHOUT_CLASSIFICATION	5.992139927838087E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999386725798458	WITHOUT_CLASSIFICATION	6.132742015419629E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9344333976629182	WITHOUT_CLASSIFICATION	0.06556660233708177	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.99999158142053	WITHOUT_CLASSIFICATION	8.418579469939624E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999934730421637	WITHOUT_CLASSIFICATION	6.526957836393595E-6	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999991721560424	WITHOUT_CLASSIFICATION	8.278439575620819E-7	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997664750836	WITHOUT_CLASSIFICATION	2.3352491639433784E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999887904380781	WITHOUT_CLASSIFICATION	1.1209561921914028E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999096579056	WITHOUT_CLASSIFICATION	9.034209430049325E-8	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999593527759	WITHOUT_CLASSIFICATION	4.064722410119274E-8	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999928359429431	WITHOUT_CLASSIFICATION	7.164057057009286E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999096579056	WITHOUT_CLASSIFICATION	9.034209430049325E-8	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999887904380781	WITHOUT_CLASSIFICATION	1.1209561921914028E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999593527759	WITHOUT_CLASSIFICATION	4.064722410119274E-8	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.999999853416324	WITHOUT_CLASSIFICATION	1.4658367593607008E-7	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999998582499452	WITHOUT_CLASSIFICATION	1.417500547940052E-7	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999981432093128	WITHOUT_CLASSIFICATION	1.8567906872085018E-6	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999716159922536	WITHOUT_CLASSIFICATION	2.838400774633559E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999265017591	WITHOUT_CLASSIFICATION	7.349824098064142E-8	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9372588341736686	WITHOUT_CLASSIFICATION	0.06274116582633132	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998606863272502	WITHOUT_CLASSIFICATION	1.3931367274975376E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999115773092985	WITHOUT_CLASSIFICATION	8.842269070156064E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999236372601	WITHOUT_CLASSIFICATION	7.636273990883982E-8	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999358969371842	WITHOUT_CLASSIFICATION	6.41030628158156E-5	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999807093046752	WITHOUT_CLASSIFICATION	1.9290695324825874E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999874211608949	WITHOUT_CLASSIFICATION	1.2578839105196981E-5	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9994573300656421	WITHOUT_CLASSIFICATION	5.426699343578555E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999798181324073	WITHOUT_CLASSIFICATION	2.01818675926485E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999999225009033	WITHOUT_CLASSIFICATION	7.749909672467001E-8	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999842153564469	WITHOUT_CLASSIFICATION	1.5784643553110064E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999996600581481	WITHOUT_CLASSIFICATION	3.3994185191204963E-6	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999978990399205	WITHOUT_CLASSIFICATION	2.100960079418495E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999949081573798	WITHOUT_CLASSIFICATION	5.091842620197549E-6	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999961765459	WITHOUT_CLASSIFICATION	3.823454093615307E-9	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999922235676363	WITHOUT_CLASSIFICATION	7.776432363739022E-6	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999931173391	WITHOUT_CLASSIFICATION	6.882660916511571E-9	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999841979939337	WITHOUT_CLASSIFICATION	1.5802006066326825E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999801621219	WITHOUT_CLASSIFICATION	1.983787807028182E-8	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999961010165	WITHOUT_CLASSIFICATION	3.898983446968268E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999961010165	WITHOUT_CLASSIFICATION	3.898983446968268E-9	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999592905755	WITHOUT_CLASSIFICATION	4.0709424468304387E-8	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999592905755	WITHOUT_CLASSIFICATION	4.0709424468304387E-8	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999776824495933	WITHOUT_CLASSIFICATION	2.231755040670319E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999996600581481	WITHOUT_CLASSIFICATION	3.3994185191204963E-6	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999998314301213	WITHOUT_CLASSIFICATION	1.6856987872954687E-7	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999817501734	WITHOUT_CLASSIFICATION	1.824982660838858E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999913130471	WITHOUT_CLASSIFICATION	8.686952924835316E-9	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999913130471	WITHOUT_CLASSIFICATION	8.686952924835316E-9	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999914847264324	WITHOUT_CLASSIFICATION	8.515273567495172E-6	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999992307949657	WITHOUT_CLASSIFICATION	7.692050342314446E-7	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999665548408	WITHOUT_CLASSIFICATION	3.344515926344014E-8	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999997938234283	WITHOUT_CLASSIFICATION	2.0617657168045403E-7	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9817871935444015	WITHOUT_CLASSIFICATION	0.018212806455598602	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9363101565357926	WITHOUT_CLASSIFICATION	0.06368984346420749	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999644518566752	WITHOUT_CLASSIFICATION	3.554814332496117E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999957355834418	WITHOUT_CLASSIFICATION	4.264416558234577E-6	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999604494691278	WITHOUT_CLASSIFICATION	3.9550530872337896E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999825016855655	WITHOUT_CLASSIFICATION	1.7498314434628824E-5	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999973273714207	WITHOUT_CLASSIFICATION	2.672628579370666E-6	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999986231216825	WITHOUT_CLASSIFICATION	1.3768783174352232E-6	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999997118755716	WITHOUT_CLASSIFICATION	2.8812442841859403E-7	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999988610148112	WITHOUT_CLASSIFICATION	1.1389851887396708E-6	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999999940958839	WITHOUT_CLASSIFICATION	5.9041160895180044E-8	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999997424721068	WITHOUT_CLASSIFICATION	2.575278932221729E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962039519525	WITHOUT_CLASSIFICATION	3.7960480473196563E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999980570124923	WITHOUT_CLASSIFICATION	1.942987507726467E-6	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999916781621867	WITHOUT_CLASSIFICATION	8.321837813290135E-6	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999999897223054	WITHOUT_CLASSIFICATION	1.0277694589414198E-7	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999995951538754	WITHOUT_CLASSIFICATION	4.0484612461079276E-7	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999985439970402	WITHOUT_CLASSIFICATION	1.4560029597255402E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999610257484	WITHOUT_CLASSIFICATION	3.897425151702816E-8	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999990210408841	WITHOUT_CLASSIFICATION	9.789591158140021E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999431238574223	WITHOUT_CLASSIFICATION	5.6876142577588146E-5	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999817159557	WITHOUT_CLASSIFICATION	1.828404420650779E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999642515864946	WITHOUT_CLASSIFICATION	3.574841350551096E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999689361733152	WITHOUT_CLASSIFICATION	3.1063826684780666E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.99999481841131	WITHOUT_CLASSIFICATION	5.181588690024583E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9997429879233806	WITHOUT_CLASSIFICATION	2.5701207661936324E-4	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999874278468502	WITHOUT_CLASSIFICATION	1.2572153149721342E-5	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999380686674826	WITHOUT_CLASSIFICATION	6.193133251739486E-5	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.999980478632216	WITHOUT_CLASSIFICATION	1.95213677839735E-5	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.999980478632216	WITHOUT_CLASSIFICATION	1.95213677839735E-5	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999899064161374	WITHOUT_CLASSIFICATION	1.0093583862630105E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999951511796261	WITHOUT_CLASSIFICATION	4.848820373822146E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9997336854862842	WITHOUT_CLASSIFICATION	2.6631451371587455E-4	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9997336854862842	WITHOUT_CLASSIFICATION	2.6631451371587455E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999643563075625	WITHOUT_CLASSIFICATION	3.5643692437495843E-4	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998601535626775	WITHOUT_CLASSIFICATION	1.3984643732249002E-4	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999415471974015	WITHOUT_CLASSIFICATION	5.845280259861112E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999977133240734	WITHOUT_CLASSIFICATION	2.2866759266006503E-6	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999977829351717	WITHOUT_CLASSIFICATION	2.217064828298305E-6	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999988339026668	WITHOUT_CLASSIFICATION	1.166097333214011E-6	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.999998340388891	WITHOUT_CLASSIFICATION	1.6596111088911335E-6	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999051200686	WITHOUT_CLASSIFICATION	9.487993146989616E-8	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999915794982705	WITHOUT_CLASSIFICATION	8.420501729494258E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999915794982705	WITHOUT_CLASSIFICATION	8.420501729494258E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999487346025887	WITHOUT_CLASSIFICATION	5.126539741136717E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999993441973855	WITHOUT_CLASSIFICATION	6.558026145610452E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999993441973855	WITHOUT_CLASSIFICATION	6.558026145610452E-7	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999813174297522	WITHOUT_CLASSIFICATION	1.8682570247808793E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999998740105374	WITHOUT_CLASSIFICATION	1.259894626029745E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9989340184879208	WITHOUT_CLASSIFICATION	0.0010659815120790475	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999995395102477	WITHOUT_CLASSIFICATION	4.6048975237115905E-7	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999997717834401	WITHOUT_CLASSIFICATION	2.2821655995149477E-7	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999996361270053	WITHOUT_CLASSIFICATION	3.6387299482908146E-7	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999997942364692	WITHOUT_CLASSIFICATION	2.0576353070614816E-7	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999996597255041	WITHOUT_CLASSIFICATION	3.4027449588935167E-6	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999820708303	WITHOUT_CLASSIFICATION	1.792916971538438E-8	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9823896756671286	WITHOUT_CLASSIFICATION	0.01761032433287139	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999990454374161	WITHOUT_CLASSIFICATION	9.545625838938001E-6	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999919537606929	WITHOUT_CLASSIFICATION	8.046239307135493E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999960445727912	WITHOUT_CLASSIFICATION	3.9554272087975205E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999960445727912	WITHOUT_CLASSIFICATION	3.9554272087975205E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999960445727912	WITHOUT_CLASSIFICATION	3.9554272087975205E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999960445727912	WITHOUT_CLASSIFICATION	3.9554272087975205E-5	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999693867006119	WITHOUT_CLASSIFICATION	3.061329938816472E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.8481852838039341	WITHOUT_CLASSIFICATION	0.151814716196066	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999961138025518	WITHOUT_CLASSIFICATION	3.886197448171279E-6	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999644277772363	WITHOUT_CLASSIFICATION	3.557222276377821E-5	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999996537839291	WITHOUT_CLASSIFICATION	3.4621607091899165E-7	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999230030886048	WITHOUT_CLASSIFICATION	7.699691139520153E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999748346758635	WITHOUT_CLASSIFICATION	2.5165324136546932E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999870955113889	WITHOUT_CLASSIFICATION	1.2904488611264295E-5	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999997531258225	WITHOUT_CLASSIFICATION	2.468741775068284E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999748346758635	WITHOUT_CLASSIFICATION	2.5165324136546932E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999748346758635	WITHOUT_CLASSIFICATION	2.5165324136546932E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999874638132	WITHOUT_CLASSIFICATION	1.2536186677264908E-8	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.999998873835394	WITHOUT_CLASSIFICATION	1.1261646060183167E-6	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999992405768122	WITHOUT_CLASSIFICATION	7.594231878270577E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999995540484199	WITHOUT_CLASSIFICATION	4.459515801039429E-6	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999966751756425	WITHOUT_CLASSIFICATION	3.3248243575005845E-5	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999987384007717	WITHOUT_CLASSIFICATION	1.26159922838957E-6	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999985703028507	WITHOUT_CLASSIFICATION	1.4296971493159388E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999995540484199	WITHOUT_CLASSIFICATION	4.459515801039429E-6	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9907527845128286	WITHOUT_CLASSIFICATION	0.009247215487171502	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999953244247605	WITHOUT_CLASSIFICATION	4.675575239546093E-6	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999997658201576	WITHOUT_CLASSIFICATION	2.3417984233753906E-7	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999916133216583	WITHOUT_CLASSIFICATION	8.386678341665527E-6	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999680697237883	WITHOUT_CLASSIFICATION	3.193027621170594E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9994737378586347	WITHOUT_CLASSIFICATION	5.262621413653061E-4	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999997350686012	WITHOUT_CLASSIFICATION	2.649313988088261E-7	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999834615282205	WITHOUT_CLASSIFICATION	1.653847177956281E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999491738703	WITHOUT_CLASSIFICATION	5.082612986592864E-8	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999986172284233	WITHOUT_CLASSIFICATION	1.3827715766657253E-6	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999662904565	WITHOUT_CLASSIFICATION	3.370954341284043E-8	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999998837483186	WITHOUT_CLASSIFICATION	1.1625168139866176E-6	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9990548004867783	WITHOUT_CLASSIFICATION	9.451995132216353E-4	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999763561719697	WITHOUT_CLASSIFICATION	2.364382803026978E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999967935628795	WITHOUT_CLASSIFICATION	3.206437120423443E-6	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999991569601663	WITHOUT_CLASSIFICATION	8.430398337045924E-6	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999136616551	WITHOUT_CLASSIFICATION	8.633834492753377E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999323935506776	WITHOUT_CLASSIFICATION	6.760644932237481E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999583795259	WITHOUT_CLASSIFICATION	4.162047402383969E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999323935506776	WITHOUT_CLASSIFICATION	6.760644932237481E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999997024044511	WITHOUT_CLASSIFICATION	2.9759554886775176E-7	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999939257501917	WITHOUT_CLASSIFICATION	6.0742498082435665E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9997581947674632	WITHOUT_CLASSIFICATION	2.4180523253668613E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999999124938735	WITHOUT_CLASSIFICATION	8.750612649796313E-7	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999136616551	WITHOUT_CLASSIFICATION	8.633834492753377E-8	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999583795259	WITHOUT_CLASSIFICATION	4.162047402383969E-8	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999997024044511	WITHOUT_CLASSIFICATION	2.9759554886775176E-7	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999989371742483	WITHOUT_CLASSIFICATION	1.0628257517816936E-6	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.99997512675538	WITHOUT_CLASSIFICATION	2.4873244620057474E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999955717328446	WITHOUT_CLASSIFICATION	4.428267155320502E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999880584025445	WITHOUT_CLASSIFICATION	1.1941597455490925E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.997519929593386	WITHOUT_CLASSIFICATION	0.002480070406613978	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999110794972	WITHOUT_CLASSIFICATION	8.892050277828483E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962039519525	WITHOUT_CLASSIFICATION	3.7960480473196563E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999939257501917	WITHOUT_CLASSIFICATION	6.0742498082435665E-6	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.999973653114087	WITHOUT_CLASSIFICATION	2.634688591295955E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9989140381560019	WITHOUT_CLASSIFICATION	0.0010859618439981412	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999998035210017	WITHOUT_CLASSIFICATION	1.9647899840223224E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962039519525	WITHOUT_CLASSIFICATION	3.7960480473196563E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999642515864946	WITHOUT_CLASSIFICATION	3.574841350551096E-5	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999998993762435	WITHOUT_CLASSIFICATION	1.0062375657560533E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962039519525	WITHOUT_CLASSIFICATION	3.7960480473196563E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999892486936	WITHOUT_CLASSIFICATION	1.075130640694859E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999984837133294	WITHOUT_CLASSIFICATION	1.5162866706103693E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999642515864946	WITHOUT_CLASSIFICATION	3.574841350551096E-5	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998554391426405	WITHOUT_CLASSIFICATION	1.4456085735944777E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999998660310419	WITHOUT_CLASSIFICATION	1.3396895806684321E-7	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999035662755	WITHOUT_CLASSIFICATION	9.643372447780373E-8	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999964453123341	WITHOUT_CLASSIFICATION	3.5546876657917773E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998026534188599	WITHOUT_CLASSIFICATION	1.9734658114021821E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999847234338644	WITHOUT_CLASSIFICATION	1.5276566135602598E-5	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999996118835196	WITHOUT_CLASSIFICATION	3.8811648046582323E-7	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999993695827151	WITHOUT_CLASSIFICATION	6.304172849081258E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999378705632169	WITHOUT_CLASSIFICATION	6.212943678301003E-5	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999126865547	WITHOUT_CLASSIFICATION	8.731344523133688E-8	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9989340184879208	WITHOUT_CLASSIFICATION	0.0010659815120790475	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999985578166112	WITHOUT_CLASSIFICATION	1.442183388762002E-6	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9546526598703039	WITHOUT_CLASSIFICATION	0.04534734012969613	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999989464303513	WITHOUT_CLASSIFICATION	1.0535696487606576E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999646425588148	WITHOUT_CLASSIFICATION	3.535744118523155E-5	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999993842527427	WITHOUT_CLASSIFICATION	6.157472572480826E-7	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999260652822	WITHOUT_CLASSIFICATION	7.393471788490993E-8	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9940453343817549	WITHOUT_CLASSIFICATION	0.005954665618245124	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999744485761487	WITHOUT_CLASSIFICATION	2.555142385139111E-5	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999305024142	WITHOUT_CLASSIFICATION	6.949758579245684E-8	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999903463033649	WITHOUT_CLASSIFICATION	9.653696635058047E-6	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9988102153271841	WITHOUT_CLASSIFICATION	0.0011897846728158965	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997662328067779	WITHOUT_CLASSIFICATION	2.337671932220681E-4	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999891741647168	WITHOUT_CLASSIFICATION	1.0825835283195265E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999912180828	WITHOUT_CLASSIFICATION	8.781917227473842E-9	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999998014192846	WITHOUT_CLASSIFICATION	1.9858071544686573E-7	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9997266248675994	WITHOUT_CLASSIFICATION	2.733751324004769E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999761337494163	WITHOUT_CLASSIFICATION	2.3866250583736295E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999995772465439	WITHOUT_CLASSIFICATION	4.2275345619749043E-7	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999992260528885	WITHOUT_CLASSIFICATION	7.73947111598808E-7	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999996011249267	WITHOUT_CLASSIFICATION	3.9887507324527094E-7	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9959376755402616	WITHOUT_CLASSIFICATION	0.004062324459738403	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9998004085586897	WITHOUT_CLASSIFICATION	1.995914413102561E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999999797276636	WITHOUT_CLASSIFICATION	2.027233639855974E-7	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999893704589747	WITHOUT_CLASSIFICATION	1.0629541025232345E-5	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999979628908696	WITHOUT_CLASSIFICATION	2.037109130399762E-6	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999299529245332	WITHOUT_CLASSIFICATION	7.004707546678713E-5	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998985392362872	WITHOUT_CLASSIFICATION	1.0146076371273228E-4	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9992910514668674	WITHOUT_CLASSIFICATION	7.089485331326015E-4	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999997406781352	WITHOUT_CLASSIFICATION	2.5932186480586167E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999642515864946	WITHOUT_CLASSIFICATION	3.574841350551096E-5	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999813877740515	WITHOUT_CLASSIFICATION	1.8612225948487257E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999711279525915	WITHOUT_CLASSIFICATION	2.887204740863274E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999711279525915	WITHOUT_CLASSIFICATION	2.887204740863274E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9956057973443249	WITHOUT_CLASSIFICATION	0.0043942026556752015	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999847234338644	WITHOUT_CLASSIFICATION	1.5276566135602598E-5	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.998249485930452	WITHOUT_CLASSIFICATION	0.0017505140695478617	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999558415217	WITHOUT_CLASSIFICATION	4.4158478367857354E-8	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999695017557859	WITHOUT_CLASSIFICATION	3.0498244214019313E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998820910989766	WITHOUT_CLASSIFICATION	1.1790890102341908E-4	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999940007375316	WITHOUT_CLASSIFICATION	5.999262468384882E-6	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9999364400457919	WITHOUT_CLASSIFICATION	6.35599542081507E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999762180459638	WITHOUT_CLASSIFICATION	2.3781954036136453E-5	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999781120391	WITHOUT_CLASSIFICATION	2.1887960829290354E-8	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999918318148319	WITHOUT_CLASSIFICATION	8.168185168108235E-6	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999991319326019	WITHOUT_CLASSIFICATION	8.680673981159671E-7	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999995896145599	WITHOUT_CLASSIFICATION	4.103854401498602E-7	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999950764618	WITHOUT_CLASSIFICATION	4.923538177370423E-9	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999382179561	WITHOUT_CLASSIFICATION	6.178204386712816E-8	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.99999402860339	WITHOUT_CLASSIFICATION	5.971396609968742E-6	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999994254656388	WITHOUT_CLASSIFICATION	5.745343612698353E-7	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999998539397392	WITHOUT_CLASSIFICATION	1.4606026079927836E-7	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999970356312	WITHOUT_CLASSIFICATION	2.964368753048274E-9	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999983461248854	WITHOUT_CLASSIFICATION	1.6538751146373126E-6	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999989322918809	WITHOUT_CLASSIFICATION	1.0677081191824766E-6	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999471006716208	WITHOUT_CLASSIFICATION	5.2899328379119804E-5	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999992791299768	WITHOUT_CLASSIFICATION	7.208700232929822E-7	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999983914418491	WITHOUT_CLASSIFICATION	1.608558150883757E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9992910514668674	WITHOUT_CLASSIFICATION	7.089485331326015E-4	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999982131572845	WITHOUT_CLASSIFICATION	1.7868427154395195E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999991545213087	WITHOUT_CLASSIFICATION	8.454786911817325E-7	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999994333642295	WITHOUT_CLASSIFICATION	5.666357704386641E-7	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999904229204679	WITHOUT_CLASSIFICATION	9.577079532216108E-6	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9840637968181304	WITHOUT_CLASSIFICATION	0.015936203181869696	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999865822904997	WITHOUT_CLASSIFICATION	1.3417709500244563E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999842269701545	WITHOUT_CLASSIFICATION	1.5773029845482476E-5	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999996507903623	WITHOUT_CLASSIFICATION	3.4920963774220774E-7	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999989897359136	WITHOUT_CLASSIFICATION	1.0102640863518692E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999991805942121	WITHOUT_CLASSIFICATION	8.194057878347503E-7	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999994644254713	WITHOUT_CLASSIFICATION	5.35574528757238E-7	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999931227278994	WITHOUT_CLASSIFICATION	6.877272100536009E-6	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9948941158859782	WITHOUT_CLASSIFICATION	0.005105884114021788	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9966802698686691	WITHOUT_CLASSIFICATION	0.0033197301313310076	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999799198655	WITHOUT_CLASSIFICATION	2.0080134509545493E-7	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999799198655	WITHOUT_CLASSIFICATION	2.0080134509545493E-7	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999933221023646	WITHOUT_CLASSIFICATION	6.677897635462747E-6	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999878979969	WITHOUT_CLASSIFICATION	1.2102003085839906E-8	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998294003167276	WITHOUT_CLASSIFICATION	1.7059968327238503E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998294003167276	WITHOUT_CLASSIFICATION	1.7059968327238503E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999882124789	WITHOUT_CLASSIFICATION	1.1787521130016851E-8	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999656181235035	WITHOUT_CLASSIFICATION	3.438187649663227E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9996853299964624	WITHOUT_CLASSIFICATION	3.1467000353760155E-4	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999996397196	WITHOUT_CLASSIFICATION	3.6028036145713957E-10	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999961323499783	WITHOUT_CLASSIFICATION	3.867650021729012E-6	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999998369499695	WITHOUT_CLASSIFICATION	1.6305003050785253E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999989578868862	WITHOUT_CLASSIFICATION	1.0421131138223584E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999989578868862	WITHOUT_CLASSIFICATION	1.0421131138223584E-6	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999996404862012	WITHOUT_CLASSIFICATION	3.595137988849153E-7	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999988750491794	WITHOUT_CLASSIFICATION	1.1249508205588342E-6	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999993044053996	WITHOUT_CLASSIFICATION	6.955946004258062E-7	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999911263509162	WITHOUT_CLASSIFICATION	8.873649083657677E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999911263509162	WITHOUT_CLASSIFICATION	8.873649083657677E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999996797454354	WITHOUT_CLASSIFICATION	3.2025456464251415E-7	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999960001228175	WITHOUT_CLASSIFICATION	3.999877182497754E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999609412044059	WITHOUT_CLASSIFICATION	3.9058795594101624E-5	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999999836306718	WITHOUT_CLASSIFICATION	1.6369328223997335E-8	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999915086365497	WITHOUT_CLASSIFICATION	8.49136345034836E-6	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999995447740764	WITHOUT_CLASSIFICATION	4.5522592360268153E-7	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999950660165252	WITHOUT_CLASSIFICATION	4.933983474736964E-6	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999995336886996	WITHOUT_CLASSIFICATION	4.663113003521954E-7	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999850715776	WITHOUT_CLASSIFICATION	1.4928422372912845E-8	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.999995654088414	WITHOUT_CLASSIFICATION	4.345911586054754E-6	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999978691189481	WITHOUT_CLASSIFICATION	2.1308810519134524E-6	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999235658835063	WITHOUT_CLASSIFICATION	7.643411649369283E-5	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.999999175069068	WITHOUT_CLASSIFICATION	8.249309319757367E-7	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9998396342844522	WITHOUT_CLASSIFICATION	1.603657155478521E-4	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999987404820355	WITHOUT_CLASSIFICATION	1.2595179644602192E-6	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999996146177644	WITHOUT_CLASSIFICATION	3.853822356062292E-6	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999189558466	WITHOUT_CLASSIFICATION	8.104415329431275E-8	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9998716171675863	WITHOUT_CLASSIFICATION	1.2838283241363725E-4	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999517162375805	WITHOUT_CLASSIFICATION	4.828376241947358E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999945090557707	WITHOUT_CLASSIFICATION	5.49094422926518E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999645667143194	WITHOUT_CLASSIFICATION	3.5433285680676534E-5	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998329933732205	WITHOUT_CLASSIFICATION	1.6700662677956814E-4	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999784813128996	WITHOUT_CLASSIFICATION	2.15186871005404E-5	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999920349058278	WITHOUT_CLASSIFICATION	7.96509417217773E-6	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.999996623289831	WITHOUT_CLASSIFICATION	3.3767101689296003E-6	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999967322797865	WITHOUT_CLASSIFICATION	3.267720213635926E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999999199408285	WITHOUT_CLASSIFICATION	8.005917141397674E-8	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999938599799881	WITHOUT_CLASSIFICATION	6.140020011895383E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999916714705	WITHOUT_CLASSIFICATION	8.328529557458464E-9	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999989645731079	WITHOUT_CLASSIFICATION	1.0354268922044594E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999803398524373	WITHOUT_CLASSIFICATION	1.9660147562704572E-4	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999981537372323	WITHOUT_CLASSIFICATION	1.8462627677218262E-6	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998351970488	WITHOUT_CLASSIFICATION	1.6480295126455502E-7	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999514353623391	WITHOUT_CLASSIFICATION	4.8564637660897756E-5	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999995098324006	WITHOUT_CLASSIFICATION	4.901675993430822E-7	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999843799164931	WITHOUT_CLASSIFICATION	1.562008350685326E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999895697376042	WITHOUT_CLASSIFICATION	1.043026239588252E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999990395062981	WITHOUT_CLASSIFICATION	9.604937018997435E-7	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999998941285262	WITHOUT_CLASSIFICATION	1.0587147390275235E-7	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996089365981	WITHOUT_CLASSIFICATION	3.910634018631015E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9995278058958643	WITHOUT_CLASSIFICATION	4.721941041356577E-4	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9977906895924915	WITHOUT_CLASSIFICATION	0.002209310407508546	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.999993270393305	WITHOUT_CLASSIFICATION	6.729606694984715E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999997699620107	WITHOUT_CLASSIFICATION	2.3003798928707114E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999986378051063	WITHOUT_CLASSIFICATION	1.3621948936112713E-6	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999946207413658	WITHOUT_CLASSIFICATION	5.3792586342294485E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9973570172479802	WITHOUT_CLASSIFICATION	0.0026429827520196925	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999980768135225	WITHOUT_CLASSIFICATION	1.9231864774837977E-6	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999984880304401	WITHOUT_CLASSIFICATION	1.5119695598777344E-6	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999996816606356	WITHOUT_CLASSIFICATION	3.18339364475254E-7	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998006179447361	WITHOUT_CLASSIFICATION	1.9938205526383125E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999075364445	WITHOUT_CLASSIFICATION	9.246355543966635E-8	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999996647438175	WITHOUT_CLASSIFICATION	3.35256182437087E-7	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999999123733	WITHOUT_CLASSIFICATION	8.76267520630319E-11	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9998938043705329	WITHOUT_CLASSIFICATION	1.0619562946721779E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999988003675212	WITHOUT_CLASSIFICATION	1.1996324787969405E-6	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9992119272043538	WITHOUT_CLASSIFICATION	7.880727956460714E-4	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999967851378532	WITHOUT_CLASSIFICATION	3.214862146738092E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9994938426980637	WITHOUT_CLASSIFICATION	5.061573019363367E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998613418829909	WITHOUT_CLASSIFICATION	1.386581170090863E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999934533465564	WITHOUT_CLASSIFICATION	6.546653443455645E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999934533465564	WITHOUT_CLASSIFICATION	6.546653443455645E-6	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999684496047	WITHOUT_CLASSIFICATION	3.155039537131422E-8	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999994612527796	WITHOUT_CLASSIFICATION	5.387472203327239E-7	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999995933756	WITHOUT_CLASSIFICATION	4.0662433460251693E-10	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999967531117	WITHOUT_CLASSIFICATION	3.246888376372884E-9	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999906143853139	WITHOUT_CLASSIFICATION	9.385614686088522E-6	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999995205822217	WITHOUT_CLASSIFICATION	4.79417778202451E-7	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999969866394	WITHOUT_CLASSIFICATION	3.0133605779109563E-9	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999920901712	WITHOUT_CLASSIFICATION	7.909828760344466E-9	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999960489282507	WITHOUT_CLASSIFICATION	3.951071749302342E-6	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999908180625412	WITHOUT_CLASSIFICATION	9.181937458761752E-6	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999998236599373	WITHOUT_CLASSIFICATION	1.7634006277724954E-7	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998795242210567	WITHOUT_CLASSIFICATION	1.2047577894327421E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999950605940281	WITHOUT_CLASSIFICATION	4.939405971906773E-6	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999997438348	WITHOUT_CLASSIFICATION	2.561651872119653E-10	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994130150003	WITHOUT_CLASSIFICATION	5.869849996779364E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994130150003	WITHOUT_CLASSIFICATION	5.869849996779364E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999993113812486	WITHOUT_CLASSIFICATION	6.88618751317118E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998270828716452	WITHOUT_CLASSIFICATION	1.7291712835477142E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999180355594	WITHOUT_CLASSIFICATION	8.196444052414415E-8	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999998173901781	WITHOUT_CLASSIFICATION	1.8260982205993415E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999151435752	WITHOUT_CLASSIFICATION	8.485642485906707E-8	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983534851183	WITHOUT_CLASSIFICATION	1.6465148816877115E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999957861719453	WITHOUT_CLASSIFICATION	4.2138280547572675E-6	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9603075321023162	WITHOUT_CLASSIFICATION	0.03969246789768373	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999983657978	WITHOUT_CLASSIFICATION	1.634202240501131E-9	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999998759411471	WITHOUT_CLASSIFICATION	1.2405885284049603E-7	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999790779859	WITHOUT_CLASSIFICATION	2.0922014141826854E-8	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999994197732002	WITHOUT_CLASSIFICATION	5.802267999249634E-7	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999293139383106	WITHOUT_CLASSIFICATION	7.068606168944173E-5	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999998933870862	WITHOUT_CLASSIFICATION	1.066129138130054E-7	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999923918111183	WITHOUT_CLASSIFICATION	7.6081888816753665E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999950703669467	WITHOUT_CLASSIFICATION	4.929633053285119E-6	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999962683961	WITHOUT_CLASSIFICATION	3.7316038965345504E-8	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999994292039451	WITHOUT_CLASSIFICATION	5.707960547532117E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999743935203582	WITHOUT_CLASSIFICATION	2.5606479641825103E-5	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999998230634827	WITHOUT_CLASSIFICATION	1.7693651736596192E-7	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999996272979064	WITHOUT_CLASSIFICATION	3.727020937074481E-7	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999980789702293	WITHOUT_CLASSIFICATION	1.9210297707402175E-6	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999426797241	WITHOUT_CLASSIFICATION	5.732027586292232E-8	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.999999273530796	WITHOUT_CLASSIFICATION	7.264692040687651E-7	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9991614600294785	WITHOUT_CLASSIFICATION	8.385399705215649E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999948701325437	WITHOUT_CLASSIFICATION	5.129867456216528E-6	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999727503118295	WITHOUT_CLASSIFICATION	2.7249688170557072E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997397384415357	WITHOUT_CLASSIFICATION	2.602615584642219E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999978907852107	WITHOUT_CLASSIFICATION	2.1092147893881666E-6	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999999844239823	WITHOUT_CLASSIFICATION	1.5576017697890157E-7	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999972758207236	WITHOUT_CLASSIFICATION	2.7241792763288554E-6	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999966847705419	WITHOUT_CLASSIFICATION	3.3152294580867683E-6	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999563340122	WITHOUT_CLASSIFICATION	4.366598788014665E-8	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999974915531596	WITHOUT_CLASSIFICATION	2.5084468403624074E-6	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999992880067277	WITHOUT_CLASSIFICATION	7.11993272283025E-7	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999992545198938	WITHOUT_CLASSIFICATION	7.454801063141574E-7	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999582143694	WITHOUT_CLASSIFICATION	4.1785630608503985E-8	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999998307043663	WITHOUT_CLASSIFICATION	1.6929563376357588E-7	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999834060769502	WITHOUT_CLASSIFICATION	1.6593923049767624E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9998562613020826	WITHOUT_CLASSIFICATION	1.4373869791747758E-4	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996478282206958	WITHOUT_CLASSIFICATION	3.521717793042619E-4	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996478282206958	WITHOUT_CLASSIFICATION	3.521717793042619E-4	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999998586967626	WITHOUT_CLASSIFICATION	1.4130323747250247E-7	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9992915422787073	WITHOUT_CLASSIFICATION	7.084577212927161E-4	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999510191179092	WITHOUT_CLASSIFICATION	4.8980882090705765E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998934008394429	WITHOUT_CLASSIFICATION	1.065991605571355E-4	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999998004694906	WITHOUT_CLASSIFICATION	1.995305093863197E-7	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999997765577143	WITHOUT_CLASSIFICATION	2.2344228578178724E-7	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9986114867650834	WITHOUT_CLASSIFICATION	0.0013885132349166147	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999997964206291	WITHOUT_CLASSIFICATION	2.0357937094656333E-7	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9989105554277972	WITHOUT_CLASSIFICATION	0.001089444572202883	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991240354998	WITHOUT_CLASSIFICATION	8.759645002192784E-7	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996347141901	WITHOUT_CLASSIFICATION	3.6528580987855687E-7	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999990345795311	WITHOUT_CLASSIFICATION	9.654204688459545E-7	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999866020916345	WITHOUT_CLASSIFICATION	1.3397908365587847E-5	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998337653182	WITHOUT_CLASSIFICATION	1.6623468191325585E-7	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999938729618382	WITHOUT_CLASSIFICATION	6.127038161741426E-6	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999959542408383	WITHOUT_CLASSIFICATION	4.0457591617553084E-6	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9990187029843557	WITHOUT_CLASSIFICATION	9.812970156442718E-4	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999659761335277	WITHOUT_CLASSIFICATION	3.402386647230878E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9984705640951959	WITHOUT_CLASSIFICATION	0.0015294359048041027	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999974516693011	WITHOUT_CLASSIFICATION	2.5483306990120773E-6	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9984129247401069	WITHOUT_CLASSIFICATION	0.001587075259893124	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9996387767131759	WITHOUT_CLASSIFICATION	3.612232868240779E-4	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999988688846	WITHOUT_CLASSIFICATION	1.1311154883621585E-9	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999343452417961	WITHOUT_CLASSIFICATION	6.565475820390312E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9998840094305645	WITHOUT_CLASSIFICATION	1.1599056943548029E-4	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999833682592091	WITHOUT_CLASSIFICATION	1.6631740790892365E-4	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999997580282245	WITHOUT_CLASSIFICATION	2.419717754753932E-7	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999778071734	WITHOUT_CLASSIFICATION	2.2192826595394553E-8	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999315380240527	WITHOUT_CLASSIFICATION	6.846197594734365E-5	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999704776780354	WITHOUT_CLASSIFICATION	2.9522321964667763E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999601296336929	WITHOUT_CLASSIFICATION	3.987036630704428E-5	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999494736984774	WITHOUT_CLASSIFICATION	5.052630152268386E-5	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999478318201	WITHOUT_CLASSIFICATION	5.216817984463932E-8	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999994193513149	WITHOUT_CLASSIFICATION	5.806486849967518E-7	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999727529629	WITHOUT_CLASSIFICATION	2.7247037072416656E-8	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999606400655843	WITHOUT_CLASSIFICATION	3.9359934415635674E-5	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999701306027	WITHOUT_CLASSIFICATION	2.986939728265649E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999838739961	WITHOUT_CLASSIFICATION	1.6126003926514783E-8	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999466283196917	WITHOUT_CLASSIFICATION	5.3371680308329176E-5	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999935021166738	WITHOUT_CLASSIFICATION	6.497883326232655E-6	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998890165804	WITHOUT_CLASSIFICATION	1.1098341957930308E-7	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.998799407432168	WITHOUT_CLASSIFICATION	0.0012005925678320304	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999998930345543	WITHOUT_CLASSIFICATION	1.0696544573674163E-7	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999994021382163	WITHOUT_CLASSIFICATION	5.97861783754254E-7	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999991694050795	WITHOUT_CLASSIFICATION	8.305949205062139E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9995279592208969	WITHOUT_CLASSIFICATION	4.720407791031823E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999993074289657	WITHOUT_CLASSIFICATION	6.925710342585622E-7	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999950605940281	WITHOUT_CLASSIFICATION	4.939405971906773E-6	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999972754153388	WITHOUT_CLASSIFICATION	2.724584661285231E-6	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999800497381	WITHOUT_CLASSIFICATION	1.9950261837413214E-8	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.99996389585088	WITHOUT_CLASSIFICATION	3.6104149120130976E-5	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999991733269978	WITHOUT_CLASSIFICATION	8.266730022697789E-7	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999995038151	WITHOUT_CLASSIFICATION	4.961848718948163E-10	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999914223561898	WITHOUT_CLASSIFICATION	8.577643810208707E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999367927990657	WITHOUT_CLASSIFICATION	6.320720093427225E-5	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9998240139635078	WITHOUT_CLASSIFICATION	1.759860364920625E-4	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999521100585	WITHOUT_CLASSIFICATION	4.788994149289023E-8	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996110239524287	WITHOUT_CLASSIFICATION	3.88976047571249E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9986047428907495	WITHOUT_CLASSIFICATION	0.001395257109250479	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997264182672	WITHOUT_CLASSIFICATION	2.735817328393298E-7	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999900939546109	WITHOUT_CLASSIFICATION	9.906045389161496E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999988785462006	WITHOUT_CLASSIFICATION	1.1214537993413096E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998050935516	WITHOUT_CLASSIFICATION	1.9490644830380663E-7	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999987652162039	WITHOUT_CLASSIFICATION	1.2347837961563512E-6	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999919589956178	WITHOUT_CLASSIFICATION	8.041004382194953E-6	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999429572314	WITHOUT_CLASSIFICATION	5.704276859914053E-8	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.99934521605979	WITHOUT_CLASSIFICATION	6.547839402098927E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998050935516	WITHOUT_CLASSIFICATION	1.9490644830380663E-7	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9992170339352114	WITHOUT_CLASSIFICATION	7.829660647886885E-4	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999647050344072	WITHOUT_CLASSIFICATION	3.5294965592845954E-5	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999990085554	WITHOUT_CLASSIFICATION	9.9144457075668E-10	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999986010838543	WITHOUT_CLASSIFICATION	1.3989161457687598E-6	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999997648191797	WITHOUT_CLASSIFICATION	2.351808201605892E-7	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999865020517971	WITHOUT_CLASSIFICATION	1.3497948202886307E-5	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999997225333	WITHOUT_CLASSIFICATION	2.774667158229082E-10	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999958685320691	WITHOUT_CLASSIFICATION	4.131467930922754E-6	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999422964361	WITHOUT_CLASSIFICATION	5.770356381025088E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9993268392965003	WITHOUT_CLASSIFICATION	6.731607034996242E-4	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999813059095954	WITHOUT_CLASSIFICATION	1.8694090404559653E-5	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999674469162702	WITHOUT_CLASSIFICATION	3.2553083729835644E-5	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999671763108927	WITHOUT_CLASSIFICATION	3.282368910726057E-5	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999870253471	WITHOUT_CLASSIFICATION	1.2974652937687583E-8	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999996145842152	WITHOUT_CLASSIFICATION	3.8541578480996845E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999983914418491	WITHOUT_CLASSIFICATION	1.608558150883757E-6	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999992232743784	WITHOUT_CLASSIFICATION	7.767256215650734E-7	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999995733115724	WITHOUT_CLASSIFICATION	4.266884275376561E-7	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999524184686045	WITHOUT_CLASSIFICATION	4.7581531395443704E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998215560868642	WITHOUT_CLASSIFICATION	1.7844391313582184E-4	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999988723541	WITHOUT_CLASSIFICATION	1.127645854253491E-9	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999997454974291	WITHOUT_CLASSIFICATION	2.545025709247913E-7	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999908644396851	WITHOUT_CLASSIFICATION	9.135560314778482E-6	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999999708172	WITHOUT_CLASSIFICATION	2.9182793457461153E-10	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999376259628	WITHOUT_CLASSIFICATION	6.237403719648588E-8	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999826204831258	WITHOUT_CLASSIFICATION	1.7379516874113748E-5	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9788400840575486	WITHOUT_CLASSIFICATION	0.021159915942451316	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998156885482	WITHOUT_CLASSIFICATION	1.843114517069328E-7	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9985027575818196	WITHOUT_CLASSIFICATION	0.0014972424181803556	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9869905282118157	DEFECT	0.013009471788184354	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999609923237	WITHOUT_CLASSIFICATION	3.9007676377914175E-8	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9992658838999592	WITHOUT_CLASSIFICATION	7.34116100040752E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9965394922163862	WITHOUT_CLASSIFICATION	0.0034605077836138733	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999923242526462	WITHOUT_CLASSIFICATION	7.675747353853923E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999983298377	WITHOUT_CLASSIFICATION	1.6701623900382952E-9	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999977587567	WITHOUT_CLASSIFICATION	2.241243338702909E-9	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999997668310363	WITHOUT_CLASSIFICATION	2.331689636942368E-7	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999973765317013	WITHOUT_CLASSIFICATION	2.623468298700853E-5	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999797699526	WITHOUT_CLASSIFICATION	2.0230047477780625E-8	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999407066861997	WITHOUT_CLASSIFICATION	5.929331380024897E-5	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999975500935471	WITHOUT_CLASSIFICATION	2.4499064530064824E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999975500935471	WITHOUT_CLASSIFICATION	2.4499064530064824E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999777647128958	WITHOUT_CLASSIFICATION	2.22352871042037E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999855833529696	WITHOUT_CLASSIFICATION	1.441664703035557E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999518644583	WITHOUT_CLASSIFICATION	4.8135541603645426E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5251494685482343	WITHOUT_CLASSIFICATION	0.47485053145176576	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999977133240734	WITHOUT_CLASSIFICATION	2.2866759266006503E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999977133240734	WITHOUT_CLASSIFICATION	2.2866759266006503E-6	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999887306988292	WITHOUT_CLASSIFICATION	1.1269301170736875E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999996801988777	WITHOUT_CLASSIFICATION	3.1980112219532875E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999380578227612	WITHOUT_CLASSIFICATION	6.194217723875821E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999032859030866	WITHOUT_CLASSIFICATION	9.671409691332289E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999976629293243	WITHOUT_CLASSIFICATION	2.3370706756533657E-6	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999962497544943	WITHOUT_CLASSIFICATION	3.750245505688839E-5	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999934259512545	WITHOUT_CLASSIFICATION	6.574048745466278E-6	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999909652145	WITHOUT_CLASSIFICATION	9.034785489514393E-9	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9993958654252378	WITHOUT_CLASSIFICATION	6.041345747622004E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996361379034	WITHOUT_CLASSIFICATION	3.638620965989381E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996361379034	WITHOUT_CLASSIFICATION	3.638620965989381E-7	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999991769046466	WITHOUT_CLASSIFICATION	8.230953534883966E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999942184174284	WITHOUT_CLASSIFICATION	5.78158257157382E-6	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999998332803974	WITHOUT_CLASSIFICATION	1.6671960259799132E-7	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999957065914901	WITHOUT_CLASSIFICATION	4.2934085098993843E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999642515864946	WITHOUT_CLASSIFICATION	3.574841350551096E-5	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999993958079916	WITHOUT_CLASSIFICATION	6.041920084629681E-7	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997969294244	WITHOUT_CLASSIFICATION	2.0307057550936781E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999642515864946	WITHOUT_CLASSIFICATION	3.574841350551096E-5	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999902179315	WITHOUT_CLASSIFICATION	9.78206853205425E-9	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999670135888196	WITHOUT_CLASSIFICATION	3.298641118053996E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999266848655194	WITHOUT_CLASSIFICATION	7.331513448061128E-5	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999831360037	WITHOUT_CLASSIFICATION	1.686399632477299E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9993268392965003	WITHOUT_CLASSIFICATION	6.731607034996242E-4	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.999984504469551	WITHOUT_CLASSIFICATION	1.549553044900018E-5	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9994010813336186	WITHOUT_CLASSIFICATION	5.989186663814368E-4	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999641242425709	WITHOUT_CLASSIFICATION	3.58757574291954E-5	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999999888561284	WITHOUT_CLASSIFICATION	1.1143871581601942E-8	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999991176494722	WITHOUT_CLASSIFICATION	8.823505277514642E-7	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999988121274674	WITHOUT_CLASSIFICATION	1.187872532592285E-6	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999952660182726	WITHOUT_CLASSIFICATION	4.733981727469723E-6	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999998727014641	WITHOUT_CLASSIFICATION	1.2729853585121953E-7	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999713077417606	WITHOUT_CLASSIFICATION	2.8692258239386898E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9992912533332237	WITHOUT_CLASSIFICATION	7.087466667764401E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9992912533332237	WITHOUT_CLASSIFICATION	7.087466667764401E-4	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999995540484199	WITHOUT_CLASSIFICATION	4.459515801039429E-6	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999996824197375	WITHOUT_CLASSIFICATION	3.175802624316514E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999748346758635	WITHOUT_CLASSIFICATION	2.5165324136546932E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999884996688886	WITHOUT_CLASSIFICATION	1.1500331111401218E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999980480297312	WITHOUT_CLASSIFICATION	1.951970268666627E-6	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.999999932397936	WITHOUT_CLASSIFICATION	6.76020640395958E-8	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999967935628795	WITHOUT_CLASSIFICATION	3.206437120423443E-6	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9984392236271282	WITHOUT_CLASSIFICATION	0.0015607763728718725	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999989371742483	WITHOUT_CLASSIFICATION	1.0628257517816936E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999936741336236	WITHOUT_CLASSIFICATION	6.3258663763409425E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962039519525	WITHOUT_CLASSIFICATION	3.7960480473196563E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.7252537084062511	DEFECT	0.2747462915937488	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999970841842836	WITHOUT_CLASSIFICATION	2.915815716474008E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999350540322	WITHOUT_CLASSIFICATION	6.49459677236366E-8	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999997986331584	WITHOUT_CLASSIFICATION	2.0136684166247327E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999773276056	WITHOUT_CLASSIFICATION	2.2672394362866595E-8	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999991079922748	WITHOUT_CLASSIFICATION	8.920077252548193E-7	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999958110175716	WITHOUT_CLASSIFICATION	4.1889824283958064E-5	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999651705330001	WITHOUT_CLASSIFICATION	3.482946699989415E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999716378646684	WITHOUT_CLASSIFICATION	2.836213533151733E-5	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998007560711	WITHOUT_CLASSIFICATION	1.9924392899938343E-7	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.999999441631471	WITHOUT_CLASSIFICATION	5.583685289204624E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999609412044059	WITHOUT_CLASSIFICATION	3.9058795594101624E-5	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999997380269	WITHOUT_CLASSIFICATION	2.6197307826083017E-10	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999885260594084	WITHOUT_CLASSIFICATION	1.1473940591733752E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999885260594084	WITHOUT_CLASSIFICATION	1.1473940591733752E-5	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9996828007643532	WITHOUT_CLASSIFICATION	3.171992356467946E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999194879479509	WITHOUT_CLASSIFICATION	8.05120520490355E-5	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999979931742	WITHOUT_CLASSIFICATION	2.0068258354351338E-9	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999934017425911	WITHOUT_CLASSIFICATION	6.59825740887623E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999981622329152	WITHOUT_CLASSIFICATION	1.8377670847451195E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999917462039865	WITHOUT_CLASSIFICATION	8.253796013531187E-6	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9963512147677331	WITHOUT_CLASSIFICATION	0.0036487852322668823	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999517996364857	WITHOUT_CLASSIFICATION	4.820036351426521E-5	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9622563472254567	WITHOUT_CLASSIFICATION	0.03774365277454332	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9955778510153998	DEFECT	0.004422148984600267	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.8884710413519683	DEFECT	0.1115289586480317	WITHOUT_CLASSIFICATION
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.8977561702406873	DEFECT	0.10224382975931263	WITHOUT_CLASSIFICATION
/*	DEFECT	0.9878390148436388	WITHOUT_CLASSIFICATION	0.012160985156361227	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9908297147170301	WITHOUT_CLASSIFICATION	0.009170285282969983	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9780511721597203	DEFECT	0.02194882784027974	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.9877829090792987	WITHOUT_CLASSIFICATION	0.0122170909207013	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9998304573148241	DEFECT	1.6954268517584289E-4	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.6550440215301349	WITHOUT_CLASSIFICATION	0.34495597846986514	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6593926095474015	DEFECT	0.3406073904525983	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6593926095474015	DEFECT	0.3406073904525983	WITHOUT_CLASSIFICATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9834708216548224	WITHOUT_CLASSIFICATION	0.016529178345177604	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9997764765580502	WITHOUT_CLASSIFICATION	2.23523441949615E-4	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9817413367943248	DEFECT	0.01825866320567522	WITHOUT_CLASSIFICATION
// this call is side-effecty	DEFECT	0.9999948698115955	WITHOUT_CLASSIFICATION	5.130188404546983E-6	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9504339687182136	WITHOUT_CLASSIFICATION	0.049566031281786486	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9827139848446147	WITHOUT_CLASSIFICATION	0.01728601515538531	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9131793165808296	DEFECT	0.0868206834191703	WITHOUT_CLASSIFICATION
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9977253466455988	WITHOUT_CLASSIFICATION	0.0022746533544012394	DEFECT
//TODO: is this completely correct?	DEFECT	0.9626356503484019	WITHOUT_CLASSIFICATION	0.03736434965159813	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999685901477675	WITHOUT_CLASSIFICATION	3.140985223254853E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.7441406666964936	WITHOUT_CLASSIFICATION	0.2558593333035063	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9993764999493265	WITHOUT_CLASSIFICATION	6.235000506735258E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9674360610713928	DEFECT	0.032563938928607254	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.8943019550136495	DEFECT	0.10569804498635049	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9972908593668479	WITHOUT_CLASSIFICATION	0.002709140633152058	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9595181024285587	WITHOUT_CLASSIFICATION	0.040481897571441314	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.7801381073058068	WITHOUT_CLASSIFICATION	0.2198618926941931	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9873954341858553	WITHOUT_CLASSIFICATION	0.012604565814144751	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9188002911242295	WITHOUT_CLASSIFICATION	0.08119970887577051	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6593926095474015	DEFECT	0.3406073904525983	WITHOUT_CLASSIFICATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9998331574302619	DEFECT	1.6684256973819897E-4	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9609252700624304	WITHOUT_CLASSIFICATION	0.03907472993756957	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.7491147834371378	WITHOUT_CLASSIFICATION	0.2508852165628623	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9165884597274737	WITHOUT_CLASSIFICATION	0.08341154027252626	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999530505371155	WITHOUT_CLASSIFICATION	4.694946288452461E-5	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.999982779142917	WITHOUT_CLASSIFICATION	1.722085708292928E-5	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9989449032323793	WITHOUT_CLASSIFICATION	0.0010550967676207544	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9077195996954422	DEFECT	0.09228040030455777	WITHOUT_CLASSIFICATION
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9103221048438934	WITHOUT_CLASSIFICATION	0.08967789515610652	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9910099959718334	WITHOUT_CLASSIFICATION	0.008990004028166614	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9999884220097484	WITHOUT_CLASSIFICATION	1.157799025173274E-5	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.8818844565545976	DEFECT	0.11811554344540232	WITHOUT_CLASSIFICATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9836887328601939	WITHOUT_CLASSIFICATION	0.016311267139806133	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.98486091331378	WITHOUT_CLASSIFICATION	0.015139086686220042	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9026468277101932	WITHOUT_CLASSIFICATION	0.09735317228980676	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7011182244300683	WITHOUT_CLASSIFICATION	0.2988817755699318	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9915689046846655	DEFECT	0.008431095315334447	WITHOUT_CLASSIFICATION
