//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999994597510803	WITHOUT_CLASSIFICATION	5.40248919751657E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988891452724	WITHOUT_CLASSIFICATION	1.1108547276623688E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988891452724	WITHOUT_CLASSIFICATION	1.1108547276623688E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988891452724	WITHOUT_CLASSIFICATION	1.1108547276623688E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988891452724	WITHOUT_CLASSIFICATION	1.1108547276623688E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988891452724	WITHOUT_CLASSIFICATION	1.1108547276623688E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988891452724	WITHOUT_CLASSIFICATION	1.1108547276623688E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988891452724	WITHOUT_CLASSIFICATION	1.1108547276623688E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999973933745321	WITHOUT_CLASSIFICATION	2.6066254679978204E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999973933745321	WITHOUT_CLASSIFICATION	2.6066254679978204E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999987390992289	WITHOUT_CLASSIFICATION	1.2609007711796443E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999989348618924	WITHOUT_CLASSIFICATION	1.065138107580434E-6	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999996271412824	WITHOUT_CLASSIFICATION	3.728587176579743E-7	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999992596612964	WITHOUT_CLASSIFICATION	7.403387034768289E-7	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999992596612964	WITHOUT_CLASSIFICATION	7.403387034768289E-7	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998775891287	WITHOUT_CLASSIFICATION	1.2241087131833254E-7	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996773063057	WITHOUT_CLASSIFICATION	3.226936943468227E-7	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999994397129615	WITHOUT_CLASSIFICATION	5.602870386362604E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999998265954373	WITHOUT_CLASSIFICATION	1.734045626546974E-7	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999998515886766	WITHOUT_CLASSIFICATION	1.4841132340367837E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999998515886766	WITHOUT_CLASSIFICATION	1.4841132340367837E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.999919228927573	WITHOUT_CLASSIFICATION	8.077107242692653E-5	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999999451084996	WITHOUT_CLASSIFICATION	5.489150039586055E-7	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999752192682305	WITHOUT_CLASSIFICATION	2.4780731769571787E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999919381710488	WITHOUT_CLASSIFICATION	8.061828951214669E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999995092027082	WITHOUT_CLASSIFICATION	4.907972918268549E-7	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999988382827717	WITHOUT_CLASSIFICATION	1.1617172283530845E-6	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999854819541614	WITHOUT_CLASSIFICATION	1.4518045838634399E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999935372185039	WITHOUT_CLASSIFICATION	6.462781496105712E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999882811276128	WITHOUT_CLASSIFICATION	1.1718872387222088E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9996329457278749	WITHOUT_CLASSIFICATION	3.6705427212513293E-4	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999931105474464	WITHOUT_CLASSIFICATION	6.8894525535824885E-6	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999949446760485	WITHOUT_CLASSIFICATION	5.055323951470964E-6	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994005555851	WITHOUT_CLASSIFICATION	5.994444149323802E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999926668775833	WITHOUT_CLASSIFICATION	7.333122416697969E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999926668775833	WITHOUT_CLASSIFICATION	7.333122416697969E-6	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999999136901414	WITHOUT_CLASSIFICATION	8.630985863929814E-8	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999853054991306	WITHOUT_CLASSIFICATION	1.4694500869353935E-5	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999982639984787	WITHOUT_CLASSIFICATION	1.736001521387538E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999996175472016	WITHOUT_CLASSIFICATION	3.824527984219399E-7	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999903601397344	WITHOUT_CLASSIFICATION	9.639860265638908E-6	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9996096499771102	WITHOUT_CLASSIFICATION	3.9035002288973717E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9996096499771102	WITHOUT_CLASSIFICATION	3.9035002288973717E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999996022108055	WITHOUT_CLASSIFICATION	3.977891944494648E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999327737957359	WITHOUT_CLASSIFICATION	6.722620426410061E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999999731910072	WITHOUT_CLASSIFICATION	2.6808992801696847E-7	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999928560644616	WITHOUT_CLASSIFICATION	7.143935538411875E-6	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999967452495669	WITHOUT_CLASSIFICATION	3.2547504330885486E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997183867931	WITHOUT_CLASSIFICATION	2.8161320681690454E-7	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991756676572	WITHOUT_CLASSIFICATION	8.243323429088847E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999931236379038	WITHOUT_CLASSIFICATION	6.87636209623464E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999029132384567	WITHOUT_CLASSIFICATION	9.70867615432786E-5	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9996195764337583	WITHOUT_CLASSIFICATION	3.8042356624177755E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999893423389073	WITHOUT_CLASSIFICATION	1.0657661092699065E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999029132384567	WITHOUT_CLASSIFICATION	9.70867615432786E-5	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999893423389073	WITHOUT_CLASSIFICATION	1.0657661092699065E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999976118195426	WITHOUT_CLASSIFICATION	2.388180457399131E-5	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.99585759657984	WITHOUT_CLASSIFICATION	0.004142403420159977	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999982217105688	WITHOUT_CLASSIFICATION	1.7782894311127349E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997094855670867	WITHOUT_CLASSIFICATION	2.9051443291323235E-4	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999910871610984	WITHOUT_CLASSIFICATION	8.912838901623173E-6	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999959393262996	WITHOUT_CLASSIFICATION	4.060673700416692E-6	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9798600295802421	WITHOUT_CLASSIFICATION	0.02013997041975793	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999991061751617	WITHOUT_CLASSIFICATION	8.938248383881289E-7	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999753535954249	WITHOUT_CLASSIFICATION	2.4646404575111372E-5	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999997018775981	WITHOUT_CLASSIFICATION	2.981224018790906E-7	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999976908764827	WITHOUT_CLASSIFICATION	2.309123517271428E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999977016289501	WITHOUT_CLASSIFICATION	2.298371049891807E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999995886141235	WITHOUT_CLASSIFICATION	4.1138587658184043E-7	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999977974755351	WITHOUT_CLASSIFICATION	2.2025244648899884E-6	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999944115037634	WITHOUT_CLASSIFICATION	5.588496236652004E-6	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9997435743307108	WITHOUT_CLASSIFICATION	2.564256692892325E-4	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999993761789185	WITHOUT_CLASSIFICATION	6.238210814651078E-7	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999938061401548	WITHOUT_CLASSIFICATION	6.193859845218695E-6	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999906914781469	WITHOUT_CLASSIFICATION	9.308521853046022E-6	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999842944432559	WITHOUT_CLASSIFICATION	1.5705556744058248E-5	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999997585019249	WITHOUT_CLASSIFICATION	2.4149807516351864E-7	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999966334804	WITHOUT_CLASSIFICATION	3.3665197362572474E-9	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999980384412518	WITHOUT_CLASSIFICATION	1.9615587481929074E-6	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999954648455659	WITHOUT_CLASSIFICATION	4.535154434095961E-6	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9997690314964177	WITHOUT_CLASSIFICATION	2.3096850358223926E-4	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999992856007138	WITHOUT_CLASSIFICATION	7.143992860514118E-7	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999987439187	WITHOUT_CLASSIFICATION	1.2560813047657252E-8	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999974489199984	WITHOUT_CLASSIFICATION	2.5510800015635617E-6	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999976483477789	WITHOUT_CLASSIFICATION	2.3516522210354653E-6	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.99999982108884	WITHOUT_CLASSIFICATION	1.7891116002238468E-7	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999996826891429	WITHOUT_CLASSIFICATION	3.1731085705957046E-7	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999969262063	WITHOUT_CLASSIFICATION	3.0737936525166092E-9	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999931216768909	WITHOUT_CLASSIFICATION	6.878323109022112E-6	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999861534309651	WITHOUT_CLASSIFICATION	1.3846569034856338E-5	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999964317714096	WITHOUT_CLASSIFICATION	3.568228590350205E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999991976819784	WITHOUT_CLASSIFICATION	8.02318021665849E-7	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999861534309651	WITHOUT_CLASSIFICATION	1.3846569034856338E-5	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999987243674021	WITHOUT_CLASSIFICATION	1.275632597900145E-6	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998036739984255	WITHOUT_CLASSIFICATION	1.9632600157458937E-4	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999948540235001	WITHOUT_CLASSIFICATION	5.145976499943203E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999969178702214	WITHOUT_CLASSIFICATION	3.082129778715207E-6	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.999999982779398	WITHOUT_CLASSIFICATION	1.722060197255234E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999639778734062	WITHOUT_CLASSIFICATION	3.602212659385336E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999639778734062	WITHOUT_CLASSIFICATION	3.602212659385336E-5	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999912919485515	WITHOUT_CLASSIFICATION	8.708051448410104E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999995755387866	WITHOUT_CLASSIFICATION	4.2446121330452215E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999973373815156	WITHOUT_CLASSIFICATION	2.662618484453109E-6	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999645353293	WITHOUT_CLASSIFICATION	3.5464670698154896E-7	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999890091425799	WITHOUT_CLASSIFICATION	1.0990857420020753E-5	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999999698306977	WITHOUT_CLASSIFICATION	3.0169302298507793E-7	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999985721499021	WITHOUT_CLASSIFICATION	1.4278500979787454E-6	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999973883356389	WITHOUT_CLASSIFICATION	2.6116643610861815E-6	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999589840983	WITHOUT_CLASSIFICATION	4.101590175436141E-8	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998907953731	WITHOUT_CLASSIFICATION	1.09204626907524E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998243755464	WITHOUT_CLASSIFICATION	1.7562445359576445E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998243755464	WITHOUT_CLASSIFICATION	1.7562445359576445E-7	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997369875405633	WITHOUT_CLASSIFICATION	2.630124594366475E-4	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999890585846654	WITHOUT_CLASSIFICATION	1.0941415334508201E-5	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999994136481399	WITHOUT_CLASSIFICATION	5.863518600914063E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998243755464	WITHOUT_CLASSIFICATION	1.7562445359576445E-7	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997369875405633	WITHOUT_CLASSIFICATION	2.630124594366475E-4	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997369875405633	WITHOUT_CLASSIFICATION	2.630124594366475E-4	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999980541883514	WITHOUT_CLASSIFICATION	1.9458116485258804E-6	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999889318086036	WITHOUT_CLASSIFICATION	1.1068191396487848E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999917087522667	WITHOUT_CLASSIFICATION	8.291247733332826E-6	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999904962142705	WITHOUT_CLASSIFICATION	9.503785729564312E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999903580558774	WITHOUT_CLASSIFICATION	9.641944122490644E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999903580558774	WITHOUT_CLASSIFICATION	9.641944122490644E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999863195333354	WITHOUT_CLASSIFICATION	1.368046666467563E-5	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999715508709524	WITHOUT_CLASSIFICATION	2.844912904774107E-5	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999978335287092	WITHOUT_CLASSIFICATION	2.1664712907600776E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999998967456261	WITHOUT_CLASSIFICATION	1.0325437389744694E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999998967456261	WITHOUT_CLASSIFICATION	1.0325437389744694E-6	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999999027138922	WITHOUT_CLASSIFICATION	9.728610780933016E-7	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999337348986775	WITHOUT_CLASSIFICATION	6.626510132238481E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999901794044042	WITHOUT_CLASSIFICATION	9.820595595876154E-6	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999992279232304	WITHOUT_CLASSIFICATION	7.720767697154862E-7	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.99999999572414	WITHOUT_CLASSIFICATION	4.275859985334533E-9	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999939411780402	WITHOUT_CLASSIFICATION	6.05882195983604E-6	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9996494565921186	WITHOUT_CLASSIFICATION	3.5054340788136744E-4	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999906102269058	WITHOUT_CLASSIFICATION	9.389773094250873E-6	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.999996907439781	WITHOUT_CLASSIFICATION	3.0925602190798833E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999901794044042	WITHOUT_CLASSIFICATION	9.820595595876154E-6	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999074521198629	WITHOUT_CLASSIFICATION	9.25478801371637E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999414183691443	WITHOUT_CLASSIFICATION	5.8581630855696695E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999414183691443	WITHOUT_CLASSIFICATION	5.8581630855696695E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999537486836	WITHOUT_CLASSIFICATION	4.62513164297436E-8	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999989033309532	WITHOUT_CLASSIFICATION	1.0966690468824124E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999020629321078	WITHOUT_CLASSIFICATION	9.793706789220555E-5	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999246547740903	WITHOUT_CLASSIFICATION	7.534522590964622E-5	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999937698227177	WITHOUT_CLASSIFICATION	6.230177282375329E-6	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999000575919257	WITHOUT_CLASSIFICATION	9.994240807420554E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9999675664389104	WITHOUT_CLASSIFICATION	3.243356108965299E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999994130664	WITHOUT_CLASSIFICATION	5.869336515124499E-10	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998957865572	WITHOUT_CLASSIFICATION	1.0421344266393415E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998957865572	WITHOUT_CLASSIFICATION	1.0421344266393415E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999971331855807	WITHOUT_CLASSIFICATION	2.8668144193656515E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999994597510803	WITHOUT_CLASSIFICATION	5.40248919751657E-7	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999998718380978	WITHOUT_CLASSIFICATION	1.281619021957834E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988891452724	WITHOUT_CLASSIFICATION	1.1108547276623688E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999996143815277	WITHOUT_CLASSIFICATION	3.856184723325909E-7	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999973933745321	WITHOUT_CLASSIFICATION	2.6066254679978204E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999998595818141	WITHOUT_CLASSIFICATION	1.4041818590112755E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999998798180185	WITHOUT_CLASSIFICATION	1.201819814117179E-7	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999997110443857	WITHOUT_CLASSIFICATION	2.889556143166934E-7	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999991280125621	WITHOUT_CLASSIFICATION	8.71987437957606E-7	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9991856153520606	WITHOUT_CLASSIFICATION	8.14384647939318E-4	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999964398498821	WITHOUT_CLASSIFICATION	3.5601501180499626E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999924928134789	WITHOUT_CLASSIFICATION	7.507186521054155E-6	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999984337383746	WITHOUT_CLASSIFICATION	1.5662616253928153E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999989348618924	WITHOUT_CLASSIFICATION	1.065138107580434E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999976445532304	WITHOUT_CLASSIFICATION	2.355446769670501E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999976445532304	WITHOUT_CLASSIFICATION	2.355446769670501E-6	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999997258210575	WITHOUT_CLASSIFICATION	2.741789425042772E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999974719360687	WITHOUT_CLASSIFICATION	2.5280639312831272E-6	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999953118579461	WITHOUT_CLASSIFICATION	4.6881420538553415E-6	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999974072829771	WITHOUT_CLASSIFICATION	2.5927170227973175E-6	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999995156714664	WITHOUT_CLASSIFICATION	4.843285336195417E-7	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999999448000441	WITHOUT_CLASSIFICATION	5.519995589415841E-7	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999992596612964	WITHOUT_CLASSIFICATION	7.403387034768289E-7	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999656591530868	WITHOUT_CLASSIFICATION	3.434084691321902E-5	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999976503375735	WITHOUT_CLASSIFICATION	2.3496624266283155E-6	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999985596907909	WITHOUT_CLASSIFICATION	1.4403092091706357E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998649794275	WITHOUT_CLASSIFICATION	1.3502057238824098E-7	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999945499398529	WITHOUT_CLASSIFICATION	5.450060147060454E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.999998322286985	WITHOUT_CLASSIFICATION	1.6777130149319188E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999374177951	WITHOUT_CLASSIFICATION	6.258220486187008E-8	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999784951558	WITHOUT_CLASSIFICATION	2.1504844185965617E-8	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999686666885	WITHOUT_CLASSIFICATION	3.133331156502607E-8	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999998668579901	WITHOUT_CLASSIFICATION	1.3314200989351016E-6	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999663041849519	WITHOUT_CLASSIFICATION	3.3695815048069036E-5	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999997743652483	WITHOUT_CLASSIFICATION	2.2563475164069323E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988891452724	WITHOUT_CLASSIFICATION	1.1108547276623688E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988891452724	WITHOUT_CLASSIFICATION	1.1108547276623688E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999973933745321	WITHOUT_CLASSIFICATION	2.6066254679978204E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999973933745321	WITHOUT_CLASSIFICATION	2.6066254679978204E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999924928134789	WITHOUT_CLASSIFICATION	7.507186521054155E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999976445532304	WITHOUT_CLASSIFICATION	2.355446769670501E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999374177951	WITHOUT_CLASSIFICATION	6.258220486187008E-8	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998775891287	WITHOUT_CLASSIFICATION	1.2241087131833254E-7	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999994817477064	WITHOUT_CLASSIFICATION	5.182522937297602E-7	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999929266047135	WITHOUT_CLASSIFICATION	7.073395286509455E-6	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999979223770312	WITHOUT_CLASSIFICATION	2.0776229687114536E-6	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999941375738678	WITHOUT_CLASSIFICATION	5.862426132167561E-6	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999990693423845	WITHOUT_CLASSIFICATION	9.306576155537425E-7	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999917485389771	WITHOUT_CLASSIFICATION	8.251461022879616E-6	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999958287619508	WITHOUT_CLASSIFICATION	4.1712380492059724E-5	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999459677343956	WITHOUT_CLASSIFICATION	5.403226560433979E-5	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.999999992221345	WITHOUT_CLASSIFICATION	7.778655012232197E-9	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999999885363619	WITHOUT_CLASSIFICATION	1.1463638107497855E-7	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999999885363619	WITHOUT_CLASSIFICATION	1.1463638107497855E-7	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998590103125	WITHOUT_CLASSIFICATION	1.4098968757628813E-7	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999992947741863	WITHOUT_CLASSIFICATION	7.052258137331596E-7	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.999999647713103	WITHOUT_CLASSIFICATION	3.522868970760929E-7	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999983522670503	WITHOUT_CLASSIFICATION	1.647732949781398E-6	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999150287298	WITHOUT_CLASSIFICATION	8.497127020114509E-8	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.999999623324008	WITHOUT_CLASSIFICATION	3.766759920534405E-7	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999995468424847	WITHOUT_CLASSIFICATION	4.53157515356307E-7	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996773063057	WITHOUT_CLASSIFICATION	3.226936943468227E-7	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999759925652141	WITHOUT_CLASSIFICATION	2.4007434785945534E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999998568600306	WITHOUT_CLASSIFICATION	1.4313996947845372E-7	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999998568600306	WITHOUT_CLASSIFICATION	1.4313996947845372E-7	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999481363185	WITHOUT_CLASSIFICATION	5.186368158536999E-8	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999997612689706	WITHOUT_CLASSIFICATION	2.387310293562502E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999998744416271	WITHOUT_CLASSIFICATION	1.2555837295562476E-7	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999997803466214	WITHOUT_CLASSIFICATION	2.1965337857139597E-7	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999867589488797	WITHOUT_CLASSIFICATION	1.3241051120310227E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999973933745321	WITHOUT_CLASSIFICATION	2.6066254679978204E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999924928134789	WITHOUT_CLASSIFICATION	7.507186521054155E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999989348618924	WITHOUT_CLASSIFICATION	1.065138107580434E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999374177951	WITHOUT_CLASSIFICATION	6.258220486187008E-8	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999374177951	WITHOUT_CLASSIFICATION	6.258220486187008E-8	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997234928043	WITHOUT_CLASSIFICATION	2.765071957014574E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997234928043	WITHOUT_CLASSIFICATION	2.765071957014574E-7	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999990780870169	WITHOUT_CLASSIFICATION	9.219129830743044E-7	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.999998648726108	WITHOUT_CLASSIFICATION	1.3512738920600684E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.999998648726108	WITHOUT_CLASSIFICATION	1.3512738920600684E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999980283975857	WITHOUT_CLASSIFICATION	1.9716024144054073E-6	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999967854759202	WITHOUT_CLASSIFICATION	3.214524079870434E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999995043901148	WITHOUT_CLASSIFICATION	4.956098853213829E-7	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999977988654195	WITHOUT_CLASSIFICATION	2.2011345804719617E-6	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999976992854552	WITHOUT_CLASSIFICATION	2.3007145447871453E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999998265954373	WITHOUT_CLASSIFICATION	1.734045626546974E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999998265954373	WITHOUT_CLASSIFICATION	1.734045626546974E-7	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999664019931087	WITHOUT_CLASSIFICATION	3.3598006891218965E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999998693300721	WITHOUT_CLASSIFICATION	1.3066992788992055E-7	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999993527235821	WITHOUT_CLASSIFICATION	6.472764178690076E-7	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999976388354478	WITHOUT_CLASSIFICATION	2.361164552308555E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999998434821519	WITHOUT_CLASSIFICATION	1.5651784823782968E-7	DEFECT
// short	WITHOUT_CLASSIFICATION	0.99999688267186	WITHOUT_CLASSIFICATION	3.117328139865559E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999998515886766	WITHOUT_CLASSIFICATION	1.4841132340367837E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999929465972054	WITHOUT_CLASSIFICATION	7.0534027946454E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999929465972054	WITHOUT_CLASSIFICATION	7.0534027946454E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.999919228927573	WITHOUT_CLASSIFICATION	8.077107242692653E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.999919228927573	WITHOUT_CLASSIFICATION	8.077107242692653E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999995085188912	WITHOUT_CLASSIFICATION	4.914811087891974E-7	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999995085188912	WITHOUT_CLASSIFICATION	4.914811087891974E-7	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999394855515	WITHOUT_CLASSIFICATION	6.051444843972592E-8	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999394855515	WITHOUT_CLASSIFICATION	6.051444843972592E-8	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999998265954373	WITHOUT_CLASSIFICATION	1.734045626546974E-7	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999998515886766	WITHOUT_CLASSIFICATION	1.4841132340367837E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999929465972054	WITHOUT_CLASSIFICATION	7.0534027946454E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999929465972054	WITHOUT_CLASSIFICATION	7.0534027946454E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.999919228927573	WITHOUT_CLASSIFICATION	8.077107242692653E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999995085188912	WITHOUT_CLASSIFICATION	4.914811087891974E-7	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999995085188912	WITHOUT_CLASSIFICATION	4.914811087891974E-7	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999394855515	WITHOUT_CLASSIFICATION	6.051444843972592E-8	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999155157565	WITHOUT_CLASSIFICATION	8.448424347770555E-8	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999991787446114	WITHOUT_CLASSIFICATION	8.212553885908285E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999873865841519	WITHOUT_CLASSIFICATION	1.2613415848101708E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999985134272957	WITHOUT_CLASSIFICATION	1.4865727042564881E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999995285437387	WITHOUT_CLASSIFICATION	4.714562612426949E-7	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999922534015168	WITHOUT_CLASSIFICATION	7.746598483344844E-6	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9996425592098265	WITHOUT_CLASSIFICATION	3.5744079017353115E-4	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.8098803492374861	WITHOUT_CLASSIFICATION	0.19011965076251405	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9923759497837219	WITHOUT_CLASSIFICATION	0.007624050216278173	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999994162072254	WITHOUT_CLASSIFICATION	5.837927745913215E-7	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999982198660803	WITHOUT_CLASSIFICATION	1.780133919627132E-6	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997509119688	WITHOUT_CLASSIFICATION	2.4908803120475663E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999912919485515	WITHOUT_CLASSIFICATION	8.708051448410104E-6	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999922534015168	WITHOUT_CLASSIFICATION	7.746598483344844E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998383188265993	WITHOUT_CLASSIFICATION	1.616811734005665E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998383188265993	WITHOUT_CLASSIFICATION	1.616811734005665E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999968965313479	WITHOUT_CLASSIFICATION	3.1034686520234893E-6	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996182476542	WITHOUT_CLASSIFICATION	3.817523458525378E-7	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996182476542	WITHOUT_CLASSIFICATION	3.817523458525378E-7	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9977134045323756	WITHOUT_CLASSIFICATION	0.0022865954676244272	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999966201416174	WITHOUT_CLASSIFICATION	3.379858382606574E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999985455807543	WITHOUT_CLASSIFICATION	1.4544192457052555E-5	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999963361614652	WITHOUT_CLASSIFICATION	3.6638385349080907E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999963361614652	WITHOUT_CLASSIFICATION	3.6638385349080907E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999995092027082	WITHOUT_CLASSIFICATION	4.907972918268549E-7	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999900415158208	WITHOUT_CLASSIFICATION	9.958484179196777E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999900415158208	WITHOUT_CLASSIFICATION	9.958484179196777E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999982199409576	WITHOUT_CLASSIFICATION	1.7800590423780316E-6	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999969208082892	WITHOUT_CLASSIFICATION	3.0791917108973665E-6	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999996027112195	WITHOUT_CLASSIFICATION	3.972887805092665E-7	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999886849328947	WITHOUT_CLASSIFICATION	1.1315067105198337E-5	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999964352617526	WITHOUT_CLASSIFICATION	3.5647382472361624E-6	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999913807562919	WITHOUT_CLASSIFICATION	8.619243708119081E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999988382827717	WITHOUT_CLASSIFICATION	1.1617172283530845E-6	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999931277179791	WITHOUT_CLASSIFICATION	6.872282020942324E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9967447053838873	WITHOUT_CLASSIFICATION	0.003255294616112816	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999938984071397	WITHOUT_CLASSIFICATION	6.101592860346883E-6	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999607207423431	WITHOUT_CLASSIFICATION	3.9279257657005535E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999882811276128	WITHOUT_CLASSIFICATION	1.1718872387222088E-5	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999732117355	WITHOUT_CLASSIFICATION	2.6788264525736042E-8	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999990842267138	WITHOUT_CLASSIFICATION	9.157732863378633E-7	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999966500689903	WITHOUT_CLASSIFICATION	3.349931009731822E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999882811276128	WITHOUT_CLASSIFICATION	1.1718872387222088E-5	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999989074135449	WITHOUT_CLASSIFICATION	1.092586455132568E-6	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997220527433	WITHOUT_CLASSIFICATION	2.7794725669172535E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999957744311476	WITHOUT_CLASSIFICATION	4.225568852466771E-6	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999788008044562	WITHOUT_CLASSIFICATION	2.1199195543854975E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.999990934875707	WITHOUT_CLASSIFICATION	9.065124292962751E-6	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999981680548449	WITHOUT_CLASSIFICATION	1.831945155050039E-6	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999983830981967	WITHOUT_CLASSIFICATION	1.6169018033776319E-6	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999949446760485	WITHOUT_CLASSIFICATION	5.055323951470964E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999975511387041	WITHOUT_CLASSIFICATION	2.4488612959146468E-6	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994005555851	WITHOUT_CLASSIFICATION	5.994444149323802E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999937697454465	WITHOUT_CLASSIFICATION	6.230254553402107E-6	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999998554658588	WITHOUT_CLASSIFICATION	1.44534141150334E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999950614082862	WITHOUT_CLASSIFICATION	4.938591713828656E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999988382827717	WITHOUT_CLASSIFICATION	1.1617172283530845E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999975511387041	WITHOUT_CLASSIFICATION	2.4488612959146468E-6	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999937697454465	WITHOUT_CLASSIFICATION	6.230254553402107E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999950614082862	WITHOUT_CLASSIFICATION	4.938591713828656E-6	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999952515681683	WITHOUT_CLASSIFICATION	4.748431831667221E-6	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999329576824617	WITHOUT_CLASSIFICATION	6.704231753827368E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999986458413206	WITHOUT_CLASSIFICATION	1.3541586793968686E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999926668775833	WITHOUT_CLASSIFICATION	7.333122416697969E-6	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999986139522261	WITHOUT_CLASSIFICATION	1.386047773910174E-6	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999410245446705	WITHOUT_CLASSIFICATION	5.897545532959191E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999801857018692	WITHOUT_CLASSIFICATION	1.9814298130783184E-5	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9998120672783185	WITHOUT_CLASSIFICATION	1.8793272168140144E-4	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999932271376869	WITHOUT_CLASSIFICATION	6.772862313048136E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999550067683	WITHOUT_CLASSIFICATION	4.499323175007236E-8	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999998182008057	WITHOUT_CLASSIFICATION	1.81799194311111E-6	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999987062635576	WITHOUT_CLASSIFICATION	1.2937364424245666E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997314446297	WITHOUT_CLASSIFICATION	2.6855537030449167E-7	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999933785173453	WITHOUT_CLASSIFICATION	6.621482654716445E-6	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999615817019978	WITHOUT_CLASSIFICATION	3.841829800224283E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999965752272677	WITHOUT_CLASSIFICATION	3.424772732312575E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999853054991306	WITHOUT_CLASSIFICATION	1.4694500869353935E-5	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999998769369427	WITHOUT_CLASSIFICATION	1.2306305738587157E-7	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999951071941163	WITHOUT_CLASSIFICATION	4.892805883760067E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999975511387041	WITHOUT_CLASSIFICATION	2.4488612959146468E-6	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999433526884	WITHOUT_CLASSIFICATION	5.6647311638716736E-8	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999994076450874	WITHOUT_CLASSIFICATION	5.923549125122534E-7	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999998222466515	WITHOUT_CLASSIFICATION	1.7775334850378384E-7	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999999496567994	WITHOUT_CLASSIFICATION	5.0343200698554094E-8	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999999737624704	WITHOUT_CLASSIFICATION	2.6237529639798176E-8	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9996830250833206	WITHOUT_CLASSIFICATION	3.169749166793463E-4	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999997714963412	WITHOUT_CLASSIFICATION	2.285036588194853E-7	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999998366680467	WITHOUT_CLASSIFICATION	1.6333195334072306E-7	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999364386894436	WITHOUT_CLASSIFICATION	6.356131055641958E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999803444219586	WITHOUT_CLASSIFICATION	1.965557804138622E-5	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999958668961855	WITHOUT_CLASSIFICATION	4.133103814519176E-6	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999950949957197	WITHOUT_CLASSIFICATION	4.905004280221358E-6	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.999981778932034	WITHOUT_CLASSIFICATION	1.8221067966031593E-5	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999996175472016	WITHOUT_CLASSIFICATION	3.824527984219399E-7	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999511979394	WITHOUT_CLASSIFICATION	4.880206062954195E-8	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999615966819654	WITHOUT_CLASSIFICATION	3.840331803466783E-5	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999898341217722	WITHOUT_CLASSIFICATION	1.0165878227743804E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999962982072013	WITHOUT_CLASSIFICATION	3.701792798804474E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.999999137318073	WITHOUT_CLASSIFICATION	8.626819269237616E-7	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999972417252491	WITHOUT_CLASSIFICATION	2.758274750881487E-6	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999648607	WITHOUT_CLASSIFICATION	3.513933161015825E-11	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999866982306089	WITHOUT_CLASSIFICATION	1.3301769391069202E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999909241029871	WITHOUT_CLASSIFICATION	9.075897012994752E-6	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999882255670703	WITHOUT_CLASSIFICATION	1.1774432929695463E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999413448726658	WITHOUT_CLASSIFICATION	5.865512733410029E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999413448726658	WITHOUT_CLASSIFICATION	5.865512733410029E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999934138953132	WITHOUT_CLASSIFICATION	6.586104686892169E-6	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999989580242248	WITHOUT_CLASSIFICATION	1.0419757752226158E-6	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999974861885763	WITHOUT_CLASSIFICATION	2.513811423627164E-6	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999954805475382	WITHOUT_CLASSIFICATION	4.5194524618239826E-6	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999977155738349	WITHOUT_CLASSIFICATION	2.2844261652284368E-6	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.999278456653505	WITHOUT_CLASSIFICATION	7.215433464950196E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999950244854763	WITHOUT_CLASSIFICATION	4.9755145237119095E-6	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999944643175878	WITHOUT_CLASSIFICATION	5.535682412148382E-6	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999954757270872	WITHOUT_CLASSIFICATION	4.524272912746724E-6	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999962396548475	WITHOUT_CLASSIFICATION	3.7603451525522076E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999722564338521	WITHOUT_CLASSIFICATION	2.7743566147812626E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999993007677911	WITHOUT_CLASSIFICATION	6.992322088723487E-7	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999849417732893	WITHOUT_CLASSIFICATION	1.5058226710770842E-5	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9987909381573401	WITHOUT_CLASSIFICATION	0.0012090618426598807	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975775315023	WITHOUT_CLASSIFICATION	2.4224684977381825E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956239402645	WITHOUT_CLASSIFICATION	4.376059735433944E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999837919157939	WITHOUT_CLASSIFICATION	1.620808420611365E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999997863722947	WITHOUT_CLASSIFICATION	2.1362770530408785E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999970239091264	WITHOUT_CLASSIFICATION	2.97609087370726E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999983391952029	WITHOUT_CLASSIFICATION	1.6608047971400016E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999862191099661	WITHOUT_CLASSIFICATION	1.3780890034001246E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999862191099661	WITHOUT_CLASSIFICATION	1.3780890034001246E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999791109528674	WITHOUT_CLASSIFICATION	2.08890471325725E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999791109528674	WITHOUT_CLASSIFICATION	2.08890471325725E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999909241029871	WITHOUT_CLASSIFICATION	9.075897012994752E-6	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999968644917128	WITHOUT_CLASSIFICATION	3.1355082871980756E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993914337997031	WITHOUT_CLASSIFICATION	6.085662002968254E-4	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999978666745851	WITHOUT_CLASSIFICATION	2.133325414922966E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999971331855807	WITHOUT_CLASSIFICATION	2.8668144193656515E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993914337997031	WITHOUT_CLASSIFICATION	6.085662002968254E-4	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999978666745851	WITHOUT_CLASSIFICATION	2.133325414922966E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999964028291107	WITHOUT_CLASSIFICATION	3.5971708892024106E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999976250976444	WITHOUT_CLASSIFICATION	2.3749023556688533E-6	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999968123444559	WITHOUT_CLASSIFICATION	3.1876555440535233E-6	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999999821159765	WITHOUT_CLASSIFICATION	1.7884023551134303E-8	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999170913248011	WITHOUT_CLASSIFICATION	8.290867519895225E-5	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.999988463051698	WITHOUT_CLASSIFICATION	1.153694830197634E-5	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999585444268	WITHOUT_CLASSIFICATION	4.145557322331275E-8	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999997423621063	WITHOUT_CLASSIFICATION	2.576378936193151E-7	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999913205151078	WITHOUT_CLASSIFICATION	8.679484892141016E-6	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999997755518	WITHOUT_CLASSIFICATION	2.244482100363592E-9	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999999576833055	WITHOUT_CLASSIFICATION	4.231669450589856E-7	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999788458851	WITHOUT_CLASSIFICATION	2.115411498672599E-8	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999984258747	WITHOUT_CLASSIFICATION	1.5741253009381436E-9	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999996582852629	WITHOUT_CLASSIFICATION	3.417147370660222E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999971331855807	WITHOUT_CLASSIFICATION	2.8668144193656515E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999986649976497	WITHOUT_CLASSIFICATION	1.3350023503834264E-6	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999994523362226	WITHOUT_CLASSIFICATION	5.4766377738953154E-6	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999994523362226	WITHOUT_CLASSIFICATION	5.4766377738953154E-6	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999727261863153	WITHOUT_CLASSIFICATION	2.7273813684764906E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999964028291107	WITHOUT_CLASSIFICATION	3.5971708892024106E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999810172521981	WITHOUT_CLASSIFICATION	1.8982747801814946E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999972814356348	WITHOUT_CLASSIFICATION	2.7185643652388086E-6	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9997100537270268	WITHOUT_CLASSIFICATION	2.899462729732224E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999629277032392	WITHOUT_CLASSIFICATION	3.7072296760708746E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999062975552362	WITHOUT_CLASSIFICATION	9.370244476386118E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999964028291107	WITHOUT_CLASSIFICATION	3.5971708892024106E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999629277032392	WITHOUT_CLASSIFICATION	3.7072296760708746E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999062975552362	WITHOUT_CLASSIFICATION	9.370244476386118E-5	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999959130392859	WITHOUT_CLASSIFICATION	4.086960714085088E-6	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999996023480193	WITHOUT_CLASSIFICATION	3.976519806973334E-6	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999836762960261	WITHOUT_CLASSIFICATION	1.6323703973878576E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999964028291107	WITHOUT_CLASSIFICATION	3.5971708892024106E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999964028291107	WITHOUT_CLASSIFICATION	3.5971708892024106E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999931814934454	WITHOUT_CLASSIFICATION	6.818506554561342E-6	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.999997089745272	WITHOUT_CLASSIFICATION	2.910254727918602E-6	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999953281159302	WITHOUT_CLASSIFICATION	4.6718840698242205E-6	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999984161088226	WITHOUT_CLASSIFICATION	1.5838911773792322E-6	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999978088584208	WITHOUT_CLASSIFICATION	2.1911415791313585E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999998012371039	WITHOUT_CLASSIFICATION	1.9876289603254283E-7	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999987690576552	WITHOUT_CLASSIFICATION	1.2309423448840968E-6	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999997122613097	WITHOUT_CLASSIFICATION	2.877386903435223E-7	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999836950518256	WITHOUT_CLASSIFICATION	1.6304948174430662E-5	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999932404422793	WITHOUT_CLASSIFICATION	6.759557720568156E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9998657608945329	WITHOUT_CLASSIFICATION	1.3423910546715178E-4	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999837004471946	WITHOUT_CLASSIFICATION	1.6299552805305784E-5	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999749010475	WITHOUT_CLASSIFICATION	2.5098952430626243E-8	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999994364593309	WITHOUT_CLASSIFICATION	5.635406690922697E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881109807653	WITHOUT_CLASSIFICATION	1.1889019234581197E-5	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9997913481548498	WITHOUT_CLASSIFICATION	2.0865184515019044E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999928560644616	WITHOUT_CLASSIFICATION	7.143935538411875E-6	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999941380544883	WITHOUT_CLASSIFICATION	5.861945511547522E-6	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9997406656041856	WITHOUT_CLASSIFICATION	2.593343958143248E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999968104482518	WITHOUT_CLASSIFICATION	3.1895517481135386E-6	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999799786082701	WITHOUT_CLASSIFICATION	2.0021391729840806E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998921086427839	WITHOUT_CLASSIFICATION	1.0789135721606962E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998921086427839	WITHOUT_CLASSIFICATION	1.0789135721606962E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999928560644616	WITHOUT_CLASSIFICATION	7.143935538411875E-6	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998099092486971	WITHOUT_CLASSIFICATION	1.9009075130296823E-4	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999995554759126	WITHOUT_CLASSIFICATION	4.4452408733431465E-7	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9979664135720925	WITHOUT_CLASSIFICATION	0.0020335864279074586	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999989493322479	WITHOUT_CLASSIFICATION	1.0506677520564252E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999355583836057	WITHOUT_CLASSIFICATION	6.444161639422708E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999992854562739	WITHOUT_CLASSIFICATION	7.145437260388796E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9959554371070313	WITHOUT_CLASSIFICATION	0.004044562892968731	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999999910013249	WITHOUT_CLASSIFICATION	8.998675146610014E-9	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999270313331	WITHOUT_CLASSIFICATION	7.296866698935582E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999995709818459	WITHOUT_CLASSIFICATION	4.290181542249794E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997940448561758	WITHOUT_CLASSIFICATION	2.0595514382412504E-4	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999909436939693	WITHOUT_CLASSIFICATION	9.056306030668052E-6	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999859227955015	WITHOUT_CLASSIFICATION	1.4077204498454506E-5	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999522815508	WITHOUT_CLASSIFICATION	4.771844920639068E-7	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999532505299503	WITHOUT_CLASSIFICATION	4.674947004977598E-5	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999047859643815	WITHOUT_CLASSIFICATION	9.521403561853353E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999987032024274	WITHOUT_CLASSIFICATION	1.2967975726115152E-5	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999946015412547	WITHOUT_CLASSIFICATION	5.398458745310926E-6	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996522318285	WITHOUT_CLASSIFICATION	3.477681715587263E-7	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999278467123045	WITHOUT_CLASSIFICATION	7.21532876955548E-5	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999899858751196	WITHOUT_CLASSIFICATION	1.0014124880429795E-5	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999995895819522	WITHOUT_CLASSIFICATION	4.1041804774651396E-7	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807276320267	WITHOUT_CLASSIFICATION	1.9272367973228004E-5	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973646794982	WITHOUT_CLASSIFICATION	2.635320501792827E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999631360494341	WITHOUT_CLASSIFICATION	3.686395056590891E-5	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948559721313	WITHOUT_CLASSIFICATION	5.144027868734335E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999168052445777	WITHOUT_CLASSIFICATION	8.319475542236441E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999632119468005	WITHOUT_CLASSIFICATION	3.67880531995203E-5	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569622093176	WITHOUT_CLASSIFICATION	4.303779068243378E-5	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999800690270676	WITHOUT_CLASSIFICATION	1.9930972932362646E-5	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999922639239825	WITHOUT_CLASSIFICATION	7.736076017458677E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999613687966252	WITHOUT_CLASSIFICATION	3.8631203374731616E-5	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982270365834	WITHOUT_CLASSIFICATION	1.7729634165450598E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997030294135	WITHOUT_CLASSIFICATION	2.969705865277744E-7	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993550257905	WITHOUT_CLASSIFICATION	6.44974209517579E-7	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926238323844	WITHOUT_CLASSIFICATION	7.376167615590306E-6	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999407229623913	WITHOUT_CLASSIFICATION	5.927703760859686E-5	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975175812633	WITHOUT_CLASSIFICATION	2.4824187366889117E-6	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999135700716554	WITHOUT_CLASSIFICATION	8.642992834458691E-5	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677117047572	WITHOUT_CLASSIFICATION	3.228829524289061E-5	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999226789415748	WITHOUT_CLASSIFICATION	7.732105842513157E-5	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999632113666552	WITHOUT_CLASSIFICATION	3.6788633344817246E-5	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9998529319000857	WITHOUT_CLASSIFICATION	1.470680999143748E-4	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999330367399687	WITHOUT_CLASSIFICATION	6.696326003131564E-5	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999998930700986	WITHOUT_CLASSIFICATION	1.0692990128011173E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999999096007947	WITHOUT_CLASSIFICATION	9.039920529619388E-7	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999986228481921	WITHOUT_CLASSIFICATION	1.377151807913462E-6	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999977960428555	WITHOUT_CLASSIFICATION	2.2039571443702618E-6	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999988041953376	WITHOUT_CLASSIFICATION	1.1958046624441443E-6	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999977734186092	WITHOUT_CLASSIFICATION	2.2265813908075845E-6	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999857347034351	WITHOUT_CLASSIFICATION	1.4265296564775832E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999895279094666	WITHOUT_CLASSIFICATION	1.0472090533518928E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999985504308464	WITHOUT_CLASSIFICATION	1.449569153607834E-6	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999862076211986	WITHOUT_CLASSIFICATION	1.379237880145922E-5	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999982783223343	WITHOUT_CLASSIFICATION	1.721677665580814E-6	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9994970218574577	WITHOUT_CLASSIFICATION	5.029781425422317E-4	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9991288601008947	WITHOUT_CLASSIFICATION	8.711398991053704E-4	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999943017521785	WITHOUT_CLASSIFICATION	5.6982478214501214E-6	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999116895549974	WITHOUT_CLASSIFICATION	8.831044500257284E-5	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933558004058	WITHOUT_CLASSIFICATION	6.644199594207944E-6	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999608158338299	WITHOUT_CLASSIFICATION	3.9184166170137854E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986021235538	WITHOUT_CLASSIFICATION	1.397876446081086E-6	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999820269521489	WITHOUT_CLASSIFICATION	1.7973047851092025E-5	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999647492291974	WITHOUT_CLASSIFICATION	3.5250770802500416E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999996743859283	WITHOUT_CLASSIFICATION	3.2561407161428885E-7	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999995846471165	WITHOUT_CLASSIFICATION	4.1535288351687475E-7	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9996521171966207	WITHOUT_CLASSIFICATION	3.478828033792577E-4	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999343107563	WITHOUT_CLASSIFICATION	6.568924366835412E-8	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999989246379362	WITHOUT_CLASSIFICATION	1.0753620638390256E-6	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999925971608467	WITHOUT_CLASSIFICATION	7.402839153458771E-6	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999994012988302	WITHOUT_CLASSIFICATION	5.987011696368633E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999471378018	WITHOUT_CLASSIFICATION	5.28621982536402E-8	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999999654162094	WITHOUT_CLASSIFICATION	3.458379060871566E-7	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.999999278520092	WITHOUT_CLASSIFICATION	7.214799079417328E-7	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999949397238791	WITHOUT_CLASSIFICATION	5.0602761208956554E-6	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999999867742917	WITHOUT_CLASSIFICATION	1.3225708298540838E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999999096007947	WITHOUT_CLASSIFICATION	9.039920529619388E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999731335371379	WITHOUT_CLASSIFICATION	2.686646286216616E-5	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999996178779471	WITHOUT_CLASSIFICATION	3.8212205297896787E-7	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999959925870066	WITHOUT_CLASSIFICATION	4.007412993379266E-6	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997291279141398	WITHOUT_CLASSIFICATION	2.7087208586026954E-4	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999986674771969	WITHOUT_CLASSIFICATION	1.3325228030189362E-6	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.999999397779809	WITHOUT_CLASSIFICATION	6.022201910466079E-7	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9998229686250829	WITHOUT_CLASSIFICATION	1.770313749169761E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998289362444781	WITHOUT_CLASSIFICATION	1.7106375552186574E-4	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998392552633218	WITHOUT_CLASSIFICATION	1.6074473667823558E-4	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999984228462928	WITHOUT_CLASSIFICATION	1.5771537071865317E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999969783482221	WITHOUT_CLASSIFICATION	3.021651777974034E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999992492093266	WITHOUT_CLASSIFICATION	7.507906734030356E-7	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999827548628	WITHOUT_CLASSIFICATION	1.7245137221912766E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999862260500136	WITHOUT_CLASSIFICATION	1.3773949986270127E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999999334154798	WITHOUT_CLASSIFICATION	6.658452018343048E-8	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999998962075247	WITHOUT_CLASSIFICATION	1.0379247535519871E-7	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999929413570654	WITHOUT_CLASSIFICATION	7.058642934616738E-6	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999906971056008	WITHOUT_CLASSIFICATION	9.302894399196307E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999992266244079	WITHOUT_CLASSIFICATION	7.733755920916095E-7	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999996572515789	WITHOUT_CLASSIFICATION	3.427484209860502E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999983375236832	WITHOUT_CLASSIFICATION	1.662476316833147E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999950433491316	WITHOUT_CLASSIFICATION	4.956650868397677E-6	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999988217468969	WITHOUT_CLASSIFICATION	1.1782531030650657E-6	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999980873605039	WITHOUT_CLASSIFICATION	1.9126394961530964E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999735080629982	WITHOUT_CLASSIFICATION	2.6491937001762043E-5	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999854619231	WITHOUT_CLASSIFICATION	1.4538076816601186E-8	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9996329457278749	WITHOUT_CLASSIFICATION	3.6705427212513293E-4	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999948791822239	WITHOUT_CLASSIFICATION	5.120817776125117E-6	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999984703971226	WITHOUT_CLASSIFICATION	1.5296028772956555E-6	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999672013043348	WITHOUT_CLASSIFICATION	3.2798695665177855E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999999096007947	WITHOUT_CLASSIFICATION	9.039920529619388E-7	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9957542576823957	WITHOUT_CLASSIFICATION	0.004245742317604404	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999959669556296	WITHOUT_CLASSIFICATION	4.0330443702592E-6	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9895163826393308	WITHOUT_CLASSIFICATION	0.01048361736066916	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999999096007947	WITHOUT_CLASSIFICATION	9.039920529619388E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999663844111	WITHOUT_CLASSIFICATION	3.36155888618074E-8	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999983375236832	WITHOUT_CLASSIFICATION	1.662476316833147E-6	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999695866576246	WITHOUT_CLASSIFICATION	3.041334237540037E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993141138385236	WITHOUT_CLASSIFICATION	6.858861614764259E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998711152160963	WITHOUT_CLASSIFICATION	1.2888478390372113E-4	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999984228462928	WITHOUT_CLASSIFICATION	1.5771537071865317E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999969783482221	WITHOUT_CLASSIFICATION	3.021651777974034E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999992492093266	WITHOUT_CLASSIFICATION	7.507906734030356E-7	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999237558398	WITHOUT_CLASSIFICATION	7.624416024123375E-8	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999997461728868	WITHOUT_CLASSIFICATION	2.5382711329901957E-7	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999942584736824	WITHOUT_CLASSIFICATION	5.741526317566873E-6	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.999919550821383	WITHOUT_CLASSIFICATION	8.04491786170881E-5	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999802127808466	WITHOUT_CLASSIFICATION	1.9787219153414697E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999999096007947	WITHOUT_CLASSIFICATION	9.039920529619388E-7	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999827548628	WITHOUT_CLASSIFICATION	1.7245137221912766E-8	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999862260500136	WITHOUT_CLASSIFICATION	1.3773949986270127E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999506241988	WITHOUT_CLASSIFICATION	4.937580121361811E-7	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999956163090071	WITHOUT_CLASSIFICATION	4.38369099289711E-5	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999995012739988	WITHOUT_CLASSIFICATION	4.987260011528729E-7	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999809840791885	WITHOUT_CLASSIFICATION	1.9015920811521833E-5	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999997122784808	WITHOUT_CLASSIFICATION	2.8772151919955793E-7	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999974184898308	WITHOUT_CLASSIFICATION	2.581510169081921E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677117047572	WITHOUT_CLASSIFICATION	3.228829524289061E-5	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999776146671523	WITHOUT_CLASSIFICATION	2.238533284762065E-5	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999999858371436	WITHOUT_CLASSIFICATION	1.4162856400136323E-7	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999990285327568	WITHOUT_CLASSIFICATION	9.714672431858587E-7	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999989637424183	WITHOUT_CLASSIFICATION	1.0362575817051275E-6	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999214502516	WITHOUT_CLASSIFICATION	7.854974836978175E-8	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999168052445777	WITHOUT_CLASSIFICATION	8.319475542236441E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999632119468005	WITHOUT_CLASSIFICATION	3.67880531995203E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997030294135	WITHOUT_CLASSIFICATION	2.969705865277744E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999214502516	WITHOUT_CLASSIFICATION	7.854974836978175E-8	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999916276987115	WITHOUT_CLASSIFICATION	8.372301288476815E-6	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999979781094919	WITHOUT_CLASSIFICATION	2.021890508117792E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998492973688323	WITHOUT_CLASSIFICATION	1.5070263116767494E-4	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999127475417715	WITHOUT_CLASSIFICATION	8.725245822851557E-5	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9954206790377159	WITHOUT_CLASSIFICATION	0.004579320962284135	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998554452432202	WITHOUT_CLASSIFICATION	1.4455475677977863E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993550257905	WITHOUT_CLASSIFICATION	6.44974209517579E-7	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975175812633	WITHOUT_CLASSIFICATION	2.4824187366889117E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999471378018	WITHOUT_CLASSIFICATION	5.28621982536402E-8	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999992766674867	WITHOUT_CLASSIFICATION	7.233325133364213E-7	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999902821234288	WITHOUT_CLASSIFICATION	9.717876571216292E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999733673706346	WITHOUT_CLASSIFICATION	2.6632629365443714E-5	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999999994012826	WITHOUT_CLASSIFICATION	5.987173912308153E-9	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999965280292332	WITHOUT_CLASSIFICATION	3.471970766874103E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999947069129088	WITHOUT_CLASSIFICATION	5.293087091127257E-6	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999911443935845	WITHOUT_CLASSIFICATION	8.85560641553014E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999911939795808	WITHOUT_CLASSIFICATION	8.80602041927824E-6	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999270313331	WITHOUT_CLASSIFICATION	7.296866698935582E-8	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999946852426573	WITHOUT_CLASSIFICATION	5.314757342704346E-6	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999573289109	WITHOUT_CLASSIFICATION	4.267108909691598E-8	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999929696157417	WITHOUT_CLASSIFICATION	7.030384258363857E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999509628705365	WITHOUT_CLASSIFICATION	4.903712946344029E-5	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999992278342608	WITHOUT_CLASSIFICATION	7.721657392367377E-7	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999993361018856	WITHOUT_CLASSIFICATION	6.638981143768356E-7	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998020324132	WITHOUT_CLASSIFICATION	1.9796758691711293E-7	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988038789024	WITHOUT_CLASSIFICATION	1.1961210976536488E-6	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998584864309	WITHOUT_CLASSIFICATION	1.415135690671472E-7	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999930396286654	WITHOUT_CLASSIFICATION	6.960371334683289E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999952919084145	WITHOUT_CLASSIFICATION	4.708091585437324E-6	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998699108484	WITHOUT_CLASSIFICATION	1.30089151671004E-7	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998234938727	WITHOUT_CLASSIFICATION	1.7650612724040443E-7	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998635026951	WITHOUT_CLASSIFICATION	1.3649730490157856E-7	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997419671461	WITHOUT_CLASSIFICATION	2.5803285381616015E-7	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999912671287235	WITHOUT_CLASSIFICATION	8.73287127633723E-6	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999994827591925	WITHOUT_CLASSIFICATION	5.172408075427987E-7	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998558049151	WITHOUT_CLASSIFICATION	1.4419508484854783E-7	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998998682547989	WITHOUT_CLASSIFICATION	1.0013174520109738E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999775326246	WITHOUT_CLASSIFICATION	2.2467375320515182E-8	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977521911659	WITHOUT_CLASSIFICATION	2.2478088339856423E-6	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999989220293817	WITHOUT_CLASSIFICATION	1.077970618392501E-6	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9979683059913573	WITHOUT_CLASSIFICATION	0.0020316940086426856	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999310112123608	WITHOUT_CLASSIFICATION	6.898878763924342E-5	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999739908672504	WITHOUT_CLASSIFICATION	2.60091327495645E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999930053269793	WITHOUT_CLASSIFICATION	6.994673020697239E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999965186142608	WITHOUT_CLASSIFICATION	3.4813857391407496E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999541666154209	WITHOUT_CLASSIFICATION	4.58333845790468E-5	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999343115847225	WITHOUT_CLASSIFICATION	6.568841527757586E-5	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999994603357489	WITHOUT_CLASSIFICATION	5.396642510722822E-7	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999973227343977	WITHOUT_CLASSIFICATION	2.677265602369612E-6	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999838334463155	WITHOUT_CLASSIFICATION	1.616655368448274E-5	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999998387751992	WITHOUT_CLASSIFICATION	1.6122480086030268E-7	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999999717292724	WITHOUT_CLASSIFICATION	2.8270727606515397E-7	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999978007700716	WITHOUT_CLASSIFICATION	2.19922992833315E-6	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999999439237051	WITHOUT_CLASSIFICATION	5.607629490228063E-7	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999997910729413	WITHOUT_CLASSIFICATION	2.0892705878037611E-7	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999998041538014	WITHOUT_CLASSIFICATION	1.958461986585483E-7	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999996055552894	WITHOUT_CLASSIFICATION	3.9444471051530135E-7	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999310911162	WITHOUT_CLASSIFICATION	6.89088838595475E-8	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999998060877092	WITHOUT_CLASSIFICATION	1.9391229085422756E-7	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999975124252016	WITHOUT_CLASSIFICATION	2.4875747984315514E-6	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9989763203589024	WITHOUT_CLASSIFICATION	0.0010236796410976608	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999996261338321	WITHOUT_CLASSIFICATION	3.7386616791105664E-7	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999479431972884	WITHOUT_CLASSIFICATION	5.205680271162784E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999338526816	WITHOUT_CLASSIFICATION	6.614731842073891E-8	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999955502670816	WITHOUT_CLASSIFICATION	4.4497329183847005E-6	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999974337532588	WITHOUT_CLASSIFICATION	2.5662467413273703E-6	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999888148729597	WITHOUT_CLASSIFICATION	1.1185127040366291E-5	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999880560632963	WITHOUT_CLASSIFICATION	1.1943936703720132E-5	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999994847042041	WITHOUT_CLASSIFICATION	5.152957959545255E-7	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999986761110697	WITHOUT_CLASSIFICATION	1.3238889302552964E-6	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999830743173345	WITHOUT_CLASSIFICATION	1.6925682665509166E-5	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9993981737439299	WITHOUT_CLASSIFICATION	6.018262560700922E-4	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999723529065281	WITHOUT_CLASSIFICATION	2.764709347192341E-5	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9966863094510202	WITHOUT_CLASSIFICATION	0.003313690548979742	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999975660566959	WITHOUT_CLASSIFICATION	2.4339433040870624E-6	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999927120243352	WITHOUT_CLASSIFICATION	7.2879756649039165E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999941474525369	WITHOUT_CLASSIFICATION	5.852547463207003E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999992284107005	WITHOUT_CLASSIFICATION	7.715892995525446E-7	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999634690179687	WITHOUT_CLASSIFICATION	3.653098203129992E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999938623871444	WITHOUT_CLASSIFICATION	6.137612855630071E-6	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999498639913258	WITHOUT_CLASSIFICATION	5.013600867417972E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9994258502100934	WITHOUT_CLASSIFICATION	5.741497899065419E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999973956173761	WITHOUT_CLASSIFICATION	2.60438262388793E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9996272574275761	WITHOUT_CLASSIFICATION	3.727425724238935E-4	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999996907564309	WITHOUT_CLASSIFICATION	3.0924356908265153E-7	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999760226342334	WITHOUT_CLASSIFICATION	2.3977365766619053E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999786614730163	WITHOUT_CLASSIFICATION	2.1338526983761013E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999843176843727	WITHOUT_CLASSIFICATION	1.5682315627298084E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999999548445303	WITHOUT_CLASSIFICATION	4.515546970340812E-8	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999993345188738	WITHOUT_CLASSIFICATION	6.654811262071035E-7	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999687761913985	WITHOUT_CLASSIFICATION	3.122380860164327E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999945098318653	WITHOUT_CLASSIFICATION	5.490168134732533E-6	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999987294419437	WITHOUT_CLASSIFICATION	1.2705580563462695E-6	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999983424098559	WITHOUT_CLASSIFICATION	1.657590144098047E-6	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999952994990575	WITHOUT_CLASSIFICATION	4.7005009425138495E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999968423247348	WITHOUT_CLASSIFICATION	3.1576752652675496E-6	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999979905825468	WITHOUT_CLASSIFICATION	2.0094174531327752E-6	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999962437894067	WITHOUT_CLASSIFICATION	3.756210593269632E-6	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999673802745213	WITHOUT_CLASSIFICATION	3.2619725478827167E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999994575556128	WITHOUT_CLASSIFICATION	5.424443872021146E-6	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999819650530494	WITHOUT_CLASSIFICATION	1.8034946950588276E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999970813763279	WITHOUT_CLASSIFICATION	2.9186236721522357E-6	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999740047965195	WITHOUT_CLASSIFICATION	2.59952034804957E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999973129040864	WITHOUT_CLASSIFICATION	2.687095913419997E-6	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999349952072578	WITHOUT_CLASSIFICATION	6.500479274218924E-5	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999959233348882	WITHOUT_CLASSIFICATION	4.0766651117725665E-6	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999998239535404	WITHOUT_CLASSIFICATION	1.7604645972079985E-7	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999946842919029	WITHOUT_CLASSIFICATION	5.3157080972435455E-6	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999635723094661	WITHOUT_CLASSIFICATION	3.642769053391643E-5	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999849618584664	WITHOUT_CLASSIFICATION	1.5038141533682585E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999995768756227	WITHOUT_CLASSIFICATION	4.2312437734505654E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999635723094661	WITHOUT_CLASSIFICATION	3.642769053391643E-5	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999646545609	WITHOUT_CLASSIFICATION	3.534543917444277E-8	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999999585518028	WITHOUT_CLASSIFICATION	4.144819722460798E-8	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999989449833524	WITHOUT_CLASSIFICATION	1.0550166476056082E-6	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998122137022349	WITHOUT_CLASSIFICATION	1.8778629776509514E-4	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999250923235	WITHOUT_CLASSIFICATION	7.490767648661536E-8	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999751347195	WITHOUT_CLASSIFICATION	2.4865280510067304E-8	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999066639030056	WITHOUT_CLASSIFICATION	9.333609699441164E-5	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999961269668499	WITHOUT_CLASSIFICATION	3.873033150042408E-6	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999974237852057	WITHOUT_CLASSIFICATION	2.5762147942946977E-6	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999864772211594	WITHOUT_CLASSIFICATION	1.3522778840439958E-5	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999989971021958	WITHOUT_CLASSIFICATION	1.002897804221416E-6	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999512728977716	WITHOUT_CLASSIFICATION	4.872710222827245E-5	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999778251911	WITHOUT_CLASSIFICATION	2.2174808833122668E-8	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.99999988328424	WITHOUT_CLASSIFICATION	1.1671575989014565E-7	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998729152739	WITHOUT_CLASSIFICATION	1.2708472605130438E-7	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999237425419297	WITHOUT_CLASSIFICATION	7.62574580703106E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999449847872721	WITHOUT_CLASSIFICATION	5.50152127278573E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999449847872721	WITHOUT_CLASSIFICATION	5.50152127278573E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999991046488512	WITHOUT_CLASSIFICATION	8.953511488155194E-7	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9998299438858076	WITHOUT_CLASSIFICATION	1.700561141922803E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999159666915511	WITHOUT_CLASSIFICATION	8.403330844888766E-5	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999883720339557	WITHOUT_CLASSIFICATION	1.1627966044320736E-5	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999996968978712	WITHOUT_CLASSIFICATION	3.0310212879591583E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.6028633263292271	DEFECT	0.3971366736707729	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999607949005647	WITHOUT_CLASSIFICATION	3.920509943538178E-5	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999997889525567	WITHOUT_CLASSIFICATION	2.110474433390315E-7	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999971261746606	WITHOUT_CLASSIFICATION	2.8738253393022197E-6	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999479582337073	WITHOUT_CLASSIFICATION	5.204176629276449E-5	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999953813267796	WITHOUT_CLASSIFICATION	4.6186732204029016E-6	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999922488286	WITHOUT_CLASSIFICATION	7.751171376093942E-9	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999999849941786	WITHOUT_CLASSIFICATION	1.500582138789105E-7	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999986639785244	WITHOUT_CLASSIFICATION	1.33602147555557E-6	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999063313567	WITHOUT_CLASSIFICATION	9.36686432642143E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999993361018856	WITHOUT_CLASSIFICATION	6.638981143768356E-7	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999930725407494	WITHOUT_CLASSIFICATION	6.927459250611473E-6	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999994265731225	WITHOUT_CLASSIFICATION	5.734268774648961E-7	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999879241996692	WITHOUT_CLASSIFICATION	1.2075800330902078E-5	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999991822370123	WITHOUT_CLASSIFICATION	8.177629876730368E-7	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999335666794	WITHOUT_CLASSIFICATION	6.643332063935755E-8	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999736718243732	WITHOUT_CLASSIFICATION	2.632817562678215E-5	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9996708556427211	WITHOUT_CLASSIFICATION	3.291443572790011E-4	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999993871548968	WITHOUT_CLASSIFICATION	6.128451032089456E-7	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999997931137433	WITHOUT_CLASSIFICATION	2.0688625683626276E-7	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999999448607241	WITHOUT_CLASSIFICATION	5.513927590353112E-7	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999991969228746	WITHOUT_CLASSIFICATION	8.03077125370372E-7	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999961701834256	WITHOUT_CLASSIFICATION	3.8298165744198365E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999996679689059	WITHOUT_CLASSIFICATION	3.320310940412918E-7	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9998996126969717	WITHOUT_CLASSIFICATION	1.0038730302833452E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999964374105534	WITHOUT_CLASSIFICATION	3.562589446563275E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999982167543378	WITHOUT_CLASSIFICATION	1.7832456622101027E-6	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9995851161565001	WITHOUT_CLASSIFICATION	4.1488384349991955E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999912004088619	WITHOUT_CLASSIFICATION	8.799591138147828E-6	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999028475674386	WITHOUT_CLASSIFICATION	9.715243256130398E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999101044720632	WITHOUT_CLASSIFICATION	8.989552793691591E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999827591652447	WITHOUT_CLASSIFICATION	1.7240834755316612E-5	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9995423936055988	WITHOUT_CLASSIFICATION	4.5760639440115236E-4	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999991398207947	WITHOUT_CLASSIFICATION	8.601792054259607E-7	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998129803675045	WITHOUT_CLASSIFICATION	1.8701963249555224E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999999625974586	WITHOUT_CLASSIFICATION	3.740254151176462E-8	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999997173028407	WITHOUT_CLASSIFICATION	2.826971594133359E-7	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999820639800943	WITHOUT_CLASSIFICATION	1.7936019905748188E-5	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999541537395	WITHOUT_CLASSIFICATION	4.584626048216206E-8	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999952054751123	WITHOUT_CLASSIFICATION	4.794524887670759E-6	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999886341263283	WITHOUT_CLASSIFICATION	1.1365873671711408E-5	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960905355326	WITHOUT_CLASSIFICATION	3.909464467370099E-6	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679012321445	WITHOUT_CLASSIFICATION	3.20987678555425E-5	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924295283104	WITHOUT_CLASSIFICATION	7.570471689652195E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9726763191283524	WITHOUT_CLASSIFICATION	0.027323680871647636	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.99999910695843	WITHOUT_CLASSIFICATION	8.930415699967493E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999911939795808	WITHOUT_CLASSIFICATION	8.80602041927824E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999911939795808	WITHOUT_CLASSIFICATION	8.80602041927824E-6	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994287900762	WITHOUT_CLASSIFICATION	5.71209923726076E-7	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9786954201990747	WITHOUT_CLASSIFICATION	0.021304579800925236	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999853997004802	WITHOUT_CLASSIFICATION	1.4600299519878034E-5	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999530252084052	WITHOUT_CLASSIFICATION	4.697479159469381E-5	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999853997004802	WITHOUT_CLASSIFICATION	1.4600299519878034E-5	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999695811610263	WITHOUT_CLASSIFICATION	3.04188389737485E-5	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999998349289393	WITHOUT_CLASSIFICATION	1.650710606941983E-6	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.999998789690426	WITHOUT_CLASSIFICATION	1.2103095740052593E-6	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999972042328193	WITHOUT_CLASSIFICATION	2.7957671806032746E-6	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998545676886	WITHOUT_CLASSIFICATION	1.454323114346634E-7	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999961043440155	WITHOUT_CLASSIFICATION	3.895655984395689E-6	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999696526591	WITHOUT_CLASSIFICATION	3.034734090874056E-8	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999932342732005	WITHOUT_CLASSIFICATION	6.765726799487126E-6	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999932036847	WITHOUT_CLASSIFICATION	6.796315268719705E-9	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.999999878378074	WITHOUT_CLASSIFICATION	1.2162192598647968E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999901298671142	WITHOUT_CLASSIFICATION	9.870132885780518E-6	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999697872736404	WITHOUT_CLASSIFICATION	3.021272635960546E-5	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999908103149501	WITHOUT_CLASSIFICATION	9.18968504990892E-6	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9938962095972794	WITHOUT_CLASSIFICATION	0.006103790402720551	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999985127729	WITHOUT_CLASSIFICATION	1.487227189603756E-9	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999131550258391	WITHOUT_CLASSIFICATION	8.68449741608714E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999717788494624	WITHOUT_CLASSIFICATION	2.8221150537485722E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999717788494624	WITHOUT_CLASSIFICATION	2.8221150537485722E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999985625344464	WITHOUT_CLASSIFICATION	1.437465553545415E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999808573118345	WITHOUT_CLASSIFICATION	1.914268816550142E-5	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999924503288989	WITHOUT_CLASSIFICATION	7.549671101066225E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999988925333737	WITHOUT_CLASSIFICATION	1.1074666261982964E-6	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999712780015377	WITHOUT_CLASSIFICATION	2.8721998462273582E-5	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999938318010611	WITHOUT_CLASSIFICATION	6.168198938905885E-5	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998807678662173	WITHOUT_CLASSIFICATION	1.1923213378280736E-4	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999839656144383	WITHOUT_CLASSIFICATION	1.6034385561774584E-5	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999996999200083	WITHOUT_CLASSIFICATION	3.000799916566564E-7	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999987363931584	WITHOUT_CLASSIFICATION	1.263606841676355E-6	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999940118024756	WITHOUT_CLASSIFICATION	5.9881975244027926E-6	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999994950416154	WITHOUT_CLASSIFICATION	5.049583845256368E-7	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999995135232689	WITHOUT_CLASSIFICATION	4.864767310937972E-6	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999839708749523	WITHOUT_CLASSIFICATION	1.602912504771832E-5	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999842109765971	WITHOUT_CLASSIFICATION	1.5789023402852007E-5	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999991429297655	WITHOUT_CLASSIFICATION	8.570702344159059E-7	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999966617751007	WITHOUT_CLASSIFICATION	3.338224899206388E-6	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.99999466263191	WITHOUT_CLASSIFICATION	5.337368090019691E-6	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999927108381136	WITHOUT_CLASSIFICATION	7.289161886396841E-6	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999641004155	WITHOUT_CLASSIFICATION	3.5899584515747486E-8	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999947264614552	WITHOUT_CLASSIFICATION	5.2735385448503834E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999997810087595	WITHOUT_CLASSIFICATION	2.189912403995923E-7	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999676592038	WITHOUT_CLASSIFICATION	3.234079611817178E-8	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999086606077	WITHOUT_CLASSIFICATION	9.133939230766791E-8	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.999998254437187	WITHOUT_CLASSIFICATION	1.7455628129233744E-6	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999982509711279	WITHOUT_CLASSIFICATION	1.7490288720187175E-6	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999702312623406	WITHOUT_CLASSIFICATION	2.976873765931289E-5	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9996845224798352	WITHOUT_CLASSIFICATION	3.154775201647846E-4	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.999987956265889	WITHOUT_CLASSIFICATION	1.2043734111026576E-5	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999652337234318	WITHOUT_CLASSIFICATION	3.4766276568225636E-5	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999957844687525	WITHOUT_CLASSIFICATION	4.21553124748822E-6	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999961010539645	WITHOUT_CLASSIFICATION	3.898946035519868E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9987943094424332	WITHOUT_CLASSIFICATION	0.001205690557566787	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999983713564505	WITHOUT_CLASSIFICATION	1.6286435494321232E-6	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999427521234755	WITHOUT_CLASSIFICATION	5.724787652445095E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999994035235736	WITHOUT_CLASSIFICATION	5.964764263192293E-7	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999588408565	WITHOUT_CLASSIFICATION	4.1159143509926184E-7	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999961403139122	WITHOUT_CLASSIFICATION	3.859686087897178E-6	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999974542290635	WITHOUT_CLASSIFICATION	2.5457709364954384E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999982477236489	WITHOUT_CLASSIFICATION	1.7522763511847927E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999991981916194	WITHOUT_CLASSIFICATION	8.01808380599646E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786368109154	WITHOUT_CLASSIFICATION	2.1363189084683266E-5	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999978112838729	WITHOUT_CLASSIFICATION	2.188716127099048E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9996725675579654	WITHOUT_CLASSIFICATION	3.274324420346394E-4	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998164657752	WITHOUT_CLASSIFICATION	1.8353422488875766E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9985040940762134	WITHOUT_CLASSIFICATION	0.0014959059237865486	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.99129431027577	WITHOUT_CLASSIFICATION	0.008705689724230033	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999997266908045	WITHOUT_CLASSIFICATION	2.733091955272996E-7	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999962532184485	WITHOUT_CLASSIFICATION	3.746781551554663E-6	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999927057211485	WITHOUT_CLASSIFICATION	7.2942788514504905E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844700917572	WITHOUT_CLASSIFICATION	1.5529908242787812E-5	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999993716380245	WITHOUT_CLASSIFICATION	6.283619754532129E-7	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9829154424399723	WITHOUT_CLASSIFICATION	0.01708455756002763	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999995651939197	WITHOUT_CLASSIFICATION	4.3480608019978355E-7	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.999996769532716	WITHOUT_CLASSIFICATION	3.2304672840080393E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999663844111	WITHOUT_CLASSIFICATION	3.36155888618074E-8	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999663844111	WITHOUT_CLASSIFICATION	3.36155888618074E-8	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999991251550764	WITHOUT_CLASSIFICATION	8.748449235939008E-7	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999164453871003	WITHOUT_CLASSIFICATION	8.355461289974556E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999851655600042	WITHOUT_CLASSIFICATION	1.483443999597698E-5	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999998022621707	WITHOUT_CLASSIFICATION	1.9773782922938998E-7	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999959553479464	WITHOUT_CLASSIFICATION	4.044652053544896E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999910387681595	WITHOUT_CLASSIFICATION	8.961231840408599E-6	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999899341207854	WITHOUT_CLASSIFICATION	1.0065879214592445E-5	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999998661669439	WITHOUT_CLASSIFICATION	1.3383305614110192E-7	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999511136768248	WITHOUT_CLASSIFICATION	4.8886323175281396E-5	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999994331012996	WITHOUT_CLASSIFICATION	5.668987003124003E-7	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998328191715761	WITHOUT_CLASSIFICATION	1.6718082842401521E-4	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.99976813579528	WITHOUT_CLASSIFICATION	2.3186420472003498E-4	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999855766206096	WITHOUT_CLASSIFICATION	1.4423379390473333E-5	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999998665754865	WITHOUT_CLASSIFICATION	1.3342451355843167E-7	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999604864849376	WITHOUT_CLASSIFICATION	3.9513515062405574E-5	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.997707431708602	WITHOUT_CLASSIFICATION	0.002292568291398097	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999960799293228	WITHOUT_CLASSIFICATION	3.920070677198832E-5	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999937361268875	WITHOUT_CLASSIFICATION	6.26387311250784E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999737803685674	WITHOUT_CLASSIFICATION	2.6219631432493715E-5	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999188122209075	WITHOUT_CLASSIFICATION	8.118777909247145E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999973788476038	WITHOUT_CLASSIFICATION	2.621152396251806E-6	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999605008143959	WITHOUT_CLASSIFICATION	3.949918560410801E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997866063510179	WITHOUT_CLASSIFICATION	2.1339364898206046E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9962880872799331	WITHOUT_CLASSIFICATION	0.003711912720066891	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9998609594278715	WITHOUT_CLASSIFICATION	1.39040572128505E-4	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9246998068461139	WITHOUT_CLASSIFICATION	0.07530019315388609	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999896197524268	WITHOUT_CLASSIFICATION	1.0380247573204911E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9974681523882024	WITHOUT_CLASSIFICATION	0.0025318476117975647	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.99998992781435	WITHOUT_CLASSIFICATION	1.0072185649867654E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997866063510179	WITHOUT_CLASSIFICATION	2.1339364898206046E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.99999945445838	WITHOUT_CLASSIFICATION	5.455416199342862E-7	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999987940749913	WITHOUT_CLASSIFICATION	1.2059250088097845E-6	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9999231852310806	WITHOUT_CLASSIFICATION	7.681476891943644E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999954816972081	WITHOUT_CLASSIFICATION	4.5183027919465365E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999991550166561	WITHOUT_CLASSIFICATION	8.44983343835674E-7	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999418767849	WITHOUT_CLASSIFICATION	5.812321510905263E-8	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9995802677781256	WITHOUT_CLASSIFICATION	4.197322218742998E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999998894236395	WITHOUT_CLASSIFICATION	1.1057636049980985E-6	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999979224828639	WITHOUT_CLASSIFICATION	2.077517136156167E-6	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999954816972081	WITHOUT_CLASSIFICATION	4.5183027919465365E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999911787709114	WITHOUT_CLASSIFICATION	8.821229088564617E-6	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999985954887316	WITHOUT_CLASSIFICATION	1.4045112683660521E-6	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9988940443164189	WITHOUT_CLASSIFICATION	0.001105955683581065	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999097304745386	WITHOUT_CLASSIFICATION	9.026952546144166E-5	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999764391922565	WITHOUT_CLASSIFICATION	2.3560807743441525E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999940118024756	WITHOUT_CLASSIFICATION	5.9881975244027926E-6	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999879432330215	WITHOUT_CLASSIFICATION	1.2056766978408492E-5	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999982043895737	WITHOUT_CLASSIFICATION	1.7956104263004692E-5	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999964377975963	WITHOUT_CLASSIFICATION	3.562202403693338E-5	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9995708068405793	WITHOUT_CLASSIFICATION	4.2919315942063134E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999913933238863	WITHOUT_CLASSIFICATION	8.606676113670784E-6	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999938011949706	WITHOUT_CLASSIFICATION	6.198805029427184E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999998155843399	WITHOUT_CLASSIFICATION	1.8441565997478847E-7	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999950159451826	WITHOUT_CLASSIFICATION	4.984054817501075E-6	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999956688368926	WITHOUT_CLASSIFICATION	4.331163107304143E-6	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999948824679089	WITHOUT_CLASSIFICATION	5.117532091035404E-6	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998828983781616	WITHOUT_CLASSIFICATION	1.171016218384607E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999866249374	WITHOUT_CLASSIFICATION	1.3375062679683019E-8	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999998761896646	WITHOUT_CLASSIFICATION	1.238103355099287E-7	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.999967755441541	WITHOUT_CLASSIFICATION	3.224455845908045E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999820887816	WITHOUT_CLASSIFICATION	1.7911218333230455E-8	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999999568446311	WITHOUT_CLASSIFICATION	4.3155368901704597E-7	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999953368293093	WITHOUT_CLASSIFICATION	4.663170690666183E-6	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999994842570791	WITHOUT_CLASSIFICATION	5.157429210335123E-7	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999995567230231	WITHOUT_CLASSIFICATION	4.432769769551318E-7	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999930225454338	WITHOUT_CLASSIFICATION	6.97745456626754E-6	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999989791355423	WITHOUT_CLASSIFICATION	1.0208644576988352E-5	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.999999785268862	WITHOUT_CLASSIFICATION	2.1473113785542282E-7	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999976824382505	WITHOUT_CLASSIFICATION	2.317561749480404E-6	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999809674279592	WITHOUT_CLASSIFICATION	1.903257204082864E-5	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999759993251394	WITHOUT_CLASSIFICATION	2.4000674860714743E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999997278664213	WITHOUT_CLASSIFICATION	2.7213357872396896E-7	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999978252935064	WITHOUT_CLASSIFICATION	2.1747064936433633E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998429635393	WITHOUT_CLASSIFICATION	1.570364607400809E-7	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897212644477	WITHOUT_CLASSIFICATION	1.0278735552383842E-5	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.970316158264244	WITHOUT_CLASSIFICATION	0.029683841735755875	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.99999884127079	WITHOUT_CLASSIFICATION	1.1587292100920512E-6	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999995008866276	WITHOUT_CLASSIFICATION	4.991133724306886E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999985192816	WITHOUT_CLASSIFICATION	1.4807184059399013E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999985192816	WITHOUT_CLASSIFICATION	1.4807184059399013E-8	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999996880519653	WITHOUT_CLASSIFICATION	3.1194803483792665E-7	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999988372149055	WITHOUT_CLASSIFICATION	1.162785094490304E-5	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999974294803073	WITHOUT_CLASSIFICATION	2.5705196926727975E-6	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999879410051126	WITHOUT_CLASSIFICATION	1.205899488738555E-5	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999914555645439	WITHOUT_CLASSIFICATION	8.544435456042249E-6	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999607898407441	WITHOUT_CLASSIFICATION	3.9210159255927346E-5	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999970051577235	WITHOUT_CLASSIFICATION	2.9948422765112447E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999998757856434	WITHOUT_CLASSIFICATION	1.2421435660310372E-6	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999952587470275	WITHOUT_CLASSIFICATION	4.741252972476544E-6	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998991899768	WITHOUT_CLASSIFICATION	1.0081002320986958E-7	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999778909144673	WITHOUT_CLASSIFICATION	2.2109085532667084E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999812608831	WITHOUT_CLASSIFICATION	1.8739116873487828E-8	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999993926353549	WITHOUT_CLASSIFICATION	6.07364645089462E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999985192816	WITHOUT_CLASSIFICATION	1.4807184059399013E-8	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999927218675111	WITHOUT_CLASSIFICATION	7.278132488975019E-6	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999989739272144	WITHOUT_CLASSIFICATION	1.0260727856443698E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9997386506662387	WITHOUT_CLASSIFICATION	2.6134933376139577E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999998208790387	WITHOUT_CLASSIFICATION	1.7912096130603758E-7	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999973840391996	WITHOUT_CLASSIFICATION	2.6159608004725755E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999999297474542	WITHOUT_CLASSIFICATION	7.025254579860382E-7	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999776781931231	WITHOUT_CLASSIFICATION	2.2321806876820816E-5	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999968629739	WITHOUT_CLASSIFICATION	3.137025985899404E-9	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999990758980134	WITHOUT_CLASSIFICATION	9.241019865296156E-7	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999993360286644	WITHOUT_CLASSIFICATION	6.639713354706741E-7	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999966034510946	WITHOUT_CLASSIFICATION	3.3965489052918836E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998429635393	WITHOUT_CLASSIFICATION	1.570364607400809E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999985192816	WITHOUT_CLASSIFICATION	1.4807184059399013E-8	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999731359755407	WITHOUT_CLASSIFICATION	2.6864024459317386E-5	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998746687635	WITHOUT_CLASSIFICATION	1.2533123660322373E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999989068023222	WITHOUT_CLASSIFICATION	1.093197677829834E-6	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999977388075241	WITHOUT_CLASSIFICATION	2.2611924758940966E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999999924767157	WITHOUT_CLASSIFICATION	7.52328429627286E-8	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999987755685481	WITHOUT_CLASSIFICATION	1.224431451916625E-6	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945971446391	WITHOUT_CLASSIFICATION	5.402855360868177E-6	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999975801869031	WITHOUT_CLASSIFICATION	2.419813097005623E-6	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999706319501	WITHOUT_CLASSIFICATION	2.9368049891337248E-8	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999707890328198	WITHOUT_CLASSIFICATION	2.9210967180246333E-5	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999976798907725	WITHOUT_CLASSIFICATION	2.3201092275619044E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998841418829534	WITHOUT_CLASSIFICATION	1.1585811704666076E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999987256207	WITHOUT_CLASSIFICATION	1.2743793549742228E-9	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999999082684202	WITHOUT_CLASSIFICATION	9.173157981756905E-8	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999695811610263	WITHOUT_CLASSIFICATION	3.04188389737485E-5	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999976019753185	WITHOUT_CLASSIFICATION	2.3980246814298385E-6	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999525822400528	WITHOUT_CLASSIFICATION	4.741775994721414E-5	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999941153070331	WITHOUT_CLASSIFICATION	5.88469296694478E-6	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999997578164297	WITHOUT_CLASSIFICATION	2.421835703763179E-7	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999648638436	WITHOUT_CLASSIFICATION	3.513615643664636E-8	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99996885872734	WITHOUT_CLASSIFICATION	3.114127266010646E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99996885872734	WITHOUT_CLASSIFICATION	3.114127266010646E-5	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999892370006804	WITHOUT_CLASSIFICATION	1.0762999319590455E-5	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999995900608517	WITHOUT_CLASSIFICATION	4.0993914819154836E-7	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999961599467851	WITHOUT_CLASSIFICATION	3.840053214836842E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999831244494901	WITHOUT_CLASSIFICATION	1.687555050989571E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999837056180977	WITHOUT_CLASSIFICATION	1.6294381902270445E-5	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999993402019258	WITHOUT_CLASSIFICATION	6.59798074156712E-7	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999999193940847	WITHOUT_CLASSIFICATION	8.060591523627483E-8	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999491056462111	WITHOUT_CLASSIFICATION	5.089435378890373E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999491056462111	WITHOUT_CLASSIFICATION	5.089435378890373E-5	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998829055785046	WITHOUT_CLASSIFICATION	1.1709442149546734E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999999904738788	WITHOUT_CLASSIFICATION	9.526121205419384E-8	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999982754949612	WITHOUT_CLASSIFICATION	1.7245050388075634E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999979003856889	WITHOUT_CLASSIFICATION	2.099614311175854E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999979003856889	WITHOUT_CLASSIFICATION	2.099614311175854E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999979003856889	WITHOUT_CLASSIFICATION	2.099614311175854E-6	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999212313832812	WITHOUT_CLASSIFICATION	7.876861671884396E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998947954621	WITHOUT_CLASSIFICATION	1.052045378084859E-7	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999995251671845	WITHOUT_CLASSIFICATION	4.7483281539834447E-7	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9901192048504878	WITHOUT_CLASSIFICATION	0.009880795149512121	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999869107782245	WITHOUT_CLASSIFICATION	1.308922177550429E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999985192816	WITHOUT_CLASSIFICATION	1.4807184059399013E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999985192816	WITHOUT_CLASSIFICATION	1.4807184059399013E-8	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9990402024006512	WITHOUT_CLASSIFICATION	9.597975993488263E-4	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999997615602253	WITHOUT_CLASSIFICATION	2.384397747580283E-7	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9993372586403922	WITHOUT_CLASSIFICATION	6.627413596077746E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999997352039295	WITHOUT_CLASSIFICATION	2.647960704536889E-7	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999804640119275	WITHOUT_CLASSIFICATION	1.9535988072405763E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999985365047447	WITHOUT_CLASSIFICATION	1.4634952553388751E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998788891489453	WITHOUT_CLASSIFICATION	1.2111085105467051E-4	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999999771711537	WITHOUT_CLASSIFICATION	2.2828846295409693E-7	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999989416714418	WITHOUT_CLASSIFICATION	1.0583285582373316E-6	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999291230113	WITHOUT_CLASSIFICATION	7.087698877074307E-8	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999997011859203	WITHOUT_CLASSIFICATION	2.988140796980573E-6	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999994767588514	WITHOUT_CLASSIFICATION	5.232411485839885E-7	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999994767588514	WITHOUT_CLASSIFICATION	5.232411485839885E-7	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999996032294013	WITHOUT_CLASSIFICATION	3.96770598689102E-7	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999996032294013	WITHOUT_CLASSIFICATION	3.96770598689102E-7	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999996836297138	WITHOUT_CLASSIFICATION	3.163702862367051E-7	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999987980382734	WITHOUT_CLASSIFICATION	1.2019617265962743E-6	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999987980382734	WITHOUT_CLASSIFICATION	1.2019617265962743E-6	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999994933541291	WITHOUT_CLASSIFICATION	5.066458708574684E-7	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999977449503272	WITHOUT_CLASSIFICATION	2.2550496726923425E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997356712561	WITHOUT_CLASSIFICATION	2.643287438829631E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99996885872734	WITHOUT_CLASSIFICATION	3.114127266010646E-5	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999994372914107	WITHOUT_CLASSIFICATION	5.627085893306669E-7	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999977449503272	WITHOUT_CLASSIFICATION	2.2550496726923425E-6	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999807754569401	WITHOUT_CLASSIFICATION	1.9224543059986775E-5	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999996952429893	WITHOUT_CLASSIFICATION	3.0475701072382564E-7	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999995694043481	WITHOUT_CLASSIFICATION	4.305956518545615E-7	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999998380199128	WITHOUT_CLASSIFICATION	1.6198008721390882E-7	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999660530612	WITHOUT_CLASSIFICATION	3.394693880532088E-7	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999996049662138	WITHOUT_CLASSIFICATION	3.9503378626131324E-7	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999995639536723	WITHOUT_CLASSIFICATION	4.3604632774132075E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999656203316433	WITHOUT_CLASSIFICATION	3.437966835667845E-5	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9997899909580454	WITHOUT_CLASSIFICATION	2.100090419546133E-4	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999995093608511	WITHOUT_CLASSIFICATION	4.906391489036511E-6	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999999664154897	WITHOUT_CLASSIFICATION	3.3584510292197E-7	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999648429526663	WITHOUT_CLASSIFICATION	3.5157047333644466E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999981731396919	WITHOUT_CLASSIFICATION	1.82686030805923E-6	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999989695743943	WITHOUT_CLASSIFICATION	1.0304256057035603E-6	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9663480483058798	WITHOUT_CLASSIFICATION	0.0336519516941202	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999992577485887	WITHOUT_CLASSIFICATION	7.42251411309645E-7	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999993905728747	WITHOUT_CLASSIFICATION	6.094271253048039E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999999096129548	WITHOUT_CLASSIFICATION	9.038704520079547E-8	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999999096129548	WITHOUT_CLASSIFICATION	9.038704520079547E-8	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999952002915387	WITHOUT_CLASSIFICATION	4.799708461336705E-6	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998781534056955	WITHOUT_CLASSIFICATION	1.2184659430449181E-4	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999987369193069	WITHOUT_CLASSIFICATION	1.263080693036923E-6	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999994698547165	WITHOUT_CLASSIFICATION	5.30145283520024E-7	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999977548700208	WITHOUT_CLASSIFICATION	2.245129979183741E-6	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999989353303252	WITHOUT_CLASSIFICATION	1.0646696746957248E-6	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999605902643	WITHOUT_CLASSIFICATION	3.940973578553261E-8	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999882351652907	WITHOUT_CLASSIFICATION	1.1764834709396926E-5	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999997762278736	WITHOUT_CLASSIFICATION	2.237721263927314E-6	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999051070688	WITHOUT_CLASSIFICATION	9.48929311212052E-8	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999965661565213	WITHOUT_CLASSIFICATION	3.4338434786726674E-6	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998841418829534	WITHOUT_CLASSIFICATION	1.1585811704666076E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999993791794358	WITHOUT_CLASSIFICATION	6.208205641446397E-7	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999870447433851	WITHOUT_CLASSIFICATION	1.2955256614865456E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999831825606093	WITHOUT_CLASSIFICATION	1.681743939075297E-5	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999884121887793	WITHOUT_CLASSIFICATION	1.158781122059179E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991304693248	WITHOUT_CLASSIFICATION	8.695306753695491E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991304693248	WITHOUT_CLASSIFICATION	8.695306753695491E-7	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999947725381042	WITHOUT_CLASSIFICATION	5.227461895821827E-6	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999981649899462	WITHOUT_CLASSIFICATION	1.835010053803392E-5	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.999758289222661	WITHOUT_CLASSIFICATION	2.4171077733918262E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998024534456026	WITHOUT_CLASSIFICATION	1.9754655439735747E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999487686514449	WITHOUT_CLASSIFICATION	5.1231348555186664E-5	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999998730492111	WITHOUT_CLASSIFICATION	1.2695078887580672E-7	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999982681161789	WITHOUT_CLASSIFICATION	1.731883821133705E-6	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9996446347507782	WITHOUT_CLASSIFICATION	3.5536524922170746E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999984366316076	WITHOUT_CLASSIFICATION	1.5633683923756117E-6	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999804373995198	WITHOUT_CLASSIFICATION	1.9562600480159533E-5	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999826361495533	WITHOUT_CLASSIFICATION	1.736385044677654E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9996446347507782	WITHOUT_CLASSIFICATION	3.5536524922170746E-4	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999612049735228	WITHOUT_CLASSIFICATION	3.879502647712897E-5	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999996149997976	WITHOUT_CLASSIFICATION	3.85000202374122E-7	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999996208386449	WITHOUT_CLASSIFICATION	3.7916135515209684E-7	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.999997213937732	WITHOUT_CLASSIFICATION	2.7860622679976103E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999956325394347	WITHOUT_CLASSIFICATION	4.36746056533188E-6	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999877784361981	WITHOUT_CLASSIFICATION	1.2221563801795244E-5	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999562531227	WITHOUT_CLASSIFICATION	4.374687732753382E-8	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999967339452824	WITHOUT_CLASSIFICATION	3.266054717548569E-6	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999476220454	WITHOUT_CLASSIFICATION	5.237795460826749E-8	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998935550736542	WITHOUT_CLASSIFICATION	1.0644492634579735E-4	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.998338460377857	WITHOUT_CLASSIFICATION	0.0016615396221430823	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999718127333166	WITHOUT_CLASSIFICATION	2.8187266683298986E-5	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999989282498793	WITHOUT_CLASSIFICATION	1.071750120557191E-6	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999991881235015	WITHOUT_CLASSIFICATION	8.118764984342816E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999981434956664	WITHOUT_CLASSIFICATION	1.8565043335357433E-6	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999772412573	WITHOUT_CLASSIFICATION	2.2758742669586224E-8	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999967385582664	WITHOUT_CLASSIFICATION	3.2614417336987428E-6	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999938198011777	WITHOUT_CLASSIFICATION	6.1801988222127085E-6	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999889803475093	WITHOUT_CLASSIFICATION	1.1019652490618765E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999556801978	WITHOUT_CLASSIFICATION	4.431980222309228E-8	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999978123891704	WITHOUT_CLASSIFICATION	2.1876108295962233E-5	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999994449951374	WITHOUT_CLASSIFICATION	5.550048627267687E-7	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999934239570022	WITHOUT_CLASSIFICATION	6.576042997781756E-6	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999939841329074	WITHOUT_CLASSIFICATION	6.015867092616692E-6	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999999977655788	WITHOUT_CLASSIFICATION	2.2344212103561848E-8	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999414183691443	WITHOUT_CLASSIFICATION	5.8581630855696695E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999984891954886	WITHOUT_CLASSIFICATION	1.5108045113860837E-6	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999992693219713	WITHOUT_CLASSIFICATION	7.306780286434451E-7	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998244071381	WITHOUT_CLASSIFICATION	1.7559286195729822E-7	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999998069039151	WITHOUT_CLASSIFICATION	1.9309608476662928E-7	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999999986350423	WITHOUT_CLASSIFICATION	1.364957714404575E-8	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999941676808634	WITHOUT_CLASSIFICATION	5.832319136666058E-6	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998945882098899	WITHOUT_CLASSIFICATION	1.0541179011005103E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999735925575	WITHOUT_CLASSIFICATION	2.6407442373484E-8	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999980866735924	WITHOUT_CLASSIFICATION	1.9133264075706674E-6	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999999465584724	WITHOUT_CLASSIFICATION	5.344152760031603E-7	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999997308202049	WITHOUT_CLASSIFICATION	2.6917979505667813E-7	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999981600939264	WITHOUT_CLASSIFICATION	1.8399060735677489E-6	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999972526974	WITHOUT_CLASSIFICATION	2.7473025325213533E-9	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999971855239017	WITHOUT_CLASSIFICATION	2.814476098362174E-6	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999997341959982	WITHOUT_CLASSIFICATION	2.658040018077858E-7	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999999029755539	WITHOUT_CLASSIFICATION	9.702444609833538E-7	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999996543749752	WITHOUT_CLASSIFICATION	3.456250248471903E-7	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998866456445	WITHOUT_CLASSIFICATION	1.1335435553175171E-7	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999556176835	WITHOUT_CLASSIFICATION	4.438231639798884E-8	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999993499027588	WITHOUT_CLASSIFICATION	6.500972411021262E-7	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999953294724774	WITHOUT_CLASSIFICATION	4.670527522544954E-6	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999970815700804	WITHOUT_CLASSIFICATION	2.918429919604575E-6	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999819148181159	WITHOUT_CLASSIFICATION	1.8085181884073816E-5	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999994717706932	WITHOUT_CLASSIFICATION	5.282293067944265E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997316479442	WITHOUT_CLASSIFICATION	2.6835205579176168E-6	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999955246240018	WITHOUT_CLASSIFICATION	4.475375998320733E-6	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999927088635	WITHOUT_CLASSIFICATION	7.291136505578911E-9	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999814058316028	WITHOUT_CLASSIFICATION	1.8594168397190115E-5	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999770579365	WITHOUT_CLASSIFICATION	2.2942063407438334E-8	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999944873843959	WITHOUT_CLASSIFICATION	5.512615604077592E-6	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9930175773130132	WITHOUT_CLASSIFICATION	0.006982422686986758	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999630868217653	WITHOUT_CLASSIFICATION	3.691317823466974E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999992576971242	WITHOUT_CLASSIFICATION	7.423028759246479E-7	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999959153157247	WITHOUT_CLASSIFICATION	4.084684275265932E-6	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999968047655877	WITHOUT_CLASSIFICATION	3.1952344123835003E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999998141374927	WITHOUT_CLASSIFICATION	1.858625073623317E-7	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.999993453647424	WITHOUT_CLASSIFICATION	6.546352576109723E-6	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9228711427300942	WITHOUT_CLASSIFICATION	0.07712885726990577	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999989068456835	WITHOUT_CLASSIFICATION	1.0931543165054818E-6	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999750597838155	WITHOUT_CLASSIFICATION	2.494021618455643E-5	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997316479442	WITHOUT_CLASSIFICATION	2.6835205579176168E-6	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999997073846891	WITHOUT_CLASSIFICATION	2.926153108985267E-7	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9996960250031893	WITHOUT_CLASSIFICATION	3.0397499681064963E-4	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999285687634	WITHOUT_CLASSIFICATION	7.143123658546128E-8	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998524604867	WITHOUT_CLASSIFICATION	1.4753951327526762E-7	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999968835658635	WITHOUT_CLASSIFICATION	3.116434136561574E-6	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999461366876415	WITHOUT_CLASSIFICATION	5.386331235858728E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999984366316076	WITHOUT_CLASSIFICATION	1.5633683923756117E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.99999645100081	WITHOUT_CLASSIFICATION	3.5489991899606346E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999980866735924	WITHOUT_CLASSIFICATION	1.9133264075706674E-6	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999387996332129	WITHOUT_CLASSIFICATION	6.120036678711755E-5	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999985526194112	WITHOUT_CLASSIFICATION	1.447380588811705E-6	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999986595077186	WITHOUT_CLASSIFICATION	1.3404922814167948E-6	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999982546013392	WITHOUT_CLASSIFICATION	1.7453986607983578E-6	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999975138565207	WITHOUT_CLASSIFICATION	2.4861434792825953E-6	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999132496736944	WITHOUT_CLASSIFICATION	8.6750326305538E-5	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996852664160008	WITHOUT_CLASSIFICATION	3.147335839992275E-4	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999938057704069	WITHOUT_CLASSIFICATION	6.19422959318479E-6	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9951167501226051	WITHOUT_CLASSIFICATION	0.0048832498773948305	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999267084542743	WITHOUT_CLASSIFICATION	7.329154572572703E-5	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999999163637285	WITHOUT_CLASSIFICATION	8.36362714512092E-8	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999979316684992	WITHOUT_CLASSIFICATION	2.0683315007787673E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999637369054515	WITHOUT_CLASSIFICATION	3.6263094548569435E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999637369054515	WITHOUT_CLASSIFICATION	3.6263094548569435E-5	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999938965393728	WITHOUT_CLASSIFICATION	6.1034606272526035E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999999492774296	WITHOUT_CLASSIFICATION	5.0722570409218834E-8	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999798232891	WITHOUT_CLASSIFICATION	2.0176710852259517E-8	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999991117952	WITHOUT_CLASSIFICATION	8.882047205454538E-10	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999987279534308	WITHOUT_CLASSIFICATION	1.2720465692213571E-6	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999988992708342	WITHOUT_CLASSIFICATION	1.1007291658268631E-6	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999996822424043	WITHOUT_CLASSIFICATION	3.1775759571586148E-6	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999946110287322	WITHOUT_CLASSIFICATION	5.388971267747677E-6	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999944962230896	WITHOUT_CLASSIFICATION	5.503776910452124E-6	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999949628902066	WITHOUT_CLASSIFICATION	5.037109793372294E-6	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.999888746388668	WITHOUT_CLASSIFICATION	1.112536113319462E-4	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999410051229893	WITHOUT_CLASSIFICATION	5.8994877010752857E-5	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999825959678936	WITHOUT_CLASSIFICATION	1.7404032106335976E-5	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9998521238983188	WITHOUT_CLASSIFICATION	1.4787610168115624E-4	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999992655824608	WITHOUT_CLASSIFICATION	7.344175392152518E-6	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9995978519889319	WITHOUT_CLASSIFICATION	4.021480110680537E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999984900279948	WITHOUT_CLASSIFICATION	1.5099720052668856E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999894838486	WITHOUT_CLASSIFICATION	1.051615131922847E-8	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999946345224834	WITHOUT_CLASSIFICATION	5.365477516579274E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999289172892	WITHOUT_CLASSIFICATION	7.108271088374998E-8	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999207920121767	WITHOUT_CLASSIFICATION	7.920798782345143E-5	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999821229879	WITHOUT_CLASSIFICATION	1.787701208815676E-8	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999999225490509	WITHOUT_CLASSIFICATION	7.74509490950589E-7	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999831624752085	WITHOUT_CLASSIFICATION	1.683752479153749E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999997443620238	WITHOUT_CLASSIFICATION	2.556379761861514E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700578051229	WITHOUT_CLASSIFICATION	2.9942194877053702E-5	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997940448561758	WITHOUT_CLASSIFICATION	2.0595514382412504E-4	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999913906451462	WITHOUT_CLASSIFICATION	8.609354853681533E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999986126357167	WITHOUT_CLASSIFICATION	1.3873642833694887E-6	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998375400729957	WITHOUT_CLASSIFICATION	1.624599270043288E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9996329457278749	WITHOUT_CLASSIFICATION	3.6705427212513293E-4	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999864637259962	WITHOUT_CLASSIFICATION	1.353627400380156E-5	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.99999900180925	WITHOUT_CLASSIFICATION	9.9819074994441E-7	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999998106373332	WITHOUT_CLASSIFICATION	1.8936266675414803E-7	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999993271161688	WITHOUT_CLASSIFICATION	6.728838311721274E-7	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999900130720932	WITHOUT_CLASSIFICATION	9.986927906842646E-6	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999999249217777	WITHOUT_CLASSIFICATION	7.507822229822292E-7	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999995723757381	WITHOUT_CLASSIFICATION	4.2762426189608374E-7	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999359510042	WITHOUT_CLASSIFICATION	6.404899576699708E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999846732645736	WITHOUT_CLASSIFICATION	1.5326735426357835E-5	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996251494253147	WITHOUT_CLASSIFICATION	3.7485057468529586E-4	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999998131808757	WITHOUT_CLASSIFICATION	1.8681912433281079E-7	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999836114018329	WITHOUT_CLASSIFICATION	1.6388598167108093E-5	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999949027378485	WITHOUT_CLASSIFICATION	5.0972621514382454E-6	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999980701021405	WITHOUT_CLASSIFICATION	1.9298978595948076E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998492973688323	WITHOUT_CLASSIFICATION	1.5070263116767494E-4	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9978542566119408	WITHOUT_CLASSIFICATION	0.002145743388059229	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996096425651	WITHOUT_CLASSIFICATION	3.903574349386341E-7	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999998618029995	WITHOUT_CLASSIFICATION	1.3819700047801556E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999338577334	WITHOUT_CLASSIFICATION	6.61422665316059E-8	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999510244740434	WITHOUT_CLASSIFICATION	4.897552595661893E-5	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999997004314808	WITHOUT_CLASSIFICATION	2.995685192091732E-7	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999997753209118	WITHOUT_CLASSIFICATION	2.2467908818350945E-7	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999999574835308	WITHOUT_CLASSIFICATION	4.251646919728382E-8	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999998759012798	WITHOUT_CLASSIFICATION	1.2409872020236219E-6	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999942624281586	WITHOUT_CLASSIFICATION	5.737571841398996E-6	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999998652272526	WITHOUT_CLASSIFICATION	1.3477274742913582E-7	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999995204354952	WITHOUT_CLASSIFICATION	4.795645048917236E-7	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999954361850399	WITHOUT_CLASSIFICATION	4.5638149600144515E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9998031519060911	WITHOUT_CLASSIFICATION	1.9684809390896587E-4	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999641589941669	WITHOUT_CLASSIFICATION	3.584100583308746E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999992840303356	WITHOUT_CLASSIFICATION	7.159696644238563E-7	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999953979584407	WITHOUT_CLASSIFICATION	4.602041559344425E-6	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999868268802	WITHOUT_CLASSIFICATION	1.3173119664908739E-8	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999291205838	WITHOUT_CLASSIFICATION	7.087941620541809E-8	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999976082254689	WITHOUT_CLASSIFICATION	2.3917745311081777E-6	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999988272575434	WITHOUT_CLASSIFICATION	1.172742456484066E-6	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998600669082	WITHOUT_CLASSIFICATION	1.3993309179902648E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999996002782461	WITHOUT_CLASSIFICATION	3.997217538834829E-7	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999998250755234	WITHOUT_CLASSIFICATION	1.7492447660421107E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999996002782461	WITHOUT_CLASSIFICATION	3.997217538834829E-7	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999990805031147	WITHOUT_CLASSIFICATION	9.194968853816994E-7	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999996045157445	WITHOUT_CLASSIFICATION	3.9548425553080005E-7	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999962295716058	WITHOUT_CLASSIFICATION	3.7704283941125383E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999991039309026	WITHOUT_CLASSIFICATION	8.960690973662555E-7	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999998919660715	WITHOUT_CLASSIFICATION	1.0803392849012617E-7	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999984837420598	WITHOUT_CLASSIFICATION	1.5162579401781904E-6	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999962754556562	WITHOUT_CLASSIFICATION	3.7245443439510923E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999995443728577	WITHOUT_CLASSIFICATION	4.5562714228218407E-7	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9997956833626822	WITHOUT_CLASSIFICATION	2.0431663731769313E-4	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999992347265554	WITHOUT_CLASSIFICATION	7.652734445167793E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999950093768706	WITHOUT_CLASSIFICATION	4.990623129373005E-6	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999998886476252	WITHOUT_CLASSIFICATION	1.1135237472924817E-7	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999951399505	WITHOUT_CLASSIFICATION	4.860049455921544E-9	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9947839994390666	WITHOUT_CLASSIFICATION	0.0052160005609335	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.997507245000504	WITHOUT_CLASSIFICATION	0.002492754999495996	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999997301007332	WITHOUT_CLASSIFICATION	2.698992668270235E-7	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999976770133708	WITHOUT_CLASSIFICATION	2.3229866292486246E-6	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999998867023353	WITHOUT_CLASSIFICATION	1.1329766463491475E-7	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999990620974405	WITHOUT_CLASSIFICATION	9.379025594188338E-7	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999998473343344	WITHOUT_CLASSIFICATION	1.526656655917631E-7	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999919634665758	WITHOUT_CLASSIFICATION	8.036533424233208E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999834449573679	WITHOUT_CLASSIFICATION	1.655504263211049E-5	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9986468980709182	WITHOUT_CLASSIFICATION	0.0013531019290816879	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998455587343256	WITHOUT_CLASSIFICATION	1.5444126567447158E-4	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999961616277513	WITHOUT_CLASSIFICATION	3.8383722486423615E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999410620911766	WITHOUT_CLASSIFICATION	5.893790882335818E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999660929571854	WITHOUT_CLASSIFICATION	3.390704281453949E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999938585543039	WITHOUT_CLASSIFICATION	6.141445696068618E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999952508786001	WITHOUT_CLASSIFICATION	4.749121399872926E-6	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9985933033382745	WITHOUT_CLASSIFICATION	0.0014066966617255132	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999366178835385	WITHOUT_CLASSIFICATION	6.338211646147085E-5	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999706798218936	WITHOUT_CLASSIFICATION	2.9320178106392587E-5	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999122305919	WITHOUT_CLASSIFICATION	8.776940803613095E-8	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999488918684452	WITHOUT_CLASSIFICATION	5.1108131554849655E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999988923897857	WITHOUT_CLASSIFICATION	1.1076102143199148E-6	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.999973005366212	WITHOUT_CLASSIFICATION	2.69946337879944E-5	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999884425802932	WITHOUT_CLASSIFICATION	1.1557419706871206E-5	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999974431147732	WITHOUT_CLASSIFICATION	2.5568852266866066E-6	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9995300819357184	WITHOUT_CLASSIFICATION	4.699180642817034E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999970833661637	WITHOUT_CLASSIFICATION	2.9166338362199136E-6	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999998276035218	WITHOUT_CLASSIFICATION	1.7239647812460505E-7	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9997217065993991	WITHOUT_CLASSIFICATION	2.78293400600935E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9895163826393308	WITHOUT_CLASSIFICATION	0.01048361736066916	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999410620911766	WITHOUT_CLASSIFICATION	5.893790882335818E-5	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9996666269304476	WITHOUT_CLASSIFICATION	3.3337306955235523E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999991116317543	WITHOUT_CLASSIFICATION	8.883682456566767E-7	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9997520304149627	WITHOUT_CLASSIFICATION	2.4796958503733396E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9998864157400879	WITHOUT_CLASSIFICATION	1.1358425991215453E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999985309191702	WITHOUT_CLASSIFICATION	1.4690808297924254E-6	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999993973468784	WITHOUT_CLASSIFICATION	6.026531216135827E-7	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999984999610042	WITHOUT_CLASSIFICATION	1.5000389958425815E-6	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9518365512189331	WITHOUT_CLASSIFICATION	0.04816344878106692	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999970427144952	WITHOUT_CLASSIFICATION	2.957285504911362E-6	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999864575748879	WITHOUT_CLASSIFICATION	1.354242511202981E-5	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999883454300549	WITHOUT_CLASSIFICATION	1.1654569945059464E-5	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999986159515991	WITHOUT_CLASSIFICATION	1.384048400875433E-6	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9998501568464173	WITHOUT_CLASSIFICATION	1.498431535826975E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999895625091372	WITHOUT_CLASSIFICATION	1.0437490862850483E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999998046057952	WITHOUT_CLASSIFICATION	1.9539420487124724E-7	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999944869123	WITHOUT_CLASSIFICATION	5.513087680066434E-9	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998483420922	WITHOUT_CLASSIFICATION	1.5165790774685195E-7	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999998735227494	WITHOUT_CLASSIFICATION	1.2647725054646993E-7	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999990861973291	WITHOUT_CLASSIFICATION	9.138026709519732E-7	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9996666269304476	WITHOUT_CLASSIFICATION	3.3337306955235523E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999966648880071	WITHOUT_CLASSIFICATION	3.3351119928597795E-6	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9977297352217657	WITHOUT_CLASSIFICATION	0.0022702647782343517	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999971103438285	WITHOUT_CLASSIFICATION	2.8896561715549014E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999511291671774	WITHOUT_CLASSIFICATION	4.887083282259205E-5	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9998578158620622	WITHOUT_CLASSIFICATION	1.4218413793773278E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992875574015552	WITHOUT_CLASSIFICATION	7.124425984449105E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992875574015552	WITHOUT_CLASSIFICATION	7.124425984449105E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999868336889931	WITHOUT_CLASSIFICATION	1.3166311006899234E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992875574015552	WITHOUT_CLASSIFICATION	7.124425984449105E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992875574015552	WITHOUT_CLASSIFICATION	7.124425984449105E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999987092390297	WITHOUT_CLASSIFICATION	1.2907609703876161E-6	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9996988243109785	WITHOUT_CLASSIFICATION	3.0117568902157145E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999991485117254	WITHOUT_CLASSIFICATION	8.514882745188301E-7	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999996003330672	WITHOUT_CLASSIFICATION	3.996669326707307E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9480503619517889	WITHOUT_CLASSIFICATION	0.051949638048211136	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999984009226823	WITHOUT_CLASSIFICATION	1.5990773176652536E-6	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999101967542183	WITHOUT_CLASSIFICATION	8.980324578170086E-4	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9996811700181581	WITHOUT_CLASSIFICATION	3.1882998184183534E-4	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999634754323283	WITHOUT_CLASSIFICATION	3.6524567671671725E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999907887385595	WITHOUT_CLASSIFICATION	9.211261440431026E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999908730029841	WITHOUT_CLASSIFICATION	9.126997015996957E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9991135234516769	WITHOUT_CLASSIFICATION	8.86476548322941E-4	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999989402348235	WITHOUT_CLASSIFICATION	1.0597651765361762E-6	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.99999415877985	WITHOUT_CLASSIFICATION	5.841220149955951E-6	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999998313019722	WITHOUT_CLASSIFICATION	1.6869802780615009E-6	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9992315851910084	WITHOUT_CLASSIFICATION	7.68414808991606E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994287900762	WITHOUT_CLASSIFICATION	5.71209923726076E-7	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999878185943673	WITHOUT_CLASSIFICATION	1.2181405632757246E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999691474234994	WITHOUT_CLASSIFICATION	3.085257650067059E-5	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999924705789758	WITHOUT_CLASSIFICATION	7.529421024127767E-6	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999986861438946	WITHOUT_CLASSIFICATION	1.3138561053673882E-6	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999961145835116	WITHOUT_CLASSIFICATION	3.885416488455721E-6	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994287900762	WITHOUT_CLASSIFICATION	5.71209923726076E-7	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999660929571854	WITHOUT_CLASSIFICATION	3.390704281453949E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999822119302516	WITHOUT_CLASSIFICATION	1.778806974829808E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997419671461	WITHOUT_CLASSIFICATION	2.5803285381616015E-7	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998558049151	WITHOUT_CLASSIFICATION	1.4419508484854783E-7	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999951321951077	WITHOUT_CLASSIFICATION	4.867804892266915E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999900482835163	WITHOUT_CLASSIFICATION	9.951716483753796E-6	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999997051059133	WITHOUT_CLASSIFICATION	2.948940867461919E-7	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999625480255232	WITHOUT_CLASSIFICATION	3.745197447690486E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999998851828372	WITHOUT_CLASSIFICATION	1.1481716279849527E-6	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999604336727255	WITHOUT_CLASSIFICATION	3.956632727447372E-5	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9997095320698716	WITHOUT_CLASSIFICATION	2.904679301284452E-4	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999719832240382	WITHOUT_CLASSIFICATION	2.8016775961697238E-5	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999995871852413	WITHOUT_CLASSIFICATION	4.128147587351982E-7	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999998493576782	WITHOUT_CLASSIFICATION	1.5064232183021766E-7	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998785334289866	WITHOUT_CLASSIFICATION	1.2146657101344321E-4	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999997421017888	WITHOUT_CLASSIFICATION	2.5789821115373274E-7	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999996750236286	WITHOUT_CLASSIFICATION	3.2497637138136775E-7	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999984530671463	WITHOUT_CLASSIFICATION	1.5469328537119802E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999998715539977	WITHOUT_CLASSIFICATION	1.2844600238510455E-7	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999963325318808	WITHOUT_CLASSIFICATION	3.66746811927872E-6	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.998727662420696	WITHOUT_CLASSIFICATION	0.0012723375793040894	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999994215651512	WITHOUT_CLASSIFICATION	5.784348488314297E-7	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999883788363819	WITHOUT_CLASSIFICATION	1.1621163618097392E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999998851828372	WITHOUT_CLASSIFICATION	1.1481716279849527E-6	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999997135462962	WITHOUT_CLASSIFICATION	2.8645370375209957E-7	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999999235246734	WITHOUT_CLASSIFICATION	7.647532663136888E-8	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999220742591721	WITHOUT_CLASSIFICATION	7.792574082789589E-5	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999997861479124	WITHOUT_CLASSIFICATION	2.1385208772133614E-7	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998425489678	WITHOUT_CLASSIFICATION	1.5745103208180555E-7	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999954231876854	WITHOUT_CLASSIFICATION	4.576812314590497E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999733312264656	WITHOUT_CLASSIFICATION	2.6668773534459494E-5	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999997490623738	WITHOUT_CLASSIFICATION	2.509376262240472E-7	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999966245194474	WITHOUT_CLASSIFICATION	3.3754805525360036E-6	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.99993797559052	WITHOUT_CLASSIFICATION	6.202440947996862E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999955530962805	WITHOUT_CLASSIFICATION	4.4469037194913505E-6	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999788955255274	WITHOUT_CLASSIFICATION	2.1104474472627972E-5	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.999887953684498	WITHOUT_CLASSIFICATION	1.1204631550194865E-4	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999875751495	WITHOUT_CLASSIFICATION	1.2424850418465211E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999971331855807	WITHOUT_CLASSIFICATION	2.8668144193656515E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9997658266234828	WITHOUT_CLASSIFICATION	2.341733765172963E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999741583048214	WITHOUT_CLASSIFICATION	2.5841695178649267E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999955530962805	WITHOUT_CLASSIFICATION	4.4469037194913505E-6	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999958109179	WITHOUT_CLASSIFICATION	4.189082058994648E-9	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9996530084537026	WITHOUT_CLASSIFICATION	3.469915462974208E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999995349981413	WITHOUT_CLASSIFICATION	4.650018587018315E-6	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999910383267759	WITHOUT_CLASSIFICATION	8.96167322414102E-6	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999996019621037	WITHOUT_CLASSIFICATION	3.980378963295281E-7	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999995064487119	WITHOUT_CLASSIFICATION	4.935512880365198E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999971331855807	WITHOUT_CLASSIFICATION	2.8668144193656515E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999850117325478	WITHOUT_CLASSIFICATION	1.4988267452040133E-5	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962454568121	WITHOUT_CLASSIFICATION	3.7545431879899772E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998405522629	WITHOUT_CLASSIFICATION	1.594477370693028E-7	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970987203947	WITHOUT_CLASSIFICATION	2.9012796052978258E-6	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960774823732	WITHOUT_CLASSIFICATION	3.922517626869296E-6	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985806377479	WITHOUT_CLASSIFICATION	1.4193622519970362E-6	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999994973156121	WITHOUT_CLASSIFICATION	5.026843879338855E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999994973156121	WITHOUT_CLASSIFICATION	5.026843879338855E-7	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999999310095011	WITHOUT_CLASSIFICATION	6.899049891162168E-7	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999991914665903	WITHOUT_CLASSIFICATION	8.085334097664985E-7	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999995986786174	WITHOUT_CLASSIFICATION	4.013213826218548E-7	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.999992280142892	WITHOUT_CLASSIFICATION	7.719857108066526E-6	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9997612037044792	WITHOUT_CLASSIFICATION	2.387962955208716E-4	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984431611814	WITHOUT_CLASSIFICATION	1.556838818574455E-6	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985502746568	WITHOUT_CLASSIFICATION	1.4497253432647476E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974593582925	WITHOUT_CLASSIFICATION	2.5406417074224785E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999995607534592	WITHOUT_CLASSIFICATION	4.392465407728389E-7	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990407865671	WITHOUT_CLASSIFICATION	9.592134328094523E-7	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984431611814	WITHOUT_CLASSIFICATION	1.556838818574455E-6	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985502746568	WITHOUT_CLASSIFICATION	1.4497253432647476E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974593582925	WITHOUT_CLASSIFICATION	2.5406417074224785E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999999089531225	WITHOUT_CLASSIFICATION	9.104687749749403E-8	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999914816483811	WITHOUT_CLASSIFICATION	8.51835161886906E-6	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999978308406363	WITHOUT_CLASSIFICATION	2.1691593636550635E-6	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999417894699039	WITHOUT_CLASSIFICATION	5.821053009605619E-5	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999989126531578	WITHOUT_CLASSIFICATION	1.087346842302963E-6	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999531762811598	WITHOUT_CLASSIFICATION	4.6823718840329664E-5	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999826138783298	WITHOUT_CLASSIFICATION	1.7386121670138614E-5	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.999993447100699	WITHOUT_CLASSIFICATION	6.552899301047263E-6	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999860382856701	WITHOUT_CLASSIFICATION	1.3961714329935283E-5	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999964897464244	WITHOUT_CLASSIFICATION	3.5102535755337183E-6	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999205605917	WITHOUT_CLASSIFICATION	7.943940832511785E-8	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9992773923677365	WITHOUT_CLASSIFICATION	7.226076322634351E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.998863141341724	WITHOUT_CLASSIFICATION	0.0011368586582759799	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999987911975139	WITHOUT_CLASSIFICATION	1.2088024861359804E-6	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999988008528288	WITHOUT_CLASSIFICATION	1.1991471711876553E-6	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999955716976682	WITHOUT_CLASSIFICATION	4.4283023318031275E-6	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999918367795292	WITHOUT_CLASSIFICATION	8.163220470789294E-6	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999504665649742	WITHOUT_CLASSIFICATION	4.953343502565568E-5	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999949727797172	WITHOUT_CLASSIFICATION	5.027220282880957E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999984680573103	WITHOUT_CLASSIFICATION	1.5319426896569116E-6	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.99999360151376	WITHOUT_CLASSIFICATION	6.398486239972547E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999976788537641	WITHOUT_CLASSIFICATION	2.3211462358322634E-6	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999981297138306	WITHOUT_CLASSIFICATION	1.8702861693688566E-6	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999999926840562	WITHOUT_CLASSIFICATION	7.315943796315215E-8	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999997474790889	WITHOUT_CLASSIFICATION	2.525209111208698E-7	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998788227041986	WITHOUT_CLASSIFICATION	1.2117729580135748E-4	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942284230605	WITHOUT_CLASSIFICATION	5.771576939453785E-6	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951277049837	WITHOUT_CLASSIFICATION	4.872295016356345E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999520443084	WITHOUT_CLASSIFICATION	4.795569170924895E-8	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972627736214	WITHOUT_CLASSIFICATION	2.7372263785953862E-6	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999485851606197	WITHOUT_CLASSIFICATION	5.141483938032326E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999994575556128	WITHOUT_CLASSIFICATION	5.424443872021146E-6	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999994575556128	WITHOUT_CLASSIFICATION	5.424443872021146E-6	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999981292901	WITHOUT_CLASSIFICATION	1.870709799322904E-9	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.999990616521497	WITHOUT_CLASSIFICATION	9.383478503114905E-6	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999996346648212	WITHOUT_CLASSIFICATION	3.6533517878731304E-7	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998841418829534	WITHOUT_CLASSIFICATION	1.1585811704666076E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998923419009614	WITHOUT_CLASSIFICATION	1.0765809903852524E-4	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9997134008625691	WITHOUT_CLASSIFICATION	2.865991374309051E-4	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9999385861268828	WITHOUT_CLASSIFICATION	6.141387311726844E-5	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999992669787767	WITHOUT_CLASSIFICATION	7.330212232340157E-7	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999998239535404	WITHOUT_CLASSIFICATION	1.7604645972079985E-7	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989463978358	WITHOUT_CLASSIFICATION	1.0536021642719725E-6	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989102556962	WITHOUT_CLASSIFICATION	1.0897443039057213E-6	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986648573287	WITHOUT_CLASSIFICATION	1.3351426713011041E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999166500577	WITHOUT_CLASSIFICATION	8.33499423041076E-7	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995495813374	WITHOUT_CLASSIFICATION	4.504186625927249E-7	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997135376922	WITHOUT_CLASSIFICATION	2.864623077171797E-7	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975465026383	WITHOUT_CLASSIFICATION	2.453497361805732E-6	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999454386545	WITHOUT_CLASSIFICATION	5.456134549933707E-7	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985912095082	WITHOUT_CLASSIFICATION	1.4087904918764945E-6	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956194365541	WITHOUT_CLASSIFICATION	4.380563445841303E-6	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999198995788	WITHOUT_CLASSIFICATION	8.010042116887831E-8	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999997283074778	WITHOUT_CLASSIFICATION	2.716925222086526E-6	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999956357382733	WITHOUT_CLASSIFICATION	4.3642617266853625E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999969880899963	WITHOUT_CLASSIFICATION	3.011910003625952E-6	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9988377610292046	WITHOUT_CLASSIFICATION	0.0011622389707953288	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999979466910847	WITHOUT_CLASSIFICATION	2.053308915236659E-6	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999819607549749	WITHOUT_CLASSIFICATION	1.8039245025045102E-5	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999345268418	WITHOUT_CLASSIFICATION	6.547315821791422E-8	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999935196889418	WITHOUT_CLASSIFICATION	6.4803110581395196E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999969880899963	WITHOUT_CLASSIFICATION	3.011910003625952E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999969880899963	WITHOUT_CLASSIFICATION	3.011910003625952E-6	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999891007446516	WITHOUT_CLASSIFICATION	1.089925534838858E-5	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999985249025284	WITHOUT_CLASSIFICATION	1.4750974715601542E-6	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999949116988	WITHOUT_CLASSIFICATION	5.088301251160391E-9	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999830408801771	WITHOUT_CLASSIFICATION	1.6959119822937615E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999981731396919	WITHOUT_CLASSIFICATION	1.82686030805923E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999984680573103	WITHOUT_CLASSIFICATION	1.5319426896569116E-6	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999991646811058	WITHOUT_CLASSIFICATION	8.35318894231162E-7	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999962916041962	WITHOUT_CLASSIFICATION	3.708395803892387E-6	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999990571052004	WITHOUT_CLASSIFICATION	9.428947996076523E-7	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966490750396	WITHOUT_CLASSIFICATION	3.350924960377213E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999997639706514	WITHOUT_CLASSIFICATION	2.3602934856546895E-7	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782108296514	WITHOUT_CLASSIFICATION	2.178917034859201E-5	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999948087548419	WITHOUT_CLASSIFICATION	5.191245158168006E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999948087548419	WITHOUT_CLASSIFICATION	5.191245158168006E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997554799872	WITHOUT_CLASSIFICATION	2.4452001283493675E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997554799872	WITHOUT_CLASSIFICATION	2.4452001283493675E-7	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926685517614	WITHOUT_CLASSIFICATION	7.331448238580222E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993543051765	WITHOUT_CLASSIFICATION	6.45694823554981E-7	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998449973550121	WITHOUT_CLASSIFICATION	1.550026449879542E-4	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972756127825	WITHOUT_CLASSIFICATION	2.7243872175847105E-6	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9987464918484458	WITHOUT_CLASSIFICATION	0.0012535081515542329	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999984202956483	WITHOUT_CLASSIFICATION	1.579704351700489E-5	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999427614390575	WITHOUT_CLASSIFICATION	5.7238560942409814E-5	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998848001252317	WITHOUT_CLASSIFICATION	1.1519987476833834E-4	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999835097118555	WITHOUT_CLASSIFICATION	1.6490288144574037E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999996461837182	WITHOUT_CLASSIFICATION	3.538162818870575E-7	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997454676437	WITHOUT_CLASSIFICATION	2.545323563285103E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999911939795808	WITHOUT_CLASSIFICATION	8.80602041927824E-6	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999922559093015	WITHOUT_CLASSIFICATION	7.744090698498891E-6	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999840435416101	WITHOUT_CLASSIFICATION	1.5956458389949433E-5	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999996824232822	WITHOUT_CLASSIFICATION	3.175767177943561E-7	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999868517851509	WITHOUT_CLASSIFICATION	1.3148214849021217E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999983587845931	WITHOUT_CLASSIFICATION	1.6412154068771628E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999983587845931	WITHOUT_CLASSIFICATION	1.6412154068771628E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999969263591216	WITHOUT_CLASSIFICATION	3.0736408783193343E-6	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999966872885073	WITHOUT_CLASSIFICATION	3.312711492560319E-6	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999614126045	WITHOUT_CLASSIFICATION	3.8587395493733596E-8	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999164710453089	WITHOUT_CLASSIFICATION	8.352895469102215E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950259451995	WITHOUT_CLASSIFICATION	4.974054800477027E-6	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984842643438	WITHOUT_CLASSIFICATION	1.5157356562255347E-6	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999970501353538	WITHOUT_CLASSIFICATION	2.949864646264135E-6	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999956563164946	WITHOUT_CLASSIFICATION	4.343683505410161E-5	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999992755973967	WITHOUT_CLASSIFICATION	7.244026034020583E-7	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999989166934806	WITHOUT_CLASSIFICATION	1.0833065194108981E-6	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999886831317277	WITHOUT_CLASSIFICATION	1.1316868272287246E-5	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9992999761552335	WITHOUT_CLASSIFICATION	7.000238447665602E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881109807653	WITHOUT_CLASSIFICATION	1.1889019234581197E-5	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999996625861147	WITHOUT_CLASSIFICATION	3.3741388518990416E-7	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999950059266199	WITHOUT_CLASSIFICATION	4.994073380037902E-6	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999645024787204	WITHOUT_CLASSIFICATION	3.5497521279569446E-5	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999935381762036	WITHOUT_CLASSIFICATION	6.461823796439412E-6	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9985243287331002	WITHOUT_CLASSIFICATION	0.0014756712668997879	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9982904078217022	WITHOUT_CLASSIFICATION	0.001709592178297842	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999914233921307	WITHOUT_CLASSIFICATION	8.576607869233008E-6	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999813945997	WITHOUT_CLASSIFICATION	1.8605400261958712E-8	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999487620789071	WITHOUT_CLASSIFICATION	5.1237921092855116E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999996938591213	WITHOUT_CLASSIFICATION	3.0614087869753728E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999957814852424	WITHOUT_CLASSIFICATION	4.218514757597491E-6	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999988532900165	WITHOUT_CLASSIFICATION	1.1467099834986145E-6	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999695049011031	WITHOUT_CLASSIFICATION	3.049509889686443E-5	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9997192246421833	WITHOUT_CLASSIFICATION	2.807753578166681E-4	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999971745842289	WITHOUT_CLASSIFICATION	2.82541577111168E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999775516974	WITHOUT_CLASSIFICATION	2.2448302512806356E-8	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999912004088619	WITHOUT_CLASSIFICATION	8.799591138147828E-6	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9993229281704078	WITHOUT_CLASSIFICATION	6.770718295922252E-4	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999891768336541	WITHOUT_CLASSIFICATION	1.0823166345934648E-5	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999902346059846	WITHOUT_CLASSIFICATION	9.765394015316714E-6	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.99999388419516	WITHOUT_CLASSIFICATION	6.115804839896872E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999848802657114	WITHOUT_CLASSIFICATION	1.5119734288470225E-5	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9998996054025552	WITHOUT_CLASSIFICATION	1.0039459744487474E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999960799293228	WITHOUT_CLASSIFICATION	3.920070677198832E-5	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999997881463565	WITHOUT_CLASSIFICATION	2.1185364360121045E-7	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998082436804	WITHOUT_CLASSIFICATION	1.9175631963328787E-7	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.999999936459829	WITHOUT_CLASSIFICATION	6.354017102986592E-8	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999992075165169	WITHOUT_CLASSIFICATION	7.924834829866844E-7	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999991786815332	WITHOUT_CLASSIFICATION	8.213184669061414E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.998191798756999	WITHOUT_CLASSIFICATION	0.001808201243000989	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999967426044459	WITHOUT_CLASSIFICATION	3.2573955541062977E-6	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9996329422369555	WITHOUT_CLASSIFICATION	3.670577630444387E-4	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999845209127063	WITHOUT_CLASSIFICATION	1.547908729370562E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999996716234045	WITHOUT_CLASSIFICATION	3.283765954223169E-7	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999717788494624	WITHOUT_CLASSIFICATION	2.8221150537485722E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999804677532493	WITHOUT_CLASSIFICATION	1.9532246750770683E-5	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999646850770129	WITHOUT_CLASSIFICATION	3.5314922987247234E-5	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998488617950593	WITHOUT_CLASSIFICATION	1.511382049407958E-4	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998986565217143	WITHOUT_CLASSIFICATION	1.0134347828570737E-4	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999987230220153	WITHOUT_CLASSIFICATION	1.2769779847054494E-5	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995483675302336	WITHOUT_CLASSIFICATION	4.516324697664742E-4	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9997233438689888	WITHOUT_CLASSIFICATION	2.7665613101121556E-4	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999908745230026	WITHOUT_CLASSIFICATION	9.125476997337118E-6	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999989607276985	WITHOUT_CLASSIFICATION	1.0392723014853735E-5	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999746302140441	WITHOUT_CLASSIFICATION	2.5369785955949968E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999501949648	WITHOUT_CLASSIFICATION	4.980503514903254E-8	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999984939698826	WITHOUT_CLASSIFICATION	1.506030117353907E-6	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999793533675654	WITHOUT_CLASSIFICATION	2.064663243461679E-5	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999982192234099	WITHOUT_CLASSIFICATION	1.780776590123386E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999161404373	WITHOUT_CLASSIFICATION	8.385956271188946E-8	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999356565857	WITHOUT_CLASSIFICATION	6.434341425578174E-8	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999908424227	WITHOUT_CLASSIFICATION	9.157577302715104E-8	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999653846371331	WITHOUT_CLASSIFICATION	3.4615362866920105E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9996365638178902	WITHOUT_CLASSIFICATION	3.6343618210975763E-4	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999995130611081	WITHOUT_CLASSIFICATION	4.869388919064654E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997866063510179	WITHOUT_CLASSIFICATION	2.1339364898206046E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997866063510179	WITHOUT_CLASSIFICATION	2.1339364898206046E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999997927290067	WITHOUT_CLASSIFICATION	2.0727099330217014E-7	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999973046038524	WITHOUT_CLASSIFICATION	2.695396147601686E-6	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999997675808024	WITHOUT_CLASSIFICATION	2.3241919760554474E-6	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999838546530408	WITHOUT_CLASSIFICATION	1.61453469591632E-5	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999937174374273	WITHOUT_CLASSIFICATION	6.282562572703554E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999837728923299	WITHOUT_CLASSIFICATION	1.622710767016751E-5	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.99998784141447	WITHOUT_CLASSIFICATION	1.2158585530004534E-5	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999637106273818	WITHOUT_CLASSIFICATION	3.628937261827528E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998484868652747	WITHOUT_CLASSIFICATION	1.5151313472536504E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999907355965374	WITHOUT_CLASSIFICATION	9.264403462608623E-5	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999979879226951	WITHOUT_CLASSIFICATION	2.012077304859334E-6	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999851248587965	WITHOUT_CLASSIFICATION	1.4875141203399189E-5	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999994637904724	WITHOUT_CLASSIFICATION	5.36209527478715E-7	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999998931429656	WITHOUT_CLASSIFICATION	1.0685703443694296E-7	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999967109068778	WITHOUT_CLASSIFICATION	3.289093122166964E-6	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999810453811385	WITHOUT_CLASSIFICATION	1.8954618861536722E-5	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999985055208525	WITHOUT_CLASSIFICATION	1.4944791475351894E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999950720559823	WITHOUT_CLASSIFICATION	4.9279440176992695E-5	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999973020310747	WITHOUT_CLASSIFICATION	2.697968925298553E-6	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999632006741425	WITHOUT_CLASSIFICATION	3.67993258574969E-5	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999881774776568	WITHOUT_CLASSIFICATION	1.1822522343298121E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999967174585287	WITHOUT_CLASSIFICATION	3.282541471343081E-6	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999987447484883	WITHOUT_CLASSIFICATION	1.255251511736124E-6	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999995056005933	WITHOUT_CLASSIFICATION	4.943994068156549E-7	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998823652756408	WITHOUT_CLASSIFICATION	1.1763472435920008E-4	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999936593572953	WITHOUT_CLASSIFICATION	6.340642704600125E-6	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999917691130584	WITHOUT_CLASSIFICATION	8.230886941577536E-6	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999966187126672	WITHOUT_CLASSIFICATION	3.3812873327394906E-6	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999978279918399	WITHOUT_CLASSIFICATION	2.17200816003043E-6	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999336779931	WITHOUT_CLASSIFICATION	6.632200688346807E-8	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999991789570003	WITHOUT_CLASSIFICATION	8.210429996823119E-7	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999996015903	WITHOUT_CLASSIFICATION	3.98409700010238E-7	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999996099435077	WITHOUT_CLASSIFICATION	3.9005649227238586E-7	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999975315767604	WITHOUT_CLASSIFICATION	2.468423239475383E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998587599448596	WITHOUT_CLASSIFICATION	1.4124005514041868E-4	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998587599448596	WITHOUT_CLASSIFICATION	1.4124005514041868E-4	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998692814277397	WITHOUT_CLASSIFICATION	1.3071857226043047E-4	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999926290767217	WITHOUT_CLASSIFICATION	7.3709232783108365E-6	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999959968359656	WITHOUT_CLASSIFICATION	4.003164034302682E-6	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999866730218759	WITHOUT_CLASSIFICATION	1.332697812397586E-5	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999861862283	WITHOUT_CLASSIFICATION	1.3813771774196608E-8	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9982187551920351	WITHOUT_CLASSIFICATION	0.00178124480796492	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999973802618357	WITHOUT_CLASSIFICATION	2.619738164307941E-6	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999997447730499	WITHOUT_CLASSIFICATION	2.552269502179787E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999945182752906	WITHOUT_CLASSIFICATION	5.481724709310099E-6	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994234778029	WITHOUT_CLASSIFICATION	5.76522197148386E-7	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998983383979817	WITHOUT_CLASSIFICATION	1.0166160201821638E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999986337383031	WITHOUT_CLASSIFICATION	1.3662616969104744E-6	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999978686153002	WITHOUT_CLASSIFICATION	2.1313846997687134E-6	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999908006623677	WITHOUT_CLASSIFICATION	9.19933763233523E-6	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999998292990351	WITHOUT_CLASSIFICATION	1.7070096480704065E-7	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9849435869851347	WITHOUT_CLASSIFICATION	0.015056413014865176	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9849435869851347	WITHOUT_CLASSIFICATION	0.015056413014865176	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9994881175932389	WITHOUT_CLASSIFICATION	5.118824067611199E-4	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999818440837477	WITHOUT_CLASSIFICATION	1.815591625227304E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999972194706834	WITHOUT_CLASSIFICATION	2.7805293164683172E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994444438749	WITHOUT_CLASSIFICATION	5.55556125069004E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999911939795808	WITHOUT_CLASSIFICATION	8.80602041927824E-6	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9974681523882024	WITHOUT_CLASSIFICATION	0.0025318476117975647	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999206582928	WITHOUT_CLASSIFICATION	7.934170715584851E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999213943508	WITHOUT_CLASSIFICATION	7.860564923242841E-8	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999213943508	WITHOUT_CLASSIFICATION	7.860564923242841E-8	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999998267692354	WITHOUT_CLASSIFICATION	1.7323076460117997E-6	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999997149381116	WITHOUT_CLASSIFICATION	2.8506188840264814E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999982393911616	WITHOUT_CLASSIFICATION	1.7606088384145754E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.99937592275096	WITHOUT_CLASSIFICATION	6.240772490400079E-4	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999998745586934	WITHOUT_CLASSIFICATION	1.2544130656783455E-7	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999097304745386	WITHOUT_CLASSIFICATION	9.026952546144166E-5	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999826802517299	WITHOUT_CLASSIFICATION	1.7319748270093803E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997356712561	WITHOUT_CLASSIFICATION	2.643287438829631E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999985192816	WITHOUT_CLASSIFICATION	1.4807184059399013E-8	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999754275665086	WITHOUT_CLASSIFICATION	2.4572433491433265E-5	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9997386506662387	WITHOUT_CLASSIFICATION	2.6134933376139577E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999977388075241	WITHOUT_CLASSIFICATION	2.2611924758940966E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999661130325	WITHOUT_CLASSIFICATION	3.3886967432193145E-8	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999996836297138	WITHOUT_CLASSIFICATION	3.163702862367051E-7	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999986126357167	WITHOUT_CLASSIFICATION	1.3873642833694887E-6	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999979867020511	WITHOUT_CLASSIFICATION	2.01329794887206E-6	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999975980193352	WITHOUT_CLASSIFICATION	2.401980664782781E-6	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999873229463827	WITHOUT_CLASSIFICATION	1.2677053617325587E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999906591405947	WITHOUT_CLASSIFICATION	9.340859405276068E-6	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999997202600867	WITHOUT_CLASSIFICATION	2.7973991330248064E-6	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999997808430543	WITHOUT_CLASSIFICATION	2.191569455966349E-7	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999994933541291	WITHOUT_CLASSIFICATION	5.066458708574684E-7	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9997219046099208	WITHOUT_CLASSIFICATION	2.780953900792099E-4	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999323615103097	WITHOUT_CLASSIFICATION	6.763848969027099E-5	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999998071440718	WITHOUT_CLASSIFICATION	1.9285592820358112E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999997105658377	WITHOUT_CLASSIFICATION	2.8943416234981415E-7	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999493301469576	WITHOUT_CLASSIFICATION	5.066985304234204E-5	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999851015878	WITHOUT_CLASSIFICATION	1.4898412046576138E-8	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999980342574125	WITHOUT_CLASSIFICATION	1.965742587497584E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991304693248	WITHOUT_CLASSIFICATION	8.695306753695491E-7	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999566069065028	WITHOUT_CLASSIFICATION	4.339309349720199E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999903132806597	WITHOUT_CLASSIFICATION	9.686719340405696E-6	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999998058906103	WITHOUT_CLASSIFICATION	1.9410938973700277E-7	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999997910849817	WITHOUT_CLASSIFICATION	2.08915018272756E-7	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999997690070062	WITHOUT_CLASSIFICATION	2.3099299382935485E-7	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999583390022245	WITHOUT_CLASSIFICATION	4.1660997775469334E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999825071341827	WITHOUT_CLASSIFICATION	1.7492865817242904E-5	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999948939673453	WITHOUT_CLASSIFICATION	5.106032654674211E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999990202624605	WITHOUT_CLASSIFICATION	9.797375395315964E-7	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998377394064	WITHOUT_CLASSIFICATION	1.6226059365572932E-7	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999858630775534	WITHOUT_CLASSIFICATION	1.4136922446451206E-5	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999962487401911	WITHOUT_CLASSIFICATION	3.7512598088831266E-6	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.99998259463831	WITHOUT_CLASSIFICATION	1.740536169002797E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999653345657866	WITHOUT_CLASSIFICATION	3.466543421340957E-5	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999974903666	WITHOUT_CLASSIFICATION	2.5096334786426458E-9	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9998930888673456	WITHOUT_CLASSIFICATION	1.0691113265444706E-4	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999990202624605	WITHOUT_CLASSIFICATION	9.797375395315964E-7	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998377394064	WITHOUT_CLASSIFICATION	1.6226059365572932E-7	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999976883070296	WITHOUT_CLASSIFICATION	2.3116929702934134E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999920065228326	WITHOUT_CLASSIFICATION	7.993477167415546E-6	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999998027128091	WITHOUT_CLASSIFICATION	1.9728719104143507E-7	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.999995208465559	WITHOUT_CLASSIFICATION	4.791534440955135E-6	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999981232963436	WITHOUT_CLASSIFICATION	1.8767036564358703E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999998586946195	WITHOUT_CLASSIFICATION	1.413053804890757E-7	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999761413968503	WITHOUT_CLASSIFICATION	2.3858603149695635E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999942961371115	WITHOUT_CLASSIFICATION	5.703862888370793E-6	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999856926677189	WITHOUT_CLASSIFICATION	1.4307332281224942E-5	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9994552973483259	WITHOUT_CLASSIFICATION	5.44702651673981E-4	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999981713261	WITHOUT_CLASSIFICATION	1.8286738737709555E-9	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9994552973483259	WITHOUT_CLASSIFICATION	5.44702651673981E-4	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999941451719871	WITHOUT_CLASSIFICATION	5.854828012859938E-6	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999949551789167	WITHOUT_CLASSIFICATION	5.044821083332001E-6	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999887745758044	WITHOUT_CLASSIFICATION	1.1225424195543897E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996827218957	WITHOUT_CLASSIFICATION	3.172781042548248E-7	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999885047924946	WITHOUT_CLASSIFICATION	1.1495207505361051E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9998965771666499	WITHOUT_CLASSIFICATION	1.0342283335011857E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9998965771666499	WITHOUT_CLASSIFICATION	1.0342283335011857E-4	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.99994898709248	WITHOUT_CLASSIFICATION	5.101290751990527E-5	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999944221800317	WITHOUT_CLASSIFICATION	5.577819968409538E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999861969167598	WITHOUT_CLASSIFICATION	1.3803083240199762E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999758677906153	WITHOUT_CLASSIFICATION	2.4132209384683164E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999929964183716	WITHOUT_CLASSIFICATION	7.003581628456583E-6	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999996943081138	WITHOUT_CLASSIFICATION	3.056918862774872E-7	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999992139086713	WITHOUT_CLASSIFICATION	7.860913286953333E-7	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999993534418403	WITHOUT_CLASSIFICATION	6.465581596536828E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999950614082862	WITHOUT_CLASSIFICATION	4.938591713828656E-6	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9999810698055145	WITHOUT_CLASSIFICATION	1.8930194485509854E-5	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999996190746971	WITHOUT_CLASSIFICATION	3.8092530280793223E-7	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999893049745866	WITHOUT_CLASSIFICATION	1.069502541339285E-5	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999889567487595	WITHOUT_CLASSIFICATION	1.104325124049779E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999982482745049	WITHOUT_CLASSIFICATION	1.7517254950977166E-6	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999980408633005	WITHOUT_CLASSIFICATION	1.9591366995956025E-6	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999959658965192	WITHOUT_CLASSIFICATION	4.034103480857432E-6	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999990372667494	WITHOUT_CLASSIFICATION	9.627332504758695E-7	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999995108938539	WITHOUT_CLASSIFICATION	4.891061460913423E-7	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999724617943717	WITHOUT_CLASSIFICATION	2.7538205628175074E-5	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9997880652573999	WITHOUT_CLASSIFICATION	2.1193474260010342E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997504932513	WITHOUT_CLASSIFICATION	2.4950674871561645E-7	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999894488614253	WITHOUT_CLASSIFICATION	1.0551138574780861E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999873009861677	WITHOUT_CLASSIFICATION	1.2699013832235036E-5	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999969162878337	WITHOUT_CLASSIFICATION	3.0837121662301584E-6	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999850492940773	WITHOUT_CLASSIFICATION	1.4950705922769395E-5	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999396594970311	WITHOUT_CLASSIFICATION	6.034050296892778E-5	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999490698825	WITHOUT_CLASSIFICATION	5.093011752194226E-8	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.99983598815342	WITHOUT_CLASSIFICATION	1.6401184658001032E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999995558316573	WITHOUT_CLASSIFICATION	4.441683426862975E-7	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999999417390242	WITHOUT_CLASSIFICATION	5.82609758066492E-7	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9996814384382834	WITHOUT_CLASSIFICATION	3.1856156171655324E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999422162724858	WITHOUT_CLASSIFICATION	5.778372751411177E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999992139086713	WITHOUT_CLASSIFICATION	7.860913286953333E-7	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999864213761295	WITHOUT_CLASSIFICATION	1.3578623870443602E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999943789932706	WITHOUT_CLASSIFICATION	5.621006729429441E-6	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9981982794306399	WITHOUT_CLASSIFICATION	0.001801720569360042	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999953920742598	WITHOUT_CLASSIFICATION	4.607925740177671E-6	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999996317456863	WITHOUT_CLASSIFICATION	3.682543136786345E-7	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999998080838237	WITHOUT_CLASSIFICATION	1.919161762433812E-7	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999758677906153	WITHOUT_CLASSIFICATION	2.4132209384683164E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999758677906153	WITHOUT_CLASSIFICATION	2.4132209384683164E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999999302186291	WITHOUT_CLASSIFICATION	6.978137090685008E-7	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999995388202717	WITHOUT_CLASSIFICATION	4.611797282300791E-7	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.999998669921472	WITHOUT_CLASSIFICATION	1.3300785279789195E-6	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999989097385389	WITHOUT_CLASSIFICATION	1.0902614611204439E-6	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9993988099297871	WITHOUT_CLASSIFICATION	6.011900702127394E-4	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999430779877048	WITHOUT_CLASSIFICATION	5.692201229520428E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9995610087514561	WITHOUT_CLASSIFICATION	4.3899124854396477E-4	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999995219047069	WITHOUT_CLASSIFICATION	4.780952930683499E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999568551670193	WITHOUT_CLASSIFICATION	4.3144832980799075E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999451460493	WITHOUT_CLASSIFICATION	5.4853950611399763E-8	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999983739265682	WITHOUT_CLASSIFICATION	1.6260734317303625E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995695636352314	WITHOUT_CLASSIFICATION	4.3043636476862353E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999941507314029	WITHOUT_CLASSIFICATION	5.849268597208769E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999451460493	WITHOUT_CLASSIFICATION	5.4853950611399763E-8	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999981485836194	WITHOUT_CLASSIFICATION	1.851416380730733E-6	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999996600115315	WITHOUT_CLASSIFICATION	3.3998846856783883E-7	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999984239474596	WITHOUT_CLASSIFICATION	1.5760525403689754E-6	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9995692298225541	WITHOUT_CLASSIFICATION	4.3077017744593563E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995695636352314	WITHOUT_CLASSIFICATION	4.3043636476862353E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999957086537845	WITHOUT_CLASSIFICATION	4.291346215438737E-6	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999787159489412	WITHOUT_CLASSIFICATION	2.12840510589263E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999984925296422	WITHOUT_CLASSIFICATION	1.5074703577466931E-6	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998909484392154	WITHOUT_CLASSIFICATION	1.090515607845442E-4	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998134503676577	WITHOUT_CLASSIFICATION	1.865496323422178E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.999998147523332	WITHOUT_CLASSIFICATION	1.8524766678901814E-6	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999950514924609	WITHOUT_CLASSIFICATION	4.948507539061869E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999948041293055	WITHOUT_CLASSIFICATION	5.195870694423741E-6	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999936268556199	WITHOUT_CLASSIFICATION	6.373144380077526E-6	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.99999926255847	WITHOUT_CLASSIFICATION	7.374415300111042E-7	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999990937362998	WITHOUT_CLASSIFICATION	9.062637002421857E-7	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999998275991483	WITHOUT_CLASSIFICATION	1.7240085165301534E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999451460493	WITHOUT_CLASSIFICATION	5.4853950611399763E-8	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999957086537845	WITHOUT_CLASSIFICATION	4.291346215438737E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999984925296422	WITHOUT_CLASSIFICATION	1.5074703577466931E-6	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999889619935896	WITHOUT_CLASSIFICATION	1.1038006410420319E-5	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999805740997841	WITHOUT_CLASSIFICATION	1.9425900215838123E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999957941067987	WITHOUT_CLASSIFICATION	4.205893201225322E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995695636352314	WITHOUT_CLASSIFICATION	4.3043636476862353E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999962416012266	WITHOUT_CLASSIFICATION	3.758398773361451E-6	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999964638793254	WITHOUT_CLASSIFICATION	3.5361206746218083E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999882811276128	WITHOUT_CLASSIFICATION	1.1718872387222088E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999926668775833	WITHOUT_CLASSIFICATION	7.333122416697969E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999948041293055	WITHOUT_CLASSIFICATION	5.195870694423741E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999981485836194	WITHOUT_CLASSIFICATION	1.851416380730733E-6	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999964050382937	WITHOUT_CLASSIFICATION	3.594961706234872E-6	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999909958610849	WITHOUT_CLASSIFICATION	9.004138915223368E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999984017941203	WITHOUT_CLASSIFICATION	1.5982058798147176E-6	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998240839938938	WITHOUT_CLASSIFICATION	1.7591600610616283E-4	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999858345419101	WITHOUT_CLASSIFICATION	1.416545808981353E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999995960490745	WITHOUT_CLASSIFICATION	4.039509254998909E-6	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999949623125741	WITHOUT_CLASSIFICATION	5.0376874259133265E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996827218957	WITHOUT_CLASSIFICATION	3.172781042548248E-7	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967340323646	WITHOUT_CLASSIFICATION	3.265967635468041E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806677977365	WITHOUT_CLASSIFICATION	1.93322022634919E-5	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998344466633	WITHOUT_CLASSIFICATION	1.6555333676752922E-7	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9996458739432649	WITHOUT_CLASSIFICATION	3.541260567351281E-4	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999707205191113	WITHOUT_CLASSIFICATION	2.9279480888711148E-5	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999969468914937	WITHOUT_CLASSIFICATION	3.0531085063897302E-6	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999990878194824	WITHOUT_CLASSIFICATION	9.12180517714115E-7	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.999997871281395	WITHOUT_CLASSIFICATION	2.1287186050948123E-6	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998510180487	WITHOUT_CLASSIFICATION	1.4898195129551707E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999926668775833	WITHOUT_CLASSIFICATION	7.333122416697969E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806677977365	WITHOUT_CLASSIFICATION	1.93322022634919E-5	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999854385542327	WITHOUT_CLASSIFICATION	1.4561445767339497E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999896509123047	WITHOUT_CLASSIFICATION	1.0349087695142967E-5	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999661594091318	WITHOUT_CLASSIFICATION	3.384059086819603E-5	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999983325055043	WITHOUT_CLASSIFICATION	1.6674944956202066E-6	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999920903696535	WITHOUT_CLASSIFICATION	7.909630346487587E-6	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999450430406	WITHOUT_CLASSIFICATION	5.49569595187584E-8	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999576537698068	WITHOUT_CLASSIFICATION	4.234623019323707E-5	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9988338321496694	WITHOUT_CLASSIFICATION	0.0011661678503305441	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999553456561698	WITHOUT_CLASSIFICATION	4.4654343830182326E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9993852019361558	WITHOUT_CLASSIFICATION	6.147980638442562E-4	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999988323075599	WITHOUT_CLASSIFICATION	1.1676924401403501E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999205671588017	WITHOUT_CLASSIFICATION	7.943284119825764E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.999993030412414	WITHOUT_CLASSIFICATION	6.969587585917028E-6	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999939194754109	WITHOUT_CLASSIFICATION	6.0805245890748885E-6	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999844024747	WITHOUT_CLASSIFICATION	1.5597525229022994E-8	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999810263166	WITHOUT_CLASSIFICATION	1.8973683444428364E-8	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999999241649292	WITHOUT_CLASSIFICATION	7.58350708006918E-7	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999993035563121	WITHOUT_CLASSIFICATION	6.964436880283788E-7	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999998052376983	WITHOUT_CLASSIFICATION	1.9476230176876304E-7	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999908708583034	WITHOUT_CLASSIFICATION	9.129141696636612E-6	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999755396482228	WITHOUT_CLASSIFICATION	2.4460351777186763E-5	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998019709052	WITHOUT_CLASSIFICATION	1.9802909489705385E-7	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999333104596	WITHOUT_CLASSIFICATION	6.668954048785505E-8	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999716305973209	WITHOUT_CLASSIFICATION	2.836940267918231E-5	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999998863918366	WITHOUT_CLASSIFICATION	1.136081634892833E-7	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9991940038906886	WITHOUT_CLASSIFICATION	8.059961093114971E-4	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999766379418907	WITHOUT_CLASSIFICATION	2.3362058109287084E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997137214569961	WITHOUT_CLASSIFICATION	2.862785430038111E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999696928079987	WITHOUT_CLASSIFICATION	3.0307192001233305E-5	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.6377678793251265	WITHOUT_CLASSIFICATION	0.3622321206748734	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999907401239	WITHOUT_CLASSIFICATION	9.259876099950115E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998935550736542	WITHOUT_CLASSIFICATION	1.0644492634579735E-4	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999811596978516	WITHOUT_CLASSIFICATION	1.8840302148458108E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.99999645100081	WITHOUT_CLASSIFICATION	3.5489991899606346E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999848852535859	WITHOUT_CLASSIFICATION	1.5114746414148976E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999995946285717	WITHOUT_CLASSIFICATION	4.0537142824790015E-7	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999604501666	WITHOUT_CLASSIFICATION	3.954983350357749E-8	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999638805374522	WITHOUT_CLASSIFICATION	3.611946254773619E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999995946285717	WITHOUT_CLASSIFICATION	4.0537142824790015E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999848852535859	WITHOUT_CLASSIFICATION	1.5114746414148976E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999604501666	WITHOUT_CLASSIFICATION	3.954983350357749E-8	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999999395933706	WITHOUT_CLASSIFICATION	6.040662941442533E-8	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999998532485077	WITHOUT_CLASSIFICATION	1.4675149222789263E-7	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999861343431135	WITHOUT_CLASSIFICATION	1.3865656886582852E-5	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999968945061826	WITHOUT_CLASSIFICATION	3.1054938174020815E-6	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.99999995947008	WITHOUT_CLASSIFICATION	4.052992001979422E-8	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9703840334901411	WITHOUT_CLASSIFICATION	0.029615966509858888	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9971168950459883	WITHOUT_CLASSIFICATION	0.0028831049540116874	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999769451465331	WITHOUT_CLASSIFICATION	2.3054853466869026E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999951085343096	WITHOUT_CLASSIFICATION	4.8914656902717506E-6	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998535285414142	WITHOUT_CLASSIFICATION	1.4647145858591465E-4	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999792386042525	WITHOUT_CLASSIFICATION	2.0761395747486935E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999917289928784	WITHOUT_CLASSIFICATION	8.271007121672424E-6	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999899790385052	WITHOUT_CLASSIFICATION	1.0020961494813164E-5	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999915957299624	WITHOUT_CLASSIFICATION	8.404270037557164E-6	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998260553398	WITHOUT_CLASSIFICATION	1.739446601987041E-7	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999894393130149	WITHOUT_CLASSIFICATION	1.0560686985030358E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999442886179981	WITHOUT_CLASSIFICATION	5.571138200190273E-4	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999999836135879	WITHOUT_CLASSIFICATION	1.6386412107721595E-7	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9987999649916093	WITHOUT_CLASSIFICATION	0.0012000350083906835	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999272252266	WITHOUT_CLASSIFICATION	7.277477344781138E-8	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999624747223508	WITHOUT_CLASSIFICATION	3.752527764926909E-5	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999997449346002	WITHOUT_CLASSIFICATION	2.5506539988560376E-7	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999332162968856	WITHOUT_CLASSIFICATION	6.678370311444533E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999988451543909	WITHOUT_CLASSIFICATION	1.154845609137049E-6	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999328225363	WITHOUT_CLASSIFICATION	6.717746372507436E-8	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999328225363	WITHOUT_CLASSIFICATION	6.717746372507436E-8	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997160802918	WITHOUT_CLASSIFICATION	2.839197082018897E-7	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997160802918	WITHOUT_CLASSIFICATION	2.839197082018897E-7	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999330536362491	WITHOUT_CLASSIFICATION	6.694636375099835E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999442886179981	WITHOUT_CLASSIFICATION	5.571138200190273E-4	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999994488968998	WITHOUT_CLASSIFICATION	5.511031001879127E-7	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999884413869	WITHOUT_CLASSIFICATION	1.1558613091616268E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999996706419172	WITHOUT_CLASSIFICATION	3.2935808281741634E-7	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999996706419172	WITHOUT_CLASSIFICATION	3.2935808281741634E-7	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999881984514748	WITHOUT_CLASSIFICATION	1.180154852511064E-5	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999971594801835	WITHOUT_CLASSIFICATION	2.840519816472709E-6	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999981751196725	WITHOUT_CLASSIFICATION	1.8248803274097695E-6	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999996051285761	WITHOUT_CLASSIFICATION	3.948714238686561E-7	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9945165446337452	WITHOUT_CLASSIFICATION	0.005483455366254797	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9962052424709134	WITHOUT_CLASSIFICATION	0.0037947575290867104	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999926435080327	WITHOUT_CLASSIFICATION	7.356491967236029E-6	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999997627165318	WITHOUT_CLASSIFICATION	2.3728346817906372E-7	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999979161833393	WITHOUT_CLASSIFICATION	2.083816660707563E-6	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999808976815251	WITHOUT_CLASSIFICATION	1.910231847493885E-5	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999993137957089	WITHOUT_CLASSIFICATION	6.8620429104786E-7	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999978536532476	WITHOUT_CLASSIFICATION	2.146346752449635E-6	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999984536022767	WITHOUT_CLASSIFICATION	1.546397723292296E-6	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999982895002362	WITHOUT_CLASSIFICATION	1.710499763786783E-6	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999997137380414	WITHOUT_CLASSIFICATION	2.8626195860873287E-6	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999998136215319	WITHOUT_CLASSIFICATION	1.8637846807992077E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985808561207	WITHOUT_CLASSIFICATION	1.4191438793402374E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999669140919388	WITHOUT_CLASSIFICATION	3.308590806106169E-5	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999459727668368	WITHOUT_CLASSIFICATION	5.402723316312067E-5	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999998396690695	WITHOUT_CLASSIFICATION	1.6033093053141073E-7	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999997585153073	WITHOUT_CLASSIFICATION	2.414846927858474E-7	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999998061389964	WITHOUT_CLASSIFICATION	1.9386100354977984E-7	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999776766816	WITHOUT_CLASSIFICATION	2.2323318347890715E-8	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999945525343484	WITHOUT_CLASSIFICATION	5.447465651489882E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998841418829534	WITHOUT_CLASSIFICATION	1.1585811704666076E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999497072404	WITHOUT_CLASSIFICATION	5.0292759678739324E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806677977365	WITHOUT_CLASSIFICATION	1.93322022634919E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999205671588017	WITHOUT_CLASSIFICATION	7.943284119825764E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999947222524181	WITHOUT_CLASSIFICATION	5.2777475818932E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999946451858257	WITHOUT_CLASSIFICATION	5.3548141743023016E-5	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999883772552748	WITHOUT_CLASSIFICATION	1.1622744725256427E-5	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936590669307	WITHOUT_CLASSIFICATION	6.34093306921961E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998680669468406	WITHOUT_CLASSIFICATION	1.3193305315941395E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998680669468406	WITHOUT_CLASSIFICATION	1.3193305315941395E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999792531400179	WITHOUT_CLASSIFICATION	2.0746859982124173E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999940672338967	WITHOUT_CLASSIFICATION	5.932766103293692E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999917491140639	WITHOUT_CLASSIFICATION	8.25088593619577E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999917491140639	WITHOUT_CLASSIFICATION	8.25088593619577E-6	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9930175773130132	WITHOUT_CLASSIFICATION	0.006982422686986758	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999861339040511	WITHOUT_CLASSIFICATION	1.386609594887935E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999866910169368	WITHOUT_CLASSIFICATION	1.3308983063169106E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999981731396919	WITHOUT_CLASSIFICATION	1.82686030805923E-6	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999832954473291	WITHOUT_CLASSIFICATION	1.6704552670821507E-5	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999356195644218	WITHOUT_CLASSIFICATION	6.438043557822478E-5	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999981387256539	WITHOUT_CLASSIFICATION	1.8612743460932947E-6	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999155157565	WITHOUT_CLASSIFICATION	8.448424347770555E-8	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998087572212045	WITHOUT_CLASSIFICATION	1.9124277879549177E-4	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998087572212045	WITHOUT_CLASSIFICATION	1.9124277879549177E-4	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999884522503047	WITHOUT_CLASSIFICATION	1.1547749695199358E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.999999355455155	WITHOUT_CLASSIFICATION	6.445448450978226E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.999999355455155	WITHOUT_CLASSIFICATION	6.445448450978226E-7	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999522203510631	WITHOUT_CLASSIFICATION	4.7779648936770786E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999998877134163	WITHOUT_CLASSIFICATION	1.1228658375807836E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9986335165371174	WITHOUT_CLASSIFICATION	0.0013664834628826187	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999999485362447	WITHOUT_CLASSIFICATION	5.1463755246859515E-8	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999801927764	WITHOUT_CLASSIFICATION	1.980722367068195E-8	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999996206106387	WITHOUT_CLASSIFICATION	3.7938936118394747E-7	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999999547076981	WITHOUT_CLASSIFICATION	4.529230189668518E-7	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999907450742505	WITHOUT_CLASSIFICATION	9.254925749632205E-6	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999994174187314	WITHOUT_CLASSIFICATION	5.825812686150673E-7	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9892292070494819	WITHOUT_CLASSIFICATION	0.010770792950518188	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999999450645085	WITHOUT_CLASSIFICATION	5.493549149934204E-7	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999880831836864	WITHOUT_CLASSIFICATION	1.1916816313715037E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999355583836057	WITHOUT_CLASSIFICATION	6.444161639422708E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999355583836057	WITHOUT_CLASSIFICATION	6.444161639422708E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999355583836057	WITHOUT_CLASSIFICATION	6.444161639422708E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999355583836057	WITHOUT_CLASSIFICATION	6.444161639422708E-5	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999934041778576	WITHOUT_CLASSIFICATION	6.595822142428844E-6	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998171152354811	WITHOUT_CLASSIFICATION	1.8288476451894839E-4	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999996740653342	WITHOUT_CLASSIFICATION	3.259346658074441E-6	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9998991163429198	WITHOUT_CLASSIFICATION	1.0088365708018584E-4	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999986822418796	WITHOUT_CLASSIFICATION	1.3177581205062483E-6	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999980878085404	WITHOUT_CLASSIFICATION	1.912191459535249E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999911939795808	WITHOUT_CLASSIFICATION	8.80602041927824E-6	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997775614987876	WITHOUT_CLASSIFICATION	2.224385012124875E-4	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999162053444328	WITHOUT_CLASSIFICATION	8.37946555671376E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999911939795808	WITHOUT_CLASSIFICATION	8.80602041927824E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999911939795808	WITHOUT_CLASSIFICATION	8.80602041927824E-6	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999517399775	WITHOUT_CLASSIFICATION	4.826002261037542E-8	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999988755831458	WITHOUT_CLASSIFICATION	1.1244168541630699E-6	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.999999894907337	WITHOUT_CLASSIFICATION	1.0509266312216594E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999846648632402	WITHOUT_CLASSIFICATION	1.5335136759715143E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999883929667549	WITHOUT_CLASSIFICATION	1.16070332451302E-5	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999862307337734	WITHOUT_CLASSIFICATION	1.3769266226526477E-5	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999993834291805	WITHOUT_CLASSIFICATION	6.165708195769255E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999846648632402	WITHOUT_CLASSIFICATION	1.5335136759715143E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9986177140085551	WITHOUT_CLASSIFICATION	0.0013822859914448232	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999860228475664	WITHOUT_CLASSIFICATION	1.397715243345395E-5	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999994946209926	WITHOUT_CLASSIFICATION	5.053790074051143E-7	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999931803447621	WITHOUT_CLASSIFICATION	6.819655237888695E-6	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999914390721442	WITHOUT_CLASSIFICATION	8.560927855858751E-6	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999782577995925	WITHOUT_CLASSIFICATION	2.1742200407449133E-5	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999420133282	WITHOUT_CLASSIFICATION	5.7986671704600604E-8	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999765798893383	WITHOUT_CLASSIFICATION	2.3420110661686692E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998355988848	WITHOUT_CLASSIFICATION	1.6440111517170185E-7	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999999634863292	WITHOUT_CLASSIFICATION	3.651367080359117E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997865115547	WITHOUT_CLASSIFICATION	2.1348844533607804E-7	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999889841124737	WITHOUT_CLASSIFICATION	1.1015887526180718E-5	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999773601356499	WITHOUT_CLASSIFICATION	2.2639864350041378E-5	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997807680375331	WITHOUT_CLASSIFICATION	2.1923196246688003E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999723076853544	WITHOUT_CLASSIFICATION	2.769231464568114E-5	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999930852953328	WITHOUT_CLASSIFICATION	6.9147046671489475E-6	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999998150056293	WITHOUT_CLASSIFICATION	1.8499437070588386E-6	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999979607825892	WITHOUT_CLASSIFICATION	2.0392174108946626E-6	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999999869336505	WITHOUT_CLASSIFICATION	1.3066349508689518E-7	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999979607825892	WITHOUT_CLASSIFICATION	2.0392174108946626E-6	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999955942759227	WITHOUT_CLASSIFICATION	4.405724077323155E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999859227581502	WITHOUT_CLASSIFICATION	1.4077241849667642E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999919237023952	WITHOUT_CLASSIFICATION	8.076297604746246E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999949757910003	WITHOUT_CLASSIFICATION	5.024208999698476E-5	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999998150056293	WITHOUT_CLASSIFICATION	1.8499437070588386E-6	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999999869336505	WITHOUT_CLASSIFICATION	1.3066349508689518E-7	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999955942759227	WITHOUT_CLASSIFICATION	4.405724077323155E-6	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999991403760738	WITHOUT_CLASSIFICATION	8.596239262090686E-7	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999859662210598	WITHOUT_CLASSIFICATION	1.4033778940144912E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999942756203952	WITHOUT_CLASSIFICATION	5.724379604721634E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999560727270776	WITHOUT_CLASSIFICATION	4.3927272922420145E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9922539742135243	WITHOUT_CLASSIFICATION	0.0077460257864755905	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999998301554659	WITHOUT_CLASSIFICATION	1.6984453400991267E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985808561207	WITHOUT_CLASSIFICATION	1.4191438793402374E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999859227581502	WITHOUT_CLASSIFICATION	1.4077241849667642E-5	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999993126858734	WITHOUT_CLASSIFICATION	6.87314126619409E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9763221338999012	WITHOUT_CLASSIFICATION	0.02367786610009885	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999994579987358	WITHOUT_CLASSIFICATION	5.420012641091231E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985808561207	WITHOUT_CLASSIFICATION	1.4191438793402374E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806677977365	WITHOUT_CLASSIFICATION	1.93322022634919E-5	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999998687184404	WITHOUT_CLASSIFICATION	1.3128155954693572E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985808561207	WITHOUT_CLASSIFICATION	1.4191438793402374E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999518549976	WITHOUT_CLASSIFICATION	4.8145002516354024E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999846732645736	WITHOUT_CLASSIFICATION	1.5326735426357835E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806677977365	WITHOUT_CLASSIFICATION	1.93322022634919E-5	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998960459424744	WITHOUT_CLASSIFICATION	1.0395405752567079E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999987584662824	WITHOUT_CLASSIFICATION	1.2415337176377022E-6	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996096425651	WITHOUT_CLASSIFICATION	3.903574349386341E-7	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999949183166089	WITHOUT_CLASSIFICATION	5.081683391094868E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999992401021743	WITHOUT_CLASSIFICATION	7.59897825695262E-6	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999828051742036	WITHOUT_CLASSIFICATION	1.719482579637939E-5	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999994791006884	WITHOUT_CLASSIFICATION	5.20899311551823E-7	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999944963893679	WITHOUT_CLASSIFICATION	5.503610632043497E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997866063510179	WITHOUT_CLASSIFICATION	2.1339364898206046E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999053249295	WITHOUT_CLASSIFICATION	9.467507042733856E-8	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9986335165371174	WITHOUT_CLASSIFICATION	0.0013664834628826187	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999894053105178	WITHOUT_CLASSIFICATION	1.0594689482281697E-5	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9891422683606461	WITHOUT_CLASSIFICATION	0.010857731639353874	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999985040717795	WITHOUT_CLASSIFICATION	1.495928220507676E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999836114018329	WITHOUT_CLASSIFICATION	1.6388598167108093E-5	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999947340000328	WITHOUT_CLASSIFICATION	5.265999967236402E-6	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999911860552	WITHOUT_CLASSIFICATION	8.813944727710732E-9	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998228859460365	WITHOUT_CLASSIFICATION	1.7711405396346702E-4	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999844111424596	WITHOUT_CLASSIFICATION	1.5588857540367228E-5	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999985990472023	WITHOUT_CLASSIFICATION	1.4009527977246678E-6	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999996317010205	WITHOUT_CLASSIFICATION	3.682989794770979E-7	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.998500791856351	WITHOUT_CLASSIFICATION	0.0014992081436490657	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999267630287065	WITHOUT_CLASSIFICATION	7.323697129353372E-5	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999869517806135	WITHOUT_CLASSIFICATION	1.3048219386463295E-5	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999438249639	WITHOUT_CLASSIFICATION	5.61750361417959E-8	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999998242871366	WITHOUT_CLASSIFICATION	1.7571286330260735E-7	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998383188265993	WITHOUT_CLASSIFICATION	1.616811734005665E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999937221416696	WITHOUT_CLASSIFICATION	6.277858330437278E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999991068254397	WITHOUT_CLASSIFICATION	8.931745602583836E-7	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999994774953521	WITHOUT_CLASSIFICATION	5.225046479637698E-7	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999985912382215	WITHOUT_CLASSIFICATION	1.408761778380615E-6	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999430029538416	WITHOUT_CLASSIFICATION	5.6997046158294895E-5	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9994463169440854	WITHOUT_CLASSIFICATION	5.536830559147114E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999988272575434	WITHOUT_CLASSIFICATION	1.172742456484066E-6	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999821960595842	WITHOUT_CLASSIFICATION	1.780394041590432E-5	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999994685495027	WITHOUT_CLASSIFICATION	5.314504973574976E-7	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9994870567712455	WITHOUT_CLASSIFICATION	5.129432287545808E-4	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999275099131121	WITHOUT_CLASSIFICATION	7.24900868879103E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9979747849413098	WITHOUT_CLASSIFICATION	0.0020252150586902314	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999997641807951	WITHOUT_CLASSIFICATION	2.3581920490266337E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806677977365	WITHOUT_CLASSIFICATION	1.93322022634919E-5	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999847838978415	WITHOUT_CLASSIFICATION	1.5216102158490392E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.999788071438086	WITHOUT_CLASSIFICATION	2.1192856191408835E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.999788071438086	WITHOUT_CLASSIFICATION	2.1192856191408835E-4	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.998847485981945	WITHOUT_CLASSIFICATION	0.0011525140180549658	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999828051742036	WITHOUT_CLASSIFICATION	1.719482579637939E-5	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.998674856951928	WITHOUT_CLASSIFICATION	0.0013251430480719698	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999995658006555	WITHOUT_CLASSIFICATION	4.3419934451000744E-7	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999043772512798	WITHOUT_CLASSIFICATION	9.562274872023945E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999847475844152	WITHOUT_CLASSIFICATION	1.5252415584884377E-5	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999985880465092	WITHOUT_CLASSIFICATION	1.4119534907861032E-6	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9999190072061573	WITHOUT_CLASSIFICATION	8.099279384264545E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999865373177279	WITHOUT_CLASSIFICATION	1.3462682271982762E-5	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999994452535795	WITHOUT_CLASSIFICATION	5.547464204783124E-7	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999931498880036	WITHOUT_CLASSIFICATION	6.850111996331559E-6	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.999999381564395	WITHOUT_CLASSIFICATION	6.184356049164037E-7	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999584263566582	WITHOUT_CLASSIFICATION	4.157364334172293E-5	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999988220816186	WITHOUT_CLASSIFICATION	1.1779183814046639E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999996046959073	WITHOUT_CLASSIFICATION	3.9530409262578595E-7	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999876770692344	WITHOUT_CLASSIFICATION	1.2322930765596733E-4	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999967113090578	WITHOUT_CLASSIFICATION	3.288690942292797E-6	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999997917046294	WITHOUT_CLASSIFICATION	2.0829537063236935E-7	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999999966206954	WITHOUT_CLASSIFICATION	3.3793046032224275E-8	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999995718971145	WITHOUT_CLASSIFICATION	4.281028855175609E-7	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999980505147115	WITHOUT_CLASSIFICATION	1.9494852884227467E-6	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999613433585635	WITHOUT_CLASSIFICATION	3.8656641436487676E-5	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999944983965929	WITHOUT_CLASSIFICATION	5.501603407084716E-6	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999934366282635	WITHOUT_CLASSIFICATION	6.563371736622595E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9979747849413098	WITHOUT_CLASSIFICATION	0.0020252150586902314	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999989411063714	WITHOUT_CLASSIFICATION	1.0588936285332944E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999995077498989	WITHOUT_CLASSIFICATION	4.922501010905455E-7	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999927644168429	WITHOUT_CLASSIFICATION	7.235583156978581E-6	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999878697184238	WITHOUT_CLASSIFICATION	1.2130281576218007E-5	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9995014148483645	WITHOUT_CLASSIFICATION	4.985851516355061E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999185757283916	WITHOUT_CLASSIFICATION	8.142427160848219E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999349144011105	WITHOUT_CLASSIFICATION	6.508559888947426E-5	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999989830473528	WITHOUT_CLASSIFICATION	1.016952647241369E-6	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999991691183095	WITHOUT_CLASSIFICATION	8.308816904634436E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999992495819843	WITHOUT_CLASSIFICATION	7.504180156962564E-7	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999995059085967	WITHOUT_CLASSIFICATION	4.940914033776445E-7	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999758252322613	WITHOUT_CLASSIFICATION	2.4174767738625247E-5	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999692262788961	WITHOUT_CLASSIFICATION	3.0773721103899854E-4	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9997859097144913	WITHOUT_CLASSIFICATION	2.1409028550860822E-4	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999590981122	WITHOUT_CLASSIFICATION	4.090188777562279E-8	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999590981122	WITHOUT_CLASSIFICATION	4.090188777562279E-8	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999782395268211	WITHOUT_CLASSIFICATION	2.1760473178899503E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999205952922	WITHOUT_CLASSIFICATION	7.940470776782115E-8	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999911498875693	WITHOUT_CLASSIFICATION	8.850112430646053E-6	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999911498875693	WITHOUT_CLASSIFICATION	8.850112430646053E-6	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999998251627493	WITHOUT_CLASSIFICATION	1.748372505990162E-7	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9991135234516769	WITHOUT_CLASSIFICATION	8.86476548322941E-4	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999936330043508	WITHOUT_CLASSIFICATION	6.3669956491726244E-6	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999996214894984	WITHOUT_CLASSIFICATION	3.785105015796932E-7	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999960922183018	WITHOUT_CLASSIFICATION	3.907781698278595E-6	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999990516047094	WITHOUT_CLASSIFICATION	9.483952905320821E-7	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999958315273986	WITHOUT_CLASSIFICATION	4.168472601443016E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999958315273986	WITHOUT_CLASSIFICATION	4.168472601443016E-6	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999995408907321	WITHOUT_CLASSIFICATION	4.591092679692948E-7	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.99999970238	WITHOUT_CLASSIFICATION	2.976200000113187E-7	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999993367378541	WITHOUT_CLASSIFICATION	6.632621458827349E-7	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999908400144903	WITHOUT_CLASSIFICATION	9.159985509753761E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999908400144903	WITHOUT_CLASSIFICATION	9.159985509753761E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999993918824157	WITHOUT_CLASSIFICATION	6.081175842247298E-7	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999880950187816	WITHOUT_CLASSIFICATION	1.1904981218494492E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999971020975976	WITHOUT_CLASSIFICATION	2.89790240238504E-6	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999999179623416	WITHOUT_CLASSIFICATION	8.203765850427703E-8	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999991262801511	WITHOUT_CLASSIFICATION	8.73719848902008E-7	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999991412752938	WITHOUT_CLASSIFICATION	8.587247063200609E-7	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999725587068145	WITHOUT_CLASSIFICATION	2.7441293185582146E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999996406941549	WITHOUT_CLASSIFICATION	3.5930584510126085E-7	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.999999977108345	WITHOUT_CLASSIFICATION	2.2891654997664247E-8	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999698578758356	WITHOUT_CLASSIFICATION	3.014212416443151E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999996004926253	WITHOUT_CLASSIFICATION	3.9950737469335E-7	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999756061760157	WITHOUT_CLASSIFICATION	2.439382398437197E-5	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999979895477474	WITHOUT_CLASSIFICATION	2.010452252483914E-6	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999984138339284	WITHOUT_CLASSIFICATION	1.5861660716590276E-6	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999995798923499	WITHOUT_CLASSIFICATION	4.2010765010324714E-7	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999852401298575	WITHOUT_CLASSIFICATION	1.4759870142463883E-5	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999997906642558	WITHOUT_CLASSIFICATION	2.0933574409975146E-7	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999220610083425	WITHOUT_CLASSIFICATION	7.793899165758812E-5	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.999998639222091	WITHOUT_CLASSIFICATION	1.3607779089935786E-6	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999999508226311	WITHOUT_CLASSIFICATION	4.917736889743967E-7	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999950769489216	WITHOUT_CLASSIFICATION	4.923051078393165E-6	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998918931791467	WITHOUT_CLASSIFICATION	1.0810682085318809E-4	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999843978050393	WITHOUT_CLASSIFICATION	1.560219496060564E-5	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999991979967292	WITHOUT_CLASSIFICATION	8.020032707580523E-7	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9999985919198935	WITHOUT_CLASSIFICATION	1.40808010659073E-6	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999594731133	WITHOUT_CLASSIFICATION	4.052688666083678E-8	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999999822294825	WITHOUT_CLASSIFICATION	1.777051752398943E-8	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999717409836866	WITHOUT_CLASSIFICATION	2.8259016313328755E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999812385226	WITHOUT_CLASSIFICATION	1.8761477409488994E-8	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999988008528288	WITHOUT_CLASSIFICATION	1.1991471711876553E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999976788537641	WITHOUT_CLASSIFICATION	2.3211462358322634E-6	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999996037583553	WITHOUT_CLASSIFICATION	3.962416447763269E-7	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999995125056937	WITHOUT_CLASSIFICATION	4.874943063516247E-7	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998774497070813	WITHOUT_CLASSIFICATION	1.225502929186723E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999998904638095	WITHOUT_CLASSIFICATION	1.0953619048402407E-7	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999007450330917	WITHOUT_CLASSIFICATION	9.925496690832009E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999675165747003	WITHOUT_CLASSIFICATION	3.248342529971066E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999850487184314	WITHOUT_CLASSIFICATION	1.4951281568606792E-5	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999999581834748	WITHOUT_CLASSIFICATION	4.1816525207066654E-8	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999979487299527	WITHOUT_CLASSIFICATION	2.051270047251543E-6	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999978099780012	WITHOUT_CLASSIFICATION	2.190021998797282E-5	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9991804409973287	WITHOUT_CLASSIFICATION	8.19559002671175E-4	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999980942674034	WITHOUT_CLASSIFICATION	1.9057325965672536E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999999341946094	WITHOUT_CLASSIFICATION	6.58053905952177E-8	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999976464331649	WITHOUT_CLASSIFICATION	2.3535668349746545E-6	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999938387360632	WITHOUT_CLASSIFICATION	6.161263936900162E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9948350510548561	WITHOUT_CLASSIFICATION	0.005164948945143874	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999774755037592	WITHOUT_CLASSIFICATION	2.2524496240867493E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999926933273233	WITHOUT_CLASSIFICATION	7.306672676678216E-6	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999994468312618	WITHOUT_CLASSIFICATION	5.531687382021323E-6	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9994241004253923	WITHOUT_CLASSIFICATION	5.758995746076986E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999948515349173	WITHOUT_CLASSIFICATION	5.148465082668333E-6	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999918080130996	WITHOUT_CLASSIFICATION	8.191986900424072E-6	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.999999989773323	WITHOUT_CLASSIFICATION	1.0226676932171667E-8	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9994511533807015	WITHOUT_CLASSIFICATION	5.488466192985561E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999829088728174	WITHOUT_CLASSIFICATION	1.7091127182562943E-5	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9994471627929864	WITHOUT_CLASSIFICATION	5.528372070135744E-4	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999912454885139	WITHOUT_CLASSIFICATION	8.754511486081807E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.99880783634823	WITHOUT_CLASSIFICATION	0.0011921636517700008	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999565509415646	WITHOUT_CLASSIFICATION	4.34490584353953E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999985330545821	WITHOUT_CLASSIFICATION	1.466945417934523E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999985330545821	WITHOUT_CLASSIFICATION	1.466945417934523E-6	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999994887078565	WITHOUT_CLASSIFICATION	5.112921434829016E-7	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999962335394756	WITHOUT_CLASSIFICATION	3.766460524297358E-6	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999975580028	WITHOUT_CLASSIFICATION	2.4419972017202925E-8	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999699189208	WITHOUT_CLASSIFICATION	3.008107912667472E-8	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999218118175786	WITHOUT_CLASSIFICATION	7.818818242145113E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999995207197072	WITHOUT_CLASSIFICATION	4.792802927368935E-7	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999762921264	WITHOUT_CLASSIFICATION	2.3707873617902302E-8	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999997719815288	WITHOUT_CLASSIFICATION	2.2801847120570567E-7	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999211644517	WITHOUT_CLASSIFICATION	7.883554832145723E-8	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999997166410008	WITHOUT_CLASSIFICATION	2.8335899921788206E-7	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999967301749075	WITHOUT_CLASSIFICATION	3.2698250923839554E-6	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999337049680476	WITHOUT_CLASSIFICATION	6.629503195239591E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9998485494840743	WITHOUT_CLASSIFICATION	1.5145051592572648E-4	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999914830555	WITHOUT_CLASSIFICATION	8.51694451540363E-9	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999741583048214	WITHOUT_CLASSIFICATION	2.5841695178649267E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999741583048214	WITHOUT_CLASSIFICATION	2.5841695178649267E-5	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999993185788617	WITHOUT_CLASSIFICATION	6.814211383269858E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999880271465595	WITHOUT_CLASSIFICATION	1.1972853440492158E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999999352339954	WITHOUT_CLASSIFICATION	6.476600461114408E-7	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999916161569782	WITHOUT_CLASSIFICATION	8.38384302174385E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999955530962805	WITHOUT_CLASSIFICATION	4.4469037194913505E-6	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985711720265	WITHOUT_CLASSIFICATION	1.4288279734786536E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999879088495253	WITHOUT_CLASSIFICATION	1.2091150474648309E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9979000385564878	WITHOUT_CLASSIFICATION	0.0020999614435122	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999957164597	WITHOUT_CLASSIFICATION	4.283540333773781E-9	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999675949139127	WITHOUT_CLASSIFICATION	3.240508608729933E-5	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999702970274	WITHOUT_CLASSIFICATION	2.970297269962937E-8	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9997712203698259	WITHOUT_CLASSIFICATION	2.287796301741078E-4	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9997537851662307	WITHOUT_CLASSIFICATION	2.462148337692751E-4	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999986899979509	WITHOUT_CLASSIFICATION	1.310002049064304E-6	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999804617819178	WITHOUT_CLASSIFICATION	1.9538218082121902E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999731335371379	WITHOUT_CLASSIFICATION	2.686646286216616E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998711152160963	WITHOUT_CLASSIFICATION	1.2888478390372113E-4	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999996891054799	WITHOUT_CLASSIFICATION	3.1089452007330047E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999936402665031	WITHOUT_CLASSIFICATION	6.359733496959446E-6	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999862201363311	WITHOUT_CLASSIFICATION	1.3779863668882993E-5	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999998635028701	WITHOUT_CLASSIFICATION	1.3649713001454314E-7	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9996261409411962	WITHOUT_CLASSIFICATION	3.738590588038538E-4	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998394717304	WITHOUT_CLASSIFICATION	1.6052826954561605E-7	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999946611423386	WITHOUT_CLASSIFICATION	5.338857661467279E-6	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9992773923677365	WITHOUT_CLASSIFICATION	7.226076322634351E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999981161644789	WITHOUT_CLASSIFICATION	1.883835521136813E-6	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999011706629143	WITHOUT_CLASSIFICATION	9.882933708565726E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9998849385522622	WITHOUT_CLASSIFICATION	1.150614477376886E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999964707247015	WITHOUT_CLASSIFICATION	3.5292752985355224E-6	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999994647881522	WITHOUT_CLASSIFICATION	5.352118479518334E-7	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999795908992954	WITHOUT_CLASSIFICATION	2.040910070465271E-5	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.999999938790179	WITHOUT_CLASSIFICATION	6.120982104361647E-8	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999999057076312	WITHOUT_CLASSIFICATION	9.429236881461382E-7	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999797384250517	WITHOUT_CLASSIFICATION	2.0261574948285468E-5	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999986060102108	WITHOUT_CLASSIFICATION	1.3939897892266716E-6	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999817278289003	WITHOUT_CLASSIFICATION	1.8272171099788272E-5	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998377172548	WITHOUT_CLASSIFICATION	1.6228274522903186E-7	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999940333951365	WITHOUT_CLASSIFICATION	5.966604863500238E-6	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999860805846899	WITHOUT_CLASSIFICATION	1.3919415310201097E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999804481448628	WITHOUT_CLASSIFICATION	1.955185513725208E-5	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999536132828575	WITHOUT_CLASSIFICATION	4.638671714253897E-5	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999536132828575	WITHOUT_CLASSIFICATION	4.638671714253897E-5	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999479230459	WITHOUT_CLASSIFICATION	5.207695420892434E-8	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9928083171001972	WITHOUT_CLASSIFICATION	0.007191682899802882	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999983128637757	WITHOUT_CLASSIFICATION	1.6871362243106593E-6	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999890964782184	WITHOUT_CLASSIFICATION	1.0903521781601059E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999998676941672	WITHOUT_CLASSIFICATION	1.3230583281542413E-7	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999955241170937	WITHOUT_CLASSIFICATION	4.475882906214648E-6	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9996570682408118	WITHOUT_CLASSIFICATION	3.429317591883193E-4	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999997392355461	WITHOUT_CLASSIFICATION	2.607644538929887E-6	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9992089205662901	WITHOUT_CLASSIFICATION	7.910794337099501E-4	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987612498471	WITHOUT_CLASSIFICATION	1.2387501528318377E-6	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995853863481	WITHOUT_CLASSIFICATION	4.1461365184550785E-7	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999969880899963	WITHOUT_CLASSIFICATION	3.011910003625952E-6	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999943392613314	WITHOUT_CLASSIFICATION	5.660738668589E-6	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998067121723	WITHOUT_CLASSIFICATION	1.9328782762126546E-7	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9995379214117941	WITHOUT_CLASSIFICATION	4.6207858820594786E-4	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999980173908991	WITHOUT_CLASSIFICATION	1.982609100902555E-6	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999979685864147	WITHOUT_CLASSIFICATION	2.031413585316493E-6	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999982560368743	WITHOUT_CLASSIFICATION	1.7439631257458442E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999916832808156	WITHOUT_CLASSIFICATION	8.316719184459937E-6	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999999926255565	WITHOUT_CLASSIFICATION	7.374443500492852E-8	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9995416926237763	WITHOUT_CLASSIFICATION	4.58307376223642E-4	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999300611688021	WITHOUT_CLASSIFICATION	6.993883119783221E-5	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999955008622	WITHOUT_CLASSIFICATION	4.4991378365013525E-9	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9993823572002684	WITHOUT_CLASSIFICATION	6.176427997316614E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999893782848548	WITHOUT_CLASSIFICATION	1.0621715145191274E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999882089615497	WITHOUT_CLASSIFICATION	1.179103845027867E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999665121894	WITHOUT_CLASSIFICATION	3.3487810653024915E-8	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999990962095572	WITHOUT_CLASSIFICATION	9.037904427185443E-7	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9998040330125626	WITHOUT_CLASSIFICATION	1.959669874374888E-4	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999573374807601	WITHOUT_CLASSIFICATION	4.266251923988229E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999355877899828	WITHOUT_CLASSIFICATION	6.441221001718311E-5	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999978118253583	WITHOUT_CLASSIFICATION	2.1881746417127155E-5	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999998573761926	WITHOUT_CLASSIFICATION	1.4262380741347634E-7	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999267084542743	WITHOUT_CLASSIFICATION	7.329154572572703E-5	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999981463219453	WITHOUT_CLASSIFICATION	1.853678054769127E-6	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998455587343256	WITHOUT_CLASSIFICATION	1.5444126567447158E-4	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999461094593	WITHOUT_CLASSIFICATION	5.38905406581649E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999998518547809	WITHOUT_CLASSIFICATION	1.4814521915251914E-7	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999537890445066	WITHOUT_CLASSIFICATION	4.621095549342077E-5	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999630069261091	WITHOUT_CLASSIFICATION	3.69930738908831E-5	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999944950841	WITHOUT_CLASSIFICATION	5.504915806688018E-9	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999971466156321	WITHOUT_CLASSIFICATION	2.853384367886251E-6	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999726461806243	WITHOUT_CLASSIFICATION	2.7353819375670714E-5	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9994566891292224	WITHOUT_CLASSIFICATION	5.433108707777371E-4	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999997668513302	WITHOUT_CLASSIFICATION	2.331486698803054E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.998162195097777	WITHOUT_CLASSIFICATION	0.0018378049022230198	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999921424600346	WITHOUT_CLASSIFICATION	7.857539965301568E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9998485494840743	WITHOUT_CLASSIFICATION	1.5145051592572648E-4	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999805235740228	WITHOUT_CLASSIFICATION	1.9476425977234007E-5	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999972311657	WITHOUT_CLASSIFICATION	2.7688342560891693E-9	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998019193545263	WITHOUT_CLASSIFICATION	1.9808064547364234E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.999992325399605	WITHOUT_CLASSIFICATION	7.674600394910678E-6	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999980238061	WITHOUT_CLASSIFICATION	1.9761937818164963E-9	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999888219966697	WITHOUT_CLASSIFICATION	1.1178003330189228E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999794811102535	WITHOUT_CLASSIFICATION	2.0518889746469114E-5	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999895750779901	WITHOUT_CLASSIFICATION	1.0424922009865016E-5	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997454676437	WITHOUT_CLASSIFICATION	2.545323563285103E-7	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999908089993925	WITHOUT_CLASSIFICATION	9.191000607499439E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9078901744277016	WITHOUT_CLASSIFICATION	0.09210982557229831	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999511291671774	WITHOUT_CLASSIFICATION	4.887083282259205E-5	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999892513389859	WITHOUT_CLASSIFICATION	1.07486610142304E-5	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999642981778	WITHOUT_CLASSIFICATION	3.570182214742842E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939478476071	WITHOUT_CLASSIFICATION	6.0521523929443845E-6	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999985629215875	WITHOUT_CLASSIFICATION	1.4370784125146953E-6	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999991587469517	WITHOUT_CLASSIFICATION	8.412530483284731E-7	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999994822490039	WITHOUT_CLASSIFICATION	5.177509961024333E-7	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9942766731167743	WITHOUT_CLASSIFICATION	0.005723326883225828	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939478476071	WITHOUT_CLASSIFICATION	6.0521523929443845E-6	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9990152513485241	WITHOUT_CLASSIFICATION	9.847486514759666E-4	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9985660715955179	WITHOUT_CLASSIFICATION	0.0014339284044820536	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999954348785	WITHOUT_CLASSIFICATION	4.565121556977313E-9	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999969321226398	WITHOUT_CLASSIFICATION	3.067877360111635E-6	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999969257392786	WITHOUT_CLASSIFICATION	3.0742607213888814E-6	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9995788454250327	WITHOUT_CLASSIFICATION	4.2115457496729705E-4	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999972475032	WITHOUT_CLASSIFICATION	2.7524968216988897E-9	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999997371265939	WITHOUT_CLASSIFICATION	2.628734060917864E-6	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999997126988777	WITHOUT_CLASSIFICATION	2.873011223485583E-7	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999510779191179	WITHOUT_CLASSIFICATION	4.892208088200296E-5	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9996596409567309	WITHOUT_CLASSIFICATION	3.4035904326911934E-4	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999926657149161	WITHOUT_CLASSIFICATION	7.334285083875992E-6	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9996373872632371	WITHOUT_CLASSIFICATION	3.626127367629087E-4	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999997188465584	WITHOUT_CLASSIFICATION	2.8115344169309253E-7	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999974181041592	WITHOUT_CLASSIFICATION	2.5818958408633726E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999934366282635	WITHOUT_CLASSIFICATION	6.563371736622595E-6	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999996062622578	WITHOUT_CLASSIFICATION	3.937377423046961E-7	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999996172220232	WITHOUT_CLASSIFICATION	3.8277797684113067E-7	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999991267088902	WITHOUT_CLASSIFICATION	8.732911096816003E-7	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999750802706964	WITHOUT_CLASSIFICATION	2.49197293036539E-5	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999999873520251	WITHOUT_CLASSIFICATION	1.2647974893500737E-7	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999998446454258	WITHOUT_CLASSIFICATION	1.5535457420899508E-6	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999996988244809	WITHOUT_CLASSIFICATION	3.011755190966657E-7	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999987662144	WITHOUT_CLASSIFICATION	1.2337856082205457E-8	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999994960593491	WITHOUT_CLASSIFICATION	5.039406508140793E-7	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999842806950808	WITHOUT_CLASSIFICATION	1.571930491919121E-5	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9944140576547484	WITHOUT_CLASSIFICATION	0.005585942345251641	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999935381762036	WITHOUT_CLASSIFICATION	6.461823796439412E-6	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999940416417659	WITHOUT_CLASSIFICATION	5.958358234142637E-6	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.8703628081543812	WITHOUT_CLASSIFICATION	0.1296371918456188	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.999999880328029	WITHOUT_CLASSIFICATION	1.196719709619201E-7	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9890163357694641	WITHOUT_CLASSIFICATION	0.010983664230535905	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9997275717182992	WITHOUT_CLASSIFICATION	2.724282817008251E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999958224901644	WITHOUT_CLASSIFICATION	4.177509835611976E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999507288769	WITHOUT_CLASSIFICATION	4.9271123137807365E-8	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999948548528	WITHOUT_CLASSIFICATION	5.1451471969624055E-8	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999810384324226	WITHOUT_CLASSIFICATION	1.8961567577417357E-5	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999817299656605	WITHOUT_CLASSIFICATION	1.827003433951365E-5	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999998056713949	WITHOUT_CLASSIFICATION	1.943286049829253E-7	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998823652756408	WITHOUT_CLASSIFICATION	1.1763472435920008E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999962773438223	WITHOUT_CLASSIFICATION	3.7226561776813157E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999962773438223	WITHOUT_CLASSIFICATION	3.7226561776813157E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9982187551920351	WITHOUT_CLASSIFICATION	0.00178124480796492	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994234778029	WITHOUT_CLASSIFICATION	5.76522197148386E-7	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994444438749	WITHOUT_CLASSIFICATION	5.55556125069004E-7	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9996096499771102	WITHOUT_CLASSIFICATION	3.9035002288973717E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999981731396919	WITHOUT_CLASSIFICATION	1.82686030805923E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999981731396919	WITHOUT_CLASSIFICATION	1.82686030805923E-6	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999864360766353	WITHOUT_CLASSIFICATION	1.356392336479723E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999979867020511	WITHOUT_CLASSIFICATION	2.01329794887206E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999470194205099	WITHOUT_CLASSIFICATION	5.298057949011665E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9997219046099208	WITHOUT_CLASSIFICATION	2.780953900792099E-4	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999964084009992	WITHOUT_CLASSIFICATION	3.5915990008041025E-5	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999966020904446	WITHOUT_CLASSIFICATION	3.3979095554148917E-6	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9997982818439494	WITHOUT_CLASSIFICATION	2.0171815605063824E-4	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999993875113178	WITHOUT_CLASSIFICATION	6.124886822552288E-7	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999999090792557	WITHOUT_CLASSIFICATION	9.092074431429356E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992761070123	WITHOUT_CLASSIFICATION	7.23892987600854E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992761070123	WITHOUT_CLASSIFICATION	7.23892987600854E-7	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999983718382364	WITHOUT_CLASSIFICATION	1.6281617636710473E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999948041293055	WITHOUT_CLASSIFICATION	5.195870694423741E-6	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.999998147523332	WITHOUT_CLASSIFICATION	1.8524766678901814E-6	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999736574852407	WITHOUT_CLASSIFICATION	2.6342514759269515E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806677977365	WITHOUT_CLASSIFICATION	1.93322022634919E-5	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999935074212971	WITHOUT_CLASSIFICATION	6.492578702881518E-6	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967340323646	WITHOUT_CLASSIFICATION	3.265967635468041E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806677977365	WITHOUT_CLASSIFICATION	1.93322022634919E-5	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999997841965941	WITHOUT_CLASSIFICATION	2.1580340600518795E-7	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9996434542685004	WITHOUT_CLASSIFICATION	3.565457314995643E-4	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999497703052127	WITHOUT_CLASSIFICATION	5.022969478735629E-5	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999502240821	WITHOUT_CLASSIFICATION	4.9775918007906115E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999510779191179	WITHOUT_CLASSIFICATION	4.892208088200296E-5	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999994808265605	WITHOUT_CLASSIFICATION	5.191734393934063E-7	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9963645094640569	WITHOUT_CLASSIFICATION	0.003635490535943128	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999997569282505	WITHOUT_CLASSIFICATION	2.43071749427644E-7	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999999074559536	WITHOUT_CLASSIFICATION	9.254404631640177E-8	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999995068540807	WITHOUT_CLASSIFICATION	4.9314591938688E-7	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999984441926099	WITHOUT_CLASSIFICATION	1.555807390104108E-6	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999809842779409	WITHOUT_CLASSIFICATION	1.9015722059186856E-5	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999676682783	WITHOUT_CLASSIFICATION	3.233172172855942E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999820449020874	WITHOUT_CLASSIFICATION	1.795509791259504E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998434301794747	WITHOUT_CLASSIFICATION	1.5656982052514808E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998434301794747	WITHOUT_CLASSIFICATION	1.5656982052514808E-4	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999846648632402	WITHOUT_CLASSIFICATION	1.5335136759715143E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.999988936466742	WITHOUT_CLASSIFICATION	1.1063533257934194E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999911939795808	WITHOUT_CLASSIFICATION	8.80602041927824E-6	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999832023277536	WITHOUT_CLASSIFICATION	1.679767224643815E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999969178702214	WITHOUT_CLASSIFICATION	3.082129778715207E-6	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999970941638222	WITHOUT_CLASSIFICATION	2.905836177885325E-6	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999723076853544	WITHOUT_CLASSIFICATION	2.769231464568114E-5	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9562246752349355	WITHOUT_CLASSIFICATION	0.0437753247650645	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999991403760738	WITHOUT_CLASSIFICATION	8.596239262090686E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997094855670867	WITHOUT_CLASSIFICATION	2.9051443291323235E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985808561207	WITHOUT_CLASSIFICATION	1.4191438793402374E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.865582987710566	WITHOUT_CLASSIFICATION	0.13441701228943403	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998398948221	WITHOUT_CLASSIFICATION	1.601051779416182E-7	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999995886141235	WITHOUT_CLASSIFICATION	4.1138587658184043E-7	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999998817828927	WITHOUT_CLASSIFICATION	1.1821710728550332E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999980384412518	WITHOUT_CLASSIFICATION	1.9615587481929074E-6	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999871790312644	WITHOUT_CLASSIFICATION	1.2820968735523457E-5	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999954648455659	WITHOUT_CLASSIFICATION	4.535154434095961E-6	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999867523671102	WITHOUT_CLASSIFICATION	1.3247632889746221E-5	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999987206384017	WITHOUT_CLASSIFICATION	1.279361598327368E-6	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999614958898263	WITHOUT_CLASSIFICATION	3.850411017362751E-5	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999873230222108	WITHOUT_CLASSIFICATION	1.267697778921024E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999971020975976	WITHOUT_CLASSIFICATION	2.89790240238504E-6	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999994675927	WITHOUT_CLASSIFICATION	5.324073768755675E-10	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999639778734062	WITHOUT_CLASSIFICATION	3.602212659385336E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999639778734062	WITHOUT_CLASSIFICATION	3.602212659385336E-5	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999337348986775	WITHOUT_CLASSIFICATION	6.626510132238481E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999020629321078	WITHOUT_CLASSIFICATION	9.793706789220555E-5	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999985753285568	WITHOUT_CLASSIFICATION	1.4246714431266303E-6	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999519857823519	WITHOUT_CLASSIFICATION	4.801421764810961E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999971331855807	WITHOUT_CLASSIFICATION	2.8668144193656515E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999394945810922	WITHOUT_CLASSIFICATION	6.0505418907783805E-5	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9998115255357667	WITHOUT_CLASSIFICATION	1.8847446423326958E-4	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999100522042762	WITHOUT_CLASSIFICATION	8.99477957237624E-5	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9936210214569042	WITHOUT_CLASSIFICATION	0.006378978543095727	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.665757130515785	DEFECT	0.3342428694842151	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.8456646474349347	WITHOUT_CLASSIFICATION	0.1543353525650652	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.8790973446002701	WITHOUT_CLASSIFICATION	0.12090265539972991	DEFECT
/*	DEFECT	0.9996329457278749	WITHOUT_CLASSIFICATION	3.6705427212513293E-4	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9999474231633948	WITHOUT_CLASSIFICATION	5.257683660523023E-5	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9755445011953706	WITHOUT_CLASSIFICATION	0.0244554988046293	DEFECT
// TODO : should this be an error?	DEFECT	0.9983587649072447	WITHOUT_CLASSIFICATION	0.0016412350927553496	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9413712022328312	DEFECT	0.05862879776716887	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.9458257569637595	DEFECT	0.05417424303624053	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6696071259675648	DEFECT	0.3303928740324352	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6696071259675648	DEFECT	0.3303928740324352	WITHOUT_CLASSIFICATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9912226036605016	WITHOUT_CLASSIFICATION	0.008777396339498448	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999879952752104	WITHOUT_CLASSIFICATION	1.2004724789575614E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.8037601771459124	WITHOUT_CLASSIFICATION	0.1962398228540876	DEFECT
// this call is side-effecty	DEFECT	0.9999989142508797	WITHOUT_CLASSIFICATION	1.0857491202841375E-6	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.5908261742028483	DEFECT	0.4091738257971517	WITHOUT_CLASSIFICATION
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.8509642625192301	WITHOUT_CLASSIFICATION	0.14903573748076993	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9909656378659731	WITHOUT_CLASSIFICATION	0.009034362134026875	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9993239258099201	WITHOUT_CLASSIFICATION	6.760741900797684E-4	DEFECT
//TODO: is this completely correct?	DEFECT	0.992707500642985	WITHOUT_CLASSIFICATION	0.0072924993570151015	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999759908107777	WITHOUT_CLASSIFICATION	2.400918922228169E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.8042544072011284	WITHOUT_CLASSIFICATION	0.19574559279887166	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9979524049765146	WITHOUT_CLASSIFICATION	0.0020475950234853818	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.628360988617612	WITHOUT_CLASSIFICATION	0.37163901138238803	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.5057381215814664	DEFECT	0.49426187841853364	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.966893742350647	WITHOUT_CLASSIFICATION	0.03310625764935307	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9974693492682883	WITHOUT_CLASSIFICATION	0.0025306507317116255	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.972716880472412	WITHOUT_CLASSIFICATION	0.027283119527587985	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9944914534859561	WITHOUT_CLASSIFICATION	0.005508546514043789	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9309797601676696	WITHOUT_CLASSIFICATION	0.06902023983233037	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6696071259675648	DEFECT	0.3303928740324352	WITHOUT_CLASSIFICATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9999885493322211	DEFECT	1.145066777885532E-5	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9988261640272516	WITHOUT_CLASSIFICATION	0.0011738359727484274	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.6041058037520902	WITHOUT_CLASSIFICATION	0.39589419624790967	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9999258422261932	WITHOUT_CLASSIFICATION	7.41577738069123E-5	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999258205612779	WITHOUT_CLASSIFICATION	7.417943872220088E-5	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9999996465145429	WITHOUT_CLASSIFICATION	3.5348545719271943E-7	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9983220577948899	WITHOUT_CLASSIFICATION	0.0016779422051102094	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9015908121979609	DEFECT	0.09840918780203915	WITHOUT_CLASSIFICATION
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9996193472541994	WITHOUT_CLASSIFICATION	3.806527458006306E-4	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.997399787076228	WITHOUT_CLASSIFICATION	0.0026002129237720794	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9995777162360256	WITHOUT_CLASSIFICATION	4.2228376397435787E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.8216874072405641	DEFECT	0.17831259275943598	WITHOUT_CLASSIFICATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9999977836679803	WITHOUT_CLASSIFICATION	2.2163320196941122E-6	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.99082215750952	WITHOUT_CLASSIFICATION	0.009177842490480044	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9112788593339948	WITHOUT_CLASSIFICATION	0.08872114066600517	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.8298112030144948	WITHOUT_CLASSIFICATION	0.1701887969855051	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9479821364770913	WITHOUT_CLASSIFICATION	0.05201786352290879	DEFECT
