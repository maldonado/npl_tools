test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999699994281828	WITHOUT_CLASSIFICATION	3.0000571817211065E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9998488831099702	WITHOUT_CLASSIFICATION	1.5111689002981663E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9998488831099702	WITHOUT_CLASSIFICATION	1.5111689002981663E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9998488831099702	WITHOUT_CLASSIFICATION	1.5111689002981663E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9998488831099702	WITHOUT_CLASSIFICATION	1.5111689002981663E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9998488831099702	WITHOUT_CLASSIFICATION	1.5111689002981663E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9998488831099702	WITHOUT_CLASSIFICATION	1.5111689002981663E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9998488831099702	WITHOUT_CLASSIFICATION	1.5111689002981663E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9998615696400741	WITHOUT_CLASSIFICATION	1.3843035992588387E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9998615696400741	WITHOUT_CLASSIFICATION	1.3843035992588387E-4	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999853867879943	WITHOUT_CLASSIFICATION	1.4613212005629005E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.999972093690032	WITHOUT_CLASSIFICATION	2.790630996795395E-5	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999854888336286	WITHOUT_CLASSIFICATION	1.4511166371393044E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999156860446273	WITHOUT_CLASSIFICATION	8.431395537263368E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999156860446273	WITHOUT_CLASSIFICATION	8.431395537263368E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999059941983	WITHOUT_CLASSIFICATION	9.400580175085168E-8	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992524142428	WITHOUT_CLASSIFICATION	7.475857572244745E-7	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999815243857402	WITHOUT_CLASSIFICATION	1.847561425973643E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999147939946006	WITHOUT_CLASSIFICATION	8.520600539934904E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9993626280117046	WITHOUT_CLASSIFICATION	6.3737198829542E-4	DEFECT
double	WITHOUT_CLASSIFICATION	0.9993626280117046	WITHOUT_CLASSIFICATION	6.3737198829542E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.9977181859275124	WITHOUT_CLASSIFICATION	0.002281814072487529	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999028879263225	WITHOUT_CLASSIFICATION	9.711207367749438E-5	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.999711085485901	WITHOUT_CLASSIFICATION	2.8891451409891045E-4	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999988586976079	WITHOUT_CLASSIFICATION	1.1413023921234453E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999357449304281	WITHOUT_CLASSIFICATION	6.425506957183046E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9998290721841591	WITHOUT_CLASSIFICATION	1.709278158408881E-4	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9993557206525566	WITHOUT_CLASSIFICATION	6.442793474433123E-4	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9952504439481096	WITHOUT_CLASSIFICATION	0.0047495560518905165	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.994795053365308	WITHOUT_CLASSIFICATION	0.005204946634691965	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999994550472846	WITHOUT_CLASSIFICATION	5.449527153364133E-7	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9995539197501704	WITHOUT_CLASSIFICATION	4.46080249829651E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9991747286932174	WITHOUT_CLASSIFICATION	8.252713067825802E-4	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999911557912332	WITHOUT_CLASSIFICATION	8.844208766825291E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.998651018722701	WITHOUT_CLASSIFICATION	0.001348981277299028	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.998651018722701	WITHOUT_CLASSIFICATION	0.001348981277299028	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999984153188769	WITHOUT_CLASSIFICATION	1.5846811231510644E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9989356158084932	WITHOUT_CLASSIFICATION	0.0010643841915067753	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999974942336973	WITHOUT_CLASSIFICATION	2.5057663027204428E-6	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998894734471	WITHOUT_CLASSIFICATION	1.105265529446376E-7	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999954231415757	WITHOUT_CLASSIFICATION	4.5768584242496275E-6	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999988595041682	WITHOUT_CLASSIFICATION	1.140495831847145E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999979668598036	WITHOUT_CLASSIFICATION	2.0331401964363602E-6	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.999998829953891	WITHOUT_CLASSIFICATION	1.170046108993451E-6	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999993264411512	WITHOUT_CLASSIFICATION	6.735588487345928E-7	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999917783251304	WITHOUT_CLASSIFICATION	8.221674869510291E-6	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999987506129637	WITHOUT_CLASSIFICATION	1.2493870363257545E-6	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999950142191348	WITHOUT_CLASSIFICATION	4.9857808652199695E-6	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999995201344103	WITHOUT_CLASSIFICATION	4.798655897438525E-7	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999952421678886	WITHOUT_CLASSIFICATION	4.757832111301498E-6	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999479746643305	WITHOUT_CLASSIFICATION	5.20253356695983E-5	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821482387006	WITHOUT_CLASSIFICATION	1.7851761299403244E-5	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275479874811	WITHOUT_CLASSIFICATION	7.245201251895286E-5	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999956069621933	WITHOUT_CLASSIFICATION	4.393037806748278E-6	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997840976532417	WITHOUT_CLASSIFICATION	2.159023467583512E-4	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9998582795026003	WITHOUT_CLASSIFICATION	1.4172049739973088E-4	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999185105547028	WITHOUT_CLASSIFICATION	8.148944529719429E-5	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999697255040718	WITHOUT_CLASSIFICATION	3.0274495928213834E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9998582795026003	WITHOUT_CLASSIFICATION	1.4172049739973088E-4	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999697255040718	WITHOUT_CLASSIFICATION	3.0274495928213834E-5	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999305770683566	WITHOUT_CLASSIFICATION	6.94229316433701E-5	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9986761032907384	WITHOUT_CLASSIFICATION	0.0013238967092615741	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999937474656532	WITHOUT_CLASSIFICATION	6.252534346839929E-6	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999093141953895	WITHOUT_CLASSIFICATION	9.068580461053304E-5	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999888615792932	WITHOUT_CLASSIFICATION	1.113842070678091E-5	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999998624187294	WITHOUT_CLASSIFICATION	1.3758127067875113E-7	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9997319394689775	WITHOUT_CLASSIFICATION	2.680605310224284E-4	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9996095139208017	WITHOUT_CLASSIFICATION	3.90486079198392E-4	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999221179603398	WITHOUT_CLASSIFICATION	7.788203966017297E-5	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9999777375578222	WITHOUT_CLASSIFICATION	2.226244217778566E-5	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999495088806939	WITHOUT_CLASSIFICATION	5.04911193060408E-5	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999697255040718	WITHOUT_CLASSIFICATION	3.0274495928213834E-5	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999989221291476	WITHOUT_CLASSIFICATION	1.0778708523476475E-6	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9997380566574102	WITHOUT_CLASSIFICATION	2.6194334258983405E-4	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999565219689773	WITHOUT_CLASSIFICATION	4.3478031022604495E-5	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999743996462926	WITHOUT_CLASSIFICATION	2.5600353707313417E-5	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999669451958115	WITHOUT_CLASSIFICATION	3.305480418851487E-5	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999940266669312	WITHOUT_CLASSIFICATION	5.9733330689514045E-6	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999716250941094	WITHOUT_CLASSIFICATION	2.837490589067049E-5	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999571291407803	WITHOUT_CLASSIFICATION	4.287085921972917E-5	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999986981316927	WITHOUT_CLASSIFICATION	1.301868307317826E-6	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9998287350104932	WITHOUT_CLASSIFICATION	1.7126498950687663E-4	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999183607732056	WITHOUT_CLASSIFICATION	8.163922679433336E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999195487967925	WITHOUT_CLASSIFICATION	8.045120320760789E-5	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999765058544667	WITHOUT_CLASSIFICATION	2.349414553329705E-5	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.99979511682402	WITHOUT_CLASSIFICATION	2.0488317598003073E-4	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999997152871333	WITHOUT_CLASSIFICATION	2.8471286673515713E-7	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.999987486911294	WITHOUT_CLASSIFICATION	1.251308870603433E-5	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999936471584295	WITHOUT_CLASSIFICATION	6.35284157037545E-6	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999992243987212	WITHOUT_CLASSIFICATION	7.756012786387557E-7	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999212231270097	WITHOUT_CLASSIFICATION	7.877687299030052E-5	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999901406154357	WITHOUT_CLASSIFICATION	9.85938456427211E-6	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999940311362288	WITHOUT_CLASSIFICATION	5.968863771219255E-6	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999972925001231	WITHOUT_CLASSIFICATION	2.7074998769451777E-6	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999882301593835	WITHOUT_CLASSIFICATION	1.1769840616474523E-5	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999887918421075	WITHOUT_CLASSIFICATION	1.1208157892471077E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999972925001231	WITHOUT_CLASSIFICATION	2.7074998769451777E-6	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.999998809050649	WITHOUT_CLASSIFICATION	1.1909493509734983E-6	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999078811907587	WITHOUT_CLASSIFICATION	9.211880924124631E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9998582795026003	WITHOUT_CLASSIFICATION	1.4172049739973088E-4	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999783763911391	WITHOUT_CLASSIFICATION	2.1623608860903718E-5	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999916547005795	WITHOUT_CLASSIFICATION	8.345299420531179E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999323315589721	WITHOUT_CLASSIFICATION	6.766844102791939E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999323315589721	WITHOUT_CLASSIFICATION	6.766844102791939E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999925543284398	WITHOUT_CLASSIFICATION	7.445671560205226E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999984175393491	WITHOUT_CLASSIFICATION	1.5824606508164467E-6	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999996289504287	WITHOUT_CLASSIFICATION	3.710495712254865E-7	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999983111215042	WITHOUT_CLASSIFICATION	1.6888784958272527E-6	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999550394361322	WITHOUT_CLASSIFICATION	4.496056386781532E-5	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999962447801856	WITHOUT_CLASSIFICATION	3.755219814410889E-5	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999752890276411	WITHOUT_CLASSIFICATION	2.4710972358823337E-5	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999154113223347	WITHOUT_CLASSIFICATION	8.458867766518799E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999993719312395	WITHOUT_CLASSIFICATION	6.280687604907244E-6	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999676247657945	WITHOUT_CLASSIFICATION	3.2375234205531956E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999987752911587	WITHOUT_CLASSIFICATION	1.2247088412989542E-6	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999987752911587	WITHOUT_CLASSIFICATION	1.2247088412989542E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999103301735837	WITHOUT_CLASSIFICATION	8.96698264163283E-5	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999527035668604	WITHOUT_CLASSIFICATION	4.7296433139534414E-5	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999674174443896	WITHOUT_CLASSIFICATION	3.258255561040299E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999987752911587	WITHOUT_CLASSIFICATION	1.2247088412989542E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999103301735837	WITHOUT_CLASSIFICATION	8.96698264163283E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999103301735837	WITHOUT_CLASSIFICATION	8.96698264163283E-5	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999710764177523	WITHOUT_CLASSIFICATION	2.8923582247706664E-5	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.999973549052436	WITHOUT_CLASSIFICATION	2.645094756416441E-5	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9997852775167086	WITHOUT_CLASSIFICATION	2.147224832914241E-4	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999949727117882	WITHOUT_CLASSIFICATION	5.027288211813606E-5	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999613056565897	WITHOUT_CLASSIFICATION	3.869434341036751E-5	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999613056565897	WITHOUT_CLASSIFICATION	3.869434341036751E-5	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999925776860896	WITHOUT_CLASSIFICATION	7.422313910447606E-6	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999767945636518	WITHOUT_CLASSIFICATION	2.320543634825022E-5	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999907706974198	WITHOUT_CLASSIFICATION	9.229302580193817E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999987172794129	WITHOUT_CLASSIFICATION	1.2827205870940482E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999987172794129	WITHOUT_CLASSIFICATION	1.2827205870940482E-6	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999975882891028	WITHOUT_CLASSIFICATION	2.411710897269322E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.99945311828957	WITHOUT_CLASSIFICATION	5.468817104300267E-4	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999987586204505	WITHOUT_CLASSIFICATION	1.241379549557624E-6	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9998164960155982	WITHOUT_CLASSIFICATION	1.8350398440179167E-4	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999998532318137	WITHOUT_CLASSIFICATION	1.467681862755513E-7	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999942195593778	WITHOUT_CLASSIFICATION	5.780440622101593E-6	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999873199269312	WITHOUT_CLASSIFICATION	1.2680073068751767E-5	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999811650480551	WITHOUT_CLASSIFICATION	1.8834951944884224E-5	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999980148862542	WITHOUT_CLASSIFICATION	1.9851137457725936E-6	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999987586204505	WITHOUT_CLASSIFICATION	1.241379549557624E-6	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9998267153232575	WITHOUT_CLASSIFICATION	1.732846767424827E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9992158643259509	WITHOUT_CLASSIFICATION	7.841356740491103E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9992158643259509	WITHOUT_CLASSIFICATION	7.841356740491103E-4	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999314889548254	WITHOUT_CLASSIFICATION	6.851104517449424E-5	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999974304764835	WITHOUT_CLASSIFICATION	2.569523516556161E-6	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999997562321641	WITHOUT_CLASSIFICATION	2.437678359332447E-7	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999990048693488	WITHOUT_CLASSIFICATION	9.95130651201804E-6	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9988209787719708	WITHOUT_CLASSIFICATION	0.0011790212280291623	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999973303295305	WITHOUT_CLASSIFICATION	2.6696704694428974E-6	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.999898628388313	WITHOUT_CLASSIFICATION	1.013716116869649E-4	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9998396801462562	WITHOUT_CLASSIFICATION	1.6031985374368205E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999962878913352	WITHOUT_CLASSIFICATION	3.712108664860582E-6	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999989283261152	WITHOUT_CLASSIFICATION	1.0716738848051385E-5	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999989283261152	WITHOUT_CLASSIFICATION	1.0716738848051385E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999420906978488	WITHOUT_CLASSIFICATION	5.79093021512201E-5	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999699994281828	WITHOUT_CLASSIFICATION	3.0000571817211065E-5	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999968557983597	WITHOUT_CLASSIFICATION	3.144201640295205E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9998488831099702	WITHOUT_CLASSIFICATION	1.5111689002981663E-4	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9999556778421407	WITHOUT_CLASSIFICATION	4.4322157859329605E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9998615696400741	WITHOUT_CLASSIFICATION	1.3843035992588387E-4	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999776202965215	WITHOUT_CLASSIFICATION	2.2379703478447133E-5	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999850012327933	WITHOUT_CLASSIFICATION	1.4998767206802756E-5	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999938424719663	WITHOUT_CLASSIFICATION	6.157528033590817E-6	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9999869015694086	WITHOUT_CLASSIFICATION	1.3098430591386832E-5	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9977481472566309	WITHOUT_CLASSIFICATION	0.0022518527433692003	DEFECT
new	WITHOUT_CLASSIFICATION	0.999440714195132	WITHOUT_CLASSIFICATION	5.592858048678615E-4	DEFECT
dup	WITHOUT_CLASSIFICATION	0.998792659170253	WITHOUT_CLASSIFICATION	0.0012073408297470383	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999913168480354	WITHOUT_CLASSIFICATION	8.683151964571108E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.999972093690032	WITHOUT_CLASSIFICATION	2.790630996795395E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999064608700563	WITHOUT_CLASSIFICATION	9.353912994366611E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999064608700563	WITHOUT_CLASSIFICATION	9.353912994366611E-5	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9999895355798837	WITHOUT_CLASSIFICATION	1.0464420116359609E-5	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.999991939033612	WITHOUT_CLASSIFICATION	8.060966387901716E-6	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999838661908935	WITHOUT_CLASSIFICATION	1.6133809106445186E-5	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.999968754884015	WITHOUT_CLASSIFICATION	3.1245115984953565E-5	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999842612617015	WITHOUT_CLASSIFICATION	1.5738738298608136E-5	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999855446905415	WITHOUT_CLASSIFICATION	1.4455309458426823E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999156860446273	WITHOUT_CLASSIFICATION	8.431395537263368E-5	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999863548059787	WITHOUT_CLASSIFICATION	1.364519402115295E-5	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.999969424850167	WITHOUT_CLASSIFICATION	3.0575149832907675E-5	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999884188720651	WITHOUT_CLASSIFICATION	1.1581127934898106E-5	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999969866956017	WITHOUT_CLASSIFICATION	3.0133043983676213E-6	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999163212174169	WITHOUT_CLASSIFICATION	8.367878258307253E-5	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9996401450507504	WITHOUT_CLASSIFICATION	3.598549492496471E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999708762983271	WITHOUT_CLASSIFICATION	2.912370167279725E-5	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999970161332054	WITHOUT_CLASSIFICATION	2.983866794547374E-6	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999564908373463	WITHOUT_CLASSIFICATION	4.3509162653730186E-5	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999056029861337	WITHOUT_CLASSIFICATION	9.439701386621282E-5	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999875582562724	WITHOUT_CLASSIFICATION	1.2441743727670976E-5	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9999944927776848	WITHOUT_CLASSIFICATION	5.50722231521442E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9998488831099702	WITHOUT_CLASSIFICATION	1.5111689002981663E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9998488831099702	WITHOUT_CLASSIFICATION	1.5111689002981663E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9998615696400741	WITHOUT_CLASSIFICATION	1.3843035992588387E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9998615696400741	WITHOUT_CLASSIFICATION	1.3843035992588387E-4	DEFECT
dup	WITHOUT_CLASSIFICATION	0.998792659170253	WITHOUT_CLASSIFICATION	0.0012073408297470383	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999064608700563	WITHOUT_CLASSIFICATION	9.353912994366611E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999708762983271	WITHOUT_CLASSIFICATION	2.912370167279725E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999059941983	WITHOUT_CLASSIFICATION	9.400580175085168E-8	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999901511746667	WITHOUT_CLASSIFICATION	9.848825333287607E-6	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999961479703353	WITHOUT_CLASSIFICATION	3.852029664672328E-6	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999847213328283	WITHOUT_CLASSIFICATION	1.5278667171764885E-5	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999646321814557	WITHOUT_CLASSIFICATION	3.5367818544284574E-5	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999978732801638	WITHOUT_CLASSIFICATION	2.1267198361532493E-6	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9996248902602378	WITHOUT_CLASSIFICATION	3.7510973976229536E-4	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9997462318525329	WITHOUT_CLASSIFICATION	2.537681474671193E-4	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.999662374431144	WITHOUT_CLASSIFICATION	3.3762556885591683E-4	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999997174501735	WITHOUT_CLASSIFICATION	2.825498265490888E-7	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999857865873832	WITHOUT_CLASSIFICATION	1.4213412616843226E-5	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999857865873832	WITHOUT_CLASSIFICATION	1.4213412616843226E-5	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999985706050556	WITHOUT_CLASSIFICATION	1.4293949444713494E-6	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.999991181799335	WITHOUT_CLASSIFICATION	8.818200665001445E-6	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999981411611125	WITHOUT_CLASSIFICATION	1.8588388875322325E-6	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998450225550546	WITHOUT_CLASSIFICATION	1.549774449453035E-4	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999987612728365	WITHOUT_CLASSIFICATION	1.2387271635106898E-6	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999705507870599	WITHOUT_CLASSIFICATION	2.9449212940066877E-5	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999753065479764	WITHOUT_CLASSIFICATION	2.4693452023558272E-5	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992524142428	WITHOUT_CLASSIFICATION	7.475857572244745E-7	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9995118431862273	WITHOUT_CLASSIFICATION	4.881568137727866E-4	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999883548963875	WITHOUT_CLASSIFICATION	1.164510361263162E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999883548963875	WITHOUT_CLASSIFICATION	1.164510361263162E-5	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9999973916110213	WITHOUT_CLASSIFICATION	2.6083889787006656E-6	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999868870351153	WITHOUT_CLASSIFICATION	1.3112964884603634E-5	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.999991797737175	WITHOUT_CLASSIFICATION	8.202262825090832E-6	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.999999272590323	WITHOUT_CLASSIFICATION	7.274096770405411E-7	DEFECT
int	WITHOUT_CLASSIFICATION	0.9995975363367078	WITHOUT_CLASSIFICATION	4.0246366329226154E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9998615696400741	WITHOUT_CLASSIFICATION	1.3843035992588387E-4	DEFECT
dup	WITHOUT_CLASSIFICATION	0.998792659170253	WITHOUT_CLASSIFICATION	0.0012073408297470383	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.999972093690032	WITHOUT_CLASSIFICATION	2.790630996795395E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999708762983271	WITHOUT_CLASSIFICATION	2.912370167279725E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999708762983271	WITHOUT_CLASSIFICATION	2.912370167279725E-5	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999991788032351	WITHOUT_CLASSIFICATION	8.211967649446394E-7	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999991788032351	WITHOUT_CLASSIFICATION	8.211967649446394E-7	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999968432583733	WITHOUT_CLASSIFICATION	3.156741626696122E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9998197155783615	WITHOUT_CLASSIFICATION	1.8028442163856972E-4	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9998197155783615	WITHOUT_CLASSIFICATION	1.8028442163856972E-4	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999134386682632	WITHOUT_CLASSIFICATION	8.656133173671831E-5	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.999961719253099	WITHOUT_CLASSIFICATION	3.828074690110577E-5	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999878094359137	WITHOUT_CLASSIFICATION	1.219056408621351E-5	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999601422809857	WITHOUT_CLASSIFICATION	3.985771901434168E-5	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.999991429745994	WITHOUT_CLASSIFICATION	8.570254006065909E-6	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999147939946006	WITHOUT_CLASSIFICATION	8.520600539934904E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999147939946006	WITHOUT_CLASSIFICATION	8.520600539934904E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999196013211216	WITHOUT_CLASSIFICATION	8.039867887834387E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999242077840877	WITHOUT_CLASSIFICATION	7.579221591221136E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999317659660918	WITHOUT_CLASSIFICATION	6.823403390821064E-5	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9996946007485027	WITHOUT_CLASSIFICATION	3.0539925149732316E-4	DEFECT
char	WITHOUT_CLASSIFICATION	0.9998780049777293	WITHOUT_CLASSIFICATION	1.219950222707381E-4	DEFECT
short	WITHOUT_CLASSIFICATION	0.9998561988911272	WITHOUT_CLASSIFICATION	1.4380110887280686E-4	DEFECT
double	WITHOUT_CLASSIFICATION	0.9993626280117046	WITHOUT_CLASSIFICATION	6.3737198829542E-4	DEFECT
float	WITHOUT_CLASSIFICATION	0.9997393165256424	WITHOUT_CLASSIFICATION	2.606834743575319E-4	DEFECT
float	WITHOUT_CLASSIFICATION	0.9997393165256424	WITHOUT_CLASSIFICATION	2.606834743575319E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.9977181859275124	WITHOUT_CLASSIFICATION	0.002281814072487529	DEFECT
long	WITHOUT_CLASSIFICATION	0.9977181859275124	WITHOUT_CLASSIFICATION	0.002281814072487529	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999819170467891	WITHOUT_CLASSIFICATION	1.8082953210964974E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999819170467891	WITHOUT_CLASSIFICATION	1.8082953210964974E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999997914155231	WITHOUT_CLASSIFICATION	2.0858447690387836E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999997914155231	WITHOUT_CLASSIFICATION	2.0858447690387836E-6	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999147939946006	WITHOUT_CLASSIFICATION	8.520600539934904E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9993626280117046	WITHOUT_CLASSIFICATION	6.3737198829542E-4	DEFECT
float	WITHOUT_CLASSIFICATION	0.9997393165256424	WITHOUT_CLASSIFICATION	2.606834743575319E-4	DEFECT
float	WITHOUT_CLASSIFICATION	0.9997393165256424	WITHOUT_CLASSIFICATION	2.606834743575319E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.9977181859275124	WITHOUT_CLASSIFICATION	0.002281814072487529	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999819170467891	WITHOUT_CLASSIFICATION	1.8082953210964974E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999819170467891	WITHOUT_CLASSIFICATION	1.8082953210964974E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999997914155231	WITHOUT_CLASSIFICATION	2.0858447690387836E-6	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999932876172895	WITHOUT_CLASSIFICATION	6.712382710499287E-6	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999838317540982	WITHOUT_CLASSIFICATION	1.6168245901795774E-5	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.99990803578997	WITHOUT_CLASSIFICATION	9.196421003001527E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999984620276562	WITHOUT_CLASSIFICATION	1.5379723437964495E-5	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999879112685104	WITHOUT_CLASSIFICATION	1.2088731489489703E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999220470342801	WITHOUT_CLASSIFICATION	7.795296571990387E-4	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9983520977010609	WITHOUT_CLASSIFICATION	0.0016479022989391195	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9982185858624514	WITHOUT_CLASSIFICATION	0.0017814141375485828	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9994122918138676	WITHOUT_CLASSIFICATION	5.877081861324615E-4	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999846888778964	WITHOUT_CLASSIFICATION	1.5311122103652547E-5	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999981663239963	WITHOUT_CLASSIFICATION	1.8336760036701195E-6	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997476777014	WITHOUT_CLASSIFICATION	2.523222985820647E-7	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999925543284398	WITHOUT_CLASSIFICATION	7.445671560205226E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999220470342801	WITHOUT_CLASSIFICATION	7.795296571990387E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999220470342801	WITHOUT_CLASSIFICATION	7.795296571990387E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999220470342801	WITHOUT_CLASSIFICATION	7.795296571990387E-4	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999940293278639	WITHOUT_CLASSIFICATION	5.970672136179187E-6	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999919420229325	WITHOUT_CLASSIFICATION	8.05797706750359E-6	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999919420229325	WITHOUT_CLASSIFICATION	8.05797706750359E-6	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999085381212046	WITHOUT_CLASSIFICATION	9.146187879532656E-5	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999989901347076	WITHOUT_CLASSIFICATION	1.0098652923980995E-6	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999983904213714	WITHOUT_CLASSIFICATION	1.6095786285952797E-6	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999035073605897	WITHOUT_CLASSIFICATION	9.649263941018985E-5	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999035073605897	WITHOUT_CLASSIFICATION	9.649263941018985E-5	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999357449304281	WITHOUT_CLASSIFICATION	6.425506957183046E-5	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9988024588340473	WITHOUT_CLASSIFICATION	0.0011975411659527653	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9988024588340473	WITHOUT_CLASSIFICATION	0.0011975411659527653	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999990738222042	WITHOUT_CLASSIFICATION	9.261777957970923E-6	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999915505223244	WITHOUT_CLASSIFICATION	8.449477675596977E-6	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.99998970308542	WITHOUT_CLASSIFICATION	1.0296914580076495E-5	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9962846999472158	WITHOUT_CLASSIFICATION	0.003715300052784229	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9992526906286197	WITHOUT_CLASSIFICATION	7.473093713804415E-4	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.999344007069485	WITHOUT_CLASSIFICATION	6.559929305149559E-4	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9998290721841591	WITHOUT_CLASSIFICATION	1.709278158408881E-4	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9977513448775118	WITHOUT_CLASSIFICATION	0.002248655122488086	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.7663027286070009	DEFECT	0.23369727139299906	WITHOUT_CLASSIFICATION
ID	WITHOUT_CLASSIFICATION	0.9977827205702583	WITHOUT_CLASSIFICATION	0.002217279429741634	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9985645933926721	WITHOUT_CLASSIFICATION	0.0014354066073279082	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.994795053365308	WITHOUT_CLASSIFICATION	0.005204946634691965	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999967307304299	WITHOUT_CLASSIFICATION	3.269269570139505E-6	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999752564484639	WITHOUT_CLASSIFICATION	2.4743551536132693E-5	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9995582647438772	WITHOUT_CLASSIFICATION	4.4173525612283454E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.994795053365308	WITHOUT_CLASSIFICATION	0.005204946634691965	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999991983841853	WITHOUT_CLASSIFICATION	8.016158147916317E-7	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999953602138251	WITHOUT_CLASSIFICATION	4.639786174882235E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9995178357928491	WITHOUT_CLASSIFICATION	4.821642071508868E-4	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9954265214809681	WITHOUT_CLASSIFICATION	0.004573478519031934	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9998796144832025	WITHOUT_CLASSIFICATION	1.2038551679757492E-4	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999860974726472	WITHOUT_CLASSIFICATION	1.3902527352807294E-4	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9994067286184147	WITHOUT_CLASSIFICATION	5.932713815852975E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9991747286932174	WITHOUT_CLASSIFICATION	8.252713067825802E-4	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997606400148048	WITHOUT_CLASSIFICATION	2.3935998519511413E-4	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999911557912332	WITHOUT_CLASSIFICATION	8.844208766825291E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.999862404097812	WITHOUT_CLASSIFICATION	1.3759590218800045E-4	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.999991524478613	WITHOUT_CLASSIFICATION	8.475521387033902E-6	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9986309410846617	WITHOUT_CLASSIFICATION	0.0013690589153382935	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9998290721841591	WITHOUT_CLASSIFICATION	1.709278158408881E-4	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997606400148048	WITHOUT_CLASSIFICATION	2.3935998519511413E-4	DEFECT
properties	WITHOUT_CLASSIFICATION	0.999862404097812	WITHOUT_CLASSIFICATION	1.3759590218800045E-4	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9986309410846617	WITHOUT_CLASSIFICATION	0.0013690589153382935	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999940043138164	WITHOUT_CLASSIFICATION	5.995686183748236E-6	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9984550408313524	WITHOUT_CLASSIFICATION	0.0015449591686476918	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999968387200984	WITHOUT_CLASSIFICATION	3.1612799017351843E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.998651018722701	WITHOUT_CLASSIFICATION	0.001348981277299028	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9997183625537189	WITHOUT_CLASSIFICATION	2.816374462810711E-4	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9997923964701563	WITHOUT_CLASSIFICATION	2.0760352984376345E-4	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.999903994615708	WITHOUT_CLASSIFICATION	9.600538429206762E-5	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999575097444461	WITHOUT_CLASSIFICATION	4.2490255553955806E-5	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999484900079566	WITHOUT_CLASSIFICATION	5.150999204335168E-5	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999994018357661	WITHOUT_CLASSIFICATION	5.981642338909975E-7	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999954149875571	WITHOUT_CLASSIFICATION	4.5850124429569035E-6	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999973522882266	WITHOUT_CLASSIFICATION	2.6477117734118582E-6	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999934188048468	WITHOUT_CLASSIFICATION	6.581195153233949E-6	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999943196695579	WITHOUT_CLASSIFICATION	5.680330442192163E-6	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9987117790346473	WITHOUT_CLASSIFICATION	0.0012882209653527616	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998347047123818	WITHOUT_CLASSIFICATION	1.6529528761829724E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9989356158084932	WITHOUT_CLASSIFICATION	0.0010643841915067753	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999988751492853	WITHOUT_CLASSIFICATION	1.124850714659966E-6	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.9982624065647194	WITHOUT_CLASSIFICATION	0.0017375934352806652	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997606400148048	WITHOUT_CLASSIFICATION	2.3935998519511413E-4	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999980353128034	WITHOUT_CLASSIFICATION	1.9646871965418573E-6	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999985860568844	WITHOUT_CLASSIFICATION	1.4139431155810368E-6	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.999983932057327	WITHOUT_CLASSIFICATION	1.6067942672965668E-5	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999945491185727	WITHOUT_CLASSIFICATION	5.4508814273651765E-6	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9999987753453223	WITHOUT_CLASSIFICATION	1.224654677616014E-6	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9992374059403729	WITHOUT_CLASSIFICATION	7.625940596270887E-4	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999975057983111	WITHOUT_CLASSIFICATION	2.4942016888392643E-6	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999994435074593	WITHOUT_CLASSIFICATION	5.564925406843621E-7	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9998564426837594	WITHOUT_CLASSIFICATION	1.435573162405284E-4	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.997530479623628	WITHOUT_CLASSIFICATION	0.0024695203763719204	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999669024844158	WITHOUT_CLASSIFICATION	3.309751558419438E-4	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997204409586092	WITHOUT_CLASSIFICATION	2.795590413907802E-4	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9998773297959642	WITHOUT_CLASSIFICATION	1.2267020403579362E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998894734471	WITHOUT_CLASSIFICATION	1.105265529446376E-7	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999909837983509	WITHOUT_CLASSIFICATION	9.016201649076885E-6	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999679459985377	WITHOUT_CLASSIFICATION	3.205400146230495E-5	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.999806487466138	WITHOUT_CLASSIFICATION	1.9351253386202212E-4	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999636240486292	WITHOUT_CLASSIFICATION	3.637595137085415E-5	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999833384974939	WITHOUT_CLASSIFICATION	1.666150250622178E-5	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999966536111294	WITHOUT_CLASSIFICATION	3.346388870617927E-6	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999903342875	WITHOUT_CLASSIFICATION	9.665712414167546E-9	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999888526723034	WITHOUT_CLASSIFICATION	1.1147327696587917E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999984235870676	WITHOUT_CLASSIFICATION	1.5764129325327274E-6	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999820722868387	WITHOUT_CLASSIFICATION	1.792771316134401E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999936906438937	WITHOUT_CLASSIFICATION	6.309356106306957E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999936906438937	WITHOUT_CLASSIFICATION	6.309356106306957E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999758541876911	WITHOUT_CLASSIFICATION	2.41458123089629E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999938264324085	WITHOUT_CLASSIFICATION	6.1735675914990095E-6	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999931712540308	WITHOUT_CLASSIFICATION	6.828745969295023E-6	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.999941168404912	WITHOUT_CLASSIFICATION	5.883159508800523E-5	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999518435070517	WITHOUT_CLASSIFICATION	4.815649294837093E-5	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9998844583523078	WITHOUT_CLASSIFICATION	1.1554164769220756E-4	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999878930470795	WITHOUT_CLASSIFICATION	1.2106952920500831E-4	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999952094074179	WITHOUT_CLASSIFICATION	4.790592582028496E-6	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999487861329522	WITHOUT_CLASSIFICATION	5.1213867047743565E-5	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999404143729401	WITHOUT_CLASSIFICATION	5.958562705992726E-5	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999572333057272	WITHOUT_CLASSIFICATION	4.276669427278302E-5	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999923521941501	WITHOUT_CLASSIFICATION	7.647805849915069E-6	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999680158480573	WITHOUT_CLASSIFICATION	3.198415194271986E-5	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999344541875854	WITHOUT_CLASSIFICATION	6.554581241458113E-5	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999761907574223	WITHOUT_CLASSIFICATION	2.3809242577816766E-5	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999764729147913	WITHOUT_CLASSIFICATION	2.3527085208657303E-5	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9997939578224236	WITHOUT_CLASSIFICATION	2.0604217757644574E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999829351776586	WITHOUT_CLASSIFICATION	1.7064822341431568E-5	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999962217965767	WITHOUT_CLASSIFICATION	3.778203423296133E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999809492352079	WITHOUT_CLASSIFICATION	1.905076479215524E-5	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999539580586904	WITHOUT_CLASSIFICATION	4.6041941309695665E-5	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.99999830458711	WITHOUT_CLASSIFICATION	1.6954128899344238E-6	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999939831468067	WITHOUT_CLASSIFICATION	6.01685319324319E-6	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9998362236383386	WITHOUT_CLASSIFICATION	1.6377636166137348E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999797784238584	WITHOUT_CLASSIFICATION	2.0221576141533602E-5	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999962773682148	WITHOUT_CLASSIFICATION	3.722631785112275E-6	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999968677666382	WITHOUT_CLASSIFICATION	3.132233361738304E-6	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999743441917528	WITHOUT_CLASSIFICATION	2.565580824715722E-5	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999979933254863	WITHOUT_CLASSIFICATION	2.006674513553142E-6	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9994983675624137	WITHOUT_CLASSIFICATION	5.016324375862194E-4	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999809492352079	WITHOUT_CLASSIFICATION	1.905076479215524E-5	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999944551631239	WITHOUT_CLASSIFICATION	5.544836876012398E-6	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999922116372026	WITHOUT_CLASSIFICATION	7.788362797343734E-6	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999990913167177	WITHOUT_CLASSIFICATION	9.086832822908512E-6	DEFECT
found	WITHOUT_CLASSIFICATION	0.9987267219123956	WITHOUT_CLASSIFICATION	0.0012732780876044249	DEFECT
found	WITHOUT_CLASSIFICATION	0.9987267219123956	WITHOUT_CLASSIFICATION	0.0012732780876044249	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999979436551839	WITHOUT_CLASSIFICATION	2.0563448161066724E-6	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999973174826936	WITHOUT_CLASSIFICATION	2.682517306369428E-6	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9998551535625387	WITHOUT_CLASSIFICATION	1.448464374613518E-4	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9998551535625387	WITHOUT_CLASSIFICATION	1.448464374613518E-4	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999984235870676	WITHOUT_CLASSIFICATION	1.5764129325327274E-6	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999980824422116	WITHOUT_CLASSIFICATION	1.917557788432982E-6	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999692528788726	WITHOUT_CLASSIFICATION	3.07471211272773E-5	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999995018614918	WITHOUT_CLASSIFICATION	4.981385082571881E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999420906978488	WITHOUT_CLASSIFICATION	5.79093021512201E-5	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999692528788726	WITHOUT_CLASSIFICATION	3.07471211272773E-5	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999995018614918	WITHOUT_CLASSIFICATION	4.981385082571881E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999999553577246	WITHOUT_CLASSIFICATION	4.464227539925332E-7	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999921121136591	WITHOUT_CLASSIFICATION	7.887886340805361E-6	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9998723308324783	WITHOUT_CLASSIFICATION	1.2766916752171066E-4	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999714031128494	WITHOUT_CLASSIFICATION	2.8596887150651276E-5	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998937504665262	WITHOUT_CLASSIFICATION	1.062495334739137E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.99985874648687	WITHOUT_CLASSIFICATION	1.4125351313001744E-4	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999930088918358	WITHOUT_CLASSIFICATION	6.991108164106111E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999930088918358	WITHOUT_CLASSIFICATION	6.991108164106111E-6	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9996691232757826	WITHOUT_CLASSIFICATION	3.3087672421742016E-4	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999935740176881	WITHOUT_CLASSIFICATION	6.4259823118756295E-6	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9998276419160254	WITHOUT_CLASSIFICATION	1.7235808397469285E-4	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999982373428751	WITHOUT_CLASSIFICATION	1.7626571248515673E-6	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999974831216776	WITHOUT_CLASSIFICATION	2.5168783224776642E-6	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999971780699493	WITHOUT_CLASSIFICATION	2.8219300506287237E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999420906978488	WITHOUT_CLASSIFICATION	5.79093021512201E-5	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999971413445709	WITHOUT_CLASSIFICATION	2.858655429166874E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999886580253037	WITHOUT_CLASSIFICATION	1.1341974696276746E-5	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999886580253037	WITHOUT_CLASSIFICATION	1.1341974696276746E-5	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999589916100483	WITHOUT_CLASSIFICATION	4.100838995171239E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999999553577246	WITHOUT_CLASSIFICATION	4.464227539925332E-7	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999022523714562	WITHOUT_CLASSIFICATION	9.77476285437039E-5	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999912890674414	WITHOUT_CLASSIFICATION	8.710932558597304E-5	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999915716635694	WITHOUT_CLASSIFICATION	8.428336430498685E-6	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998137224095685	WITHOUT_CLASSIFICATION	1.8627759043154764E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9980305607968011	WITHOUT_CLASSIFICATION	0.0019694392031989446	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999999553577246	WITHOUT_CLASSIFICATION	4.464227539925332E-7	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998137224095685	WITHOUT_CLASSIFICATION	1.8627759043154764E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9980305607968011	WITHOUT_CLASSIFICATION	0.0019694392031989446	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999990422205262	WITHOUT_CLASSIFICATION	9.577794737886107E-7	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999321960770537	WITHOUT_CLASSIFICATION	6.780392294626599E-5	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999792357478517	WITHOUT_CLASSIFICATION	2.0764252148333947E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999999553577246	WITHOUT_CLASSIFICATION	4.464227539925332E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999999553577246	WITHOUT_CLASSIFICATION	4.464227539925332E-7	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999693558113069	WITHOUT_CLASSIFICATION	3.064418869315582E-5	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.999970824020992	WITHOUT_CLASSIFICATION	2.9175979007961648E-5	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999315905639853	WITHOUT_CLASSIFICATION	6.840943601477698E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999952421678886	WITHOUT_CLASSIFICATION	4.757832111301498E-6	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.999994883037727	WITHOUT_CLASSIFICATION	5.116962272999131E-6	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999977163545151	WITHOUT_CLASSIFICATION	2.2836454849254956E-6	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999913455612509	WITHOUT_CLASSIFICATION	8.654438749142671E-6	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999979473379057	WITHOUT_CLASSIFICATION	2.0526620943495046E-6	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999135577668534	WITHOUT_CLASSIFICATION	8.644223314660498E-5	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9996719096231595	WITHOUT_CLASSIFICATION	3.2809037684050163E-4	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999336343127325	WITHOUT_CLASSIFICATION	6.636568726746525E-5	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9997481064491955	WITHOUT_CLASSIFICATION	2.518935508044792E-4	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999977092860766	WITHOUT_CLASSIFICATION	2.290713923434695E-6	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999889895128031	WITHOUT_CLASSIFICATION	1.1010487196839605E-5	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568591012852	WITHOUT_CLASSIFICATION	2.4314089871490326E-4	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999235867815199	WITHOUT_CLASSIFICATION	7.641321847997043E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999952421678886	WITHOUT_CLASSIFICATION	4.757832111301498E-6	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999783054991456	WITHOUT_CLASSIFICATION	2.1694500854438665E-5	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999947399389791	WITHOUT_CLASSIFICATION	5.2600610208610635E-6	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999996549918597	WITHOUT_CLASSIFICATION	3.4500814037360884E-7	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998786240998077	WITHOUT_CLASSIFICATION	1.2137590019233628E-4	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998856233559669	WITHOUT_CLASSIFICATION	1.1437664403314436E-4	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998856233559669	WITHOUT_CLASSIFICATION	1.1437664403314436E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999952421678886	WITHOUT_CLASSIFICATION	4.757832111301498E-6	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999053128135291	WITHOUT_CLASSIFICATION	9.468718647087686E-5	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999946537986754	WITHOUT_CLASSIFICATION	5.346201324665175E-6	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998872989388367	WITHOUT_CLASSIFICATION	1.1270106116337542E-4	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.999951409027413	WITHOUT_CLASSIFICATION	4.859097258701756E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9995550602115578	WITHOUT_CLASSIFICATION	4.449397884422113E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999912604122734	WITHOUT_CLASSIFICATION	8.739587726545241E-6	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9981440156530879	WITHOUT_CLASSIFICATION	0.0018559843469121236	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999996475780686	WITHOUT_CLASSIFICATION	3.524219314354341E-7	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999994263011968	WITHOUT_CLASSIFICATION	5.736988032846583E-7	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999916976682082	WITHOUT_CLASSIFICATION	8.30233179180513E-6	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999334251616165	WITHOUT_CLASSIFICATION	6.657483838353354E-5	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999975112947341	WITHOUT_CLASSIFICATION	2.4887052658981932E-5	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9995674986673416	WITHOUT_CLASSIFICATION	4.32501332658339E-4	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999994478256393	WITHOUT_CLASSIFICATION	5.521743607566532E-7	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999549162612363	WITHOUT_CLASSIFICATION	4.5083738763632776E-5	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999923405535014	WITHOUT_CLASSIFICATION	7.659446498530725E-6	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999948592535726	WITHOUT_CLASSIFICATION	5.140746427402032E-5	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.999997105079608	WITHOUT_CLASSIFICATION	2.894920391863812E-6	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848164828345	WITHOUT_CLASSIFICATION	1.5183517165482968E-5	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999985732669288	WITHOUT_CLASSIFICATION	1.4267330712130316E-6	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999996042891349	WITHOUT_CLASSIFICATION	3.957108650502126E-7	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999949104009381	WITHOUT_CLASSIFICATION	5.0895990618600334E-6	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999430355651553	WITHOUT_CLASSIFICATION	5.696443484470205E-5	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731376601843	WITHOUT_CLASSIFICATION	2.6862339815733696E-5	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996086146307148	WITHOUT_CLASSIFICATION	3.913853692851697E-4	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999025239483953	WITHOUT_CLASSIFICATION	9.747605160471861E-5	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999349239406276	WITHOUT_CLASSIFICATION	6.507605937240749E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998824404305056	WITHOUT_CLASSIFICATION	1.1755956949437171E-4	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995371155233753	WITHOUT_CLASSIFICATION	4.6288447662479914E-4	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999548025675844	WITHOUT_CLASSIFICATION	4.5197432415632334E-5	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999848107630089	WITHOUT_CLASSIFICATION	1.5189236991171023E-5	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999712420368707	WITHOUT_CLASSIFICATION	2.8757963129181974E-5	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999446860501161	WITHOUT_CLASSIFICATION	5.531394988385076E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999836354773152	WITHOUT_CLASSIFICATION	1.6364522684826825E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868307001009	WITHOUT_CLASSIFICATION	1.3169299899103181E-5	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999403188263358	WITHOUT_CLASSIFICATION	5.9681173664128806E-5	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204255501909	WITHOUT_CLASSIFICATION	7.957444980918202E-5	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999237004683	WITHOUT_CLASSIFICATION	7.62995317009828E-6	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998714260432046	WITHOUT_CLASSIFICATION	1.285739567954282E-4	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994442536535392	WITHOUT_CLASSIFICATION	5.557463464609121E-4	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9994356677210268	WITHOUT_CLASSIFICATION	5.643322789733008E-4	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998903768526395	WITHOUT_CLASSIFICATION	1.096231473605628E-4	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9977928259715717	WITHOUT_CLASSIFICATION	0.002207174028428403	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998743041610445	WITHOUT_CLASSIFICATION	1.256958389554699E-4	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999912277081527	WITHOUT_CLASSIFICATION	8.772291847319594E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999987864874914	WITHOUT_CLASSIFICATION	1.2135125086001244E-5	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9999216416415686	WITHOUT_CLASSIFICATION	7.83583584314839E-5	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999729488599086	WITHOUT_CLASSIFICATION	2.7051140091450114E-5	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999703675865903	WITHOUT_CLASSIFICATION	2.963241340968004E-5	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998911158393444	WITHOUT_CLASSIFICATION	1.0888416065561001E-4	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9990451418359185	WITHOUT_CLASSIFICATION	9.548581640813885E-4	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9990997593565083	WITHOUT_CLASSIFICATION	9.002406434917235E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9992544196474044	WITHOUT_CLASSIFICATION	7.455803525955757E-4	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9998614675821348	WITHOUT_CLASSIFICATION	1.3853241786527254E-4	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999985746995322	WITHOUT_CLASSIFICATION	1.4253004677181838E-6	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999905970958234	WITHOUT_CLASSIFICATION	9.402904176702217E-6	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9988346354062468	WITHOUT_CLASSIFICATION	0.0011653645937530874	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9997027571357134	WITHOUT_CLASSIFICATION	2.972428642866625E-4	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999452334777748	WITHOUT_CLASSIFICATION	5.476652222521552E-5	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999394251530158	WITHOUT_CLASSIFICATION	6.057484698408849E-5	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997970278986071	WITHOUT_CLASSIFICATION	2.0297210139276828E-4	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999535439721446	WITHOUT_CLASSIFICATION	4.6456027855433065E-5	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997806975998679	WITHOUT_CLASSIFICATION	2.1930240013210008E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9999051607815461	WITHOUT_CLASSIFICATION	9.483921845382983E-5	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999968761378674	WITHOUT_CLASSIFICATION	3.123862132769935E-6	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999976250929481	WITHOUT_CLASSIFICATION	2.374907051916829E-6	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999856416871614	WITHOUT_CLASSIFICATION	1.4358312838489192E-5	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987412395328	WITHOUT_CLASSIFICATION	1.2587604671509815E-6	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999965644686603	WITHOUT_CLASSIFICATION	3.4355313396664157E-6	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999678717935397	WITHOUT_CLASSIFICATION	3.212820646023685E-5	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999948556877877	WITHOUT_CLASSIFICATION	5.144312212403688E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999944537809589	WITHOUT_CLASSIFICATION	5.546219041141986E-6	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999951662465542	WITHOUT_CLASSIFICATION	4.8337534457683036E-6	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999962145151116	WITHOUT_CLASSIFICATION	3.785484888550546E-6	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999340251970071	WITHOUT_CLASSIFICATION	6.597480299288966E-5	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999902540943387	WITHOUT_CLASSIFICATION	9.745905661315615E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999987864874914	WITHOUT_CLASSIFICATION	1.2135125086001244E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999980389026345	WITHOUT_CLASSIFICATION	1.9610973655326146E-6	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999812782633078	WITHOUT_CLASSIFICATION	1.872173669216931E-5	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999757195848654	WITHOUT_CLASSIFICATION	2.428041513450287E-5	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997987543619984	WITHOUT_CLASSIFICATION	2.0124563800159048E-4	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999899612528867	WITHOUT_CLASSIFICATION	1.0038747113171745E-5	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.999983230352365	WITHOUT_CLASSIFICATION	1.6769647634993693E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9999051607815461	WITHOUT_CLASSIFICATION	9.483921845382983E-5	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999841942649265	WITHOUT_CLASSIFICATION	1.580573507353663E-5	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999824887789738	WITHOUT_CLASSIFICATION	1.751122102619329E-5	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999837554389632	WITHOUT_CLASSIFICATION	1.6244561036748416E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999917936810521	WITHOUT_CLASSIFICATION	8.206318947951579E-6	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999923916099452	WITHOUT_CLASSIFICATION	7.608390054690116E-6	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996549707666	WITHOUT_CLASSIFICATION	3.4502923337524866E-7	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999890340014748	WITHOUT_CLASSIFICATION	1.0965998525302335E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999976214630862	WITHOUT_CLASSIFICATION	2.378536913807509E-6	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999986019039045	WITHOUT_CLASSIFICATION	1.3980960954929718E-5	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999919890042526	WITHOUT_CLASSIFICATION	8.010995747363702E-6	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999986739113452	WITHOUT_CLASSIFICATION	1.3260886548465756E-6	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999356311487403	WITHOUT_CLASSIFICATION	6.436885125969533E-5	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999987309577514	WITHOUT_CLASSIFICATION	1.2690422486118288E-6	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.999970549168462	WITHOUT_CLASSIFICATION	2.9450831537945425E-5	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999997209171195	WITHOUT_CLASSIFICATION	2.7908288049314385E-7	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999861528959203	WITHOUT_CLASSIFICATION	1.3847104079701614E-4	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999946051868073	WITHOUT_CLASSIFICATION	5.394813192672774E-6	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999964587098462	WITHOUT_CLASSIFICATION	3.5412901538373755E-6	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999979855520919	WITHOUT_CLASSIFICATION	2.0144479080775047E-6	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998503595975818	WITHOUT_CLASSIFICATION	1.4964040241813054E-4	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999000700001541	WITHOUT_CLASSIFICATION	9.992999984585394E-5	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999980782291669	WITHOUT_CLASSIFICATION	1.9217708331010507E-5	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999894162616396	WITHOUT_CLASSIFICATION	1.0583738360457888E-5	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9996437602796735	WITHOUT_CLASSIFICATION	3.562397203263982E-4	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999735965536164	WITHOUT_CLASSIFICATION	2.6403446383554758E-5	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999863962104016	WITHOUT_CLASSIFICATION	1.3603789598355777E-5	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999319395292282	WITHOUT_CLASSIFICATION	6.806047077173953E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999987864874914	WITHOUT_CLASSIFICATION	1.2135125086001244E-5	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999030542903574	WITHOUT_CLASSIFICATION	9.694570964250826E-5	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999533054241	WITHOUT_CLASSIFICATION	4.6694575830490026E-8	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997386765680445	WITHOUT_CLASSIFICATION	2.6132343195552673E-4	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999994773904993	WITHOUT_CLASSIFICATION	5.2260950072634E-7	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999995720170247	WITHOUT_CLASSIFICATION	4.2798297525502546E-7	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999999788556238	WITHOUT_CLASSIFICATION	2.1144376211614008E-7	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999987864874914	WITHOUT_CLASSIFICATION	1.2135125086001244E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999758003480143	WITHOUT_CLASSIFICATION	2.4199651985696758E-5	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999946051868073	WITHOUT_CLASSIFICATION	5.394813192672774E-6	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999928812498119	WITHOUT_CLASSIFICATION	7.118750188182972E-6	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999861528959203	WITHOUT_CLASSIFICATION	1.3847104079701614E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9995670796247267	WITHOUT_CLASSIFICATION	4.329203752733931E-4	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999261004298856	WITHOUT_CLASSIFICATION	7.389957011437225E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.99999142936468	WITHOUT_CLASSIFICATION	8.57063532003186E-6	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999837554389632	WITHOUT_CLASSIFICATION	1.6244561036748416E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999917936810521	WITHOUT_CLASSIFICATION	8.206318947951579E-6	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999923916099452	WITHOUT_CLASSIFICATION	7.608390054690116E-6	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999739665113011	WITHOUT_CLASSIFICATION	2.603348869892804E-5	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.999942674405602	WITHOUT_CLASSIFICATION	5.732559439801823E-5	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999585947528566	WITHOUT_CLASSIFICATION	4.140524714340237E-5	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999861528959203	WITHOUT_CLASSIFICATION	1.3847104079701614E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9995670796247267	WITHOUT_CLASSIFICATION	4.329203752733931E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999987864874914	WITHOUT_CLASSIFICATION	1.2135125086001244E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996549707666	WITHOUT_CLASSIFICATION	3.4502923337524866E-7	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999890340014748	WITHOUT_CLASSIFICATION	1.0965998525302335E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999976214630862	WITHOUT_CLASSIFICATION	2.378536913807509E-6	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877133866046	WITHOUT_CLASSIFICATION	1.228661339524789E-5	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247619843927	WITHOUT_CLASSIFICATION	7.523801560720134E-5	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999745605926217	WITHOUT_CLASSIFICATION	2.543940737833824E-5	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999988915552305	WITHOUT_CLASSIFICATION	1.1084447695912795E-6	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999936454878497	WITHOUT_CLASSIFICATION	6.354512150280478E-6	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999945063610766	WITHOUT_CLASSIFICATION	5.493638923391051E-6	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994442536535392	WITHOUT_CLASSIFICATION	5.557463464609121E-4	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999205764619947	WITHOUT_CLASSIFICATION	7.942353800527991E-5	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999907507863444	WITHOUT_CLASSIFICATION	9.249213655615333E-6	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999865259330996	WITHOUT_CLASSIFICATION	1.3474066900416905E-5	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999724622993076	WITHOUT_CLASSIFICATION	2.753770069238008E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999961794349757	WITHOUT_CLASSIFICATION	3.8205650242695535E-6	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999349239406276	WITHOUT_CLASSIFICATION	6.507605937240749E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998824404305056	WITHOUT_CLASSIFICATION	1.1755956949437171E-4	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999836354773152	WITHOUT_CLASSIFICATION	1.6364522684826825E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999961794349757	WITHOUT_CLASSIFICATION	3.8205650242695535E-6	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999172946317264	WITHOUT_CLASSIFICATION	8.270536827354933E-5	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999844601951234	WITHOUT_CLASSIFICATION	1.5539804876640405E-5	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997007097113857	WITHOUT_CLASSIFICATION	2.9929028861426765E-4	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997204320643642	WITHOUT_CLASSIFICATION	2.795679356357653E-4	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999966146958251	WITHOUT_CLASSIFICATION	3.3853041748456676E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9998710918615935	WITHOUT_CLASSIFICATION	1.289081384064613E-4	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868307001009	WITHOUT_CLASSIFICATION	1.3169299899103181E-5	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999237004683	WITHOUT_CLASSIFICATION	7.62995317009828E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999944537809589	WITHOUT_CLASSIFICATION	5.546219041141986E-6	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999651349750905	WITHOUT_CLASSIFICATION	3.4865024909405416E-5	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999942524612231	WITHOUT_CLASSIFICATION	5.747538776852211E-6	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9998046472010647	WITHOUT_CLASSIFICATION	1.9535279893530825E-4	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999997204031385	WITHOUT_CLASSIFICATION	2.7959686149481067E-6	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999671456846183	WITHOUT_CLASSIFICATION	3.28543153815976E-5	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999994288494165	WITHOUT_CLASSIFICATION	5.71150583541566E-7	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999873740381721	WITHOUT_CLASSIFICATION	1.2625961827981744E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9998456890670574	WITHOUT_CLASSIFICATION	1.5431093294261786E-4	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999994263011968	WITHOUT_CLASSIFICATION	5.736988032846583E-7	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999570370752934	WITHOUT_CLASSIFICATION	4.2962924706604426E-5	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9998988106276724	WITHOUT_CLASSIFICATION	1.0118937232755176E-4	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999813720996484	WITHOUT_CLASSIFICATION	1.862790035162035E-5	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998886476676538	WITHOUT_CLASSIFICATION	1.1135233234613895E-4	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.99999663915342	WITHOUT_CLASSIFICATION	3.3608465799721903E-6	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999197000744585	WITHOUT_CLASSIFICATION	8.029992554151238E-5	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817005074207	WITHOUT_CLASSIFICATION	1.8299492579192294E-5	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903349000944	WITHOUT_CLASSIFICATION	9.665099905711518E-6	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999973883264905	WITHOUT_CLASSIFICATION	2.6116735093554183E-6	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999936253211308	WITHOUT_CLASSIFICATION	6.37467886923831E-6	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999804749726215	WITHOUT_CLASSIFICATION	1.952502737839206E-5	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999648516718185	WITHOUT_CLASSIFICATION	3.514832818142633E-5	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999878841114052	WITHOUT_CLASSIFICATION	1.2115888594754815E-5	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999360356874266	WITHOUT_CLASSIFICATION	6.39643125733882E-5	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999810787603698	WITHOUT_CLASSIFICATION	1.8921239630142735E-5	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999955230637181	WITHOUT_CLASSIFICATION	4.4769362818768435E-6	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999930438264333	WITHOUT_CLASSIFICATION	6.956173566794356E-6	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999740961601759	WITHOUT_CLASSIFICATION	2.590383982409356E-5	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999512236363416	WITHOUT_CLASSIFICATION	4.87763636584168E-5	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999986579081575	WITHOUT_CLASSIFICATION	1.3420918425479597E-6	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786298147326	WITHOUT_CLASSIFICATION	2.1370185267355606E-5	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999786668073101	WITHOUT_CLASSIFICATION	2.133319268987701E-5	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999952354877408	WITHOUT_CLASSIFICATION	4.7645122592540374E-6	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999501884356513	WITHOUT_CLASSIFICATION	4.981156434871178E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.999850918073166	WITHOUT_CLASSIFICATION	1.4908192683401315E-4	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999856295874084	WITHOUT_CLASSIFICATION	1.437041259161696E-5	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999869925209968	WITHOUT_CLASSIFICATION	1.3007479003204937E-5	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999947352011166	WITHOUT_CLASSIFICATION	5.264798883304493E-6	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999807018619454	WITHOUT_CLASSIFICATION	1.9298138054524722E-5	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999560928292995	WITHOUT_CLASSIFICATION	4.390717070045407E-5	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999980685813291	WITHOUT_CLASSIFICATION	1.9314186709904416E-6	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999897819706666	WITHOUT_CLASSIFICATION	1.0218029333401452E-4	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999779442036513	WITHOUT_CLASSIFICATION	2.2055796348702144E-4	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999941741733072	WITHOUT_CLASSIFICATION	5.825826692835271E-6	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999728877731434	WITHOUT_CLASSIFICATION	2.7112226856651073E-5	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999867019335092	WITHOUT_CLASSIFICATION	1.3298066490752305E-5	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999888377571059	WITHOUT_CLASSIFICATION	1.1162242894196429E-5	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999836322929508	WITHOUT_CLASSIFICATION	1.6367707049110572E-5	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999805144702427	WITHOUT_CLASSIFICATION	1.9485529757350418E-5	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999996402693212	WITHOUT_CLASSIFICATION	3.5973067880519425E-6	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999935685198885	WITHOUT_CLASSIFICATION	6.431480111471183E-6	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998822234882143	WITHOUT_CLASSIFICATION	1.1777651178572307E-4	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9998761996235088	WITHOUT_CLASSIFICATION	1.2380037649124408E-4	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999742298134795	WITHOUT_CLASSIFICATION	2.577018652049339E-5	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999368026482018	WITHOUT_CLASSIFICATION	6.319735179812803E-5	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999982201106208	WITHOUT_CLASSIFICATION	1.7798893792323164E-6	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999977332098335	WITHOUT_CLASSIFICATION	2.2667901664076725E-6	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999978127502444	WITHOUT_CLASSIFICATION	2.1872497557515047E-6	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999754101180692	WITHOUT_CLASSIFICATION	2.4589881930837856E-5	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9996415850749016	WITHOUT_CLASSIFICATION	3.584149250983399E-4	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999985762487009	WITHOUT_CLASSIFICATION	1.4237512991796937E-6	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999990900319855	WITHOUT_CLASSIFICATION	9.099680144232956E-7	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999909205684356	WITHOUT_CLASSIFICATION	9.079431564450672E-6	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9995192519029977	WITHOUT_CLASSIFICATION	4.8074809700231165E-4	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9994741914810388	WITHOUT_CLASSIFICATION	5.258085189613438E-4	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9998257146241963	WITHOUT_CLASSIFICATION	1.742853758036811E-4	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999263546653874	WITHOUT_CLASSIFICATION	7.364533461262167E-5	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999894648712819	WITHOUT_CLASSIFICATION	1.0535128718059005E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.999988049625528	WITHOUT_CLASSIFICATION	1.1950374472001662E-5	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999984460549707	WITHOUT_CLASSIFICATION	1.5539450293152426E-6	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999831031947327	WITHOUT_CLASSIFICATION	1.6896805267198828E-5	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999557623716099	WITHOUT_CLASSIFICATION	4.423762839019884E-5	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9999570498517785	WITHOUT_CLASSIFICATION	4.295014822161727E-5	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9990388994371726	WITHOUT_CLASSIFICATION	9.611005628273303E-4	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999944658335022	WITHOUT_CLASSIFICATION	5.534166497872707E-6	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9983917049806394	WITHOUT_CLASSIFICATION	0.001608295019360576	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999436103438769	WITHOUT_CLASSIFICATION	5.638965612312266E-5	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999292358104039	WITHOUT_CLASSIFICATION	7.076418959609652E-5	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999998358361175	WITHOUT_CLASSIFICATION	1.6416388249832194E-6	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999993511010518	WITHOUT_CLASSIFICATION	6.488989482282628E-7	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999939632367064	WITHOUT_CLASSIFICATION	6.036763293527018E-6	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999995761090012	WITHOUT_CLASSIFICATION	4.238909988123336E-6	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999969583872741	WITHOUT_CLASSIFICATION	3.0416127259500636E-6	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999977300854607	WITHOUT_CLASSIFICATION	2.269914539302294E-5	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999921969348152	WITHOUT_CLASSIFICATION	7.803065184821343E-6	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999790457047177	WITHOUT_CLASSIFICATION	2.0954295282239543E-5	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999988749225046	WITHOUT_CLASSIFICATION	1.125077495417723E-6	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999539517460583	WITHOUT_CLASSIFICATION	4.604825394160497E-5	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9996502704931794	WITHOUT_CLASSIFICATION	3.497295068206269E-4	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9998919416034727	WITHOUT_CLASSIFICATION	1.0805839652738017E-4	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999690670075029	WITHOUT_CLASSIFICATION	3.093299249705071E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999967344465921	WITHOUT_CLASSIFICATION	3.265553407833354E-6	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999834130994413	WITHOUT_CLASSIFICATION	1.6586900558709934E-5	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999958415325986	WITHOUT_CLASSIFICATION	4.158467401420462E-6	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.997654235838554	WITHOUT_CLASSIFICATION	0.0023457641614460173	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999980296226322	WITHOUT_CLASSIFICATION	1.9703773677268025E-6	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999851150570693	WITHOUT_CLASSIFICATION	1.4884942930720145E-5	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9999597996789521	WITHOUT_CLASSIFICATION	4.020032104784591E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.999958075956073	WITHOUT_CLASSIFICATION	4.192404392699849E-5	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999926969278591	WITHOUT_CLASSIFICATION	7.303072140939406E-6	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9992643442875649	WITHOUT_CLASSIFICATION	7.356557124350443E-4	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.998425535113222	WITHOUT_CLASSIFICATION	0.0015744648867779835	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999997374098387	WITHOUT_CLASSIFICATION	2.6259016130179753E-6	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9992643442875649	WITHOUT_CLASSIFICATION	7.356557124350443E-4	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999923237756547	WITHOUT_CLASSIFICATION	7.676224345253757E-6	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999922006978662	WITHOUT_CLASSIFICATION	7.799302133731695E-6	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.999919107569612	WITHOUT_CLASSIFICATION	8.089243038799976E-5	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9994923653073323	WITHOUT_CLASSIFICATION	5.076346926677217E-4	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999972200778301	WITHOUT_CLASSIFICATION	2.7799221698956934E-6	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999973026004213	WITHOUT_CLASSIFICATION	2.6973995786888023E-6	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998366977799512	WITHOUT_CLASSIFICATION	1.6330222004878295E-4	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999964012403451	WITHOUT_CLASSIFICATION	3.598759654818144E-6	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999863251265015	WITHOUT_CLASSIFICATION	1.3674873498502982E-5	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998504493956544	WITHOUT_CLASSIFICATION	1.4955060434558825E-4	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999315956744149	WITHOUT_CLASSIFICATION	6.840432558512488E-5	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9995989866229018	WITHOUT_CLASSIFICATION	4.010133770982261E-4	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999965866499715	WITHOUT_CLASSIFICATION	3.4133500285180473E-6	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999990453183567	WITHOUT_CLASSIFICATION	9.546816433671781E-7	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999561028812449	WITHOUT_CLASSIFICATION	4.3897118755008794E-5	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999975359347093	WITHOUT_CLASSIFICATION	2.464065290660996E-6	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999579353771637	WITHOUT_CLASSIFICATION	4.206462283619946E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999579353771637	WITHOUT_CLASSIFICATION	4.206462283619946E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998890472222116	WITHOUT_CLASSIFICATION	1.1095277778839599E-4	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.998896736567287	WITHOUT_CLASSIFICATION	0.001103263432713089	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9995196511848742	WITHOUT_CLASSIFICATION	4.8034881512582157E-4	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9999481617110392	WITHOUT_CLASSIFICATION	5.183828896092796E-5	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999841585162534	WITHOUT_CLASSIFICATION	1.584148374658368E-5	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9859651067460323	WITHOUT_CLASSIFICATION	0.01403489325396769	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9998530956069238	WITHOUT_CLASSIFICATION	1.4690439307618732E-4	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999988729351256	WITHOUT_CLASSIFICATION	1.1270648745161582E-6	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999484012123335	WITHOUT_CLASSIFICATION	5.159878766647057E-5	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9959635195841596	WITHOUT_CLASSIFICATION	0.004036480415840315	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999895112442074	WITHOUT_CLASSIFICATION	1.048875579257953E-5	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999551325407812	WITHOUT_CLASSIFICATION	4.4867459218839505E-5	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999926150986062	WITHOUT_CLASSIFICATION	7.384901393785543E-6	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999962801797935	WITHOUT_CLASSIFICATION	3.7198202064761763E-6	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.99999605147746	WITHOUT_CLASSIFICATION	3.948522540068116E-6	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999197000744585	WITHOUT_CLASSIFICATION	8.029992554151238E-5	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.999984180260668	WITHOUT_CLASSIFICATION	1.581973933197881E-5	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999923242246996	WITHOUT_CLASSIFICATION	7.675775300426335E-6	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9997430704478824	WITHOUT_CLASSIFICATION	2.569295521176676E-4	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999310302452185	WITHOUT_CLASSIFICATION	6.896975478156204E-5	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999976572276552	WITHOUT_CLASSIFICATION	2.3427723447903727E-6	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999840525257637	WITHOUT_CLASSIFICATION	1.5947474236324213E-5	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999760497719571	WITHOUT_CLASSIFICATION	2.395022804293068E-5	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999625739778332	WITHOUT_CLASSIFICATION	3.742602216693361E-5	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999948464493168	WITHOUT_CLASSIFICATION	5.1535506832241936E-6	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999929434005643	WITHOUT_CLASSIFICATION	7.0565994357030595E-6	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999964014190105	WITHOUT_CLASSIFICATION	3.598580989450713E-6	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999646682969088	WITHOUT_CLASSIFICATION	3.533170309121586E-5	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999949970869652	WITHOUT_CLASSIFICATION	5.0029130348936296E-6	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9997544212160523	WITHOUT_CLASSIFICATION	2.4557878394771055E-4	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999948376808037	WITHOUT_CLASSIFICATION	5.1623191963941256E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999821129474704	WITHOUT_CLASSIFICATION	1.7887052529638954E-5	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9992860655122671	WITHOUT_CLASSIFICATION	7.139344877329802E-4	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999450359464426	WITHOUT_CLASSIFICATION	5.496405355738547E-5	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999537662402858	WITHOUT_CLASSIFICATION	4.6233759714237675E-5	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999975337144741	WITHOUT_CLASSIFICATION	2.4662855259925938E-6	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999938889704599	WITHOUT_CLASSIFICATION	6.111029540083531E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999674612681436	WITHOUT_CLASSIFICATION	3.253873185636322E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999929644245857	WITHOUT_CLASSIFICATION	7.0355754141553E-6	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999874752720166	WITHOUT_CLASSIFICATION	1.2524727983403007E-4	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9999782944845794	WITHOUT_CLASSIFICATION	2.1705515420484728E-5	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999793957617353	WITHOUT_CLASSIFICATION	2.0604238264575565E-5	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999858386388217	WITHOUT_CLASSIFICATION	1.4161361178327462E-5	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999668839733477	WITHOUT_CLASSIFICATION	3.3116026652395066E-5	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9997509119911665	WITHOUT_CLASSIFICATION	2.4908800883346826E-4	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999528923559692	WITHOUT_CLASSIFICATION	4.710764403082267E-5	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99980659417044	WITHOUT_CLASSIFICATION	1.9340582955998698E-4	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998609366124602	WITHOUT_CLASSIFICATION	1.3906338753988254E-4	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999530815573783	WITHOUT_CLASSIFICATION	4.6918442621607396E-5	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999860717853576	WITHOUT_CLASSIFICATION	1.3928214642401754E-5	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9996595359483775	WITHOUT_CLASSIFICATION	3.404640516225137E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9998456890670574	WITHOUT_CLASSIFICATION	1.5431093294261786E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9998456890670574	WITHOUT_CLASSIFICATION	1.5431093294261786E-4	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999601023426382	WITHOUT_CLASSIFICATION	3.989765736187346E-5	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.999429038150614	WITHOUT_CLASSIFICATION	5.709618493858828E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9994249188981362	WITHOUT_CLASSIFICATION	5.750811018638135E-4	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992488218451362	WITHOUT_CLASSIFICATION	7.511781548637887E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9994249188981362	WITHOUT_CLASSIFICATION	5.750811018638135E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997071309654896	WITHOUT_CLASSIFICATION	2.928690345104536E-4	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999068900882856	WITHOUT_CLASSIFICATION	9.310991171432327E-5	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.999997390762834	WITHOUT_CLASSIFICATION	2.6092371659268382E-6	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999995613893298	WITHOUT_CLASSIFICATION	4.38610670290698E-7	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999999159989929	WITHOUT_CLASSIFICATION	8.400100708753246E-7	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999988962162298	WITHOUT_CLASSIFICATION	1.1037837701948688E-5	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999993429749361	WITHOUT_CLASSIFICATION	6.5702506390653E-6	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9997460535666168	WITHOUT_CLASSIFICATION	2.539464333830977E-4	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999825219040022	WITHOUT_CLASSIFICATION	1.7478095997861483E-5	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999947658974362	WITHOUT_CLASSIFICATION	5.234102563743126E-6	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9998138510218837	WITHOUT_CLASSIFICATION	1.8614897811638497E-4	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9997831941067266	WITHOUT_CLASSIFICATION	2.1680589327348451E-4	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999977305162825	WITHOUT_CLASSIFICATION	2.269483717537966E-6	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.999828594092806	WITHOUT_CLASSIFICATION	1.7140590719406452E-4	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999987603414245	WITHOUT_CLASSIFICATION	1.2396585753901302E-6	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9997799537600612	WITHOUT_CLASSIFICATION	2.2004623993874617E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999157336396476	WITHOUT_CLASSIFICATION	8.426636035249732E-5	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999157336396476	WITHOUT_CLASSIFICATION	8.426636035249732E-5	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999936586425996	WITHOUT_CLASSIFICATION	6.341357400370616E-6	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999990203819764	WITHOUT_CLASSIFICATION	9.7961802362039E-7	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999666207315535	WITHOUT_CLASSIFICATION	3.337926844644654E-5	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999971640741228	WITHOUT_CLASSIFICATION	2.8359258771634714E-6	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999989749808907	WITHOUT_CLASSIFICATION	1.0250191093092906E-6	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999592809129181	WITHOUT_CLASSIFICATION	4.071908708194765E-5	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9981863293905671	WITHOUT_CLASSIFICATION	0.0018136706094329209	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999844517596599	WITHOUT_CLASSIFICATION	1.5548240340131193E-5	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999661882136922	WITHOUT_CLASSIFICATION	3.381178630773661E-5	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999889870991466	WITHOUT_CLASSIFICATION	1.1012900853294942E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999972281045112	WITHOUT_CLASSIFICATION	2.7718954887495655E-6	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999589343966	WITHOUT_CLASSIFICATION	4.106560336114599E-8	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999983402627735	WITHOUT_CLASSIFICATION	1.6597372265454353E-6	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999418612918185	WITHOUT_CLASSIFICATION	5.8138708181474113E-5	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999985911975456	WITHOUT_CLASSIFICATION	1.4088024544657628E-6	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999936170646524	WITHOUT_CLASSIFICATION	6.38293534760116E-6	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999960343996542	WITHOUT_CLASSIFICATION	3.9656003458347125E-6	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999487963456037	WITHOUT_CLASSIFICATION	5.120365439620338E-5	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999494934093102	WITHOUT_CLASSIFICATION	5.050659068978227E-5	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999989399312255	WITHOUT_CLASSIFICATION	1.0600687745430405E-6	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999940052651973	WITHOUT_CLASSIFICATION	5.9947348027291575E-6	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999604957099724	WITHOUT_CLASSIFICATION	3.950429002763969E-5	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999976188037826	WITHOUT_CLASSIFICATION	2.381196217406736E-6	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999974183595394	WITHOUT_CLASSIFICATION	2.581640460592089E-5	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999987730250375	WITHOUT_CLASSIFICATION	1.2269749625443128E-6	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999622480535676	WITHOUT_CLASSIFICATION	3.775194643246275E-5	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999900400924141	WITHOUT_CLASSIFICATION	9.959907585817536E-6	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999635820658811	WITHOUT_CLASSIFICATION	3.6417934118950255E-5	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.99993336175591	WITHOUT_CLASSIFICATION	6.663824408998466E-5	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998955554955372	WITHOUT_CLASSIFICATION	1.0444450446274642E-4	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999802058558181	WITHOUT_CLASSIFICATION	1.979414418187215E-5	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999652675600751	WITHOUT_CLASSIFICATION	3.473243992496367E-5	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999960203380082	WITHOUT_CLASSIFICATION	3.97966199190512E-6	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999960406693944	WITHOUT_CLASSIFICATION	3.959330605583467E-6	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999680551710307	WITHOUT_CLASSIFICATION	3.194482896925314E-5	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999996653913784	WITHOUT_CLASSIFICATION	3.346086216256818E-7	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999943396361678	WITHOUT_CLASSIFICATION	5.660363832147065E-6	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999961128853376	WITHOUT_CLASSIFICATION	3.887114662352782E-6	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999198321100128	WITHOUT_CLASSIFICATION	8.016788998722634E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999072757129905	WITHOUT_CLASSIFICATION	9.272428700938966E-5	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999898095874395	WITHOUT_CLASSIFICATION	1.0190412560472085E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998297738251046	WITHOUT_CLASSIFICATION	1.702261748953457E-4	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9999589232757549	WITHOUT_CLASSIFICATION	4.1076724245148647E-5	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998930930490622	WITHOUT_CLASSIFICATION	1.0690695093787882E-4	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999866571975211	WITHOUT_CLASSIFICATION	1.3342802478852949E-5	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9998377274944973	WITHOUT_CLASSIFICATION	1.6227250550270462E-4	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9983323838251328	WITHOUT_CLASSIFICATION	0.001667616174867288	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998174578202	WITHOUT_CLASSIFICATION	1.8254217984608052E-7	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999855165757335	WITHOUT_CLASSIFICATION	1.4483424266449738E-5	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9996670186361528	WITHOUT_CLASSIFICATION	3.329813638471616E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997971434530935	WITHOUT_CLASSIFICATION	2.028565469064227E-4	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999745637072119	WITHOUT_CLASSIFICATION	2.543629278814232E-5	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999969433979529	WITHOUT_CLASSIFICATION	3.056602047197673E-6	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999809438032753	WITHOUT_CLASSIFICATION	1.9056196724773182E-5	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999685857273877	WITHOUT_CLASSIFICATION	3.1414272612304266E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999758003480143	WITHOUT_CLASSIFICATION	2.4199651985696758E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999758003480143	WITHOUT_CLASSIFICATION	2.4199651985696758E-5	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999974904863278	WITHOUT_CLASSIFICATION	2.509513672304542E-6	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9991319923479701	WITHOUT_CLASSIFICATION	8.680076520297617E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999577512354968	WITHOUT_CLASSIFICATION	4.224876450319226E-5	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999974388275255	WITHOUT_CLASSIFICATION	2.5611724745102713E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999472206088592	WITHOUT_CLASSIFICATION	5.2779391140839516E-5	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999959709044952	WITHOUT_CLASSIFICATION	4.029095504800959E-6	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999892637343011	WITHOUT_CLASSIFICATION	1.0736265698858494E-5	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999959813950345	WITHOUT_CLASSIFICATION	4.018604965468292E-6	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999944742525406	WITHOUT_CLASSIFICATION	5.525747459334891E-6	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999577739280974	WITHOUT_CLASSIFICATION	4.222607190256319E-5	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999908985136805	WITHOUT_CLASSIFICATION	9.101486319532262E-6	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999487619598691	WITHOUT_CLASSIFICATION	5.123804013076828E-5	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999823855989503	WITHOUT_CLASSIFICATION	1.7614401049691088E-5	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999867970836528	WITHOUT_CLASSIFICATION	1.3202916347196942E-4	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999836870659183	WITHOUT_CLASSIFICATION	1.6312934081662965E-5	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999744636408116	WITHOUT_CLASSIFICATION	2.5536359188433236E-5	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999840910816724	WITHOUT_CLASSIFICATION	1.590891832755395E-5	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999797670925507	WITHOUT_CLASSIFICATION	2.0232907449356274E-5	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9998803910425352	WITHOUT_CLASSIFICATION	1.1960895746476383E-4	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999494109780206	WITHOUT_CLASSIFICATION	5.058902197950931E-5	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999624156324389	WITHOUT_CLASSIFICATION	3.7584367561185086E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999979974000608	WITHOUT_CLASSIFICATION	2.00259993920763E-5	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998468904102347	WITHOUT_CLASSIFICATION	1.5310958976533662E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991318910285002	WITHOUT_CLASSIFICATION	8.681089714998474E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999492846901228	WITHOUT_CLASSIFICATION	5.071530987719633E-5	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999688819043252	WITHOUT_CLASSIFICATION	3.111809567482553E-5	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999590453011485	WITHOUT_CLASSIFICATION	4.095469885149294E-5	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999821107367816	WITHOUT_CLASSIFICATION	1.7889263218491607E-5	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.98751935342332	WITHOUT_CLASSIFICATION	0.012480646576680085	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999142237937527	WITHOUT_CLASSIFICATION	8.57762062473482E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991318910285002	WITHOUT_CLASSIFICATION	8.681089714998474E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999987391117021	WITHOUT_CLASSIFICATION	1.2608882977830537E-6	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9998132426370572	WITHOUT_CLASSIFICATION	1.8675736294284672E-4	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9985061973715441	WITHOUT_CLASSIFICATION	0.0014938026284559021	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999610917619425	WITHOUT_CLASSIFICATION	3.890823805753947E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999997763929842	WITHOUT_CLASSIFICATION	2.2360701581419512E-7	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999994443951883	WITHOUT_CLASSIFICATION	5.556048116687192E-7	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999446200601715	WITHOUT_CLASSIFICATION	5.537993982846009E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999908326007293	WITHOUT_CLASSIFICATION	9.167399270668613E-6	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999437670348582	WITHOUT_CLASSIFICATION	5.623296514170297E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999610917619425	WITHOUT_CLASSIFICATION	3.890823805753947E-5	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.999993292181986	WITHOUT_CLASSIFICATION	6.707818014071746E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999908326007293	WITHOUT_CLASSIFICATION	9.167399270668613E-6	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999611950878606	WITHOUT_CLASSIFICATION	3.8804912139361014E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997344906944893	WITHOUT_CLASSIFICATION	2.655093055107023E-4	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999975027846104	WITHOUT_CLASSIFICATION	2.497215389601807E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999972281045112	WITHOUT_CLASSIFICATION	2.7718954887495655E-6	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999870962525915	WITHOUT_CLASSIFICATION	1.2903747408591758E-5	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999994536331543	WITHOUT_CLASSIFICATION	5.46366845582805E-7	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999944995210994	WITHOUT_CLASSIFICATION	5.500478900595189E-6	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999852228736787	WITHOUT_CLASSIFICATION	1.4777126321232885E-5	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999357914836171	WITHOUT_CLASSIFICATION	6.420851638283865E-5	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999969912156037	WITHOUT_CLASSIFICATION	3.008784396206058E-6	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998993557469422	WITHOUT_CLASSIFICATION	1.0064425305785085E-4	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999966387616395	WITHOUT_CLASSIFICATION	3.361238360608002E-6	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999373836015683	WITHOUT_CLASSIFICATION	6.261639843172241E-5	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999980579311095	WITHOUT_CLASSIFICATION	1.9420688905095556E-6	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993937513797322	WITHOUT_CLASSIFICATION	6.062486202677922E-4	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999992280109786	WITHOUT_CLASSIFICATION	7.719890214307121E-7	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999995707593694	WITHOUT_CLASSIFICATION	4.2924063071579266E-7	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9999544551448288	WITHOUT_CLASSIFICATION	4.554485517129291E-5	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999954895321582	WITHOUT_CLASSIFICATION	4.51046784181866E-6	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999728059550813	WITHOUT_CLASSIFICATION	2.7194044918683482E-5	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999991276528148	WITHOUT_CLASSIFICATION	8.723471851758143E-7	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999942528302247	WITHOUT_CLASSIFICATION	5.747169775348732E-6	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999947421890181	WITHOUT_CLASSIFICATION	5.257810981961272E-6	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999777027696465	WITHOUT_CLASSIFICATION	2.2297230353439686E-5	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999799969978108	WITHOUT_CLASSIFICATION	2.000300218918897E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999870628556198	WITHOUT_CLASSIFICATION	1.2937144380326794E-5	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999991447062112	WITHOUT_CLASSIFICATION	8.552937887175269E-7	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999989288218523	WITHOUT_CLASSIFICATION	1.0711781477115363E-5	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999949336481726	WITHOUT_CLASSIFICATION	5.066351827343066E-6	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999668242801177	WITHOUT_CLASSIFICATION	3.3175719882289074E-5	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999426462419184	WITHOUT_CLASSIFICATION	5.7353758081631775E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999939794265951	WITHOUT_CLASSIFICATION	6.0205734048938214E-5	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995736822861033	WITHOUT_CLASSIFICATION	4.2631771389670093E-4	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9941458366517211	WITHOUT_CLASSIFICATION	0.005854163348278887	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998321741638563	WITHOUT_CLASSIFICATION	1.6782583614365738E-4	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999950045445086	WITHOUT_CLASSIFICATION	4.995455491338704E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999908327056881	WITHOUT_CLASSIFICATION	9.167294311955177E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999908327056881	WITHOUT_CLASSIFICATION	9.167294311955177E-6	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999933644893492	WITHOUT_CLASSIFICATION	6.635510650886517E-6	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999994722597568	WITHOUT_CLASSIFICATION	5.27740243197463E-6	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999532171861677	WITHOUT_CLASSIFICATION	4.678281383234644E-5	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9998406152290045	WITHOUT_CLASSIFICATION	1.593847709955391E-4	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9997778018524992	WITHOUT_CLASSIFICATION	2.2219814750073103E-4	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9994377921198526	WITHOUT_CLASSIFICATION	5.622078801473951E-4	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9998246227878865	WITHOUT_CLASSIFICATION	1.7537721211348956E-4	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999876222137393	WITHOUT_CLASSIFICATION	1.2377786260847928E-5	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999980872451193	WITHOUT_CLASSIFICATION	1.9127548805996916E-6	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999999861362517	WITHOUT_CLASSIFICATION	1.3863748301703963E-7	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999967475844074	WITHOUT_CLASSIFICATION	3.252415592670546E-6	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999955530367517	WITHOUT_CLASSIFICATION	4.446963248289911E-6	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999647321689151	WITHOUT_CLASSIFICATION	3.5267831084855015E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999908327056881	WITHOUT_CLASSIFICATION	9.167294311955177E-6	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999423089488728	WITHOUT_CLASSIFICATION	5.769105112733447E-5	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999910039901989	WITHOUT_CLASSIFICATION	8.996009800997955E-6	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9998393869430213	WITHOUT_CLASSIFICATION	1.606130569786689E-4	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999987303942336	WITHOUT_CLASSIFICATION	1.2696057664152111E-6	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999907490094386	WITHOUT_CLASSIFICATION	9.250990561347651E-6	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999714986023402	WITHOUT_CLASSIFICATION	2.8501397659841003E-5	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997692455290924	WITHOUT_CLASSIFICATION	2.3075447090760177E-4	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999977485214117	WITHOUT_CLASSIFICATION	2.251478588271269E-6	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999718020299411	WITHOUT_CLASSIFICATION	2.819797005895745E-5	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999769770194954	WITHOUT_CLASSIFICATION	2.3022980504551518E-5	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999520926557106	WITHOUT_CLASSIFICATION	4.7907344289288804E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999939794265951	WITHOUT_CLASSIFICATION	6.0205734048938214E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999908327056881	WITHOUT_CLASSIFICATION	9.167294311955177E-6	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999992875279162	WITHOUT_CLASSIFICATION	7.124720837662911E-7	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999947843211024	WITHOUT_CLASSIFICATION	5.215678897618242E-6	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999358736289494	WITHOUT_CLASSIFICATION	6.4126371050676E-5	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.999727985736744	WITHOUT_CLASSIFICATION	2.720142632560211E-4	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999947824936826	WITHOUT_CLASSIFICATION	5.217506317435815E-6	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999901175052509	WITHOUT_CLASSIFICATION	9.8824947490534E-6	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794518239289	WITHOUT_CLASSIFICATION	2.054817607115684E-5	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999976727358566	WITHOUT_CLASSIFICATION	2.3272641433981268E-5	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999306041715013	WITHOUT_CLASSIFICATION	6.939582849870844E-5	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999451164010548	WITHOUT_CLASSIFICATION	5.488359894522902E-5	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999610530476205	WITHOUT_CLASSIFICATION	3.894695237954839E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.998319873953718	WITHOUT_CLASSIFICATION	0.001680126046281956	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999979315635082	WITHOUT_CLASSIFICATION	2.068436491749577E-6	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999724568218922	WITHOUT_CLASSIFICATION	2.7543178107811303E-5	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997071309654896	WITHOUT_CLASSIFICATION	2.928690345104536E-4	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9998137809175975	WITHOUT_CLASSIFICATION	1.8621908240241513E-4	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999689684155297	WITHOUT_CLASSIFICATION	3.1031584470219206E-5	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998914225568372	WITHOUT_CLASSIFICATION	1.0857744316277482E-4	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999880627694722	WITHOUT_CLASSIFICATION	1.1937230527792493E-5	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999990751058648	WITHOUT_CLASSIFICATION	9.248941351846396E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999928984004265	WITHOUT_CLASSIFICATION	7.1015995734718015E-6	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999928984004265	WITHOUT_CLASSIFICATION	7.1015995734718015E-6	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999973871952786	WITHOUT_CLASSIFICATION	2.612804721451067E-6	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999980380271234	WITHOUT_CLASSIFICATION	1.9619728765809815E-6	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999621978887856	WITHOUT_CLASSIFICATION	3.780211121433098E-5	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999963176778204	WITHOUT_CLASSIFICATION	3.682322179644912E-6	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999380290941107	WITHOUT_CLASSIFICATION	6.197090588924864E-5	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999430226061488	WITHOUT_CLASSIFICATION	5.6977393851116055E-5	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999061685305239	WITHOUT_CLASSIFICATION	9.383146947614118E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9994759039069093	WITHOUT_CLASSIFICATION	5.240960930906281E-4	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9994759039069093	WITHOUT_CLASSIFICATION	5.240960930906281E-4	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9991103075489143	WITHOUT_CLASSIFICATION	8.89692451085741E-4	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999892570423783	WITHOUT_CLASSIFICATION	1.074295762166433E-5	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999893345453616	WITHOUT_CLASSIFICATION	1.0665454638399711E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999243162129883	WITHOUT_CLASSIFICATION	7.568378701175968E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999243162129883	WITHOUT_CLASSIFICATION	7.568378701175968E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999243162129883	WITHOUT_CLASSIFICATION	7.568378701175968E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999611827930321	WITHOUT_CLASSIFICATION	3.881720696777073E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999960725228818	WITHOUT_CLASSIFICATION	3.92747711813123E-6	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9998949428620679	WITHOUT_CLASSIFICATION	1.050571379321346E-4	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9994403487867388	WITHOUT_CLASSIFICATION	5.596512132611765E-4	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9997662133859281	WITHOUT_CLASSIFICATION	2.3378661407187572E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999908327056881	WITHOUT_CLASSIFICATION	9.167294311955177E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999908327056881	WITHOUT_CLASSIFICATION	9.167294311955177E-6	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9989304218868109	WITHOUT_CLASSIFICATION	0.0010695781131890192	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999775867533761	WITHOUT_CLASSIFICATION	2.241324662387255E-5	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9995063642688962	WITHOUT_CLASSIFICATION	4.936357311037925E-4	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999997209737471	WITHOUT_CLASSIFICATION	2.790262529032972E-7	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999994380944394	WITHOUT_CLASSIFICATION	5.619055605833263E-7	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9997122992675165	WITHOUT_CLASSIFICATION	2.877007324834256E-4	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999791683836033	WITHOUT_CLASSIFICATION	2.0831616396723364E-5	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999595230695434	WITHOUT_CLASSIFICATION	4.04769304566489E-5	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999989993435515	WITHOUT_CLASSIFICATION	1.0006564484910347E-5	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999932040070431	WITHOUT_CLASSIFICATION	6.795992956925243E-6	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999789193824368	WITHOUT_CLASSIFICATION	2.108061756316558E-5	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9993164861096905	WITHOUT_CLASSIFICATION	6.835138903095737E-4	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9997653319878436	WITHOUT_CLASSIFICATION	2.3466801215649792E-4	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9997653319878436	WITHOUT_CLASSIFICATION	2.3466801215649792E-4	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998439902036297	WITHOUT_CLASSIFICATION	1.5600979637024192E-4	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998439902036297	WITHOUT_CLASSIFICATION	1.5600979637024192E-4	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998622672945418	WITHOUT_CLASSIFICATION	1.377327054582179E-4	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9997847733686638	WITHOUT_CLASSIFICATION	2.1522663133620066E-4	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9997847733686638	WITHOUT_CLASSIFICATION	2.1522663133620066E-4	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999039136655943	WITHOUT_CLASSIFICATION	9.60863344057332E-5	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997111735468137	WITHOUT_CLASSIFICATION	2.8882645318625567E-4	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999387423678707	WITHOUT_CLASSIFICATION	6.125763212922799E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999928984004265	WITHOUT_CLASSIFICATION	7.1015995734718015E-6	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999099849543358	WITHOUT_CLASSIFICATION	9.001504566415125E-5	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997111735468137	WITHOUT_CLASSIFICATION	2.8882645318625567E-4	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.999807290344222	WITHOUT_CLASSIFICATION	1.927096557780125E-4	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999902310327264	WITHOUT_CLASSIFICATION	9.76896727362804E-6	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999911644383082	WITHOUT_CLASSIFICATION	8.835561691807255E-5	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999567015090319	WITHOUT_CLASSIFICATION	4.329849096811568E-5	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999996843322085	WITHOUT_CLASSIFICATION	3.1566779137519473E-7	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.99999297303296	WITHOUT_CLASSIFICATION	7.026967040063364E-6	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999987735916444	WITHOUT_CLASSIFICATION	1.2264083555850545E-6	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999662455767064	WITHOUT_CLASSIFICATION	3.375442329354506E-5	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9995841683064568	WITHOUT_CLASSIFICATION	4.1583169354317826E-4	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9992245560531731	WITHOUT_CLASSIFICATION	7.75443946826897E-4	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999968472621461	WITHOUT_CLASSIFICATION	3.1527378537631486E-6	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999584710007055	WITHOUT_CLASSIFICATION	4.1528999294523194E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9998486522617271	WITHOUT_CLASSIFICATION	1.5134773827290253E-4	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999248642373458	WITHOUT_CLASSIFICATION	7.513576265422802E-5	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9944011524030854	WITHOUT_CLASSIFICATION	0.00559884759691457	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999950742349269	WITHOUT_CLASSIFICATION	4.925765073110965E-5	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999964063140342	WITHOUT_CLASSIFICATION	3.59368596572894E-6	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999902563994967	WITHOUT_CLASSIFICATION	9.743600503273026E-6	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999902563994967	WITHOUT_CLASSIFICATION	9.743600503273026E-6	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999969443803205	WITHOUT_CLASSIFICATION	3.0556196796076114E-6	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999909005485009	WITHOUT_CLASSIFICATION	9.099451499044678E-6	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999992876019688	WITHOUT_CLASSIFICATION	7.123980311924765E-7	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999850926860533	WITHOUT_CLASSIFICATION	1.4907313946700796E-5	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999644625229067	WITHOUT_CLASSIFICATION	3.5537477093235986E-5	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999991191186763	WITHOUT_CLASSIFICATION	8.808813237423385E-7	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999992650081468	WITHOUT_CLASSIFICATION	7.349918530891747E-7	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999729705951247	WITHOUT_CLASSIFICATION	2.7029404875375124E-5	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999899925556962	WITHOUT_CLASSIFICATION	1.0007444303678105E-5	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999995011231018	WITHOUT_CLASSIFICATION	4.988768982643067E-7	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999869933818096	WITHOUT_CLASSIFICATION	1.3006618190322976E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.998319873953718	WITHOUT_CLASSIFICATION	0.001680126046281956	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999931120211461	WITHOUT_CLASSIFICATION	6.887978853898613E-5	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9998401156079266	WITHOUT_CLASSIFICATION	1.5988439207330853E-4	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999958092118682	WITHOUT_CLASSIFICATION	4.190788131801708E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998110742163601	WITHOUT_CLASSIFICATION	1.8892578363993788E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999450138194496	WITHOUT_CLASSIFICATION	5.4986180550451934E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999450138194496	WITHOUT_CLASSIFICATION	5.4986180550451934E-5	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997745104362901	WITHOUT_CLASSIFICATION	2.2548956370990227E-4	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999863709980347	WITHOUT_CLASSIFICATION	1.3629001965383291E-5	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9997490925035449	WITHOUT_CLASSIFICATION	2.509074964550445E-4	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9998831241649786	WITHOUT_CLASSIFICATION	1.1687583502136749E-4	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9997257201012141	WITHOUT_CLASSIFICATION	2.7427989878593993E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999786807283705	WITHOUT_CLASSIFICATION	2.131927162951263E-5	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999997093945002	WITHOUT_CLASSIFICATION	2.9060549979642555E-7	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9992647061774781	WITHOUT_CLASSIFICATION	7.352938225219377E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999565228401996	WITHOUT_CLASSIFICATION	4.347715980045768E-5	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9992569940575052	WITHOUT_CLASSIFICATION	7.4300594249472E-4	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999846391626321	WITHOUT_CLASSIFICATION	1.5360837367893896E-4	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9992647061774781	WITHOUT_CLASSIFICATION	7.352938225219377E-4	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999968585961029	WITHOUT_CLASSIFICATION	3.1414038970480053E-6	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999748987154647	WITHOUT_CLASSIFICATION	2.510128453528099E-5	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999994601270898	WITHOUT_CLASSIFICATION	5.398729101227685E-7	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9996954981724873	WITHOUT_CLASSIFICATION	3.045018275127242E-4	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999988933408588	WITHOUT_CLASSIFICATION	1.1066591412083939E-6	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999971308193837	WITHOUT_CLASSIFICATION	2.8691806163058625E-5	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999068783446247	WITHOUT_CLASSIFICATION	9.31216553754033E-5	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999718401749135	WITHOUT_CLASSIFICATION	2.8159825086479187E-5	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999967637547567	WITHOUT_CLASSIFICATION	3.236245243239585E-6	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996424609361904	WITHOUT_CLASSIFICATION	3.5753906380971476E-4	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999313378138462	WITHOUT_CLASSIFICATION	6.866218615372776E-5	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999550133447938	WITHOUT_CLASSIFICATION	4.4986655206257E-5	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999794403453716	WITHOUT_CLASSIFICATION	2.055965462839663E-5	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999977783262847	WITHOUT_CLASSIFICATION	2.221673715299428E-6	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999143962839653	WITHOUT_CLASSIFICATION	8.560371603480794E-5	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999884009233525	WITHOUT_CLASSIFICATION	1.159907664739025E-5	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999875054539253	WITHOUT_CLASSIFICATION	1.2494546074767605E-5	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999319655993011	WITHOUT_CLASSIFICATION	6.803440069898668E-5	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998625071843616	WITHOUT_CLASSIFICATION	1.3749281563833076E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999446552758428	WITHOUT_CLASSIFICATION	5.5344724157225644E-5	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9993459118572443	WITHOUT_CLASSIFICATION	6.54088142755657E-4	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999958442875061	WITHOUT_CLASSIFICATION	4.155712493937978E-6	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998621004247715	WITHOUT_CLASSIFICATION	1.3789957522840744E-4	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9986677249558178	WITHOUT_CLASSIFICATION	0.0013322750441822357	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999943389691125	WITHOUT_CLASSIFICATION	5.661030887509109E-6	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9992158643259509	WITHOUT_CLASSIFICATION	7.841356740491103E-4	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999129901353284	WITHOUT_CLASSIFICATION	8.700986467162516E-5	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999919208600841	WITHOUT_CLASSIFICATION	8.079139915882222E-6	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999887131301368	WITHOUT_CLASSIFICATION	1.1286869863180843E-5	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999645041579789	WITHOUT_CLASSIFICATION	3.5495842021121297E-5	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999958491419533	WITHOUT_CLASSIFICATION	4.150858046707816E-6	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9998347593682464	WITHOUT_CLASSIFICATION	1.6524063175373525E-4	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998740243094456	WITHOUT_CLASSIFICATION	1.2597569055433757E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999997715102029	WITHOUT_CLASSIFICATION	2.2848979707350452E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999919077763036	WITHOUT_CLASSIFICATION	8.092223696436393E-6	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999997348634272	WITHOUT_CLASSIFICATION	2.651365727983581E-6	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999954592337639	WITHOUT_CLASSIFICATION	4.540766236137826E-6	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999902394582756	WITHOUT_CLASSIFICATION	9.760541724399774E-6	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999895758858531	WITHOUT_CLASSIFICATION	1.0424114146912477E-5	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999830344674463	WITHOUT_CLASSIFICATION	1.69655325536605E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999115098993989	WITHOUT_CLASSIFICATION	8.849010060108213E-5	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9988358990981903	WITHOUT_CLASSIFICATION	0.001164100901809731	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999954329635817	WITHOUT_CLASSIFICATION	4.5670364182364885E-6	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.99999977904563	WITHOUT_CLASSIFICATION	2.209543699543302E-7	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999722833373956	WITHOUT_CLASSIFICATION	2.7716662604341563E-5	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999944364059572	WITHOUT_CLASSIFICATION	5.563594042896831E-6	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999988318187455	WITHOUT_CLASSIFICATION	1.1681812544861597E-6	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999620085597196	WITHOUT_CLASSIFICATION	3.799144028033975E-5	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9998632894631144	WITHOUT_CLASSIFICATION	1.3671053688556407E-4	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999945520126048	WITHOUT_CLASSIFICATION	5.447987395204042E-5	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960721843675	WITHOUT_CLASSIFICATION	3.927815632586113E-6	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999899593100726	WITHOUT_CLASSIFICATION	1.0040689927373038E-5	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999963036476462	WITHOUT_CLASSIFICATION	3.6963523536940704E-6	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999984619449704	WITHOUT_CLASSIFICATION	1.538055029534592E-6	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999990794874077	WITHOUT_CLASSIFICATION	9.205125922719036E-7	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9998631136190257	WITHOUT_CLASSIFICATION	1.3688638097437007E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995620252642977	WITHOUT_CLASSIFICATION	4.3797473570236366E-4	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999468884830474	WITHOUT_CLASSIFICATION	5.311151695254351E-5	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999153600871847	WITHOUT_CLASSIFICATION	8.463991281525586E-5	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998938794996108	WITHOUT_CLASSIFICATION	1.0612050038917409E-4	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999911549990159	WITHOUT_CLASSIFICATION	8.845000984123506E-6	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999987519240788	WITHOUT_CLASSIFICATION	1.2480759212027096E-5	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9992441620467772	WITHOUT_CLASSIFICATION	7.558379532226677E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9857335757643391	WITHOUT_CLASSIFICATION	0.01426642423566098	DEFECT
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999849471823486	WITHOUT_CLASSIFICATION	1.5052817651348322E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999372549988441	WITHOUT_CLASSIFICATION	6.274500115586267E-5	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960721843675	WITHOUT_CLASSIFICATION	3.927815632586113E-6	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999996914640272	WITHOUT_CLASSIFICATION	3.085359727892517E-6	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999795554544212	WITHOUT_CLASSIFICATION	2.0444545578812447E-5	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999954483792018	WITHOUT_CLASSIFICATION	4.551620798172142E-6	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.999908216429649	WITHOUT_CLASSIFICATION	9.178357035103996E-5	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998455970900291	WITHOUT_CLASSIFICATION	1.5440290997092098E-4	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999818098038676	WITHOUT_CLASSIFICATION	1.8190196132386084E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999565228401996	WITHOUT_CLASSIFICATION	4.347715980045768E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999969863439343	WITHOUT_CLASSIFICATION	3.0136560657180487E-6	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999919077763036	WITHOUT_CLASSIFICATION	8.092223696436393E-6	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9997737736899331	WITHOUT_CLASSIFICATION	2.262263100668368E-4	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999891450641288	WITHOUT_CLASSIFICATION	1.0854935871250772E-5	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9998926054088311	WITHOUT_CLASSIFICATION	1.0739459116898201E-4	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999103159561357	WITHOUT_CLASSIFICATION	8.968404386426827E-5	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999947443091965	WITHOUT_CLASSIFICATION	5.255690803486881E-6	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999783622842312	WITHOUT_CLASSIFICATION	2.163771576885756E-5	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9986745439703286	WITHOUT_CLASSIFICATION	0.0013254560296713104	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999612462047819	WITHOUT_CLASSIFICATION	3.875379521816032E-5	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.974347897124203	WITHOUT_CLASSIFICATION	0.025652102875796924	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9968898453419366	WITHOUT_CLASSIFICATION	0.003110154658063385	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999995633645087	WITHOUT_CLASSIFICATION	4.366354912934734E-6	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999120748417688	WITHOUT_CLASSIFICATION	8.792515823120241E-5	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9988768294294622	WITHOUT_CLASSIFICATION	0.001123170570537805	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9988768294294622	WITHOUT_CLASSIFICATION	0.001123170570537805	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999893213198844	WITHOUT_CLASSIFICATION	1.0678680115550922E-5	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999928181074925	WITHOUT_CLASSIFICATION	7.181892507543587E-6	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999968492347452	WITHOUT_CLASSIFICATION	3.1507652548091675E-5	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999887194801835	WITHOUT_CLASSIFICATION	1.128051981645476E-5	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999979904445127	WITHOUT_CLASSIFICATION	2.0095554873831047E-6	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999931444202821	WITHOUT_CLASSIFICATION	6.855579717907371E-5	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999970530812065	WITHOUT_CLASSIFICATION	2.946918793490375E-5	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999472613805765	WITHOUT_CLASSIFICATION	5.273861942340145E-5	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999981463968886	WITHOUT_CLASSIFICATION	1.8536031115017504E-6	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999910783819949	WITHOUT_CLASSIFICATION	8.921618005175336E-6	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9995024955174592	WITHOUT_CLASSIFICATION	4.975044825407928E-4	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9996918598001762	WITHOUT_CLASSIFICATION	3.081401998238131E-4	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9998649656571699	WITHOUT_CLASSIFICATION	1.3503434283014732E-4	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999989140109301	WITHOUT_CLASSIFICATION	1.0859890699395178E-6	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999830280149745	WITHOUT_CLASSIFICATION	1.6971985025497482E-5	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999394684793808	WITHOUT_CLASSIFICATION	6.0531520619169784E-5	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999972154455922	WITHOUT_CLASSIFICATION	2.7845544078204237E-6	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999262719583853	WITHOUT_CLASSIFICATION	7.372804161463076E-5	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999997206006585	WITHOUT_CLASSIFICATION	2.7939934149306617E-6	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999801702389007	WITHOUT_CLASSIFICATION	1.982976109934383E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999946545593102	WITHOUT_CLASSIFICATION	5.345440689779957E-6	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.999176055772931	WITHOUT_CLASSIFICATION	8.239442270690415E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999949665809224	WITHOUT_CLASSIFICATION	5.0334190776193755E-6	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999978350879115	WITHOUT_CLASSIFICATION	2.164912088365486E-6	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999161984183822	WITHOUT_CLASSIFICATION	8.380158161776124E-5	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999980259929531	WITHOUT_CLASSIFICATION	1.9740070469145576E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999061170132928	WITHOUT_CLASSIFICATION	9.38829867071814E-5	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999334251616165	WITHOUT_CLASSIFICATION	6.657483838353354E-5	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999111968785525	WITHOUT_CLASSIFICATION	8.880312144753228E-5	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999984701682495	WITHOUT_CLASSIFICATION	1.5298317504414119E-6	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998294169621111	WITHOUT_CLASSIFICATION	1.7058303788893123E-4	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999895350960236	WITHOUT_CLASSIFICATION	1.0464903976272269E-5	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.999997703589776	WITHOUT_CLASSIFICATION	2.296410224055335E-6	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999732138893607	WITHOUT_CLASSIFICATION	2.6786110639240476E-5	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9998877821017556	WITHOUT_CLASSIFICATION	1.1221789824447929E-4	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999991012626217	WITHOUT_CLASSIFICATION	8.987373782863974E-7	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9975162416382846	WITHOUT_CLASSIFICATION	0.0024837583617154735	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999981738761994	WITHOUT_CLASSIFICATION	1.8261238006604654E-6	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999946292067601	WITHOUT_CLASSIFICATION	5.370793239873209E-6	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999948953438148	WITHOUT_CLASSIFICATION	5.104656185174956E-6	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998703990930852	WITHOUT_CLASSIFICATION	1.29600906914778E-4	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994191856137974	WITHOUT_CLASSIFICATION	5.808143862025862E-4	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999871347974548	WITHOUT_CLASSIFICATION	1.286520254514691E-5	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999968384765747	WITHOUT_CLASSIFICATION	3.161523425296579E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999998644468874	WITHOUT_CLASSIFICATION	1.355531126011638E-6	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.999999175375789	WITHOUT_CLASSIFICATION	8.246242110326932E-7	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997007097113857	WITHOUT_CLASSIFICATION	2.9929028861426765E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.7663027286070009	DEFECT	0.23369727139299906	WITHOUT_CLASSIFICATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999861156383887	WITHOUT_CLASSIFICATION	1.3884361611301791E-5	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999987687840122	WITHOUT_CLASSIFICATION	1.2312159877649358E-6	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999904964630445	WITHOUT_CLASSIFICATION	9.503536955380799E-6	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998489262222288	WITHOUT_CLASSIFICATION	1.5107377777118193E-4	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999994478131718	WITHOUT_CLASSIFICATION	5.521868282066613E-7	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999925814514037	WITHOUT_CLASSIFICATION	7.418548596255607E-6	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999870704456076	WITHOUT_CLASSIFICATION	1.2929554392407706E-4	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.999956776219874	WITHOUT_CLASSIFICATION	4.3223780126025095E-5	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999985884490076	WITHOUT_CLASSIFICATION	1.4115509924289107E-6	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999537263245423	WITHOUT_CLASSIFICATION	4.627367545778963E-5	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999808831831074	WITHOUT_CLASSIFICATION	1.9116816892593074E-5	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999392354534241	WITHOUT_CLASSIFICATION	6.0764546575788376E-5	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9994433910082131	WITHOUT_CLASSIFICATION	5.566089917869859E-4	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999789809497415	WITHOUT_CLASSIFICATION	2.1019050258498295E-4	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999344146826528	WITHOUT_CLASSIFICATION	6.558531734716034E-5	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999990819255117	WITHOUT_CLASSIFICATION	9.180744882891273E-6	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999969671123938	WITHOUT_CLASSIFICATION	3.032887606237085E-6	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999912788898668	WITHOUT_CLASSIFICATION	8.721110133256383E-6	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999961674983289	WITHOUT_CLASSIFICATION	3.832501671069853E-6	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998845014606264	WITHOUT_CLASSIFICATION	1.1549853937364638E-4	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999916980684179	WITHOUT_CLASSIFICATION	8.301931582027992E-6	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999851332248251	WITHOUT_CLASSIFICATION	1.4866775174916462E-5	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999978588002539	WITHOUT_CLASSIFICATION	2.1411997461168394E-6	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999851332248251	WITHOUT_CLASSIFICATION	1.4866775174916462E-5	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999984211814195	WITHOUT_CLASSIFICATION	1.5788185805210503E-6	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999816943331747	WITHOUT_CLASSIFICATION	1.830566682531434E-5	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998320723603206	WITHOUT_CLASSIFICATION	1.6792763967940909E-4	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999979258008668	WITHOUT_CLASSIFICATION	2.0741991332050706E-6	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999964008443204	WITHOUT_CLASSIFICATION	3.5991556796364767E-6	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999637515838167	WITHOUT_CLASSIFICATION	3.6248416183312316E-5	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999984983065681	WITHOUT_CLASSIFICATION	1.5016934320089487E-6	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999842812402716	WITHOUT_CLASSIFICATION	1.571875972842932E-5	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998350951365317	WITHOUT_CLASSIFICATION	1.6490486346823155E-4	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998076636157	WITHOUT_CLASSIFICATION	1.9233638438739176E-7	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999987022985759	WITHOUT_CLASSIFICATION	1.2977014241268074E-6	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999992640332295	WITHOUT_CLASSIFICATION	7.359667705074481E-6	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999989406726417	WITHOUT_CLASSIFICATION	1.0593273582738336E-6	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9986335600118439	WITHOUT_CLASSIFICATION	0.0013664399881561553	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9994493834919849	WITHOUT_CLASSIFICATION	5.506165080151774E-4	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999701019966029	WITHOUT_CLASSIFICATION	2.9898003397067696E-5	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999771370268297	WITHOUT_CLASSIFICATION	2.2862973170346803E-5	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999979621125736	WITHOUT_CLASSIFICATION	2.0378874262943786E-6	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999995285952931	WITHOUT_CLASSIFICATION	4.714047069933484E-7	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999984266049144	WITHOUT_CLASSIFICATION	1.573395085524902E-6	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999952373909101	WITHOUT_CLASSIFICATION	4.762609089887348E-6	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999967032241356	WITHOUT_CLASSIFICATION	3.2967758644184733E-6	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998392062637611	WITHOUT_CLASSIFICATION	1.607937362389673E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999739020398561	WITHOUT_CLASSIFICATION	2.6097960143833967E-5	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999885333793843	WITHOUT_CLASSIFICATION	1.1466620615596307E-5	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998261628618509	WITHOUT_CLASSIFICATION	1.738371381491555E-4	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9999881903303187	WITHOUT_CLASSIFICATION	1.1809669681311503E-5	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.999967732753369	WITHOUT_CLASSIFICATION	3.226724663103769E-5	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999995627584415	WITHOUT_CLASSIFICATION	4.372415585016814E-6	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9996993022355333	WITHOUT_CLASSIFICATION	3.006977644668115E-4	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999453223272091	WITHOUT_CLASSIFICATION	5.4677672790760974E-5	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9997530578101882	WITHOUT_CLASSIFICATION	2.469421898118403E-4	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999998934695122	WITHOUT_CLASSIFICATION	1.065304878540431E-7	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9976377924514042	WITHOUT_CLASSIFICATION	0.002362207548595848	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999484661237155	WITHOUT_CLASSIFICATION	5.153387628454363E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9998107934307875	WITHOUT_CLASSIFICATION	1.8920656921249035E-4	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9999440737383616	WITHOUT_CLASSIFICATION	5.592626163827504E-5	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999963262964491	WITHOUT_CLASSIFICATION	3.6737035508007757E-6	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9998199551633348	WITHOUT_CLASSIFICATION	1.8004483666516388E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999999745318319	WITHOUT_CLASSIFICATION	2.546816810282668E-7	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999338200345134	WITHOUT_CLASSIFICATION	6.617996548662555E-5	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9996419552262668	WITHOUT_CLASSIFICATION	3.580447737333393E-4	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997386765680445	WITHOUT_CLASSIFICATION	2.6132343195552673E-4	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998261628618509	WITHOUT_CLASSIFICATION	1.738371381491555E-4	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9994264120131467	WITHOUT_CLASSIFICATION	5.735879868533545E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999957084694656	WITHOUT_CLASSIFICATION	4.291530534347514E-6	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9994072584022661	WITHOUT_CLASSIFICATION	5.927415977338242E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999998631012995	WITHOUT_CLASSIFICATION	1.3689870048978696E-6	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9998754253404587	WITHOUT_CLASSIFICATION	1.245746595413688E-4	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999702425857255	WITHOUT_CLASSIFICATION	2.9757414274384457E-5	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999054509946077	WITHOUT_CLASSIFICATION	9.454900539230656E-5	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9998140364295185	WITHOUT_CLASSIFICATION	1.8596357048157104E-4	DEFECT
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999925398873721	WITHOUT_CLASSIFICATION	7.460112627836094E-6	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.999993784023798	WITHOUT_CLASSIFICATION	6.215976202081142E-6	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999027589905464	WITHOUT_CLASSIFICATION	9.72410094536564E-5	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999902624483117	WITHOUT_CLASSIFICATION	9.737551688286187E-6	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999067023833008	WITHOUT_CLASSIFICATION	9.329761669919335E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999768475936192	WITHOUT_CLASSIFICATION	2.3152406380803318E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999901492983636	WITHOUT_CLASSIFICATION	9.850701636354152E-6	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999986519711432	WITHOUT_CLASSIFICATION	1.34802885683269E-6	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999875300915894	WITHOUT_CLASSIFICATION	1.2469908410650874E-5	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999798697777225	WITHOUT_CLASSIFICATION	2.0130222277597084E-5	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.999990207748413	WITHOUT_CLASSIFICATION	9.79225158711029E-6	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9994264120131467	WITHOUT_CLASSIFICATION	5.735879868533545E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999911185784175	WITHOUT_CLASSIFICATION	8.881421582495695E-6	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999349276641304	WITHOUT_CLASSIFICATION	6.507233586954274E-5	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999969818139599	WITHOUT_CLASSIFICATION	3.018186040109102E-5	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999905685938777	WITHOUT_CLASSIFICATION	9.431406122298709E-6	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9997350853906695	WITHOUT_CLASSIFICATION	2.6491460933044563E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9994993618954428	WITHOUT_CLASSIFICATION	5.006381045572533E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9994993618954428	WITHOUT_CLASSIFICATION	5.006381045572533E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999958060304667	WITHOUT_CLASSIFICATION	4.19396953329495E-6	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9994993618954428	WITHOUT_CLASSIFICATION	5.006381045572533E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9994993618954428	WITHOUT_CLASSIFICATION	5.006381045572533E-4	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999987681242611	WITHOUT_CLASSIFICATION	1.2318757388226484E-6	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999286787912901	WITHOUT_CLASSIFICATION	7.132120870985293E-5	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999969702955764	WITHOUT_CLASSIFICATION	3.0297044235653755E-6	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999979872326782	WITHOUT_CLASSIFICATION	2.012767321804393E-6	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9993918336469119	WITHOUT_CLASSIFICATION	6.081663530882124E-4	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999872438408761	WITHOUT_CLASSIFICATION	1.2756159123911016E-5	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999959514934654	WITHOUT_CLASSIFICATION	4.048506534609213E-5	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999740839409493	WITHOUT_CLASSIFICATION	2.5916059050742483E-5	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999558960592375	WITHOUT_CLASSIFICATION	4.41039407624997E-5	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998777480963692	WITHOUT_CLASSIFICATION	1.2225190363084165E-4	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999983890466708	WITHOUT_CLASSIFICATION	1.610953329201654E-5	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9994183649640134	WITHOUT_CLASSIFICATION	5.816350359866115E-4	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999882661757129	WITHOUT_CLASSIFICATION	1.1733824287074379E-5	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998065430723269	WITHOUT_CLASSIFICATION	1.9345692767305906E-4	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999984151526083	WITHOUT_CLASSIFICATION	1.5848473915580252E-6	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999565305898669	WITHOUT_CLASSIFICATION	4.3469410133177616E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999601023426382	WITHOUT_CLASSIFICATION	3.989765736187346E-5	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999990588661692	WITHOUT_CLASSIFICATION	9.411338306744855E-7	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999806475354583	WITHOUT_CLASSIFICATION	1.9352464541630183E-5	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9997394439476559	WITHOUT_CLASSIFICATION	2.605560523439993E-4	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999955270738201	WITHOUT_CLASSIFICATION	4.472926179828176E-6	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999236660109427	WITHOUT_CLASSIFICATION	7.633398905729707E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999601023426382	WITHOUT_CLASSIFICATION	3.989765736187346E-5	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9999881903303187	WITHOUT_CLASSIFICATION	1.1809669681311503E-5	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9999920007096794	WITHOUT_CLASSIFICATION	7.999290320532625E-6	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999810787603698	WITHOUT_CLASSIFICATION	1.8921239630142735E-5	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999740961601759	WITHOUT_CLASSIFICATION	2.590383982409356E-5	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9999798285009628	WITHOUT_CLASSIFICATION	2.0171499037259674E-5	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999870159896118	WITHOUT_CLASSIFICATION	1.2984010388122257E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999741069101445	WITHOUT_CLASSIFICATION	2.5893089855538616E-5	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999054456444828	WITHOUT_CLASSIFICATION	9.455435551722075E-5	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999548904320722	WITHOUT_CLASSIFICATION	4.510956792779797E-5	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998538777447398	WITHOUT_CLASSIFICATION	1.4612225526027914E-4	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999840535800497	WITHOUT_CLASSIFICATION	1.594641995025478E-5	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999514703223392	WITHOUT_CLASSIFICATION	4.852967766070876E-5	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999975362112892	WITHOUT_CLASSIFICATION	2.4637887108083523E-6	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999965569409731	WITHOUT_CLASSIFICATION	3.443059026829265E-6	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998318267094918	WITHOUT_CLASSIFICATION	1.6817329050831682E-4	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999026847652	WITHOUT_CLASSIFICATION	9.731523474329393E-8	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999952748272054	WITHOUT_CLASSIFICATION	4.725172794676426E-6	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.999993401765212	WITHOUT_CLASSIFICATION	6.5982347879594764E-6	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999908720900058	WITHOUT_CLASSIFICATION	9.127909994149174E-6	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999675007711001	WITHOUT_CLASSIFICATION	3.249922889995158E-5	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9985751722522689	WITHOUT_CLASSIFICATION	0.0014248277477311433	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999946328279181	WITHOUT_CLASSIFICATION	5.367172081934497E-6	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999627475868094	WITHOUT_CLASSIFICATION	3.7252413190564075E-5	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999548904320722	WITHOUT_CLASSIFICATION	4.510956792779797E-5	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999980557126191	WITHOUT_CLASSIFICATION	1.944287380868335E-6	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999938437796103	WITHOUT_CLASSIFICATION	6.156220389739092E-6	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999557552197095	WITHOUT_CLASSIFICATION	4.4244780290564575E-5	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999935172283663	WITHOUT_CLASSIFICATION	6.48277163362628E-6	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982104796862	WITHOUT_CLASSIFICATION	1.7895203138904075E-6	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9999893387904142	WITHOUT_CLASSIFICATION	1.0661209585765899E-5	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9997374366040774	WITHOUT_CLASSIFICATION	2.625633959225686E-4	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9999939822546114	WITHOUT_CLASSIFICATION	6.017745388632779E-6	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999723056129562	WITHOUT_CLASSIFICATION	2.769438704366499E-5	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.999240906976635	WITHOUT_CLASSIFICATION	7.590930233650108E-4	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999831063878569	WITHOUT_CLASSIFICATION	1.6893612143131014E-5	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998416918174763	WITHOUT_CLASSIFICATION	1.5830818252369108E-4	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999979900803179	WITHOUT_CLASSIFICATION	2.0099196821631327E-6	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999999928903736	WITHOUT_CLASSIFICATION	7.109626405334138E-8	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999420906978488	WITHOUT_CLASSIFICATION	5.79093021512201E-5	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9985697756558086	WITHOUT_CLASSIFICATION	0.0014302243441914144	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.99999355184535	WITHOUT_CLASSIFICATION	6.448154650072488E-6	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999831063878569	WITHOUT_CLASSIFICATION	1.6893612143131014E-5	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999874639693431	WITHOUT_CLASSIFICATION	1.2536030656842895E-5	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999426676882098	WITHOUT_CLASSIFICATION	5.7332311790245775E-5	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999965611960763	WITHOUT_CLASSIFICATION	3.4388039237290937E-6	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999969558665719	WITHOUT_CLASSIFICATION	3.044133428093546E-6	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999604425506391	WITHOUT_CLASSIFICATION	3.955744936092462E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9996096160928004	WITHOUT_CLASSIFICATION	3.9038390719956846E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999420906978488	WITHOUT_CLASSIFICATION	5.79093021512201E-5	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999944583259358	WITHOUT_CLASSIFICATION	5.5416740641856E-6	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967856632456	WITHOUT_CLASSIFICATION	3.2143367544024304E-6	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991819253007	WITHOUT_CLASSIFICATION	8.180746993236627E-7	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644844468816	WITHOUT_CLASSIFICATION	3.5515553118478666E-5	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999548414574558	WITHOUT_CLASSIFICATION	4.515854254417766E-5	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931488893731	WITHOUT_CLASSIFICATION	6.851110626965983E-6	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999963931376172	WITHOUT_CLASSIFICATION	3.6068623828776103E-6	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999963931376172	WITHOUT_CLASSIFICATION	3.6068623828776103E-6	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999971702871346	WITHOUT_CLASSIFICATION	2.8297128652617833E-6	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999938467068938	WITHOUT_CLASSIFICATION	6.153293106142939E-6	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9999598326388875	WITHOUT_CLASSIFICATION	4.016736111249234E-5	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9999602772369972	WITHOUT_CLASSIFICATION	3.972276300276082E-5	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9997483336441666	WITHOUT_CLASSIFICATION	2.5166635583341335E-4	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244912944685	WITHOUT_CLASSIFICATION	7.550870553145323E-5	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996399688666779	WITHOUT_CLASSIFICATION	3.6003113332215623E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791329456482	WITHOUT_CLASSIFICATION	2.086705435179266E-5	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9998078367351286	WITHOUT_CLASSIFICATION	1.9216326487150862E-4	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999041529243408	WITHOUT_CLASSIFICATION	9.584707565920955E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244912944685	WITHOUT_CLASSIFICATION	7.550870553145323E-5	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996399688666779	WITHOUT_CLASSIFICATION	3.6003113332215623E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791329456482	WITHOUT_CLASSIFICATION	2.086705435179266E-5	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999698081182951	WITHOUT_CLASSIFICATION	3.0191881704937234E-5	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9998443765513413	WITHOUT_CLASSIFICATION	1.556234486587893E-4	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999972160955284	WITHOUT_CLASSIFICATION	2.7839044716392235E-6	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999980659300884	WITHOUT_CLASSIFICATION	1.9340699116150133E-6	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999997064644938	WITHOUT_CLASSIFICATION	2.9353550620201557E-6	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9994876665893978	WITHOUT_CLASSIFICATION	5.123334106021764E-4	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998018552626678	WITHOUT_CLASSIFICATION	1.9814473733215142E-4	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999931502180704	WITHOUT_CLASSIFICATION	6.849781929649643E-6	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9997903700453845	WITHOUT_CLASSIFICATION	2.0962995461539817E-4	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9998535843227866	WITHOUT_CLASSIFICATION	1.4641567721338574E-4	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999972967775258	WITHOUT_CLASSIFICATION	2.703222474316051E-6	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9883521349988362	WITHOUT_CLASSIFICATION	0.011647865001163748	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997206790280029	WITHOUT_CLASSIFICATION	2.7932097199703234E-4	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999900654378582	WITHOUT_CLASSIFICATION	9.934562141814634E-6	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999971082144321	WITHOUT_CLASSIFICATION	2.891785567875232E-6	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999917900908329	WITHOUT_CLASSIFICATION	8.209909166994896E-6	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999744516792738	WITHOUT_CLASSIFICATION	2.554832072630756E-5	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9992737125825097	WITHOUT_CLASSIFICATION	7.262874174903208E-4	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.99999428818406	WITHOUT_CLASSIFICATION	5.711815939932672E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9997416281032759	WITHOUT_CLASSIFICATION	2.5837189672402367E-4	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999860050695448	WITHOUT_CLASSIFICATION	1.3994930455268258E-5	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9996720955108724	WITHOUT_CLASSIFICATION	3.2790448912755065E-4	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999987647833806	WITHOUT_CLASSIFICATION	1.2352166195020348E-6	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999983054292524	WITHOUT_CLASSIFICATION	1.6945707476681308E-6	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999993150220974	WITHOUT_CLASSIFICATION	6.849779026657979E-7	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999268044524094	WITHOUT_CLASSIFICATION	7.319554759050436E-5	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998517894352041	WITHOUT_CLASSIFICATION	1.4821056479579205E-4	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960266220214	WITHOUT_CLASSIFICATION	1.0397337797866469E-4	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999990117391726	WITHOUT_CLASSIFICATION	9.882608273929526E-6	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998752914784933	WITHOUT_CLASSIFICATION	1.2470852150664368E-4	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991524817394394	WITHOUT_CLASSIFICATION	8.475182605606309E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999967344465921	WITHOUT_CLASSIFICATION	3.265553407833354E-6	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999967344465921	WITHOUT_CLASSIFICATION	3.265553407833354E-6	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999982604058264	WITHOUT_CLASSIFICATION	1.7395941735995314E-6	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9997380839871036	WITHOUT_CLASSIFICATION	2.6191601289641885E-4	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999843719597424	WITHOUT_CLASSIFICATION	1.5628040257650736E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.998319873953718	WITHOUT_CLASSIFICATION	0.001680126046281956	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999751793455822	WITHOUT_CLASSIFICATION	2.482065441775599E-5	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999971901229426	WITHOUT_CLASSIFICATION	2.80987705736907E-6	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9998885015912261	WITHOUT_CLASSIFICATION	1.1149840877382846E-4	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999872322742321	WITHOUT_CLASSIFICATION	1.2767725767893691E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.999958075956073	WITHOUT_CLASSIFICATION	4.192404392699849E-5	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818163653871	WITHOUT_CLASSIFICATION	1.8183634613001074E-5	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691931522879	WITHOUT_CLASSIFICATION	3.0806847712072674E-5	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816950390913	WITHOUT_CLASSIFICATION	1.8304960908761936E-5	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999752961429512	WITHOUT_CLASSIFICATION	2.4703857048741377E-5	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999787112462237	WITHOUT_CLASSIFICATION	2.1288753776233935E-5	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999809250973833	WITHOUT_CLASSIFICATION	1.9074902616687936E-5	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871708098832	WITHOUT_CLASSIFICATION	1.2829190116885143E-5	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915687052456	WITHOUT_CLASSIFICATION	8.431294754338998E-6	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999842499840019	WITHOUT_CLASSIFICATION	1.5750015998112957E-5	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999632748622208	WITHOUT_CLASSIFICATION	3.672513777922459E-5	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993945169683	WITHOUT_CLASSIFICATION	6.054830316933305E-6	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999779630528918	WITHOUT_CLASSIFICATION	2.203694710816599E-5	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999100428102982	WITHOUT_CLASSIFICATION	8.99571897018361E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999979404615625	WITHOUT_CLASSIFICATION	2.0595384374803604E-6	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9998183928126938	WITHOUT_CLASSIFICATION	1.8160718730627455E-4	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999669907946875	WITHOUT_CLASSIFICATION	3.30092053124707E-5	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9999597890781138	WITHOUT_CLASSIFICATION	4.021092188630404E-5	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999372410515831	WITHOUT_CLASSIFICATION	6.275894841688154E-5	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9995627555777696	WITHOUT_CLASSIFICATION	4.372444222303875E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999979404615625	WITHOUT_CLASSIFICATION	2.0595384374803604E-6	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999979404615625	WITHOUT_CLASSIFICATION	2.0595384374803604E-6	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999667375097671	WITHOUT_CLASSIFICATION	3.326249023282594E-5	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999958913848515	WITHOUT_CLASSIFICATION	4.108615148531291E-6	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999087755744	WITHOUT_CLASSIFICATION	9.12244256501514E-8	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9997007843774747	WITHOUT_CLASSIFICATION	2.992156225253263E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9998486522617271	WITHOUT_CLASSIFICATION	1.5134773827290253E-4	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9997416281032759	WITHOUT_CLASSIFICATION	2.5837189672402367E-4	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999828528232362	WITHOUT_CLASSIFICATION	1.7147176763733567E-5	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999491387987189	WITHOUT_CLASSIFICATION	5.086120128093384E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999995640220994	WITHOUT_CLASSIFICATION	4.359779005533413E-7	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999792152678533	WITHOUT_CLASSIFICATION	2.0784732146685542E-5	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999992189213432	WITHOUT_CLASSIFICATION	7.810786567132306E-7	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998360499276528	WITHOUT_CLASSIFICATION	1.6395007234710154E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999901351323013	WITHOUT_CLASSIFICATION	9.864867698778916E-6	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999901351323013	WITHOUT_CLASSIFICATION	9.864867698778916E-6	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999974409701493	WITHOUT_CLASSIFICATION	2.5590298507186427E-6	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999974409701493	WITHOUT_CLASSIFICATION	2.5590298507186427E-6	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999699220787328	WITHOUT_CLASSIFICATION	3.0077921267256506E-5	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999573545037818	WITHOUT_CLASSIFICATION	4.2645496218209564E-5	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999537236431581	WITHOUT_CLASSIFICATION	4.6276356841896233E-4	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999122668161085	WITHOUT_CLASSIFICATION	8.773318389159358E-5	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9899526236826564	WITHOUT_CLASSIFICATION	0.010047376317343546	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999901577265253	WITHOUT_CLASSIFICATION	9.842273474698744E-5	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998058560414783	WITHOUT_CLASSIFICATION	1.9414395852163858E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801187452466	WITHOUT_CLASSIFICATION	1.9881254753446377E-5	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999521054817151	WITHOUT_CLASSIFICATION	4.789451828484493E-5	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.999988941616384	WITHOUT_CLASSIFICATION	1.1058383616017222E-5	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999896934495948	WITHOUT_CLASSIFICATION	1.0306550405347172E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9998456890670574	WITHOUT_CLASSIFICATION	1.5431093294261786E-4	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999319847196284	WITHOUT_CLASSIFICATION	6.801528037162487E-5	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999644430974479	WITHOUT_CLASSIFICATION	3.5556902552111556E-5	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.999992884942936	WITHOUT_CLASSIFICATION	7.115057063971115E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999532034978872	WITHOUT_CLASSIFICATION	4.67965021128409E-5	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999532034978872	WITHOUT_CLASSIFICATION	4.67965021128409E-5	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999532034978872	WITHOUT_CLASSIFICATION	4.67965021128409E-5	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999749623533506	WITHOUT_CLASSIFICATION	2.503764664934573E-5	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.999980952075394	WITHOUT_CLASSIFICATION	1.9047924606026222E-5	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999426408015	WITHOUT_CLASSIFICATION	5.735919850682373E-7	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999131983419856	WITHOUT_CLASSIFICATION	8.680165801439448E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991330814255	WITHOUT_CLASSIFICATION	8.669185744210123E-7	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989567029601	WITHOUT_CLASSIFICATION	1.0432970399393695E-6	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999958641360943	WITHOUT_CLASSIFICATION	4.135863905616662E-6	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999212462827856	WITHOUT_CLASSIFICATION	7.875371721441885E-5	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999354277213753	WITHOUT_CLASSIFICATION	6.457227862469206E-5	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999964813488063	WITHOUT_CLASSIFICATION	3.518651193858077E-6	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9998632833967628	WITHOUT_CLASSIFICATION	1.367166032371412E-4	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999825793105966	WITHOUT_CLASSIFICATION	1.742068940343271E-5	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568591012852	WITHOUT_CLASSIFICATION	2.4314089871490326E-4	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999973486361908	WITHOUT_CLASSIFICATION	2.6513638092187844E-6	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999658181338501	WITHOUT_CLASSIFICATION	3.4181866149991584E-5	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9997309874133355	WITHOUT_CLASSIFICATION	2.6901258666444365E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999959833336697	WITHOUT_CLASSIFICATION	4.016666330348206E-6	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.998694791907776	WITHOUT_CLASSIFICATION	0.0013052080922240888	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9984255686311405	WITHOUT_CLASSIFICATION	0.0015744313688594587	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.999929516836385	WITHOUT_CLASSIFICATION	7.048316361506463E-5	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999997448725623	WITHOUT_CLASSIFICATION	2.55127437635944E-7	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999922756252237	WITHOUT_CLASSIFICATION	7.724374776178605E-6	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999600251986599	WITHOUT_CLASSIFICATION	3.997480134011613E-5	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999873925708072	WITHOUT_CLASSIFICATION	1.2607429192908454E-5	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999706476816366	WITHOUT_CLASSIFICATION	2.9352318363417507E-5	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999015254992297	WITHOUT_CLASSIFICATION	9.847450077028692E-5	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999722597791468	WITHOUT_CLASSIFICATION	2.7740220853167492E-5	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9998782052600385	WITHOUT_CLASSIFICATION	1.2179473996147376E-4	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999790986474435	WITHOUT_CLASSIFICATION	2.0901352556531453E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999450359464426	WITHOUT_CLASSIFICATION	5.496405355738547E-5	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999994850250504	WITHOUT_CLASSIFICATION	5.149749495514859E-7	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.99998188555305	WITHOUT_CLASSIFICATION	1.8114446950057036E-5	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9995760633197394	WITHOUT_CLASSIFICATION	4.2393668026061E-4	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999759114406168	WITHOUT_CLASSIFICATION	2.408855938320898E-5	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999856283332993	WITHOUT_CLASSIFICATION	1.4371666700583909E-5	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999977483048023	WITHOUT_CLASSIFICATION	2.251695197694615E-5	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999797670925507	WITHOUT_CLASSIFICATION	2.0232907449356274E-5	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.9999358177600458	WITHOUT_CLASSIFICATION	6.41822399541473E-5	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9998956892115299	WITHOUT_CLASSIFICATION	1.0431078847001517E-4	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999851085837288	WITHOUT_CLASSIFICATION	1.489141627120019E-5	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999628082087633	WITHOUT_CLASSIFICATION	3.719179123665228E-5	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999977052478674	WITHOUT_CLASSIFICATION	2.2947521326463417E-6	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999825059679073	WITHOUT_CLASSIFICATION	1.749403209274299E-5	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999982753222214	WITHOUT_CLASSIFICATION	1.7246777786126107E-5	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.99999995045871	WITHOUT_CLASSIFICATION	4.954128996650968E-8	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999580838743422	WITHOUT_CLASSIFICATION	4.191612565775893E-5	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.999991069505463	WITHOUT_CLASSIFICATION	8.930494536963622E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999157336396476	WITHOUT_CLASSIFICATION	8.426636035249732E-5	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9994056649476952	WITHOUT_CLASSIFICATION	5.943350523047545E-4	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999934176135934	WITHOUT_CLASSIFICATION	6.582386406592489E-5	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999965334215029	WITHOUT_CLASSIFICATION	3.4665784972343365E-6	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9993189582202395	WITHOUT_CLASSIFICATION	6.810417797603518E-4	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999714060428934	WITHOUT_CLASSIFICATION	2.859395710654936E-5	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999952784421358	WITHOUT_CLASSIFICATION	4.721557864230866E-6	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999517912517034	WITHOUT_CLASSIFICATION	4.820874829656342E-5	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9997708074960349	WITHOUT_CLASSIFICATION	2.291925039650815E-4	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999711108526929	WITHOUT_CLASSIFICATION	2.8889147307114075E-5	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999976934554218	WITHOUT_CLASSIFICATION	2.3065445781749373E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999942037292802	WITHOUT_CLASSIFICATION	5.796270719807936E-6	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999647765440298	WITHOUT_CLASSIFICATION	3.5223455970234814E-5	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999910194165472	WITHOUT_CLASSIFICATION	8.980583452745472E-6	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999969528151674	WITHOUT_CLASSIFICATION	3.04718483264937E-6	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999987081483893	WITHOUT_CLASSIFICATION	1.291851610702642E-6	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999990324425656	WITHOUT_CLASSIFICATION	9.675574344057762E-7	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999997480703186	WITHOUT_CLASSIFICATION	2.519296814086705E-6	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999867945757189	WITHOUT_CLASSIFICATION	1.3205424281163704E-5	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999552900369	WITHOUT_CLASSIFICATION	4.470996309992549E-5	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999989896714895	WITHOUT_CLASSIFICATION	1.010328510500334E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991318910285002	WITHOUT_CLASSIFICATION	8.681089714998474E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991318910285002	WITHOUT_CLASSIFICATION	8.681089714998474E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999981833334425	WITHOUT_CLASSIFICATION	1.8166665576383092E-6	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996121727456173	WITHOUT_CLASSIFICATION	3.8782725438268043E-4	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998711827455151	WITHOUT_CLASSIFICATION	1.288172544849126E-4	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999932090183996	WITHOUT_CLASSIFICATION	6.790981600361051E-6	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998808389713721	WITHOUT_CLASSIFICATION	1.191610286278134E-4	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998949741560106	WITHOUT_CLASSIFICATION	1.0502584398940093E-4	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999531089939979	WITHOUT_CLASSIFICATION	4.6891006001971925E-5	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999913046550356	WITHOUT_CLASSIFICATION	8.695344964314859E-6	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9998698792734176	WITHOUT_CLASSIFICATION	1.3012072658233326E-4	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999915454140167	WITHOUT_CLASSIFICATION	8.454585983393155E-6	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999488190069125	WITHOUT_CLASSIFICATION	5.118099308741374E-5	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999855187497717	WITHOUT_CLASSIFICATION	1.4481250228303487E-5	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.999994242000447	WITHOUT_CLASSIFICATION	5.757999553154389E-6	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999995251373295	WITHOUT_CLASSIFICATION	4.748626705276801E-7	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999974656540987	WITHOUT_CLASSIFICATION	2.534345901379646E-6	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999789651953005	WITHOUT_CLASSIFICATION	2.103480469952669E-5	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999971832105033	WITHOUT_CLASSIFICATION	2.8167894965926997E-6	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9995637428396447	WITHOUT_CLASSIFICATION	4.36257160355336E-4	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9997606883643508	WITHOUT_CLASSIFICATION	2.3931163564918024E-4	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999514857840311	WITHOUT_CLASSIFICATION	4.851421596873099E-5	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.999910891489415	WITHOUT_CLASSIFICATION	8.910851058503703E-5	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999956362842012	WITHOUT_CLASSIFICATION	4.363715798824395E-6	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999192578462389	WITHOUT_CLASSIFICATION	8.07421537610545E-5	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999122162082621	WITHOUT_CLASSIFICATION	8.778379173795278E-5	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999660456140411	WITHOUT_CLASSIFICATION	3.395438595883064E-5	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999857298918733	WITHOUT_CLASSIFICATION	1.4270108126819448E-5	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999967692829731	WITHOUT_CLASSIFICATION	3.2307170270122454E-6	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999933319076986	WITHOUT_CLASSIFICATION	6.668092301385553E-6	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999903535622574	WITHOUT_CLASSIFICATION	9.64643774255E-6	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999981221974231	WITHOUT_CLASSIFICATION	1.87780257686942E-6	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999562148109229	WITHOUT_CLASSIFICATION	4.3785189077100393E-5	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999657452235174	WITHOUT_CLASSIFICATION	3.4254776482575037E-5	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999963350362335	WITHOUT_CLASSIFICATION	3.664963766515108E-6	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999603700814179	WITHOUT_CLASSIFICATION	3.962991858216402E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9994911141354502	WITHOUT_CLASSIFICATION	5.088858645497681E-4	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9994911141354502	WITHOUT_CLASSIFICATION	5.088858645497681E-4	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998141524113899	WITHOUT_CLASSIFICATION	1.858475886100954E-4	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999671424658096	WITHOUT_CLASSIFICATION	3.2857534190414905E-5	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999912917481035	WITHOUT_CLASSIFICATION	8.708251896477932E-6	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9998936242782711	WITHOUT_CLASSIFICATION	1.0637572172885109E-4	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999592968545201	WITHOUT_CLASSIFICATION	4.070314547985457E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9987178054622845	WITHOUT_CLASSIFICATION	0.001282194537715512	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999782224833031	WITHOUT_CLASSIFICATION	2.1777516696885166E-5	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999835687515368	WITHOUT_CLASSIFICATION	1.643124846316599E-5	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999960820037951	WITHOUT_CLASSIFICATION	3.91799620491294E-6	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999976994815131	WITHOUT_CLASSIFICATION	2.300518486896246E-6	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999844769799456	WITHOUT_CLASSIFICATION	1.5523020054374994E-5	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998758922563326	WITHOUT_CLASSIFICATION	1.2410774366738018E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999044494672835	WITHOUT_CLASSIFICATION	9.555053271654136E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9983170542267945	WITHOUT_CLASSIFICATION	0.0016829457732054414	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999627244082295	WITHOUT_CLASSIFICATION	3.727559177044395E-5	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999964535499415	WITHOUT_CLASSIFICATION	3.5464500584419485E-6	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998991618824926	WITHOUT_CLASSIFICATION	1.0083811750746162E-4	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998991618824926	WITHOUT_CLASSIFICATION	1.0083811750746162E-4	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999612804860431	WITHOUT_CLASSIFICATION	3.871951395690097E-4	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999399723893828	WITHOUT_CLASSIFICATION	6.0027610617201184E-5	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999883415213637	WITHOUT_CLASSIFICATION	1.1658478636167219E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999836445104469	WITHOUT_CLASSIFICATION	1.635548955318684E-5	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999986464245719	WITHOUT_CLASSIFICATION	1.3535754281673077E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9998456890670574	WITHOUT_CLASSIFICATION	1.5431093294261786E-4	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.98751935342332	WITHOUT_CLASSIFICATION	0.012480646576680085	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998952164882	WITHOUT_CLASSIFICATION	1.047835117958232E-7	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999976257142218	WITHOUT_CLASSIFICATION	2.374285778212235E-6	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999997952519131	WITHOUT_CLASSIFICATION	2.0474808688790107E-7	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999972809743578	WITHOUT_CLASSIFICATION	2.7190256422747345E-6	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999972809743578	WITHOUT_CLASSIFICATION	2.7190256422747345E-6	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9996973842535082	WITHOUT_CLASSIFICATION	3.0261574649182815E-4	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999911815010494	WITHOUT_CLASSIFICATION	8.818498950656634E-6	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999996248737961	WITHOUT_CLASSIFICATION	3.75126203932329E-7	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999854968557304	WITHOUT_CLASSIFICATION	1.450314426959184E-4	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999655276347025	WITHOUT_CLASSIFICATION	3.447236529747461E-5	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9755325438090057	WITHOUT_CLASSIFICATION	0.024467456190994434	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999776386115747	WITHOUT_CLASSIFICATION	2.2361388425301924E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997344906944893	WITHOUT_CLASSIFICATION	2.655093055107023E-4	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999447295293412	WITHOUT_CLASSIFICATION	5.5270470658844205E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999387423678707	WITHOUT_CLASSIFICATION	6.125763212922799E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999908327056881	WITHOUT_CLASSIFICATION	9.167294311955177E-6	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998978754118061	WITHOUT_CLASSIFICATION	1.0212458819395105E-4	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9998393869430213	WITHOUT_CLASSIFICATION	1.606130569786689E-4	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.999727985736744	WITHOUT_CLASSIFICATION	2.720142632560211E-4	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999886774291323	WITHOUT_CLASSIFICATION	1.1322570867625298E-5	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998622672945418	WITHOUT_CLASSIFICATION	1.377327054582179E-4	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999984701682495	WITHOUT_CLASSIFICATION	1.5298317504414119E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999987054124326	WITHOUT_CLASSIFICATION	1.2945875674020214E-5	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999972236217022	WITHOUT_CLASSIFICATION	2.7763782977513747E-6	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999888341986383	WITHOUT_CLASSIFICATION	1.1165801361789619E-5	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998596592957247	WITHOUT_CLASSIFICATION	1.4034070427523522E-4	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999692302866366	WITHOUT_CLASSIFICATION	3.076971336327755E-5	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999960795379816	WITHOUT_CLASSIFICATION	3.920462018327916E-6	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999039136655943	WITHOUT_CLASSIFICATION	9.60863344057332E-5	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999332450687827	WITHOUT_CLASSIFICATION	6.67549312173983E-5	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9997736444014879	WITHOUT_CLASSIFICATION	2.263555985120073E-4	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999849383051687	WITHOUT_CLASSIFICATION	1.5061694831400853E-5	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999969205086876	WITHOUT_CLASSIFICATION	3.0794913124259734E-6	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999923084598534	WITHOUT_CLASSIFICATION	7.691540146516971E-6	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999979636124025	WITHOUT_CLASSIFICATION	2.0363875975665523E-6	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999360491541863	WITHOUT_CLASSIFICATION	6.395084581366226E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999450138194496	WITHOUT_CLASSIFICATION	5.4986180550451934E-5	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999553655445999	WITHOUT_CLASSIFICATION	4.4634455400097806E-5	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9999274530976301	WITHOUT_CLASSIFICATION	7.254690236991884E-5	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999970841991575	WITHOUT_CLASSIFICATION	2.9158008424934284E-5	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.999987359338026	WITHOUT_CLASSIFICATION	1.2640661974119481E-5	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999939331618266	WITHOUT_CLASSIFICATION	6.0668381733597006E-6	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998421523942838	WITHOUT_CLASSIFICATION	1.578476057162754E-4	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999455554964337	WITHOUT_CLASSIFICATION	5.444450356623093E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999455554964337	WITHOUT_CLASSIFICATION	5.444450356623093E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999863346536025	WITHOUT_CLASSIFICATION	1.3665346397383026E-5	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999967307304299	WITHOUT_CLASSIFICATION	3.269269570139505E-6	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9997805040250368	WITHOUT_CLASSIFICATION	2.1949597496318606E-4	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9998899294300754	WITHOUT_CLASSIFICATION	1.100705699246553E-4	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999990745790979	WITHOUT_CLASSIFICATION	9.254209020955773E-6	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999944901288362	WITHOUT_CLASSIFICATION	5.509871163769829E-6	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999996328337568	WITHOUT_CLASSIFICATION	3.6716624320736833E-7	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999898120480184	WITHOUT_CLASSIFICATION	1.01879519816369E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999863346536025	WITHOUT_CLASSIFICATION	1.3665346397383026E-5	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999967307304299	WITHOUT_CLASSIFICATION	3.269269570139505E-6	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999984558216982	WITHOUT_CLASSIFICATION	1.5441783017784272E-6	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999938882110093	WITHOUT_CLASSIFICATION	6.111788990709873E-5	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999911332702386	WITHOUT_CLASSIFICATION	8.866729761468456E-6	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999754186630061	WITHOUT_CLASSIFICATION	2.458133699393069E-5	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999980295813543	WITHOUT_CLASSIFICATION	1.970418645710265E-6	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999759214554708	WITHOUT_CLASSIFICATION	2.4078544529208767E-5	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999998181270447	WITHOUT_CLASSIFICATION	1.8187295533986938E-7	DEFECT
}	WITHOUT_CLASSIFICATION	0.9984486078436705	WITHOUT_CLASSIFICATION	0.0015513921563294682	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999038107554684	WITHOUT_CLASSIFICATION	9.618924453168182E-5	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5160858618410133	WITHOUT_CLASSIFICATION	0.48391413815898654	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999454067996223	WITHOUT_CLASSIFICATION	5.459320037765452E-5	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5160858618410133	WITHOUT_CLASSIFICATION	0.48391413815898654	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999463357074875	WITHOUT_CLASSIFICATION	5.3664292512475017E-5	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999941260851407	WITHOUT_CLASSIFICATION	5.873914859232428E-6	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998975910863468	WITHOUT_CLASSIFICATION	1.0240891365325123E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984057786387	WITHOUT_CLASSIFICATION	1.5942213612242105E-6	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999454616583027	WITHOUT_CLASSIFICATION	5.4538341697378724E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9984486078436705	WITHOUT_CLASSIFICATION	0.0015513921563294682	DEFECT
}	WITHOUT_CLASSIFICATION	0.9984486078436705	WITHOUT_CLASSIFICATION	0.0015513921563294682	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999926250154068	WITHOUT_CLASSIFICATION	7.37498459320037E-6	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999986136986181	WITHOUT_CLASSIFICATION	1.3863013819592068E-6	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999933018293263	WITHOUT_CLASSIFICATION	6.698170673649711E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999846158126547	WITHOUT_CLASSIFICATION	1.538418734531397E-5	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999893466893609	WITHOUT_CLASSIFICATION	1.065331063907765E-5	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999815355813864	WITHOUT_CLASSIFICATION	1.8464418613638235E-5	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999950186062969	WITHOUT_CLASSIFICATION	4.981393703033832E-6	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999963909320612	WITHOUT_CLASSIFICATION	3.60906793887141E-6	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999985233872029	WITHOUT_CLASSIFICATION	1.476612797223122E-6	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9986309410846617	WITHOUT_CLASSIFICATION	0.0013690589153382935	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9998600640135927	WITHOUT_CLASSIFICATION	1.3993598640726017E-4	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999668838079905	WITHOUT_CLASSIFICATION	3.31161920095607E-5	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999872259173372	WITHOUT_CLASSIFICATION	1.2774082662765647E-5	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999042434897496	WITHOUT_CLASSIFICATION	9.575651025036466E-5	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.999966754873717	WITHOUT_CLASSIFICATION	3.3245126282919856E-5	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999979684163678	WITHOUT_CLASSIFICATION	2.031583632208799E-6	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999993286057415	WITHOUT_CLASSIFICATION	6.713942585076378E-6	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999929644587914	WITHOUT_CLASSIFICATION	7.035541208602356E-6	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999749050492835	WITHOUT_CLASSIFICATION	2.5094950716396827E-5	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999995080489177	WITHOUT_CLASSIFICATION	4.919510822205248E-7	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9979593114429216	WITHOUT_CLASSIFICATION	0.0020406885570785206	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999744825346693	WITHOUT_CLASSIFICATION	2.5517465330761316E-5	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9990934672587212	WITHOUT_CLASSIFICATION	9.065327412787971E-4	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999723828995232	WITHOUT_CLASSIFICATION	2.7617100476900553E-5	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999989636179986	WITHOUT_CLASSIFICATION	1.036382001444359E-6	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999964738389082	WITHOUT_CLASSIFICATION	3.5261610917094238E-6	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9992395503175902	WITHOUT_CLASSIFICATION	7.60449682409894E-4	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999799601962924	WITHOUT_CLASSIFICATION	2.003980370762772E-5	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999479518095463	WITHOUT_CLASSIFICATION	5.204819045373064E-5	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.999982470988903	WITHOUT_CLASSIFICATION	1.7529011096967672E-5	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999841161707688	WITHOUT_CLASSIFICATION	1.5883829231283828E-5	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9907934978941483	WITHOUT_CLASSIFICATION	0.009206502105851742	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.999937427247941	WITHOUT_CLASSIFICATION	6.257275205897054E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999963909320612	WITHOUT_CLASSIFICATION	3.60906793887141E-6	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998675961345918	WITHOUT_CLASSIFICATION	1.324038654081284E-4	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999727238821284	WITHOUT_CLASSIFICATION	2.7276117871577066E-5	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.7030696427481351	DEFECT	0.2969303572518648	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.999979341786909	WITHOUT_CLASSIFICATION	2.065821309112241E-5	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999967642128077	WITHOUT_CLASSIFICATION	3.2357871923274715E-6	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999931920530639	WITHOUT_CLASSIFICATION	6.807946936030776E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999846158126547	WITHOUT_CLASSIFICATION	1.538418734531397E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999846158126547	WITHOUT_CLASSIFICATION	1.538418734531397E-5	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999987032425642	WITHOUT_CLASSIFICATION	1.2967574357515064E-6	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999877979593734	WITHOUT_CLASSIFICATION	1.2202040626656434E-5	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9999655781217544	WITHOUT_CLASSIFICATION	3.442187824568708E-5	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999957180962504	WITHOUT_CLASSIFICATION	4.2819037496406224E-6	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.999993395873332	WITHOUT_CLASSIFICATION	6.604126668009177E-6	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999835945004471	WITHOUT_CLASSIFICATION	1.6405499552901525E-4	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999006648307864	WITHOUT_CLASSIFICATION	9.93351692135676E-5	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999433907822601	WITHOUT_CLASSIFICATION	5.6609217739790356E-5	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999972908415314	WITHOUT_CLASSIFICATION	2.7091584684504296E-6	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999455445406549	WITHOUT_CLASSIFICATION	5.445545934517598E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999947519899414	WITHOUT_CLASSIFICATION	5.248010058571922E-6	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999914456547472	WITHOUT_CLASSIFICATION	8.554345252845547E-6	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9912385352580578	WITHOUT_CLASSIFICATION	0.008761464741942117	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999863346536025	WITHOUT_CLASSIFICATION	1.3665346397383026E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999947519899414	WITHOUT_CLASSIFICATION	5.248010058571922E-6	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9996538365354444	WITHOUT_CLASSIFICATION	3.461634645556763E-4	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998316648314884	WITHOUT_CLASSIFICATION	1.683351685114834E-4	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999816144527935	WITHOUT_CLASSIFICATION	1.838554720649096E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.865896723463111	DEFECT	0.13410327653688894	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9912385352580578	WITHOUT_CLASSIFICATION	0.008761464741942117	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999401001511482	WITHOUT_CLASSIFICATION	5.9899848851877816E-5	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998090704993626	WITHOUT_CLASSIFICATION	1.9092950063734083E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999997348450846	WITHOUT_CLASSIFICATION	2.651549154055714E-6	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999830333728178	WITHOUT_CLASSIFICATION	1.6966627182155338E-5	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.997785749558266	WITHOUT_CLASSIFICATION	0.002214250441733962	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999728894553408	WITHOUT_CLASSIFICATION	2.7110544659211897E-5	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999037554028564	WITHOUT_CLASSIFICATION	9.624459714361522E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998182256326361	WITHOUT_CLASSIFICATION	1.8177436736388592E-4	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999993647331096	WITHOUT_CLASSIFICATION	6.35266890458916E-7	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999997793250394	WITHOUT_CLASSIFICATION	2.206749607017752E-7	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999830493411536	WITHOUT_CLASSIFICATION	1.695065884642997E-5	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999807986213691	WITHOUT_CLASSIFICATION	1.9201378630919096E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999947519899414	WITHOUT_CLASSIFICATION	5.248010058571922E-6	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999401001511482	WITHOUT_CLASSIFICATION	5.9899848851877816E-5	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999997348450846	WITHOUT_CLASSIFICATION	2.651549154055714E-6	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999198029245555	WITHOUT_CLASSIFICATION	8.019707544453703E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999812954873719	WITHOUT_CLASSIFICATION	1.8704512628023854E-5	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999528716332887	WITHOUT_CLASSIFICATION	4.7128366711291E-5	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9912385352580578	WITHOUT_CLASSIFICATION	0.008761464741942117	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999988107572448	WITHOUT_CLASSIFICATION	1.1892427551855798E-6	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9995922270091769	WITHOUT_CLASSIFICATION	4.077729908230832E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.994795053365308	WITHOUT_CLASSIFICATION	0.005204946634691965	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.998651018722701	WITHOUT_CLASSIFICATION	0.001348981277299028	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998182256326361	WITHOUT_CLASSIFICATION	1.8177436736388592E-4	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9996538365354444	WITHOUT_CLASSIFICATION	3.461634645556763E-4	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9989765361657625	WITHOUT_CLASSIFICATION	0.0010234638342375589	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999919892629949	WITHOUT_CLASSIFICATION	8.010737004992194E-6	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999944104113407	WITHOUT_CLASSIFICATION	5.589588659242689E-6	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999987082559324	WITHOUT_CLASSIFICATION	1.2917440675975013E-5	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999761290278217	WITHOUT_CLASSIFICATION	2.3870972178322383E-5	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999805196602852	WITHOUT_CLASSIFICATION	1.9480339714826284E-5	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9998116501008779	WITHOUT_CLASSIFICATION	1.883498991220148E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984057786387	WITHOUT_CLASSIFICATION	1.5942213612242105E-6	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982552867002	WITHOUT_CLASSIFICATION	1.7447132998049876E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9797020196648566	WITHOUT_CLASSIFICATION	0.020297980335143323	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999804078584558	WITHOUT_CLASSIFICATION	1.9592141544203985E-5	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9995341944630697	WITHOUT_CLASSIFICATION	4.6580553693032525E-4	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999194025632074	WITHOUT_CLASSIFICATION	8.059743679254602E-5	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999627212694251	WITHOUT_CLASSIFICATION	3.727873057493084E-5	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999997678480705	WITHOUT_CLASSIFICATION	2.321519294984085E-6	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9999566291598864	WITHOUT_CLASSIFICATION	4.337084011361433E-5	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999998582673611	WITHOUT_CLASSIFICATION	1.4173263890034397E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.998651018722701	WITHOUT_CLASSIFICATION	0.001348981277299028	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9797020196648566	WITHOUT_CLASSIFICATION	0.020297980335143323	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9973884136376153	WITHOUT_CLASSIFICATION	0.00261158636238456	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.99894226321889	WITHOUT_CLASSIFICATION	0.001057736781109961	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9997025280072328	WITHOUT_CLASSIFICATION	2.9747199276716573E-4	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998830738458452	WITHOUT_CLASSIFICATION	1.1692615415487137E-4	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9997167682941391	WITHOUT_CLASSIFICATION	2.832317058608979E-4	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999980367246677	WITHOUT_CLASSIFICATION	1.9632753322945318E-6	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998669846911215	WITHOUT_CLASSIFICATION	1.3301530887848914E-4	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.999826586633879	WITHOUT_CLASSIFICATION	1.7341336612099537E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999988381538962	WITHOUT_CLASSIFICATION	1.161846103735931E-6	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9996208913926736	WITHOUT_CLASSIFICATION	3.7910860732633827E-4	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999953600988686	WITHOUT_CLASSIFICATION	4.639901131443765E-6	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999572311262573	WITHOUT_CLASSIFICATION	4.276887374268751E-5	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999749856900204	WITHOUT_CLASSIFICATION	2.5014309979559604E-5	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9998966749821269	WITHOUT_CLASSIFICATION	1.0332501787312604E-4	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9994851195770548	WITHOUT_CLASSIFICATION	5.148804229452781E-4	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999845753466016	WITHOUT_CLASSIFICATION	1.542465339843893E-5	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999998936141545	WITHOUT_CLASSIFICATION	1.0638584550187523E-6	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999954667535171	WITHOUT_CLASSIFICATION	4.533246482885011E-6	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9997715703402432	WITHOUT_CLASSIFICATION	2.2842965975666823E-4	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999846405170395	WITHOUT_CLASSIFICATION	1.5359482960491013E-5	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9992267260409049	WITHOUT_CLASSIFICATION	7.732739590950469E-4	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999975190891903	WITHOUT_CLASSIFICATION	2.4809108095767943E-6	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999974950854738	WITHOUT_CLASSIFICATION	2.504914526165559E-6	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999899607771605	WITHOUT_CLASSIFICATION	1.0039222839477893E-5	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999984732964708	WITHOUT_CLASSIFICATION	1.5267035291408234E-6	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7866754289112605	WITHOUT_CLASSIFICATION	0.21332457108873945	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9997701762648995	WITHOUT_CLASSIFICATION	2.298237351005437E-4	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998456140007138	WITHOUT_CLASSIFICATION	1.5438599928632068E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999274882991718	WITHOUT_CLASSIFICATION	7.251170082821255E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5450188843729956	WITHOUT_CLASSIFICATION	0.4549811156270044	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998487878155867	WITHOUT_CLASSIFICATION	1.5121218441320767E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996424609361904	WITHOUT_CLASSIFICATION	3.5753906380971476E-4	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999784384835341	WITHOUT_CLASSIFICATION	2.156151646592907E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999969863439343	WITHOUT_CLASSIFICATION	3.0136560657180487E-6	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999424331762372	WITHOUT_CLASSIFICATION	5.756682376283467E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999753880346182	WITHOUT_CLASSIFICATION	2.4611965381809678E-5	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999871598482328	WITHOUT_CLASSIFICATION	1.284015176706303E-5	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999989710634306	WITHOUT_CLASSIFICATION	1.0289365694161875E-6	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999753880346182	WITHOUT_CLASSIFICATION	2.4611965381809678E-5	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999424331762372	WITHOUT_CLASSIFICATION	5.756682376283467E-5	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999871598482328	WITHOUT_CLASSIFICATION	1.284015176706303E-5	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999829439877337	WITHOUT_CLASSIFICATION	1.7056012266308192E-5	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999866441193317	WITHOUT_CLASSIFICATION	1.3355880668415566E-5	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999815463828797	WITHOUT_CLASSIFICATION	1.8453617120264373E-5	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998451430924005	WITHOUT_CLASSIFICATION	1.5485690759948933E-4	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999747306588	WITHOUT_CLASSIFICATION	2.526934125768247E-8	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9829326368796383	WITHOUT_CLASSIFICATION	0.01706736312036172	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9987404368144552	WITHOUT_CLASSIFICATION	0.0012595631855448254	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999920027967154	WITHOUT_CLASSIFICATION	7.997203284700408E-6	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999806867335971	WITHOUT_CLASSIFICATION	1.9313266402943023E-5	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999656334499899	WITHOUT_CLASSIFICATION	3.43665500101238E-5	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.999974349016187	WITHOUT_CLASSIFICATION	2.565098381301594E-5	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999931283829258	WITHOUT_CLASSIFICATION	6.871617074284687E-6	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999978164234888	WITHOUT_CLASSIFICATION	2.1835765111103237E-6	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998451430924005	WITHOUT_CLASSIFICATION	1.5485690759948933E-4	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999997057672405	WITHOUT_CLASSIFICATION	2.942327593935254E-7	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999801484442824	WITHOUT_CLASSIFICATION	1.9851555717622354E-5	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999966535612406	WITHOUT_CLASSIFICATION	3.346438759411454E-5	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999399321467811	WITHOUT_CLASSIFICATION	6.006785321885208E-5	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999997772479435	WITHOUT_CLASSIFICATION	2.2275205646532406E-7	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.99999648385632	WITHOUT_CLASSIFICATION	3.5161436799462237E-6	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9994376942683599	WITHOUT_CLASSIFICATION	5.623057316401126E-4	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999909437355877	WITHOUT_CLASSIFICATION	9.05626441223287E-6	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998844443243027	WITHOUT_CLASSIFICATION	1.1555567569735239E-4	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999223670140361	WITHOUT_CLASSIFICATION	7.763298596386268E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999956249797752	WITHOUT_CLASSIFICATION	4.375020224804272E-6	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999956249797752	WITHOUT_CLASSIFICATION	4.375020224804272E-6	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999752789035352	WITHOUT_CLASSIFICATION	2.4721096464797158E-5	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999752789035352	WITHOUT_CLASSIFICATION	2.4721096464797158E-5	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9999225642682784	WITHOUT_CLASSIFICATION	7.743573172155572E-5	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999966535612406	WITHOUT_CLASSIFICATION	3.346438759411454E-5	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999899837057598	WITHOUT_CLASSIFICATION	1.0016294240321853E-5	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999922628875313	WITHOUT_CLASSIFICATION	7.737112468817204E-6	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999990282767877	WITHOUT_CLASSIFICATION	9.717232123703674E-7	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999990282767877	WITHOUT_CLASSIFICATION	9.717232123703674E-7	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999706645324148	WITHOUT_CLASSIFICATION	2.9335467585176808E-5	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999977969482369	WITHOUT_CLASSIFICATION	2.2030517631501673E-6	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999999401788308	WITHOUT_CLASSIFICATION	5.982116919372651E-7	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999940443363072	WITHOUT_CLASSIFICATION	5.955663692734943E-6	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9995505715637635	WITHOUT_CLASSIFICATION	4.494284362365581E-4	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9995980305104712	WITHOUT_CLASSIFICATION	4.0196948952874785E-4	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999340421552103	WITHOUT_CLASSIFICATION	6.595784478966677E-5	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999995255259766	WITHOUT_CLASSIFICATION	4.744740234048596E-6	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999305542274222	WITHOUT_CLASSIFICATION	6.944577257789964E-5	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9994682842367489	WITHOUT_CLASSIFICATION	5.317157632509788E-4	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.9999007049137092	WITHOUT_CLASSIFICATION	9.929508629082421E-5	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.999914132070182	WITHOUT_CLASSIFICATION	8.586792981809532E-5	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999982192793012	WITHOUT_CLASSIFICATION	1.7807206988906038E-6	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999917943089529	WITHOUT_CLASSIFICATION	8.205691047022318E-6	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998217025095157	WITHOUT_CLASSIFICATION	1.782974904841978E-4	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999846491610733	WITHOUT_CLASSIFICATION	1.5350838926604387E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259898130867	WITHOUT_CLASSIFICATION	7.401018691335035E-5	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999906153553105	WITHOUT_CLASSIFICATION	9.384644689511469E-6	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999639623324101	WITHOUT_CLASSIFICATION	3.603766758987163E-5	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999984558141372	WITHOUT_CLASSIFICATION	1.5441858628312313E-6	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999945354342854	WITHOUT_CLASSIFICATION	5.464565714645232E-6	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999904177339453	WITHOUT_CLASSIFICATION	9.582266054659929E-6	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999957995995405	WITHOUT_CLASSIFICATION	4.200400459528938E-6	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999542291266161	WITHOUT_CLASSIFICATION	4.577087338380183E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.998319873953718	WITHOUT_CLASSIFICATION	0.001680126046281956	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999883309171955	WITHOUT_CLASSIFICATION	1.1669082804516273E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9797020196648566	WITHOUT_CLASSIFICATION	0.020297980335143323	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999572311262573	WITHOUT_CLASSIFICATION	4.276887374268751E-5	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999550560017522	WITHOUT_CLASSIFICATION	4.494399824789463E-5	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999538228808237	WITHOUT_CLASSIFICATION	4.617711917620685E-5	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716660862373	WITHOUT_CLASSIFICATION	1.2833391376266726E-4	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998837100210914	WITHOUT_CLASSIFICATION	1.1628997890856934E-4	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999212395595362	WITHOUT_CLASSIFICATION	7.876044046381059E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999212395595362	WITHOUT_CLASSIFICATION	7.876044046381059E-5	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999514930265975	WITHOUT_CLASSIFICATION	4.850697340263214E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999342004827982	WITHOUT_CLASSIFICATION	6.579951720177347E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9995267420033379	WITHOUT_CLASSIFICATION	4.7325799666211095E-4	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9995267420033379	WITHOUT_CLASSIFICATION	4.7325799666211095E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995620252642977	WITHOUT_CLASSIFICATION	4.3797473570236366E-4	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9996458308542322	WITHOUT_CLASSIFICATION	3.5416914576782656E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9993516032232092	WITHOUT_CLASSIFICATION	6.483967767907209E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9998486522617271	WITHOUT_CLASSIFICATION	1.5134773827290253E-4	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999839861778991	WITHOUT_CLASSIFICATION	1.601382210099725E-5	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999545083991416	WITHOUT_CLASSIFICATION	4.54916008583592E-5	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999007009399491	WITHOUT_CLASSIFICATION	9.929906005086283E-5	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999932876172895	WITHOUT_CLASSIFICATION	6.712382710499287E-6	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999247258371733	WITHOUT_CLASSIFICATION	7.527416282665301E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999247258371733	WITHOUT_CLASSIFICATION	7.527416282665301E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999954355280006	WITHOUT_CLASSIFICATION	4.564471999352681E-6	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.999992199397417	WITHOUT_CLASSIFICATION	7.800602582931923E-6	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.999992199397417	WITHOUT_CLASSIFICATION	7.800602582931923E-6	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999937012848504	WITHOUT_CLASSIFICATION	6.298715149598042E-5	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999970337949263	WITHOUT_CLASSIFICATION	2.9662050737207303E-6	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9221058217111521	WITHOUT_CLASSIFICATION	0.07789417828884797	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999752657245979	WITHOUT_CLASSIFICATION	2.4734275402066336E-5	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999960530264699	WITHOUT_CLASSIFICATION	3.946973530026979E-6	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999999477817587	WITHOUT_CLASSIFICATION	5.221824129592555E-7	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999710465383703	WITHOUT_CLASSIFICATION	2.8953461629790728E-5	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999869360023981	WITHOUT_CLASSIFICATION	1.3063997601853107E-5	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999968112063689	WITHOUT_CLASSIFICATION	3.1887936310071745E-6	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998804359236628	WITHOUT_CLASSIFICATION	1.1956407633716201E-4	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999880582892214	WITHOUT_CLASSIFICATION	1.1941710778521951E-5	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998400699171204	WITHOUT_CLASSIFICATION	1.5993008287959313E-4	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9995550602115578	WITHOUT_CLASSIFICATION	4.449397884422113E-4	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9995550602115578	WITHOUT_CLASSIFICATION	4.449397884422113E-4	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9995550602115578	WITHOUT_CLASSIFICATION	4.449397884422113E-4	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9995550602115578	WITHOUT_CLASSIFICATION	4.449397884422113E-4	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999764086553913	WITHOUT_CLASSIFICATION	2.3591344608769192E-5	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997471135617995	WITHOUT_CLASSIFICATION	2.5288643820053057E-4	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999046660569423	WITHOUT_CLASSIFICATION	9.53339430577304E-5	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999019686139726	WITHOUT_CLASSIFICATION	9.803138602736251E-5	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999964693465965	WITHOUT_CLASSIFICATION	3.530653403467254E-6	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9999574701700086	WITHOUT_CLASSIFICATION	4.2529829991426186E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9998456890670574	WITHOUT_CLASSIFICATION	1.5431093294261786E-4	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999885685594123	WITHOUT_CLASSIFICATION	1.1431440587803342E-5	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998921498568385	WITHOUT_CLASSIFICATION	1.0785014316159193E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9998456890670574	WITHOUT_CLASSIFICATION	1.5431093294261786E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9998456890670574	WITHOUT_CLASSIFICATION	1.5431093294261786E-4	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999994536692783	WITHOUT_CLASSIFICATION	5.463307216673995E-7	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999570280927662	WITHOUT_CLASSIFICATION	4.297190723377444E-5	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999927066884815	WITHOUT_CLASSIFICATION	7.293311518469041E-6	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999927976596166	WITHOUT_CLASSIFICATION	7.202340383348519E-6	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999995710552516	WITHOUT_CLASSIFICATION	4.2894474838487387E-7	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9991396110055112	WITHOUT_CLASSIFICATION	8.603889944888079E-4	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999966705133524	WITHOUT_CLASSIFICATION	3.329486647589839E-6	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999927976596166	WITHOUT_CLASSIFICATION	7.202340383348519E-6	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9997183222730965	WITHOUT_CLASSIFICATION	2.8167772690350417E-4	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998274779520919	WITHOUT_CLASSIFICATION	1.725220479081037E-4	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999990120144058	WITHOUT_CLASSIFICATION	9.87985594205052E-6	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999204676745024	WITHOUT_CLASSIFICATION	7.953232549765662E-5	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999305474155497	WITHOUT_CLASSIFICATION	6.945258445030792E-5	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998688031075063	WITHOUT_CLASSIFICATION	1.3119689249361431E-4	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999783959433384	WITHOUT_CLASSIFICATION	2.1604056661542285E-5	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999448476585223	WITHOUT_CLASSIFICATION	5.5152341477762404E-5	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984781847946	WITHOUT_CLASSIFICATION	1.5218152054779474E-6	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999700319819566	WITHOUT_CLASSIFICATION	2.996801804344021E-5	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999832551657	WITHOUT_CLASSIFICATION	1.6744834300677436E-6	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999757863236737	WITHOUT_CLASSIFICATION	2.421367632623892E-5	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9996239760885187	WITHOUT_CLASSIFICATION	3.7602391148135395E-4	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998480533886073	WITHOUT_CLASSIFICATION	1.5194661139263392E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999137147245286	WITHOUT_CLASSIFICATION	8.628527547139434E-5	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999920643970738	WITHOUT_CLASSIFICATION	7.935602926160076E-6	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999913405200729	WITHOUT_CLASSIFICATION	8.659479927074525E-6	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999855294405453	WITHOUT_CLASSIFICATION	1.4470559454770742E-5	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999818646794914	WITHOUT_CLASSIFICATION	1.813532050868819E-5	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999855294405453	WITHOUT_CLASSIFICATION	1.4470559454770742E-5	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999857540985796	WITHOUT_CLASSIFICATION	1.424590142039733E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998536761191616	WITHOUT_CLASSIFICATION	1.463238808383844E-4	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.999996036510143	WITHOUT_CLASSIFICATION	3.963489856985582E-6	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999784249002726	WITHOUT_CLASSIFICATION	2.157509972739153E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999985021304589	WITHOUT_CLASSIFICATION	1.497869541062701E-6	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999343112492601	WITHOUT_CLASSIFICATION	6.56887507398869E-5	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999836102157598	WITHOUT_CLASSIFICATION	1.6389784240190402E-5	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999913405200729	WITHOUT_CLASSIFICATION	8.659479927074525E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999818646794914	WITHOUT_CLASSIFICATION	1.813532050868819E-5	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999857540985796	WITHOUT_CLASSIFICATION	1.424590142039733E-5	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999768776315523	WITHOUT_CLASSIFICATION	2.3122368447740454E-5	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9997777520993348	WITHOUT_CLASSIFICATION	2.222479006652302E-4	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9999099421922015	WITHOUT_CLASSIFICATION	9.005780779840542E-5	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999932202087345	WITHOUT_CLASSIFICATION	6.779791265544368E-6	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.999967140043479	WITHOUT_CLASSIFICATION	3.285995652105584E-5	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998844084877918	WITHOUT_CLASSIFICATION	1.1559151220811624E-4	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998214810425006	WITHOUT_CLASSIFICATION	1.7851895749956823E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259898130867	WITHOUT_CLASSIFICATION	7.401018691335035E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998536761191616	WITHOUT_CLASSIFICATION	1.463238808383844E-4	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999992353142451	WITHOUT_CLASSIFICATION	7.646857550572917E-7	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.999992187814277	WITHOUT_CLASSIFICATION	7.812185722985303E-6	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9988818580161327	WITHOUT_CLASSIFICATION	0.0011181419838673103	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999989499177179	WITHOUT_CLASSIFICATION	1.0500822821675831E-6	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259898130867	WITHOUT_CLASSIFICATION	7.401018691335035E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9797020196648566	WITHOUT_CLASSIFICATION	0.020297980335143323	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999971969019068	WITHOUT_CLASSIFICATION	2.8030980932571152E-6	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259898130867	WITHOUT_CLASSIFICATION	7.401018691335035E-5	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999951507686524	WITHOUT_CLASSIFICATION	4.849231347624354E-6	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998703990930852	WITHOUT_CLASSIFICATION	1.29600906914778E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9797020196648566	WITHOUT_CLASSIFICATION	0.020297980335143323	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999471013703077	WITHOUT_CLASSIFICATION	5.289862969219478E-5	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999886657180747	WITHOUT_CLASSIFICATION	1.1334281925257525E-5	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999861156383887	WITHOUT_CLASSIFICATION	1.3884361611301791E-5	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9999309979466537	WITHOUT_CLASSIFICATION	6.90020533462598E-5	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999683522134234	WITHOUT_CLASSIFICATION	3.164778657661579E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999971537104948	WITHOUT_CLASSIFICATION	2.846289505161402E-6	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999980762237692	WITHOUT_CLASSIFICATION	1.92377623078175E-6	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.999994501375183	WITHOUT_CLASSIFICATION	5.498624816927214E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991318910285002	WITHOUT_CLASSIFICATION	8.681089714998474E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999968743590526	WITHOUT_CLASSIFICATION	3.125640947419933E-6	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9221058217111521	WITHOUT_CLASSIFICATION	0.07789417828884797	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999835991109025	WITHOUT_CLASSIFICATION	1.6400889097539172E-5	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9995875683208648	WITHOUT_CLASSIFICATION	4.124316791351196E-4	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999940662232794	WITHOUT_CLASSIFICATION	5.9337767206355924E-6	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999968384765747	WITHOUT_CLASSIFICATION	3.161523425296579E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999973081446168	WITHOUT_CLASSIFICATION	2.6918553830955797E-6	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999992207752468	WITHOUT_CLASSIFICATION	7.79224753196267E-7	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999723247243605	WITHOUT_CLASSIFICATION	2.7675275639482466E-5	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999928005688187	WITHOUT_CLASSIFICATION	7.199431181339796E-6	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999670277123223	WITHOUT_CLASSIFICATION	3.2972287677710655E-5	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999862961359726	WITHOUT_CLASSIFICATION	1.3703864027513357E-5	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9221142121662158	WITHOUT_CLASSIFICATION	0.0778857878337842	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999942384706294	WITHOUT_CLASSIFICATION	5.761529370566792E-6	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999918328421644	WITHOUT_CLASSIFICATION	8.167157835615319E-6	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999933729632973	WITHOUT_CLASSIFICATION	6.627036702739994E-6	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999737701857508	WITHOUT_CLASSIFICATION	2.6229814249168507E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999220470342801	WITHOUT_CLASSIFICATION	7.795296571990387E-4	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999988428246421	WITHOUT_CLASSIFICATION	1.1571753578895817E-6	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999977248200954	WITHOUT_CLASSIFICATION	2.275179904471835E-6	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999970965200682	WITHOUT_CLASSIFICATION	2.9034799317621217E-6	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999897604657896	WITHOUT_CLASSIFICATION	1.0239534210427572E-5	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9997982900100454	WITHOUT_CLASSIFICATION	2.017099899546269E-4	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9103780269842233	WITHOUT_CLASSIFICATION	0.08962197301577675	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998845014606264	WITHOUT_CLASSIFICATION	1.1549853937364638E-4	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999690798863018	WITHOUT_CLASSIFICATION	3.092011369815653E-5	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999945423318213	WITHOUT_CLASSIFICATION	5.45766817875639E-6	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9994335748146359	WITHOUT_CLASSIFICATION	5.664251853641038E-4	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999444274949855	WITHOUT_CLASSIFICATION	5.557250501450466E-4	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.7512647828179556	WITHOUT_CLASSIFICATION	0.2487352171820443	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999897272767824	WITHOUT_CLASSIFICATION	1.0272723217571812E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9797020196648566	WITHOUT_CLASSIFICATION	0.020297980335143323	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999994306943409	WITHOUT_CLASSIFICATION	5.693056589627178E-7	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9992158643259509	WITHOUT_CLASSIFICATION	7.841356740491103E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9992158643259509	WITHOUT_CLASSIFICATION	7.841356740491103E-4	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999038968958234	WITHOUT_CLASSIFICATION	9.610310417654892E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999971537104948	WITHOUT_CLASSIFICATION	2.846289505161402E-6	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9996757863359453	WITHOUT_CLASSIFICATION	3.242136640546669E-4	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.99999749151692	WITHOUT_CLASSIFICATION	2.508483079951643E-6	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998791730112524	WITHOUT_CLASSIFICATION	1.2082698874766295E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999986806155226	WITHOUT_CLASSIFICATION	1.3193844774423468E-6	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9999847681962909	WITHOUT_CLASSIFICATION	1.523180370920524E-5	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9985729184721231	WITHOUT_CLASSIFICATION	0.001427081527876821	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999997504821807	WITHOUT_CLASSIFICATION	2.4951781922614E-7	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999997918681722	WITHOUT_CLASSIFICATION	2.0813182778967292E-6	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999792645795788	WITHOUT_CLASSIFICATION	2.073542042127552E-5	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999791252788527	WITHOUT_CLASSIFICATION	2.0874721147261546E-5	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9998381195439825	WITHOUT_CLASSIFICATION	1.6188045601746174E-4	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999968684796048	WITHOUT_CLASSIFICATION	3.1315203952340174E-6	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999034410395795	WITHOUT_CLASSIFICATION	9.655896042059405E-5	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9921906068748867	WITHOUT_CLASSIFICATION	0.007809393125113333	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999799477239188	WITHOUT_CLASSIFICATION	2.0052276081215984E-5	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999835234532873	WITHOUT_CLASSIFICATION	1.6476546712652014E-5	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999930314589124	WITHOUT_CLASSIFICATION	6.968541087651973E-6	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999757863968929	WITHOUT_CLASSIFICATION	2.421360310708708E-5	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9997690759083859	WITHOUT_CLASSIFICATION	2.3092409161395042E-4	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998594169191257	WITHOUT_CLASSIFICATION	1.405830808742124E-4	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999938731784516	WITHOUT_CLASSIFICATION	6.126821548430943E-6	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999677206800769	WITHOUT_CLASSIFICATION	3.2279319923006835E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.7512647828179556	WITHOUT_CLASSIFICATION	0.2487352171820443	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999982404847256	WITHOUT_CLASSIFICATION	1.7595152744016782E-5	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999933144165097	WITHOUT_CLASSIFICATION	6.685583490261308E-6	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999855645173048	WITHOUT_CLASSIFICATION	1.4435482695124763E-5	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999745786642418	WITHOUT_CLASSIFICATION	2.5421335758243494E-5	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998964551425172	WITHOUT_CLASSIFICATION	1.0354485748284816E-4	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9997557092889628	WITHOUT_CLASSIFICATION	2.442907110371192E-4	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9991142486500582	WITHOUT_CLASSIFICATION	8.857513499418647E-4	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999793561223644	WITHOUT_CLASSIFICATION	2.0643877635574842E-5	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999981325456564	WITHOUT_CLASSIFICATION	1.8674543436021007E-6	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999991047327729	WITHOUT_CLASSIFICATION	8.952672271088662E-7	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999911529001801	WITHOUT_CLASSIFICATION	8.847099819740124E-6	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999899827882276	WITHOUT_CLASSIFICATION	1.0017211772422704E-5	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9998248692420042	WITHOUT_CLASSIFICATION	1.7513075799575886E-4	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9990971782794654	WITHOUT_CLASSIFICATION	9.028217205345457E-4	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999993901903673	WITHOUT_CLASSIFICATION	6.098096327336126E-7	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999951232200192	WITHOUT_CLASSIFICATION	4.876779980905189E-6	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999951232200192	WITHOUT_CLASSIFICATION	4.876779980905189E-6	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9997611973398388	WITHOUT_CLASSIFICATION	2.388026601612415E-4	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999940415482637	WITHOUT_CLASSIFICATION	5.9584517362753925E-6	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999179168915442	WITHOUT_CLASSIFICATION	8.208310845582347E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999179168915442	WITHOUT_CLASSIFICATION	8.208310845582347E-5	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999973830541828	WITHOUT_CLASSIFICATION	2.616945817269125E-6	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9994183649640134	WITHOUT_CLASSIFICATION	5.816350359866115E-4	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999943090210785	WITHOUT_CLASSIFICATION	5.690978921495867E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.99999863567097	WITHOUT_CLASSIFICATION	1.3643290299724234E-6	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997059868020839	WITHOUT_CLASSIFICATION	2.940131979161139E-4	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999550038924095	WITHOUT_CLASSIFICATION	4.499610759047289E-5	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999883569764736	WITHOUT_CLASSIFICATION	1.1643023526350649E-5	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999883569764736	WITHOUT_CLASSIFICATION	1.1643023526350649E-5	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999704478594102	WITHOUT_CLASSIFICATION	2.9552140589824854E-5	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999912467048118	WITHOUT_CLASSIFICATION	8.753295188227351E-6	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999955488034562	WITHOUT_CLASSIFICATION	4.45119654377399E-6	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999651681459334	WITHOUT_CLASSIFICATION	3.483185406651717E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999651681459334	WITHOUT_CLASSIFICATION	3.483185406651717E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9999979369515704	WITHOUT_CLASSIFICATION	2.0630484296284555E-6	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998252663525179	WITHOUT_CLASSIFICATION	1.7473364748203833E-4	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9994431996605514	WITHOUT_CLASSIFICATION	5.568003394485558E-4	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999980221573638	WITHOUT_CLASSIFICATION	1.977842636232418E-6	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999952284018231	WITHOUT_CLASSIFICATION	4.771598176914111E-6	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999916262808695	WITHOUT_CLASSIFICATION	8.37371913058283E-6	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998819545918137	WITHOUT_CLASSIFICATION	1.1804540818636454E-4	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999531667499479	WITHOUT_CLASSIFICATION	4.683325005208141E-5	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999969493722382	WITHOUT_CLASSIFICATION	3.050627761806971E-6	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999946418982838	WITHOUT_CLASSIFICATION	5.3581017161491924E-6	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.999999922560416	WITHOUT_CLASSIFICATION	7.743958404488476E-8	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9995514120427148	WITHOUT_CLASSIFICATION	4.4858795728515075E-4	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999725644254408	WITHOUT_CLASSIFICATION	2.743557455925011E-5	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999564923348936	WITHOUT_CLASSIFICATION	4.350766510631697E-5	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999680290738974	WITHOUT_CLASSIFICATION	3.197092610258823E-5	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999793167272735	WITHOUT_CLASSIFICATION	2.0683272726474977E-5	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999940635095964	WITHOUT_CLASSIFICATION	5.936490403575771E-6	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999288879732124	WITHOUT_CLASSIFICATION	7.111202678761387E-5	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999654155010641	WITHOUT_CLASSIFICATION	3.458449893587754E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999906496205221	WITHOUT_CLASSIFICATION	9.350379477931038E-6	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9998654181267587	WITHOUT_CLASSIFICATION	1.3458187324138018E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997574937316374	WITHOUT_CLASSIFICATION	2.425062683627228E-4	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999556728362992	WITHOUT_CLASSIFICATION	4.4327163700909095E-5	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999970012555344	WITHOUT_CLASSIFICATION	2.998744465687292E-6	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999884550362346	WITHOUT_CLASSIFICATION	1.1544963765385147E-5	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999913398869203	WITHOUT_CLASSIFICATION	8.660113079561392E-6	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999975564053772	WITHOUT_CLASSIFICATION	2.443594622744444E-6	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998958113098775	WITHOUT_CLASSIFICATION	1.0418869012246526E-4	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999991537022226	WITHOUT_CLASSIFICATION	8.462977774589656E-7	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999971082144321	WITHOUT_CLASSIFICATION	2.891785567875232E-6	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9996720955108724	WITHOUT_CLASSIFICATION	3.2790448912755065E-4	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999992509911443	WITHOUT_CLASSIFICATION	7.490088557520353E-7	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999884477778406	WITHOUT_CLASSIFICATION	1.1552222159410118E-5	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999635193172627	WITHOUT_CLASSIFICATION	3.648068273736193E-5	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999989233191475	WITHOUT_CLASSIFICATION	1.076680852440302E-6	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999496160450696	WITHOUT_CLASSIFICATION	5.03839549305064E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9999886278916821	WITHOUT_CLASSIFICATION	1.1372108317903738E-5	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999887749694212	WITHOUT_CLASSIFICATION	1.1225030578928583E-5	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999954834804611	WITHOUT_CLASSIFICATION	4.516519538946282E-6	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999639230477202	WITHOUT_CLASSIFICATION	3.607695227992104E-5	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998880286921512	WITHOUT_CLASSIFICATION	1.1197130784874383E-4	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9992839806678837	WITHOUT_CLASSIFICATION	7.160193321163563E-4	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9999649990169575	WITHOUT_CLASSIFICATION	3.500098304263897E-5	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999912444626439	WITHOUT_CLASSIFICATION	8.755537356255423E-6	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.999994277305996	WITHOUT_CLASSIFICATION	5.722694003980678E-6	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999279878532303	WITHOUT_CLASSIFICATION	7.201214676966927E-5	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9984721042550128	WITHOUT_CLASSIFICATION	0.0015278957449872278	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999734289403271	WITHOUT_CLASSIFICATION	2.6571059672861823E-5	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998165286389358	WITHOUT_CLASSIFICATION	1.834713610642159E-4	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999582586854023	WITHOUT_CLASSIFICATION	4.1741314597701696E-5	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9995434831671547	WITHOUT_CLASSIFICATION	4.5651683284532294E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999764323994355	WITHOUT_CLASSIFICATION	2.3567600564454592E-5	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999818015037959	WITHOUT_CLASSIFICATION	1.819849620411698E-4	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999997775352079	WITHOUT_CLASSIFICATION	2.2246479212768067E-7	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9994586117367688	WITHOUT_CLASSIFICATION	5.413882632311871E-4	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999539885383167	WITHOUT_CLASSIFICATION	4.601146168322223E-5	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.999577309448017	WITHOUT_CLASSIFICATION	4.226905519829334E-4	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999759540019751	WITHOUT_CLASSIFICATION	2.4045998024893462E-5	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998385146386412	WITHOUT_CLASSIFICATION	1.6148536135875304E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9986204977608737	WITHOUT_CLASSIFICATION	0.0013795022391263347	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998112297040919	WITHOUT_CLASSIFICATION	1.887702959081346E-4	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998112297040919	WITHOUT_CLASSIFICATION	1.887702959081346E-4	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999864035068708	WITHOUT_CLASSIFICATION	1.3596493129148095E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999992982579042	WITHOUT_CLASSIFICATION	7.017420956781832E-7	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999892539435277	WITHOUT_CLASSIFICATION	1.0746056472319514E-5	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999944176527266	WITHOUT_CLASSIFICATION	5.582347273360408E-6	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999996839205619	WITHOUT_CLASSIFICATION	3.1607943811120846E-6	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999979227573901	WITHOUT_CLASSIFICATION	2.07724260983894E-6	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999160351981	WITHOUT_CLASSIFICATION	8.396480195595105E-8	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999989941499725	WITHOUT_CLASSIFICATION	1.0058500275040656E-6	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999986423352266	WITHOUT_CLASSIFICATION	1.3576647734879163E-6	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999850249535839	WITHOUT_CLASSIFICATION	1.4975046416193854E-5	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999916124646602	WITHOUT_CLASSIFICATION	8.387535339752103E-6	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999553362877445	WITHOUT_CLASSIFICATION	4.466371225544209E-5	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9998338570554779	WITHOUT_CLASSIFICATION	1.6614294452201454E-4	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999998346534183	WITHOUT_CLASSIFICATION	1.6534658170107496E-6	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.99999355184535	WITHOUT_CLASSIFICATION	6.448154650072488E-6	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.99999355184535	WITHOUT_CLASSIFICATION	6.448154650072488E-6	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999973645907229	WITHOUT_CLASSIFICATION	2.6354092771894278E-6	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998768959646589	WITHOUT_CLASSIFICATION	1.2310403534112328E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999996637988898	WITHOUT_CLASSIFICATION	3.362011101802855E-7	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999633216876779	WITHOUT_CLASSIFICATION	3.667831232208857E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999831063878569	WITHOUT_CLASSIFICATION	1.6893612143131014E-5	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997817454903016	WITHOUT_CLASSIFICATION	2.182545096984245E-4	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999932913720783	WITHOUT_CLASSIFICATION	6.7086279217022746E-6	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9999636407265512	WITHOUT_CLASSIFICATION	3.635927344887984E-5	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9979604831833476	WITHOUT_CLASSIFICATION	0.0020395168166523667	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999996757678493	WITHOUT_CLASSIFICATION	3.242321507108428E-7	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9998662051137969	WITHOUT_CLASSIFICATION	1.337948862031793E-4	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999988078019219	WITHOUT_CLASSIFICATION	1.1921980781036222E-6	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999924496947364	WITHOUT_CLASSIFICATION	7.550305263573201E-6	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9997716993370149	WITHOUT_CLASSIFICATION	2.2830066298516651E-4	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.99999966631296	WITHOUT_CLASSIFICATION	3.336870399711132E-7	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999992483482302	WITHOUT_CLASSIFICATION	7.516517698069134E-7	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999980389026345	WITHOUT_CLASSIFICATION	1.9610973655326146E-6	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.99999142936468	WITHOUT_CLASSIFICATION	8.57063532003186E-6	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999842581614155	WITHOUT_CLASSIFICATION	1.5741838584576315E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9995670796247267	WITHOUT_CLASSIFICATION	4.329203752733931E-4	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999997110463819	WITHOUT_CLASSIFICATION	2.889536180939301E-7	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999348276455	WITHOUT_CLASSIFICATION	6.517235450484394E-8	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999837972779558	WITHOUT_CLASSIFICATION	1.620272204416893E-5	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999995061594287	WITHOUT_CLASSIFICATION	4.938405712120593E-7	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999987315672985	WITHOUT_CLASSIFICATION	1.2684327015582692E-6	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9999777891910466	WITHOUT_CLASSIFICATION	2.2210808953280528E-5	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9883521349988362	WITHOUT_CLASSIFICATION	0.011647865001163748	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999930394402792	WITHOUT_CLASSIFICATION	6.960559720716443E-6	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999921448181796	WITHOUT_CLASSIFICATION	7.855181820351596E-6	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999934770973281	WITHOUT_CLASSIFICATION	6.522902671924067E-6	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999907521965823	WITHOUT_CLASSIFICATION	9.247803417651346E-6	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999888985362471	WITHOUT_CLASSIFICATION	1.1101463752910176E-5	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9997618812611558	WITHOUT_CLASSIFICATION	2.3811873884423284E-4	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999997726363999	WITHOUT_CLASSIFICATION	2.2736360002757873E-7	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999998973933436	WITHOUT_CLASSIFICATION	1.0260665636455105E-7	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9992550591795902	WITHOUT_CLASSIFICATION	7.449408204096555E-4	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999829904259383	WITHOUT_CLASSIFICATION	1.70095740616813E-5	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999943731719502	WITHOUT_CLASSIFICATION	5.6268280498371104E-6	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999735246104486	WITHOUT_CLASSIFICATION	2.647538955146077E-5	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999657915241172	WITHOUT_CLASSIFICATION	3.4208475882850916E-5	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9996876840281235	WITHOUT_CLASSIFICATION	3.123159718765368E-4	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999981532511834	WITHOUT_CLASSIFICATION	1.846748816644514E-6	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999736961489417	WITHOUT_CLASSIFICATION	2.6303851058279302E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999736961489417	WITHOUT_CLASSIFICATION	2.6303851058279302E-5	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999975868350135	WITHOUT_CLASSIFICATION	2.4131649865049298E-6	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999012101917752	WITHOUT_CLASSIFICATION	9.878980822467346E-5	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999510466771299	WITHOUT_CLASSIFICATION	4.8953322870182505E-5	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999911401809704	WITHOUT_CLASSIFICATION	8.859819029639505E-6	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999727832282921	WITHOUT_CLASSIFICATION	2.7216771707977748E-5	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999902565796158	WITHOUT_CLASSIFICATION	9.743420384068527E-6	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.995389322401217	WITHOUT_CLASSIFICATION	0.004610677598782927	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999969695184293	WITHOUT_CLASSIFICATION	3.0304815706140484E-6	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999954027615945	WITHOUT_CLASSIFICATION	4.5972384055785295E-6	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999749481966098	WITHOUT_CLASSIFICATION	2.505180339020285E-5	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834033984359	WITHOUT_CLASSIFICATION	1.659660156413174E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999979404615625	WITHOUT_CLASSIFICATION	2.0595384374803604E-6	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999826544072697	WITHOUT_CLASSIFICATION	1.734559273026252E-5	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999979051605127	WITHOUT_CLASSIFICATION	2.0948394873586092E-6	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9998901148441615	WITHOUT_CLASSIFICATION	1.098851558385097E-4	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999830487081732	WITHOUT_CLASSIFICATION	1.695129182668604E-5	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999733591788822	WITHOUT_CLASSIFICATION	2.664082111785099E-5	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999361259770843	WITHOUT_CLASSIFICATION	6.387402291566041E-5	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999998469567885	WITHOUT_CLASSIFICATION	1.530432114456992E-7	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9992665270227118	WITHOUT_CLASSIFICATION	7.334729772882738E-4	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999906561882197	WITHOUT_CLASSIFICATION	9.343811780416466E-6	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9996909293659378	WITHOUT_CLASSIFICATION	3.0907063406214366E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999309936440955	WITHOUT_CLASSIFICATION	6.900635590447658E-5	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999994687862478	WITHOUT_CLASSIFICATION	5.312137522334754E-7	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999688044589338	WITHOUT_CLASSIFICATION	3.119554106627239E-5	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999898889534062	WITHOUT_CLASSIFICATION	1.0111046593787433E-5	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999878801452948	WITHOUT_CLASSIFICATION	1.2119854705177378E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999974595155204	WITHOUT_CLASSIFICATION	2.5404844795181845E-6	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9995735489892421	WITHOUT_CLASSIFICATION	4.264510107578517E-4	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999743664777438	WITHOUT_CLASSIFICATION	2.563352225610868E-5	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999169798205843	WITHOUT_CLASSIFICATION	8.302017941572663E-5	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999974860293905	WITHOUT_CLASSIFICATION	2.513970609495943E-5	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999823579085162	WITHOUT_CLASSIFICATION	1.764209148381429E-5	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999974660066631	WITHOUT_CLASSIFICATION	2.533993336867571E-6	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9968898453419366	WITHOUT_CLASSIFICATION	0.003110154658063385	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999079200010472	WITHOUT_CLASSIFICATION	9.207999895282172E-5	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999739020398561	WITHOUT_CLASSIFICATION	2.6097960143833967E-5	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999847459294504	WITHOUT_CLASSIFICATION	1.5254070549506756E-5	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998252690803853	WITHOUT_CLASSIFICATION	1.7473091961479038E-4	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999924021296933	WITHOUT_CLASSIFICATION	7.597870306745614E-6	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999198777956755	WITHOUT_CLASSIFICATION	8.012220432456722E-5	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999988608720439	WITHOUT_CLASSIFICATION	1.139127955998486E-6	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999993100458231	WITHOUT_CLASSIFICATION	6.899541768667856E-7	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998672939609156	WITHOUT_CLASSIFICATION	1.3270603908447474E-4	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999958331391364	WITHOUT_CLASSIFICATION	4.166860863606436E-5	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9998932166179088	WITHOUT_CLASSIFICATION	1.0678338209122221E-4	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999958193718164	WITHOUT_CLASSIFICATION	4.180628183667859E-6	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.999968149690369	WITHOUT_CLASSIFICATION	3.1850309630965854E-5	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999974641821888	WITHOUT_CLASSIFICATION	2.535817811125082E-6	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9998338570554779	WITHOUT_CLASSIFICATION	1.6614294452201454E-4	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999227857460323	WITHOUT_CLASSIFICATION	7.721425396768955E-5	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999995685510669	WITHOUT_CLASSIFICATION	4.314489331701608E-7	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998261730573414	WITHOUT_CLASSIFICATION	1.7382694265856275E-4	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999956667569561	WITHOUT_CLASSIFICATION	4.33324304383594E-6	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999136546459	WITHOUT_CLASSIFICATION	8.634535411196106E-8	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999900822480691	WITHOUT_CLASSIFICATION	9.917751930996448E-6	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999735951430877	WITHOUT_CLASSIFICATION	2.6404856912223827E-5	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9987129808776876	WITHOUT_CLASSIFICATION	0.001287019122312338	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999896934495948	WITHOUT_CLASSIFICATION	1.0306550405347172E-5	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999890035247422	WITHOUT_CLASSIFICATION	1.0996475257874758E-5	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999239672926425	WITHOUT_CLASSIFICATION	7.603270735744323E-5	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9774458669333054	WITHOUT_CLASSIFICATION	0.02255413306669464	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999905685938777	WITHOUT_CLASSIFICATION	9.431406122298709E-6	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999901901562128	WITHOUT_CLASSIFICATION	9.809843787282137E-6	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999983924117162	WITHOUT_CLASSIFICATION	1.6075882837488862E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990025745575	WITHOUT_CLASSIFICATION	9.974254424648535E-7	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999927768245187	WITHOUT_CLASSIFICATION	7.223175481278882E-6	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999933046314026	WITHOUT_CLASSIFICATION	6.6953685974942935E-6	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999993375531067	WITHOUT_CLASSIFICATION	6.624468933947064E-7	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9995689616677587	WITHOUT_CLASSIFICATION	4.3103833224130946E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990025745575	WITHOUT_CLASSIFICATION	9.974254424648535E-7	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.99968258148625	WITHOUT_CLASSIFICATION	3.174185137499681E-4	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9954245682641087	WITHOUT_CLASSIFICATION	0.004575431735891165	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999950278466984	WITHOUT_CLASSIFICATION	4.972153301591212E-5	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999818676325504	WITHOUT_CLASSIFICATION	1.8132367449697255E-5	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999997693566424	WITHOUT_CLASSIFICATION	2.3064335759718614E-6	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999722564420385	WITHOUT_CLASSIFICATION	2.774355796159354E-5	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999890084912	WITHOUT_CLASSIFICATION	1.0991508824722818E-8	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999866888153921	WITHOUT_CLASSIFICATION	1.3311184607860032E-5	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.99999744238897	WITHOUT_CLASSIFICATION	2.5576110299627033E-6	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9963762201756038	WITHOUT_CLASSIFICATION	0.003623779824396226	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998176614924519	WITHOUT_CLASSIFICATION	1.8233850754812182E-4	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9991151138621541	WITHOUT_CLASSIFICATION	8.848861378457891E-4	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9995873014764727	WITHOUT_CLASSIFICATION	4.1269852352734146E-4	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999977804897918	WITHOUT_CLASSIFICATION	2.2195102083024605E-6	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999946930843328	WITHOUT_CLASSIFICATION	5.3069156673096525E-6	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999987270405596	WITHOUT_CLASSIFICATION	1.272959440398393E-6	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999677206800769	WITHOUT_CLASSIFICATION	3.2279319923006835E-5	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999952913480682	WITHOUT_CLASSIFICATION	4.7086519318031574E-5	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999961689805201	WITHOUT_CLASSIFICATION	3.831019479842702E-6	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999929071573667	WITHOUT_CLASSIFICATION	7.092842633367808E-6	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999509947936145	WITHOUT_CLASSIFICATION	4.900520638549257E-5	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999559241163323	WITHOUT_CLASSIFICATION	4.407588366763539E-5	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999728829637924	WITHOUT_CLASSIFICATION	2.7117036207629998E-5	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999918506571325	WITHOUT_CLASSIFICATION	8.14934286754582E-6	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999122323996	WITHOUT_CLASSIFICATION	8.776760039641388E-7	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999825237296786	WITHOUT_CLASSIFICATION	1.7476270321475304E-5	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999835467403994	WITHOUT_CLASSIFICATION	1.6453259600604044E-5	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9989000297643088	WITHOUT_CLASSIFICATION	0.0010999702356912203	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999959833336697	WITHOUT_CLASSIFICATION	4.016666330348206E-6	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999890405884386	WITHOUT_CLASSIFICATION	1.095941156136605E-5	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.999921943762245	WITHOUT_CLASSIFICATION	7.805623775500668E-5	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999871846089475	WITHOUT_CLASSIFICATION	1.2815391052462632E-5	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999791248074706	WITHOUT_CLASSIFICATION	2.087519252938473E-5	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9998458614609959	WITHOUT_CLASSIFICATION	1.5413853900418914E-4	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999829063529501	WITHOUT_CLASSIFICATION	1.709364704988624E-5	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999936073732812	WITHOUT_CLASSIFICATION	6.392626718771381E-6	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999959572068784	WITHOUT_CLASSIFICATION	4.0427931215872565E-5	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999971786837006	WITHOUT_CLASSIFICATION	2.821316299238773E-6	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9988326155421301	WITHOUT_CLASSIFICATION	0.0011673844578698534	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999980559757071	WITHOUT_CLASSIFICATION	1.944024292844964E-6	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999660456140411	WITHOUT_CLASSIFICATION	3.395438595883064E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999257273328989	WITHOUT_CLASSIFICATION	7.427266710110687E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999257273328989	WITHOUT_CLASSIFICATION	7.427266710110687E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9987178054622845	WITHOUT_CLASSIFICATION	0.001282194537715512	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999844769799456	WITHOUT_CLASSIFICATION	1.5523020054374994E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999836445104469	WITHOUT_CLASSIFICATION	1.635548955318684E-5	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.999998753781941	WITHOUT_CLASSIFICATION	1.246218058954359E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9998486522617271	WITHOUT_CLASSIFICATION	1.5134773827290253E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9998486522617271	WITHOUT_CLASSIFICATION	1.5134773827290253E-4	DEFECT
}	WITHOUT_CLASSIFICATION	0.9984486078436705	WITHOUT_CLASSIFICATION	0.0015513921563294682	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999480480108	WITHOUT_CLASSIFICATION	5.1951989126090013E-8	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999965946664	WITHOUT_CLASSIFICATION	3.40533358627844E-9	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999987054124326	WITHOUT_CLASSIFICATION	1.2945875674020214E-5	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999992507927142	WITHOUT_CLASSIFICATION	7.492072857526317E-7	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999332450687827	WITHOUT_CLASSIFICATION	6.67549312173983E-5	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999877754966764	WITHOUT_CLASSIFICATION	1.2224503323614302E-5	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999445708572589	WITHOUT_CLASSIFICATION	5.5429142741168455E-5	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9997060764003617	WITHOUT_CLASSIFICATION	2.9392359963832594E-4	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999969698446941	WITHOUT_CLASSIFICATION	3.030155305752749E-6	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9994231240552934	WITHOUT_CLASSIFICATION	5.768759447065362E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986906509585	WITHOUT_CLASSIFICATION	1.3093490414929764E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986906509585	WITHOUT_CLASSIFICATION	1.3093490414929764E-6	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999135944524	WITHOUT_CLASSIFICATION	8.640554756365147E-8	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998182256326361	WITHOUT_CLASSIFICATION	1.8177436736388592E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999728894553408	WITHOUT_CLASSIFICATION	2.7110544659211897E-5	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999960179254535	WITHOUT_CLASSIFICATION	3.982074546592862E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9797020196648566	WITHOUT_CLASSIFICATION	0.020297980335143323	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999990856023847	WITHOUT_CLASSIFICATION	9.143976153525177E-7	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982552867002	WITHOUT_CLASSIFICATION	1.7447132998049876E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9797020196648566	WITHOUT_CLASSIFICATION	0.020297980335143323	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999957861372379	WITHOUT_CLASSIFICATION	4.213862762033685E-6	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999815984803492	WITHOUT_CLASSIFICATION	1.8401519650818658E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999421644866112	WITHOUT_CLASSIFICATION	5.783551338871811E-5	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999982412189412	WITHOUT_CLASSIFICATION	1.7587810587769464E-6	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9963762201756038	WITHOUT_CLASSIFICATION	0.003623779824396226	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.999985748046209	WITHOUT_CLASSIFICATION	1.4251953791068742E-5	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999760170179292	WITHOUT_CLASSIFICATION	2.398298207080756E-4	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999997894789072	WITHOUT_CLASSIFICATION	2.1052109271526419E-7	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.999984326104323	WITHOUT_CLASSIFICATION	1.5673895677004055E-5	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999989945429227	WITHOUT_CLASSIFICATION	1.0054570773456091E-6	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999995620316138	WITHOUT_CLASSIFICATION	4.379683861936574E-6	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999955869043945	WITHOUT_CLASSIFICATION	4.41309560556615E-6	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999996641600732	WITHOUT_CLASSIFICATION	3.3583992669686054E-7	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999875425346315	WITHOUT_CLASSIFICATION	1.2457465368473493E-5	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9969406324528877	WITHOUT_CLASSIFICATION	0.003059367547112281	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9969406324528877	WITHOUT_CLASSIFICATION	0.003059367547112281	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999927976596166	WITHOUT_CLASSIFICATION	7.202340383348519E-6	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999776910222884	WITHOUT_CLASSIFICATION	2.2308977711650082E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9998456890670574	WITHOUT_CLASSIFICATION	1.5431093294261786E-4	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999851975523251	WITHOUT_CLASSIFICATION	1.4802447674894667E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999783763911391	WITHOUT_CLASSIFICATION	2.1623608860903718E-5	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9996613302350187	WITHOUT_CLASSIFICATION	3.3866976498131624E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999137147245286	WITHOUT_CLASSIFICATION	8.628527547139434E-5	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9995963083151819	WITHOUT_CLASSIFICATION	4.036916848180471E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999768776315523	WITHOUT_CLASSIFICATION	2.3122368447740454E-5	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999093141953895	WITHOUT_CLASSIFICATION	9.068580461053304E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259898130867	WITHOUT_CLASSIFICATION	7.401018691335035E-5	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9993447935199475	WITHOUT_CLASSIFICATION	6.552064800524036E-4	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999849483024866	WITHOUT_CLASSIFICATION	1.5051697513422027E-5	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999989221291476	WITHOUT_CLASSIFICATION	1.0778708523476475E-6	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999995094614557	WITHOUT_CLASSIFICATION	4.905385442616292E-7	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999183607732056	WITHOUT_CLASSIFICATION	8.163922679433336E-5	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999084886882365	WITHOUT_CLASSIFICATION	9.151131176349937E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999195487967925	WITHOUT_CLASSIFICATION	8.045120320760789E-5	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999251842858558	WITHOUT_CLASSIFICATION	7.48157141441624E-5	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999840376413803	WITHOUT_CLASSIFICATION	1.5962358619636277E-5	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9947542478791096	WITHOUT_CLASSIFICATION	0.005245752120890498	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9996936390159075	WITHOUT_CLASSIFICATION	3.0636098409248793E-4	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9994431996605514	WITHOUT_CLASSIFICATION	5.568003394485558E-4	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999963569347741	WITHOUT_CLASSIFICATION	3.6430652258968626E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999323315589721	WITHOUT_CLASSIFICATION	6.766844102791939E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999323315589721	WITHOUT_CLASSIFICATION	6.766844102791939E-5	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.99945311828957	WITHOUT_CLASSIFICATION	5.468817104300267E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999990048693488	WITHOUT_CLASSIFICATION	9.95130651201804E-6	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999811636366376	WITHOUT_CLASSIFICATION	1.883636336245492E-5	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999733459717018	WITHOUT_CLASSIFICATION	2.665402829813709E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999420906978488	WITHOUT_CLASSIFICATION	5.79093021512201E-5	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9993251965668655	WITHOUT_CLASSIFICATION	6.748034331345302E-4	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9985365549770605	WITHOUT_CLASSIFICATION	0.0014634450229395698	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999861303649916	WITHOUT_CLASSIFICATION	1.3869635008416884E-5	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.999756411760853	WITHOUT_CLASSIFICATION	2.4358823914710879E-4	DEFECT
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.9995518282206227	WITHOUT_CLASSIFICATION	4.481717793773557E-4	DEFECT
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.999400625569825	WITHOUT_CLASSIFICATION	5.993744301749004E-4	DEFECT
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9974890542677605	WITHOUT_CLASSIFICATION	0.0025109457322395026	DEFECT
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.999987961489137	WITHOUT_CLASSIFICATION	1.2038510862958048E-5	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9998658988500293	WITHOUT_CLASSIFICATION	1.3410114997071173E-4	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.5859157078359936	WITHOUT_CLASSIFICATION	0.41408429216400655	DEFECT
TODO : should this be an error?	DEFECT	0.9591927676948621	WITHOUT_CLASSIFICATION	0.040807232305137935	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.9956179053540247	WITHOUT_CLASSIFICATION	0.004382094645975289	DEFECT
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.94980001317009	DEFECT	0.05019998682991007	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5456974485577003	DEFECT	0.45430255144229964	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5456974485577003	DEFECT	0.45430255144229964	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.8702408580532665	WITHOUT_CLASSIFICATION	0.12975914194673355	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9987990256272908	WITHOUT_CLASSIFICATION	0.0012009743727091722	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.6530136717949309	WITHOUT_CLASSIFICATION	0.34698632820506925	DEFECT
this call is side-effecty	DEFECT	0.9999523150625508	WITHOUT_CLASSIFICATION	4.7684937449247535E-5	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.8040609873304838	DEFECT	0.1959390126695162	WITHOUT_CLASSIFICATION
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.8305635023350545	WITHOUT_CLASSIFICATION	0.16943649766494548	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.9905541538870352	WITHOUT_CLASSIFICATION	0.009445846112964847	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.9560094162947604	DEFECT	0.043990583705239596	WITHOUT_CLASSIFICATION
TODO: is this completely correct?	DEFECT	0.5427598668960376	WITHOUT_CLASSIFICATION	0.45724013310396244	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.9911128921501812	WITHOUT_CLASSIFICATION	0.008887107849818816	DEFECT
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.6183828396838159	WITHOUT_CLASSIFICATION	0.3816171603161839	DEFECT
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.8988168562169182	WITHOUT_CLASSIFICATION	0.10118314378308176	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.5826356669440046	WITHOUT_CLASSIFICATION	0.41736433305599546	DEFECT
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.618049527911636	DEFECT	0.38195047208836397	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.7617401818323463	WITHOUT_CLASSIFICATION	0.23825981816765388	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.93621125523483	DEFECT	0.06378874476517002	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9958797742074404	WITHOUT_CLASSIFICATION	0.004120225792559555	DEFECT
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9980982762238314	WITHOUT_CLASSIFICATION	0.001901723776168624	DEFECT
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.7405363416312376	DEFECT	0.2594636583687624	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5456974485577003	DEFECT	0.45430255144229964	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9920641886428174	DEFECT	0.007935811357182491	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.7733468930231694	DEFECT	0.22665310697683066	WITHOUT_CLASSIFICATION
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.5642440241058848	DEFECT	0.4357559758941153	WITHOUT_CLASSIFICATION
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9999561500845856	WITHOUT_CLASSIFICATION	4.384991541445584E-5	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9999993860751104	WITHOUT_CLASSIFICATION	6.1392488950946E-7	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9999847740154689	WITHOUT_CLASSIFICATION	1.5225984531211928E-5	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9986296960163734	WITHOUT_CLASSIFICATION	0.0013703039836264774	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.9833283875514768	WITHOUT_CLASSIFICATION	0.016671612448523165	DEFECT
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.6604446818082124	WITHOUT_CLASSIFICATION	0.33955531819178764	DEFECT
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.997453172340479	WITHOUT_CLASSIFICATION	0.002546827659520977	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.5632591853068308	WITHOUT_CLASSIFICATION	0.4367408146931692	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.9916108908589588	DEFECT	0.008389109141041177	WITHOUT_CLASSIFICATION
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9994549978364734	WITHOUT_CLASSIFICATION	5.450021635266219E-4	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.626864351898397	WITHOUT_CLASSIFICATION	0.37313564810160316	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.8847789278717245	DEFECT	0.11522107212827548	WITHOUT_CLASSIFICATION
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.813024844929109	WITHOUT_CLASSIFICATION	0.18697515507089096	DEFECT
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.6351571712007271	DEFECT	0.3648428287992729	WITHOUT_CLASSIFICATION
