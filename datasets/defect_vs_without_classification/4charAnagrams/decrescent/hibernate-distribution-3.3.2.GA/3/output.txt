test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999997921015916	WITHOUT_CLASSIFICATION	2.0789840832493616E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999013029243544	WITHOUT_CLASSIFICATION	9.869707564556077E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999013029243544	WITHOUT_CLASSIFICATION	9.869707564556077E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999013029243544	WITHOUT_CLASSIFICATION	9.869707564556077E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999013029243544	WITHOUT_CLASSIFICATION	9.869707564556077E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999013029243544	WITHOUT_CLASSIFICATION	9.869707564556077E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999013029243544	WITHOUT_CLASSIFICATION	9.869707564556077E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999013029243544	WITHOUT_CLASSIFICATION	9.869707564556077E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999871462288331	WITHOUT_CLASSIFICATION	1.2853771166974954E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999871462288331	WITHOUT_CLASSIFICATION	1.2853771166974954E-5	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.99998548833968	WITHOUT_CLASSIFICATION	1.4511660319964071E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999218052917572	WITHOUT_CLASSIFICATION	7.819470824272295E-5	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999994050549864	WITHOUT_CLASSIFICATION	5.949450134869551E-7	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999851209077357	WITHOUT_CLASSIFICATION	1.4879092264192137E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999851209077357	WITHOUT_CLASSIFICATION	1.4879092264192137E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999861519342	WITHOUT_CLASSIFICATION	1.3848065870313138E-8	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999957488615747	WITHOUT_CLASSIFICATION	4.251138425238461E-6	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.999999046400486	WITHOUT_CLASSIFICATION	9.535995140156852E-7	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999932888952607	WITHOUT_CLASSIFICATION	6.711104739282992E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999777750225678	WITHOUT_CLASSIFICATION	2.2224977432233854E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999777750225678	WITHOUT_CLASSIFICATION	2.2224977432233854E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9992124269519693	WITHOUT_CLASSIFICATION	7.87573048030574E-4	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999959007609645	WITHOUT_CLASSIFICATION	4.099239035625781E-6	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9985437326353019	WITHOUT_CLASSIFICATION	0.0014562673646981402	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999971158978502	WITHOUT_CLASSIFICATION	2.8841021497119173E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999966191853938	WITHOUT_CLASSIFICATION	3.3808146061192565E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999652883760292	WITHOUT_CLASSIFICATION	3.471162397074225E-5	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999637057914618	WITHOUT_CLASSIFICATION	3.629420853822519E-5	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997762795552958	WITHOUT_CLASSIFICATION	2.2372044470426306E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996512418463531	WITHOUT_CLASSIFICATION	3.4875815364689594E-4	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999997052179024	WITHOUT_CLASSIFICATION	2.947820975959037E-7	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999619632004735	WITHOUT_CLASSIFICATION	3.803679952648323E-5	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999167951259215	WITHOUT_CLASSIFICATION	8.320487407861884E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999996643488836	WITHOUT_CLASSIFICATION	3.3565111640915564E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999139280356438	WITHOUT_CLASSIFICATION	8.607196435611946E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999139280356438	WITHOUT_CLASSIFICATION	8.607196435611946E-5	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999967144182247	WITHOUT_CLASSIFICATION	3.2855817752891567E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9998547467505596	WITHOUT_CLASSIFICATION	1.4525324944041694E-4	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999998871856729	WITHOUT_CLASSIFICATION	1.1281432704164724E-7	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999993300276278	WITHOUT_CLASSIFICATION	6.699723722114341E-7	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999738656048677	WITHOUT_CLASSIFICATION	2.613439513231519E-5	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999908277709622	WITHOUT_CLASSIFICATION	9.172229037883284E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999990951925944	WITHOUT_CLASSIFICATION	9.048074055080139E-7	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999944503863	WITHOUT_CLASSIFICATION	5.549613640001276E-9	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999996105193782	WITHOUT_CLASSIFICATION	3.8948062178234403E-7	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999988890477339	WITHOUT_CLASSIFICATION	1.1109522660242233E-6	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999993555478547	WITHOUT_CLASSIFICATION	6.444521453152309E-7	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999879678907136	WITHOUT_CLASSIFICATION	1.2032109286385732E-5	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999998621147915	WITHOUT_CLASSIFICATION	1.3788520844000588E-7	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999988586143993	WITHOUT_CLASSIFICATION	1.1413856007301857E-6	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999798035747564	WITHOUT_CLASSIFICATION	2.0196425243669014E-5	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995814509153	WITHOUT_CLASSIFICATION	4.18549084699122E-6	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999661921178773	WITHOUT_CLASSIFICATION	3.380788212277553E-5	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999991803392327	WITHOUT_CLASSIFICATION	8.19660767153236E-7	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999970495524108	WITHOUT_CLASSIFICATION	2.950447589225028E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999712229106098	WITHOUT_CLASSIFICATION	2.87770893902323E-5	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.7967998693002811	WITHOUT_CLASSIFICATION	0.20320013069971887	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999906957332978	WITHOUT_CLASSIFICATION	9.30426670212978E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999712229106098	WITHOUT_CLASSIFICATION	2.87770893902323E-5	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999906957332978	WITHOUT_CLASSIFICATION	9.30426670212978E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999969609319328	WITHOUT_CLASSIFICATION	3.039068067280987E-6	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9998378117887798	WITHOUT_CLASSIFICATION	1.6218821122005285E-4	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999962783704047	WITHOUT_CLASSIFICATION	3.721629595144365E-6	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999924101768399	WITHOUT_CLASSIFICATION	7.589823160111741E-6	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999509806834	WITHOUT_CLASSIFICATION	4.9019316679968E-8	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999511558004	WITHOUT_CLASSIFICATION	4.884419962148076E-8	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9992595896697437	WITHOUT_CLASSIFICATION	7.404103302563213E-4	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999533974276511	WITHOUT_CLASSIFICATION	4.660257234896356E-5	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999991781572795	WITHOUT_CLASSIFICATION	8.218427204969359E-6	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9999950744052555	WITHOUT_CLASSIFICATION	4.925594744619761E-6	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999973586156988	WITHOUT_CLASSIFICATION	2.6413843012228513E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999906957332978	WITHOUT_CLASSIFICATION	9.30426670212978E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999996741203206	WITHOUT_CLASSIFICATION	3.258796793242079E-7	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999072420830103	WITHOUT_CLASSIFICATION	9.27579169896429E-5	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999915782893497	WITHOUT_CLASSIFICATION	8.421710650356102E-6	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999903030094478	WITHOUT_CLASSIFICATION	9.696990552194309E-5	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999979325257634	WITHOUT_CLASSIFICATION	2.067474236510969E-6	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998696655157736	WITHOUT_CLASSIFICATION	1.3033448422639088E-4	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999874437658005	WITHOUT_CLASSIFICATION	1.255623419956131E-5	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999913851872879	WITHOUT_CLASSIFICATION	8.614812711979726E-6	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999998459038273	WITHOUT_CLASSIFICATION	1.5409617274737798E-7	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999995328235	WITHOUT_CLASSIFICATION	4.671764740010868E-10	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999997425576953	WITHOUT_CLASSIFICATION	2.5744230459837653E-7	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999382185160474	WITHOUT_CLASSIFICATION	6.178148395259256E-5	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999675780872731	WITHOUT_CLASSIFICATION	3.242191272700742E-5	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999884171513613	WITHOUT_CLASSIFICATION	1.1582848638584808E-5	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999890359581	WITHOUT_CLASSIFICATION	1.0964041919041253E-8	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999998691182804	WITHOUT_CLASSIFICATION	1.3088171948536106E-7	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999201152366	WITHOUT_CLASSIFICATION	7.988476334798539E-8	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999911339625	WITHOUT_CLASSIFICATION	8.866037399539138E-9	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999999918427447	WITHOUT_CLASSIFICATION	8.157255301895929E-8	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999493519749	WITHOUT_CLASSIFICATION	5.064802515076546E-8	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999548909385394	WITHOUT_CLASSIFICATION	4.510906146069701E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999702911287373	WITHOUT_CLASSIFICATION	2.970887126271168E-5	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999841692739826	WITHOUT_CLASSIFICATION	1.583072601738987E-5	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999995168024893	WITHOUT_CLASSIFICATION	4.831975107322238E-7	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999702911287373	WITHOUT_CLASSIFICATION	2.970887126271168E-5	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.999999874413347	WITHOUT_CLASSIFICATION	1.2558665301927657E-7	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999911949522743	WITHOUT_CLASSIFICATION	8.805047725734864E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999712229106098	WITHOUT_CLASSIFICATION	2.87770893902323E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999974327573752	WITHOUT_CLASSIFICATION	2.5672426249073855E-6	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999998340706346	WITHOUT_CLASSIFICATION	1.6592936538264147E-7	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999719369038454	WITHOUT_CLASSIFICATION	2.806309615459423E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999719369038454	WITHOUT_CLASSIFICATION	2.806309615459423E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999399567464914	WITHOUT_CLASSIFICATION	6.004325350866266E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999513191843	WITHOUT_CLASSIFICATION	4.868081565828619E-8	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999978197286479	WITHOUT_CLASSIFICATION	2.180271352198405E-6	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999838055297	WITHOUT_CLASSIFICATION	1.619447032176649E-8	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999987261288173	WITHOUT_CLASSIFICATION	1.2738711827190198E-5	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999998215610393	WITHOUT_CLASSIFICATION	1.784389608320825E-7	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999963607374199	WITHOUT_CLASSIFICATION	3.639262580045995E-6	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999857725164363	WITHOUT_CLASSIFICATION	1.4227483563674484E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999997902479371	WITHOUT_CLASSIFICATION	2.097520630386854E-7	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999995224272561	WITHOUT_CLASSIFICATION	4.775727439599728E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999727185805	WITHOUT_CLASSIFICATION	2.728141943785008E-8	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999727185805	WITHOUT_CLASSIFICATION	2.728141943785008E-8	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998519772285674	WITHOUT_CLASSIFICATION	1.480227714325836E-4	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999949895620929	WITHOUT_CLASSIFICATION	5.010437907181951E-6	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999987792462469	WITHOUT_CLASSIFICATION	1.2207537530646003E-6	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999727185805	WITHOUT_CLASSIFICATION	2.728141943785008E-8	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998519772285674	WITHOUT_CLASSIFICATION	1.480227714325836E-4	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998519772285674	WITHOUT_CLASSIFICATION	1.480227714325836E-4	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999997662100073	WITHOUT_CLASSIFICATION	2.33789992640628E-7	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999873416983769	WITHOUT_CLASSIFICATION	1.2658301623114028E-5	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999474964989343	WITHOUT_CLASSIFICATION	5.2503501065662013E-5	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999998559157408	WITHOUT_CLASSIFICATION	1.4408425920621032E-7	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999794152981983	WITHOUT_CLASSIFICATION	2.0584701801734542E-5	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999794152981983	WITHOUT_CLASSIFICATION	2.0584701801734542E-5	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999993576156039	WITHOUT_CLASSIFICATION	6.423843962041531E-7	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999985176890015	WITHOUT_CLASSIFICATION	1.48231099843826E-6	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999941828760853	WITHOUT_CLASSIFICATION	5.817123914672554E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999894226771987	WITHOUT_CLASSIFICATION	1.0577322801284742E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999894226771987	WITHOUT_CLASSIFICATION	1.0577322801284742E-5	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999988105889417	WITHOUT_CLASSIFICATION	1.1894110583454208E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9990259436638458	WITHOUT_CLASSIFICATION	9.740563361541409E-4	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999991904534343	WITHOUT_CLASSIFICATION	8.095465656136115E-7	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.999999710570633	WITHOUT_CLASSIFICATION	2.89429367064918E-7	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999868365137	WITHOUT_CLASSIFICATION	1.3163486283425811E-8	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999967828110471	WITHOUT_CLASSIFICATION	3.2171889528769434E-6	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999618371438379	WITHOUT_CLASSIFICATION	3.816285616205348E-5	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999959082219279	WITHOUT_CLASSIFICATION	4.091778072110523E-6	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999997259177987	WITHOUT_CLASSIFICATION	2.740822012446269E-7	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999991904534343	WITHOUT_CLASSIFICATION	8.095465656136115E-7	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999568129821111	WITHOUT_CLASSIFICATION	4.3187017888982076E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999780259011174	WITHOUT_CLASSIFICATION	2.197409888261647E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999780259011174	WITHOUT_CLASSIFICATION	2.197409888261647E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999987569674756	WITHOUT_CLASSIFICATION	1.2430325242949096E-6	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999960385133516	WITHOUT_CLASSIFICATION	3.961486648428709E-6	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999996893021229	WITHOUT_CLASSIFICATION	3.106978770159572E-7	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9994627945479758	WITHOUT_CLASSIFICATION	5.372054520241858E-4	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999474556125734	WITHOUT_CLASSIFICATION	5.254438742649107E-5	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999997235781568	WITHOUT_CLASSIFICATION	2.7642184324780817E-7	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999713653368226	WITHOUT_CLASSIFICATION	2.863466317735106E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9987103335753484	WITHOUT_CLASSIFICATION	0.0012896664246514896	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999582265339	WITHOUT_CLASSIFICATION	4.177346614668634E-8	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999980471756481	WITHOUT_CLASSIFICATION	1.952824351908248E-6	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999980471756481	WITHOUT_CLASSIFICATION	1.952824351908248E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999856119942164	WITHOUT_CLASSIFICATION	1.4388005783549694E-5	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999997921015916	WITHOUT_CLASSIFICATION	2.0789840832493616E-7	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997550873219	WITHOUT_CLASSIFICATION	2.4491267820867934E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999013029243544	WITHOUT_CLASSIFICATION	9.869707564556077E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9999726924257031	WITHOUT_CLASSIFICATION	2.730757429698631E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999871462288331	WITHOUT_CLASSIFICATION	1.2853771166974954E-5	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999844877913642	WITHOUT_CLASSIFICATION	1.5512208635857783E-5	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999998445007466	WITHOUT_CLASSIFICATION	1.554992533281665E-7	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999971932197389	WITHOUT_CLASSIFICATION	2.806780261170056E-6	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9999707345398311	WITHOUT_CLASSIFICATION	2.926546016881852E-5	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9989742654353787	WITHOUT_CLASSIFICATION	0.0010257345646213247	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999417388539916	WITHOUT_CLASSIFICATION	5.826114600848899E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9998710500018447	WITHOUT_CLASSIFICATION	1.2894999815527548E-4	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.999997949692978	WITHOUT_CLASSIFICATION	2.0503070220817924E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999218052917572	WITHOUT_CLASSIFICATION	7.819470824272295E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999351130964219	WITHOUT_CLASSIFICATION	6.488690357807106E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999351130964219	WITHOUT_CLASSIFICATION	6.488690357807106E-5	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9999958279185439	WITHOUT_CLASSIFICATION	4.1720814559966795E-6	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999760426045357	WITHOUT_CLASSIFICATION	2.3957395464323517E-5	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999968937016679	WITHOUT_CLASSIFICATION	3.106298332044943E-6	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.999987230720437	WITHOUT_CLASSIFICATION	1.2769279562909973E-5	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999963677066286	WITHOUT_CLASSIFICATION	3.632293371435011E-6	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999998043539063	WITHOUT_CLASSIFICATION	1.95646093579229E-7	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999851209077357	WITHOUT_CLASSIFICATION	1.4879092264192137E-5	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999954371207566	WITHOUT_CLASSIFICATION	4.562879243461073E-6	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999948242766752	WITHOUT_CLASSIFICATION	5.175723324812823E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999972911037327	WITHOUT_CLASSIFICATION	2.7088962672764768E-6	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999981363884456	WITHOUT_CLASSIFICATION	1.8636115543249697E-6	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999786159906827	WITHOUT_CLASSIFICATION	2.1384009317266834E-5	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9998602393420433	WITHOUT_CLASSIFICATION	1.3976065795675023E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.999999345558936	WITHOUT_CLASSIFICATION	6.544410638778308E-7	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999997670360175	WITHOUT_CLASSIFICATION	2.329639825925788E-7	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999998245465869	WITHOUT_CLASSIFICATION	1.754534130912043E-7	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999771859297245	WITHOUT_CLASSIFICATION	2.2814070275464066E-5	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999860345315601	WITHOUT_CLASSIFICATION	1.3965468439849218E-5	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9999996390811633	WITHOUT_CLASSIFICATION	3.6091883670904375E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999013029243544	WITHOUT_CLASSIFICATION	9.869707564556077E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999013029243544	WITHOUT_CLASSIFICATION	9.869707564556077E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999871462288331	WITHOUT_CLASSIFICATION	1.2853771166974954E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999871462288331	WITHOUT_CLASSIFICATION	1.2853771166974954E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9998710500018447	WITHOUT_CLASSIFICATION	1.2894999815527548E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999351130964219	WITHOUT_CLASSIFICATION	6.488690357807106E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.999999345558936	WITHOUT_CLASSIFICATION	6.544410638778308E-7	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999861519342	WITHOUT_CLASSIFICATION	1.3848065870313138E-8	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999917819847965	WITHOUT_CLASSIFICATION	8.218015203373574E-6	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.999993846884615	WITHOUT_CLASSIFICATION	6.153115384991157E-6	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.999978682742105	WITHOUT_CLASSIFICATION	2.1317257895065308E-5	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999743333932057	WITHOUT_CLASSIFICATION	2.5666606794357072E-5	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999969026400852	WITHOUT_CLASSIFICATION	3.097359914766796E-6	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9998592927585216	WITHOUT_CLASSIFICATION	1.4070724147833633E-4	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9995147033385825	WITHOUT_CLASSIFICATION	4.8529666141745284E-4	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999482105092763	WITHOUT_CLASSIFICATION	5.178949072370528E-5	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999999692680445	WITHOUT_CLASSIFICATION	3.0731955483209224E-8	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999958726473763	WITHOUT_CLASSIFICATION	4.127352623716636E-6	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999958726473763	WITHOUT_CLASSIFICATION	4.127352623716636E-6	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999648174356	WITHOUT_CLASSIFICATION	3.518256442548751E-8	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999970484590861	WITHOUT_CLASSIFICATION	2.9515409138197412E-6	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999985785523111	WITHOUT_CLASSIFICATION	1.421447688834378E-6	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998879641732076	WITHOUT_CLASSIFICATION	1.1203582679240632E-4	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999879106324	WITHOUT_CLASSIFICATION	1.2089367539568778E-8	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999998176052864	WITHOUT_CLASSIFICATION	1.8239471362517925E-7	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999959318404766	WITHOUT_CLASSIFICATION	4.068159523349165E-6	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999957488615747	WITHOUT_CLASSIFICATION	4.251138425238461E-6	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9998694685405289	WITHOUT_CLASSIFICATION	1.3053145947107772E-4	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.999997383795547	WITHOUT_CLASSIFICATION	2.616204452842477E-6	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.999997383795547	WITHOUT_CLASSIFICATION	2.616204452842477E-6	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9999991170905747	WITHOUT_CLASSIFICATION	8.829094252821632E-7	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999991678359142	WITHOUT_CLASSIFICATION	8.321640858708192E-7	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999940600607105	WITHOUT_CLASSIFICATION	5.939939289483681E-6	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999854872645546	WITHOUT_CLASSIFICATION	1.4512735445368606E-5	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999110125845945	WITHOUT_CLASSIFICATION	8.898741540556454E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999871462288331	WITHOUT_CLASSIFICATION	1.2853771166974954E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9998710500018447	WITHOUT_CLASSIFICATION	1.2894999815527548E-4	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999218052917572	WITHOUT_CLASSIFICATION	7.819470824272295E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.999999345558936	WITHOUT_CLASSIFICATION	6.544410638778308E-7	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.999999345558936	WITHOUT_CLASSIFICATION	6.544410638778308E-7	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999864887458558	WITHOUT_CLASSIFICATION	1.3511254144088278E-5	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999864887458558	WITHOUT_CLASSIFICATION	1.3511254144088278E-5	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999966207119775	WITHOUT_CLASSIFICATION	3.3792880225971467E-6	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999191929934013	WITHOUT_CLASSIFICATION	8.080700659874072E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999191929934013	WITHOUT_CLASSIFICATION	8.080700659874072E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999869702292529	WITHOUT_CLASSIFICATION	1.3029770747161057E-5	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999974516642084	WITHOUT_CLASSIFICATION	2.5483357915312728E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999980443276094	WITHOUT_CLASSIFICATION	1.955672390629107E-6	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.99999765153309	WITHOUT_CLASSIFICATION	2.3484669100615578E-6	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9991897835345627	WITHOUT_CLASSIFICATION	8.102164654373246E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999932888952607	WITHOUT_CLASSIFICATION	6.711104739282992E-6	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999932888952607	WITHOUT_CLASSIFICATION	6.711104739282992E-6	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999688417880053	WITHOUT_CLASSIFICATION	3.1158211994736675E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999936889122337	WITHOUT_CLASSIFICATION	6.311087766362027E-6	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999885357203586	WITHOUT_CLASSIFICATION	1.1464279641361415E-5	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999454646937083	WITHOUT_CLASSIFICATION	5.453530629174299E-5	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999847867240947	WITHOUT_CLASSIFICATION	1.52132759053656E-5	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999799594088528	WITHOUT_CLASSIFICATION	2.0040591147222496E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999777750225678	WITHOUT_CLASSIFICATION	2.2224977432233854E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999299428345386	WITHOUT_CLASSIFICATION	7.005716546145717E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999299428345386	WITHOUT_CLASSIFICATION	7.005716546145717E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9992124269519693	WITHOUT_CLASSIFICATION	7.87573048030574E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.9992124269519693	WITHOUT_CLASSIFICATION	7.87573048030574E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999953215254269	WITHOUT_CLASSIFICATION	4.678474573078185E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999953215254269	WITHOUT_CLASSIFICATION	4.678474573078185E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999993574904034	WITHOUT_CLASSIFICATION	6.42509596674852E-7	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999993574904034	WITHOUT_CLASSIFICATION	6.42509596674852E-7	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999932888952607	WITHOUT_CLASSIFICATION	6.711104739282992E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999777750225678	WITHOUT_CLASSIFICATION	2.2224977432233854E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999299428345386	WITHOUT_CLASSIFICATION	7.005716546145717E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999299428345386	WITHOUT_CLASSIFICATION	7.005716546145717E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9992124269519693	WITHOUT_CLASSIFICATION	7.87573048030574E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999953215254269	WITHOUT_CLASSIFICATION	4.678474573078185E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999953215254269	WITHOUT_CLASSIFICATION	4.678474573078185E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999993574904034	WITHOUT_CLASSIFICATION	6.42509596674852E-7	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.999999811773861	WITHOUT_CLASSIFICATION	1.8822613899625692E-7	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999920535318803	WITHOUT_CLASSIFICATION	7.946468119716523E-6	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999843942885489	WITHOUT_CLASSIFICATION	1.5605711451108527E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999901153095417	WITHOUT_CLASSIFICATION	9.884690458355321E-6	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999993669100357	WITHOUT_CLASSIFICATION	6.33089964452742E-7	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9998933610271968	WITHOUT_CLASSIFICATION	1.0663897280312578E-4	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9997795914682028	WITHOUT_CLASSIFICATION	2.2040853179732266E-4	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.8038941308870239	WITHOUT_CLASSIFICATION	0.1961058691129762	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998911792838786	WITHOUT_CLASSIFICATION	1.0882071612139202E-4	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999928306399527	WITHOUT_CLASSIFICATION	7.169360047369418E-6	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999864320659195	WITHOUT_CLASSIFICATION	1.3567934080406814E-5	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999996547638554	WITHOUT_CLASSIFICATION	3.4523614449567164E-7	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999399567464914	WITHOUT_CLASSIFICATION	6.004325350866266E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9998933610271968	WITHOUT_CLASSIFICATION	1.0663897280312578E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9998933610271968	WITHOUT_CLASSIFICATION	1.0663897280312578E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9998933610271968	WITHOUT_CLASSIFICATION	1.0663897280312578E-4	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999960984544299	WITHOUT_CLASSIFICATION	3.9015455700498375E-6	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999976256504027	WITHOUT_CLASSIFICATION	2.3743495973468626E-6	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999976256504027	WITHOUT_CLASSIFICATION	2.3743495973468626E-6	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999024282017874	WITHOUT_CLASSIFICATION	9.757179821259555E-5	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999959690788204	WITHOUT_CLASSIFICATION	4.030921179628285E-6	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999963529062214	WITHOUT_CLASSIFICATION	3.6470937786476497E-6	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999876046750896	WITHOUT_CLASSIFICATION	1.2395324910280683E-5	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999876046750896	WITHOUT_CLASSIFICATION	1.2395324910280683E-5	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999966191853938	WITHOUT_CLASSIFICATION	3.3808146061192565E-6	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999837526872141	WITHOUT_CLASSIFICATION	1.6247312785911835E-5	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999837526872141	WITHOUT_CLASSIFICATION	1.6247312785911835E-5	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999973584114418	WITHOUT_CLASSIFICATION	2.641588558191834E-6	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999989132642719	WITHOUT_CLASSIFICATION	1.0867357281062079E-6	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999953416508194	WITHOUT_CLASSIFICATION	4.658349180620208E-6	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9996810640281132	WITHOUT_CLASSIFICATION	3.189359718868428E-4	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9998774118722085	WITHOUT_CLASSIFICATION	1.2258812779149445E-4	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.9998331713683584	WITHOUT_CLASSIFICATION	1.6682863164165543E-4	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999652883760292	WITHOUT_CLASSIFICATION	3.471162397074225E-5	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9994633211834026	WITHOUT_CLASSIFICATION	5.366788165973288E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9895070116046562	WITHOUT_CLASSIFICATION	0.01049298839534384	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9997087452570602	WITHOUT_CLASSIFICATION	2.91254742939749E-4	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999183608356226	WITHOUT_CLASSIFICATION	8.163916437737478E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996512418463531	WITHOUT_CLASSIFICATION	3.4875815364689594E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999405665462	WITHOUT_CLASSIFICATION	5.9433453965977703E-8	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999992267362409	WITHOUT_CLASSIFICATION	7.732637591769264E-7	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999989216999001	WITHOUT_CLASSIFICATION	1.0783000998259788E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996512418463531	WITHOUT_CLASSIFICATION	3.4875815364689594E-4	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999981103512946	WITHOUT_CLASSIFICATION	1.8896487053365002E-6	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999946700258074	WITHOUT_CLASSIFICATION	5.32997419260484E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999744654407412	WITHOUT_CLASSIFICATION	2.553455925878154E-5	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9996353974058629	WITHOUT_CLASSIFICATION	3.6460259413705504E-4	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999901819637415	WITHOUT_CLASSIFICATION	9.81803625866247E-6	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999838704981522	WITHOUT_CLASSIFICATION	1.6129501847730646E-5	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999839291952944	WITHOUT_CLASSIFICATION	1.6070804705581833E-5	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999167951259215	WITHOUT_CLASSIFICATION	8.320487407861884E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999963009174435	WITHOUT_CLASSIFICATION	3.6990825565869427E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999996643488836	WITHOUT_CLASSIFICATION	3.3565111640915564E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999861988029858	WITHOUT_CLASSIFICATION	1.3801197014225994E-5	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999991512702285	WITHOUT_CLASSIFICATION	8.487297715397898E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9998474927797096	WITHOUT_CLASSIFICATION	1.5250722029047992E-4	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999652883760292	WITHOUT_CLASSIFICATION	3.471162397074225E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999963009174435	WITHOUT_CLASSIFICATION	3.6990825565869427E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999861988029858	WITHOUT_CLASSIFICATION	1.3801197014225994E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9998474927797096	WITHOUT_CLASSIFICATION	1.5250722029047992E-4	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999993042529045	WITHOUT_CLASSIFICATION	6.957470954965772E-6	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9997536407041648	WITHOUT_CLASSIFICATION	2.4635929583511636E-4	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999980365046824	WITHOUT_CLASSIFICATION	1.963495317534049E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999139280356438	WITHOUT_CLASSIFICATION	8.607196435611946E-5	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999589246434191	WITHOUT_CLASSIFICATION	4.10753565808819E-5	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9998402199877281	WITHOUT_CLASSIFICATION	1.5978001227203318E-4	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.999989742768528	WITHOUT_CLASSIFICATION	1.0257231472014159E-5	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999963351720362	WITHOUT_CLASSIFICATION	3.6648279638083426E-5	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999913592489712	WITHOUT_CLASSIFICATION	8.640751028839535E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999545870981	WITHOUT_CLASSIFICATION	4.541290194617234E-8	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999989085231481	WITHOUT_CLASSIFICATION	1.0914768518375763E-6	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999682569723729	WITHOUT_CLASSIFICATION	3.174302762708556E-5	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999412321449	WITHOUT_CLASSIFICATION	5.876785521105325E-8	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999996965284658	WITHOUT_CLASSIFICATION	3.03471534193514E-6	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9997389696583503	WITHOUT_CLASSIFICATION	2.6103034164971296E-4	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999990404433323	WITHOUT_CLASSIFICATION	9.595566676943336E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9998547467505596	WITHOUT_CLASSIFICATION	1.4525324944041694E-4	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999994052456174	WITHOUT_CLASSIFICATION	5.94754382615096E-7	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.9999215573230823	WITHOUT_CLASSIFICATION	7.84426769176604E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999963009174435	WITHOUT_CLASSIFICATION	3.6990825565869427E-6	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999994252837127	WITHOUT_CLASSIFICATION	5.747162873119757E-7	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999997994767663	WITHOUT_CLASSIFICATION	2.0052323376143463E-7	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999966905284474	WITHOUT_CLASSIFICATION	3.30947155269407E-6	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999996789861609	WITHOUT_CLASSIFICATION	3.210138389740628E-7	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9999997350233929	WITHOUT_CLASSIFICATION	2.6497660713796553E-7	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.999959551157099	WITHOUT_CLASSIFICATION	4.0448842900893285E-5	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999987613012	WITHOUT_CLASSIFICATION	1.2386988457538486E-9	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999480932279	WITHOUT_CLASSIFICATION	5.190677210601094E-8	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999166640917901	WITHOUT_CLASSIFICATION	8.33359082097995E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9998883186882497	WITHOUT_CLASSIFICATION	1.116813117502791E-4	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999613110730194	WITHOUT_CLASSIFICATION	3.8688926980594105E-5	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999731708447412	WITHOUT_CLASSIFICATION	2.682915525882893E-5	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.999841576267862	WITHOUT_CLASSIFICATION	1.58423732138062E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999993300276278	WITHOUT_CLASSIFICATION	6.699723722114341E-7	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999997965269067	WITHOUT_CLASSIFICATION	2.0347309332010085E-7	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999877426664043	WITHOUT_CLASSIFICATION	1.22573335956302E-5	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999824577241895	WITHOUT_CLASSIFICATION	1.754227581056817E-5	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999974936728845	WITHOUT_CLASSIFICATION	2.5063271155713947E-6	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999987926456796	WITHOUT_CLASSIFICATION	1.2073543204383321E-6	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999902315021386	WITHOUT_CLASSIFICATION	9.768497861268381E-6	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999987716	WITHOUT_CLASSIFICATION	1.228375704547552E-12	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998973977140905	WITHOUT_CLASSIFICATION	1.0260228590947182E-4	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999997259561088	WITHOUT_CLASSIFICATION	2.740438912289774E-7	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999965181009467	WITHOUT_CLASSIFICATION	3.481899053318729E-6	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999825576821074	WITHOUT_CLASSIFICATION	1.744231789260017E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999825576821074	WITHOUT_CLASSIFICATION	1.744231789260017E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999900539900637	WITHOUT_CLASSIFICATION	9.94600993640112E-6	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999993502560951	WITHOUT_CLASSIFICATION	6.4974390489307884E-6	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999997705971423	WITHOUT_CLASSIFICATION	2.2940285756745815E-7	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999940716587812	WITHOUT_CLASSIFICATION	5.9283412188320725E-6	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999965350098371	WITHOUT_CLASSIFICATION	3.464990162828763E-6	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9977371711885674	WITHOUT_CLASSIFICATION	0.0022628288114326044	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999723374489045	WITHOUT_CLASSIFICATION	2.7662551095562583E-5	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999927020955939	WITHOUT_CLASSIFICATION	7.297904406083502E-6	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999645861777671	WITHOUT_CLASSIFICATION	3.5413822232936523E-5	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999954782435715	WITHOUT_CLASSIFICATION	4.5217564284673915E-6	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999960128023614	WITHOUT_CLASSIFICATION	3.987197638634685E-6	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999979553225067	WITHOUT_CLASSIFICATION	2.044677493380693E-6	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999755097687378	WITHOUT_CLASSIFICATION	2.449023126222966E-5	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9981213359424498	WITHOUT_CLASSIFICATION	0.0018786640575502007	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999845537034234	WITHOUT_CLASSIFICATION	1.5446296576541758E-5	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9995481372257958	WITHOUT_CLASSIFICATION	4.518627742041503E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999494537760422	WITHOUT_CLASSIFICATION	5.054622395775693E-5	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999695742795116	WITHOUT_CLASSIFICATION	3.042572048835141E-5	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999875937844854	WITHOUT_CLASSIFICATION	1.2406215514493893E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999998811964409	WITHOUT_CLASSIFICATION	1.1880355912525293E-7	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999737809103808	WITHOUT_CLASSIFICATION	2.6219089619117914E-5	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999028660408	WITHOUT_CLASSIFICATION	9.71339592732271E-8	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999895819619563	WITHOUT_CLASSIFICATION	1.041803804379445E-5	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9998660875321439	WITHOUT_CLASSIFICATION	1.339124678560504E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999981738280631	WITHOUT_CLASSIFICATION	1.8261719368645765E-6	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999982926758647	WITHOUT_CLASSIFICATION	1.7073241352828208E-6	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999893938201263	WITHOUT_CLASSIFICATION	1.0606179873698132E-5	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999991040932519	WITHOUT_CLASSIFICATION	8.959067480820604E-7	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999996315470929	WITHOUT_CLASSIFICATION	3.684529070910164E-6	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999787689447287	WITHOUT_CLASSIFICATION	2.1231055271275198E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999998811964409	WITHOUT_CLASSIFICATION	1.1880355912525293E-7	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999955730070317	WITHOUT_CLASSIFICATION	4.426992968291814E-6	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999950972009509	WITHOUT_CLASSIFICATION	4.902799049096435E-6	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999925318806433	WITHOUT_CLASSIFICATION	7.468119356667167E-6	DEFECT
found	WITHOUT_CLASSIFICATION	0.9998460362465464	WITHOUT_CLASSIFICATION	1.5396375345357694E-4	DEFECT
found	WITHOUT_CLASSIFICATION	0.9998460362465464	WITHOUT_CLASSIFICATION	1.5396375345357694E-4	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999810729705	WITHOUT_CLASSIFICATION	1.8927029475997332E-8	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999972119422847	WITHOUT_CLASSIFICATION	2.78805771530959E-6	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999762070637552	WITHOUT_CLASSIFICATION	2.379293624482587E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999762070637552	WITHOUT_CLASSIFICATION	2.379293624482587E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999997259561088	WITHOUT_CLASSIFICATION	2.740438912289774E-7	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999990984482492	WITHOUT_CLASSIFICATION	9.015517507891357E-7	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999659622402842	WITHOUT_CLASSIFICATION	3.403775971572819E-5	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999728972653	WITHOUT_CLASSIFICATION	2.7102734706460947E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999856119942164	WITHOUT_CLASSIFICATION	1.4388005783549694E-5	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999659622402842	WITHOUT_CLASSIFICATION	3.403775971572819E-5	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999728972653	WITHOUT_CLASSIFICATION	2.7102734706460947E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999995494095252	WITHOUT_CLASSIFICATION	4.5059047484375836E-7	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999993977829217	WITHOUT_CLASSIFICATION	6.022170783827512E-7	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999684886041192	WITHOUT_CLASSIFICATION	3.151139588084547E-5	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999991868700724	WITHOUT_CLASSIFICATION	8.131299276203155E-7	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999626761488344	WITHOUT_CLASSIFICATION	3.732385116549382E-5	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999885525153458	WITHOUT_CLASSIFICATION	1.1447484654213393E-5	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999987408139656	WITHOUT_CLASSIFICATION	1.2591860343732445E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999987408139656	WITHOUT_CLASSIFICATION	1.2591860343732445E-6	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999963685924792	WITHOUT_CLASSIFICATION	3.6314075209041334E-6	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999971992888	WITHOUT_CLASSIFICATION	2.8007112019755516E-9	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999976585913061	WITHOUT_CLASSIFICATION	2.341408693942827E-6	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999839142579	WITHOUT_CLASSIFICATION	1.6085741977248265E-8	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.999999961613189	WITHOUT_CLASSIFICATION	3.8386810954031854E-8	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999988378762166	WITHOUT_CLASSIFICATION	1.1621237834171297E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999856119942164	WITHOUT_CLASSIFICATION	1.4388005783549694E-5	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999966506477159	WITHOUT_CLASSIFICATION	3.3493522840533688E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999812257183069	WITHOUT_CLASSIFICATION	1.8774281693107127E-5	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999812257183069	WITHOUT_CLASSIFICATION	1.8774281693107127E-5	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999722815609127	WITHOUT_CLASSIFICATION	2.7718439087346196E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999995494095252	WITHOUT_CLASSIFICATION	4.5059047484375836E-7	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.999800677305838	WITHOUT_CLASSIFICATION	1.9932269416200298E-4	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9982685004090615	WITHOUT_CLASSIFICATION	0.001731499590938608	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9991348699977405	WITHOUT_CLASSIFICATION	8.651300022596348E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999741703647279	WITHOUT_CLASSIFICATION	2.58296352720609E-5	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9983932801005991	WITHOUT_CLASSIFICATION	0.001606719899400898	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999995494095252	WITHOUT_CLASSIFICATION	4.5059047484375836E-7	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999741703647279	WITHOUT_CLASSIFICATION	2.58296352720609E-5	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9983932801005991	WITHOUT_CLASSIFICATION	0.001606719899400898	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999967462724	WITHOUT_CLASSIFICATION	3.253727593865202E-9	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999992592202997	WITHOUT_CLASSIFICATION	7.407797003099975E-6	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999177335626693	WITHOUT_CLASSIFICATION	8.226643733064894E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999995494095252	WITHOUT_CLASSIFICATION	4.5059047484375836E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999995494095252	WITHOUT_CLASSIFICATION	4.5059047484375836E-7	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999956381646696	WITHOUT_CLASSIFICATION	4.361835330431518E-6	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9999966816125686	WITHOUT_CLASSIFICATION	3.3183874313135603E-6	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999969790301805	WITHOUT_CLASSIFICATION	3.020969819488669E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999988586143993	WITHOUT_CLASSIFICATION	1.1413856007301857E-6	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999967454133429	WITHOUT_CLASSIFICATION	3.254586656993352E-6	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999998550028398	WITHOUT_CLASSIFICATION	1.4499716008858997E-7	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999998906861023	WITHOUT_CLASSIFICATION	1.0931389779107995E-7	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999979335504969	WITHOUT_CLASSIFICATION	2.0664495030103994E-6	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999908320389307	WITHOUT_CLASSIFICATION	9.167961069384784E-6	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9999723511521481	WITHOUT_CLASSIFICATION	2.7648847852000915E-5	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999729071743976	WITHOUT_CLASSIFICATION	2.709282560237468E-5	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999942395823135	WITHOUT_CLASSIFICATION	5.760417686408892E-6	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999169941082	WITHOUT_CLASSIFICATION	8.30058918639445E-8	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999982717873661	WITHOUT_CLASSIFICATION	1.7282126339184978E-6	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621372036162	WITHOUT_CLASSIFICATION	3.7862796383744857E-5	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999080755845171	WITHOUT_CLASSIFICATION	9.192441548296042E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999988586143993	WITHOUT_CLASSIFICATION	1.1413856007301857E-6	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999926745881279	WITHOUT_CLASSIFICATION	7.3254118721336085E-6	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999994739078621	WITHOUT_CLASSIFICATION	5.260921379662169E-7	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999689407999	WITHOUT_CLASSIFICATION	3.1059200113144065E-8	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.999991234998152	WITHOUT_CLASSIFICATION	8.765001848069439E-6	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998249147400081	WITHOUT_CLASSIFICATION	1.750852599918896E-4	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998249147400081	WITHOUT_CLASSIFICATION	1.750852599918896E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999988586143993	WITHOUT_CLASSIFICATION	1.1413856007301857E-6	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998552159027133	WITHOUT_CLASSIFICATION	1.4478409728656838E-4	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999994292022261	WITHOUT_CLASSIFICATION	5.707977738409933E-7	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9937416688353813	WITHOUT_CLASSIFICATION	0.006258331164618621	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999988511661045	WITHOUT_CLASSIFICATION	1.1488338954466912E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999792493464882	WITHOUT_CLASSIFICATION	2.0750653511781907E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999996887139126	WITHOUT_CLASSIFICATION	3.112860873731432E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9992105845352439	WITHOUT_CLASSIFICATION	7.894154647561542E-4	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999999372150957	WITHOUT_CLASSIFICATION	6.278490418876512E-8	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999993886151	WITHOUT_CLASSIFICATION	6.113850114160458E-10	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999981684267399	WITHOUT_CLASSIFICATION	1.8315732600867452E-6	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.998975634888943	WITHOUT_CLASSIFICATION	0.0010243651110570335	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999861344215323	WITHOUT_CLASSIFICATION	1.3865578467694506E-4	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999703811610696	WITHOUT_CLASSIFICATION	2.961883893046953E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999968815174	WITHOUT_CLASSIFICATION	3.1184826410438146E-9	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946624430419	WITHOUT_CLASSIFICATION	5.337556958042425E-6	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999914579767953	WITHOUT_CLASSIFICATION	8.542023204552626E-6	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999771649943225	WITHOUT_CLASSIFICATION	2.2835005677470474E-5	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999951055650158	WITHOUT_CLASSIFICATION	4.894434984291926E-6	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999593845629	WITHOUT_CLASSIFICATION	4.061543710115604E-7	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999012228934568	WITHOUT_CLASSIFICATION	9.87771065431519E-5	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999933130441305	WITHOUT_CLASSIFICATION	6.686955869498743E-6	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998103311981	WITHOUT_CLASSIFICATION	1.896688018127423E-7	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999565000497317	WITHOUT_CLASSIFICATION	4.349995026835716E-5	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999847220966157	WITHOUT_CLASSIFICATION	1.5277903384292956E-5	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998042436300871	WITHOUT_CLASSIFICATION	1.957563699128554E-4	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999451494690238	WITHOUT_CLASSIFICATION	5.485053097607994E-5	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997964219333041	WITHOUT_CLASSIFICATION	2.0357806669579642E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998710980572573	WITHOUT_CLASSIFICATION	1.2890194274265044E-4	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996367568275026	WITHOUT_CLASSIFICATION	3.632431724974046E-4	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388435288483	WITHOUT_CLASSIFICATION	6.11564711517348E-5	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999948018638463	WITHOUT_CLASSIFICATION	5.198136153701478E-6	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999962991578006	WITHOUT_CLASSIFICATION	3.70084219925351E-6	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999875455950497	WITHOUT_CLASSIFICATION	1.2454404950273624E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988775835061	WITHOUT_CLASSIFICATION	1.1224164938206231E-6	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970198062927	WITHOUT_CLASSIFICATION	2.9801937072917444E-6	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999874833270559	WITHOUT_CLASSIFICATION	1.2516672944119301E-5	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999870751525628	WITHOUT_CLASSIFICATION	1.2924847437201752E-4	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937662496067	WITHOUT_CLASSIFICATION	6.233750393383821E-6	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973940247875	WITHOUT_CLASSIFICATION	2.6059752125012223E-5	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996403834229677	WITHOUT_CLASSIFICATION	3.5961657703231174E-4	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9991535509380063	WITHOUT_CLASSIFICATION	8.464490619936216E-4	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999088874898081	WITHOUT_CLASSIFICATION	9.111251019180084E-5	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9940571492612632	WITHOUT_CLASSIFICATION	0.005942850738736844	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999881146297014	WITHOUT_CLASSIFICATION	1.1885370298599499E-4	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999998474148	WITHOUT_CLASSIFICATION	1.5258511209696928E-10	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999968290270703	WITHOUT_CLASSIFICATION	3.170972929605106E-6	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.999996630041932	WITHOUT_CLASSIFICATION	3.3699580680632944E-6	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999987666077148	WITHOUT_CLASSIFICATION	1.2333922851437974E-6	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999899735956	WITHOUT_CLASSIFICATION	1.0026404349418177E-8	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999930802980608	WITHOUT_CLASSIFICATION	6.9197019392772664E-6	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999939376660945	WITHOUT_CLASSIFICATION	6.062333905495555E-5	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999677307774014	WITHOUT_CLASSIFICATION	3.226922259849658E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999689478660695	WITHOUT_CLASSIFICATION	3.105213393048774E-5	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999945609913704	WITHOUT_CLASSIFICATION	5.4390086295728516E-6	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999992778480479	WITHOUT_CLASSIFICATION	7.221519520634871E-7	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999889626946243	WITHOUT_CLASSIFICATION	1.1037305375624733E-5	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9994194104453343	WITHOUT_CLASSIFICATION	5.805895546656222E-4	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9998353957196393	WITHOUT_CLASSIFICATION	1.6460428036078304E-4	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9981531743355676	WITHOUT_CLASSIFICATION	0.0018468256644323174	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665030430002	WITHOUT_CLASSIFICATION	3.349695699984558E-5	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998914025545281	WITHOUT_CLASSIFICATION	1.0859744547189188E-4	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997005814295	WITHOUT_CLASSIFICATION	2.99418570511134E-6	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999564263797694	WITHOUT_CLASSIFICATION	4.357362023058069E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9999226210892749	WITHOUT_CLASSIFICATION	7.737891072511344E-5	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999999883423143	WITHOUT_CLASSIFICATION	1.1657685693441036E-7	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.999999389635408	WITHOUT_CLASSIFICATION	6.103645920571038E-7	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9994983612909636	WITHOUT_CLASSIFICATION	5.016387090363161E-4	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998798133645	WITHOUT_CLASSIFICATION	1.2018663547599452E-7	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999907659374473	WITHOUT_CLASSIFICATION	9.23406255266813E-6	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999960203971008	WITHOUT_CLASSIFICATION	3.9796028992113E-6	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999961424276441	WITHOUT_CLASSIFICATION	3.857572355849836E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999889524936	WITHOUT_CLASSIFICATION	1.104750636820669E-8	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999990090965839	WITHOUT_CLASSIFICATION	9.909034161534193E-7	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999975127119889	WITHOUT_CLASSIFICATION	2.4872880111683102E-6	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999818025986962	WITHOUT_CLASSIFICATION	1.8197401303842996E-5	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999979146769463	WITHOUT_CLASSIFICATION	2.08532305365756E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999968290270703	WITHOUT_CLASSIFICATION	3.170972929605106E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999853036300069	WITHOUT_CLASSIFICATION	1.4696369993009302E-5	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998281727457	WITHOUT_CLASSIFICATION	1.718272544156584E-7	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999873501536282	WITHOUT_CLASSIFICATION	1.2649846371932656E-5	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999710686817788	WITHOUT_CLASSIFICATION	2.8931318221202723E-4	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999972209080238	WITHOUT_CLASSIFICATION	2.7790919761979235E-5	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9999992385265657	WITHOUT_CLASSIFICATION	7.614734342756732E-7	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9999226210892749	WITHOUT_CLASSIFICATION	7.737891072511344E-5	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9997162889359693	WITHOUT_CLASSIFICATION	2.837110640306503E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999790728380958	WITHOUT_CLASSIFICATION	2.0927161904096275E-5	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999974610439623	WITHOUT_CLASSIFICATION	2.5389560376939015E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999597931861651	WITHOUT_CLASSIFICATION	4.020681383490372E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999787742382135	WITHOUT_CLASSIFICATION	2.122576178653801E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999936226085	WITHOUT_CLASSIFICATION	6.37739154450559E-9	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999597806705729	WITHOUT_CLASSIFICATION	4.021932942702481E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999997130465121	WITHOUT_CLASSIFICATION	2.869534878594334E-7	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999997665756742	WITHOUT_CLASSIFICATION	2.33424325636574E-7	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999993925463337	WITHOUT_CLASSIFICATION	6.074536662676264E-7	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999998863574453	WITHOUT_CLASSIFICATION	1.1364255471082187E-7	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999133728589961	WITHOUT_CLASSIFICATION	8.6627141003987E-5	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999074876976	WITHOUT_CLASSIFICATION	9.251230234500746E-8	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.999994225214291	WITHOUT_CLASSIFICATION	5.774785708860569E-6	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999972396535277	WITHOUT_CLASSIFICATION	2.760346472140389E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999191176808528	WITHOUT_CLASSIFICATION	8.088231914718732E-5	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999995470233431	WITHOUT_CLASSIFICATION	4.5297665685656775E-7	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999988122896449	WITHOUT_CLASSIFICATION	1.1877103550493626E-6	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999997111707692	WITHOUT_CLASSIFICATION	2.888292307377355E-7	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999967553793117	WITHOUT_CLASSIFICATION	3.244620688300916E-5	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999847466815734	WITHOUT_CLASSIFICATION	1.5253318426533767E-5	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999983309427278	WITHOUT_CLASSIFICATION	1.6690572722274926E-6	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999996134233992	WITHOUT_CLASSIFICATION	3.8657660096042743E-7	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9435164016515246	WITHOUT_CLASSIFICATION	0.05648359834847532	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.999999047638346	WITHOUT_CLASSIFICATION	9.523616538724871E-7	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998002450592	WITHOUT_CLASSIFICATION	1.9975494080671105E-7	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999787004879446	WITHOUT_CLASSIFICATION	2.129951205545308E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999968290270703	WITHOUT_CLASSIFICATION	3.170972929605106E-6	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9913200091289611	WITHOUT_CLASSIFICATION	0.008679990871038892	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999894835927852	WITHOUT_CLASSIFICATION	1.0516407214842762E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9917100557626902	WITHOUT_CLASSIFICATION	0.00828994423730982	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999994436382299	WITHOUT_CLASSIFICATION	5.56361770117353E-7	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999967917823585	WITHOUT_CLASSIFICATION	3.208217641646628E-6	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999965846528704	WITHOUT_CLASSIFICATION	3.4153471296217623E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999968290270703	WITHOUT_CLASSIFICATION	3.170972929605106E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999951485882497	WITHOUT_CLASSIFICATION	4.851411750302804E-6	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999995470233431	WITHOUT_CLASSIFICATION	4.5297665685656775E-7	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9993746696383172	WITHOUT_CLASSIFICATION	6.253303616827904E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999191176808528	WITHOUT_CLASSIFICATION	8.088231914718732E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9998620320594022	WITHOUT_CLASSIFICATION	1.379679405977647E-4	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.99971165663083	WITHOUT_CLASSIFICATION	2.8834336917007677E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9993553023822571	WITHOUT_CLASSIFICATION	6.44697617742893E-4	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999974610439623	WITHOUT_CLASSIFICATION	2.5389560376939015E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999597931861651	WITHOUT_CLASSIFICATION	4.020681383490372E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999787742382135	WITHOUT_CLASSIFICATION	2.122576178653801E-5	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999998568839621	WITHOUT_CLASSIFICATION	1.431160379725222E-7	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9999979556939911	WITHOUT_CLASSIFICATION	2.0443060088668373E-6	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999997810608925	WITHOUT_CLASSIFICATION	2.1893910749704183E-6	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999191176808528	WITHOUT_CLASSIFICATION	8.088231914718732E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9998620320594022	WITHOUT_CLASSIFICATION	1.379679405977647E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999968290270703	WITHOUT_CLASSIFICATION	3.170972929605106E-6	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999936226085	WITHOUT_CLASSIFICATION	6.37739154450559E-9	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999597806705729	WITHOUT_CLASSIFICATION	4.021932942702481E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999997130465121	WITHOUT_CLASSIFICATION	2.869534878594334E-7	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997255301736	WITHOUT_CLASSIFICATION	2.7446982634866285E-7	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989153064201	WITHOUT_CLASSIFICATION	1.0846935799105928E-5	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999981989769201	WITHOUT_CLASSIFICATION	1.8010230798831263E-6	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999991117761099	WITHOUT_CLASSIFICATION	8.882238900802797E-7	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999989017937555	WITHOUT_CLASSIFICATION	1.098206244527534E-6	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999603092873425	WITHOUT_CLASSIFICATION	3.969071265754909E-5	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996403834229677	WITHOUT_CLASSIFICATION	3.5961657703231174E-4	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9994953778970171	WITHOUT_CLASSIFICATION	5.046221029829711E-4	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999998695978741	WITHOUT_CLASSIFICATION	1.304021258420476E-7	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999965620370392	WITHOUT_CLASSIFICATION	3.4379629607741833E-6	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999548345011	WITHOUT_CLASSIFICATION	4.516549883455688E-8	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995767109907	WITHOUT_CLASSIFICATION	4.232890093514542E-7	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997964219333041	WITHOUT_CLASSIFICATION	2.0357806669579642E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998710980572573	WITHOUT_CLASSIFICATION	1.2890194274265044E-4	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988775835061	WITHOUT_CLASSIFICATION	1.1224164938206231E-6	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995767109907	WITHOUT_CLASSIFICATION	4.232890093514542E-7	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999982959157325	WITHOUT_CLASSIFICATION	1.7040842674558553E-6	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999927772097693	WITHOUT_CLASSIFICATION	7.2227902306817514E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994310440879081	WITHOUT_CLASSIFICATION	5.689559120919894E-4	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996939985218815	WITHOUT_CLASSIFICATION	3.060014781184967E-4	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9993083143843845	WITHOUT_CLASSIFICATION	6.916856156155074E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999478165944854	WITHOUT_CLASSIFICATION	5.2183405514759974E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970198062927	WITHOUT_CLASSIFICATION	2.9801937072917444E-6	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937662496067	WITHOUT_CLASSIFICATION	6.233750393383821E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999889524936	WITHOUT_CLASSIFICATION	1.104750636820669E-8	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999884649774731	WITHOUT_CLASSIFICATION	1.15350225269998E-5	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999993925181467	WITHOUT_CLASSIFICATION	6.074818533362093E-7	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999991525200576	WITHOUT_CLASSIFICATION	8.4747994247619E-7	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999241909516	WITHOUT_CLASSIFICATION	7.580904838197686E-8	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999981223443305	WITHOUT_CLASSIFICATION	1.8776556695707688E-6	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.999999810380604	WITHOUT_CLASSIFICATION	1.8961939596332644E-7	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999962594742668	WITHOUT_CLASSIFICATION	3.7405257330362438E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.99999327521872	WITHOUT_CLASSIFICATION	6.72478128006744E-6	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999993886151	WITHOUT_CLASSIFICATION	6.113850114160458E-10	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999741050159903	WITHOUT_CLASSIFICATION	2.5894984009683194E-5	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999497132264	WITHOUT_CLASSIFICATION	5.028677373921917E-8	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999795058182582	WITHOUT_CLASSIFICATION	2.04941817417736E-5	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998279731105258	WITHOUT_CLASSIFICATION	1.7202688947414897E-4	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998915039564	WITHOUT_CLASSIFICATION	1.0849604359501156E-7	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999990179398117	WITHOUT_CLASSIFICATION	9.820601882725065E-7	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979557242096	WITHOUT_CLASSIFICATION	2.044275790530161E-6	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999741664519881	WITHOUT_CLASSIFICATION	2.5833548011960624E-5	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999684320187	WITHOUT_CLASSIFICATION	3.1567981291464135E-7	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999495768883224	WITHOUT_CLASSIFICATION	5.042311167761547E-5	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999907363110889	WITHOUT_CLASSIFICATION	9.263688911113307E-6	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995147447883	WITHOUT_CLASSIFICATION	4.85255211606957E-7	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991028925266	WITHOUT_CLASSIFICATION	8.971074734850141E-7	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992100053385	WITHOUT_CLASSIFICATION	7.899946615137763E-7	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991318653865	WITHOUT_CLASSIFICATION	8.681346136080605E-7	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999968681758927	WITHOUT_CLASSIFICATION	3.131824107302814E-5	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999998538291013	WITHOUT_CLASSIFICATION	1.4617089869602538E-6	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991003804096	WITHOUT_CLASSIFICATION	8.996195904911207E-7	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999936139085825	WITHOUT_CLASSIFICATION	6.386091417523849E-6	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999190245473	WITHOUT_CLASSIFICATION	8.097545273792826E-8	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956487738315	WITHOUT_CLASSIFICATION	4.351226168493125E-6	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999976525999412	WITHOUT_CLASSIFICATION	2.347400058709965E-6	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999559709778131	WITHOUT_CLASSIFICATION	4.402902218692665E-5	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9998403208196434	WITHOUT_CLASSIFICATION	1.5967918035656036E-4	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999843385744299	WITHOUT_CLASSIFICATION	1.566142557003172E-5	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999915737519531	WITHOUT_CLASSIFICATION	8.42624804688018E-6	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999956360621224	WITHOUT_CLASSIFICATION	4.363937877641474E-6	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999968112279779	WITHOUT_CLASSIFICATION	3.1887720221564396E-6	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999531850231872	WITHOUT_CLASSIFICATION	4.681497681287013E-5	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999995837261274	WITHOUT_CLASSIFICATION	4.1627387258858866E-7	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999973179956565	WITHOUT_CLASSIFICATION	2.6820043434797934E-6	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998226008045314	WITHOUT_CLASSIFICATION	1.7739919546851758E-4	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999990669258081	WITHOUT_CLASSIFICATION	9.330741919255862E-7	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999792488437	WITHOUT_CLASSIFICATION	2.075115632751835E-8	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999980337516782	WITHOUT_CLASSIFICATION	1.9662483217718018E-6	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999995781000288	WITHOUT_CLASSIFICATION	4.218999711972746E-6	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999998427546785	WITHOUT_CLASSIFICATION	1.5724532146832735E-7	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999999666931938	WITHOUT_CLASSIFICATION	3.3306806192774763E-7	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999993223387021	WITHOUT_CLASSIFICATION	6.776612978699989E-7	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999657787004	WITHOUT_CLASSIFICATION	3.422129967146151E-8	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999998923705608	WITHOUT_CLASSIFICATION	1.0762943919768454E-7	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999982027134974	WITHOUT_CLASSIFICATION	1.7972865026206762E-6	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.997817699695859	WITHOUT_CLASSIFICATION	0.002182300304140974	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999988313627459	WITHOUT_CLASSIFICATION	1.1686372540886536E-6	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999960986222228	WITHOUT_CLASSIFICATION	3.901377777191715E-5	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999409316281	WITHOUT_CLASSIFICATION	5.906837186908603E-8	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999979328532789	WITHOUT_CLASSIFICATION	2.067146721092119E-6	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999989032203198	WITHOUT_CLASSIFICATION	1.0967796801887539E-6	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999957848338749	WITHOUT_CLASSIFICATION	4.215166125211961E-6	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999972844960959	WITHOUT_CLASSIFICATION	2.7155039040342712E-6	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999995973226549	WITHOUT_CLASSIFICATION	4.026773451601105E-7	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997816371835	WITHOUT_CLASSIFICATION	2.183628165625895E-7	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999974401356403	WITHOUT_CLASSIFICATION	2.5598643596826406E-6	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999901181140787	WITHOUT_CLASSIFICATION	9.881885921321184E-6	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999979752468892	WITHOUT_CLASSIFICATION	2.0247531107990606E-5	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9902478819908052	WITHOUT_CLASSIFICATION	0.009752118009194902	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999412381379522	WITHOUT_CLASSIFICATION	5.8761862047896955E-5	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999946651433393	WITHOUT_CLASSIFICATION	5.334856660703225E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.999998660060341	WITHOUT_CLASSIFICATION	1.3399396590002554E-6	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999600842275	WITHOUT_CLASSIFICATION	3.991577246692732E-8	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999936349604093	WITHOUT_CLASSIFICATION	6.365039590688448E-6	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999950400603237	WITHOUT_CLASSIFICATION	4.959939676327605E-6	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9933773875478459	WITHOUT_CLASSIFICATION	0.006622612452154174	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9986731309562126	WITHOUT_CLASSIFICATION	0.0013268690437874243	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999990247806511	WITHOUT_CLASSIFICATION	9.752193489426703E-7	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9859574925330424	WITHOUT_CLASSIFICATION	0.014042507466957609	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999996827417438	WITHOUT_CLASSIFICATION	3.1725825622969754E-7	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9993126418136461	WITHOUT_CLASSIFICATION	6.873581863538154E-4	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999787135263	WITHOUT_CLASSIFICATION	2.1286473644229405E-8	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999999987781968	WITHOUT_CLASSIFICATION	1.2218032105892963E-8	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999912772522939	WITHOUT_CLASSIFICATION	8.722747706099725E-6	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999998206717577	WITHOUT_CLASSIFICATION	1.7932824221446793E-7	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999995971436366	WITHOUT_CLASSIFICATION	4.028563634107043E-6	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999983265081412	WITHOUT_CLASSIFICATION	1.6734918587889674E-6	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999337510392232	WITHOUT_CLASSIFICATION	6.624896077674895E-5	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999972374986036	WITHOUT_CLASSIFICATION	2.7625013963875762E-6	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999995837921032	WITHOUT_CLASSIFICATION	4.1620789691996395E-7	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999372607823	WITHOUT_CLASSIFICATION	6.273921770447909E-8	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999996058755609	WITHOUT_CLASSIFICATION	3.94124439056481E-7	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999991094779715	WITHOUT_CLASSIFICATION	8.905220284003265E-7	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999846604510912	WITHOUT_CLASSIFICATION	1.533954890874002E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999974876373959	WITHOUT_CLASSIFICATION	2.5123626040536144E-6	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999985861933497	WITHOUT_CLASSIFICATION	1.41380665023997E-6	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999951733055409	WITHOUT_CLASSIFICATION	4.826694459119041E-6	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.998921006190865	WITHOUT_CLASSIFICATION	0.001078993809135028	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999998579367969	WITHOUT_CLASSIFICATION	1.4206320316928E-7	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999987112287473	WITHOUT_CLASSIFICATION	1.2887712526967491E-6	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9999922218772401	WITHOUT_CLASSIFICATION	7.778122759742752E-6	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.999999821826991	WITHOUT_CLASSIFICATION	1.7817300903601758E-7	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999997132507827	WITHOUT_CLASSIFICATION	2.867492172510729E-7	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9988568084295606	WITHOUT_CLASSIFICATION	0.0011431915704394728	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9997880961199016	WITHOUT_CLASSIFICATION	2.1190388009837392E-4	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999991727010249	WITHOUT_CLASSIFICATION	8.272989751228072E-7	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9988568084295606	WITHOUT_CLASSIFICATION	0.0011431915704394728	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999995958643785	WITHOUT_CLASSIFICATION	4.041356215988014E-7	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999997930424871	WITHOUT_CLASSIFICATION	2.0695751288835227E-7	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999966971385983	WITHOUT_CLASSIFICATION	3.302861401636152E-6	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9994781591221786	WITHOUT_CLASSIFICATION	5.218408778214254E-4	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999996856071214	WITHOUT_CLASSIFICATION	3.1439287862841285E-7	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999280199868	WITHOUT_CLASSIFICATION	7.198001309871323E-8	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999237152141842	WITHOUT_CLASSIFICATION	7.628478581585319E-5	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999997358266591	WITHOUT_CLASSIFICATION	2.6417334089160214E-7	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999985842154119	WITHOUT_CLASSIFICATION	1.415784588073879E-6	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999985062850488	WITHOUT_CLASSIFICATION	1.4937149511997693E-5	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999988252582133	WITHOUT_CLASSIFICATION	1.1747417867401811E-6	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999959693555753	WITHOUT_CLASSIFICATION	4.030644424715332E-6	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999927010809	WITHOUT_CLASSIFICATION	7.298919051914322E-9	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999945817315	WITHOUT_CLASSIFICATION	5.418268497548061E-9	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999991554256078	WITHOUT_CLASSIFICATION	8.445743922336098E-7	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999980948835379	WITHOUT_CLASSIFICATION	1.9051164621007958E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998523076589313	WITHOUT_CLASSIFICATION	1.4769234106866297E-4	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998523076589313	WITHOUT_CLASSIFICATION	1.4769234106866297E-4	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999953761689218	WITHOUT_CLASSIFICATION	4.623831078296442E-6	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.999693319647432	WITHOUT_CLASSIFICATION	3.066803525679943E-4	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999407458260552	WITHOUT_CLASSIFICATION	5.9254173944733135E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9999911913922364	WITHOUT_CLASSIFICATION	8.808607763609199E-6	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999912554276691	WITHOUT_CLASSIFICATION	8.744572330889978E-6	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.7791526139399503	WITHOUT_CLASSIFICATION	0.2208473860600497	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9998962995590268	WITHOUT_CLASSIFICATION	1.0370044097314979E-4	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999595754643	WITHOUT_CLASSIFICATION	4.0424535828616684E-8	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999943396166147	WITHOUT_CLASSIFICATION	5.660383385360053E-6	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9993945152438651	WITHOUT_CLASSIFICATION	6.054847561349835E-4	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999260762067781	WITHOUT_CLASSIFICATION	7.392379322191425E-5	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999999999541204	WITHOUT_CLASSIFICATION	4.58795937420951E-10	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999585843273	WITHOUT_CLASSIFICATION	4.141567268280279E-8	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999999853623698	WITHOUT_CLASSIFICATION	1.4637630197156285E-7	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999486890239	WITHOUT_CLASSIFICATION	5.1310976238121046E-8	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999990179398117	WITHOUT_CLASSIFICATION	9.820601882725065E-7	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999906300674901	WITHOUT_CLASSIFICATION	9.369932509905446E-6	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998949599314	WITHOUT_CLASSIFICATION	1.0504006863208596E-7	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999963298312297	WITHOUT_CLASSIFICATION	3.67016877024149E-6	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999982596588788	WITHOUT_CLASSIFICATION	1.7403411211562258E-6	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999340098887	WITHOUT_CLASSIFICATION	6.599011124433285E-8	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999932512648494	WITHOUT_CLASSIFICATION	6.748735150605121E-6	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999970874243067	WITHOUT_CLASSIFICATION	2.9125756932570555E-6	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999996135698969	WITHOUT_CLASSIFICATION	3.8643010308747103E-7	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998526446566	WITHOUT_CLASSIFICATION	1.4735534339549735E-7	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999993454280317	WITHOUT_CLASSIFICATION	6.545719683452414E-7	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999221308337	WITHOUT_CLASSIFICATION	7.78691663614406E-8	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999987218341326	WITHOUT_CLASSIFICATION	1.2781658672882917E-6	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999974356750454	WITHOUT_CLASSIFICATION	2.5643249545979954E-6	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9999630273836473	WITHOUT_CLASSIFICATION	3.697261635271149E-5	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999983481630095	WITHOUT_CLASSIFICATION	1.6518369905553277E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999990964014431	WITHOUT_CLASSIFICATION	9.035985569016244E-7	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9998527289402784	WITHOUT_CLASSIFICATION	1.472710597214331E-4	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999996686822579	WITHOUT_CLASSIFICATION	3.3131774209925076E-7	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999966497151414	WITHOUT_CLASSIFICATION	3.3502848586362245E-6	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999998048417097	WITHOUT_CLASSIFICATION	1.9515829015958829E-7	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999940331333476	WITHOUT_CLASSIFICATION	5.966866652410502E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999814601506057	WITHOUT_CLASSIFICATION	1.8539849394268205E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999961533220207	WITHOUT_CLASSIFICATION	3.846677979283228E-6	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9988629539425684	WITHOUT_CLASSIFICATION	0.001137046057431557	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9999998064338492	WITHOUT_CLASSIFICATION	1.9356615090356492E-7	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999997028070118	WITHOUT_CLASSIFICATION	2.9719298826862905E-7	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9980158859325398	WITHOUT_CLASSIFICATION	0.0019841140674602296	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999977317605236	WITHOUT_CLASSIFICATION	2.2682394763337223E-6	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999787349384721	WITHOUT_CLASSIFICATION	2.1265061527837594E-5	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999981343786405	WITHOUT_CLASSIFICATION	1.8656213594126953E-6	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999093903696811	WITHOUT_CLASSIFICATION	9.060963031897052E-5	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999287520751409	WITHOUT_CLASSIFICATION	7.124792485917757E-5	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999374549660501	WITHOUT_CLASSIFICATION	6.25450339498907E-5	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.919706077422643	WITHOUT_CLASSIFICATION	0.08029392257735707	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999906299821233	WITHOUT_CLASSIFICATION	9.370017876717476E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.99999327521872	WITHOUT_CLASSIFICATION	6.72478128006744E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.99999327521872	WITHOUT_CLASSIFICATION	6.72478128006744E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999983043640234	WITHOUT_CLASSIFICATION	1.6956359766580935E-6	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9997892654141206	WITHOUT_CLASSIFICATION	2.1073458587931278E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.998281164748544	WITHOUT_CLASSIFICATION	0.0017188352514559621	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992523454035026	WITHOUT_CLASSIFICATION	7.476545964973559E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.998281164748544	WITHOUT_CLASSIFICATION	0.0017188352514559621	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999962264513712	WITHOUT_CLASSIFICATION	3.773548628794495E-6	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999938876213672	WITHOUT_CLASSIFICATION	6.112378632744424E-6	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9999955184482556	WITHOUT_CLASSIFICATION	4.481551744314624E-6	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999976344977042	WITHOUT_CLASSIFICATION	2.365502295766349E-6	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999991968088159	WITHOUT_CLASSIFICATION	8.031911840754139E-7	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999957958338076	WITHOUT_CLASSIFICATION	4.204166192380792E-6	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998829071804	WITHOUT_CLASSIFICATION	1.17092819575275E-7	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9999635418285534	WITHOUT_CLASSIFICATION	3.645817144659956E-5	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999226749079	WITHOUT_CLASSIFICATION	7.732509208383464E-8	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999977008098493	WITHOUT_CLASSIFICATION	2.29919015076261E-6	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999990936096852	WITHOUT_CLASSIFICATION	9.063903149030496E-7	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999953269705241	WITHOUT_CLASSIFICATION	4.6730294758966355E-5	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999969866260024	WITHOUT_CLASSIFICATION	3.013373997497498E-6	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9904284902288615	WITHOUT_CLASSIFICATION	0.009571509771138582	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999997473361	WITHOUT_CLASSIFICATION	2.5266392905650354E-10	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9996261093982899	WITHOUT_CLASSIFICATION	3.738906017101402E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999969004877546	WITHOUT_CLASSIFICATION	3.0995122453354267E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999969004877546	WITHOUT_CLASSIFICATION	3.0995122453354267E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999970422361925	WITHOUT_CLASSIFICATION	2.9577638074538745E-6	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999976095280197	WITHOUT_CLASSIFICATION	2.3904719803212235E-6	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999997647890697	WITHOUT_CLASSIFICATION	2.3521093037256912E-7	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999997491206167	WITHOUT_CLASSIFICATION	2.5087938335936534E-7	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999975074431432	WITHOUT_CLASSIFICATION	2.492556856752049E-6	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999801793374309	WITHOUT_CLASSIFICATION	1.9820662569148E-5	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9997579158217517	WITHOUT_CLASSIFICATION	2.42084178248376E-4	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999951185934873	WITHOUT_CLASSIFICATION	4.881406512681536E-6	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999992456354168	WITHOUT_CLASSIFICATION	7.54364583355675E-7	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999982122909649	WITHOUT_CLASSIFICATION	1.7877090350586237E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999995311011937	WITHOUT_CLASSIFICATION	4.688988063056504E-6	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999906773993	WITHOUT_CLASSIFICATION	9.322600698991874E-9	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999995541020426	WITHOUT_CLASSIFICATION	4.4589795754418446E-7	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999395072284775	WITHOUT_CLASSIFICATION	6.0492771522511496E-5	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999989365114094	WITHOUT_CLASSIFICATION	1.0634885905973445E-5	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999997164328827	WITHOUT_CLASSIFICATION	2.8356711740380667E-7	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999995912911495	WITHOUT_CLASSIFICATION	4.0870885050391533E-7	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999994430224267	WITHOUT_CLASSIFICATION	5.569775732916568E-6	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.999998593916289	WITHOUT_CLASSIFICATION	1.406083710985121E-6	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999836419884	WITHOUT_CLASSIFICATION	1.6358011699270875E-8	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999868975263445	WITHOUT_CLASSIFICATION	1.3102473655437403E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999604015734	WITHOUT_CLASSIFICATION	3.9598426698194586E-8	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999888713725	WITHOUT_CLASSIFICATION	1.112862755882144E-8	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999781395277	WITHOUT_CLASSIFICATION	2.1860472403460537E-8	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999992185699115	WITHOUT_CLASSIFICATION	7.814300884845573E-7	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999990541199864	WITHOUT_CLASSIFICATION	9.458800136222415E-7	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999986789246257	WITHOUT_CLASSIFICATION	1.3210753742797737E-6	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999618753254685	WITHOUT_CLASSIFICATION	3.812467453145385E-5	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999843726859768	WITHOUT_CLASSIFICATION	1.562731402316601E-5	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999809250101342	WITHOUT_CLASSIFICATION	1.9074989865764362E-5	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999986019035842	WITHOUT_CLASSIFICATION	1.3980964157393999E-6	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999991306381767	WITHOUT_CLASSIFICATION	8.693618232403083E-7	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995855476591099	WITHOUT_CLASSIFICATION	4.144523408901462E-4	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999985039084505	WITHOUT_CLASSIFICATION	1.496091549608119E-6	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999953061991104	WITHOUT_CLASSIFICATION	4.693800889572182E-6	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999606215946	WITHOUT_CLASSIFICATION	3.937840531057224E-8	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999997796100442	WITHOUT_CLASSIFICATION	2.2038995589794945E-7	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.999998694077352	WITHOUT_CLASSIFICATION	1.3059226480084994E-6	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999617968306705	WITHOUT_CLASSIFICATION	3.8203169329456096E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999756758799959	WITHOUT_CLASSIFICATION	2.432412000396932E-5	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999928891884866	WITHOUT_CLASSIFICATION	7.110811513376347E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999604769056362	WITHOUT_CLASSIFICATION	3.952309436375844E-5	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9999979162867352	WITHOUT_CLASSIFICATION	2.083713264805797E-6	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998735458378881	WITHOUT_CLASSIFICATION	1.264541621118808E-4	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996198693656	WITHOUT_CLASSIFICATION	3.8013063447497153E-7	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9185147508112035	WITHOUT_CLASSIFICATION	0.08148524918879659	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.8498178644588327	WITHOUT_CLASSIFICATION	0.15018213554116727	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999735768705	WITHOUT_CLASSIFICATION	2.6423129500125676E-8	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999941657436938	WITHOUT_CLASSIFICATION	5.834256306151189E-6	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9998855929391337	WITHOUT_CLASSIFICATION	1.144070608662394E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999809187680568	WITHOUT_CLASSIFICATION	1.9081231943101904E-5	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999998013263179	WITHOUT_CLASSIFICATION	1.9867368211552728E-7	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9976869904715753	WITHOUT_CLASSIFICATION	0.002313009528424691	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999999973712975	WITHOUT_CLASSIFICATION	2.6287025053690772E-8	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999986417034832	WITHOUT_CLASSIFICATION	1.3582965168299848E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999951485882497	WITHOUT_CLASSIFICATION	4.851411750302804E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999951485882497	WITHOUT_CLASSIFICATION	4.851411750302804E-6	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999977300119208	WITHOUT_CLASSIFICATION	2.269988079112221E-6	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997167942754379	WITHOUT_CLASSIFICATION	2.832057245621166E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999753664908937	WITHOUT_CLASSIFICATION	2.46335091061947E-5	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999957888298252	WITHOUT_CLASSIFICATION	4.211170174899111E-6	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999980209182635	WITHOUT_CLASSIFICATION	1.979081736531876E-6	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999997890829442	WITHOUT_CLASSIFICATION	2.1091705573750044E-7	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999713281797112	WITHOUT_CLASSIFICATION	2.867182028878288E-5	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999944623279107	WITHOUT_CLASSIFICATION	5.537672089359202E-6	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999999328413711	WITHOUT_CLASSIFICATION	6.715862887750175E-8	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.999997323491079	WITHOUT_CLASSIFICATION	2.676508921030572E-6	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999990182716988	WITHOUT_CLASSIFICATION	9.817283011607337E-7	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999628859786053	WITHOUT_CLASSIFICATION	3.711402139472454E-5	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999951797275567	WITHOUT_CLASSIFICATION	4.820272443257926E-6	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999835852487486	WITHOUT_CLASSIFICATION	1.641475125139712E-5	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999100501938	WITHOUT_CLASSIFICATION	8.994980612420737E-8	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9995407626957348	WITHOUT_CLASSIFICATION	4.592373042652463E-4	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998896721066697	WITHOUT_CLASSIFICATION	1.103278933304198E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9998944615154355	WITHOUT_CLASSIFICATION	1.0553848456457119E-4	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9999902123702026	WITHOUT_CLASSIFICATION	9.787629797457639E-6	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999790882500591	WITHOUT_CLASSIFICATION	2.091174994090665E-4	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.999955988816337	WITHOUT_CLASSIFICATION	4.40111836630053E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999945498438308	WITHOUT_CLASSIFICATION	5.4501561690899046E-6	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998517283674876	WITHOUT_CLASSIFICATION	1.4827163251233068E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997307948743954	WITHOUT_CLASSIFICATION	2.692051256045616E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9922609099706308	WITHOUT_CLASSIFICATION	0.00773909002936929	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9998308576110064	WITHOUT_CLASSIFICATION	1.6914238899364537E-4	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.982839025034577	WITHOUT_CLASSIFICATION	0.01716097496542305	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999976327610769	WITHOUT_CLASSIFICATION	2.3672389230850224E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9987489485488064	WITHOUT_CLASSIFICATION	0.0012510514511935727	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999957000663455	WITHOUT_CLASSIFICATION	4.2999336543955775E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997307948743954	WITHOUT_CLASSIFICATION	2.692051256045616E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999845357805135	WITHOUT_CLASSIFICATION	1.5464219486461656E-5	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999965662575709	WITHOUT_CLASSIFICATION	3.433742428950589E-6	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9999240350184889	WITHOUT_CLASSIFICATION	7.596498151110593E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999908490939102	WITHOUT_CLASSIFICATION	9.150906089772186E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999979268054	WITHOUT_CLASSIFICATION	2.0731946787186514E-9	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999089886004	WITHOUT_CLASSIFICATION	9.101139970083225E-8	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9987309541469417	WITHOUT_CLASSIFICATION	0.001269045853058275	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999479519815	WITHOUT_CLASSIFICATION	5.204801849397379E-8	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999984764843951	WITHOUT_CLASSIFICATION	1.5235156049650631E-6	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999908490939102	WITHOUT_CLASSIFICATION	9.150906089772186E-6	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999998891562275	WITHOUT_CLASSIFICATION	1.108437724389175E-7	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999479519815	WITHOUT_CLASSIFICATION	5.204801849397379E-8	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9990868430922726	WITHOUT_CLASSIFICATION	9.131569077274059E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999739485555602	WITHOUT_CLASSIFICATION	2.6051444439695504E-5	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999983204200549	WITHOUT_CLASSIFICATION	1.6795799451275345E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999995311011937	WITHOUT_CLASSIFICATION	4.688988063056504E-6	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999998703815827	WITHOUT_CLASSIFICATION	1.2961841727476292E-7	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999997758828314	WITHOUT_CLASSIFICATION	2.241171686091804E-6	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999993810683292	WITHOUT_CLASSIFICATION	6.189316709205916E-7	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9989021754887804	WITHOUT_CLASSIFICATION	0.001097824511219699	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999995507883603	WITHOUT_CLASSIFICATION	4.492116396746569E-7	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999940980547206	WITHOUT_CLASSIFICATION	5.901945279385481E-6	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999928777452	WITHOUT_CLASSIFICATION	7.122254795752588E-9	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999994099166066	WITHOUT_CLASSIFICATION	5.900833933876513E-7	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999987697042254	WITHOUT_CLASSIFICATION	1.2302957746264946E-6	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999986826944629	WITHOUT_CLASSIFICATION	1.3173055371007244E-6	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999447578410592	WITHOUT_CLASSIFICATION	5.5242158940869625E-5	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999999979563284	WITHOUT_CLASSIFICATION	2.043671608612786E-8	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999997335722889	WITHOUT_CLASSIFICATION	2.6642771106140003E-7	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9998794904801809	WITHOUT_CLASSIFICATION	1.2050951981915661E-4	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999943709718	WITHOUT_CLASSIFICATION	5.629028189773469E-9	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999888230962941	WITHOUT_CLASSIFICATION	1.1176903705768739E-5	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999987960500779	WITHOUT_CLASSIFICATION	1.203949922133334E-6	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999928410806714	WITHOUT_CLASSIFICATION	7.1589193285488545E-6	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999958803793627	WITHOUT_CLASSIFICATION	4.119620637236182E-6	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999229166364162	WITHOUT_CLASSIFICATION	7.708336358378944E-5	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998875407475235	WITHOUT_CLASSIFICATION	1.1245925247649487E-4	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999997926752752	WITHOUT_CLASSIFICATION	2.0732472486037233E-7	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999641256518711	WITHOUT_CLASSIFICATION	3.587434812899224E-5	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999961634196878	WITHOUT_CLASSIFICATION	3.836580312232737E-6	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999941250385938	WITHOUT_CLASSIFICATION	5.8749614062099884E-5	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999981928682575	WITHOUT_CLASSIFICATION	1.8071317424825273E-6	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999681172113107	WITHOUT_CLASSIFICATION	3.18827886891755E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999554255818	WITHOUT_CLASSIFICATION	4.457441820918202E-7	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999464463299635	WITHOUT_CLASSIFICATION	5.3553670036539016E-5	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.998710009331546	WITHOUT_CLASSIFICATION	0.0012899906684539818	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999987921430828	WITHOUT_CLASSIFICATION	1.2078569171230942E-6	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999952078428747	WITHOUT_CLASSIFICATION	4.79215712533206E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999159942004	WITHOUT_CLASSIFICATION	8.400579958425064E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999159942004	WITHOUT_CLASSIFICATION	8.400579958425064E-8	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999998621385306	WITHOUT_CLASSIFICATION	1.3786146934220536E-7	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999910347704447	WITHOUT_CLASSIFICATION	8.965229555408194E-6	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999987968559454	WITHOUT_CLASSIFICATION	1.2031440546957365E-6	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999771524126836	WITHOUT_CLASSIFICATION	2.2847587316519654E-5	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999705392023395	WITHOUT_CLASSIFICATION	2.946079766053355E-5	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9987356155626718	WITHOUT_CLASSIFICATION	0.0012643844373282271	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999976424767576	WITHOUT_CLASSIFICATION	2.3575232424057255E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999979003233428	WITHOUT_CLASSIFICATION	2.099676657229717E-6	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999990604395378	WITHOUT_CLASSIFICATION	9.395604621743859E-7	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999917738538249	WITHOUT_CLASSIFICATION	8.22614617514358E-6	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9966298567453132	WITHOUT_CLASSIFICATION	0.003370143254686884	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999786972493	WITHOUT_CLASSIFICATION	2.130275059104097E-8	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999517444159308	WITHOUT_CLASSIFICATION	4.8255584069229665E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999159942004	WITHOUT_CLASSIFICATION	8.400579958425064E-8	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999651616790091	WITHOUT_CLASSIFICATION	3.4838320990998065E-5	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999894180225053	WITHOUT_CLASSIFICATION	1.0581977494777535E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999709396289321	WITHOUT_CLASSIFICATION	2.9060371067815763E-5	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999987435913658	WITHOUT_CLASSIFICATION	1.2564086342530413E-6	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999969305850749	WITHOUT_CLASSIFICATION	3.0694149251784034E-6	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999968727241381	WITHOUT_CLASSIFICATION	3.1272758619475826E-6	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999543884263662	WITHOUT_CLASSIFICATION	4.561157363384314E-5	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999981978023	WITHOUT_CLASSIFICATION	1.8021976870227206E-9	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999940913044102	WITHOUT_CLASSIFICATION	5.9086955898197024E-6	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999946557672592	WITHOUT_CLASSIFICATION	5.344232740755998E-6	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999893088166896	WITHOUT_CLASSIFICATION	1.0691183310500481E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999554255818	WITHOUT_CLASSIFICATION	4.457441820918202E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999159942004	WITHOUT_CLASSIFICATION	8.400579958425064E-8	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999222025818287	WITHOUT_CLASSIFICATION	7.779741817128535E-5	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999995792739056	WITHOUT_CLASSIFICATION	4.2072609448491726E-7	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999900398783397	WITHOUT_CLASSIFICATION	9.960121660250938E-6	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999659566008681	WITHOUT_CLASSIFICATION	3.404339913195696E-5	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999928133886	WITHOUT_CLASSIFICATION	7.186611319699971E-9	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999706972604774	WITHOUT_CLASSIFICATION	2.930273952265543E-5	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931358141476	WITHOUT_CLASSIFICATION	6.864185852356767E-6	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999984662195096	WITHOUT_CLASSIFICATION	1.533780490400829E-6	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999960300407825	WITHOUT_CLASSIFICATION	3.969959217398396E-6	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9992706438442877	WITHOUT_CLASSIFICATION	7.293561557123794E-4	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999898734920546	WITHOUT_CLASSIFICATION	1.0126507945529978E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998042328468884	WITHOUT_CLASSIFICATION	1.9576715311163506E-4	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999994881403	WITHOUT_CLASSIFICATION	5.118596799630625E-10	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999963992811595	WITHOUT_CLASSIFICATION	3.6007188405788427E-6	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999962264513712	WITHOUT_CLASSIFICATION	3.773548628794495E-6	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999904909271268	WITHOUT_CLASSIFICATION	9.50907287318658E-6	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999920952162529	WITHOUT_CLASSIFICATION	7.904783747120679E-6	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9997065131860655	WITHOUT_CLASSIFICATION	2.934868139344418E-4	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999947617454815	WITHOUT_CLASSIFICATION	5.238254518484731E-6	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999635773490859	WITHOUT_CLASSIFICATION	3.642265091399678E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99999660400222	WITHOUT_CLASSIFICATION	3.3959977800278858E-6	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99999660400222	WITHOUT_CLASSIFICATION	3.3959977800278858E-6	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999967031606352	WITHOUT_CLASSIFICATION	3.2968393647953034E-6	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.99999985762936	WITHOUT_CLASSIFICATION	1.4237063999286202E-7	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999976357369247	WITHOUT_CLASSIFICATION	2.3642630753369183E-6	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999278818477869	WITHOUT_CLASSIFICATION	7.211815221305256E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999870271971552	WITHOUT_CLASSIFICATION	1.2972802844791316E-5	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999943011503086	WITHOUT_CLASSIFICATION	5.6988496912936734E-6	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999968792348254	WITHOUT_CLASSIFICATION	3.120765174669693E-6	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999972802184749	WITHOUT_CLASSIFICATION	2.7197815250960673E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999972802184749	WITHOUT_CLASSIFICATION	2.7197815250960673E-5	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999114613855802	WITHOUT_CLASSIFICATION	8.853861441992691E-5	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.99999988564221	WITHOUT_CLASSIFICATION	1.1435778997177714E-7	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999939421192157	WITHOUT_CLASSIFICATION	6.05788078442029E-6	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999852608906021	WITHOUT_CLASSIFICATION	1.4739109397851223E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999852608906021	WITHOUT_CLASSIFICATION	1.4739109397851223E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999852608906021	WITHOUT_CLASSIFICATION	1.4739109397851223E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998870343461747	WITHOUT_CLASSIFICATION	1.129656538253461E-4	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999996422295652	WITHOUT_CLASSIFICATION	3.577704349167144E-7	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999995620954258	WITHOUT_CLASSIFICATION	4.3790457423520103E-7	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.6682307585134989	WITHOUT_CLASSIFICATION	0.3317692414865011	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999564840723003	WITHOUT_CLASSIFICATION	4.351592769961009E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999159942004	WITHOUT_CLASSIFICATION	8.400579958425064E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999159942004	WITHOUT_CLASSIFICATION	8.400579958425064E-8	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9976347528173848	WITHOUT_CLASSIFICATION	0.002365247182615143	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999966472582	WITHOUT_CLASSIFICATION	3.3527418121622697E-9	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9994213338255408	WITHOUT_CLASSIFICATION	5.786661744593058E-4	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999990276950318	WITHOUT_CLASSIFICATION	9.723049682123285E-7	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999133158392	WITHOUT_CLASSIFICATION	8.668416087913709E-8	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.99718393429104	WITHOUT_CLASSIFICATION	0.002816065708959914	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999979380142437	WITHOUT_CLASSIFICATION	2.0619857563025923E-6	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9994227891280038	WITHOUT_CLASSIFICATION	5.772108719961568E-4	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999962149249602	WITHOUT_CLASSIFICATION	3.785075039801945E-5	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999179923944972	WITHOUT_CLASSIFICATION	8.20076055027698E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999988949973815	WITHOUT_CLASSIFICATION	1.1050026184967914E-6	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999273134885577	WITHOUT_CLASSIFICATION	7.268651144232184E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999918118539072	WITHOUT_CLASSIFICATION	8.188146092819923E-6	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999918118539072	WITHOUT_CLASSIFICATION	8.188146092819923E-6	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999944291768262	WITHOUT_CLASSIFICATION	5.570823173761395E-6	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999944291768262	WITHOUT_CLASSIFICATION	5.570823173761395E-6	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999955998394112	WITHOUT_CLASSIFICATION	4.4001605886861666E-6	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999852062734595	WITHOUT_CLASSIFICATION	1.4793726540452318E-5	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999852062734595	WITHOUT_CLASSIFICATION	1.4793726540452318E-5	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999991123924904	WITHOUT_CLASSIFICATION	8.876075096025182E-6	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999777046686217	WITHOUT_CLASSIFICATION	2.2295331378395192E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999993684050081	WITHOUT_CLASSIFICATION	6.315949917813943E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99999660400222	WITHOUT_CLASSIFICATION	3.3959977800278858E-6	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999987280008598	WITHOUT_CLASSIFICATION	1.2719991402225049E-6	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999777046686217	WITHOUT_CLASSIFICATION	2.2295331378395192E-5	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999507112266	WITHOUT_CLASSIFICATION	4.928877350921971E-8	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999937007602987	WITHOUT_CLASSIFICATION	6.299239701279845E-6	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999741261004519	WITHOUT_CLASSIFICATION	2.5873899548179253E-5	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999905933508165	WITHOUT_CLASSIFICATION	9.406649183488505E-6	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999744402649	WITHOUT_CLASSIFICATION	2.5559735138005583E-8	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999998213059469	WITHOUT_CLASSIFICATION	1.786940530109732E-7	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999995868053748	WITHOUT_CLASSIFICATION	4.1319462519724634E-7	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9889308429662412	WITHOUT_CLASSIFICATION	0.011069157033758733	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9957211998019316	WITHOUT_CLASSIFICATION	0.004278800198068372	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999974176291427	WITHOUT_CLASSIFICATION	2.5823708572409086E-6	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999916833235415	WITHOUT_CLASSIFICATION	8.316676458529531E-6	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999827372571692	WITHOUT_CLASSIFICATION	1.7262742830766623E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999864836088657	WITHOUT_CLASSIFICATION	1.3516391134278502E-5	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999978524240891	WITHOUT_CLASSIFICATION	2.1475759109426956E-6	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9504540235511677	WITHOUT_CLASSIFICATION	0.04954597644883237	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9996639069207331	WITHOUT_CLASSIFICATION	3.3609307926689663E-4	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999363974755	WITHOUT_CLASSIFICATION	6.360252443626125E-8	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999976751864653	WITHOUT_CLASSIFICATION	2.3248135345774176E-6	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999976751864653	WITHOUT_CLASSIFICATION	2.3248135345774176E-6	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999994984825058	WITHOUT_CLASSIFICATION	5.015174942247172E-7	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999978695639058	WITHOUT_CLASSIFICATION	2.130436094099539E-6	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.999999856185512	WITHOUT_CLASSIFICATION	1.4381448793675085E-7	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999976272077382	WITHOUT_CLASSIFICATION	2.372792261696329E-6	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999999509109198	WITHOUT_CLASSIFICATION	4.90890801927033E-7	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999943257265184	WITHOUT_CLASSIFICATION	5.674273481641703E-6	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999729669848	WITHOUT_CLASSIFICATION	2.7033015164785667E-8	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999897957470962	WITHOUT_CLASSIFICATION	1.0204252903685255E-5	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999657904793775	WITHOUT_CLASSIFICATION	3.420952062247722E-5	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999992486538107	WITHOUT_CLASSIFICATION	7.513461892263373E-7	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999965767983389	WITHOUT_CLASSIFICATION	3.423201661221831E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998042328468884	WITHOUT_CLASSIFICATION	1.9576715311163506E-4	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998909063431	WITHOUT_CLASSIFICATION	1.090936569237853E-7	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999917698218018	WITHOUT_CLASSIFICATION	8.230178198146605E-6	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999970351301542	WITHOUT_CLASSIFICATION	2.9648698457982797E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999751887239511	WITHOUT_CLASSIFICATION	2.4811276048874582E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999846400398917	WITHOUT_CLASSIFICATION	1.5359960108243122E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999846400398917	WITHOUT_CLASSIFICATION	1.5359960108243122E-5	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999977789868707	WITHOUT_CLASSIFICATION	2.2210131294061024E-6	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9982014054818888	WITHOUT_CLASSIFICATION	0.001798594518111152	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9981631994774479	WITHOUT_CLASSIFICATION	0.0018368005225521788	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9982259501121655	WITHOUT_CLASSIFICATION	0.0017740498878344507	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9991001916977162	WITHOUT_CLASSIFICATION	8.998083022838148E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999848865715608	WITHOUT_CLASSIFICATION	1.5113428439172378E-5	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998708690101	WITHOUT_CLASSIFICATION	1.2913098993558845E-7	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999979511437709	WITHOUT_CLASSIFICATION	2.0488562290865688E-5	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999967886815511	WITHOUT_CLASSIFICATION	3.2113184489884096E-6	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999875236174391	WITHOUT_CLASSIFICATION	1.2476382560905323E-5	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999873418459866	WITHOUT_CLASSIFICATION	1.2658154013488147E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999979511437709	WITHOUT_CLASSIFICATION	2.0488562290865688E-5	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998809795143616	WITHOUT_CLASSIFICATION	1.1902048563837376E-4	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999999926564416	WITHOUT_CLASSIFICATION	7.343558402437366E-8	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999995957543879	WITHOUT_CLASSIFICATION	4.0424561206760546E-7	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9998945244511764	WITHOUT_CLASSIFICATION	1.0547554882346118E-4	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999991197533074	WITHOUT_CLASSIFICATION	8.802466925553316E-7	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999997846544905	WITHOUT_CLASSIFICATION	2.1534550957659636E-7	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999866773642	WITHOUT_CLASSIFICATION	1.3322635783080521E-8	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999980905090616	WITHOUT_CLASSIFICATION	1.909490938357922E-6	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999999326264789	WITHOUT_CLASSIFICATION	6.737352110210919E-7	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999478053792087	WITHOUT_CLASSIFICATION	5.219462079137122E-5	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998835072360973	WITHOUT_CLASSIFICATION	1.1649276390269632E-4	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999844369794142	WITHOUT_CLASSIFICATION	1.5563020585758843E-5	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999995698152782	WITHOUT_CLASSIFICATION	4.3018472175358047E-7	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999995271036466	WITHOUT_CLASSIFICATION	4.72896353529297E-7	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999964353305089	WITHOUT_CLASSIFICATION	3.564669491053162E-6	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999161046353	WITHOUT_CLASSIFICATION	8.389536463685627E-8	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999999637528273	WITHOUT_CLASSIFICATION	3.6247172702493465E-7	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999825699275949	WITHOUT_CLASSIFICATION	1.743007240510961E-5	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999967109290494	WITHOUT_CLASSIFICATION	3.289070950601549E-5	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999927267148	WITHOUT_CLASSIFICATION	7.2732851041918295E-9	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999684908739006	WITHOUT_CLASSIFICATION	3.150912609948394E-5	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999738454276162	WITHOUT_CLASSIFICATION	2.615457238371031E-5	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999498049386806	WITHOUT_CLASSIFICATION	5.019506131946143E-5	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9997736959331379	WITHOUT_CLASSIFICATION	2.2630406686214384E-4	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998939691805	WITHOUT_CLASSIFICATION	1.0603081953162085E-7	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999780259011174	WITHOUT_CLASSIFICATION	2.197409888261647E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999985583762769	WITHOUT_CLASSIFICATION	1.4416237230167802E-6	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999948653397447	WITHOUT_CLASSIFICATION	5.1346602552254595E-6	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999996389180177	WITHOUT_CLASSIFICATION	3.6108198230277663E-7	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999640085970378	WITHOUT_CLASSIFICATION	3.599140296225026E-5	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999495962805	WITHOUT_CLASSIFICATION	5.040371944361615E-8	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999749362939804	WITHOUT_CLASSIFICATION	2.5063706019516098E-5	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9989678864013445	WITHOUT_CLASSIFICATION	0.001032113598655549	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999592434261	WITHOUT_CLASSIFICATION	4.075657387377772E-8	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999992732058098	WITHOUT_CLASSIFICATION	7.267941901281199E-7	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998632037664	WITHOUT_CLASSIFICATION	1.3679623354105095E-7	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999079498663	WITHOUT_CLASSIFICATION	9.205013379439177E-8	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999952195063179	WITHOUT_CLASSIFICATION	4.78049368207068E-6	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999912893007	WITHOUT_CLASSIFICATION	8.710699227820876E-9	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999396259864856	WITHOUT_CLASSIFICATION	6.0374013514313334E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999990582416171	WITHOUT_CLASSIFICATION	9.417583827829305E-7	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999943960280415	WITHOUT_CLASSIFICATION	5.6039719585052155E-6	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.99999599080962	WITHOUT_CLASSIFICATION	4.009190380092124E-6	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999339727259	WITHOUT_CLASSIFICATION	6.602727412973061E-8	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999996959080623	WITHOUT_CLASSIFICATION	3.0409193765696617E-7	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999983998232046	WITHOUT_CLASSIFICATION	1.6001767954102803E-6	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999862750253361	WITHOUT_CLASSIFICATION	1.3724974663962936E-5	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999945493035858	WITHOUT_CLASSIFICATION	5.450696414228318E-6	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999745371400102	WITHOUT_CLASSIFICATION	2.5462859989734246E-5	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999955389216396	WITHOUT_CLASSIFICATION	4.461078360394449E-5	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967606840235	WITHOUT_CLASSIFICATION	3.2393159765890144E-6	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999989618893038	WITHOUT_CLASSIFICATION	1.038110696245311E-6	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999938393879	WITHOUT_CLASSIFICATION	6.160612026661538E-9	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9998809036963807	WITHOUT_CLASSIFICATION	1.1909630361939413E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999715451455	WITHOUT_CLASSIFICATION	2.845485450644175E-8	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999949596816705	WITHOUT_CLASSIFICATION	5.040318329431134E-6	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9990867715743995	WITHOUT_CLASSIFICATION	9.132284256004423E-4	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999687903595231	WITHOUT_CLASSIFICATION	3.120964047683524E-5	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999986033667594	WITHOUT_CLASSIFICATION	1.3966332406654799E-6	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999802852361512	WITHOUT_CLASSIFICATION	1.9714763848814717E-5	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999214189138762	WITHOUT_CLASSIFICATION	7.85810861238439E-5	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999996151739865	WITHOUT_CLASSIFICATION	3.8482601355061464E-7	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9993270463180527	WITHOUT_CLASSIFICATION	6.72953681947262E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9184668205020661	DEFECT	0.08153317949793393	WITHOUT_CLASSIFICATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999600961517171	WITHOUT_CLASSIFICATION	3.990384828286832E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999796933661972	WITHOUT_CLASSIFICATION	2.0306633802869395E-5	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967606840235	WITHOUT_CLASSIFICATION	3.2393159765890144E-6	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999992203637724	WITHOUT_CLASSIFICATION	7.796362276048991E-7	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999168015831247	WITHOUT_CLASSIFICATION	8.31984168753842E-5	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999995809244276	WITHOUT_CLASSIFICATION	4.1907557230341164E-7	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999979990285915	WITHOUT_CLASSIFICATION	2.000971408381945E-6	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999983876425356	WITHOUT_CLASSIFICATION	1.6123574643973188E-5	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9996985875614356	WITHOUT_CLASSIFICATION	3.014124385643651E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999967886815511	WITHOUT_CLASSIFICATION	3.2113184489884096E-6	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999981281676574	WITHOUT_CLASSIFICATION	1.8718323425103422E-6	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999992732058098	WITHOUT_CLASSIFICATION	7.267941901281199E-7	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9787992647496325	WITHOUT_CLASSIFICATION	0.02120073525036759	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999988238215392	WITHOUT_CLASSIFICATION	1.1761784608757472E-6	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999688477866	WITHOUT_CLASSIFICATION	3.115221336612889E-8	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999623331858	WITHOUT_CLASSIFICATION	3.766681432133806E-8	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999991854805901	WITHOUT_CLASSIFICATION	8.145194098514951E-7	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999952348518424	WITHOUT_CLASSIFICATION	4.765148157559118E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9983053873471357	WITHOUT_CLASSIFICATION	0.0016946126528643807	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999910237413246	WITHOUT_CLASSIFICATION	8.976258675444127E-6	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9974878817553976	WITHOUT_CLASSIFICATION	0.0025121182446022627	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999881910466576	WITHOUT_CLASSIFICATION	1.1808953342428386E-5	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999989797543944	WITHOUT_CLASSIFICATION	1.020245605581797E-6	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999900408533127	WITHOUT_CLASSIFICATION	9.95914668725253E-6	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998073791978759	WITHOUT_CLASSIFICATION	1.9262080212415145E-4	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998073791978759	WITHOUT_CLASSIFICATION	1.9262080212415145E-4	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999993430357627	WITHOUT_CLASSIFICATION	6.569642373167402E-7	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999982266924013	WITHOUT_CLASSIFICATION	1.7733075985819924E-6	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999605964053	WITHOUT_CLASSIFICATION	3.9403594635482415E-8	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999998918949	WITHOUT_CLASSIFICATION	1.0810508680271242E-10	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999975163522339	WITHOUT_CLASSIFICATION	2.483647766079732E-6	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999981673730631	WITHOUT_CLASSIFICATION	1.832626936836994E-6	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999483426198544	WITHOUT_CLASSIFICATION	5.16573801456325E-5	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999943337405843	WITHOUT_CLASSIFICATION	5.666259415710332E-6	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999984128858216	WITHOUT_CLASSIFICATION	1.587114178378993E-6	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999036623047343	WITHOUT_CLASSIFICATION	9.633769526566235E-5	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9997483915285804	WITHOUT_CLASSIFICATION	2.5160847141959467E-4	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9999775697177974	WITHOUT_CLASSIFICATION	2.2430282202545695E-5	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999150069241463	WITHOUT_CLASSIFICATION	8.499307585376265E-5	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997267582398	WITHOUT_CLASSIFICATION	2.7324176021539323E-7	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997260884030412	WITHOUT_CLASSIFICATION	2.739115969587648E-4	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999747875056807	WITHOUT_CLASSIFICATION	2.5212494319329856E-5	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999995891952781	WITHOUT_CLASSIFICATION	4.1080472182133394E-7	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999690950196805	WITHOUT_CLASSIFICATION	3.0904980319621345E-5	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999912354871	WITHOUT_CLASSIFICATION	8.764512902188607E-9	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999826704335065	WITHOUT_CLASSIFICATION	1.732956649346375E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999909571836	WITHOUT_CLASSIFICATION	9.042816296646209E-9	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9995421689686239	WITHOUT_CLASSIFICATION	4.57831031376021E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999996219495545	WITHOUT_CLASSIFICATION	3.780504455907025E-7	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999957863507185	WITHOUT_CLASSIFICATION	4.2136492815105755E-6	DEFECT
implied	WITHOUT_CLASSIFICATION	0.999992000140184	WITHOUT_CLASSIFICATION	7.999859815987857E-6	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999997947344771	WITHOUT_CLASSIFICATION	2.052655229738633E-7	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931930313285	WITHOUT_CLASSIFICATION	6.806968671497289E-5	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.998975634888943	WITHOUT_CLASSIFICATION	0.0010243651110570335	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999994721406237	WITHOUT_CLASSIFICATION	5.278593762978831E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999971907187166	WITHOUT_CLASSIFICATION	2.809281283483351E-6	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998773801994569	WITHOUT_CLASSIFICATION	1.2261980054308278E-4	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999968909796084	WITHOUT_CLASSIFICATION	3.1090203914976405E-6	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999992404524076	WITHOUT_CLASSIFICATION	7.595475923131329E-7	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999998822905384	WITHOUT_CLASSIFICATION	1.1770946165768734E-7	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999973096594976	WITHOUT_CLASSIFICATION	2.6903405023649556E-6	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999990468214159	WITHOUT_CLASSIFICATION	9.53178584044057E-7	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999908790497827	WITHOUT_CLASSIFICATION	9.120950217273908E-6	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999996214911404	WITHOUT_CLASSIFICATION	3.7850885959603175E-6	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999988285705023	WITHOUT_CLASSIFICATION	1.1714294977327732E-6	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999994081146848	WITHOUT_CLASSIFICATION	5.918853152817505E-7	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999931740409614	WITHOUT_CLASSIFICATION	6.825959038521964E-6	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994530140479652	WITHOUT_CLASSIFICATION	5.469859520348445E-4	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999993193887448	WITHOUT_CLASSIFICATION	6.80611255370521E-7	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999618923896174	WITHOUT_CLASSIFICATION	3.810761038264137E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999983188701724	WITHOUT_CLASSIFICATION	1.681129827609563E-6	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999965797017989	WITHOUT_CLASSIFICATION	3.4202982011434686E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994310440879081	WITHOUT_CLASSIFICATION	5.689559120919894E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9895070116046562	WITHOUT_CLASSIFICATION	0.01049298839534384	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996986314945	WITHOUT_CLASSIFICATION	3.0136850540890953E-7	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999383498194	WITHOUT_CLASSIFICATION	6.165018064370435E-8	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999993866671057	WITHOUT_CLASSIFICATION	6.13332894217144E-7	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988089612463823	WITHOUT_CLASSIFICATION	0.0011910387536177784	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999970330162	WITHOUT_CLASSIFICATION	2.9669837788967635E-9	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999996804964084	WITHOUT_CLASSIFICATION	3.1950359160324694E-7	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999919020284583	WITHOUT_CLASSIFICATION	8.09797154167997E-6	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999944922995949	WITHOUT_CLASSIFICATION	5.5077004051421435E-6	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999844497867478	WITHOUT_CLASSIFICATION	1.555021325221493E-5	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999899838715643	WITHOUT_CLASSIFICATION	1.00161284355647E-5	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999939588007739	WITHOUT_CLASSIFICATION	6.041199226114578E-6	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999945319126737	WITHOUT_CLASSIFICATION	5.468087326312319E-6	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999227946434381	WITHOUT_CLASSIFICATION	7.72053565618242E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999437084633716	WITHOUT_CLASSIFICATION	5.6291536628415966E-5	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999907699480599	WITHOUT_CLASSIFICATION	9.230051940114181E-6	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999999556058103	WITHOUT_CLASSIFICATION	4.43941897025115E-7	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999998805572226	WITHOUT_CLASSIFICATION	1.1944277757125634E-7	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999968577677397	WITHOUT_CLASSIFICATION	3.1422322602126352E-6	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999837889122142	WITHOUT_CLASSIFICATION	1.621108778582277E-5	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997251715618	WITHOUT_CLASSIFICATION	2.748284382816812E-7	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999986361660959	WITHOUT_CLASSIFICATION	1.3638339041586088E-6	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999995991906283	WITHOUT_CLASSIFICATION	4.008093716851416E-7	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999969932523086	WITHOUT_CLASSIFICATION	3.006747691476807E-6	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999995991906283	WITHOUT_CLASSIFICATION	4.008093716851416E-7	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999973298884343	WITHOUT_CLASSIFICATION	2.670111565824803E-6	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999908530849888	WITHOUT_CLASSIFICATION	9.146915011118732E-6	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999913584643209	WITHOUT_CLASSIFICATION	8.641535679195645E-6	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999997705926614	WITHOUT_CLASSIFICATION	2.294073386393054E-7	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999998313192552	WITHOUT_CLASSIFICATION	1.6868074480010645E-6	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999998502463766	WITHOUT_CLASSIFICATION	1.4975362339212975E-6	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999767403587698	WITHOUT_CLASSIFICATION	2.3259641230141365E-5	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999995913207458	WITHOUT_CLASSIFICATION	4.0867925415101705E-7	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998798334594349	WITHOUT_CLASSIFICATION	1.2016654056512868E-4	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999998881944498	WITHOUT_CLASSIFICATION	1.1180555019851258E-6	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999987565424512	WITHOUT_CLASSIFICATION	1.2434575488715535E-6	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999991173463262	WITHOUT_CLASSIFICATION	8.826536737866766E-7	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999996367044	WITHOUT_CLASSIFICATION	3.632955418855797E-10	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9927046800018873	WITHOUT_CLASSIFICATION	0.007295319998112848	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999844156051627	WITHOUT_CLASSIFICATION	1.558439483729723E-4	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999999614669927	WITHOUT_CLASSIFICATION	3.8533007291749076E-7	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999876637661056	WITHOUT_CLASSIFICATION	1.2336233894369684E-5	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999995290571245	WITHOUT_CLASSIFICATION	4.709428754968231E-6	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998920533778	WITHOUT_CLASSIFICATION	1.0794662219547567E-7	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999998003918281	WITHOUT_CLASSIFICATION	1.996081718530689E-7	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999887342276823	WITHOUT_CLASSIFICATION	1.1265772317642146E-5	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999993888402744	WITHOUT_CLASSIFICATION	6.111597256367187E-7	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9979520864997062	WITHOUT_CLASSIFICATION	0.0020479135002936665	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999848320210073	WITHOUT_CLASSIFICATION	1.5167978992726837E-5	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999987951984065	WITHOUT_CLASSIFICATION	1.2048015934774651E-6	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9997919098724715	WITHOUT_CLASSIFICATION	2.0809012752853032E-4	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9999612047208366	WITHOUT_CLASSIFICATION	3.879527916341734E-5	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999946481036698	WITHOUT_CLASSIFICATION	5.3518963302538435E-6	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998952834107	WITHOUT_CLASSIFICATION	1.0471658927807189E-7	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9998271685454194	WITHOUT_CLASSIFICATION	1.728314545805461E-4	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999800139491208	WITHOUT_CLASSIFICATION	1.9986050879172794E-5	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9335886002782612	WITHOUT_CLASSIFICATION	0.06641139972173875	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999311294227451	WITHOUT_CLASSIFICATION	6.887057725484143E-5	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9989804069438696	WITHOUT_CLASSIFICATION	0.0010195930561304168	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999574051738656	WITHOUT_CLASSIFICATION	4.259482613439113E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999616141883828	WITHOUT_CLASSIFICATION	3.838581161727684E-5	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.999997018391417	WITHOUT_CLASSIFICATION	2.981608582986265E-6	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998822469733	WITHOUT_CLASSIFICATION	1.1775302663541852E-7	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9998365926835084	WITHOUT_CLASSIFICATION	1.6340731649154447E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999998341073235	WITHOUT_CLASSIFICATION	1.658926763752098E-7	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999994322680514	WITHOUT_CLASSIFICATION	5.677319485344183E-7	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9998555487875441	WITHOUT_CLASSIFICATION	1.444512124558608E-4	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9917100557626902	WITHOUT_CLASSIFICATION	0.00828994423730982	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9997919098724715	WITHOUT_CLASSIFICATION	2.0809012752853032E-4	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9996341796741354	WITHOUT_CLASSIFICATION	3.6582032586469763E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999981252845009	WITHOUT_CLASSIFICATION	1.8747154990730954E-6	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9938360176774217	WITHOUT_CLASSIFICATION	0.006163982322578293	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997788131029707	WITHOUT_CLASSIFICATION	2.2118689702929357E-4	DEFECT
special case	WITHOUT_CLASSIFICATION	0.999995641173236	WITHOUT_CLASSIFICATION	4.358826764021926E-6	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999992991473745	WITHOUT_CLASSIFICATION	7.008526255747214E-7	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999999522410904	WITHOUT_CLASSIFICATION	4.775890960435797E-7	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.8177211657896416	DEFECT	0.18227883421035831	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999989145029708	WITHOUT_CLASSIFICATION	1.0854970292372492E-6	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998929366985094	WITHOUT_CLASSIFICATION	1.0706330149059012E-4	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999728989619937	WITHOUT_CLASSIFICATION	2.7101038006383533E-5	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999996049076536	WITHOUT_CLASSIFICATION	3.950923464746243E-7	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999113175853586	WITHOUT_CLASSIFICATION	8.868241464143931E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999043377869004	WITHOUT_CLASSIFICATION	9.56622130996784E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999997940761205	WITHOUT_CLASSIFICATION	2.0592387946144772E-7	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999933872598	WITHOUT_CLASSIFICATION	6.6127402112277875E-9	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999993237234962	WITHOUT_CLASSIFICATION	6.762765037291464E-7	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999986644602935	WITHOUT_CLASSIFICATION	1.3355397065057926E-6	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999984303071873	WITHOUT_CLASSIFICATION	1.5696928126690793E-6	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9996341796741354	WITHOUT_CLASSIFICATION	3.6582032586469763E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999946681220346	WITHOUT_CLASSIFICATION	5.331877965378801E-6	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9825314006443583	WITHOUT_CLASSIFICATION	0.017468599355641712	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999983796607951	WITHOUT_CLASSIFICATION	1.6203392049035015E-5	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999912264703796	WITHOUT_CLASSIFICATION	8.773529620238325E-6	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999560614871582	WITHOUT_CLASSIFICATION	4.3938512841831866E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9992933673518547	WITHOUT_CLASSIFICATION	7.066326481453766E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9992933673518547	WITHOUT_CLASSIFICATION	7.066326481453766E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999989514869844	WITHOUT_CLASSIFICATION	1.0485130156915409E-6	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9992933673518547	WITHOUT_CLASSIFICATION	7.066326481453766E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9992933673518547	WITHOUT_CLASSIFICATION	7.066326481453766E-4	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9993945814701061	WITHOUT_CLASSIFICATION	6.054185298939838E-4	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9996721735598421	WITHOUT_CLASSIFICATION	3.278264401579288E-4	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999997148111318	WITHOUT_CLASSIFICATION	2.851888682554792E-7	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999995748594593	WITHOUT_CLASSIFICATION	4.251405406838619E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.998270705979381	WITHOUT_CLASSIFICATION	0.001729294020619121	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999633287413	WITHOUT_CLASSIFICATION	3.667125870381973E-8	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9992603245579157	WITHOUT_CLASSIFICATION	7.396754420843346E-4	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999996969222166	WITHOUT_CLASSIFICATION	3.0307778346932946E-7	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999608363711644	WITHOUT_CLASSIFICATION	3.916362883564647E-5	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999916479199911	WITHOUT_CLASSIFICATION	8.352080009038502E-6	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999968325637595	WITHOUT_CLASSIFICATION	3.16743624049422E-6	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999653035587984	WITHOUT_CLASSIFICATION	3.4696441201479276E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999992586116605	WITHOUT_CLASSIFICATION	7.413883395283239E-7	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999984531520959	WITHOUT_CLASSIFICATION	1.5468479040504574E-6	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999999504525378	WITHOUT_CLASSIFICATION	4.954746219329621E-7	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9991467200562376	WITHOUT_CLASSIFICATION	8.532799437622662E-4	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999983043640234	WITHOUT_CLASSIFICATION	1.6956359766580935E-6	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999697838896957	WITHOUT_CLASSIFICATION	3.0216110304226778E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9997924108768641	WITHOUT_CLASSIFICATION	2.0758912313600098E-4	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999977824252391	WITHOUT_CLASSIFICATION	2.217574760928174E-6	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999969349747998	WITHOUT_CLASSIFICATION	3.065025200192371E-6	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999812275395025	WITHOUT_CLASSIFICATION	1.8772460497509573E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999983043640234	WITHOUT_CLASSIFICATION	1.6956359766580935E-6	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9999612047208366	WITHOUT_CLASSIFICATION	3.879527916341734E-5	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9999979877011479	WITHOUT_CLASSIFICATION	2.012298852110052E-6	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991318653865	WITHOUT_CLASSIFICATION	8.681346136080605E-7	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991003804096	WITHOUT_CLASSIFICATION	8.996195904911207E-7	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9999948363569168	WITHOUT_CLASSIFICATION	5.163643083251963E-6	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999519601197954	WITHOUT_CLASSIFICATION	4.803988020456792E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999985044295535	WITHOUT_CLASSIFICATION	1.495570446556332E-6	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9995928341017717	WITHOUT_CLASSIFICATION	4.071658982282933E-4	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999987960061336	WITHOUT_CLASSIFICATION	1.20399386630234E-6	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999253091346	WITHOUT_CLASSIFICATION	7.469086538100146E-8	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999791692083744	WITHOUT_CLASSIFICATION	2.0830791625570602E-5	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999821644778513	WITHOUT_CLASSIFICATION	1.783552214873343E-5	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999990889198153	WITHOUT_CLASSIFICATION	9.110801848168655E-7	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999999825103346	WITHOUT_CLASSIFICATION	1.7489665409069213E-7	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9993808059977901	WITHOUT_CLASSIFICATION	6.191940022098499E-4	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999736819378	WITHOUT_CLASSIFICATION	2.631806225073846E-8	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999735542237093	WITHOUT_CLASSIFICATION	2.644577629065366E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.999996462352152	WITHOUT_CLASSIFICATION	3.537647848118198E-6	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999889422625137	WITHOUT_CLASSIFICATION	1.1057737486266288E-5	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999917817643529	WITHOUT_CLASSIFICATION	8.218235647118799E-6	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9992582011404013	WITHOUT_CLASSIFICATION	7.417988595985951E-4	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999996709965167	WITHOUT_CLASSIFICATION	3.2900348331976894E-7	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999990039973478	WITHOUT_CLASSIFICATION	9.960026522503937E-7	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999987960061336	WITHOUT_CLASSIFICATION	1.20399386630234E-6	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999256485415	WITHOUT_CLASSIFICATION	7.435145849287934E-8	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999994647370625	WITHOUT_CLASSIFICATION	5.35262937554609E-7	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999945778455802	WITHOUT_CLASSIFICATION	5.4221544197958335E-6	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999984876684935	WITHOUT_CLASSIFICATION	1.5123315064838956E-6	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998403213433	WITHOUT_CLASSIFICATION	1.5967865669711522E-7	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9999819393432152	WITHOUT_CLASSIFICATION	1.806065678476524E-5	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999777597247388	WITHOUT_CLASSIFICATION	2.2240275261201108E-5	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9999995584117344	WITHOUT_CLASSIFICATION	4.415882655827531E-7	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999969471559932	WITHOUT_CLASSIFICATION	3.052844006909485E-6	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9998898943582943	WITHOUT_CLASSIFICATION	1.1010564170560086E-4	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996703553711	WITHOUT_CLASSIFICATION	3.2964462898194347E-7	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999969208889612	WITHOUT_CLASSIFICATION	3.07911103878697E-5	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999946531458364	WITHOUT_CLASSIFICATION	5.3468541637141626E-6	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999996814818	WITHOUT_CLASSIFICATION	3.1851826800360533E-10	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999856119942164	WITHOUT_CLASSIFICATION	1.4388005783549694E-5	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999798863336291	WITHOUT_CLASSIFICATION	2.0113666370979052E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999696801123	WITHOUT_CLASSIFICATION	3.031988770821969E-7	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996703553711	WITHOUT_CLASSIFICATION	3.2964462898194347E-7	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999487084608	WITHOUT_CLASSIFICATION	5.1291539160807765E-8	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9998031890232737	WITHOUT_CLASSIFICATION	1.9681097672624546E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999957964795044	WITHOUT_CLASSIFICATION	4.20352049562862E-6	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999958434692556	WITHOUT_CLASSIFICATION	4.156530744351538E-6	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.999922520299678	WITHOUT_CLASSIFICATION	7.747970032204946E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999994800904364	WITHOUT_CLASSIFICATION	5.199095635936485E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999856119942164	WITHOUT_CLASSIFICATION	1.4388005783549694E-5	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999991256452947	WITHOUT_CLASSIFICATION	8.743547053025672E-6	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817862213379	WITHOUT_CLASSIFICATION	1.8213778662028722E-5	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997936331456	WITHOUT_CLASSIFICATION	2.0636685433181037E-7	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930765230919	WITHOUT_CLASSIFICATION	6.9234769081575765E-6	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805411127262	WITHOUT_CLASSIFICATION	1.9458887273858375E-5	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977032880012	WITHOUT_CLASSIFICATION	2.2967119988564516E-6	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999998407933162	WITHOUT_CLASSIFICATION	1.5920668379716335E-6	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999998407933162	WITHOUT_CLASSIFICATION	1.5920668379716335E-6	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999983579547324	WITHOUT_CLASSIFICATION	1.6420452677168816E-6	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999994438074185	WITHOUT_CLASSIFICATION	5.561925815962736E-7	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9999960454879292	WITHOUT_CLASSIFICATION	3.95451207085671E-6	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.999923261993462	WITHOUT_CLASSIFICATION	7.673800653794232E-5	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9413112589200875	WITHOUT_CLASSIFICATION	0.05868874107991251	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943054971626	WITHOUT_CLASSIFICATION	5.694502837308026E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785828561311	WITHOUT_CLASSIFICATION	2.1417143868941844E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719583604286	WITHOUT_CLASSIFICATION	2.8041639571344173E-5	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999986948766427	WITHOUT_CLASSIFICATION	1.3051233573554766E-6	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999233164550604	WITHOUT_CLASSIFICATION	7.668354493969206E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943054971626	WITHOUT_CLASSIFICATION	5.694502837308026E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785828561311	WITHOUT_CLASSIFICATION	2.1417143868941844E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719583604286	WITHOUT_CLASSIFICATION	2.8041639571344173E-5	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999964420481644	WITHOUT_CLASSIFICATION	3.5579518355814686E-6	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9999839888701262	WITHOUT_CLASSIFICATION	1.6011129873761257E-5	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999903348315611	WITHOUT_CLASSIFICATION	9.665168438831862E-6	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999977632897824	WITHOUT_CLASSIFICATION	2.236710217623871E-6	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999982733783381	WITHOUT_CLASSIFICATION	1.726621661900852E-6	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999508997449864	WITHOUT_CLASSIFICATION	4.9100255013652584E-5	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999855926604975	WITHOUT_CLASSIFICATION	1.4407339502601297E-5	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999996484061411	WITHOUT_CLASSIFICATION	3.515938588003011E-7	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999860079631591	WITHOUT_CLASSIFICATION	1.3992036840923396E-5	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999901670983549	WITHOUT_CLASSIFICATION	9.832901645153532E-6	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999083957131	WITHOUT_CLASSIFICATION	9.160428702800622E-8	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9917295547321303	WITHOUT_CLASSIFICATION	0.008270445267869651	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9991692434049626	WITHOUT_CLASSIFICATION	8.307565950373729E-4	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999967874253963	WITHOUT_CLASSIFICATION	3.2125746035334095E-6	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999993846324096	WITHOUT_CLASSIFICATION	6.153675904241347E-7	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999578973920918	WITHOUT_CLASSIFICATION	4.210260790820509E-5	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999996132936124	WITHOUT_CLASSIFICATION	3.8670638761358206E-7	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999973213746614	WITHOUT_CLASSIFICATION	2.6786253386065904E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999913055716148	WITHOUT_CLASSIFICATION	8.694428385202803E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999952235968229	WITHOUT_CLASSIFICATION	4.776403177047227E-6	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999882560664519	WITHOUT_CLASSIFICATION	1.1743933548011653E-5	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9978430493610494	WITHOUT_CLASSIFICATION	0.0021569506389506952	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999811670249	WITHOUT_CLASSIFICATION	1.883297507644948E-8	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999999747282685	WITHOUT_CLASSIFICATION	2.52717314951027E-7	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.99999992496721	WITHOUT_CLASSIFICATION	7.503279003800792E-8	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9997537441913654	WITHOUT_CLASSIFICATION	2.462558086346281E-4	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999426500035027	WITHOUT_CLASSIFICATION	5.734999649725764E-5	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999511455663155	WITHOUT_CLASSIFICATION	4.8854433684546544E-5	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999858609674	WITHOUT_CLASSIFICATION	1.4139032678010193E-8	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999781753166388	WITHOUT_CLASSIFICATION	2.1824683361267377E-5	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996418402713234	WITHOUT_CLASSIFICATION	3.5815972867658347E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999974876373959	WITHOUT_CLASSIFICATION	2.5123626040536144E-6	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999974876373959	WITHOUT_CLASSIFICATION	2.5123626040536144E-6	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999900344055	WITHOUT_CLASSIFICATION	9.965594455666666E-9	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999972615745285	WITHOUT_CLASSIFICATION	2.738425471442092E-6	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999978683496342	WITHOUT_CLASSIFICATION	2.131650365893888E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998042328468884	WITHOUT_CLASSIFICATION	1.9576715311163506E-4	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999994563717551	WITHOUT_CLASSIFICATION	5.436282448916841E-7	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999927554800238	WITHOUT_CLASSIFICATION	7.244519976214381E-6	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999676262672761	WITHOUT_CLASSIFICATION	3.237373272388536E-5	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999995536228727	WITHOUT_CLASSIFICATION	4.463771271636243E-7	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.999999821826991	WITHOUT_CLASSIFICATION	1.7817300903601758E-7	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979104116528	WITHOUT_CLASSIFICATION	2.0895883471955452E-6	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961058449423	WITHOUT_CLASSIFICATION	3.894155057764377E-6	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968391762799	WITHOUT_CLASSIFICATION	3.1608237200669973E-6	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980441629829	WITHOUT_CLASSIFICATION	1.9558370171117117E-6	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995416280945	WITHOUT_CLASSIFICATION	4.5837190557395775E-7	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986576396513	WITHOUT_CLASSIFICATION	1.342360348730041E-6	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972365526678	WITHOUT_CLASSIFICATION	2.7634473321553613E-6	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997977624855	WITHOUT_CLASSIFICATION	2.022375144938975E-6	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967836168719	WITHOUT_CLASSIFICATION	3.2163831280027334E-6	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924094910109	WITHOUT_CLASSIFICATION	7.590508989075975E-6	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995335926112	WITHOUT_CLASSIFICATION	4.6640738891372626E-7	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999995664423637	WITHOUT_CLASSIFICATION	4.335576362858467E-7	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9991406207139445	WITHOUT_CLASSIFICATION	8.593792860554837E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999978186081281	WITHOUT_CLASSIFICATION	2.1813918719414808E-6	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999934138139255	WITHOUT_CLASSIFICATION	6.586186074533579E-6	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999999593720522	WITHOUT_CLASSIFICATION	4.062794780347657E-7	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9999892488982158	WITHOUT_CLASSIFICATION	1.075110178410695E-5	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999999186379928	WITHOUT_CLASSIFICATION	8.136200725328866E-8	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999719166375682	WITHOUT_CLASSIFICATION	2.808336243180373E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999978186081281	WITHOUT_CLASSIFICATION	2.1813918719414808E-6	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999978186081281	WITHOUT_CLASSIFICATION	2.1813918719414808E-6	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.999997512963653	WITHOUT_CLASSIFICATION	2.4870363469273274E-6	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999990310070407	WITHOUT_CLASSIFICATION	9.689929592477615E-7	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999955337889	WITHOUT_CLASSIFICATION	4.466211064990172E-9	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999995363624808	WITHOUT_CLASSIFICATION	4.636375191262178E-7	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999864836088657	WITHOUT_CLASSIFICATION	1.3516391134278502E-5	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999952235968229	WITHOUT_CLASSIFICATION	4.776403177047227E-6	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999997892776301	WITHOUT_CLASSIFICATION	2.1072236992136524E-7	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999867639315112	WITHOUT_CLASSIFICATION	1.3236068488789592E-4	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999966309826741	WITHOUT_CLASSIFICATION	3.3690173258278022E-6	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736985446498	WITHOUT_CLASSIFICATION	2.6301455350314246E-5	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999993071622261	WITHOUT_CLASSIFICATION	6.928377739692248E-7	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646689203259	WITHOUT_CLASSIFICATION	3.533107967406259E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999933979209132	WITHOUT_CLASSIFICATION	6.602079086782924E-6	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999933979209132	WITHOUT_CLASSIFICATION	6.602079086782924E-6	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999999375692957	WITHOUT_CLASSIFICATION	6.243070429565098E-7	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999999375692957	WITHOUT_CLASSIFICATION	6.243070429565098E-7	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821519207397	WITHOUT_CLASSIFICATION	1.7848079260260253E-5	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999774072591088	WITHOUT_CLASSIFICATION	2.2592740891222166E-5	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999791550554744	WITHOUT_CLASSIFICATION	2.084494452560034E-4	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850114653749	WITHOUT_CLASSIFICATION	1.4988534625036734E-5	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.998680685848044	WITHOUT_CLASSIFICATION	0.0013193141519559895	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998991782289991	WITHOUT_CLASSIFICATION	1.0082177100085516E-4	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996878400524272	WITHOUT_CLASSIFICATION	3.1215994757277275E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999485945955242	WITHOUT_CLASSIFICATION	5.1405404475659556E-5	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999741789172438	WITHOUT_CLASSIFICATION	2.5821082756086203E-5	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999995885253563	WITHOUT_CLASSIFICATION	4.114746436878477E-7	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999993712317523	WITHOUT_CLASSIFICATION	6.287682477020551E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.99999327521872	WITHOUT_CLASSIFICATION	6.72478128006744E-6	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999980266935475	WITHOUT_CLASSIFICATION	1.9733064524991496E-5	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999879937856647	WITHOUT_CLASSIFICATION	1.200621433528231E-5	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999884049980929	WITHOUT_CLASSIFICATION	1.1595001907030962E-5	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999949739289625	WITHOUT_CLASSIFICATION	5.026071037383595E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999949739289625	WITHOUT_CLASSIFICATION	5.026071037383595E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999949739289625	WITHOUT_CLASSIFICATION	5.026071037383595E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999998485616827	WITHOUT_CLASSIFICATION	1.514383173162861E-7	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9999832217111103	WITHOUT_CLASSIFICATION	1.67782888896858E-5	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999974898562	WITHOUT_CLASSIFICATION	2.5101437056661828E-9	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997168655443589	WITHOUT_CLASSIFICATION	2.831344556411145E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911053836089	WITHOUT_CLASSIFICATION	8.894616391021398E-6	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983676402179	WITHOUT_CLASSIFICATION	1.6323597820207348E-6	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999984994523755	WITHOUT_CLASSIFICATION	1.5005476244880092E-6	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999872143188131	WITHOUT_CLASSIFICATION	1.2785681186903956E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999999341922465	WITHOUT_CLASSIFICATION	6.58077535087563E-7	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999092492425	WITHOUT_CLASSIFICATION	9.075075754964686E-8	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999949945619812	WITHOUT_CLASSIFICATION	5.005438018847419E-6	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9979132017361335	WITHOUT_CLASSIFICATION	0.0020867982638665015	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621372036162	WITHOUT_CLASSIFICATION	3.7862796383744857E-5	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999985663289676	WITHOUT_CLASSIFICATION	1.4336710324035196E-6	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999985091324078	WITHOUT_CLASSIFICATION	1.4908675922233052E-6	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9994669959632391	WITHOUT_CLASSIFICATION	5.330040367608731E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999995622307515	WITHOUT_CLASSIFICATION	4.377692485755981E-7	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998492961542786	WITHOUT_CLASSIFICATION	1.507038457214617E-4	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9997606901691428	WITHOUT_CLASSIFICATION	2.393098308572178E-4	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999704249578449	WITHOUT_CLASSIFICATION	2.9575042155046222E-5	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999937055775	WITHOUT_CLASSIFICATION	6.2944225682449985E-9	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999974806648974	WITHOUT_CLASSIFICATION	2.519335102699524E-6	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999977536713547	WITHOUT_CLASSIFICATION	2.246328645234287E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999967936188008	WITHOUT_CLASSIFICATION	3.2063811991625236E-6	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999977809687105	WITHOUT_CLASSIFICATION	2.2190312894920674E-6	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.99992567940711	WITHOUT_CLASSIFICATION	7.432059289003394E-5	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999072274241771	WITHOUT_CLASSIFICATION	9.277257582290006E-5	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999948068231004	WITHOUT_CLASSIFICATION	5.193176899591444E-6	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999993399258	WITHOUT_CLASSIFICATION	6.6007419447886524E-9	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999996686822579	WITHOUT_CLASSIFICATION	3.3131774209925076E-7	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999751883950954	WITHOUT_CLASSIFICATION	2.4811604904711804E-5	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999936649249112	WITHOUT_CLASSIFICATION	6.335075088824042E-6	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999837844407969	WITHOUT_CLASSIFICATION	1.6215559202981077E-5	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999996745373989	WITHOUT_CLASSIFICATION	3.2546260118569685E-7	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999043120901127	WITHOUT_CLASSIFICATION	9.568790988731737E-5	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999968036320398	WITHOUT_CLASSIFICATION	3.1963679603079437E-6	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9998944615154355	WITHOUT_CLASSIFICATION	1.0553848456457119E-4	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.9999997507908043	WITHOUT_CLASSIFICATION	2.492091956843468E-7	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999997686265613	WITHOUT_CLASSIFICATION	2.3137343873258762E-7	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999999261479134	WITHOUT_CLASSIFICATION	7.385208654873146E-8	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999996903713927	WITHOUT_CLASSIFICATION	3.0962860730312476E-6	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999997188542716	WITHOUT_CLASSIFICATION	2.8114572837989805E-7	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9988945437955883	WITHOUT_CLASSIFICATION	0.0011054562044117114	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999890607670916	WITHOUT_CLASSIFICATION	1.0939232908298364E-5	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999989066412659	WITHOUT_CLASSIFICATION	1.093358734115614E-6	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999636198518148	WITHOUT_CLASSIFICATION	3.638014818522616E-5	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9999998361873974	WITHOUT_CLASSIFICATION	1.638126025968311E-7	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999969004877546	WITHOUT_CLASSIFICATION	3.0995122453354267E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999460621781054	WITHOUT_CLASSIFICATION	5.3937821894566466E-5	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999997141781245	WITHOUT_CLASSIFICATION	2.85821875517482E-7	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999997378341425	WITHOUT_CLASSIFICATION	2.6216585750745148E-6	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999781991550688	WITHOUT_CLASSIFICATION	2.1800844931133446E-5	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999923052202914	WITHOUT_CLASSIFICATION	7.694779708606397E-6	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995112694307803	WITHOUT_CLASSIFICATION	4.88730569219661E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999934178761701	WITHOUT_CLASSIFICATION	6.582123829845887E-6	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9998705654619285	WITHOUT_CLASSIFICATION	1.294345380715601E-4	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999955732850118	WITHOUT_CLASSIFICATION	4.4267149881307845E-6	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999951854800972	WITHOUT_CLASSIFICATION	4.814519902726818E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999999565038068	WITHOUT_CLASSIFICATION	4.349619320143231E-7	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999969167943865	WITHOUT_CLASSIFICATION	3.083205613366244E-6	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.999994551247889	WITHOUT_CLASSIFICATION	5.448752111042482E-6	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998387531991	WITHOUT_CLASSIFICATION	1.6124680097343565E-7	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999397428075	WITHOUT_CLASSIFICATION	6.025719243914412E-8	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999673336682	WITHOUT_CLASSIFICATION	3.2666331689498695E-8	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999987278113202	WITHOUT_CLASSIFICATION	1.2721886798869777E-6	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999986303708336	WITHOUT_CLASSIFICATION	1.369629166493095E-6	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999940430624026	WITHOUT_CLASSIFICATION	5.956937597490358E-6	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998307251853	WITHOUT_CLASSIFICATION	1.692748147383195E-7	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997307948743954	WITHOUT_CLASSIFICATION	2.692051256045616E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997307948743954	WITHOUT_CLASSIFICATION	2.692051256045616E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999999333406027	WITHOUT_CLASSIFICATION	6.665939742036503E-8	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999972923930804	WITHOUT_CLASSIFICATION	2.707606919590318E-6	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999967582015825	WITHOUT_CLASSIFICATION	3.2417984173752683E-6	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999916121364807	WITHOUT_CLASSIFICATION	8.38786351929355E-6	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999702084326649	WITHOUT_CLASSIFICATION	2.979156733497335E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999862679432185	WITHOUT_CLASSIFICATION	1.3732056781449895E-5	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999934811210524	WITHOUT_CLASSIFICATION	6.518878947593042E-6	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999982327179276	WITHOUT_CLASSIFICATION	1.7672820723297848E-6	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999555410776664	WITHOUT_CLASSIFICATION	4.445892233359088E-5	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999979357879754	WITHOUT_CLASSIFICATION	2.0642120246184417E-6	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999993871186099	WITHOUT_CLASSIFICATION	6.128813901210514E-7	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999999241535033	WITHOUT_CLASSIFICATION	7.584649670522365E-7	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9999996287506395	WITHOUT_CLASSIFICATION	3.7124936039064736E-7	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999920955977	WITHOUT_CLASSIFICATION	7.904402306265488E-8	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999981891068527	WITHOUT_CLASSIFICATION	1.8108931473134353E-6	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.999993339941648	WITHOUT_CLASSIFICATION	6.660058352013246E-6	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.999999403819762	WITHOUT_CLASSIFICATION	5.961802378524775E-7	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.997573450366565	WITHOUT_CLASSIFICATION	0.0024265496334350636	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999997025589893	WITHOUT_CLASSIFICATION	2.974410107054517E-6	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999942947634833	WITHOUT_CLASSIFICATION	5.705236516618683E-6	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999912988669781	WITHOUT_CLASSIFICATION	8.701133021916268E-6	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999996454088382	WITHOUT_CLASSIFICATION	3.545911617941106E-7	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999911658928763	WITHOUT_CLASSIFICATION	8.834107123772862E-6	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999986111888787	WITHOUT_CLASSIFICATION	1.3888111213512795E-6	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999092310963397	WITHOUT_CLASSIFICATION	9.07689036603394E-5	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999775748641889	WITHOUT_CLASSIFICATION	2.242513581104515E-5	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999993541681919	WITHOUT_CLASSIFICATION	6.458318081539668E-7	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.999997004566974	WITHOUT_CLASSIFICATION	2.9954330259863648E-6	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999964721299067	WITHOUT_CLASSIFICATION	3.527870093301488E-6	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999999878061708	WITHOUT_CLASSIFICATION	1.2193829205940898E-7	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999987985794088	WITHOUT_CLASSIFICATION	1.2014205911699875E-6	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999987490102	WITHOUT_CLASSIFICATION	1.250989799979078E-6	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999979569912625	WITHOUT_CLASSIFICATION	2.043008737501381E-6	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999820945265787	WITHOUT_CLASSIFICATION	1.7905473421337833E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999880835345057	WITHOUT_CLASSIFICATION	1.1916465494277953E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999880835345057	WITHOUT_CLASSIFICATION	1.1916465494277953E-5	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999938485995059	WITHOUT_CLASSIFICATION	6.151400494083295E-6	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999312457591288	WITHOUT_CLASSIFICATION	6.87542408711644E-5	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999964372981978	WITHOUT_CLASSIFICATION	3.562701802169436E-6	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9998552254309313	WITHOUT_CLASSIFICATION	1.4477456906870727E-4	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.999999999593783	WITHOUT_CLASSIFICATION	4.0621690058289605E-10	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999168957468099	WITHOUT_CLASSIFICATION	8.310425319007928E-5	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999955858695324	WITHOUT_CLASSIFICATION	4.414130467614699E-6	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9998239908338997	WITHOUT_CLASSIFICATION	1.7600916610033057E-4	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999967280648753	WITHOUT_CLASSIFICATION	3.2719351247271273E-6	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998475719048487	WITHOUT_CLASSIFICATION	1.5242809515122061E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999854564227794	WITHOUT_CLASSIFICATION	1.4543577220617808E-5	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999197084263951	WITHOUT_CLASSIFICATION	8.029157360494151E-5	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999702169695944	WITHOUT_CLASSIFICATION	2.978303040554186E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999972916259484	WITHOUT_CLASSIFICATION	2.708374051495734E-6	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998461684477447	WITHOUT_CLASSIFICATION	1.5383155225533635E-4	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999998018889295	WITHOUT_CLASSIFICATION	1.9811107056199763E-7	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9976092621531326	WITHOUT_CLASSIFICATION	0.0023907378468672794	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9976092621531326	WITHOUT_CLASSIFICATION	0.0023907378468672794	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999747043662139	WITHOUT_CLASSIFICATION	2.5295633785974664E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999594096161485	WITHOUT_CLASSIFICATION	4.059038385156968E-5	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999977967383774	WITHOUT_CLASSIFICATION	2.2032616226038875E-6	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998306452514	WITHOUT_CLASSIFICATION	1.6935474858308253E-7	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.99999755461926	WITHOUT_CLASSIFICATION	2.445380739969663E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.99999327521872	WITHOUT_CLASSIFICATION	6.72478128006744E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9987489485488064	WITHOUT_CLASSIFICATION	0.0012510514511935727	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999513404572	WITHOUT_CLASSIFICATION	4.8659542934269585E-8	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998016529378	WITHOUT_CLASSIFICATION	1.98347062330125E-7	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998415032356	WITHOUT_CLASSIFICATION	1.5849676431408385E-7	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999987520229174	WITHOUT_CLASSIFICATION	1.2479770825722917E-6	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999987520229174	WITHOUT_CLASSIFICATION	1.2479770825722917E-6	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999782367393513	WITHOUT_CLASSIFICATION	2.1763260648694165E-5	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999928486585	WITHOUT_CLASSIFICATION	7.151341498778521E-8	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999998578055616	WITHOUT_CLASSIFICATION	1.4219443837342026E-7	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999998528687405	WITHOUT_CLASSIFICATION	1.471312594949013E-7	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999970852307336	WITHOUT_CLASSIFICATION	2.9147692664408147E-6	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9915229770001911	WITHOUT_CLASSIFICATION	0.008477022999808924	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999991618293336	WITHOUT_CLASSIFICATION	8.381706665062372E-7	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999739485555602	WITHOUT_CLASSIFICATION	2.6051444439695504E-5	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999860292622273	WITHOUT_CLASSIFICATION	1.3970737772677843E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999993684050081	WITHOUT_CLASSIFICATION	6.315949917813943E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999159942004	WITHOUT_CLASSIFICATION	8.400579958425064E-8	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998701925720616	WITHOUT_CLASSIFICATION	1.2980742793840223E-4	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999709396289321	WITHOUT_CLASSIFICATION	2.9060371067815763E-5	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999659566008681	WITHOUT_CLASSIFICATION	3.404339913195696E-5	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999676857997	WITHOUT_CLASSIFICATION	3.231420039850744E-8	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999955998394112	WITHOUT_CLASSIFICATION	4.4001605886861666E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999971907187166	WITHOUT_CLASSIFICATION	2.809281283483351E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999680132476	WITHOUT_CLASSIFICATION	3.198675240295405E-7	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999893695093025	WITHOUT_CLASSIFICATION	1.0630490697462155E-5	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999991204285632	WITHOUT_CLASSIFICATION	8.795714369321787E-7	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999962339982134	WITHOUT_CLASSIFICATION	3.766001786620497E-6	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.999936314747818	WITHOUT_CLASSIFICATION	6.368525218201209E-5	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999983991662514	WITHOUT_CLASSIFICATION	1.6008337486326254E-6	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999991123924904	WITHOUT_CLASSIFICATION	8.876075096025182E-6	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999900984003087	WITHOUT_CLASSIFICATION	9.901599691192374E-6	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999517664279722	WITHOUT_CLASSIFICATION	4.823357202773521E-5	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999986099351028	WITHOUT_CLASSIFICATION	1.3900648972025521E-6	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999905806051914	WITHOUT_CLASSIFICATION	9.419394808587501E-6	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999778448025698	WITHOUT_CLASSIFICATION	2.21551974302395E-5	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999998482108	WITHOUT_CLASSIFICATION	1.517893026140858E-10	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999895244316936	WITHOUT_CLASSIFICATION	1.0475568306321845E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999846400398917	WITHOUT_CLASSIFICATION	1.5359960108243122E-5	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999937665975596	WITHOUT_CLASSIFICATION	6.2334024404529295E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.999995884591143	WITHOUT_CLASSIFICATION	4.115408857051789E-6	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9998284582521072	WITHOUT_CLASSIFICATION	1.7154174789280792E-4	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.99999988786014	WITHOUT_CLASSIFICATION	1.1213986006753339E-7	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999999226101935	WITHOUT_CLASSIFICATION	7.738980643064447E-8	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998558659323619	WITHOUT_CLASSIFICATION	1.4413406763822214E-4	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999681049576759	WITHOUT_CLASSIFICATION	3.1895042324181823E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999681049576759	WITHOUT_CLASSIFICATION	3.1895042324181823E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999997528790591	WITHOUT_CLASSIFICATION	2.471209409060791E-7	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999405665462	WITHOUT_CLASSIFICATION	5.9433453965977703E-8	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999997104424438	WITHOUT_CLASSIFICATION	2.8955755617486046E-7	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9996687397862104	WITHOUT_CLASSIFICATION	3.3126021378959556E-4	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999897938571761	WITHOUT_CLASSIFICATION	1.0206142823901103E-5	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999996529783758	WITHOUT_CLASSIFICATION	3.4702162424056144E-7	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999999927696	WITHOUT_CLASSIFICATION	7.230400164482884E-11	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999045011583935	WITHOUT_CLASSIFICATION	9.549884160663501E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999997528790591	WITHOUT_CLASSIFICATION	2.471209409060791E-7	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999405665462	WITHOUT_CLASSIFICATION	5.9433453965977703E-8	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999979791755575	WITHOUT_CLASSIFICATION	2.020824442375131E-6	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999992377433178	WITHOUT_CLASSIFICATION	7.622566822630366E-7	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.999999633064655	WITHOUT_CLASSIFICATION	3.6693534495011545E-7	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999703968576874	WITHOUT_CLASSIFICATION	2.960314231260077E-5	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999983263968782	WITHOUT_CLASSIFICATION	1.673603121861041E-6	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999972443574022	WITHOUT_CLASSIFICATION	2.755642597796246E-6	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999929195144	WITHOUT_CLASSIFICATION	7.080485678894996E-9	DEFECT
}	WITHOUT_CLASSIFICATION	0.9998831386896406	WITHOUT_CLASSIFICATION	1.1686131035937487E-4	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999969343680263	WITHOUT_CLASSIFICATION	3.065631973705508E-6	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9934176735940303	WITHOUT_CLASSIFICATION	0.006582326405969742	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999218045	WITHOUT_CLASSIFICATION	7.81953945773327E-11	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9934176735940303	WITHOUT_CLASSIFICATION	0.006582326405969742	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999827310666294	WITHOUT_CLASSIFICATION	1.7268933370572378E-5	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999985088796619	WITHOUT_CLASSIFICATION	1.4911203380511139E-6	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999483638204927	WITHOUT_CLASSIFICATION	5.163617950744386E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998149659656	WITHOUT_CLASSIFICATION	1.8503403441437578E-7	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9943739709607647	WITHOUT_CLASSIFICATION	0.005626029039235316	DEFECT
}	WITHOUT_CLASSIFICATION	0.9998831386896406	WITHOUT_CLASSIFICATION	1.1686131035937487E-4	DEFECT
}	WITHOUT_CLASSIFICATION	0.9998831386896406	WITHOUT_CLASSIFICATION	1.1686131035937487E-4	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999995071544864	WITHOUT_CLASSIFICATION	4.928455135981347E-6	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999991501547654	WITHOUT_CLASSIFICATION	8.498452345861466E-7	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999995140536799	WITHOUT_CLASSIFICATION	4.859463200885566E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999448895264866	WITHOUT_CLASSIFICATION	5.511047351333421E-5	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999976513872649	WITHOUT_CLASSIFICATION	2.348612735141542E-6	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999991483408064	WITHOUT_CLASSIFICATION	8.516591935472392E-7	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999994304040539	WITHOUT_CLASSIFICATION	5.695959460400129E-7	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999992022742095	WITHOUT_CLASSIFICATION	7.977257905887316E-7	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999994946330051	WITHOUT_CLASSIFICATION	5.053669949066166E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9998474927797096	WITHOUT_CLASSIFICATION	1.5250722029047992E-4	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999808043693709	WITHOUT_CLASSIFICATION	1.919563062916719E-5	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999990103285514	WITHOUT_CLASSIFICATION	9.896714485609766E-7	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999786663548571	WITHOUT_CLASSIFICATION	2.1333645142923815E-5	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999870654922997	WITHOUT_CLASSIFICATION	1.2934507700405547E-5	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.999998909888159	WITHOUT_CLASSIFICATION	1.0901118409444914E-6	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999998441375751	WITHOUT_CLASSIFICATION	1.5586242496407495E-7	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999959954716067	WITHOUT_CLASSIFICATION	4.004528393304126E-6	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999969525972973	WITHOUT_CLASSIFICATION	3.0474027027877064E-6	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999996081395981	WITHOUT_CLASSIFICATION	3.918604018615202E-7	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999992630826289	WITHOUT_CLASSIFICATION	7.369173710997425E-7	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9998627918201931	WITHOUT_CLASSIFICATION	1.372081798068579E-4	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999996145424193	WITHOUT_CLASSIFICATION	3.8545758072931995E-7	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999586479587427	WITHOUT_CLASSIFICATION	4.1352041257355286E-5	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999872954651886	WITHOUT_CLASSIFICATION	1.270453481139512E-5	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999996475861825	WITHOUT_CLASSIFICATION	3.5241381749747197E-7	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999981612560845	WITHOUT_CLASSIFICATION	1.8387439154551557E-6	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999324153000768	WITHOUT_CLASSIFICATION	6.758469992316566E-5	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999991712182394	WITHOUT_CLASSIFICATION	8.287817606699342E-7	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997679567679172	WITHOUT_CLASSIFICATION	2.3204323208279577E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999995102806034	WITHOUT_CLASSIFICATION	4.897193966297774E-7	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999999384330524	WITHOUT_CLASSIFICATION	6.156694759776824E-7	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998187930416148	WITHOUT_CLASSIFICATION	1.8120695838528872E-4	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999524810116087	WITHOUT_CLASSIFICATION	4.751898839119178E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999992022742095	WITHOUT_CLASSIFICATION	7.977257905887316E-7	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9997962629868838	WITHOUT_CLASSIFICATION	2.0373701311619997E-4	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999939670254938	WITHOUT_CLASSIFICATION	6.032974506233196E-6	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9851829511737712	WITHOUT_CLASSIFICATION	0.014817048826228774	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999992153150828	WITHOUT_CLASSIFICATION	7.846849170329663E-7	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999995163694663	WITHOUT_CLASSIFICATION	4.836305337333858E-7	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999998166948239	WITHOUT_CLASSIFICATION	1.8330517618256158E-7	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999448895264866	WITHOUT_CLASSIFICATION	5.511047351333421E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999448895264866	WITHOUT_CLASSIFICATION	5.511047351333421E-5	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999997732013096	WITHOUT_CLASSIFICATION	2.267986903368818E-7	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999992537732417	WITHOUT_CLASSIFICATION	7.462267582211672E-7	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9999938986358237	WITHOUT_CLASSIFICATION	6.101364176410743E-6	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999996326686601	WITHOUT_CLASSIFICATION	3.6733133997757225E-7	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999000267814748	WITHOUT_CLASSIFICATION	9.997321852512547E-5	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9967360297999752	WITHOUT_CLASSIFICATION	0.0032639702000247244	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.998531889535697	WITHOUT_CLASSIFICATION	0.001468110464302972	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999930075432563	WITHOUT_CLASSIFICATION	6.992456743707696E-6	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999894745923587	WITHOUT_CLASSIFICATION	1.052540764133783E-5	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999815795649255	WITHOUT_CLASSIFICATION	1.842043507447029E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999936520963973	WITHOUT_CLASSIFICATION	6.3479036026832455E-6	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999996774874294	WITHOUT_CLASSIFICATION	3.225125706736238E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9987769926913177	WITHOUT_CLASSIFICATION	0.0012230073086822414	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999997528790591	WITHOUT_CLASSIFICATION	2.471209409060791E-7	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999936520963973	WITHOUT_CLASSIFICATION	6.3479036026832455E-6	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999922029553754	WITHOUT_CLASSIFICATION	7.797044624539671E-6	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999994751093413	WITHOUT_CLASSIFICATION	5.248906586160884E-7	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999905459145151	WITHOUT_CLASSIFICATION	9.454085484955751E-6	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9917484821277569	WITHOUT_CLASSIFICATION	0.008251517872243149	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9987769926913177	WITHOUT_CLASSIFICATION	0.0012230073086822414	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999224470015635	WITHOUT_CLASSIFICATION	7.755299843654888E-5	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999360452634696	WITHOUT_CLASSIFICATION	6.395473653040197E-5	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999978697395651	WITHOUT_CLASSIFICATION	2.130260434911881E-6	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998859533725988	WITHOUT_CLASSIFICATION	1.1404662740121754E-4	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9994103656584026	WITHOUT_CLASSIFICATION	5.896343415974625E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999991353414597	WITHOUT_CLASSIFICATION	8.646585402672483E-7	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999346963520096	WITHOUT_CLASSIFICATION	6.530364799044911E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999246958686584	WITHOUT_CLASSIFICATION	7.530413134159985E-5	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999991962334199	WITHOUT_CLASSIFICATION	8.037665800042238E-7	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999998888795609	WITHOUT_CLASSIFICATION	1.1112043904264894E-7	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999582377654631	WITHOUT_CLASSIFICATION	4.17622345368548E-5	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999971453729115	WITHOUT_CLASSIFICATION	2.8546270885323612E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999936520963973	WITHOUT_CLASSIFICATION	6.3479036026832455E-6	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999224470015635	WITHOUT_CLASSIFICATION	7.755299843654888E-5	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999978697395651	WITHOUT_CLASSIFICATION	2.130260434911881E-6	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999702148270883	WITHOUT_CLASSIFICATION	2.9785172911661023E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999065409126533	WITHOUT_CLASSIFICATION	9.345908734669043E-5	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999923389992069	WITHOUT_CLASSIFICATION	7.661000793169799E-6	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9987769926913177	WITHOUT_CLASSIFICATION	0.0012230073086822414	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999998010339676	WITHOUT_CLASSIFICATION	1.989660324818014E-7	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999703865779208	WITHOUT_CLASSIFICATION	2.96134220791692E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996512418463531	WITHOUT_CLASSIFICATION	3.4875815364689594E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999139280356438	WITHOUT_CLASSIFICATION	8.607196435611946E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999246958686584	WITHOUT_CLASSIFICATION	7.530413134159985E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999922029553754	WITHOUT_CLASSIFICATION	7.797044624539671E-6	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9999034782288059	WITHOUT_CLASSIFICATION	9.65217711941463E-5	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999976181282657	WITHOUT_CLASSIFICATION	2.381871734376872E-6	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999988188456587	WITHOUT_CLASSIFICATION	1.1811543414278652E-6	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999977793842666	WITHOUT_CLASSIFICATION	2.220615733417342E-6	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999999137376139	WITHOUT_CLASSIFICATION	8.626238610526904E-7	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999993799048487	WITHOUT_CLASSIFICATION	6.200951513425504E-7	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999671060030701	WITHOUT_CLASSIFICATION	3.2893996929848866E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998149659656	WITHOUT_CLASSIFICATION	1.8503403441437578E-7	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991398420518	WITHOUT_CLASSIFICATION	8.601579481132638E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995539525483577	WITHOUT_CLASSIFICATION	0.004460474516422905	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999871722045	WITHOUT_CLASSIFICATION	1.2827795473506226E-8	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9996700103302427	WITHOUT_CLASSIFICATION	3.2998966975718964E-4	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999506297598902	WITHOUT_CLASSIFICATION	4.9370240109757736E-5	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999896289685861	WITHOUT_CLASSIFICATION	1.0371031413753771E-5	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999956051384374	WITHOUT_CLASSIFICATION	4.394861562563603E-6	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9999686414202833	WITHOUT_CLASSIFICATION	3.1358579716680076E-5	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999995681819143	WITHOUT_CLASSIFICATION	4.318180857304954E-7	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999139280356438	WITHOUT_CLASSIFICATION	8.607196435611946E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995539525483577	WITHOUT_CLASSIFICATION	0.004460474516422905	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.999786404691314	WITHOUT_CLASSIFICATION	2.1359530868604435E-4	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9998887527963061	WITHOUT_CLASSIFICATION	1.1124720369394677E-4	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999743934559805	WITHOUT_CLASSIFICATION	2.5606544019420758E-5	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999838995790351	WITHOUT_CLASSIFICATION	1.6100420964978833E-5	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9999718294230808	WITHOUT_CLASSIFICATION	2.8170576919208498E-5	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999995560504849	WITHOUT_CLASSIFICATION	4.4394951513866495E-7	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999575792151202	WITHOUT_CLASSIFICATION	4.242078487978696E-5	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.994896438355535	WITHOUT_CLASSIFICATION	0.0051035616444650295	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999872377832095	WITHOUT_CLASSIFICATION	1.27622167904207E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9960644990974661	WITHOUT_CLASSIFICATION	0.003935500902533914	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.999998832612161	WITHOUT_CLASSIFICATION	1.1673878388888958E-6	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999893446622748	WITHOUT_CLASSIFICATION	1.0655337725119603E-5	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999994266485078	WITHOUT_CLASSIFICATION	5.73351492254211E-7	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9999851560581834	WITHOUT_CLASSIFICATION	1.4843941816616232E-5	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999992292049019	WITHOUT_CLASSIFICATION	7.707950980830796E-7	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999996598021303	WITHOUT_CLASSIFICATION	3.401978696050078E-7	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999902049177406	WITHOUT_CLASSIFICATION	9.795082259461612E-6	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999997730732428	WITHOUT_CLASSIFICATION	2.2692675717867188E-7	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999995805135272	WITHOUT_CLASSIFICATION	4.194864727730302E-7	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999998244293304	WITHOUT_CLASSIFICATION	1.7557066960105063E-6	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9997715927903315	WITHOUT_CLASSIFICATION	2.2840720966842327E-4	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999989257001302	WITHOUT_CLASSIFICATION	1.07429986974952E-6	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999997444932063	WITHOUT_CLASSIFICATION	2.555067937129776E-7	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999997924767036	WITHOUT_CLASSIFICATION	2.0752329640276863E-6	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999990550756199	WITHOUT_CLASSIFICATION	9.449243801040999E-7	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9969550239655792	WITHOUT_CLASSIFICATION	0.0030449760344207696	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999907840697942	WITHOUT_CLASSIFICATION	9.215930205737338E-6	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999728954008143	WITHOUT_CLASSIFICATION	2.710459918570066E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9984681995249435	WITHOUT_CLASSIFICATION	0.0015318004750565707	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8137409455397114	WITHOUT_CLASSIFICATION	0.18625905446028862	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999960045316785	WITHOUT_CLASSIFICATION	3.99546832152084E-6	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999478053792087	WITHOUT_CLASSIFICATION	5.219462079137122E-5	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999982162611434	WITHOUT_CLASSIFICATION	1.7837388566911896E-6	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999981281676574	WITHOUT_CLASSIFICATION	1.8718323425103422E-6	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996676258054108	WITHOUT_CLASSIFICATION	3.3237419458921104E-4	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999989017307471	WITHOUT_CLASSIFICATION	1.0982692528119291E-6	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999996549592782	WITHOUT_CLASSIFICATION	3.4504072170605045E-7	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999601692179484	WITHOUT_CLASSIFICATION	3.9830782051575486E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999989017307471	WITHOUT_CLASSIFICATION	1.0982692528119291E-6	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996676258054108	WITHOUT_CLASSIFICATION	3.3237419458921104E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999996549592782	WITHOUT_CLASSIFICATION	3.4504072170605045E-7	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999986783958836	WITHOUT_CLASSIFICATION	1.3216041164410277E-6	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999997759846129	WITHOUT_CLASSIFICATION	2.2401538702907699E-7	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999307879122915	WITHOUT_CLASSIFICATION	6.921208770853279E-5	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999549616283445	WITHOUT_CLASSIFICATION	4.503837165546673E-5	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999843705386	WITHOUT_CLASSIFICATION	1.5629461410994152E-8	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9557511057376956	WITHOUT_CLASSIFICATION	0.044248894262304335	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999651854027698	WITHOUT_CLASSIFICATION	3.48145972301492E-5	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999067115220647	WITHOUT_CLASSIFICATION	9.32884779352609E-5	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999999962709252	WITHOUT_CLASSIFICATION	3.729074803144051E-8	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999509948957637	WITHOUT_CLASSIFICATION	4.9005104236293156E-5	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.999977624183639	WITHOUT_CLASSIFICATION	2.237581636092972E-5	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999927769665902	WITHOUT_CLASSIFICATION	7.223033409760673E-6	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9991248613894029	WITHOUT_CLASSIFICATION	8.751386105969563E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999549616283445	WITHOUT_CLASSIFICATION	4.503837165546673E-5	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999999548875015	WITHOUT_CLASSIFICATION	4.511249859524494E-8	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999888937539121	WITHOUT_CLASSIFICATION	1.1106246087965455E-5	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999867521067685	WITHOUT_CLASSIFICATION	1.3247893231499737E-4	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999726649926488	WITHOUT_CLASSIFICATION	2.7335007351154802E-5	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999944349384321	WITHOUT_CLASSIFICATION	5.565061567810774E-6	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999999988156002	WITHOUT_CLASSIFICATION	1.1843998000483791E-8	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999945174638006	WITHOUT_CLASSIFICATION	5.482536199336809E-6	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999953039809	WITHOUT_CLASSIFICATION	4.696019164087299E-9	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999438821955299	WITHOUT_CLASSIFICATION	5.61178044701527E-5	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999993107662415	WITHOUT_CLASSIFICATION	6.892337584773711E-7	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999805388933	WITHOUT_CLASSIFICATION	1.9461106692260495E-8	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999805388933	WITHOUT_CLASSIFICATION	1.9461106692260495E-8	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999604801196	WITHOUT_CLASSIFICATION	3.951988032200065E-8	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999604801196	WITHOUT_CLASSIFICATION	3.951988032200065E-8	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9998478146361345	WITHOUT_CLASSIFICATION	1.5218536386554899E-4	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999867521067685	WITHOUT_CLASSIFICATION	1.3247893231499737E-4	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999990657578983	WITHOUT_CLASSIFICATION	9.342421016965491E-7	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999875153858	WITHOUT_CLASSIFICATION	1.2484614208599722E-8	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999797489687	WITHOUT_CLASSIFICATION	2.025103130579012E-8	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999797489687	WITHOUT_CLASSIFICATION	2.025103130579012E-8	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999955476071405	WITHOUT_CLASSIFICATION	4.452392859508861E-6	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999999480828051	WITHOUT_CLASSIFICATION	5.19171948519986E-8	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999765114773	WITHOUT_CLASSIFICATION	2.348852272987874E-8	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999997741479254	WITHOUT_CLASSIFICATION	2.2585207471161605E-7	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9945464191264006	WITHOUT_CLASSIFICATION	0.005453580873599286	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9995916174481894	WITHOUT_CLASSIFICATION	4.083825518106263E-4	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999741279293883	WITHOUT_CLASSIFICATION	2.587207061169615E-5	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999957204307742	WITHOUT_CLASSIFICATION	4.279569225728997E-6	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999806393249887	WITHOUT_CLASSIFICATION	1.936067501125813E-5	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999769771579893	WITHOUT_CLASSIFICATION	2.3022842010695242E-5	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.9999863601222057	WITHOUT_CLASSIFICATION	1.3639877794324045E-5	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9999985047185472	WITHOUT_CLASSIFICATION	1.4952814527250307E-6	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999989099040846	WITHOUT_CLASSIFICATION	1.0900959153938498E-6	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999995458080364	WITHOUT_CLASSIFICATION	4.54191963550123E-7	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999999612126848	WITHOUT_CLASSIFICATION	3.878731523868954E-8	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999998591607537	WITHOUT_CLASSIFICATION	1.4083924625397529E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855962258286	WITHOUT_CLASSIFICATION	1.4403774171367813E-5	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999945735528631	WITHOUT_CLASSIFICATION	5.426447136928103E-6	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999806950765976	WITHOUT_CLASSIFICATION	1.9304923402324585E-5	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999979173252551	WITHOUT_CLASSIFICATION	2.082674744928739E-6	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999989225822923	WITHOUT_CLASSIFICATION	1.0774177076571674E-6	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999973003710947	WITHOUT_CLASSIFICATION	2.699628905353101E-6	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999998702545075	WITHOUT_CLASSIFICATION	1.2974549255083748E-7	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999971545557478	WITHOUT_CLASSIFICATION	2.845444252186333E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9998042328468884	WITHOUT_CLASSIFICATION	1.9576715311163506E-4	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999039351654	WITHOUT_CLASSIFICATION	9.60648346379372E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995539525483577	WITHOUT_CLASSIFICATION	0.004460474516422905	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999893446622748	WITHOUT_CLASSIFICATION	1.0655337725119603E-5	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999930464981116	WITHOUT_CLASSIFICATION	6.9535018883380005E-6	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9990258918252785	WITHOUT_CLASSIFICATION	9.741081747215457E-4	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999460198859763	WITHOUT_CLASSIFICATION	5.3980114023692216E-5	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999454955577299	WITHOUT_CLASSIFICATION	5.45044422700624E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.999978601845782	WITHOUT_CLASSIFICATION	2.139815421801386E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.999978601845782	WITHOUT_CLASSIFICATION	2.139815421801386E-5	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999566215217405	WITHOUT_CLASSIFICATION	4.337847825952148E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999950279946116	WITHOUT_CLASSIFICATION	4.972005388330759E-6	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9997979253588534	WITHOUT_CLASSIFICATION	2.0207464114658713E-4	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9997979253588534	WITHOUT_CLASSIFICATION	2.0207464114658713E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9990867715743995	WITHOUT_CLASSIFICATION	9.132284256004423E-4	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9989908222099043	WITHOUT_CLASSIFICATION	0.0010091777900956141	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9999070965008456	WITHOUT_CLASSIFICATION	9.290349915434237E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999864836088657	WITHOUT_CLASSIFICATION	1.3516391134278502E-5	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999968713124276	WITHOUT_CLASSIFICATION	3.1286875723335747E-6	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999993853004585	WITHOUT_CLASSIFICATION	6.146995414972571E-6	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999932347070373	WITHOUT_CLASSIFICATION	6.765292962843253E-6	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.999999811773861	WITHOUT_CLASSIFICATION	1.8822613899625692E-7	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999265980561111	WITHOUT_CLASSIFICATION	7.340194388887798E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999265980561111	WITHOUT_CLASSIFICATION	7.340194388887798E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999989376034452	WITHOUT_CLASSIFICATION	1.0623965548767888E-6	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999993486585346	WITHOUT_CLASSIFICATION	6.513414654181586E-7	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999993486585346	WITHOUT_CLASSIFICATION	6.513414654181586E-7	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999559094718523	WITHOUT_CLASSIFICATION	4.409052814777902E-5	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999986094895696	WITHOUT_CLASSIFICATION	1.3905104304543798E-6	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9975318614474906	WITHOUT_CLASSIFICATION	0.002468138552509403	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999976397542054	WITHOUT_CLASSIFICATION	2.360245794537903E-6	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.999998837904005	WITHOUT_CLASSIFICATION	1.1620959949347251E-6	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999996654112497	WITHOUT_CLASSIFICATION	3.345887502099342E-7	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999998178527271	WITHOUT_CLASSIFICATION	1.8214727303338314E-7	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999970690118533	WITHOUT_CLASSIFICATION	2.9309881467525485E-6	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999359295664	WITHOUT_CLASSIFICATION	6.407043366752319E-8	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9591086216808394	WITHOUT_CLASSIFICATION	0.04089137831916047	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999955217023446	WITHOUT_CLASSIFICATION	4.478297655331905E-6	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999312583635153	WITHOUT_CLASSIFICATION	6.874163648472884E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999792493464882	WITHOUT_CLASSIFICATION	2.0750653511781907E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999792493464882	WITHOUT_CLASSIFICATION	2.0750653511781907E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999792493464882	WITHOUT_CLASSIFICATION	2.0750653511781907E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999792493464882	WITHOUT_CLASSIFICATION	2.0750653511781907E-5	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999584608321486	WITHOUT_CLASSIFICATION	4.15391678513275E-5	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.6057971144833151	WITHOUT_CLASSIFICATION	0.39420288551668486	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999618193423537	WITHOUT_CLASSIFICATION	3.818065764630706E-5	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999750467352361	WITHOUT_CLASSIFICATION	2.4953264763966163E-5	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999998614246292	WITHOUT_CLASSIFICATION	1.3857537079893335E-6	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9997509882204044	WITHOUT_CLASSIFICATION	2.4901177959558654E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.99999327521872	WITHOUT_CLASSIFICATION	6.72478128006744E-6	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999312908458388	WITHOUT_CLASSIFICATION	6.870915416126703E-5	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999872900519242	WITHOUT_CLASSIFICATION	1.2709948075662346E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.99999327521872	WITHOUT_CLASSIFICATION	6.72478128006744E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.99999327521872	WITHOUT_CLASSIFICATION	6.72478128006744E-6	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999650737731	WITHOUT_CLASSIFICATION	3.4926226965412476E-8	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999994751119722	WITHOUT_CLASSIFICATION	5.248880279118232E-7	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999993054755041	WITHOUT_CLASSIFICATION	6.94524495779048E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.99999523633089	WITHOUT_CLASSIFICATION	4.763669109870004E-6	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999962696092863	WITHOUT_CLASSIFICATION	3.7303907135980815E-6	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999943588011942	WITHOUT_CLASSIFICATION	5.641198805673436E-6	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999992790009605	WITHOUT_CLASSIFICATION	7.209990394764286E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.99999523633089	WITHOUT_CLASSIFICATION	4.763669109870004E-6	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9995332873817457	WITHOUT_CLASSIFICATION	4.6671261825424206E-4	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999995085179438	WITHOUT_CLASSIFICATION	4.914820562005383E-6	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999994793030819	WITHOUT_CLASSIFICATION	5.206969180747138E-7	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999542515999685	WITHOUT_CLASSIFICATION	4.574840003155082E-5	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999523734557301	WITHOUT_CLASSIFICATION	4.762654426989911E-5	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999042796596335	WITHOUT_CLASSIFICATION	9.572034036653721E-5	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999999610467754	WITHOUT_CLASSIFICATION	3.895322459846123E-7	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999931265737695	WITHOUT_CLASSIFICATION	6.873426230568507E-6	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999787849741	WITHOUT_CLASSIFICATION	2.12150259143334E-7	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999992549284618	WITHOUT_CLASSIFICATION	7.450715383457708E-7	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998814979253	WITHOUT_CLASSIFICATION	1.1850207475527922E-7	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999995623406346	WITHOUT_CLASSIFICATION	4.3765936541934567E-7	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9988645767896815	WITHOUT_CLASSIFICATION	0.0011354232103184194	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998614179718327	WITHOUT_CLASSIFICATION	1.3858202816722696E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999922618533047	WITHOUT_CLASSIFICATION	7.738146695313358E-6	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999965158213143	WITHOUT_CLASSIFICATION	3.4841786856463968E-6	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998471592153	WITHOUT_CLASSIFICATION	1.5284078470367262E-7	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999946634053143	WITHOUT_CLASSIFICATION	5.336594685720688E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999353793957	WITHOUT_CLASSIFICATION	6.462060430856463E-8	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999946634053143	WITHOUT_CLASSIFICATION	5.336594685720688E-6	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999979455291886	WITHOUT_CLASSIFICATION	2.0544708114226496E-6	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999933723802296	WITHOUT_CLASSIFICATION	6.627619770401962E-6	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999969271676555	WITHOUT_CLASSIFICATION	3.072832344444407E-6	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9996526874720061	WITHOUT_CLASSIFICATION	3.473125279939613E-4	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999998735626127	WITHOUT_CLASSIFICATION	1.2643738733143058E-7	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999971770540387	WITHOUT_CLASSIFICATION	2.8229459613435704E-6	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999977506057669	WITHOUT_CLASSIFICATION	2.2493942331143763E-6	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998471592153	WITHOUT_CLASSIFICATION	1.5284078470367262E-7	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999353793957	WITHOUT_CLASSIFICATION	6.462060430856463E-8	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999979455291886	WITHOUT_CLASSIFICATION	2.0544708114226496E-6	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999996439572758	WITHOUT_CLASSIFICATION	3.5604272414095627E-7	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999741395626609	WITHOUT_CLASSIFICATION	2.5860437339057214E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9999944535916475	WITHOUT_CLASSIFICATION	5.5464083525260995E-6	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999442758649119	WITHOUT_CLASSIFICATION	5.572413508825861E-5	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9999906438953495	WITHOUT_CLASSIFICATION	9.356104650501531E-6	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9907811666116056	WITHOUT_CLASSIFICATION	0.009218833388394292	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999998723558379	WITHOUT_CLASSIFICATION	1.2764416210040134E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855962258286	WITHOUT_CLASSIFICATION	1.4403774171367813E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999933723802296	WITHOUT_CLASSIFICATION	6.627619770401962E-6	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999989398054477	WITHOUT_CLASSIFICATION	1.060194552190286E-6	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999216052458646	WITHOUT_CLASSIFICATION	7.839475413536435E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999632317477945	WITHOUT_CLASSIFICATION	3.6768252205499833E-4	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999983679278128	WITHOUT_CLASSIFICATION	1.6320721870966782E-6	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855962258286	WITHOUT_CLASSIFICATION	1.4403774171367813E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995539525483577	WITHOUT_CLASSIFICATION	0.004460474516422905	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999761384265	WITHOUT_CLASSIFICATION	2.3861573500254676E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855962258286	WITHOUT_CLASSIFICATION	1.4403774171367813E-5	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999933669059	WITHOUT_CLASSIFICATION	6.633094073236972E-9	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999931740409614	WITHOUT_CLASSIFICATION	6.825959038521964E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995539525483577	WITHOUT_CLASSIFICATION	0.004460474516422905	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998566904330427	WITHOUT_CLASSIFICATION	1.4330956695728482E-4	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999991338658543	WITHOUT_CLASSIFICATION	8.661341457108749E-7	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996986314945	WITHOUT_CLASSIFICATION	3.0136850540890953E-7	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9999918987200958	WITHOUT_CLASSIFICATION	8.101279904252158E-6	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999890100932468	WITHOUT_CLASSIFICATION	1.0989906753080747E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999964585224745	WITHOUT_CLASSIFICATION	3.5414775254972994E-5	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999987659804375	WITHOUT_CLASSIFICATION	1.2340195625328021E-6	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999974638030406	WITHOUT_CLASSIFICATION	2.5361969593120305E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997307948743954	WITHOUT_CLASSIFICATION	2.692051256045616E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999997233241645	WITHOUT_CLASSIFICATION	2.7667583543133236E-7	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9975318614474906	WITHOUT_CLASSIFICATION	0.002468138552509403	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999916251582608	WITHOUT_CLASSIFICATION	8.374841739192001E-6	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9357829023346665	WITHOUT_CLASSIFICATION	0.06421709766533348	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.999999047969684	WITHOUT_CLASSIFICATION	9.52030315917498E-7	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999618923896174	WITHOUT_CLASSIFICATION	3.810761038264137E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999954339521739	WITHOUT_CLASSIFICATION	4.566047826018483E-6	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999997044088945	WITHOUT_CLASSIFICATION	2.9559110550161905E-7	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9994500389086437	WITHOUT_CLASSIFICATION	5.499610913562283E-4	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999985913302766	WITHOUT_CLASSIFICATION	1.408669723393222E-6	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999995388401205	WITHOUT_CLASSIFICATION	4.6115987943982707E-7	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999851857316493	WITHOUT_CLASSIFICATION	1.481426835062315E-5	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9974037975083081	WITHOUT_CLASSIFICATION	0.0025962024916919937	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999449942849267	WITHOUT_CLASSIFICATION	5.500571507321266E-5	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999807321116894	WITHOUT_CLASSIFICATION	1.9267888310668723E-5	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999026078148	WITHOUT_CLASSIFICATION	9.739218519057951E-8	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999991289130626	WITHOUT_CLASSIFICATION	8.710869373374535E-7	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9998933610271968	WITHOUT_CLASSIFICATION	1.0663897280312578E-4	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999743182477758	WITHOUT_CLASSIFICATION	2.568175222407693E-5	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999989572321754	WITHOUT_CLASSIFICATION	1.0427678246571997E-6	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999992726070814	WITHOUT_CLASSIFICATION	7.273929184615282E-7	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999993131297256	WITHOUT_CLASSIFICATION	6.868702744536742E-7	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9969669857601314	WITHOUT_CLASSIFICATION	0.003033014239868563	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.998490652410606	WITHOUT_CLASSIFICATION	0.001509347589394075	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997251715618	WITHOUT_CLASSIFICATION	2.748284382816812E-7	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999862979271702	WITHOUT_CLASSIFICATION	1.3702072829713896E-5	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999996804956084	WITHOUT_CLASSIFICATION	3.195043915978821E-7	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999232264144338	WITHOUT_CLASSIFICATION	7.677358556620266E-5	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9996625849628548	WITHOUT_CLASSIFICATION	3.374150371452101E-4	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9871259005324674	WITHOUT_CLASSIFICATION	0.012874099467532528	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999984413624622	WITHOUT_CLASSIFICATION	1.5586375378245238E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995539525483577	WITHOUT_CLASSIFICATION	0.004460474516422905	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999910637752423	WITHOUT_CLASSIFICATION	8.936224757741366E-6	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999780259011174	WITHOUT_CLASSIFICATION	2.197409888261647E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999780259011174	WITHOUT_CLASSIFICATION	2.197409888261647E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9998876824611763	WITHOUT_CLASSIFICATION	1.1231753882366253E-4	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999964585224745	WITHOUT_CLASSIFICATION	3.5414775254972994E-5	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9991488704912004	WITHOUT_CLASSIFICATION	8.511295087996853E-4	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999176361679	WITHOUT_CLASSIFICATION	8.236383200955483E-8	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999827155616579	WITHOUT_CLASSIFICATION	1.7284438342105395E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999743739811591	WITHOUT_CLASSIFICATION	2.5626018840970605E-5	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9999906568401526	WITHOUT_CLASSIFICATION	9.343159847361627E-6	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999021930822658	WITHOUT_CLASSIFICATION	9.780691773428388E-5	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999729011019804	WITHOUT_CLASSIFICATION	2.7098898019451532E-5	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.99999997331408	WITHOUT_CLASSIFICATION	2.6685920095430338E-8	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999899644528237	WITHOUT_CLASSIFICATION	1.0035547176277071E-5	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999985865545372	WITHOUT_CLASSIFICATION	1.413445462761441E-6	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.999999239388704	WITHOUT_CLASSIFICATION	7.606112960553924E-7	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999898731355	WITHOUT_CLASSIFICATION	1.0126864492645036E-8	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999998246717086	WITHOUT_CLASSIFICATION	1.753282913885075E-7	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999975078720678	WITHOUT_CLASSIFICATION	2.492127932187111E-6	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999992522435617	WITHOUT_CLASSIFICATION	7.47756438310839E-7	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999996805879984	WITHOUT_CLASSIFICATION	3.1941200158374925E-7	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999701785425	WITHOUT_CLASSIFICATION	2.9821457545547593E-8	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999942415684124	WITHOUT_CLASSIFICATION	5.7584315875206865E-6	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999939312786696	WITHOUT_CLASSIFICATION	6.0687213302983615E-6	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999945026929826	WITHOUT_CLASSIFICATION	5.4973070173949093E-5	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999981361035505	WITHOUT_CLASSIFICATION	1.8638964496434473E-6	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999947053574794	WITHOUT_CLASSIFICATION	5.294642520596362E-6	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9871259005324674	WITHOUT_CLASSIFICATION	0.012874099467532528	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999972624762363	WITHOUT_CLASSIFICATION	2.7375237636105028E-6	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999983454725595	WITHOUT_CLASSIFICATION	1.6545274404886605E-6	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999986329373352	WITHOUT_CLASSIFICATION	1.3670626648617125E-6	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999990271381121	WITHOUT_CLASSIFICATION	9.728618879683899E-7	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9972071204975826	WITHOUT_CLASSIFICATION	0.002792879502417348	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999871630141444	WITHOUT_CLASSIFICATION	1.2836985855562649E-5	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999790528558202	WITHOUT_CLASSIFICATION	2.0947144179740915E-5	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999998571423501	WITHOUT_CLASSIFICATION	1.4285764990670792E-6	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999998748576061	WITHOUT_CLASSIFICATION	1.2514239389672693E-6	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999932924267	WITHOUT_CLASSIFICATION	6.7075733454116466E-9	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999989817819633	WITHOUT_CLASSIFICATION	1.0182180367490897E-6	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999984287416849	WITHOUT_CLASSIFICATION	1.5712583151975238E-6	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999798824073197	WITHOUT_CLASSIFICATION	2.011759268026029E-5	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9994588510698408	WITHOUT_CLASSIFICATION	5.41148930159098E-4	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9996233109658856	WITHOUT_CLASSIFICATION	3.766890341143585E-4	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999995689058634	WITHOUT_CLASSIFICATION	4.310941365986294E-6	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999995689058634	WITHOUT_CLASSIFICATION	4.310941365986294E-6	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999669534455251	WITHOUT_CLASSIFICATION	3.304655447483352E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999680398298	WITHOUT_CLASSIFICATION	3.1960170232719143E-8	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998874905719088	WITHOUT_CLASSIFICATION	1.1250942809120492E-4	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998874905719088	WITHOUT_CLASSIFICATION	1.1250942809120492E-4	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999999324366805	WITHOUT_CLASSIFICATION	6.7563319387006E-8	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999653035587984	WITHOUT_CLASSIFICATION	3.4696441201479276E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999946008908639	WITHOUT_CLASSIFICATION	5.399109136081029E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999697054754	WITHOUT_CLASSIFICATION	3.0294524434462265E-8	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.99995685951229	WITHOUT_CLASSIFICATION	4.3140487710002914E-5	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999919350631377	WITHOUT_CLASSIFICATION	8.064936862376115E-6	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999992307927781	WITHOUT_CLASSIFICATION	7.692072219487401E-7	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999992307927781	WITHOUT_CLASSIFICATION	7.692072219487401E-7	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999971215703812	WITHOUT_CLASSIFICATION	2.8784296187981273E-6	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999995475327357	WITHOUT_CLASSIFICATION	4.5246726435656286E-7	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.999999470320422	WITHOUT_CLASSIFICATION	5.296795780109354E-7	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999752569244024	WITHOUT_CLASSIFICATION	2.4743075597685413E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999752569244024	WITHOUT_CLASSIFICATION	2.4743075597685413E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9999980921141727	WITHOUT_CLASSIFICATION	1.9078858273463974E-6	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999918058925366	WITHOUT_CLASSIFICATION	8.194107463417305E-6	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998715039610715	WITHOUT_CLASSIFICATION	1.2849603892842976E-4	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999999277355635	WITHOUT_CLASSIFICATION	7.226443659542944E-8	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999430476894596	WITHOUT_CLASSIFICATION	5.6952310540366946E-5	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999991193018476	WITHOUT_CLASSIFICATION	8.806981523222401E-7	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999924853618407	WITHOUT_CLASSIFICATION	7.51463815937617E-6	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.999998600210288	WITHOUT_CLASSIFICATION	1.399789712005042E-6	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999998783298867	WITHOUT_CLASSIFICATION	1.216701132809293E-7	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999929104834235	WITHOUT_CLASSIFICATION	7.089516576446199E-6	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999946000628	WITHOUT_CLASSIFICATION	5.399937180004874E-9	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.999844136389786	WITHOUT_CLASSIFICATION	1.5586361021411004E-4	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999987526493554	WITHOUT_CLASSIFICATION	1.2473506445955677E-6	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9989309315365517	WITHOUT_CLASSIFICATION	0.0010690684634483613	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.999998291905305	WITHOUT_CLASSIFICATION	1.7080946950350552E-6	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999919742593356	WITHOUT_CLASSIFICATION	8.025740664479879E-6	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999054208295	WITHOUT_CLASSIFICATION	9.457917057996069E-8	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999671001858719	WITHOUT_CLASSIFICATION	3.289981412816658E-5	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999307123874975	WITHOUT_CLASSIFICATION	6.928761250245956E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999937060745329	WITHOUT_CLASSIFICATION	6.293925467108358E-5	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9993209561430775	WITHOUT_CLASSIFICATION	6.790438569225497E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999220541633155	WITHOUT_CLASSIFICATION	7.794583668451589E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999889734308937	WITHOUT_CLASSIFICATION	1.1026569106398315E-5	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999967215546317	WITHOUT_CLASSIFICATION	3.2784453683042475E-6	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999978067082914	WITHOUT_CLASSIFICATION	2.193291708580078E-6	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999944373135575	WITHOUT_CLASSIFICATION	5.562686442480098E-6	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999970366051717	WITHOUT_CLASSIFICATION	2.963394828368535E-6	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999275266095792	WITHOUT_CLASSIFICATION	7.247339042075606E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999988138297	WITHOUT_CLASSIFICATION	1.1861702909590747E-8	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999993846324096	WITHOUT_CLASSIFICATION	6.153675904241347E-7	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9978430493610494	WITHOUT_CLASSIFICATION	0.0021569506389506952	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999994279229494	WITHOUT_CLASSIFICATION	5.72077050635405E-7	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999989869981883	WITHOUT_CLASSIFICATION	1.0130018116550453E-6	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.999903175896053	WITHOUT_CLASSIFICATION	9.682410394688119E-5	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999983994061846	WITHOUT_CLASSIFICATION	1.6005938153428837E-6	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998627504501343	WITHOUT_CLASSIFICATION	1.3724954986570298E-4	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9999933214379765	WITHOUT_CLASSIFICATION	6.67856202355849E-6	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999977850354952	WITHOUT_CLASSIFICATION	2.214964504884719E-6	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999997406391836	WITHOUT_CLASSIFICATION	2.593608164098251E-7	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999985453656681	WITHOUT_CLASSIFICATION	1.4546343319544286E-6	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9995393932619936	WITHOUT_CLASSIFICATION	4.60606738006412E-4	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9989898187828955	WITHOUT_CLASSIFICATION	0.001010181217104459	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9999923794611799	WITHOUT_CLASSIFICATION	7.620538819990927E-6	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999995313822275	WITHOUT_CLASSIFICATION	4.6861777253329103E-7	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999978116073602	WITHOUT_CLASSIFICATION	2.1883926396974496E-6	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999918391187275	WITHOUT_CLASSIFICATION	8.160881272498637E-6	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.99654355755827	WITHOUT_CLASSIFICATION	0.003456442441730097	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999759615048819	WITHOUT_CLASSIFICATION	2.4038495118122356E-5	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999938278166628	WITHOUT_CLASSIFICATION	6.172183337213314E-6	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999994918999053	WITHOUT_CLASSIFICATION	5.08100094713349E-7	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9968278455449785	WITHOUT_CLASSIFICATION	0.003172154455021566	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999989070927221	WITHOUT_CLASSIFICATION	1.0929072779047044E-6	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999996434541581	WITHOUT_CLASSIFICATION	3.5654584191860326E-7	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999261958122	WITHOUT_CLASSIFICATION	7.380418770520672E-8	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9998097908265428	WITHOUT_CLASSIFICATION	1.9020917345720522E-4	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999966847934649	WITHOUT_CLASSIFICATION	3.3152065351565327E-6	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9992790266632149	WITHOUT_CLASSIFICATION	7.209733367852094E-4	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999980814103162	WITHOUT_CLASSIFICATION	1.9185896838352063E-6	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9990135260798221	WITHOUT_CLASSIFICATION	9.864739201779376E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9997489503727753	WITHOUT_CLASSIFICATION	2.510496272246735E-4	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999672195388477	WITHOUT_CLASSIFICATION	3.278046115219981E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999672195388477	WITHOUT_CLASSIFICATION	3.278046115219981E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999888915988	WITHOUT_CLASSIFICATION	1.1108401273617748E-8	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999990469486061	WITHOUT_CLASSIFICATION	9.530513938763295E-7	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999961810149	WITHOUT_CLASSIFICATION	3.818985132405776E-9	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999999946551795	WITHOUT_CLASSIFICATION	5.344820506058426E-8	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999019244326605	WITHOUT_CLASSIFICATION	9.807556733953643E-5	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999988022003705	WITHOUT_CLASSIFICATION	1.1977996294343062E-6	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999758479389	WITHOUT_CLASSIFICATION	2.4152061049613704E-8	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999998342498552	WITHOUT_CLASSIFICATION	1.657501448732864E-7	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999934477580733	WITHOUT_CLASSIFICATION	6.552241926706825E-6	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.999991737993668	WITHOUT_CLASSIFICATION	8.262006331901344E-6	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999958003097488	WITHOUT_CLASSIFICATION	4.199690251268205E-6	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999335832329322	WITHOUT_CLASSIFICATION	6.641676706783833E-5	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999755548228506	WITHOUT_CLASSIFICATION	2.4445177149373435E-5	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999979884808	WITHOUT_CLASSIFICATION	2.011519173487078E-9	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999696801123	WITHOUT_CLASSIFICATION	3.031988770821969E-7	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999696801123	WITHOUT_CLASSIFICATION	3.031988770821969E-7	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999991779732684	WITHOUT_CLASSIFICATION	8.22026731529817E-7	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9993123594651971	WITHOUT_CLASSIFICATION	6.876405348029033E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999300351503	WITHOUT_CLASSIFICATION	6.996484968016706E-8	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999998747009993	WITHOUT_CLASSIFICATION	1.2529900074420565E-7	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996703553711	WITHOUT_CLASSIFICATION	3.2964462898194347E-7	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903912599869	WITHOUT_CLASSIFICATION	9.608740013062174E-6	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999833902278	WITHOUT_CLASSIFICATION	1.6609772244871866E-8	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9999519757740878	WITHOUT_CLASSIFICATION	4.802422591211677E-5	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9911405577578537	WITHOUT_CLASSIFICATION	0.008859442242146288	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999983274127	WITHOUT_CLASSIFICATION	1.6725872633149254E-9	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999974755593464	WITHOUT_CLASSIFICATION	2.5244406536412695E-6	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999743915349	WITHOUT_CLASSIFICATION	2.560846515637891E-8	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999990414061999	WITHOUT_CLASSIFICATION	9.585938001573442E-7	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999977132692378	WITHOUT_CLASSIFICATION	2.2867307620750938E-6	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999996410624373	WITHOUT_CLASSIFICATION	3.5893756277781776E-7	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.999995833560871	WITHOUT_CLASSIFICATION	4.166439129014669E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999853036300069	WITHOUT_CLASSIFICATION	1.4696369993009302E-5	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9993553023822571	WITHOUT_CLASSIFICATION	6.44697617742893E-4	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999972617949032	WITHOUT_CLASSIFICATION	2.73820509677545E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9998620320594022	WITHOUT_CLASSIFICATION	1.379679405977647E-4	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999534629973	WITHOUT_CLASSIFICATION	4.6537002764822843E-8	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999998918043866	WITHOUT_CLASSIFICATION	1.081956133531172E-7	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999678612508064	WITHOUT_CLASSIFICATION	3.213874919355233E-5	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998385597827	WITHOUT_CLASSIFICATION	1.61440217308619E-7	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999996365861853	WITHOUT_CLASSIFICATION	3.6341381470810156E-7	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9999974694428558	WITHOUT_CLASSIFICATION	2.5305571442631866E-6	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9917295547321303	WITHOUT_CLASSIFICATION	0.008270445267869651	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999980442607657	WITHOUT_CLASSIFICATION	1.955739234379434E-6	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999986794491594	WITHOUT_CLASSIFICATION	1.3205508406020945E-5	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9995987940677151	WITHOUT_CLASSIFICATION	4.01205932284899E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999987196687415	WITHOUT_CLASSIFICATION	1.2803312585087135E-6	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999997029924933	WITHOUT_CLASSIFICATION	2.970075066804533E-7	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999408598752496	WITHOUT_CLASSIFICATION	5.914012475029903E-5	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999998626755857	WITHOUT_CLASSIFICATION	1.3732441418440062E-7	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999972746757	WITHOUT_CLASSIFICATION	2.7253241697282865E-9	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999666674219785	WITHOUT_CLASSIFICATION	3.333257802161645E-5	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999990037594709	WITHOUT_CLASSIFICATION	9.962405290803566E-7	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999934088850222	WITHOUT_CLASSIFICATION	6.591114977792813E-6	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998301467736	WITHOUT_CLASSIFICATION	1.6985322643599457E-7	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999988258518852	WITHOUT_CLASSIFICATION	1.1741481148246664E-6	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9833683331445848	WITHOUT_CLASSIFICATION	0.01663166685541518	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999284158100611	WITHOUT_CLASSIFICATION	7.15841899389008E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9983382158965787	WITHOUT_CLASSIFICATION	0.0016617841034213135	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9983382158965787	WITHOUT_CLASSIFICATION	0.0016617841034213135	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999524667438	WITHOUT_CLASSIFICATION	4.753325617237064E-8	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9994664963435905	WITHOUT_CLASSIFICATION	5.335036564095314E-4	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999871054789597	WITHOUT_CLASSIFICATION	1.2894521040135554E-5	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998227962317892	WITHOUT_CLASSIFICATION	1.7720376821090813E-4	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999977882363122	WITHOUT_CLASSIFICATION	2.2117636876968513E-6	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999993504727206	WITHOUT_CLASSIFICATION	6.495272793618289E-7	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9996202133805175	WITHOUT_CLASSIFICATION	3.797866194824251E-4	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999998940047848	WITHOUT_CLASSIFICATION	1.0599521516194589E-7	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.997310932541086	WITHOUT_CLASSIFICATION	0.002689067458914002	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962252268535	WITHOUT_CLASSIFICATION	3.77477314652099E-6	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990939243629	WITHOUT_CLASSIFICATION	9.060756371469831E-7	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999978186081281	WITHOUT_CLASSIFICATION	2.1813918719414808E-6	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999985355671499	WITHOUT_CLASSIFICATION	1.464432850099382E-6	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.999998493026949	WITHOUT_CLASSIFICATION	1.506973051056679E-6	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999360876749083	WITHOUT_CLASSIFICATION	6.391232509174223E-5	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999869486022225	WITHOUT_CLASSIFICATION	1.3051397777423926E-5	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.997181653815273	WITHOUT_CLASSIFICATION	0.002818346184726961	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999261580556482	WITHOUT_CLASSIFICATION	7.384194435177585E-5	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999995937883941	WITHOUT_CLASSIFICATION	4.062116060271333E-7	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9985399907109089	WITHOUT_CLASSIFICATION	0.0014600092890911071	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999994347488995	WITHOUT_CLASSIFICATION	5.652511004894179E-7	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9933898797442984	WITHOUT_CLASSIFICATION	0.006610120255701695	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9991958713337332	WITHOUT_CLASSIFICATION	8.041286662667368E-4	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999942293913	WITHOUT_CLASSIFICATION	5.770608579369952E-9	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999993788795608	WITHOUT_CLASSIFICATION	6.21120439136063E-7	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9998740411529341	WITHOUT_CLASSIFICATION	1.2595884706584053E-4	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998056772343192	WITHOUT_CLASSIFICATION	1.9432276568073878E-4	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999708940201855	WITHOUT_CLASSIFICATION	2.910597981461227E-5	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999995053152494	WITHOUT_CLASSIFICATION	4.946847505990587E-7	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999742421047606	WITHOUT_CLASSIFICATION	2.5757895239382596E-5	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999013985909172	WITHOUT_CLASSIFICATION	9.860140908286825E-5	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999963426542668	WITHOUT_CLASSIFICATION	3.6573457332531264E-6	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999813990218152	WITHOUT_CLASSIFICATION	1.8600978184816704E-5	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999987682424359	WITHOUT_CLASSIFICATION	1.2317575640542474E-6	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999881910466576	WITHOUT_CLASSIFICATION	1.1808953342428386E-5	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999898881846	WITHOUT_CLASSIFICATION	1.0111815378314023E-8	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999848320210073	WITHOUT_CLASSIFICATION	1.5167978992726837E-5	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999998727551735	WITHOUT_CLASSIFICATION	1.2724482636569242E-7	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.999998098992114	WITHOUT_CLASSIFICATION	1.9010078860290665E-6	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999624446256	WITHOUT_CLASSIFICATION	3.755537447894674E-8	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999987689376456	WITHOUT_CLASSIFICATION	1.2310623543983704E-6	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999897919124803	WITHOUT_CLASSIFICATION	1.0208087519722707E-5	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999996191940966	WITHOUT_CLASSIFICATION	3.8080590332694465E-7	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9994623500231719	WITHOUT_CLASSIFICATION	5.376499768281233E-4	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999955202955699	WITHOUT_CLASSIFICATION	4.479704430058057E-6	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999996243548532	WITHOUT_CLASSIFICATION	3.7564514681890963E-7	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999967292333	WITHOUT_CLASSIFICATION	3.2707667713250976E-9	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9992573710250088	WITHOUT_CLASSIFICATION	7.426289749912593E-4	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.999999683326113	WITHOUT_CLASSIFICATION	3.1667388692147195E-7	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999755548228506	WITHOUT_CLASSIFICATION	2.4445177149373435E-5	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.999980492844293	WITHOUT_CLASSIFICATION	1.9507155707066145E-5	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999988828422	WITHOUT_CLASSIFICATION	1.1171577952349922E-8	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999602616520723	WITHOUT_CLASSIFICATION	3.973834792776155E-5	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999981339436161	WITHOUT_CLASSIFICATION	1.8660563838226304E-6	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999981219221	WITHOUT_CLASSIFICATION	1.8780779479483782E-9	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999855275534522	WITHOUT_CLASSIFICATION	1.4472446547923677E-5	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999718631541915	WITHOUT_CLASSIFICATION	2.813684580855017E-5	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9993834698074652	WITHOUT_CLASSIFICATION	6.165301925347615E-4	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999993712317523	WITHOUT_CLASSIFICATION	6.287682477020551E-7	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9998504465497778	WITHOUT_CLASSIFICATION	1.495534502221954E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999979149430961	WITHOUT_CLASSIFICATION	2.0850569038874493E-6	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9991735680043603	WITHOUT_CLASSIFICATION	8.264319956395807E-4	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999912264703796	WITHOUT_CLASSIFICATION	8.773529620238325E-6	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999907326111398	WITHOUT_CLASSIFICATION	9.26738886026991E-6	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998744421718	WITHOUT_CLASSIFICATION	1.2555782821433547E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993993497143	WITHOUT_CLASSIFICATION	6.006502856112536E-7	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999934573469346	WITHOUT_CLASSIFICATION	6.542653065531564E-6	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999955068964124	WITHOUT_CLASSIFICATION	4.4931035875291E-6	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999768412485	WITHOUT_CLASSIFICATION	2.3158751478788023E-8	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9996356179946532	WITHOUT_CLASSIFICATION	3.643820053467908E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993993497143	WITHOUT_CLASSIFICATION	6.006502856112536E-7	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9987450263460385	WITHOUT_CLASSIFICATION	0.0012549736539615476	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9996042029446481	WITHOUT_CLASSIFICATION	3.957970553518681E-4	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999939427372	WITHOUT_CLASSIFICATION	6.057262869742164E-9	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999997944339021	WITHOUT_CLASSIFICATION	2.0556609783135274E-7	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999998692598961	WITHOUT_CLASSIFICATION	1.3074010381883095E-7	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998063846617298	WITHOUT_CLASSIFICATION	1.9361533827017897E-4	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999992923023	WITHOUT_CLASSIFICATION	7.076975569548363E-10	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9979236744431031	WITHOUT_CLASSIFICATION	0.002076325556896954	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999356180372	WITHOUT_CLASSIFICATION	6.438196285186976E-8	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9985821854621476	WITHOUT_CLASSIFICATION	0.0014178145378523313	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999991147183306	WITHOUT_CLASSIFICATION	8.852816694044653E-6	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999720843594274	WITHOUT_CLASSIFICATION	2.791564057257167E-5	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.999975576186011	WITHOUT_CLASSIFICATION	2.4423813989009642E-5	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999999644122911	WITHOUT_CLASSIFICATION	3.558770890093687E-8	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999990598169859	WITHOUT_CLASSIFICATION	9.401830141353957E-7	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9995197651760509	WITHOUT_CLASSIFICATION	4.802348239490613E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999947053574794	WITHOUT_CLASSIFICATION	5.294642520596362E-6	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999867875845	WITHOUT_CLASSIFICATION	1.3212415537692896E-8	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999997971409249	WITHOUT_CLASSIFICATION	2.0285907508871064E-7	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999995352095811	WITHOUT_CLASSIFICATION	4.647904188981865E-6	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9994309393583081	WITHOUT_CLASSIFICATION	5.690606416919852E-4	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.999999994539033	WITHOUT_CLASSIFICATION	5.460966902120021E-9	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999979833357283	WITHOUT_CLASSIFICATION	2.0166642717855767E-6	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999896807869606	WITHOUT_CLASSIFICATION	1.0319213039337897E-5	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999999869356	WITHOUT_CLASSIFICATION	1.306441788160705E-10	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.999999888351359	WITHOUT_CLASSIFICATION	1.1164864112074877E-7	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999718401243505	WITHOUT_CLASSIFICATION	2.8159875649526812E-5	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.997638765935566	WITHOUT_CLASSIFICATION	0.002361234064433943	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999995622307515	WITHOUT_CLASSIFICATION	4.377692485755981E-7	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999999414324647	WITHOUT_CLASSIFICATION	5.8567535245231695E-8	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.6801126696402627	WITHOUT_CLASSIFICATION	0.31988733035973727	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999990074300197	WITHOUT_CLASSIFICATION	9.92569980368786E-7	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999579505213727	WITHOUT_CLASSIFICATION	4.204947862731099E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9963381113543864	WITHOUT_CLASSIFICATION	0.0036618886456134814	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999934541447567	WITHOUT_CLASSIFICATION	6.545855243382758E-6	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999978503793	WITHOUT_CLASSIFICATION	2.1496207418725043E-9	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999974188262	WITHOUT_CLASSIFICATION	2.581173806856867E-9	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999506382545	WITHOUT_CLASSIFICATION	4.936174541630318E-8	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999987285148261	WITHOUT_CLASSIFICATION	1.271485173962981E-6	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999998943103625	WITHOUT_CLASSIFICATION	1.0568963742294863E-7	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999092310963397	WITHOUT_CLASSIFICATION	9.07689036603394E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999986965122609	WITHOUT_CLASSIFICATION	1.3034877390591595E-6	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999986965122609	WITHOUT_CLASSIFICATION	1.3034877390591595E-6	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999168957468099	WITHOUT_CLASSIFICATION	8.310425319007928E-5	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999854564227794	WITHOUT_CLASSIFICATION	1.4543577220617808E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998306452514	WITHOUT_CLASSIFICATION	1.6935474858308253E-7	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.999997876278443	WITHOUT_CLASSIFICATION	2.1237215569591673E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999864836088657	WITHOUT_CLASSIFICATION	1.3516391134278502E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999864836088657	WITHOUT_CLASSIFICATION	1.3516391134278502E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9998831386896406	WITHOUT_CLASSIFICATION	1.1686131035937487E-4	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.999999997223035	WITHOUT_CLASSIFICATION	2.776965052083188E-9	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999962153713207	WITHOUT_CLASSIFICATION	3.7846286794272016E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999680132476	WITHOUT_CLASSIFICATION	3.198675240295405E-7	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999986041194734	WITHOUT_CLASSIFICATION	1.3958805266103765E-6	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999900984003087	WITHOUT_CLASSIFICATION	9.901599691192374E-6	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999989919167434	WITHOUT_CLASSIFICATION	1.0080832566768102E-6	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999357598685121	WITHOUT_CLASSIFICATION	6.424013148788028E-5	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999900339691749	WITHOUT_CLASSIFICATION	9.966030825204376E-6	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999998958616918	WITHOUT_CLASSIFICATION	1.041383082105274E-7	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999908623875937	WITHOUT_CLASSIFICATION	9.13761240626005E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993459330603	WITHOUT_CLASSIFICATION	6.540669396774324E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993459330603	WITHOUT_CLASSIFICATION	6.540669396774324E-7	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999961368624	WITHOUT_CLASSIFICATION	3.863137666494343E-9	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999246958686584	WITHOUT_CLASSIFICATION	7.530413134159985E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999991353414597	WITHOUT_CLASSIFICATION	8.646585402672483E-7	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999998684432512	WITHOUT_CLASSIFICATION	1.315567489064265E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995539525483577	WITHOUT_CLASSIFICATION	0.004460474516422905	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999990794796599	WITHOUT_CLASSIFICATION	9.205203400847577E-7	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991398420518	WITHOUT_CLASSIFICATION	8.601579481132638E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995539525483577	WITHOUT_CLASSIFICATION	0.004460474516422905	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998637013824	WITHOUT_CLASSIFICATION	1.3629861764976322E-7	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998876203880984	WITHOUT_CLASSIFICATION	1.1237961190167351E-4	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999993478759521	WITHOUT_CLASSIFICATION	6.521240478308928E-7	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999419747688	WITHOUT_CLASSIFICATION	5.802523122111923E-8	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9985821854621476	WITHOUT_CLASSIFICATION	0.0014178145378523313	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.99999603860184	WITHOUT_CLASSIFICATION	3.961398159962161E-6	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.998848244664907	WITHOUT_CLASSIFICATION	0.0011517553350930225	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999916503501161	WITHOUT_CLASSIFICATION	8.34964988400591E-6	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999999643157287	WITHOUT_CLASSIFICATION	3.5684271354822784E-8	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999989642267638	WITHOUT_CLASSIFICATION	1.0357732362545086E-6	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999999478052751	WITHOUT_CLASSIFICATION	5.219472489089858E-7	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999976750129046	WITHOUT_CLASSIFICATION	2.3249870954378496E-6	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999999929148382	WITHOUT_CLASSIFICATION	7.085161802984967E-9	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999910162725308	WITHOUT_CLASSIFICATION	8.98372746927669E-6	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9982800685697866	WITHOUT_CLASSIFICATION	0.0017199314302134313	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9982800685697866	WITHOUT_CLASSIFICATION	0.0017199314302134313	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.99999523633089	WITHOUT_CLASSIFICATION	4.763669109870004E-6	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999860981946	WITHOUT_CLASSIFICATION	1.3901805400617871E-8	DEFECT
package	WITHOUT_CLASSIFICATION	0.99999327521872	WITHOUT_CLASSIFICATION	6.72478128006744E-6	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999973404768867	WITHOUT_CLASSIFICATION	2.659523113284383E-6	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999974327573752	WITHOUT_CLASSIFICATION	2.5672426249073855E-6	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999124553108	WITHOUT_CLASSIFICATION	8.754468907671407E-8	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999922618533047	WITHOUT_CLASSIFICATION	7.738146695313358E-6	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9998364593549515	WITHOUT_CLASSIFICATION	1.6354064504851492E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999996439572758	WITHOUT_CLASSIFICATION	3.5604272414095627E-7	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999924101768399	WITHOUT_CLASSIFICATION	7.589823160111741E-6	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855962258286	WITHOUT_CLASSIFICATION	1.4403774171367813E-5	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.693337699496986	WITHOUT_CLASSIFICATION	0.3066623005030139	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999958158834132	WITHOUT_CLASSIFICATION	4.1841165867217645E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999996741203206	WITHOUT_CLASSIFICATION	3.258796793242079E-7	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999993947699855	WITHOUT_CLASSIFICATION	6.052300145969569E-7	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999997425576953	WITHOUT_CLASSIFICATION	2.5744230459837653E-7	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999919656824525	WITHOUT_CLASSIFICATION	8.034317547455007E-6	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999382185160474	WITHOUT_CLASSIFICATION	6.178148395259256E-5	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9996353793089703	WITHOUT_CLASSIFICATION	3.6462069102969876E-4	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999580993332594	WITHOUT_CLASSIFICATION	4.190066674053902E-5	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999996679246009	WITHOUT_CLASSIFICATION	3.320753990937844E-7	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999770712888	WITHOUT_CLASSIFICATION	2.2928711180731275E-8	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998715039610715	WITHOUT_CLASSIFICATION	1.2849603892842976E-4	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999994856857	WITHOUT_CLASSIFICATION	5.143143246292474E-10	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999719369038454	WITHOUT_CLASSIFICATION	2.806309615459423E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999719369038454	WITHOUT_CLASSIFICATION	2.806309615459423E-5	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9990259436638458	WITHOUT_CLASSIFICATION	9.740563361541409E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9994627945479758	WITHOUT_CLASSIFICATION	5.372054520241858E-4	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999998648265627	WITHOUT_CLASSIFICATION	1.351734373743463E-7	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999728536845626	WITHOUT_CLASSIFICATION	2.7146315437452824E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999856119942164	WITHOUT_CLASSIFICATION	1.4388005783549694E-5	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999909655045163	WITHOUT_CLASSIFICATION	9.034495483749633E-6	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9777932116306712	WITHOUT_CLASSIFICATION	0.022206788369328705	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9998093737788378	WITHOUT_CLASSIFICATION	1.9062622116209656E-4	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.9447815182894553	WITHOUT_CLASSIFICATION	0.055218481710544595	DEFECT
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.953792949248466	DEFECT	0.04620705075153392	WITHOUT_CLASSIFICATION
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9868710440556264	DEFECT	0.013128955944373702	WITHOUT_CLASSIFICATION
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9834201497131166	DEFECT	0.01657985028688339	WITHOUT_CLASSIFICATION
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9999999942615068	WITHOUT_CLASSIFICATION	5.7384931833590334E-9	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9989327422852231	WITHOUT_CLASSIFICATION	0.0010672577147769475	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.6856421315463306	DEFECT	0.31435786845366953	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.990917309510368	WITHOUT_CLASSIFICATION	0.009082690489631904	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.9892387316314001	DEFECT	0.010761268368599905	WITHOUT_CLASSIFICATION
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.8180690262402636	WITHOUT_CLASSIFICATION	0.18193097375973638	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8124748213861768	DEFECT	0.18752517861382328	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8124748213861768	DEFECT	0.18752517861382328	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9873039176706735	WITHOUT_CLASSIFICATION	0.012696082329326484	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999045041328988	WITHOUT_CLASSIFICATION	9.549586710131353E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9059506091382967	DEFECT	0.09404939086170327	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.9999708945178152	WITHOUT_CLASSIFICATION	2.910548218491797E-5	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.8997979362980469	WITHOUT_CLASSIFICATION	0.10020206370195309	DEFECT
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9348456838395227	WITHOUT_CLASSIFICATION	0.06515431616047726	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.9538845310842158	WITHOUT_CLASSIFICATION	0.04611546891578422	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.9811365428204906	WITHOUT_CLASSIFICATION	0.018863457179509407	DEFECT
TODO: is this completely correct?	DEFECT	0.7721718412901394	WITHOUT_CLASSIFICATION	0.22782815870986056	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.9790478656912805	DEFECT	0.020952134308719356	WITHOUT_CLASSIFICATION
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.84217010903355	DEFECT	0.15782989096644992	WITHOUT_CLASSIFICATION
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9994467148284201	WITHOUT_CLASSIFICATION	5.532851715799353E-4	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.9704966169241439	DEFECT	0.029503383075856135	WITHOUT_CLASSIFICATION
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9175132202363477	WITHOUT_CLASSIFICATION	0.08248677976365232	DEFECT
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.996652543865295	WITHOUT_CLASSIFICATION	0.003347456134705038	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.9878790262705246	WITHOUT_CLASSIFICATION	0.01212097372947553	DEFECT
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8350311982013835	WITHOUT_CLASSIFICATION	0.16496880179861648	DEFECT
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.955433536575736	WITHOUT_CLASSIFICATION	0.044566463424263895	DEFECT
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.8130850490822232	WITHOUT_CLASSIFICATION	0.18691495091777682	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8124748213861768	DEFECT	0.18752517861382328	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9997481930101967	DEFECT	2.518069898032626E-4	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.9911305144374978	WITHOUT_CLASSIFICATION	0.008869485562502262	DEFECT
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.8979983714431876	WITHOUT_CLASSIFICATION	0.10200162855681241	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9970378993041696	WITHOUT_CLASSIFICATION	0.0029621006958304055	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9997021340929432	WITHOUT_CLASSIFICATION	2.9786590705677525E-4	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9998874956538193	WITHOUT_CLASSIFICATION	1.1250434618074106E-4	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.999851164629312	WITHOUT_CLASSIFICATION	1.4883537068789674E-4	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.7448659432644025	WITHOUT_CLASSIFICATION	0.2551340567355976	DEFECT
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.7046886039095954	WITHOUT_CLASSIFICATION	0.2953113960904046	DEFECT
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.99536643991372	WITHOUT_CLASSIFICATION	0.004633560086279942	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.9992058313111868	WITHOUT_CLASSIFICATION	7.941686888132007E-4	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.8947286437634067	DEFECT	0.10527135623659332	WITHOUT_CLASSIFICATION
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9989334301782115	WITHOUT_CLASSIFICATION	0.0010665698217885034	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9997491607278182	WITHOUT_CLASSIFICATION	2.5083927218180833E-4	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.994308650638409	WITHOUT_CLASSIFICATION	0.005691349361590946	DEFECT
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7199141758051167	DEFECT	0.2800858241948833	WITHOUT_CLASSIFICATION
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.943380541816953	DEFECT	0.056619458183047026	WITHOUT_CLASSIFICATION
