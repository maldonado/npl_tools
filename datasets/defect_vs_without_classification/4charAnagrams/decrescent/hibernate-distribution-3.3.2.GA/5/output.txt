test out the optimizer:	WITHOUT_CLASSIFICATION	0.999999959621926	WITHOUT_CLASSIFICATION	4.03780739802739E-8	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999217162799005	WITHOUT_CLASSIFICATION	7.828372009946036E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999217162799005	WITHOUT_CLASSIFICATION	7.828372009946036E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999217162799005	WITHOUT_CLASSIFICATION	7.828372009946036E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999217162799005	WITHOUT_CLASSIFICATION	7.828372009946036E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999217162799005	WITHOUT_CLASSIFICATION	7.828372009946036E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999217162799005	WITHOUT_CLASSIFICATION	7.828372009946036E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999217162799005	WITHOUT_CLASSIFICATION	7.828372009946036E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999912489461499	WITHOUT_CLASSIFICATION	8.751053850146857E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999912489461499	WITHOUT_CLASSIFICATION	8.751053850146857E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.999991084143432	WITHOUT_CLASSIFICATION	8.915856568100304E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999771219697899	WITHOUT_CLASSIFICATION	2.2878030209955224E-5	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999998485852096	WITHOUT_CLASSIFICATION	1.5141479044258434E-7	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999943591464878	WITHOUT_CLASSIFICATION	5.640853512101236E-6	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999943591464878	WITHOUT_CLASSIFICATION	5.640853512101236E-6	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999941466813	WITHOUT_CLASSIFICATION	5.853318750521926E-9	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999980137589719	WITHOUT_CLASSIFICATION	1.98624102804525E-6	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999997103098188	WITHOUT_CLASSIFICATION	2.8969018118175883E-7	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999819911319386	WITHOUT_CLASSIFICATION	1.8008868061256558E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999800570247955	WITHOUT_CLASSIFICATION	1.9942975204452652E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999800570247955	WITHOUT_CLASSIFICATION	1.9942975204452652E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9997484096400058	WITHOUT_CLASSIFICATION	2.5159035999416934E-4	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999996834837114	WITHOUT_CLASSIFICATION	3.165162886507884E-7	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9995111792377989	WITHOUT_CLASSIFICATION	4.888207622011882E-4	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999936326262207	WITHOUT_CLASSIFICATION	6.367373779399271E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999994203663021	WITHOUT_CLASSIFICATION	5.796336980139502E-7	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999851338885181	WITHOUT_CLASSIFICATION	1.4866111482028583E-5	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999925015873566	WITHOUT_CLASSIFICATION	7.498412643312482E-6	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999939777557546	WITHOUT_CLASSIFICATION	6.022244245393584E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998538260535711	WITHOUT_CLASSIFICATION	1.461739464289239E-4	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.99999990437213	WITHOUT_CLASSIFICATION	9.562786991983513E-8	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999995106942602	WITHOUT_CLASSIFICATION	4.8930573980769195E-6	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999814255898977	WITHOUT_CLASSIFICATION	1.8574410102367862E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999945121940551	WITHOUT_CLASSIFICATION	5.4878059448135436E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999850616120879	WITHOUT_CLASSIFICATION	1.4938387912074693E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999850616120879	WITHOUT_CLASSIFICATION	1.4938387912074693E-5	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999986771622785	WITHOUT_CLASSIFICATION	1.3228377213702101E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999482914406791	WITHOUT_CLASSIFICATION	5.170855932100143E-5	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999417754085	WITHOUT_CLASSIFICATION	5.8224591593635714E-8	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999991273157852	WITHOUT_CLASSIFICATION	8.726842147411668E-7	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999998320028478	WITHOUT_CLASSIFICATION	1.679971521774321E-7	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999989046422726	WITHOUT_CLASSIFICATION	1.0953577273990911E-5	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999990179164252	WITHOUT_CLASSIFICATION	9.820835747285813E-7	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999843571391	WITHOUT_CLASSIFICATION	1.5642860818237098E-8	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999998994134455	WITHOUT_CLASSIFICATION	1.005865544216976E-7	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999994588205989	WITHOUT_CLASSIFICATION	5.411794010352679E-7	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999986466564674	WITHOUT_CLASSIFICATION	1.3533435325495674E-6	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999903360606861	WITHOUT_CLASSIFICATION	9.663939313929215E-6	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999763052004	WITHOUT_CLASSIFICATION	2.3694799556069212E-8	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994455597163	WITHOUT_CLASSIFICATION	5.544402837079834E-7	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999934280010514	WITHOUT_CLASSIFICATION	6.57199894856979E-6	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987320454703	WITHOUT_CLASSIFICATION	1.2679545296667368E-6	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830321540971	WITHOUT_CLASSIFICATION	1.6967845902869156E-5	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999998668961215	WITHOUT_CLASSIFICATION	1.3310387851902887E-7	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999988798038528	WITHOUT_CLASSIFICATION	1.1201961472102454E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999883253657335	WITHOUT_CLASSIFICATION	1.1674634266551463E-5	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9371246982276056	WITHOUT_CLASSIFICATION	0.06287530177239449	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999960847051143	WITHOUT_CLASSIFICATION	3.915294885765453E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999883253657335	WITHOUT_CLASSIFICATION	1.1674634266551463E-5	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999960847051143	WITHOUT_CLASSIFICATION	3.915294885765453E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999965961581507	WITHOUT_CLASSIFICATION	3.4038418493001656E-6	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999998732418955	WITHOUT_CLASSIFICATION	1.2675810443339863E-7	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999976866172018	WITHOUT_CLASSIFICATION	2.3133827982554256E-6	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999983132455855	WITHOUT_CLASSIFICATION	1.6867544143976552E-6	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999954879324	WITHOUT_CLASSIFICATION	4.512067538018782E-9	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999958773327	WITHOUT_CLASSIFICATION	4.122667362194487E-9	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999037206697517	WITHOUT_CLASSIFICATION	9.62793302482581E-5	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999548795726598	WITHOUT_CLASSIFICATION	4.5120427340107245E-5	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999987437842522	WITHOUT_CLASSIFICATION	1.2562157477670025E-6	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9999994989882512	WITHOUT_CLASSIFICATION	5.010117487308906E-7	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.999997197267321	WITHOUT_CLASSIFICATION	2.8027326791343525E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999960847051143	WITHOUT_CLASSIFICATION	3.915294885765453E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998280351928	WITHOUT_CLASSIFICATION	1.719648071033202E-7	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999881139571483	WITHOUT_CLASSIFICATION	1.188604285160552E-5	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999997733256697	WITHOUT_CLASSIFICATION	2.2667433025691175E-7	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999955877721289	WITHOUT_CLASSIFICATION	4.412227871156257E-6	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999989329801126	WITHOUT_CLASSIFICATION	1.0670198874822541E-6	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999913129053554	WITHOUT_CLASSIFICATION	8.687094644573935E-6	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999993905245244	WITHOUT_CLASSIFICATION	6.094754755905159E-7	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997067847862	WITHOUT_CLASSIFICATION	2.9321521381174574E-7	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999993603132789	WITHOUT_CLASSIFICATION	6.396867210838114E-7	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999999648379	WITHOUT_CLASSIFICATION	3.516221423669928E-11	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999999949948881	WITHOUT_CLASSIFICATION	5.005111903275938E-8	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999573550900636	WITHOUT_CLASSIFICATION	4.2644909936520386E-5	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999702860629304	WITHOUT_CLASSIFICATION	2.9713937069685317E-5	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999953223127928	WITHOUT_CLASSIFICATION	4.677687207269417E-6	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999995604772	WITHOUT_CLASSIFICATION	4.395228013840196E-9	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999995215182627	WITHOUT_CLASSIFICATION	4.784817372423435E-7	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999999987818623	WITHOUT_CLASSIFICATION	1.2181376949641507E-8	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999978902655	WITHOUT_CLASSIFICATION	2.1097344165927754E-9	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999801452687	WITHOUT_CLASSIFICATION	1.9854731338602207E-8	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999950986724	WITHOUT_CLASSIFICATION	4.901327505883423E-9	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999512611607604	WITHOUT_CLASSIFICATION	4.8738839239631965E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999929011417751	WITHOUT_CLASSIFICATION	7.098858224987686E-6	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999794369510301	WITHOUT_CLASSIFICATION	2.056304896983223E-5	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997637092811	WITHOUT_CLASSIFICATION	2.3629071895132477E-7	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999929011417751	WITHOUT_CLASSIFICATION	7.098858224987686E-6	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.999999900713238	WITHOUT_CLASSIFICATION	9.92867619639894E-8	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999979109059409	WITHOUT_CLASSIFICATION	2.089094059132518E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999883253657335	WITHOUT_CLASSIFICATION	1.1674634266551463E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.999999225880848	WITHOUT_CLASSIFICATION	7.741191519906553E-7	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999998444888624	WITHOUT_CLASSIFICATION	1.555111376030159E-7	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999993681097526	WITHOUT_CLASSIFICATION	6.318902474034734E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999993681097526	WITHOUT_CLASSIFICATION	6.318902474034734E-6	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999774699137042	WITHOUT_CLASSIFICATION	2.253008629576042E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999724569603	WITHOUT_CLASSIFICATION	2.7543039753488147E-8	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999994075989943	WITHOUT_CLASSIFICATION	5.924010056867624E-7	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999994782579	WITHOUT_CLASSIFICATION	5.217420044086237E-10	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999949255765025	WITHOUT_CLASSIFICATION	5.0744234975223306E-6	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999739469038	WITHOUT_CLASSIFICATION	2.6053096256483405E-8	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999983801085484	WITHOUT_CLASSIFICATION	1.6198914516480015E-6	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999758837274327	WITHOUT_CLASSIFICATION	2.4116272567335666E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999998078415887	WITHOUT_CLASSIFICATION	1.9215841124669313E-7	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999994595024784	WITHOUT_CLASSIFICATION	5.40497521650303E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999699376209	WITHOUT_CLASSIFICATION	3.006237903410865E-8	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999699376209	WITHOUT_CLASSIFICATION	3.006237903410865E-8	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999798969946826	WITHOUT_CLASSIFICATION	2.010300531744411E-5	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999952911154706	WITHOUT_CLASSIFICATION	4.708884529327074E-6	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999994270621414	WITHOUT_CLASSIFICATION	5.729378586647142E-7	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999699376209	WITHOUT_CLASSIFICATION	3.006237903410865E-8	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999798969946826	WITHOUT_CLASSIFICATION	2.010300531744411E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999798969946826	WITHOUT_CLASSIFICATION	2.010300531744411E-5	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999625094556	WITHOUT_CLASSIFICATION	3.7490544464375035E-8	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999987585364167	WITHOUT_CLASSIFICATION	1.2414635832874358E-6	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999968309474642	WITHOUT_CLASSIFICATION	3.169052535862388E-6	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999957257756	WITHOUT_CLASSIFICATION	4.274224459857942E-9	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999914348384386	WITHOUT_CLASSIFICATION	8.56516156147236E-6	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999914348384386	WITHOUT_CLASSIFICATION	8.56516156147236E-6	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999138909835	WITHOUT_CLASSIFICATION	8.610901647372922E-8	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999984514793632	WITHOUT_CLASSIFICATION	1.5485206367625924E-6	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999944934395665	WITHOUT_CLASSIFICATION	5.506560433516395E-6	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999766662186834	WITHOUT_CLASSIFICATION	2.3333781316619166E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999766662186834	WITHOUT_CLASSIFICATION	2.3333781316619166E-5	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999977894645165	WITHOUT_CLASSIFICATION	2.2105354836243966E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9996997119659442	WITHOUT_CLASSIFICATION	3.0028803405589413E-4	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999942235584292	WITHOUT_CLASSIFICATION	5.776441570843683E-6	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999806948111	WITHOUT_CLASSIFICATION	1.930518893232525E-8	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999920816673	WITHOUT_CLASSIFICATION	7.9183326395168E-9	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999997674590031	WITHOUT_CLASSIFICATION	2.3254099689712238E-7	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999926710046108	WITHOUT_CLASSIFICATION	7.328995389188424E-6	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999997797942283	WITHOUT_CLASSIFICATION	2.2020577172391205E-7	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999996837675166	WITHOUT_CLASSIFICATION	3.1623248334259854E-7	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999942235584292	WITHOUT_CLASSIFICATION	5.776441570843683E-6	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999524773054126	WITHOUT_CLASSIFICATION	4.7522694587384926E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.999967773187628	WITHOUT_CLASSIFICATION	3.222681237199499E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.999967773187628	WITHOUT_CLASSIFICATION	3.222681237199499E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999991067696625	WITHOUT_CLASSIFICATION	8.932303375816143E-7	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999964878721832	WITHOUT_CLASSIFICATION	3.512127816802567E-6	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999392563174	WITHOUT_CLASSIFICATION	6.074368268922722E-8	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998500648551917	WITHOUT_CLASSIFICATION	1.499351448082194E-4	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999510726490933	WITHOUT_CLASSIFICATION	4.892735090659952E-5	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.999999943940287	WITHOUT_CLASSIFICATION	5.6059712877690744E-8	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.999975912626597	WITHOUT_CLASSIFICATION	2.4087373402940548E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9989878419621167	WITHOUT_CLASSIFICATION	0.0010121580378832753	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999973323503	WITHOUT_CLASSIFICATION	2.6676497647994667E-9	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999994660613044	WITHOUT_CLASSIFICATION	5.339386955163651E-7	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999994660613044	WITHOUT_CLASSIFICATION	5.339386955163651E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999920663247465	WITHOUT_CLASSIFICATION	7.933675253504411E-6	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999999959621926	WITHOUT_CLASSIFICATION	4.03780739802739E-8	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999995076662618	WITHOUT_CLASSIFICATION	4.923337381733752E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999217162799005	WITHOUT_CLASSIFICATION	7.828372009946036E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.999993064432311	WITHOUT_CLASSIFICATION	6.935567689021358E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999912489461499	WITHOUT_CLASSIFICATION	8.751053850146857E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999841452353543	WITHOUT_CLASSIFICATION	1.585476464573075E-5	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999999355607838	WITHOUT_CLASSIFICATION	6.443921625882951E-8	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999989007255616	WITHOUT_CLASSIFICATION	1.0992744383461182E-6	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9999578167234399	WITHOUT_CLASSIFICATION	4.218327656010211E-5	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9993680968435408	WITHOUT_CLASSIFICATION	6.319031564591475E-4	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999723596919187	WITHOUT_CLASSIFICATION	2.7640308081308108E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999391107701348	WITHOUT_CLASSIFICATION	6.088922986523631E-5	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.999998501848759	WITHOUT_CLASSIFICATION	1.49815124084978E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999771219697899	WITHOUT_CLASSIFICATION	2.2878030209955224E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999818386258864	WITHOUT_CLASSIFICATION	1.816137411358299E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999818386258864	WITHOUT_CLASSIFICATION	1.816137411358299E-5	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9999962010418514	WITHOUT_CLASSIFICATION	3.7989581486956552E-6	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999844081747575	WITHOUT_CLASSIFICATION	1.5591825242428694E-5	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999976898641246	WITHOUT_CLASSIFICATION	2.310135875368018E-6	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999971924916223	WITHOUT_CLASSIFICATION	2.8075083777411246E-6	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999946082686009	WITHOUT_CLASSIFICATION	5.391731399116194E-6	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999320292752	WITHOUT_CLASSIFICATION	6.797072487931248E-8	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999943591464878	WITHOUT_CLASSIFICATION	5.640853512101236E-6	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999969706463374	WITHOUT_CLASSIFICATION	3.029353662644169E-6	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999959529213454	WITHOUT_CLASSIFICATION	4.047078654648236E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999977621948911	WITHOUT_CLASSIFICATION	2.2378051089241166E-6	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999955148736787	WITHOUT_CLASSIFICATION	4.48512632135983E-6	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999897593210445	WITHOUT_CLASSIFICATION	1.0240678955530271E-5	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9998873590569607	WITHOUT_CLASSIFICATION	1.1264094303937435E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999996841105782	WITHOUT_CLASSIFICATION	3.158894218359662E-7	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999058901883	WITHOUT_CLASSIFICATION	9.410981182561793E-8	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999999438441956	WITHOUT_CLASSIFICATION	5.615580439245053E-7	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999904242348995	WITHOUT_CLASSIFICATION	9.575765100566394E-6	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999904765404187	WITHOUT_CLASSIFICATION	9.523459581374412E-6	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9999995098473908	WITHOUT_CLASSIFICATION	4.901526092161246E-7	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999217162799005	WITHOUT_CLASSIFICATION	7.828372009946036E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999217162799005	WITHOUT_CLASSIFICATION	7.828372009946036E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999912489461499	WITHOUT_CLASSIFICATION	8.751053850146857E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999912489461499	WITHOUT_CLASSIFICATION	8.751053850146857E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999391107701348	WITHOUT_CLASSIFICATION	6.088922986523631E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999818386258864	WITHOUT_CLASSIFICATION	1.816137411358299E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999996841105782	WITHOUT_CLASSIFICATION	3.158894218359662E-7	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999941466813	WITHOUT_CLASSIFICATION	5.853318750521926E-9	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999957691541715	WITHOUT_CLASSIFICATION	4.230845828465376E-6	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999922027938392	WITHOUT_CLASSIFICATION	7.797206160803739E-6	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999571693007486	WITHOUT_CLASSIFICATION	4.283069925126397E-5	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999829996384717	WITHOUT_CLASSIFICATION	1.700036152830265E-5	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999991688112817	WITHOUT_CLASSIFICATION	8.311887181687389E-7	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.99993011583203	WITHOUT_CLASSIFICATION	6.988416797006967E-5	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998484615959657	WITHOUT_CLASSIFICATION	1.5153840403420957E-4	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999729421166349	WITHOUT_CLASSIFICATION	2.705788336520398E-5	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.999999949366798	WITHOUT_CLASSIFICATION	5.063320204988678E-8	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999943867274003	WITHOUT_CLASSIFICATION	5.613272599822724E-6	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999943867274003	WITHOUT_CLASSIFICATION	5.613272599822724E-6	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999937219388	WITHOUT_CLASSIFICATION	6.278061250406377E-9	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999976604334591	WITHOUT_CLASSIFICATION	2.3395665410061504E-6	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999975576882518	WITHOUT_CLASSIFICATION	2.4423117482854054E-6	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9996185967972171	WITHOUT_CLASSIFICATION	3.814032027829458E-4	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999979728865	WITHOUT_CLASSIFICATION	2.027113566416473E-9	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999998868649268	WITHOUT_CLASSIFICATION	1.1313507324313964E-7	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999994551057965	WITHOUT_CLASSIFICATION	5.448942035227244E-7	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999980137589719	WITHOUT_CLASSIFICATION	1.98624102804525E-6	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9999320625688197	WITHOUT_CLASSIFICATION	6.79374311802796E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999987692532778	WITHOUT_CLASSIFICATION	1.2307467221548755E-6	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999987692532778	WITHOUT_CLASSIFICATION	1.2307467221548755E-6	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9999998482484265	WITHOUT_CLASSIFICATION	1.5175157361367887E-7	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999995104675192	WITHOUT_CLASSIFICATION	4.895324807522978E-7	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999967898146999	WITHOUT_CLASSIFICATION	3.210185300040434E-6	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.999997570428602	WITHOUT_CLASSIFICATION	2.429571397976984E-6	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999473736316931	WITHOUT_CLASSIFICATION	5.262636830696629E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999912489461499	WITHOUT_CLASSIFICATION	8.751053850146857E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999391107701348	WITHOUT_CLASSIFICATION	6.088922986523631E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999771219697899	WITHOUT_CLASSIFICATION	2.2878030209955224E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999996841105782	WITHOUT_CLASSIFICATION	3.158894218359662E-7	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999996841105782	WITHOUT_CLASSIFICATION	3.158894218359662E-7	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999914951415158	WITHOUT_CLASSIFICATION	8.504858484375105E-6	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999914951415158	WITHOUT_CLASSIFICATION	8.504858484375105E-6	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999983913103656	WITHOUT_CLASSIFICATION	1.6086896343831116E-6	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999412536153165	WITHOUT_CLASSIFICATION	5.874638468356111E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999412536153165	WITHOUT_CLASSIFICATION	5.874638468356111E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999973558103712	WITHOUT_CLASSIFICATION	2.6441896287136626E-6	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999977971758016	WITHOUT_CLASSIFICATION	2.2028241982768034E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999996655139632	WITHOUT_CLASSIFICATION	3.344860367847843E-7	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999976084499336	WITHOUT_CLASSIFICATION	2.3915500664450925E-6	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9997606017614327	WITHOUT_CLASSIFICATION	2.3939823856743657E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999819911319386	WITHOUT_CLASSIFICATION	1.8008868061256558E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999819911319386	WITHOUT_CLASSIFICATION	1.8008868061256558E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999859737486971	WITHOUT_CLASSIFICATION	1.4026251302894045E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999738158199135	WITHOUT_CLASSIFICATION	2.6184180086557698E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999947720673168	WITHOUT_CLASSIFICATION	5.227932683190368E-6	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999662503977595	WITHOUT_CLASSIFICATION	3.374960224036956E-5	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999965278896222	WITHOUT_CLASSIFICATION	3.4721103777644816E-6	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999916753235193	WITHOUT_CLASSIFICATION	8.324676480747208E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999800570247955	WITHOUT_CLASSIFICATION	1.9942975204452652E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999447573180634	WITHOUT_CLASSIFICATION	5.524268193664171E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999447573180634	WITHOUT_CLASSIFICATION	5.524268193664171E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9997484096400058	WITHOUT_CLASSIFICATION	2.5159035999416934E-4	DEFECT
long	WITHOUT_CLASSIFICATION	0.9997484096400058	WITHOUT_CLASSIFICATION	2.5159035999416934E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999975282016556	WITHOUT_CLASSIFICATION	2.4717983444717513E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999975282016556	WITHOUT_CLASSIFICATION	2.4717983444717513E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998467510665	WITHOUT_CLASSIFICATION	1.5324893359904695E-7	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998467510665	WITHOUT_CLASSIFICATION	1.5324893359904695E-7	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999819911319386	WITHOUT_CLASSIFICATION	1.8008868061256558E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999800570247955	WITHOUT_CLASSIFICATION	1.9942975204452652E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999447573180634	WITHOUT_CLASSIFICATION	5.524268193664171E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999447573180634	WITHOUT_CLASSIFICATION	5.524268193664171E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9997484096400058	WITHOUT_CLASSIFICATION	2.5159035999416934E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999975282016556	WITHOUT_CLASSIFICATION	2.4717983444717513E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999975282016556	WITHOUT_CLASSIFICATION	2.4717983444717513E-6	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998467510665	WITHOUT_CLASSIFICATION	1.5324893359904695E-7	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.999997249721151	WITHOUT_CLASSIFICATION	2.7502788490408325E-6	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999983032751668	WITHOUT_CLASSIFICATION	1.6967248331358253E-6	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999821495131858	WITHOUT_CLASSIFICATION	1.7850486814145378E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999909646705069	WITHOUT_CLASSIFICATION	9.035329493237974E-6	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999998981531898	WITHOUT_CLASSIFICATION	1.0184681023396065E-7	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999516271591229	WITHOUT_CLASSIFICATION	4.837284087710373E-5	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999498930542903	WITHOUT_CLASSIFICATION	5.0106945709619215E-5	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9918584278020554	WITHOUT_CLASSIFICATION	0.00814157219794465	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999676751505585	WITHOUT_CLASSIFICATION	3.2324849441508346E-4	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999774544859	WITHOUT_CLASSIFICATION	2.254551413167306E-8	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999910978614428	WITHOUT_CLASSIFICATION	8.902138557169678E-6	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998285458097	WITHOUT_CLASSIFICATION	1.7145419032752365E-7	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999774699137042	WITHOUT_CLASSIFICATION	2.253008629576042E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999516271591229	WITHOUT_CLASSIFICATION	4.837284087710373E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999516271591229	WITHOUT_CLASSIFICATION	4.837284087710373E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999516271591229	WITHOUT_CLASSIFICATION	4.837284087710373E-5	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999700655505607	WITHOUT_CLASSIFICATION	2.9934449439382952E-5	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999774858451	WITHOUT_CLASSIFICATION	2.2514154895307892E-7	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999774858451	WITHOUT_CLASSIFICATION	2.2514154895307892E-7	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999853986232629	WITHOUT_CLASSIFICATION	1.4601376737197068E-5	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999874303924029	WITHOUT_CLASSIFICATION	1.2569607597178567E-5	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999643466114446	WITHOUT_CLASSIFICATION	3.565338855542718E-5	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999961367012775	WITHOUT_CLASSIFICATION	3.86329872257915E-6	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999961367012775	WITHOUT_CLASSIFICATION	3.86329872257915E-6	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999994203663021	WITHOUT_CLASSIFICATION	5.796336980139502E-7	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999967243971458	WITHOUT_CLASSIFICATION	3.275602854122983E-6	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999967243971458	WITHOUT_CLASSIFICATION	3.275602854122983E-6	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999944996223079	WITHOUT_CLASSIFICATION	5.500377692015309E-6	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999993883937365	WITHOUT_CLASSIFICATION	6.11606263479878E-7	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999923881220504	WITHOUT_CLASSIFICATION	7.611877949688765E-6	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998945042037403	WITHOUT_CLASSIFICATION	1.0549579625975901E-4	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9999615766065179	WITHOUT_CLASSIFICATION	3.842339348210265E-5	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.9999470705380026	WITHOUT_CLASSIFICATION	5.292946199742182E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999851338885181	WITHOUT_CLASSIFICATION	1.4866111482028583E-5	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997574710833705	WITHOUT_CLASSIFICATION	2.4252891662950252E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9907652207000521	WITHOUT_CLASSIFICATION	0.009234779299947975	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9998929069953798	WITHOUT_CLASSIFICATION	1.0709300462021973E-4	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999907550280595	WITHOUT_CLASSIFICATION	9.244971940606653E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998538260535711	WITHOUT_CLASSIFICATION	1.461739464289239E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999772398496	WITHOUT_CLASSIFICATION	2.27601503341788E-8	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999999565711299	WITHOUT_CLASSIFICATION	4.3428870099891247E-7	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999966793049735	WITHOUT_CLASSIFICATION	3.32069502643379E-6	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998538260535711	WITHOUT_CLASSIFICATION	1.461739464289239E-4	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999992268253095	WITHOUT_CLASSIFICATION	7.731746905936832E-7	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999945666783563	WITHOUT_CLASSIFICATION	5.4333216437612454E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999950613772008	WITHOUT_CLASSIFICATION	4.938622799111808E-6	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999119286465191	WITHOUT_CLASSIFICATION	8.807135348093085E-5	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999963185929629	WITHOUT_CLASSIFICATION	3.681407037049114E-6	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999945465983485	WITHOUT_CLASSIFICATION	5.453401651457582E-6	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999949793451576	WITHOUT_CLASSIFICATION	5.020654842446017E-6	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999814255898977	WITHOUT_CLASSIFICATION	1.8574410102367862E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992009474615	WITHOUT_CLASSIFICATION	7.990525383512747E-7	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999945121940551	WITHOUT_CLASSIFICATION	5.4878059448135436E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999957875419673	WITHOUT_CLASSIFICATION	4.212458032725314E-6	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999996526850587	WITHOUT_CLASSIFICATION	3.4731494133110797E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999466409463128	WITHOUT_CLASSIFICATION	5.335905368719935E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999851338885181	WITHOUT_CLASSIFICATION	1.4866111482028583E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992009474615	WITHOUT_CLASSIFICATION	7.990525383512747E-7	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999957875419673	WITHOUT_CLASSIFICATION	4.212458032725314E-6	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999466409463128	WITHOUT_CLASSIFICATION	5.335905368719935E-5	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999980780603948	WITHOUT_CLASSIFICATION	1.9219396053484585E-6	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9999400695515245	WITHOUT_CLASSIFICATION	5.993044847556201E-5	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999991243647789	WITHOUT_CLASSIFICATION	8.756352211566086E-7	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999850616120879	WITHOUT_CLASSIFICATION	1.4938387912074693E-5	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999911539075628	WITHOUT_CLASSIFICATION	8.846092437239247E-6	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9999594394839608	WITHOUT_CLASSIFICATION	4.056051603916151E-5	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9999919498621094	WITHOUT_CLASSIFICATION	8.050137890560446E-6	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999955264646823	WITHOUT_CLASSIFICATION	4.473535317757072E-6	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999950375306214	WITHOUT_CLASSIFICATION	4.962469378715013E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999913311177	WITHOUT_CLASSIFICATION	8.668882234556023E-9	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999996966947573	WITHOUT_CLASSIFICATION	3.0330524272495007E-7	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999966131141106	WITHOUT_CLASSIFICATION	3.3868858894710504E-6	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999979232042	WITHOUT_CLASSIFICATION	2.0767958347359928E-9	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999992890865245	WITHOUT_CLASSIFICATION	7.109134755479512E-7	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9999473732641709	WITHOUT_CLASSIFICATION	5.2626735829018465E-5	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999965973284427	WITHOUT_CLASSIFICATION	3.402671557245726E-6	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999482914406791	WITHOUT_CLASSIFICATION	5.170855932100143E-5	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999987457882341	WITHOUT_CLASSIFICATION	1.2542117659759296E-6	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.9999729403608458	WITHOUT_CLASSIFICATION	2.705963915427218E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992009474615	WITHOUT_CLASSIFICATION	7.990525383512747E-7	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999997111375449	WITHOUT_CLASSIFICATION	2.888624550257784E-7	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999903480071	WITHOUT_CLASSIFICATION	9.651992846418865E-9	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999992301899128	WITHOUT_CLASSIFICATION	7.698100871922829E-7	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999997912392244	WITHOUT_CLASSIFICATION	2.0876077549218724E-7	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9999997857280505	WITHOUT_CLASSIFICATION	2.1427194959743029E-7	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999751078108078	WITHOUT_CLASSIFICATION	2.4892189192123686E-5	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999997354857	WITHOUT_CLASSIFICATION	2.645143276250658E-10	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999477640527	WITHOUT_CLASSIFICATION	5.223594727741308E-8	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999582420161127	WITHOUT_CLASSIFICATION	4.175798388724523E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9999633299107317	WITHOUT_CLASSIFICATION	3.6670089268420855E-5	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999912151814667	WITHOUT_CLASSIFICATION	8.784818533189072E-6	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999957965390244	WITHOUT_CLASSIFICATION	4.203460975697996E-6	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.999540361206486	WITHOUT_CLASSIFICATION	4.596387935139607E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999991273157852	WITHOUT_CLASSIFICATION	8.726842147411668E-7	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999999185346135	WITHOUT_CLASSIFICATION	8.146538657212149E-8	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999971096699577	WITHOUT_CLASSIFICATION	2.890330042335858E-6	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999919369985594	WITHOUT_CLASSIFICATION	8.0630014406185E-6	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999988121611457	WITHOUT_CLASSIFICATION	1.1878388542576776E-6	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999994950871737	WITHOUT_CLASSIFICATION	5.049128263754853E-7	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999079030295815	WITHOUT_CLASSIFICATION	9.209697041846639E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999988902	WITHOUT_CLASSIFICATION	1.109777220939309E-12	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999981675071683	WITHOUT_CLASSIFICATION	1.832492831703605E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999733673288	WITHOUT_CLASSIFICATION	2.6632671151774188E-8	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999981355663304	WITHOUT_CLASSIFICATION	1.8644336695985047E-6	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999671312066666	WITHOUT_CLASSIFICATION	3.2868793333408174E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999671312066666	WITHOUT_CLASSIFICATION	3.2868793333408174E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999661218751285	WITHOUT_CLASSIFICATION	3.38781248714609E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999983137914714	WITHOUT_CLASSIFICATION	1.6862085285970797E-6	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999997344174024	WITHOUT_CLASSIFICATION	2.655825975680617E-7	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999971761334953	WITHOUT_CLASSIFICATION	2.8238665048738663E-6	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999995339624651	WITHOUT_CLASSIFICATION	4.6603753490967004E-7	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9988648533178429	WITHOUT_CLASSIFICATION	0.0011351466821570286	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999843708130884	WITHOUT_CLASSIFICATION	1.5629186911502442E-5	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999997327673362	WITHOUT_CLASSIFICATION	2.672326638524366E-7	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999995511240067	WITHOUT_CLASSIFICATION	4.4887599329743615E-6	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999973753682583	WITHOUT_CLASSIFICATION	2.624631741804512E-6	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.999993931238544	WITHOUT_CLASSIFICATION	6.068761456027313E-6	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999991452216039	WITHOUT_CLASSIFICATION	8.547783959678878E-7	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999875669485231	WITHOUT_CLASSIFICATION	1.243305147687781E-5	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.999888658795391	WITHOUT_CLASSIFICATION	1.1134120460903308E-4	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999932027700513	WITHOUT_CLASSIFICATION	6.797229948739342E-6	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999233221053359	WITHOUT_CLASSIFICATION	7.667789466409729E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999910010389957	WITHOUT_CLASSIFICATION	8.998961004319217E-6	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999873972687462	WITHOUT_CLASSIFICATION	1.2602731253830253E-5	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950213873819	WITHOUT_CLASSIFICATION	4.978612618005191E-6	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99999994362319	WITHOUT_CLASSIFICATION	5.6376809959476165E-8	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941161874445	WITHOUT_CLASSIFICATION	5.883812555523629E-6	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999491223066	WITHOUT_CLASSIFICATION	5.087769342425172E-8	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999954977492352	WITHOUT_CLASSIFICATION	4.502250764786106E-6	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9998920501508444	WITHOUT_CLASSIFICATION	1.0794984915554348E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999979510831184	WITHOUT_CLASSIFICATION	2.048916881623041E-6	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999993367808753	WITHOUT_CLASSIFICATION	6.632191247035216E-7	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999979210573633	WITHOUT_CLASSIFICATION	2.078942636722973E-6	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.999999968722398	WITHOUT_CLASSIFICATION	3.1277601867731864E-8	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998219998587	WITHOUT_CLASSIFICATION	1.7800014126998091E-7	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999802583735813	WITHOUT_CLASSIFICATION	1.974162641872292E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99999994362319	WITHOUT_CLASSIFICATION	5.6376809959476165E-8	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999810060757304	WITHOUT_CLASSIFICATION	1.8993924269644052E-5	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999997918178462	WITHOUT_CLASSIFICATION	2.0818215376141883E-7	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999997519251921	WITHOUT_CLASSIFICATION	2.480748078654115E-7	DEFECT
found	WITHOUT_CLASSIFICATION	0.9998796260527668	WITHOUT_CLASSIFICATION	1.20373947233241E-4	DEFECT
found	WITHOUT_CLASSIFICATION	0.9998796260527668	WITHOUT_CLASSIFICATION	1.20373947233241E-4	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999972825019	WITHOUT_CLASSIFICATION	2.717498206270149E-9	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999970617429581	WITHOUT_CLASSIFICATION	2.9382570419585836E-6	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999985027307651	WITHOUT_CLASSIFICATION	1.4972692348927014E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.999985027307651	WITHOUT_CLASSIFICATION	1.4972692348927014E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999733673288	WITHOUT_CLASSIFICATION	2.6632671151774188E-8	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999992311011888	WITHOUT_CLASSIFICATION	7.688988111304857E-7	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999978929625016	WITHOUT_CLASSIFICATION	2.107037498289218E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999999591359799	WITHOUT_CLASSIFICATION	4.0864020025218E-8	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999920663247465	WITHOUT_CLASSIFICATION	7.933675253504411E-6	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999978929625016	WITHOUT_CLASSIFICATION	2.107037498289218E-6	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999999591359799	WITHOUT_CLASSIFICATION	4.0864020025218E-8	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999998932462464	WITHOUT_CLASSIFICATION	1.0675375351341418E-7	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999995666807494	WITHOUT_CLASSIFICATION	4.333192505872345E-7	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999783226970326	WITHOUT_CLASSIFICATION	2.1677302967443104E-5	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999983852606098	WITHOUT_CLASSIFICATION	1.6147393902249742E-6	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996860939364223	WITHOUT_CLASSIFICATION	3.139060635776825E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.99999745484838	WITHOUT_CLASSIFICATION	2.5451516198745727E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999981171502599	WITHOUT_CLASSIFICATION	1.8828497401109988E-6	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999981171502599	WITHOUT_CLASSIFICATION	1.8828497401109988E-6	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999585300121532	WITHOUT_CLASSIFICATION	4.146998784680778E-5	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999995994443	WITHOUT_CLASSIFICATION	4.005556625396864E-10	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999974519515348	WITHOUT_CLASSIFICATION	2.5480484653192577E-6	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999540943744	WITHOUT_CLASSIFICATION	4.5905625552992815E-8	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999999829740491	WITHOUT_CLASSIFICATION	1.7025950863222497E-8	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999992250530739	WITHOUT_CLASSIFICATION	7.749469259943285E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999920663247465	WITHOUT_CLASSIFICATION	7.933675253504411E-6	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999971279134462	WITHOUT_CLASSIFICATION	2.872086553764047E-6	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999895219770397	WITHOUT_CLASSIFICATION	1.047802296023605E-5	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999895219770397	WITHOUT_CLASSIFICATION	1.047802296023605E-5	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999992862238254	WITHOUT_CLASSIFICATION	7.1377617460128415E-6	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999998932462464	WITHOUT_CLASSIFICATION	1.0675375351341418E-7	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998813179411015	WITHOUT_CLASSIFICATION	1.1868205889848572E-4	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9806689109827126	WITHOUT_CLASSIFICATION	0.01933108901728735	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9997166732838277	WITHOUT_CLASSIFICATION	2.8332671617225044E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999966789550618	WITHOUT_CLASSIFICATION	3.3210449381248368E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9991873186482154	WITHOUT_CLASSIFICATION	8.126813517846555E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999998932462464	WITHOUT_CLASSIFICATION	1.0675375351341418E-7	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999966789550618	WITHOUT_CLASSIFICATION	3.3210449381248368E-6	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9991873186482154	WITHOUT_CLASSIFICATION	8.126813517846555E-4	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.999999988043837	WITHOUT_CLASSIFICATION	1.1956162882013542E-8	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999987166512911	WITHOUT_CLASSIFICATION	1.2833487088465183E-6	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999341186349401	WITHOUT_CLASSIFICATION	6.588136505994189E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999998932462464	WITHOUT_CLASSIFICATION	1.0675375351341418E-7	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999998932462464	WITHOUT_CLASSIFICATION	1.0675375351341418E-7	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999983974750642	WITHOUT_CLASSIFICATION	1.6025249357097798E-6	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9999974403988174	WITHOUT_CLASSIFICATION	2.5596011824577513E-6	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999976324855264	WITHOUT_CLASSIFICATION	2.367514473710713E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994455597163	WITHOUT_CLASSIFICATION	5.544402837079834E-7	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999928881228377	WITHOUT_CLASSIFICATION	7.111877162266033E-6	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999684815337	WITHOUT_CLASSIFICATION	3.1518466309554035E-8	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999990322948685	WITHOUT_CLASSIFICATION	9.677051315476415E-7	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999998017141907	WITHOUT_CLASSIFICATION	1.9828580926041875E-7	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999978287949028	WITHOUT_CLASSIFICATION	2.1712050972207023E-6	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9999851664000693	WITHOUT_CLASSIFICATION	1.4833599930683043E-5	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999783937444804	WITHOUT_CLASSIFICATION	2.1606255519557993E-5	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999994814063573	WITHOUT_CLASSIFICATION	5.185936426895864E-7	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999996801109236	WITHOUT_CLASSIFICATION	3.198890764151689E-7	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999956929356686	WITHOUT_CLASSIFICATION	4.3070643315131395E-6	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932532489818	WITHOUT_CLASSIFICATION	6.746751018212371E-6	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999989423955824	WITHOUT_CLASSIFICATION	1.0576044175453442E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994455597163	WITHOUT_CLASSIFICATION	5.544402837079834E-7	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999633665768867	WITHOUT_CLASSIFICATION	3.663342311329539E-5	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999996090621168	WITHOUT_CLASSIFICATION	3.9093788308318216E-7	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999947286606	WITHOUT_CLASSIFICATION	5.271339257334672E-9	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999966525720762	WITHOUT_CLASSIFICATION	3.3474279237148917E-6	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999229039761685	WITHOUT_CLASSIFICATION	7.70960238315594E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999229039761685	WITHOUT_CLASSIFICATION	7.70960238315594E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994455597163	WITHOUT_CLASSIFICATION	5.544402837079834E-7	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9994635356391169	WITHOUT_CLASSIFICATION	5.364643608830983E-4	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999998805163915	WITHOUT_CLASSIFICATION	1.194836083823907E-7	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.999796714168582	WITHOUT_CLASSIFICATION	2.0328583141818722E-4	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999991435541111	WITHOUT_CLASSIFICATION	8.564458888371314E-7	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999979293505641	WITHOUT_CLASSIFICATION	2.0706494358405625E-6	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999996341698274	WITHOUT_CLASSIFICATION	3.658301726565012E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999153238488987	WITHOUT_CLASSIFICATION	8.467615110120646E-5	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999999843862349	WITHOUT_CLASSIFICATION	1.5613765090836247E-7	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999997638321	WITHOUT_CLASSIFICATION	2.3616784955528197E-10	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998571306792	WITHOUT_CLASSIFICATION	1.4286932083244707E-7	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998824849714864	WITHOUT_CLASSIFICATION	1.1751502851353668E-4	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9998748652311512	WITHOUT_CLASSIFICATION	1.2513476884878057E-4	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999786965994616	WITHOUT_CLASSIFICATION	2.130340053838465E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999996394852	WITHOUT_CLASSIFICATION	3.6051489350902537E-10	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970204437482	WITHOUT_CLASSIFICATION	2.979556251891288E-6	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999670485580556	WITHOUT_CLASSIFICATION	3.295144194434324E-5	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999991344558076	WITHOUT_CLASSIFICATION	8.655441923033677E-7	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999938443488047	WITHOUT_CLASSIFICATION	6.1556511953685935E-6	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983436121387	WITHOUT_CLASSIFICATION	1.656387861261409E-6	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999717867149397	WITHOUT_CLASSIFICATION	2.8213285060276598E-5	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999996671978275	WITHOUT_CLASSIFICATION	3.328021724075616E-7	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999999480714384	WITHOUT_CLASSIFICATION	5.192856159909502E-7	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998868532324002	WITHOUT_CLASSIFICATION	1.1314676759977456E-4	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939231946946	WITHOUT_CLASSIFICATION	6.0768053052914506E-6	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761438066226	WITHOUT_CLASSIFICATION	2.3856193377461925E-5	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937213346771	WITHOUT_CLASSIFICATION	6.278665322907564E-6	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890084186462	WITHOUT_CLASSIFICATION	1.099158135366344E-5	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929407510384	WITHOUT_CLASSIFICATION	7.05924896167477E-6	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999758130233471	WITHOUT_CLASSIFICATION	2.418697665288443E-5	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960916841301	WITHOUT_CLASSIFICATION	3.9083158699339235E-6	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999986628944539	WITHOUT_CLASSIFICATION	1.3371055461482366E-6	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999995107326318	WITHOUT_CLASSIFICATION	4.892673681710141E-7	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957514861011	WITHOUT_CLASSIFICATION	4.248513898909082E-6	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999541542826	WITHOUT_CLASSIFICATION	4.584571740816319E-7	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990848823561	WITHOUT_CLASSIFICATION	9.151176439923746E-7	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974532111193	WITHOUT_CLASSIFICATION	2.54678888065605E-6	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914517934725	WITHOUT_CLASSIFICATION	8.548206527500365E-6	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993464240441	WITHOUT_CLASSIFICATION	6.5357595590044E-7	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978468333507	WITHOUT_CLASSIFICATION	2.153166649244944E-6	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999553066486846	WITHOUT_CLASSIFICATION	4.469335131544061E-5	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9997765157330722	WITHOUT_CLASSIFICATION	2.2348426692773605E-4	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999839897525082	WITHOUT_CLASSIFICATION	1.6010247491771442E-5	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9037922780651658	WITHOUT_CLASSIFICATION	0.09620772193483419	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999869605130148	WITHOUT_CLASSIFICATION	1.3039486985133366E-5	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999999879118	WITHOUT_CLASSIFICATION	1.208824038224372E-11	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999982360842931	WITHOUT_CLASSIFICATION	1.76391570687414E-6	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9999970001372794	WITHOUT_CLASSIFICATION	2.999862720680595E-6	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999999182855223	WITHOUT_CLASSIFICATION	8.171447768969565E-7	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999998795522039	WITHOUT_CLASSIFICATION	1.2044779607625943E-7	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999983164180346	WITHOUT_CLASSIFICATION	1.6835819653279713E-6	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999989729746614	WITHOUT_CLASSIFICATION	1.0270253386041358E-5	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999935541555486	WITHOUT_CLASSIFICATION	6.445844451401453E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999933597381121	WITHOUT_CLASSIFICATION	6.6402618879760785E-6	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999983280869337	WITHOUT_CLASSIFICATION	1.6719130662756893E-6	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999995617145127	WITHOUT_CLASSIFICATION	4.382854873838195E-7	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999877694128568	WITHOUT_CLASSIFICATION	1.223058714319907E-5	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999079343388619	WITHOUT_CLASSIFICATION	9.206566113805697E-5	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9999016247648049	WITHOUT_CLASSIFICATION	9.837523519505643E-5	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9991623247300903	WITHOUT_CLASSIFICATION	8.376752699096672E-4	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952470763769	WITHOUT_CLASSIFICATION	4.752923623148687E-6	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999465025572241	WITHOUT_CLASSIFICATION	5.349744277588474E-5	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973307807993	WITHOUT_CLASSIFICATION	2.6692192007157077E-6	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832298829167	WITHOUT_CLASSIFICATION	1.6770117083294578E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9998884334584072	WITHOUT_CLASSIFICATION	1.1156654159277111E-4	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999422328376	WITHOUT_CLASSIFICATION	5.7767162434089274E-8	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999991904332728	WITHOUT_CLASSIFICATION	8.095667272996074E-7	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999622882641863	WITHOUT_CLASSIFICATION	3.771173581359857E-5	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998970661118	WITHOUT_CLASSIFICATION	1.0293388813278564E-7	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999979832266873	WITHOUT_CLASSIFICATION	2.0167733125868855E-6	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999928994358663	WITHOUT_CLASSIFICATION	7.100564133687705E-6	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999920204652452	WITHOUT_CLASSIFICATION	7.979534754815205E-6	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999971040221	WITHOUT_CLASSIFICATION	2.8959778838429254E-9	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999772813735298	WITHOUT_CLASSIFICATION	2.2718626470111052E-5	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999992867869476	WITHOUT_CLASSIFICATION	7.132130524013999E-7	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999984397200701	WITHOUT_CLASSIFICATION	1.5602799299015948E-6	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998066303494622	WITHOUT_CLASSIFICATION	1.9336965053775047E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999982360842931	WITHOUT_CLASSIFICATION	1.76391570687414E-6	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998804745064594	WITHOUT_CLASSIFICATION	1.19525493540468E-4	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999335637967	WITHOUT_CLASSIFICATION	6.643620329434691E-8	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999994571648766	WITHOUT_CLASSIFICATION	5.428351234127868E-7	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999719807003254	WITHOUT_CLASSIFICATION	2.8019299674556353E-5	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999811221750761	WITHOUT_CLASSIFICATION	1.8877824923948855E-5	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.999998954951661	WITHOUT_CLASSIFICATION	1.0450483389950667E-6	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9998884334584072	WITHOUT_CLASSIFICATION	1.1156654159277111E-4	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9992462003009136	WITHOUT_CLASSIFICATION	7.537996990863608E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999992510892153	WITHOUT_CLASSIFICATION	7.489107846705474E-7	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999657638854949	WITHOUT_CLASSIFICATION	3.423611450505747E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999817191798014	WITHOUT_CLASSIFICATION	1.8280820198552923E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999750308289067	WITHOUT_CLASSIFICATION	2.496917109325395E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999877100556	WITHOUT_CLASSIFICATION	1.2289944413192118E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999987626167972	WITHOUT_CLASSIFICATION	1.2373832027856165E-6	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999999902033133	WITHOUT_CLASSIFICATION	9.796686703916977E-8	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999996766966173	WITHOUT_CLASSIFICATION	3.2330338269893144E-7	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999884023710883	WITHOUT_CLASSIFICATION	1.1597628911595613E-5	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999469119659	WITHOUT_CLASSIFICATION	5.308803413383809E-8	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999984294500836	WITHOUT_CLASSIFICATION	1.5705499163994538E-5	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999872902375	WITHOUT_CLASSIFICATION	1.2709762441462744E-8	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9999974222838314	WITHOUT_CLASSIFICATION	2.577716168640074E-6	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.999993892909964	WITHOUT_CLASSIFICATION	6.107090035971059E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999962826002771	WITHOUT_CLASSIFICATION	3.717399722902827E-6	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999976669806	WITHOUT_CLASSIFICATION	2.333019400711094E-8	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999998122607023	WITHOUT_CLASSIFICATION	1.877392976199297E-7	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.999999694642577	WITHOUT_CLASSIFICATION	3.053574229590165E-7	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999924178056557	WITHOUT_CLASSIFICATION	7.58219434432662E-6	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999851112768384	WITHOUT_CLASSIFICATION	1.488872316154104E-5	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999984493142217	WITHOUT_CLASSIFICATION	1.5506857783641557E-6	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999998344981922	WITHOUT_CLASSIFICATION	1.6550180775499507E-7	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.970058830435337	WITHOUT_CLASSIFICATION	0.02994116956466303	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999984622032437	WITHOUT_CLASSIFICATION	1.5377967562913152E-6	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998523263541	WITHOUT_CLASSIFICATION	1.4767364585941706E-7	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999919852003869	WITHOUT_CLASSIFICATION	8.01479961309974E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999982360842931	WITHOUT_CLASSIFICATION	1.76391570687414E-6	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.999069367837547	WITHOUT_CLASSIFICATION	9.30632162453089E-4	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.99999984352777	WITHOUT_CLASSIFICATION	1.5647222994241003E-7	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9987953199537289	WITHOUT_CLASSIFICATION	0.0012046800462711437	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999970078612626	WITHOUT_CLASSIFICATION	2.9921387374015067E-6	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999824532162259	WITHOUT_CLASSIFICATION	1.7546783774004128E-5	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999830703100748	WITHOUT_CLASSIFICATION	1.69296899251717E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999982360842931	WITHOUT_CLASSIFICATION	1.76391570687414E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999951294236542	WITHOUT_CLASSIFICATION	4.870576345805746E-6	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999976669806	WITHOUT_CLASSIFICATION	2.333019400711094E-8	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9992681562924298	WITHOUT_CLASSIFICATION	7.318437075700947E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999962826002771	WITHOUT_CLASSIFICATION	3.717399722902827E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998142033141	WITHOUT_CLASSIFICATION	1.8579668601220586E-7	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9997145066903529	WITHOUT_CLASSIFICATION	2.8549330964706905E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999997429033931	WITHOUT_CLASSIFICATION	2.5709660687641114E-7	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999657638854949	WITHOUT_CLASSIFICATION	3.423611450505747E-5	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999817191798014	WITHOUT_CLASSIFICATION	1.8280820198552923E-5	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999750308289067	WITHOUT_CLASSIFICATION	2.496917109325395E-5	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999998958796497	WITHOUT_CLASSIFICATION	1.0412035025400434E-7	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9999965385828836	WITHOUT_CLASSIFICATION	3.4614171164868003E-6	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999997915752217	WITHOUT_CLASSIFICATION	2.084247782434592E-7	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999962826002771	WITHOUT_CLASSIFICATION	3.717399722902827E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998142033141	WITHOUT_CLASSIFICATION	1.8579668601220586E-7	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999982360842931	WITHOUT_CLASSIFICATION	1.76391570687414E-6	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999877100556	WITHOUT_CLASSIFICATION	1.2289944413192118E-8	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999987626167972	WITHOUT_CLASSIFICATION	1.2373832027856165E-6	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999999902033133	WITHOUT_CLASSIFICATION	9.796686703916977E-8	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997877075291	WITHOUT_CLASSIFICATION	2.122924710079857E-7	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905286098646	WITHOUT_CLASSIFICATION	9.471390135492716E-6	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999995924876633	WITHOUT_CLASSIFICATION	4.0751233653618565E-7	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999418318386	WITHOUT_CLASSIFICATION	5.816816138650041E-8	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999995039259074	WITHOUT_CLASSIFICATION	4.960740926121136E-7	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999790575071161	WITHOUT_CLASSIFICATION	2.0942492883829254E-5	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999553066486846	WITHOUT_CLASSIFICATION	4.469335131544061E-5	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9998966422608659	WITHOUT_CLASSIFICATION	1.0335773913395213E-4	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999997132550975	WITHOUT_CLASSIFICATION	2.867449025598851E-7	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999990250781553	WITHOUT_CLASSIFICATION	9.749218447267227E-7	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999830485803	WITHOUT_CLASSIFICATION	1.6951419644123325E-8	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999039090783	WITHOUT_CLASSIFICATION	9.60909216737871E-8	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890084186462	WITHOUT_CLASSIFICATION	1.099158135366344E-5	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929407510384	WITHOUT_CLASSIFICATION	7.05924896167477E-6	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999541542826	WITHOUT_CLASSIFICATION	4.584571740816319E-7	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999039090783	WITHOUT_CLASSIFICATION	9.60909216737871E-8	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999996940089265	WITHOUT_CLASSIFICATION	3.0599107342013075E-7	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999978674969883	WITHOUT_CLASSIFICATION	2.132503011714566E-6	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999944560358159	WITHOUT_CLASSIFICATION	5.5439641840848864E-5	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597337326723	WITHOUT_CLASSIFICATION	4.026626732756892E-5	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999863174705983	WITHOUT_CLASSIFICATION	1.3682529401848762E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999789713648062	WITHOUT_CLASSIFICATION	2.102863519382722E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990848823561	WITHOUT_CLASSIFICATION	9.151176439923746E-7	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993464240441	WITHOUT_CLASSIFICATION	6.5357595590044E-7	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999971040221	WITHOUT_CLASSIFICATION	2.8959778838429254E-9	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999994719751102	WITHOUT_CLASSIFICATION	5.280248897363602E-7	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999994373158879	WITHOUT_CLASSIFICATION	5.626841121321174E-7	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999997995093182	WITHOUT_CLASSIFICATION	2.004906819043602E-7	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999500809496	WITHOUT_CLASSIFICATION	4.991905035850546E-8	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999995199294753	WITHOUT_CLASSIFICATION	4.800705246547991E-7	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999584117475	WITHOUT_CLASSIFICATION	4.158825253754635E-8	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999988854343761	WITHOUT_CLASSIFICATION	1.1145656238523223E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999955023423284	WITHOUT_CLASSIFICATION	4.497657671593846E-6	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999997638321	WITHOUT_CLASSIFICATION	2.3616784955528197E-10	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999990748583688	WITHOUT_CLASSIFICATION	9.251416312014501E-6	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999897180718	WITHOUT_CLASSIFICATION	1.0281928251889243E-8	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999939419658773	WITHOUT_CLASSIFICATION	6.058034122622242E-6	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999936310577213	WITHOUT_CLASSIFICATION	6.368942278666999E-6	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998840668166	WITHOUT_CLASSIFICATION	1.1593318344734657E-7	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999986435699202	WITHOUT_CLASSIFICATION	1.3564300798193466E-6	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990154202731	WITHOUT_CLASSIFICATION	9.84579726925498E-7	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695603709658	WITHOUT_CLASSIFICATION	3.0439629034107223E-5	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998473269255	WITHOUT_CLASSIFICATION	1.5267307450112453E-7	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999859736931197	WITHOUT_CLASSIFICATION	1.402630688036477E-5	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999559965218318	WITHOUT_CLASSIFICATION	4.400347816817094E-5	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999571203334	WITHOUT_CLASSIFICATION	4.287966659447794E-7	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996141095306	WITHOUT_CLASSIFICATION	3.858904693650819E-7	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992924610049	WITHOUT_CLASSIFICATION	7.075389950064977E-7	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994951437107	WITHOUT_CLASSIFICATION	5.048562893450678E-7	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999958566157721	WITHOUT_CLASSIFICATION	4.1433842278786845E-6	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999998599974567	WITHOUT_CLASSIFICATION	1.4000254331658862E-7	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995523238552	WITHOUT_CLASSIFICATION	4.476761448352937E-7	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999953396480099	WITHOUT_CLASSIFICATION	4.660351990074367E-6	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999626136339	WITHOUT_CLASSIFICATION	3.738636612223706E-8	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948467545906	WITHOUT_CLASSIFICATION	5.153245409430059E-6	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999997108300355	WITHOUT_CLASSIFICATION	2.8916996450675415E-7	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999981861633543	WITHOUT_CLASSIFICATION	1.8138366457367308E-6	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999701454953878	WITHOUT_CLASSIFICATION	2.9854504612202357E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999849864154328	WITHOUT_CLASSIFICATION	1.5013584567187694E-5	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999899993418246	WITHOUT_CLASSIFICATION	1.0000658175328626E-5	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999951008070871	WITHOUT_CLASSIFICATION	4.899192912899039E-6	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999992039469624	WITHOUT_CLASSIFICATION	7.960530377190631E-7	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999903706109721	WITHOUT_CLASSIFICATION	9.6293890279266E-6	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999998789941489	WITHOUT_CLASSIFICATION	1.210058511765717E-7	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999998188973056	WITHOUT_CLASSIFICATION	1.8110269440814723E-7	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999235658880295	WITHOUT_CLASSIFICATION	7.643411197049673E-4	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999986397119084	WITHOUT_CLASSIFICATION	1.3602880915757893E-6	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999974412741	WITHOUT_CLASSIFICATION	2.5587257960083653E-9	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999996645757234	WITHOUT_CLASSIFICATION	3.354242766558759E-7	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999987212478784	WITHOUT_CLASSIFICATION	1.278752121605663E-6	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999997935972199	WITHOUT_CLASSIFICATION	2.0640278005239642E-7	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999421412391	WITHOUT_CLASSIFICATION	5.7858760818373354E-8	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999992586279033	WITHOUT_CLASSIFICATION	7.413720967350193E-7	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999999972643838	WITHOUT_CLASSIFICATION	2.7356161939110612E-8	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999998750256943	WITHOUT_CLASSIFICATION	1.249743056966606E-7	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999989629929363	WITHOUT_CLASSIFICATION	1.037007063720932E-6	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9994475031510055	WITHOUT_CLASSIFICATION	5.524968489944467E-4	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999995979306495	WITHOUT_CLASSIFICATION	4.020693504309184E-7	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999886105068895	WITHOUT_CLASSIFICATION	1.1389493110473448E-5	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999999988210444	WITHOUT_CLASSIFICATION	1.1789555955677247E-8	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999975136057694	WITHOUT_CLASSIFICATION	2.4863942306228937E-6	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999978886746855	WITHOUT_CLASSIFICATION	2.1113253145242166E-6	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999971281741639	WITHOUT_CLASSIFICATION	2.8718258360255485E-6	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999946387180227	WITHOUT_CLASSIFICATION	5.36128197723857E-6	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999988473791402	WITHOUT_CLASSIFICATION	1.1526208597630142E-6	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998208804161	WITHOUT_CLASSIFICATION	1.7911958389160202E-7	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998017342868	WITHOUT_CLASSIFICATION	1.982657131772608E-7	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999811828742557	WITHOUT_CLASSIFICATION	1.881712574422204E-5	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999707048632976	WITHOUT_CLASSIFICATION	2.9295136702364733E-5	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9992924835580628	WITHOUT_CLASSIFICATION	7.075164419372193E-4	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999774881959437	WITHOUT_CLASSIFICATION	2.251180405624205E-5	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999681460175575	WITHOUT_CLASSIFICATION	3.1853982442564545E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999991091211893	WITHOUT_CLASSIFICATION	8.908788106672269E-7	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999755990827	WITHOUT_CLASSIFICATION	2.4400917275810807E-8	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999955984147598	WITHOUT_CLASSIFICATION	4.401585240246882E-6	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999973915118817	WITHOUT_CLASSIFICATION	2.6084881182060924E-6	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9989509481371945	WITHOUT_CLASSIFICATION	0.0010490518628054376	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9995713004213925	WITHOUT_CLASSIFICATION	4.2869957860752197E-4	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999959229906874	WITHOUT_CLASSIFICATION	4.077009312691125E-6	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.7564897139801043	WITHOUT_CLASSIFICATION	0.24351028601989572	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999952678298	WITHOUT_CLASSIFICATION	4.732170182643492E-9	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9996353180193029	WITHOUT_CLASSIFICATION	3.6468198069703226E-4	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999948449474	WITHOUT_CLASSIFICATION	5.155052628461859E-9	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999964384222	WITHOUT_CLASSIFICATION	3.561577748990767E-9	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999938888620665	WITHOUT_CLASSIFICATION	6.1111379335200495E-6	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999768303162	WITHOUT_CLASSIFICATION	2.3169683726254906E-8	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999997786845305	WITHOUT_CLASSIFICATION	2.2131546949469533E-7	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999997942390893	WITHOUT_CLASSIFICATION	2.0576091069957167E-6	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999641668831954	WITHOUT_CLASSIFICATION	3.583311680455177E-5	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999984438388454	WITHOUT_CLASSIFICATION	1.5561611546625114E-6	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999992926630841	WITHOUT_CLASSIFICATION	7.073369160298992E-7	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999913561535	WITHOUT_CLASSIFICATION	8.643846484204778E-9	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999981065854	WITHOUT_CLASSIFICATION	1.893414630602902E-9	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999990717694488	WITHOUT_CLASSIFICATION	9.282305511468323E-7	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999924317759965	WITHOUT_CLASSIFICATION	7.5682240035966015E-6	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999996699416421	WITHOUT_CLASSIFICATION	3.300583578264647E-7	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999996124018317	WITHOUT_CLASSIFICATION	3.875981682480836E-7	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999987990576403	WITHOUT_CLASSIFICATION	1.2009423596120207E-6	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999148560085166	WITHOUT_CLASSIFICATION	8.514399148341973E-5	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999998370628539	WITHOUT_CLASSIFICATION	1.6293714607148262E-7	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999995206781627	WITHOUT_CLASSIFICATION	4.793218373582403E-7	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9999308860703797	WITHOUT_CLASSIFICATION	6.91139296202924E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999998420218477	WITHOUT_CLASSIFICATION	1.5797815236895192E-7	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999998376758125	WITHOUT_CLASSIFICATION	1.6232418756780862E-7	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.998974158120033	WITHOUT_CLASSIFICATION	0.0010258418799670309	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9998869422961387	WITHOUT_CLASSIFICATION	1.1305770386120482E-4	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999994522813225	WITHOUT_CLASSIFICATION	5.47718677465086E-7	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.998974158120033	WITHOUT_CLASSIFICATION	0.0010258418799670309	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998510570984	WITHOUT_CLASSIFICATION	1.48942901609446E-7	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999998199858342	WITHOUT_CLASSIFICATION	1.8001416585475935E-7	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999993647196099	WITHOUT_CLASSIFICATION	6.352803900760004E-7	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999546892288499	WITHOUT_CLASSIFICATION	4.5310771150113815E-5	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999998374127008	WITHOUT_CLASSIFICATION	1.6258729923376373E-7	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999668347054	WITHOUT_CLASSIFICATION	3.3165294623288454E-8	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999879088111785	WITHOUT_CLASSIFICATION	1.2091188821436881E-5	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999374588991	WITHOUT_CLASSIFICATION	6.254110088886144E-8	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999996936903833	WITHOUT_CLASSIFICATION	3.0630961659536255E-7	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999973348297599	WITHOUT_CLASSIFICATION	2.6651702401877783E-6	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999931032085964	WITHOUT_CLASSIFICATION	6.896791403671101E-6	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999765861464611	WITHOUT_CLASSIFICATION	2.3413853538901888E-5	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999948599468	WITHOUT_CLASSIFICATION	5.140053160135318E-9	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999983209895	WITHOUT_CLASSIFICATION	1.6790104776037449E-9	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999995406494449	WITHOUT_CLASSIFICATION	4.593505551918325E-7	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999974873136406	WITHOUT_CLASSIFICATION	2.512686359453176E-6	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999462174779834	WITHOUT_CLASSIFICATION	5.378252201663813E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999462174779834	WITHOUT_CLASSIFICATION	5.378252201663813E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999984542914943	WITHOUT_CLASSIFICATION	1.545708505699078E-6	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9998226679073288	WITHOUT_CLASSIFICATION	1.7733209267123282E-4	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999737470803942	WITHOUT_CLASSIFICATION	2.625291960581431E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9999932677285736	WITHOUT_CLASSIFICATION	6.732271426498872E-6	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999963908659564	WITHOUT_CLASSIFICATION	3.6091340436885576E-6	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.956627738616666	WITHOUT_CLASSIFICATION	0.043372261383334124	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.999957736986223	WITHOUT_CLASSIFICATION	4.2263013776974406E-5	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999210054439	WITHOUT_CLASSIFICATION	7.899455617553481E-8	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999971907562998	WITHOUT_CLASSIFICATION	2.809243700171156E-6	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9993523496885788	WITHOUT_CLASSIFICATION	6.476503114211365E-4	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999978633199358	WITHOUT_CLASSIFICATION	2.1366800641025853E-6	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999989819228	WITHOUT_CLASSIFICATION	1.0180772086981573E-9	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999650860746	WITHOUT_CLASSIFICATION	3.4913925443985895E-8	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999994600405915	WITHOUT_CLASSIFICATION	5.399594085334997E-7	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999941700138	WITHOUT_CLASSIFICATION	5.829986167437634E-9	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999986435699202	WITHOUT_CLASSIFICATION	1.3564300798193466E-6	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999994199950368	WITHOUT_CLASSIFICATION	5.800049631280144E-7	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999218085213	WITHOUT_CLASSIFICATION	7.819147865577144E-8	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999981323895545	WITHOUT_CLASSIFICATION	1.8676104455451843E-6	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999973321492782	WITHOUT_CLASSIFICATION	2.667850721869656E-6	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999682730724	WITHOUT_CLASSIFICATION	3.17269276699433E-8	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.999998495982392	WITHOUT_CLASSIFICATION	1.5040176079183867E-6	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999393215292	WITHOUT_CLASSIFICATION	6.067847076280295E-8	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999999520272153	WITHOUT_CLASSIFICATION	4.797278469276195E-7	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999561726414	WITHOUT_CLASSIFICATION	4.382735860581231E-8	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999109300733	WITHOUT_CLASSIFICATION	8.906992669666068E-8	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999881882902	WITHOUT_CLASSIFICATION	1.1811709823431997E-8	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999940963531345	WITHOUT_CLASSIFICATION	5.9036468654377125E-6	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.999998368175905	WITHOUT_CLASSIFICATION	1.6318240948760681E-6	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9999677269982062	WITHOUT_CLASSIFICATION	3.227300179364072E-5	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999975552324066	WITHOUT_CLASSIFICATION	2.4447675933981334E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999996339071603	WITHOUT_CLASSIFICATION	3.660928397928468E-7	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9999271567144944	WITHOUT_CLASSIFICATION	7.284328550561436E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999997278528183	WITHOUT_CLASSIFICATION	2.7214718165050145E-7	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999980542058088	WITHOUT_CLASSIFICATION	1.945794191150415E-6	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999996217827676	WITHOUT_CLASSIFICATION	3.7821723236405124E-7	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999959242311264	WITHOUT_CLASSIFICATION	4.075768873599529E-6	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999987611556397	WITHOUT_CLASSIFICATION	1.2388443602880451E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999994274682817	WITHOUT_CLASSIFICATION	5.725317182375854E-7	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998275827204157	WITHOUT_CLASSIFICATION	1.724172795842989E-4	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.999999469872647	WITHOUT_CLASSIFICATION	5.301273529997695E-7	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999997789952128	WITHOUT_CLASSIFICATION	2.2100478723431637E-7	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9923340256916285	WITHOUT_CLASSIFICATION	0.007665974308371407	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999990887942374	WITHOUT_CLASSIFICATION	9.112057625969097E-7	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999948083652137	WITHOUT_CLASSIFICATION	5.1916347863257225E-6	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999994268258275	WITHOUT_CLASSIFICATION	5.731741724960993E-7	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999641362913381	WITHOUT_CLASSIFICATION	3.58637086619212E-5	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999501306900055	WITHOUT_CLASSIFICATION	4.9869309994460175E-5	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999521225571647	WITHOUT_CLASSIFICATION	4.787744283534034E-5	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9997377767040512	WITHOUT_CLASSIFICATION	2.6222329594887566E-4	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999909632483392	WITHOUT_CLASSIFICATION	9.036751660763743E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999955023423284	WITHOUT_CLASSIFICATION	4.497657671593846E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999955023423284	WITHOUT_CLASSIFICATION	4.497657671593846E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999974523746521	WITHOUT_CLASSIFICATION	2.547625347978911E-6	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999913375593267	WITHOUT_CLASSIFICATION	8.66244067333239E-6	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9987727014199649	WITHOUT_CLASSIFICATION	0.00122729858003515	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994161213005667	WITHOUT_CLASSIFICATION	5.838786994332521E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9987727014199649	WITHOUT_CLASSIFICATION	0.00122729858003515	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999989553572841	WITHOUT_CLASSIFICATION	1.044642715941787E-6	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999956059518256	WITHOUT_CLASSIFICATION	4.3940481744573125E-6	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9999975425142046	WITHOUT_CLASSIFICATION	2.45748579534195E-6	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999972292866298	WITHOUT_CLASSIFICATION	2.770713370153299E-6	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999999208729156	WITHOUT_CLASSIFICATION	7.912708438849329E-7	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999994045380068	WITHOUT_CLASSIFICATION	5.954619932023929E-6	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998947738125	WITHOUT_CLASSIFICATION	1.0522618756599861E-7	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9999461591901239	WITHOUT_CLASSIFICATION	5.384080987602743E-5	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999794064509	WITHOUT_CLASSIFICATION	2.059354914222137E-8	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999909426473268	WITHOUT_CLASSIFICATION	9.057352673332959E-6	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999992095356732	WITHOUT_CLASSIFICATION	7.90464326780416E-7	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999979340495405	WITHOUT_CLASSIFICATION	2.0659504594676797E-6	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999992039691076	WITHOUT_CLASSIFICATION	7.96030892416809E-7	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9998574926124871	WITHOUT_CLASSIFICATION	1.425073875128495E-4	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999997016804	WITHOUT_CLASSIFICATION	2.983195883023773E-10	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999960518079217	WITHOUT_CLASSIFICATION	3.948192078252009E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999975138445708	WITHOUT_CLASSIFICATION	2.4861554292804183E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999975138445708	WITHOUT_CLASSIFICATION	2.4861554292804183E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999961899494861	WITHOUT_CLASSIFICATION	3.810050513910429E-6	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999994945982442	WITHOUT_CLASSIFICATION	5.05401755728074E-7	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999996441718981	WITHOUT_CLASSIFICATION	3.5582810185463795E-7	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999993922292626	WITHOUT_CLASSIFICATION	6.077707374961869E-7	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999999620943832	WITHOUT_CLASSIFICATION	3.7905616803027023E-7	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999992299963351	WITHOUT_CLASSIFICATION	7.700036648765125E-7	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999668313876618	WITHOUT_CLASSIFICATION	3.3168612338122914E-5	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999983517391888	WITHOUT_CLASSIFICATION	1.648260811138626E-6	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999996633939523	WITHOUT_CLASSIFICATION	3.3660604771271904E-7	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999987531848815	WITHOUT_CLASSIFICATION	1.2468151184677257E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999976209833489	WITHOUT_CLASSIFICATION	2.379016651157671E-6	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999975576652	WITHOUT_CLASSIFICATION	2.442334745562604E-9	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999546591662	WITHOUT_CLASSIFICATION	4.5340833703861554E-8	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999828617922951	WITHOUT_CLASSIFICATION	1.7138207704886494E-5	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999984660359245	WITHOUT_CLASSIFICATION	1.5339640755551279E-6	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999490665437	WITHOUT_CLASSIFICATION	5.093345630510848E-8	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999993220810958	WITHOUT_CLASSIFICATION	6.779189042178305E-7	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999991496802771	WITHOUT_CLASSIFICATION	8.503197229291521E-7	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999985448329813	WITHOUT_CLASSIFICATION	1.4551670187491918E-6	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999974681112	WITHOUT_CLASSIFICATION	2.5318889121189583E-9	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999828599740523	WITHOUT_CLASSIFICATION	1.7140025947650084E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999858793309	WITHOUT_CLASSIFICATION	1.412066908778406E-8	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999186572639	WITHOUT_CLASSIFICATION	8.134273609619202E-8	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999979140208	WITHOUT_CLASSIFICATION	2.085979126091438E-9	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999992953632548	WITHOUT_CLASSIFICATION	7.046367451623916E-7	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999993588918806	WITHOUT_CLASSIFICATION	6.411081193657226E-7	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999994221131259	WITHOUT_CLASSIFICATION	5.778868742431545E-7	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999539131835214	WITHOUT_CLASSIFICATION	4.608681647848254E-5	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.999991601235394	WITHOUT_CLASSIFICATION	8.398764606006547E-6	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999671063964449	WITHOUT_CLASSIFICATION	3.2893603555101356E-5	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999989368771356	WITHOUT_CLASSIFICATION	1.0631228644471614E-6	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999985023404576	WITHOUT_CLASSIFICATION	1.4976595424148868E-6	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999841168224438	WITHOUT_CLASSIFICATION	1.5883177556164348E-5	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999996917048586	WITHOUT_CLASSIFICATION	3.0829514144264997E-7	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999944004543628	WITHOUT_CLASSIFICATION	5.599545637215846E-6	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999911453649	WITHOUT_CLASSIFICATION	8.854635148257252E-9	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998664010609	WITHOUT_CLASSIFICATION	1.3359893914039467E-7	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999964878081069	WITHOUT_CLASSIFICATION	3.5121918931965613E-6	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999852881229325	WITHOUT_CLASSIFICATION	1.4711877067484329E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999982288179406	WITHOUT_CLASSIFICATION	1.771182059393292E-5	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999979645247966	WITHOUT_CLASSIFICATION	2.0354752033864425E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896643227316	WITHOUT_CLASSIFICATION	1.0335677268470913E-5	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9999971730591324	WITHOUT_CLASSIFICATION	2.82694086767974E-6	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999000445923545	WITHOUT_CLASSIFICATION	9.995540764540731E-5	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999995049903077	WITHOUT_CLASSIFICATION	4.950096923632737E-7	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.994762620849887	WITHOUT_CLASSIFICATION	0.005237379150113004	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9375845882782626	WITHOUT_CLASSIFICATION	0.06241541172173743	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999976037652	WITHOUT_CLASSIFICATION	2.3962347539013853E-9	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999980940555814	WITHOUT_CLASSIFICATION	1.9059444185740889E-6	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999796334745158	WITHOUT_CLASSIFICATION	2.0366525484167032E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921340853819	WITHOUT_CLASSIFICATION	7.865914618059118E-6	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999685159083	WITHOUT_CLASSIFICATION	3.148409162286299E-8	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9993343144076869	WITHOUT_CLASSIFICATION	6.65685592313103E-4	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999999616805739	WITHOUT_CLASSIFICATION	3.83194260617254E-8	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999971992585159	WITHOUT_CLASSIFICATION	2.800741484029876E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999951294236542	WITHOUT_CLASSIFICATION	4.870576345805746E-6	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999951294236542	WITHOUT_CLASSIFICATION	4.870576345805746E-6	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999997089363301	WITHOUT_CLASSIFICATION	2.9106367002530774E-7	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998578885256749	WITHOUT_CLASSIFICATION	1.421114743250897E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999941019991747	WITHOUT_CLASSIFICATION	5.898000825236685E-6	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999868980894441	WITHOUT_CLASSIFICATION	1.3101910555903949E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999986233823001	WITHOUT_CLASSIFICATION	1.3766176999099394E-6	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999115586564	WITHOUT_CLASSIFICATION	8.844134348201678E-8	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999997459655506	WITHOUT_CLASSIFICATION	2.5403444939391253E-6	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999994139284548	WITHOUT_CLASSIFICATION	5.860715450899229E-7	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999999854452197	WITHOUT_CLASSIFICATION	1.455478036554623E-8	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999988459575654	WITHOUT_CLASSIFICATION	1.154042434625256E-6	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999329575598	WITHOUT_CLASSIFICATION	6.704244013101253E-8	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999968343492195	WITHOUT_CLASSIFICATION	3.1656507805750056E-6	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999980681546671	WITHOUT_CLASSIFICATION	1.9318453328613753E-6	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999969272966592	WITHOUT_CLASSIFICATION	3.072703340732726E-6	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999998712944812	WITHOUT_CLASSIFICATION	1.287055188335208E-7	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999384166803318	WITHOUT_CLASSIFICATION	6.158331966822286E-5	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999216286100452	WITHOUT_CLASSIFICATION	7.83713899547375E-5	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999855850966372	WITHOUT_CLASSIFICATION	1.4414903362925621E-5	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9999900021269583	WITHOUT_CLASSIFICATION	9.997873041555962E-6	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9995035590173723	WITHOUT_CLASSIFICATION	4.964409826277203E-4	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.999963972455126	WITHOUT_CLASSIFICATION	3.602754487399046E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999555863497	WITHOUT_CLASSIFICATION	4.44136503301247E-8	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998842518006112	WITHOUT_CLASSIFICATION	1.1574819938884948E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998632509949295	WITHOUT_CLASSIFICATION	1.3674900507044577E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9994007641385307	WITHOUT_CLASSIFICATION	5.99235861469151E-4	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.995452859179351	WITHOUT_CLASSIFICATION	0.0045471408206490095	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.7377767988858082	WITHOUT_CLASSIFICATION	0.26222320111419184	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999997074078478	WITHOUT_CLASSIFICATION	2.925921521676135E-7	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999312643898224	WITHOUT_CLASSIFICATION	6.873561017759914E-4	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999989068433632	WITHOUT_CLASSIFICATION	1.093156636791923E-6	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998632509949295	WITHOUT_CLASSIFICATION	1.3674900507044577E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999953346948922	WITHOUT_CLASSIFICATION	4.665305107813737E-6	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999984913726873	WITHOUT_CLASSIFICATION	1.508627312705646E-5	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9999799880596544	WITHOUT_CLASSIFICATION	2.0011940345507853E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999910535126505	WITHOUT_CLASSIFICATION	8.94648734953037E-6	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999988928745	WITHOUT_CLASSIFICATION	1.1071255673739447E-9	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999996660890388	WITHOUT_CLASSIFICATION	3.33910961141892E-7	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999727539851042	WITHOUT_CLASSIFICATION	2.7246014895839512E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.99999992809301	WITHOUT_CLASSIFICATION	7.190699003127044E-8	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999998643576183	WITHOUT_CLASSIFICATION	1.3564238166582504E-7	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9999910535126505	WITHOUT_CLASSIFICATION	8.94648734953037E-6	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999999214668546	WITHOUT_CLASSIFICATION	7.853314542089189E-8	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.99999992809301	WITHOUT_CLASSIFICATION	7.190699003127044E-8	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9990721523498491	WITHOUT_CLASSIFICATION	9.278476501508E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999907802494624	WITHOUT_CLASSIFICATION	9.21975053757854E-6	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999998013970376	WITHOUT_CLASSIFICATION	1.9860296226525085E-7	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999976209833489	WITHOUT_CLASSIFICATION	2.379016651157671E-6	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999763155233	WITHOUT_CLASSIFICATION	2.3684476664257457E-8	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999990808563171	WITHOUT_CLASSIFICATION	9.191436828714788E-7	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999997504997997	WITHOUT_CLASSIFICATION	2.495002003207158E-7	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998539122672723	WITHOUT_CLASSIFICATION	1.460877327277317E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999999967844284	WITHOUT_CLASSIFICATION	3.215571596008581E-8	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999986995377982	WITHOUT_CLASSIFICATION	1.300462201769714E-6	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999990977261	WITHOUT_CLASSIFICATION	9.02274000183542E-10	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999995578181623	WITHOUT_CLASSIFICATION	4.4218183773819985E-7	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999997686884514	WITHOUT_CLASSIFICATION	2.313115484308462E-7	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999996036773433	WITHOUT_CLASSIFICATION	3.9632265665364303E-7	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999737401696525	WITHOUT_CLASSIFICATION	2.625983034753191E-5	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999889237787	WITHOUT_CLASSIFICATION	1.1076221210056594E-8	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999998466826148	WITHOUT_CLASSIFICATION	1.5331738511337585E-7	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9999089072669899	WITHOUT_CLASSIFICATION	9.109273301008819E-5	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999836521855	WITHOUT_CLASSIFICATION	1.6347814593055226E-8	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999988224741059	WITHOUT_CLASSIFICATION	1.1775258941624508E-6	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999994950920209	WITHOUT_CLASSIFICATION	5.049079790967426E-7	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999965675170082	WITHOUT_CLASSIFICATION	3.4324829918902727E-6	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999974810520427	WITHOUT_CLASSIFICATION	2.518947957273616E-6	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999804713987726	WITHOUT_CLASSIFICATION	1.952860122747368E-5	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999774173454723	WITHOUT_CLASSIFICATION	2.2582654527708842E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999108262692	WITHOUT_CLASSIFICATION	8.917373085655802E-8	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999955824533024	WITHOUT_CLASSIFICATION	4.417546697586711E-6	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999993175967432	WITHOUT_CLASSIFICATION	6.82403256796013E-7	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999711135036059	WITHOUT_CLASSIFICATION	2.888649639407942E-5	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999980183925657	WITHOUT_CLASSIFICATION	1.981607434329965E-6	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.999979098487758	WITHOUT_CLASSIFICATION	2.090151224205863E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997666999499	WITHOUT_CLASSIFICATION	2.3330005015421018E-7	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999220541687368	WITHOUT_CLASSIFICATION	7.794583126321649E-5	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9998779603094509	WITHOUT_CLASSIFICATION	1.2203969054915037E-4	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.999997654186328	WITHOUT_CLASSIFICATION	2.3458136719446605E-6	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999944335575086	WITHOUT_CLASSIFICATION	5.56644249144579E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999523455575	WITHOUT_CLASSIFICATION	4.7654442535817094E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999523455575	WITHOUT_CLASSIFICATION	4.7654442535817094E-8	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999990572205	WITHOUT_CLASSIFICATION	9.427794507847487E-10	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999995285899354	WITHOUT_CLASSIFICATION	4.714100645983782E-6	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999996480576727	WITHOUT_CLASSIFICATION	3.519423272884938E-7	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999904448964105	WITHOUT_CLASSIFICATION	9.555103589443612E-6	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999985358083616	WITHOUT_CLASSIFICATION	1.4641916383579695E-6	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9995072397748271	WITHOUT_CLASSIFICATION	4.927602251727942E-4	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999917084176924	WITHOUT_CLASSIFICATION	8.291582307649796E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.99999745061721	WITHOUT_CLASSIFICATION	2.549382789917359E-6	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998390988906	WITHOUT_CLASSIFICATION	1.609011093422393E-7	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999995224608241	WITHOUT_CLASSIFICATION	4.775391759052431E-6	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9996290695538053	WITHOUT_CLASSIFICATION	3.709304461946946E-4	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999922857046	WITHOUT_CLASSIFICATION	7.714295447537569E-9	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999962953388448	WITHOUT_CLASSIFICATION	3.704661155266847E-6	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999523455575	WITHOUT_CLASSIFICATION	4.7654442535817094E-8	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999932153793479	WITHOUT_CLASSIFICATION	6.784620652117042E-6	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999701289306604	WITHOUT_CLASSIFICATION	2.9871069339616482E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9988873013356651	WITHOUT_CLASSIFICATION	0.001112698664334908	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999998504025764	WITHOUT_CLASSIFICATION	1.4959742347667582E-7	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999985740627139	WITHOUT_CLASSIFICATION	1.425937286106072E-6	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999951864153059	WITHOUT_CLASSIFICATION	4.813584694011787E-6	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999895350188507	WITHOUT_CLASSIFICATION	1.046498114938521E-5	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999995136579	WITHOUT_CLASSIFICATION	4.863420724249124E-10	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999984117111611	WITHOUT_CLASSIFICATION	1.5882888388671231E-6	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999997482230085	WITHOUT_CLASSIFICATION	2.5177699147282463E-7	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999995568733012	WITHOUT_CLASSIFICATION	4.431266988009249E-6	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997666999499	WITHOUT_CLASSIFICATION	2.3330005015421018E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999523455575	WITHOUT_CLASSIFICATION	4.7654442535817094E-8	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999642959777403	WITHOUT_CLASSIFICATION	3.5704022259749513E-5	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999997160004801	WITHOUT_CLASSIFICATION	2.8399951985319877E-7	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999967830381924	WITHOUT_CLASSIFICATION	3.216961807613631E-6	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999376606612443	WITHOUT_CLASSIFICATION	6.233933875566351E-5	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999999999272856	WITHOUT_CLASSIFICATION	7.271439379945106E-10	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999909128868777	WITHOUT_CLASSIFICATION	9.087113122230151E-6	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942819412687	WITHOUT_CLASSIFICATION	5.718058731252445E-6	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999994257550197	WITHOUT_CLASSIFICATION	5.742449803615789E-7	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999998108177184	WITHOUT_CLASSIFICATION	1.8918228159904995E-6	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999331108625883	WITHOUT_CLASSIFICATION	6.68891374117055E-5	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999956958180927	WITHOUT_CLASSIFICATION	4.304181907303602E-6	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999240897426183	WITHOUT_CLASSIFICATION	7.591025738177636E-5	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999985205097	WITHOUT_CLASSIFICATION	1.4794903723258268E-9	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999998119116573	WITHOUT_CLASSIFICATION	1.8808834270536638E-6	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999989553572841	WITHOUT_CLASSIFICATION	1.044642715941787E-6	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999970865839485	WITHOUT_CLASSIFICATION	2.913416051502755E-6	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999996136519091	WITHOUT_CLASSIFICATION	3.86348090907768E-7	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999123079121558	WITHOUT_CLASSIFICATION	8.769208784423145E-5	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999988782328094	WITHOUT_CLASSIFICATION	1.1217671906538137E-6	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999864048977186	WITHOUT_CLASSIFICATION	1.3595102281346334E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999995949714234	WITHOUT_CLASSIFICATION	4.050285764950574E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999995949714234	WITHOUT_CLASSIFICATION	4.050285764950574E-7	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999997556114086	WITHOUT_CLASSIFICATION	2.4438859140368336E-6	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999435070022	WITHOUT_CLASSIFICATION	5.649299781498527E-8	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999965954714833	WITHOUT_CLASSIFICATION	3.40452851678349E-6	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999763105686027	WITHOUT_CLASSIFICATION	2.3689431397370127E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999916185833853	WITHOUT_CLASSIFICATION	8.38141661473531E-6	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999953523392904	WITHOUT_CLASSIFICATION	4.64766070959987E-6	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999999299447385	WITHOUT_CLASSIFICATION	7.005526149782622E-7	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999259040654854	WITHOUT_CLASSIFICATION	7.409593451458806E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999259040654854	WITHOUT_CLASSIFICATION	7.409593451458806E-5	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999882709416412	WITHOUT_CLASSIFICATION	1.1729058358775922E-5	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999999244097945	WITHOUT_CLASSIFICATION	7.559020555477719E-8	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999733095788212	WITHOUT_CLASSIFICATION	2.6690421178757954E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999787493675651	WITHOUT_CLASSIFICATION	2.125063243491745E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999787493675651	WITHOUT_CLASSIFICATION	2.125063243491745E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999787493675651	WITHOUT_CLASSIFICATION	2.125063243491745E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999823653581076	WITHOUT_CLASSIFICATION	1.7634641892409686E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999981681333261	WITHOUT_CLASSIFICATION	1.8318666739886131E-6	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999495286984	WITHOUT_CLASSIFICATION	5.0471301534776404E-8	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.7274824744148243	WITHOUT_CLASSIFICATION	0.2725175255851758	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999802685558314	WITHOUT_CLASSIFICATION	1.9731444168573284E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999523455575	WITHOUT_CLASSIFICATION	4.7654442535817094E-8	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999523455575	WITHOUT_CLASSIFICATION	4.7654442535817094E-8	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.999657856589255	WITHOUT_CLASSIFICATION	3.421434107450447E-4	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999979575657	WITHOUT_CLASSIFICATION	2.042434312459178E-9	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9995436052656588	WITHOUT_CLASSIFICATION	4.5639473434119543E-4	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999993308384179	WITHOUT_CLASSIFICATION	6.691615822514443E-7	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999999824965287	WITHOUT_CLASSIFICATION	1.7503471291958928E-7	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9987073173237497	WITHOUT_CLASSIFICATION	0.0012926826762502332	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999987363555637	WITHOUT_CLASSIFICATION	1.2636444363970322E-6	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9993880909935595	WITHOUT_CLASSIFICATION	6.119090064404802E-4	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999924311089545	WITHOUT_CLASSIFICATION	7.568891045467059E-6	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999668286830905	WITHOUT_CLASSIFICATION	3.3171316909596186E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999995674069949	WITHOUT_CLASSIFICATION	4.3259300502579144E-7	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999502069102567	WITHOUT_CLASSIFICATION	4.979308974338534E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999971131761806	WITHOUT_CLASSIFICATION	2.886823819441087E-6	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999971131761806	WITHOUT_CLASSIFICATION	2.886823819441087E-6	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999982011531202	WITHOUT_CLASSIFICATION	1.7988468797968784E-6	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999982011531202	WITHOUT_CLASSIFICATION	1.7988468797968784E-6	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999986458634963	WITHOUT_CLASSIFICATION	1.3541365036145856E-6	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999969286502204	WITHOUT_CLASSIFICATION	3.0713497795858588E-6	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999969286502204	WITHOUT_CLASSIFICATION	3.0713497795858588E-6	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999985118919832	WITHOUT_CLASSIFICATION	1.4881080167453662E-6	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999943105466402	WITHOUT_CLASSIFICATION	5.6894533597818845E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998545171759	WITHOUT_CLASSIFICATION	1.4548282420833803E-7	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999995949714234	WITHOUT_CLASSIFICATION	4.050285764950574E-7	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999995880848547	WITHOUT_CLASSIFICATION	4.11915145256137E-7	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999943105466402	WITHOUT_CLASSIFICATION	5.6894533597818845E-6	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999969021813	WITHOUT_CLASSIFICATION	3.0978186057202446E-9	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999938318084579	WITHOUT_CLASSIFICATION	6.168191542164484E-6	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999979104327106	WITHOUT_CLASSIFICATION	2.0895672893958364E-6	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999986615934618	WITHOUT_CLASSIFICATION	1.3384065382140405E-6	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999996418857	WITHOUT_CLASSIFICATION	3.581143232076578E-10	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999999209463593	WITHOUT_CLASSIFICATION	7.905364075753864E-8	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999999501031457	WITHOUT_CLASSIFICATION	4.989685430729772E-7	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9782535988700037	WITHOUT_CLASSIFICATION	0.021746401129996276	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9969179544284601	WITHOUT_CLASSIFICATION	0.003082045571539809	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999969248266158	WITHOUT_CLASSIFICATION	3.0751733840620577E-6	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999997161856475	WITHOUT_CLASSIFICATION	2.838143524323716E-7	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999934538414736	WITHOUT_CLASSIFICATION	6.546158526414715E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999955274472783	WITHOUT_CLASSIFICATION	4.472552721699108E-6	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.999999625093668	WITHOUT_CLASSIFICATION	3.749063320393097E-7	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9468868811867337	WITHOUT_CLASSIFICATION	0.05311311881326641	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9998907945645449	WITHOUT_CLASSIFICATION	1.0920543545501103E-4	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999487815994	WITHOUT_CLASSIFICATION	5.121840069491092E-8	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999981737059469	WITHOUT_CLASSIFICATION	1.8262940531040634E-6	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999981737059469	WITHOUT_CLASSIFICATION	1.8262940531040634E-6	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999997949913683	WITHOUT_CLASSIFICATION	2.050086315956597E-7	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999994042417139	WITHOUT_CLASSIFICATION	5.957582861207576E-7	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999999712091	WITHOUT_CLASSIFICATION	2.8790899953505916E-8	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999979369375649	WITHOUT_CLASSIFICATION	2.063062435062037E-6	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999997449213499	WITHOUT_CLASSIFICATION	2.5507865009790235E-7	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999541505840601	WITHOUT_CLASSIFICATION	4.5849415939768245E-5	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999742401251	WITHOUT_CLASSIFICATION	2.575987488300345E-8	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999991582143423	WITHOUT_CLASSIFICATION	8.417856576815075E-7	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999938645786727	WITHOUT_CLASSIFICATION	6.135421327348965E-6	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999998983821917	WITHOUT_CLASSIFICATION	1.0161780827544958E-7	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999996590370315	WITHOUT_CLASSIFICATION	3.409629685039882E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999240897426183	WITHOUT_CLASSIFICATION	7.591025738177636E-5	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999656206161	WITHOUT_CLASSIFICATION	3.4379383918076816E-8	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999056803969715	WITHOUT_CLASSIFICATION	9.431960302853397E-5	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999901514007644	WITHOUT_CLASSIFICATION	9.848599235623617E-6	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999858289567782	WITHOUT_CLASSIFICATION	1.4171043221637824E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999985792151419	WITHOUT_CLASSIFICATION	1.4207848580100385E-6	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999985792151419	WITHOUT_CLASSIFICATION	1.4207848580100385E-6	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999995290940307	WITHOUT_CLASSIFICATION	4.7090596940962075E-7	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9995978024521534	WITHOUT_CLASSIFICATION	4.0219754784661657E-4	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9985929421542261	WITHOUT_CLASSIFICATION	0.0014070578457738897	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9993944058744743	WITHOUT_CLASSIFICATION	6.055941255257613E-4	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9996298700574149	WITHOUT_CLASSIFICATION	3.701299425851188E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999767092468936	WITHOUT_CLASSIFICATION	2.3290753106370078E-5	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998216335989	WITHOUT_CLASSIFICATION	1.7836640115671313E-7	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999916464026802	WITHOUT_CLASSIFICATION	8.3535973197985E-6	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999882274137166	WITHOUT_CLASSIFICATION	1.177258628324837E-5	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999999234393121	WITHOUT_CLASSIFICATION	7.65606879053689E-7	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999968082483468	WITHOUT_CLASSIFICATION	3.191751653299165E-6	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999916464026802	WITHOUT_CLASSIFICATION	8.3535973197985E-6	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999988578577067	WITHOUT_CLASSIFICATION	1.1421422932934601E-5	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999764892308	WITHOUT_CLASSIFICATION	2.351076923269833E-8	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999996106612904	WITHOUT_CLASSIFICATION	3.893387096079034E-7	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.999939921460176	WITHOUT_CLASSIFICATION	6.007853982388655E-5	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999998756538571	WITHOUT_CLASSIFICATION	1.2434614300622014E-7	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998086062446	WITHOUT_CLASSIFICATION	1.913937553544591E-7	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999916539848	WITHOUT_CLASSIFICATION	8.346015213157539E-9	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999996250211998	WITHOUT_CLASSIFICATION	3.749788002449917E-7	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999994801894946	WITHOUT_CLASSIFICATION	5.198105055317841E-7	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998656746524132	WITHOUT_CLASSIFICATION	1.3432534758679108E-4	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999604680077162	WITHOUT_CLASSIFICATION	3.9531992283834925E-5	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999995755189274	WITHOUT_CLASSIFICATION	4.244810725928568E-6	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999998906478408	WITHOUT_CLASSIFICATION	1.0935215921711072E-7	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999995599330165	WITHOUT_CLASSIFICATION	4.4006698346520745E-7	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999963029147897	WITHOUT_CLASSIFICATION	3.697085210193986E-6	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999281963287	WITHOUT_CLASSIFICATION	7.180367137020346E-8	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999779538163	WITHOUT_CLASSIFICATION	2.2046183690185265E-8	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9998353509951545	WITHOUT_CLASSIFICATION	1.6464900484547716E-4	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9996437291894943	WITHOUT_CLASSIFICATION	3.562708105056821E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999965176888	WITHOUT_CLASSIFICATION	3.482311224966345E-9	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999972510056467	WITHOUT_CLASSIFICATION	2.7489943532814805E-6	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999894140336507	WITHOUT_CLASSIFICATION	1.058596634914698E-5	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9948592077192258	WITHOUT_CLASSIFICATION	0.005140792280774227	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9998711167863933	WITHOUT_CLASSIFICATION	1.2888321360676977E-4	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999931942976	WITHOUT_CLASSIFICATION	6.805702420527783E-9	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.999967773187628	WITHOUT_CLASSIFICATION	3.222681237199499E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999990914242718	WITHOUT_CLASSIFICATION	9.085757283431677E-7	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999994118430904	WITHOUT_CLASSIFICATION	5.881569096806979E-7	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999994674589062	WITHOUT_CLASSIFICATION	5.325410937279962E-7	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999991967167002	WITHOUT_CLASSIFICATION	8.032832997109378E-7	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999376247969	WITHOUT_CLASSIFICATION	6.237520315096532E-8	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999978113939482	WITHOUT_CLASSIFICATION	2.1886060518039124E-5	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999478619924304	WITHOUT_CLASSIFICATION	5.213800756960875E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999999997383341	WITHOUT_CLASSIFICATION	2.616659111490369E-9	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998271460009	WITHOUT_CLASSIFICATION	1.7285399900893277E-7	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999997202822382	WITHOUT_CLASSIFICATION	2.7971776182314916E-7	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998533837763	WITHOUT_CLASSIFICATION	1.4661622374905978E-7	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999991081482921	WITHOUT_CLASSIFICATION	8.918517080526431E-7	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999879963858	WITHOUT_CLASSIFICATION	1.2003614161701346E-8	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999970049491119	WITHOUT_CLASSIFICATION	2.9950508881019713E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999997366644388	WITHOUT_CLASSIFICATION	2.633355612406154E-7	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999948299821156	WITHOUT_CLASSIFICATION	5.170017884446762E-6	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999997130894798	WITHOUT_CLASSIFICATION	2.8691052028273923E-7	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999872964497	WITHOUT_CLASSIFICATION	1.2703550232157438E-8	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999987723023569	WITHOUT_CLASSIFICATION	1.2276976430920483E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999994491869395	WITHOUT_CLASSIFICATION	5.508130605734895E-7	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999910457501096	WITHOUT_CLASSIFICATION	8.954249890362922E-6	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999998306653952	WITHOUT_CLASSIFICATION	1.693346047926398E-7	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999994275240035	WITHOUT_CLASSIFICATION	5.724759964466181E-7	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999816256940064	WITHOUT_CLASSIFICATION	1.837430599359967E-5	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972464786873	WITHOUT_CLASSIFICATION	2.7535213126230306E-6	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997989925126	WITHOUT_CLASSIFICATION	2.010074874717882E-7	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999978648945	WITHOUT_CLASSIFICATION	2.1351056007927115E-9	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999482608553867	WITHOUT_CLASSIFICATION	5.1739144613392334E-5	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999326675254	WITHOUT_CLASSIFICATION	6.733247457926418E-8	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999862416182909	WITHOUT_CLASSIFICATION	1.3758381709196722E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999142937255155	WITHOUT_CLASSIFICATION	8.570627448450297E-5	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999708378171909	WITHOUT_CLASSIFICATION	2.9162182809126865E-5	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999997266930792	WITHOUT_CLASSIFICATION	2.7330692081621567E-7	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999581882019108	WITHOUT_CLASSIFICATION	4.181179808918534E-5	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999968476388382	WITHOUT_CLASSIFICATION	3.152361161855579E-6	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999999026839824	WITHOUT_CLASSIFICATION	9.731601749975728E-8	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9988434909491907	WITHOUT_CLASSIFICATION	0.0011565090508092928	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.7740009018543087	DEFECT	0.22599909814569133	WITHOUT_CLASSIFICATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999544840018522	WITHOUT_CLASSIFICATION	4.551599814781577E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999970338799202	WITHOUT_CLASSIFICATION	2.9661200797032046E-6	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972464786873	WITHOUT_CLASSIFICATION	2.7535213126230306E-6	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999999803180222	WITHOUT_CLASSIFICATION	1.9681977813911936E-7	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999912012175097	WITHOUT_CLASSIFICATION	8.798782490296382E-6	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998794621773	WITHOUT_CLASSIFICATION	1.2053782270234035E-7	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999994865670119	WITHOUT_CLASSIFICATION	5.134329880572817E-7	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998220262588561	WITHOUT_CLASSIFICATION	1.7797374114383974E-4	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999006727394786	WITHOUT_CLASSIFICATION	9.932726052142735E-5	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999882274137166	WITHOUT_CLASSIFICATION	1.177258628324837E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999996450895912	WITHOUT_CLASSIFICATION	3.549104089293006E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998271460009	WITHOUT_CLASSIFICATION	1.7285399900893277E-7	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9781949108756618	WITHOUT_CLASSIFICATION	0.021805089124338175	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999995382873811	WITHOUT_CLASSIFICATION	4.6171261886153287E-7	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999737522239	WITHOUT_CLASSIFICATION	2.6247776132019104E-8	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999769471485	WITHOUT_CLASSIFICATION	2.3052851563433423E-8	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999992957099871	WITHOUT_CLASSIFICATION	7.042900129509276E-7	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999914878703808	WITHOUT_CLASSIFICATION	8.512129619198996E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9995892791074127	WITHOUT_CLASSIFICATION	4.1072089258728484E-4	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999966857784822	WITHOUT_CLASSIFICATION	3.3142215176347373E-6	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9980574825353856	WITHOUT_CLASSIFICATION	0.0019425174646144812	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999981920264397	WITHOUT_CLASSIFICATION	1.8079735602611355E-6	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998600004355	WITHOUT_CLASSIFICATION	1.399995644829604E-7	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999996528761161	WITHOUT_CLASSIFICATION	3.4712388387538357E-7	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999611654095045	WITHOUT_CLASSIFICATION	3.8834590495518945E-5	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999611654095045	WITHOUT_CLASSIFICATION	3.8834590495518945E-5	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998565290661	WITHOUT_CLASSIFICATION	1.4347093383925835E-7	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998015503418	WITHOUT_CLASSIFICATION	1.9844965821920878E-7	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999765136667	WITHOUT_CLASSIFICATION	2.348633330501454E-8	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999997812736	WITHOUT_CLASSIFICATION	2.1872625353434638E-10	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999997242694929	WITHOUT_CLASSIFICATION	2.75730507137605E-7	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999970622617542	WITHOUT_CLASSIFICATION	2.9377382457706085E-6	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999556615062299	WITHOUT_CLASSIFICATION	4.433849377012786E-5	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999992329628449	WITHOUT_CLASSIFICATION	7.67037155127915E-7	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999999785471891	WITHOUT_CLASSIFICATION	2.1452810895937545E-7	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999788855220578	WITHOUT_CLASSIFICATION	2.1114477942190786E-5	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999222488359427	WITHOUT_CLASSIFICATION	7.775116405734045E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9999955689323059	WITHOUT_CLASSIFICATION	4.431067694109726E-6	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999876283909288	WITHOUT_CLASSIFICATION	1.237160907113195E-5	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998198008733	WITHOUT_CLASSIFICATION	1.8019912663736208E-7	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9996345749107918	WITHOUT_CLASSIFICATION	3.654250892082192E-4	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999903123501696	WITHOUT_CLASSIFICATION	9.687649830450186E-6	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999998300723708	WITHOUT_CLASSIFICATION	1.6992762920656914E-7	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999880023190522	WITHOUT_CLASSIFICATION	1.1997680947775935E-5	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999998731836	WITHOUT_CLASSIFICATION	1.2681640761970418E-9	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999805347387832	WITHOUT_CLASSIFICATION	1.9465261216761377E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999831861894	WITHOUT_CLASSIFICATION	1.681381054408459E-8	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9996458192330053	WITHOUT_CLASSIFICATION	3.5418076699473606E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999020270782	WITHOUT_CLASSIFICATION	9.797292184429026E-8	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999984117375402	WITHOUT_CLASSIFICATION	1.5882624597682345E-6	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999967468611879	WITHOUT_CLASSIFICATION	3.2531388120279356E-6	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999999184827064	WITHOUT_CLASSIFICATION	8.151729364253518E-8	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948378226191	WITHOUT_CLASSIFICATION	5.162177380831832E-6	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998824849714864	WITHOUT_CLASSIFICATION	1.1751502851353668E-4	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999998744205785	WITHOUT_CLASSIFICATION	1.2557942149709874E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999975884715403	WITHOUT_CLASSIFICATION	2.411528459688472E-6	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999452452282548	WITHOUT_CLASSIFICATION	5.4754771745316176E-5	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.999998105862633	WITHOUT_CLASSIFICATION	1.894137366901258E-6	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999993586841304	WITHOUT_CLASSIFICATION	6.413158695130429E-7	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999675150395	WITHOUT_CLASSIFICATION	3.248496044849719E-8	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999922008780383	WITHOUT_CLASSIFICATION	7.799121961634337E-6	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999998093720542	WITHOUT_CLASSIFICATION	1.9062794566121575E-7	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998118524784	WITHOUT_CLASSIFICATION	1.881475215448537E-7	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999959775291094	WITHOUT_CLASSIFICATION	4.022470890620389E-6	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999985154020116	WITHOUT_CLASSIFICATION	1.4845979884732863E-6	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999997245589887	WITHOUT_CLASSIFICATION	2.754410112784222E-7	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999988122807802	WITHOUT_CLASSIFICATION	1.1877192196990135E-6	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610581922377	WITHOUT_CLASSIFICATION	3.8941807762321006E-5	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999680827205	WITHOUT_CLASSIFICATION	3.191727955408915E-8	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999750786026044	WITHOUT_CLASSIFICATION	2.492139739558404E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999994554150426	WITHOUT_CLASSIFICATION	5.445849572650294E-7	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999994410634437	WITHOUT_CLASSIFICATION	5.589365561662327E-7	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999944560358159	WITHOUT_CLASSIFICATION	5.5439641840848864E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9907652207000521	WITHOUT_CLASSIFICATION	0.009234779299947975	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999471906756	WITHOUT_CLASSIFICATION	5.280932434680898E-8	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999893050139	WITHOUT_CLASSIFICATION	1.0694986209421327E-8	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999994991710125	WITHOUT_CLASSIFICATION	5.008289875433478E-7	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998715711745599	WITHOUT_CLASSIFICATION	1.2842882544003244E-4	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999959157817	WITHOUT_CLASSIFICATION	4.084218278280976E-9	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999574033341	WITHOUT_CLASSIFICATION	4.259666583290404E-8	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999984834385375	WITHOUT_CLASSIFICATION	1.5165614624884926E-6	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999971433892666	WITHOUT_CLASSIFICATION	2.8566107335194237E-6	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9997533135601558	WITHOUT_CLASSIFICATION	2.4668643984408555E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999926944596453	WITHOUT_CLASSIFICATION	7.305540354652996E-6	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999986056742228	WITHOUT_CLASSIFICATION	1.3943257771784761E-6	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999971792427021	WITHOUT_CLASSIFICATION	2.820757297809379E-6	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999252789379587	WITHOUT_CLASSIFICATION	7.472106204131325E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999960745726201	WITHOUT_CLASSIFICATION	3.925427379900334E-6	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999979939209106	WITHOUT_CLASSIFICATION	2.006079089307693E-6	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999998018742084	WITHOUT_CLASSIFICATION	1.9812579157825462E-7	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999998863004433	WITHOUT_CLASSIFICATION	1.1369955667568955E-7	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999972106919738	WITHOUT_CLASSIFICATION	2.789308026093741E-6	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999799160692705	WITHOUT_CLASSIFICATION	2.008393072945878E-5	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997381629937	WITHOUT_CLASSIFICATION	2.618370062128061E-7	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999985887160417	WITHOUT_CLASSIFICATION	1.4112839582351696E-6	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999413775852	WITHOUT_CLASSIFICATION	5.862241480161708E-8	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999997068846134	WITHOUT_CLASSIFICATION	2.9311538652689776E-7	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999413775852	WITHOUT_CLASSIFICATION	5.862241480161708E-8	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999939086477412	WITHOUT_CLASSIFICATION	6.09135225885897E-6	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999985787734817	WITHOUT_CLASSIFICATION	1.4212265181448203E-6	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999979209432542	WITHOUT_CLASSIFICATION	2.079056745801532E-6	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999492686483	WITHOUT_CLASSIFICATION	5.07313517101838E-8	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999997481525883	WITHOUT_CLASSIFICATION	2.518474117030896E-7	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999999636922716	WITHOUT_CLASSIFICATION	3.630772840458451E-7	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999945602884376	WITHOUT_CLASSIFICATION	5.43971156233973E-6	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999995662358727	WITHOUT_CLASSIFICATION	4.337641273741126E-7	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9997694885633251	WITHOUT_CLASSIFICATION	2.305114366748016E-4	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998628978232	WITHOUT_CLASSIFICATION	1.3710217681002053E-7	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999997614072041	WITHOUT_CLASSIFICATION	2.3859279578594906E-7	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999989484087842	WITHOUT_CLASSIFICATION	1.0515912158101462E-6	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999999999737009	WITHOUT_CLASSIFICATION	2.629909782093814E-10	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9997899138176192	WITHOUT_CLASSIFICATION	2.100861823807657E-4	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999708297427768	WITHOUT_CLASSIFICATION	2.9170257223261E-5	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999370751619	WITHOUT_CLASSIFICATION	6.292483807030037E-8	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999995618281403	WITHOUT_CLASSIFICATION	4.3817185972648193E-7	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999999477029649	WITHOUT_CLASSIFICATION	5.229703509541325E-7	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999992327002	WITHOUT_CLASSIFICATION	7.672998081344287E-10	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999676502216	WITHOUT_CLASSIFICATION	3.234977836803755E-8	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999993993277645	WITHOUT_CLASSIFICATION	6.006722355343644E-7	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999999269159647	WITHOUT_CLASSIFICATION	7.308403530631965E-8	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9982799210053551	WITHOUT_CLASSIFICATION	0.001720078994644814	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999985525241706	WITHOUT_CLASSIFICATION	1.44747582943637E-6	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998162978644	WITHOUT_CLASSIFICATION	1.8370213567891604E-7	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993106047576582	WITHOUT_CLASSIFICATION	6.893952423416694E-4	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9998540176606854	WITHOUT_CLASSIFICATION	1.459823393146505E-4	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999911457113457	WITHOUT_CLASSIFICATION	8.854288654397682E-6	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999668348806	WITHOUT_CLASSIFICATION	3.3165119451902825E-8	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999749361181886	WITHOUT_CLASSIFICATION	2.5063881811444272E-5	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999893376494794	WITHOUT_CLASSIFICATION	1.0662350520591116E-5	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9632464985678802	WITHOUT_CLASSIFICATION	0.03675350143211973	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999348704223868	WITHOUT_CLASSIFICATION	6.512957761316626E-5	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.999480657770138	WITHOUT_CLASSIFICATION	5.193422298620955E-4	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999758763944181	WITHOUT_CLASSIFICATION	2.4123605581835247E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999891286006996	WITHOUT_CLASSIFICATION	1.0871399300348123E-5	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9999983828616062	WITHOUT_CLASSIFICATION	1.617138393706296E-6	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999762009837	WITHOUT_CLASSIFICATION	2.3799016243589783E-8	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.999809781324598	WITHOUT_CLASSIFICATION	1.9021867540194333E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999607957571	WITHOUT_CLASSIFICATION	3.9204242786645476E-8	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999983218128171	WITHOUT_CLASSIFICATION	1.678187182954698E-6	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9999413341061791	WITHOUT_CLASSIFICATION	5.8665893820903313E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9987953199537289	WITHOUT_CLASSIFICATION	0.0012046800462711437	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993106047576582	WITHOUT_CLASSIFICATION	6.893952423416694E-4	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9997246241364257	WITHOUT_CLASSIFICATION	2.753758635742877E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999952075072375	WITHOUT_CLASSIFICATION	4.7924927624228076E-6	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9962726604398557	WITHOUT_CLASSIFICATION	0.0037273395601442934	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999980278795324	WITHOUT_CLASSIFICATION	1.9721204675878777E-5	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9999978013908095	WITHOUT_CLASSIFICATION	2.1986091905396173E-6	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999988814776509	WITHOUT_CLASSIFICATION	1.1185223490817737E-6	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999998768477054	WITHOUT_CLASSIFICATION	1.2315229451984185E-7	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.958537094186704	DEFECT	0.04146290581329606	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998878479115	WITHOUT_CLASSIFICATION	1.1215208848048862E-7	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999539925488798	WITHOUT_CLASSIFICATION	4.600745112011146E-5	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999919530553959	WITHOUT_CLASSIFICATION	8.046944604112747E-6	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999999996132325	WITHOUT_CLASSIFICATION	3.8676749505151524E-9	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999692585946113	WITHOUT_CLASSIFICATION	3.074140538870887E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999230594402917	WITHOUT_CLASSIFICATION	7.694055970830495E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999429403225	WITHOUT_CLASSIFICATION	5.705967750574978E-8	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999968379157	WITHOUT_CLASSIFICATION	3.162084242372915E-9	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999490785788	WITHOUT_CLASSIFICATION	5.092142115020283E-8	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999997818809548	WITHOUT_CLASSIFICATION	2.1811904524221373E-7	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.999997728348579	WITHOUT_CLASSIFICATION	2.271651420937783E-6	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9997246241364257	WITHOUT_CLASSIFICATION	2.753758635742877E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999991361548928	WITHOUT_CLASSIFICATION	8.638451072022591E-6	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998539677479413	WITHOUT_CLASSIFICATION	1.460322520586627E-4	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999968754982445	WITHOUT_CLASSIFICATION	3.1245017554921613E-6	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999232382586	WITHOUT_CLASSIFICATION	7.676174132132977E-8	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999870949799176	WITHOUT_CLASSIFICATION	1.290502008244655E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997751189562417	WITHOUT_CLASSIFICATION	2.2488104375837089E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997751189562417	WITHOUT_CLASSIFICATION	2.2488104375837089E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.99999842144195	WITHOUT_CLASSIFICATION	1.5785580501440145E-6	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997751189562417	WITHOUT_CLASSIFICATION	2.2488104375837089E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9997751189562417	WITHOUT_CLASSIFICATION	2.2488104375837089E-4	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9971542026436865	WITHOUT_CLASSIFICATION	0.0028457973563135257	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9995913106162724	WITHOUT_CLASSIFICATION	4.086893837276901E-4	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999549374915	WITHOUT_CLASSIFICATION	4.5062508490285255E-8	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999997763409672	WITHOUT_CLASSIFICATION	2.236590328894573E-7	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997521882904604	WITHOUT_CLASSIFICATION	2.478117095395653E-4	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999953759413	WITHOUT_CLASSIFICATION	4.624058607172271E-9	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.997032276682384	WITHOUT_CLASSIFICATION	0.002967723317616016	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999977883947	WITHOUT_CLASSIFICATION	2.2116053297715427E-9	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999677866824174	WITHOUT_CLASSIFICATION	3.221331758265062E-5	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.999990189331994	WITHOUT_CLASSIFICATION	9.810668005964033E-6	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999887648719191	WITHOUT_CLASSIFICATION	1.123512808083594E-5	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.999972848244371	WITHOUT_CLASSIFICATION	2.7151755628924992E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999989089177654	WITHOUT_CLASSIFICATION	1.091082234613946E-6	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999992187780017	WITHOUT_CLASSIFICATION	7.812219982379856E-7	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.99999964867787	WITHOUT_CLASSIFICATION	3.513221299662907E-7	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9908353789257038	WITHOUT_CLASSIFICATION	0.009164621074296114	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999974523746521	WITHOUT_CLASSIFICATION	2.547625347978911E-6	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999441420731563	WITHOUT_CLASSIFICATION	5.585792684378763E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9997315114154632	WITHOUT_CLASSIFICATION	2.68488584536827E-4	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999984484843374	WITHOUT_CLASSIFICATION	1.5515156626731997E-6	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.999997488601803	WITHOUT_CLASSIFICATION	2.511398196905546E-6	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999899795801096	WITHOUT_CLASSIFICATION	1.0020419890427311E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999974523746521	WITHOUT_CLASSIFICATION	2.547625347978911E-6	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9998540176606854	WITHOUT_CLASSIFICATION	1.459823393146505E-4	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.999983786253292	WITHOUT_CLASSIFICATION	1.621374670802058E-5	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994951437107	WITHOUT_CLASSIFICATION	5.048562893450678E-7	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995523238552	WITHOUT_CLASSIFICATION	4.476761448352937E-7	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9999970182254796	WITHOUT_CLASSIFICATION	2.9817745204446126E-6	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998559356650981	WITHOUT_CLASSIFICATION	1.4406433490189065E-4	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999995308236846	WITHOUT_CLASSIFICATION	4.691763154303992E-7	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9980929367562895	WITHOUT_CLASSIFICATION	0.0019070632437104317	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999993072324493	WITHOUT_CLASSIFICATION	6.927675505631841E-7	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999910283401	WITHOUT_CLASSIFICATION	8.971659830305778E-9	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.999989738278707	WITHOUT_CLASSIFICATION	1.0261721292981435E-5	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999958766034962	WITHOUT_CLASSIFICATION	4.123396503741213E-6	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999987464736648	WITHOUT_CLASSIFICATION	1.2535263351961092E-6	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999785206979	WITHOUT_CLASSIFICATION	2.1479302123402205E-8	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9997277161777339	WITHOUT_CLASSIFICATION	2.7228382226602774E-4	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999900138811	WITHOUT_CLASSIFICATION	9.986118861637923E-9	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999892222442348	WITHOUT_CLASSIFICATION	1.0777755765267553E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999775878657059	WITHOUT_CLASSIFICATION	2.2412134294080307E-5	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999975232179942	WITHOUT_CLASSIFICATION	2.4767820057851767E-6	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.99998859418556	WITHOUT_CLASSIFICATION	1.1405814439896744E-5	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999341070856541	WITHOUT_CLASSIFICATION	6.589291434587538E-5	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999998808254686	WITHOUT_CLASSIFICATION	1.1917453137827918E-7	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999997430726115	WITHOUT_CLASSIFICATION	2.569273884736418E-7	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999993072324493	WITHOUT_CLASSIFICATION	6.927675505631841E-7	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.999999937133018	WITHOUT_CLASSIFICATION	6.286698197566278E-8	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999996699516737	WITHOUT_CLASSIFICATION	3.3004832643434387E-7	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999968313437615	WITHOUT_CLASSIFICATION	3.1686562384994044E-6	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999993166724431	WITHOUT_CLASSIFICATION	6.833275568724373E-7	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999419174026	WITHOUT_CLASSIFICATION	5.808259747531521E-8	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9999947579007249	WITHOUT_CLASSIFICATION	5.2420992750935355E-6	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999913725000408	WITHOUT_CLASSIFICATION	8.627499959149674E-6	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9999996456871763	WITHOUT_CLASSIFICATION	3.5431282373709053E-7	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999990606890478	WITHOUT_CLASSIFICATION	9.393109522361792E-7	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9999403810324977	WITHOUT_CLASSIFICATION	5.961896750218057E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999283954992	WITHOUT_CLASSIFICATION	7.160450081079484E-8	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999985766943766	WITHOUT_CLASSIFICATION	1.4233056233931768E-6	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999970812376558	WITHOUT_CLASSIFICATION	2.9187623442552497E-6	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999999101679	WITHOUT_CLASSIFICATION	8.983220345786817E-11	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999920663247465	WITHOUT_CLASSIFICATION	7.933675253504411E-6	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999825649520299	WITHOUT_CLASSIFICATION	1.7435047970097487E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999997301074898	WITHOUT_CLASSIFICATION	2.698925102616109E-7	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999283954992	WITHOUT_CLASSIFICATION	7.160450081079484E-8	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999853643767	WITHOUT_CLASSIFICATION	1.4635623282211516E-8	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9997988676653681	WITHOUT_CLASSIFICATION	2.0113233463206433E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999956270216734	WITHOUT_CLASSIFICATION	4.372978326551331E-6	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999996529009343	WITHOUT_CLASSIFICATION	3.470990656709125E-7	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999432073967194	WITHOUT_CLASSIFICATION	5.679260328051003E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999998771533402	WITHOUT_CLASSIFICATION	1.2284665991256163E-7	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999920663247465	WITHOUT_CLASSIFICATION	7.933675253504411E-6	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999901788758073	WITHOUT_CLASSIFICATION	9.82112419257028E-6	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999811493132588	WITHOUT_CLASSIFICATION	1.8850686741308877E-5	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999012612217	WITHOUT_CLASSIFICATION	9.873877826077587E-8	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963549109526	WITHOUT_CLASSIFICATION	3.6450890474705194E-6	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976947957461	WITHOUT_CLASSIFICATION	2.3052042539540963E-6	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997452678738	WITHOUT_CLASSIFICATION	2.5473212612427926E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999994756206332	WITHOUT_CLASSIFICATION	5.243793667773607E-7	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999994756206332	WITHOUT_CLASSIFICATION	5.243793667773607E-7	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999939503561394	WITHOUT_CLASSIFICATION	6.049643860737443E-6	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999994434603092	WITHOUT_CLASSIFICATION	5.56539690714786E-7	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9999947793078767	WITHOUT_CLASSIFICATION	5.220692123345659E-6	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9998729829535071	WITHOUT_CLASSIFICATION	1.270170464929094E-4	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9949833868201085	WITHOUT_CLASSIFICATION	0.005016613179891615	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978838151252	WITHOUT_CLASSIFICATION	2.1161848748416083E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822102063642	WITHOUT_CLASSIFICATION	1.778979363582386E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929318035086	WITHOUT_CLASSIFICATION	7.06819649147281E-6	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999993013390464	WITHOUT_CLASSIFICATION	6.986609537069856E-7	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988059563385	WITHOUT_CLASSIFICATION	1.1940436615053624E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978838151252	WITHOUT_CLASSIFICATION	2.1161848748416083E-6	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822102063642	WITHOUT_CLASSIFICATION	1.778979363582386E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929318035086	WITHOUT_CLASSIFICATION	7.06819649147281E-6	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999984880438416	WITHOUT_CLASSIFICATION	1.5119561583209925E-6	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9999965107291069	WITHOUT_CLASSIFICATION	3.4892708931130276E-6	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999942895733127	WITHOUT_CLASSIFICATION	5.710426687283263E-6	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999999461912216	WITHOUT_CLASSIFICATION	5.3808778422015694E-8	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999996556809031	WITHOUT_CLASSIFICATION	3.443190968895231E-7	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9990333488840404	WITHOUT_CLASSIFICATION	9.666511159595968E-4	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999938943054701	WITHOUT_CLASSIFICATION	6.105694529899094E-6	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999998872567673	WITHOUT_CLASSIFICATION	1.127432326498333E-7	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999943474064106	WITHOUT_CLASSIFICATION	5.652593589448391E-6	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999960995624406	WITHOUT_CLASSIFICATION	3.90043755929683E-6	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999783908221	WITHOUT_CLASSIFICATION	2.160917780383297E-8	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9979626787299358	WITHOUT_CLASSIFICATION	0.002037321270064152	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9991774186115744	WITHOUT_CLASSIFICATION	8.2258138842571E-4	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999980691235453	WITHOUT_CLASSIFICATION	1.9308764546714912E-6	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999996417501908	WITHOUT_CLASSIFICATION	3.5824980911041304E-7	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999881620145229	WITHOUT_CLASSIFICATION	1.1837985477174877E-5	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999998911848388	WITHOUT_CLASSIFICATION	1.0881516129819431E-7	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999890183013534	WITHOUT_CLASSIFICATION	1.09816986465067E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999967529557523	WITHOUT_CLASSIFICATION	3.247044247778308E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.999997724371954	WITHOUT_CLASSIFICATION	2.2756280459589817E-6	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999927806157176	WITHOUT_CLASSIFICATION	7.21938428240811E-6	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9988281183497255	WITHOUT_CLASSIFICATION	0.0011718816502745148	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999891710464	WITHOUT_CLASSIFICATION	1.0828953714972129E-8	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999995546030866	WITHOUT_CLASSIFICATION	4.4539691335640603E-7	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999676147195	WITHOUT_CLASSIFICATION	3.2385280357161E-8	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999715554821453	WITHOUT_CLASSIFICATION	2.8444517854698902E-5	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852667318733	WITHOUT_CLASSIFICATION	1.4733268126659777E-5	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999888790049005	WITHOUT_CLASSIFICATION	1.1120995099520107E-5	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999957139981	WITHOUT_CLASSIFICATION	4.286001820928378E-9	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901332195792	WITHOUT_CLASSIFICATION	9.866780420745143E-6	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996355699174861	WITHOUT_CLASSIFICATION	3.644300825139688E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999996699416421	WITHOUT_CLASSIFICATION	3.300583578264647E-7	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999996699416421	WITHOUT_CLASSIFICATION	3.300583578264647E-7	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999513182001	WITHOUT_CLASSIFICATION	4.868179996285424E-8	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999994056555224	WITHOUT_CLASSIFICATION	5.943444776468049E-7	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999999122698015	WITHOUT_CLASSIFICATION	8.77301984995676E-7	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999240897426183	WITHOUT_CLASSIFICATION	7.591025738177636E-5	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.999999959120737	WITHOUT_CLASSIFICATION	4.087926305386463E-8	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999984716597181	WITHOUT_CLASSIFICATION	1.5283402819242294E-6	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999859504700707	WITHOUT_CLASSIFICATION	1.404952992945038E-5	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.999999869748952	WITHOUT_CLASSIFICATION	1.3025104789214974E-7	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999998420218477	WITHOUT_CLASSIFICATION	1.5797815236895192E-7	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998029674066	WITHOUT_CLASSIFICATION	1.9703259325596162E-7	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992987758358	WITHOUT_CLASSIFICATION	7.012241641395665E-7	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992516104572	WITHOUT_CLASSIFICATION	7.483895428710767E-7	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997101065756	WITHOUT_CLASSIFICATION	2.898934243239882E-7	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999470721553	WITHOUT_CLASSIFICATION	5.29278447094328E-8	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999627996215	WITHOUT_CLASSIFICATION	3.720037849301826E-7	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995411595111	WITHOUT_CLASSIFICATION	4.588404888529892E-7	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997873274118	WITHOUT_CLASSIFICATION	2.1267258824451795E-7	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989424313642	WITHOUT_CLASSIFICATION	1.0575686357005262E-6	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988156175109	WITHOUT_CLASSIFICATION	1.184382489104233E-6	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999489890175	WITHOUT_CLASSIFICATION	5.101098249060809E-8	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999049673557	WITHOUT_CLASSIFICATION	9.503264424146393E-8	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9980143429927298	WITHOUT_CLASSIFICATION	0.001985657007270175	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999936628341757	WITHOUT_CLASSIFICATION	6.337165824268368E-6	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999975318121266	WITHOUT_CLASSIFICATION	2.468187873431513E-6	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999999430838729	WITHOUT_CLASSIFICATION	5.69161271088746E-7	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9999978583698912	WITHOUT_CLASSIFICATION	2.1416301088134548E-6	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999999799149691	WITHOUT_CLASSIFICATION	2.008503090844503E-8	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999980815741469	WITHOUT_CLASSIFICATION	1.9184258530979737E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999936628341757	WITHOUT_CLASSIFICATION	6.337165824268368E-6	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999936628341757	WITHOUT_CLASSIFICATION	6.337165824268368E-6	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999971007166142	WITHOUT_CLASSIFICATION	2.8992833859104013E-6	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999992328443066	WITHOUT_CLASSIFICATION	7.671556935370162E-7	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999823339947	WITHOUT_CLASSIFICATION	1.766600529344146E-8	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999974100956802	WITHOUT_CLASSIFICATION	2.5899043198148136E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999955274472783	WITHOUT_CLASSIFICATION	4.472552721699108E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.999997724371954	WITHOUT_CLASSIFICATION	2.2756280459589817E-6	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999318161369	WITHOUT_CLASSIFICATION	6.818386313131802E-8	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999932054909801	WITHOUT_CLASSIFICATION	6.794509019901383E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999978691976307	WITHOUT_CLASSIFICATION	2.1308023692837383E-6	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999840667098888	WITHOUT_CLASSIFICATION	1.5933290111241225E-5	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999947873343479	WITHOUT_CLASSIFICATION	5.21266565214969E-6	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999470719616662	WITHOUT_CLASSIFICATION	5.2928038333778337E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999950882650793	WITHOUT_CLASSIFICATION	4.911734920688574E-6	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999950882650793	WITHOUT_CLASSIFICATION	4.911734920688574E-6	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999993700704289	WITHOUT_CLASSIFICATION	6.299295710703389E-7	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999993700704289	WITHOUT_CLASSIFICATION	6.299295710703389E-7	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953392603874	WITHOUT_CLASSIFICATION	4.660739612541976E-6	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918045023077	WITHOUT_CLASSIFICATION	8.19549769224182E-6	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999671712518211	WITHOUT_CLASSIFICATION	3.282874817886931E-5	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982387934246	WITHOUT_CLASSIFICATION	1.761206575302108E-6	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999492786290487	WITHOUT_CLASSIFICATION	5.072137095117459E-5	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9994203002078117	WITHOUT_CLASSIFICATION	5.796997921883063E-4	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997303322391342	WITHOUT_CLASSIFICATION	2.696677608658354E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979856280246	WITHOUT_CLASSIFICATION	2.0143719754014374E-5	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999975464006534	WITHOUT_CLASSIFICATION	2.453599346675467E-6	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999999202791684	WITHOUT_CLASSIFICATION	7.972083160234515E-8	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998068724797	WITHOUT_CLASSIFICATION	1.9312752034678277E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999955023423284	WITHOUT_CLASSIFICATION	4.497657671593846E-6	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999987649059161	WITHOUT_CLASSIFICATION	1.235094083832019E-6	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999998121822258	WITHOUT_CLASSIFICATION	1.8781777420247772E-6	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999941190716914	WITHOUT_CLASSIFICATION	5.880928308542575E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999944276378707	WITHOUT_CLASSIFICATION	5.572362129252234E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999944276378707	WITHOUT_CLASSIFICATION	5.572362129252234E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999944276378707	WITHOUT_CLASSIFICATION	5.572362129252234E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999866110634	WITHOUT_CLASSIFICATION	1.3388936521816463E-8	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9996392692245478	WITHOUT_CLASSIFICATION	3.6073077545211937E-4	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999996754267	WITHOUT_CLASSIFICATION	3.245732098680265E-10	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998579573634464	WITHOUT_CLASSIFICATION	1.4204263655353232E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976773040976	WITHOUT_CLASSIFICATION	2.3226959024448197E-6	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991128440764	WITHOUT_CLASSIFICATION	8.87155923691778E-7	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999959704456075	WITHOUT_CLASSIFICATION	4.029554392403262E-6	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998395835034558	WITHOUT_CLASSIFICATION	1.6041649654420986E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999996945745805	WITHOUT_CLASSIFICATION	3.0542541951563417E-7	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999353817481	WITHOUT_CLASSIFICATION	6.46182518678611E-8	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.999999797915188	WITHOUT_CLASSIFICATION	2.0208481207894538E-7	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9981514320987245	WITHOUT_CLASSIFICATION	0.001848567901275502	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932532489818	WITHOUT_CLASSIFICATION	6.746751018212371E-6	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999978352543769	WITHOUT_CLASSIFICATION	2.164745623068505E-6	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999982637511812	WITHOUT_CLASSIFICATION	1.7362488188296413E-6	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9992521395115462	WITHOUT_CLASSIFICATION	7.47860488453698E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998360491542	WITHOUT_CLASSIFICATION	1.6395084575456284E-7	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999942169638996	WITHOUT_CLASSIFICATION	5.783036100414033E-5	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998981863344831	WITHOUT_CLASSIFICATION	1.0181366551692268E-4	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999919546119669	WITHOUT_CLASSIFICATION	8.045388033012048E-6	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999981364102	WITHOUT_CLASSIFICATION	1.8635898414426806E-9	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999969902332193	WITHOUT_CLASSIFICATION	3.009766780696636E-6	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999988364647966	WITHOUT_CLASSIFICATION	1.1635352033476732E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999425062229	WITHOUT_CLASSIFICATION	5.74937771823825E-8	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999999805339039	WITHOUT_CLASSIFICATION	1.9466096110497265E-7	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999772436322459	WITHOUT_CLASSIFICATION	2.275636775397288E-5	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999878547151044	WITHOUT_CLASSIFICATION	1.2145284895470008E-5	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999899556047553	WITHOUT_CLASSIFICATION	1.0044395244755968E-5	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999947819384	WITHOUT_CLASSIFICATION	5.218061559859695E-9	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999997278528183	WITHOUT_CLASSIFICATION	2.7214718165050145E-7	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999853192665785	WITHOUT_CLASSIFICATION	1.4680733421518938E-5	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999949303171486	WITHOUT_CLASSIFICATION	5.069682851394486E-6	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999380111809033	WITHOUT_CLASSIFICATION	6.198881909662575E-5	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999993345419804	WITHOUT_CLASSIFICATION	6.654580195734853E-7	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9998545270691734	WITHOUT_CLASSIFICATION	1.4547293082653427E-4	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999983495387159	WITHOUT_CLASSIFICATION	1.6504612841299392E-6	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999855850966372	WITHOUT_CLASSIFICATION	1.4414903362925621E-5	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.9999997603306403	WITHOUT_CLASSIFICATION	2.3966935975729725E-7	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999889400373	WITHOUT_CLASSIFICATION	1.1059962710606218E-7	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.999999921852174	WITHOUT_CLASSIFICATION	7.814782598194245E-8	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999991218233573	WITHOUT_CLASSIFICATION	8.781766427140113E-7	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999999178264627	WITHOUT_CLASSIFICATION	8.217353730344286E-7	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.999780929179734	WITHOUT_CLASSIFICATION	2.1907082026586335E-4	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999960966675173	WITHOUT_CLASSIFICATION	3.903332482689722E-6	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999996477767409	WITHOUT_CLASSIFICATION	3.5222325909149393E-7	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999844500771999	WITHOUT_CLASSIFICATION	1.5549922800004525E-5	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.999999925584296	WITHOUT_CLASSIFICATION	7.441570408171619E-8	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999975138445708	WITHOUT_CLASSIFICATION	2.4861554292804183E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999860196033371	WITHOUT_CLASSIFICATION	1.3980396663033447E-5	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999998815186518	WITHOUT_CLASSIFICATION	1.1848134817869239E-7	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999985370408861	WITHOUT_CLASSIFICATION	1.4629591139341512E-6	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999851921791114	WITHOUT_CLASSIFICATION	1.4807820888568867E-5	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999986229819503	WITHOUT_CLASSIFICATION	1.3770180497120473E-6	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.999767281255634	WITHOUT_CLASSIFICATION	2.3271874436612747E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999995608304434	WITHOUT_CLASSIFICATION	4.391695566106525E-7	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9999634259255374	WITHOUT_CLASSIFICATION	3.6574074462576566E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999985869997811	WITHOUT_CLASSIFICATION	1.4130002188666596E-6	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999978316537499	WITHOUT_CLASSIFICATION	2.168346250153071E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999991845697267	WITHOUT_CLASSIFICATION	8.154302731869658E-7	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999985627608545	WITHOUT_CLASSIFICATION	1.4372391454629662E-6	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999883200356113	WITHOUT_CLASSIFICATION	1.1679964388697102E-5	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998629972872	WITHOUT_CLASSIFICATION	1.370027127613919E-7	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999897084647	WITHOUT_CLASSIFICATION	1.0291535278340022E-8	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999919357261	WITHOUT_CLASSIFICATION	8.064273912347628E-8	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999998436227703	WITHOUT_CLASSIFICATION	1.5637722979764268E-7	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999999704807614	WITHOUT_CLASSIFICATION	2.951923859165565E-7	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999972443896251	WITHOUT_CLASSIFICATION	2.7556103749544427E-6	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999333383774	WITHOUT_CLASSIFICATION	6.666162260407341E-8	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998632509949295	WITHOUT_CLASSIFICATION	1.3674900507044577E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998632509949295	WITHOUT_CLASSIFICATION	1.3674900507044577E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999999402044659	WITHOUT_CLASSIFICATION	5.979553412359168E-8	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999070566825	WITHOUT_CLASSIFICATION	9.294331742280784E-8	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999978613913612	WITHOUT_CLASSIFICATION	2.138608638945316E-6	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999973492629546	WITHOUT_CLASSIFICATION	2.650737045483321E-6	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999718766045952	WITHOUT_CLASSIFICATION	2.8123395404791108E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999996212561883	WITHOUT_CLASSIFICATION	3.7874381169703336E-6	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999991281723428	WITHOUT_CLASSIFICATION	8.718276572558513E-7	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999986892028262	WITHOUT_CLASSIFICATION	1.310797173804376E-6	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999106966821222	WITHOUT_CLASSIFICATION	8.930331787781432E-5	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999999023042302	WITHOUT_CLASSIFICATION	9.769576976520636E-8	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999996692969872	WITHOUT_CLASSIFICATION	3.3070301273898896E-7	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999991549891198	WITHOUT_CLASSIFICATION	8.450108802142081E-7	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9999996598832829	WITHOUT_CLASSIFICATION	3.401167171154698E-7	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999638419831	WITHOUT_CLASSIFICATION	3.615801680960906E-8	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999988675967837	WITHOUT_CLASSIFICATION	1.1324032162934988E-6	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999979607307884	WITHOUT_CLASSIFICATION	2.0392692115565607E-6	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.999999837305218	WITHOUT_CLASSIFICATION	1.626947819411586E-7	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9984018481586674	WITHOUT_CLASSIFICATION	0.001598151841332557	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999952683077745	WITHOUT_CLASSIFICATION	4.731692225543327E-6	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999998652983932	WITHOUT_CLASSIFICATION	1.347016067813326E-7	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999844133003315	WITHOUT_CLASSIFICATION	1.5586699668507728E-5	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999996858759491	WITHOUT_CLASSIFICATION	3.141240508714216E-7	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999766062030436	WITHOUT_CLASSIFICATION	2.3393796956321833E-5	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999991666955627	WITHOUT_CLASSIFICATION	8.333044373072248E-6	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999901045339907	WITHOUT_CLASSIFICATION	9.895466009265547E-6	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999934813231975	WITHOUT_CLASSIFICATION	6.518676802518851E-6	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999992229029677	WITHOUT_CLASSIFICATION	7.770970322662138E-7	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.999997003960299	WITHOUT_CLASSIFICATION	2.9960397010471756E-6	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999991745236734	WITHOUT_CLASSIFICATION	8.254763267324865E-7	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999807428028	WITHOUT_CLASSIFICATION	1.9257197180852845E-8	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999998081481393	WITHOUT_CLASSIFICATION	1.9185186072029994E-7	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999985359507262	WITHOUT_CLASSIFICATION	1.4640492738245773E-6	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999989038548637	WITHOUT_CLASSIFICATION	1.0961451363261911E-6	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999938594295358	WITHOUT_CLASSIFICATION	6.140570464199133E-6	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999767566586824	WITHOUT_CLASSIFICATION	2.3243341317624094E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999767566586824	WITHOUT_CLASSIFICATION	2.3243341317624094E-5	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999979673823481	WITHOUT_CLASSIFICATION	2.032617651785024E-6	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999979170324556	WITHOUT_CLASSIFICATION	2.082967544391679E-6	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999961463847346	WITHOUT_CLASSIFICATION	3.853615265428504E-6	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999785037873409	WITHOUT_CLASSIFICATION	2.1496212659165036E-5	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999801218	WITHOUT_CLASSIFICATION	1.9878180171444962E-11	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999973615243147	WITHOUT_CLASSIFICATION	2.638475685305122E-5	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999975886270055	WITHOUT_CLASSIFICATION	2.4113729945028176E-5	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999780800791848	WITHOUT_CLASSIFICATION	2.1919920815337972E-5	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999983581504444	WITHOUT_CLASSIFICATION	1.6418495555808664E-6	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999599602272614	WITHOUT_CLASSIFICATION	4.003977273862063E-5	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994291346298	WITHOUT_CLASSIFICATION	5.708653702154164E-7	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999826419171184	WITHOUT_CLASSIFICATION	1.7358082881613506E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999688514125741	WITHOUT_CLASSIFICATION	3.114858742599148E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999873589843453	WITHOUT_CLASSIFICATION	1.2641015654732495E-5	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999483459980649	WITHOUT_CLASSIFICATION	5.165400193508582E-5	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999997368784103	WITHOUT_CLASSIFICATION	2.631215897297056E-7	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9982071432729126	WITHOUT_CLASSIFICATION	0.0017928567270874434	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9982071432729126	WITHOUT_CLASSIFICATION	0.0017928567270874434	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999425452572347	WITHOUT_CLASSIFICATION	5.7454742765280626E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998754230774124	WITHOUT_CLASSIFICATION	1.2457692258757355E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999825707142647	WITHOUT_CLASSIFICATION	1.7429285735372183E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999962154943	WITHOUT_CLASSIFICATION	3.784505690985832E-8	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999995235051287	WITHOUT_CLASSIFICATION	4.7649487126152337E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999955023423284	WITHOUT_CLASSIFICATION	4.497657671593846E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999312643898224	WITHOUT_CLASSIFICATION	6.873561017759914E-4	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999606340799	WITHOUT_CLASSIFICATION	3.936592010402694E-8	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998131292247	WITHOUT_CLASSIFICATION	1.8687077534255737E-7	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999515686571	WITHOUT_CLASSIFICATION	4.843134292337647E-8	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999994064569031	WITHOUT_CLASSIFICATION	5.935430968622039E-7	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999994064569031	WITHOUT_CLASSIFICATION	5.935430968622039E-7	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999884272383021	WITHOUT_CLASSIFICATION	1.1572761698008283E-5	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999996688175548	WITHOUT_CLASSIFICATION	3.311824452714848E-7	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999998267583864	WITHOUT_CLASSIFICATION	1.7324161359211246E-7	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999999607969097	WITHOUT_CLASSIFICATION	3.920309027977627E-8	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999994808196144	WITHOUT_CLASSIFICATION	5.191803855815653E-7	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9946426282564343	WITHOUT_CLASSIFICATION	0.00535737174356566	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999992604980481	WITHOUT_CLASSIFICATION	7.395019519639107E-7	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999907802494624	WITHOUT_CLASSIFICATION	9.21975053757854E-6	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999980901212507	WITHOUT_CLASSIFICATION	1.9098787492657075E-6	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998545171759	WITHOUT_CLASSIFICATION	1.4548282420833803E-7	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999523455575	WITHOUT_CLASSIFICATION	4.7654442535817094E-8	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999811657404464	WITHOUT_CLASSIFICATION	1.8834259553571157E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9988873013356651	WITHOUT_CLASSIFICATION	0.001112698664334908	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9999376606612443	WITHOUT_CLASSIFICATION	6.233933875566351E-5	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999299270772	WITHOUT_CLASSIFICATION	7.007292280376422E-8	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999986458634963	WITHOUT_CLASSIFICATION	1.3541365036145856E-6	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999975884715403	WITHOUT_CLASSIFICATION	2.411528459688472E-6	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999283294466	WITHOUT_CLASSIFICATION	7.167055335736347E-8	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999990555962817	WITHOUT_CLASSIFICATION	9.444037184041016E-7	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999990332785801	WITHOUT_CLASSIFICATION	9.667214198847315E-7	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999912234295281	WITHOUT_CLASSIFICATION	8.776570471973968E-6	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.999973273218353	WITHOUT_CLASSIFICATION	2.6726781646930993E-5	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999993214405649	WITHOUT_CLASSIFICATION	6.785594351567856E-7	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999985118919832	WITHOUT_CLASSIFICATION	1.4881080167453662E-6	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999990257047983	WITHOUT_CLASSIFICATION	9.742952017520172E-7	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999814013417272	WITHOUT_CLASSIFICATION	1.859865827279444E-5	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999929430273322	WITHOUT_CLASSIFICATION	7.056972667774875E-6	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999909678837669	WITHOUT_CLASSIFICATION	9.032116233100852E-5	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999873048293589	WITHOUT_CLASSIFICATION	1.269517064112172E-5	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999999986581	WITHOUT_CLASSIFICATION	1.3419573266276074E-12	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999988754497581	WITHOUT_CLASSIFICATION	1.124550241915274E-6	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999985792151419	WITHOUT_CLASSIFICATION	1.4207848580100385E-6	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999963073746088	WITHOUT_CLASSIFICATION	3.6926253913318124E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9999990473004357	WITHOUT_CLASSIFICATION	9.526995643911684E-7	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9968853821029674	WITHOUT_CLASSIFICATION	0.003114617897032711	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.999999771585264	WITHOUT_CLASSIFICATION	2.2841473591454763E-7	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999999536508077	WITHOUT_CLASSIFICATION	4.634919232123344E-8	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999795711482569	WITHOUT_CLASSIFICATION	2.0428851743035495E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.99999045224533	WITHOUT_CLASSIFICATION	9.547754670020066E-6	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.99999045224533	WITHOUT_CLASSIFICATION	9.547754670020066E-6	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999275091842	WITHOUT_CLASSIFICATION	7.249081589751417E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999772398496	WITHOUT_CLASSIFICATION	2.27601503341788E-8	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999675952975	WITHOUT_CLASSIFICATION	3.240470242082443E-8	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9998756154364684	WITHOUT_CLASSIFICATION	1.2438456353152904E-4	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999793133875604	WITHOUT_CLASSIFICATION	2.0686612439603963E-5	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999878612915	WITHOUT_CLASSIFICATION	1.2138708496884285E-8	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999736792	WITHOUT_CLASSIFICATION	2.632081355817783E-11	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999817615089802	WITHOUT_CLASSIFICATION	1.8238491019746E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999275091842	WITHOUT_CLASSIFICATION	7.249081589751417E-8	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999772398496	WITHOUT_CLASSIFICATION	2.27601503341788E-8	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999996141629324	WITHOUT_CLASSIFICATION	3.858370676607374E-7	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999996676701209	WITHOUT_CLASSIFICATION	3.3232987908910553E-7	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999995904515679	WITHOUT_CLASSIFICATION	4.095484321019975E-7	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999808327197813	WITHOUT_CLASSIFICATION	1.916728021863829E-5	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999997641159889	WITHOUT_CLASSIFICATION	2.3588401118559928E-7	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9996193219953291	WITHOUT_CLASSIFICATION	3.8067800467085595E-4	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999883161663	WITHOUT_CLASSIFICATION	1.1683833663299755E-8	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999377231856497	WITHOUT_CLASSIFICATION	6.227681435038846E-5	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999994115790701	WITHOUT_CLASSIFICATION	5.88420929896995E-7	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9801897719162679	WITHOUT_CLASSIFICATION	0.019810228083732145	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999996161946	WITHOUT_CLASSIFICATION	3.8380548502116496E-10	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9801897719162679	WITHOUT_CLASSIFICATION	0.019810228083732145	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999766205209975	WITHOUT_CLASSIFICATION	2.337947900264573E-5	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999995355990913	WITHOUT_CLASSIFICATION	4.6440090873001494E-7	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998435766457402	WITHOUT_CLASSIFICATION	1.5642335425981974E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999987611677	WITHOUT_CLASSIFICATION	1.238832305064961E-8	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9987731856122438	WITHOUT_CLASSIFICATION	0.0012268143877561617	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999377231856497	WITHOUT_CLASSIFICATION	6.227681435038846E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999377231856497	WITHOUT_CLASSIFICATION	6.227681435038846E-5	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999948893416679	WITHOUT_CLASSIFICATION	5.110658332016351E-6	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999996864944566	WITHOUT_CLASSIFICATION	3.135055433066948E-7	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999962318720618	WITHOUT_CLASSIFICATION	3.7681279382101322E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999874529240285	WITHOUT_CLASSIFICATION	1.2547075971513133E-5	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999985679849304	WITHOUT_CLASSIFICATION	1.4320150696147699E-6	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999978366330189	WITHOUT_CLASSIFICATION	2.1633669810274594E-6	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.999997624147734	WITHOUT_CLASSIFICATION	2.3758522659499144E-6	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999995906891617	WITHOUT_CLASSIFICATION	4.093108383907078E-7	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999993977418097	WITHOUT_CLASSIFICATION	6.022581902935493E-7	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999466409463128	WITHOUT_CLASSIFICATION	5.335905368719935E-5	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999933374396038	WITHOUT_CLASSIFICATION	6.662560396227301E-6	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999997210054629	WITHOUT_CLASSIFICATION	2.7899453718229703E-7	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999879056201586	WITHOUT_CLASSIFICATION	1.2094379841490131E-5	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999931820852934	WITHOUT_CLASSIFICATION	6.8179147066482455E-6	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999997403935397	WITHOUT_CLASSIFICATION	2.5960646032713736E-7	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999997180211984	WITHOUT_CLASSIFICATION	2.819788017179575E-7	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999987913778244	WITHOUT_CLASSIFICATION	1.208622175507454E-6	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999991906200028	WITHOUT_CLASSIFICATION	8.093799972339257E-7	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999521712226	WITHOUT_CLASSIFICATION	4.782877733424257E-8	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999998486097486	WITHOUT_CLASSIFICATION	1.5139025147925907E-7	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.999972066568593	WITHOUT_CLASSIFICATION	2.7933431407022005E-5	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999699110103	WITHOUT_CLASSIFICATION	3.008898966676551E-8	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999954993574108	WITHOUT_CLASSIFICATION	4.500642589201146E-6	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999990780248289	WITHOUT_CLASSIFICATION	9.219751711188504E-7	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999571836254	WITHOUT_CLASSIFICATION	4.281637462393603E-8	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999993374940775	WITHOUT_CLASSIFICATION	6.625059224299817E-7	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999811331288441	WITHOUT_CLASSIFICATION	1.8866871155840064E-5	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999997853561459	WITHOUT_CLASSIFICATION	2.1464385422128802E-7	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998714973500553	WITHOUT_CLASSIFICATION	1.285026499447075E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999998741956633	WITHOUT_CLASSIFICATION	1.2580433676983585E-7	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999998776142112	WITHOUT_CLASSIFICATION	1.2238578881467845E-7	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9995099415204499	WITHOUT_CLASSIFICATION	4.900584795500789E-4	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999442401602354	WITHOUT_CLASSIFICATION	5.5759839764644446E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999995906891617	WITHOUT_CLASSIFICATION	4.093108383907078E-7	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9983730092789935	WITHOUT_CLASSIFICATION	0.0016269907210064924	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999965462538427	WITHOUT_CLASSIFICATION	3.4537461573003364E-6	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9836291334539825	WITHOUT_CLASSIFICATION	0.016370866546017524	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999992926872585	WITHOUT_CLASSIFICATION	7.073127415865263E-7	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.999999218653099	WITHOUT_CLASSIFICATION	7.813469009754738E-7	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999998774545664	WITHOUT_CLASSIFICATION	1.22545433629288E-7	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999874529240285	WITHOUT_CLASSIFICATION	1.2547075971513133E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999874529240285	WITHOUT_CLASSIFICATION	1.2547075971513133E-5	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999999962383128	WITHOUT_CLASSIFICATION	3.7616871852737364E-8	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999995888876324	WITHOUT_CLASSIFICATION	4.1111236752702585E-7	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9999956944141093	WITHOUT_CLASSIFICATION	4.305585890725475E-6	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999998406349853	WITHOUT_CLASSIFICATION	1.593650147356288E-7	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999955260060233	WITHOUT_CLASSIFICATION	4.473993976729198E-6	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9981813561857521	WITHOUT_CLASSIFICATION	0.0018186438142479271	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9998421487815605	WITHOUT_CLASSIFICATION	1.5785121843939686E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999926375209199	WITHOUT_CLASSIFICATION	7.362479080158302E-6	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999979900046279	WITHOUT_CLASSIFICATION	2.009995372141331E-6	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999975964932478	WITHOUT_CLASSIFICATION	2.4035067522744347E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999985663406278	WITHOUT_CLASSIFICATION	1.4336593722855076E-6	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999987926401291	WITHOUT_CLASSIFICATION	1.2073598708774541E-6	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997274959137283	WITHOUT_CLASSIFICATION	2.7250408627170746E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999275091842	WITHOUT_CLASSIFICATION	7.249081589751417E-8	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999985663406278	WITHOUT_CLASSIFICATION	1.4336593722855076E-6	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999971386092408	WITHOUT_CLASSIFICATION	2.8613907592488484E-6	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999969103332588	WITHOUT_CLASSIFICATION	3.0896667412677304E-6	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999804921171442	WITHOUT_CLASSIFICATION	1.950788285576412E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9959235157186465	WITHOUT_CLASSIFICATION	0.004076484281353573	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997274959137283	WITHOUT_CLASSIFICATION	2.7250408627170746E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997783459033884	WITHOUT_CLASSIFICATION	2.2165409661151285E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999036061162816	WITHOUT_CLASSIFICATION	9.639388371843232E-5	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999993036420896	WITHOUT_CLASSIFICATION	6.963579105138287E-7	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998622857218417	WITHOUT_CLASSIFICATION	1.3771427815839092E-4	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998132552524724	WITHOUT_CLASSIFICATION	1.8674474752759446E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.99999978165968	WITHOUT_CLASSIFICATION	2.183403201052651E-7	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999800326322535	WITHOUT_CLASSIFICATION	1.9967367746463954E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999695819945262	WITHOUT_CLASSIFICATION	3.0418005473767096E-5	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999998934296395	WITHOUT_CLASSIFICATION	1.0657036053525197E-7	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999760840723	WITHOUT_CLASSIFICATION	2.39159276972363E-8	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9995591783844405	WITHOUT_CLASSIFICATION	4.4082161555945507E-4	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999981135462607	WITHOUT_CLASSIFICATION	1.8864537392728554E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999985663406278	WITHOUT_CLASSIFICATION	1.4336593722855076E-6	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997783459033884	WITHOUT_CLASSIFICATION	2.2165409661151285E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999993036420896	WITHOUT_CLASSIFICATION	6.963579105138287E-7	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999768735406606	WITHOUT_CLASSIFICATION	2.3126459339497237E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999933609237573	WITHOUT_CLASSIFICATION	6.639076242752477E-6	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999990115670286	WITHOUT_CLASSIFICATION	9.884329714067492E-7	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997274959137283	WITHOUT_CLASSIFICATION	2.7250408627170746E-4	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999998683814149	WITHOUT_CLASSIFICATION	1.31618585193912E-7	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.99998848755374	WITHOUT_CLASSIFICATION	1.1512446260013793E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998538260535711	WITHOUT_CLASSIFICATION	1.461739464289239E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999850616120879	WITHOUT_CLASSIFICATION	1.4938387912074693E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999695819945262	WITHOUT_CLASSIFICATION	3.0418005473767096E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999971386092408	WITHOUT_CLASSIFICATION	2.8613907592488484E-6	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9999752291140768	WITHOUT_CLASSIFICATION	2.4770885923261246E-5	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999990675064547	WITHOUT_CLASSIFICATION	9.324935453831889E-7	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999996482257085	WITHOUT_CLASSIFICATION	3.517742915884432E-7	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999994723082009	WITHOUT_CLASSIFICATION	5.276917991078238E-7	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999998897685639	WITHOUT_CLASSIFICATION	1.10231436042202E-7	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999999008849498	WITHOUT_CLASSIFICATION	9.911505015494195E-8	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999784045609916	WITHOUT_CLASSIFICATION	2.159543900837597E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999987611677	WITHOUT_CLASSIFICATION	1.238832305064961E-8	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999324762261	WITHOUT_CLASSIFICATION	6.752377387607773E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984591093252726	WITHOUT_CLASSIFICATION	0.0015408906747273945	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999961244802	WITHOUT_CLASSIFICATION	3.875519726364155E-9	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9988543867786568	WITHOUT_CLASSIFICATION	0.0011456132213431033	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999907614748729	WITHOUT_CLASSIFICATION	9.238525127099227E-5	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999944121384845	WITHOUT_CLASSIFICATION	5.587861515491547E-6	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999996069917586	WITHOUT_CLASSIFICATION	3.930082414173462E-7	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9999927452062162	WITHOUT_CLASSIFICATION	7.254793783866104E-6	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998651698896	WITHOUT_CLASSIFICATION	1.3483011047463576E-7	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999850616120879	WITHOUT_CLASSIFICATION	1.4938387912074693E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984591093252726	WITHOUT_CLASSIFICATION	0.0015408906747273945	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999561187602884	WITHOUT_CLASSIFICATION	4.388123971156899E-5	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9999817229818936	WITHOUT_CLASSIFICATION	1.8277018106406058E-5	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999956825764743	WITHOUT_CLASSIFICATION	4.3174235256751836E-6	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999994714356433	WITHOUT_CLASSIFICATION	5.285643566942503E-6	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9999649209062071	WITHOUT_CLASSIFICATION	3.507909379293733E-5	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999729429938	WITHOUT_CLASSIFICATION	2.7057006122590196E-8	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999855449603348	WITHOUT_CLASSIFICATION	1.4455039665149157E-5	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9974504424804975	WITHOUT_CLASSIFICATION	0.0025495575195024645	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998642141871826	WITHOUT_CLASSIFICATION	1.357858128173628E-4	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9697275319333559	WITHOUT_CLASSIFICATION	0.0302724680666442	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999995115895692	WITHOUT_CLASSIFICATION	4.884104307856864E-7	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999959027669187	WITHOUT_CLASSIFICATION	4.097233081161026E-6	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999998808537701	WITHOUT_CLASSIFICATION	1.1914622992584567E-7	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9999941313390551	WITHOUT_CLASSIFICATION	5.868660944855939E-6	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.99999820218665	WITHOUT_CLASSIFICATION	1.797813350043677E-6	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999997769834285	WITHOUT_CLASSIFICATION	2.2301657155488228E-7	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999992782784161	WITHOUT_CLASSIFICATION	7.217215838181484E-7	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999807248883	WITHOUT_CLASSIFICATION	1.9275111732867697E-8	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999994978655132	WITHOUT_CLASSIFICATION	5.021344866676679E-7	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999901235789284	WITHOUT_CLASSIFICATION	9.87642107155319E-6	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9999440757270743	WITHOUT_CLASSIFICATION	5.592427292554247E-5	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998892499639	WITHOUT_CLASSIFICATION	1.1075003613682737E-7	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998806287623	WITHOUT_CLASSIFICATION	1.1937123774971707E-7	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999999813490768	WITHOUT_CLASSIFICATION	1.8650923208959633E-7	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999995554181192	WITHOUT_CLASSIFICATION	4.445818806428376E-7	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9982233735764386	WITHOUT_CLASSIFICATION	0.0017766264235612407	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999973771466801	WITHOUT_CLASSIFICATION	2.622853319789457E-6	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998505944647516	WITHOUT_CLASSIFICATION	1.4940553524856557E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998304615814814	WITHOUT_CLASSIFICATION	1.695384185186945E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9334715038956671	WITHOUT_CLASSIFICATION	0.06652849610433297	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999871778944502	WITHOUT_CLASSIFICATION	1.2822105549882133E-5	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998656746524132	WITHOUT_CLASSIFICATION	1.3432534758679108E-4	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999990965139095	WITHOUT_CLASSIFICATION	9.034860904029446E-7	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999996450895912	WITHOUT_CLASSIFICATION	3.549104089293006E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999925053024104	WITHOUT_CLASSIFICATION	7.494697589604058E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999996433897536	WITHOUT_CLASSIFICATION	3.566102463664227E-7	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998674527655	WITHOUT_CLASSIFICATION	1.3254723458155964E-7	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999896672323674	WITHOUT_CLASSIFICATION	1.0332767632550458E-5	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9999996433897536	WITHOUT_CLASSIFICATION	3.566102463664227E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999925053024104	WITHOUT_CLASSIFICATION	7.494697589604058E-5	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998674527655	WITHOUT_CLASSIFICATION	1.3254723458155964E-7	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999993801568552	WITHOUT_CLASSIFICATION	6.198431448069026E-7	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999997712643692	WITHOUT_CLASSIFICATION	2.2873563083274961E-7	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999978328222253	WITHOUT_CLASSIFICATION	2.167177774723056E-6	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999278458720554	WITHOUT_CLASSIFICATION	7.21541279445941E-5	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999920074505	WITHOUT_CLASSIFICATION	7.992549477548016E-9	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7516494814346609	WITHOUT_CLASSIFICATION	0.2483505185653391	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999753263111497	WITHOUT_CLASSIFICATION	2.4673688850319873E-5	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999630927953701	WITHOUT_CLASSIFICATION	3.69072046300273E-5	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999942727489	WITHOUT_CLASSIFICATION	5.727251167423393E-9	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999817811213233	WITHOUT_CLASSIFICATION	1.821887867670625E-5	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.9999780158252899	WITHOUT_CLASSIFICATION	2.1984174710109313E-5	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999993237069742	WITHOUT_CLASSIFICATION	6.762930257432745E-7	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9996281209769525	WITHOUT_CLASSIFICATION	3.7187902304745835E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999278458720554	WITHOUT_CLASSIFICATION	7.21541279445941E-5	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998676872842	WITHOUT_CLASSIFICATION	1.323127157955116E-7	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999981555782214	WITHOUT_CLASSIFICATION	1.8444217786720993E-6	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999944550424048	WITHOUT_CLASSIFICATION	5.5449575951404405E-6	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999995434180726	WITHOUT_CLASSIFICATION	4.5658192735691256E-7	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999997077087442	WITHOUT_CLASSIFICATION	2.922912557659364E-7	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999955627498	WITHOUT_CLASSIFICATION	4.437250265486456E-9	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999983769432456	WITHOUT_CLASSIFICATION	1.6230567545027007E-6	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999992511373	WITHOUT_CLASSIFICATION	7.488627733901111E-10	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999439739962735	WITHOUT_CLASSIFICATION	5.6026003726537533E-5	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999661929444	WITHOUT_CLASSIFICATION	3.3807055668291116E-8	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999958015382	WITHOUT_CLASSIFICATION	4.1984617793612545E-9	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999958015382	WITHOUT_CLASSIFICATION	4.1984617793612545E-9	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999905718684	WITHOUT_CLASSIFICATION	9.428131514746503E-9	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999905718684	WITHOUT_CLASSIFICATION	9.428131514746503E-9	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9999707786803803	WITHOUT_CLASSIFICATION	2.922131961967266E-5	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999944550424048	WITHOUT_CLASSIFICATION	5.5449575951404405E-6	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999999292944941	WITHOUT_CLASSIFICATION	7.070550584636607E-8	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999967211566	WITHOUT_CLASSIFICATION	3.2788435323404563E-9	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999823823984	WITHOUT_CLASSIFICATION	1.7617601597404818E-8	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999823823984	WITHOUT_CLASSIFICATION	1.7617601597404818E-8	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999970787442862	WITHOUT_CLASSIFICATION	2.9212557137662333E-6	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999999319789264	WITHOUT_CLASSIFICATION	6.802107353044727E-8	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999964288111	WITHOUT_CLASSIFICATION	3.571188755790871E-9	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999997427400903	WITHOUT_CLASSIFICATION	2.572599097002789E-7	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9996206019951174	WITHOUT_CLASSIFICATION	3.793980048826745E-4	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9975051072272275	WITHOUT_CLASSIFICATION	0.0024948927727724683	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999879027122819	WITHOUT_CLASSIFICATION	1.2097287718093218E-5	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999591789110589	WITHOUT_CLASSIFICATION	4.0821088941107965E-5	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999871346325485	WITHOUT_CLASSIFICATION	1.2865367451530759E-5	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999959423268685	WITHOUT_CLASSIFICATION	4.0576731315559824E-6	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.9999975377483492	WITHOUT_CLASSIFICATION	2.4622516507452995E-6	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9999982442589799	WITHOUT_CLASSIFICATION	1.7557410200778831E-6	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999997762035423	WITHOUT_CLASSIFICATION	2.237964575674403E-7	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.999999918622076	WITHOUT_CLASSIFICATION	8.137792406968754E-8	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999999843005042	WITHOUT_CLASSIFICATION	1.5699495818105637E-8	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999996044977382	WITHOUT_CLASSIFICATION	3.955022618940825E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993460283581	WITHOUT_CLASSIFICATION	6.539716419051801E-6	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999974963915793	WITHOUT_CLASSIFICATION	2.5036084206267346E-6	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999996467221727	WITHOUT_CLASSIFICATION	3.532778273193373E-7	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999999643939336	WITHOUT_CLASSIFICATION	3.560606639534364E-7	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999992522503164	WITHOUT_CLASSIFICATION	7.477496836503196E-7	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999918070473297	WITHOUT_CLASSIFICATION	8.1929526702583E-6	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999155125202	WITHOUT_CLASSIFICATION	8.448747986565163E-8	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999260502451	WITHOUT_CLASSIFICATION	7.394975493008351E-8	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999240897426183	WITHOUT_CLASSIFICATION	7.591025738177636E-5	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999996652949014	WITHOUT_CLASSIFICATION	3.3470509867798726E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984591093252726	WITHOUT_CLASSIFICATION	0.0015408906747273945	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999959027669187	WITHOUT_CLASSIFICATION	4.097233081161026E-6	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999979659035857	WITHOUT_CLASSIFICATION	2.0340964143219886E-6	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9996209629168121	WITHOUT_CLASSIFICATION	3.7903708318794924E-4	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886547526793	WITHOUT_CLASSIFICATION	1.1345247320720231E-5	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999730259894345	WITHOUT_CLASSIFICATION	2.697401056557042E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999921364103473	WITHOUT_CLASSIFICATION	7.86358965267377E-6	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999921364103473	WITHOUT_CLASSIFICATION	7.86358965267377E-6	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999563369209756	WITHOUT_CLASSIFICATION	4.366307902426968E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.999995634694235	WITHOUT_CLASSIFICATION	4.36530576497653E-6	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9997817315063517	WITHOUT_CLASSIFICATION	2.1826849364829512E-4	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9997817315063517	WITHOUT_CLASSIFICATION	2.1826849364829512E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999142937255155	WITHOUT_CLASSIFICATION	8.570627448450297E-5	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9995633307125101	WITHOUT_CLASSIFICATION	4.3666928748978766E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.999842010227323	WITHOUT_CLASSIFICATION	1.579897726769997E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999955274472783	WITHOUT_CLASSIFICATION	4.472552721699108E-6	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999973391526785	WITHOUT_CLASSIFICATION	2.6608473215085764E-6	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999998000632911	WITHOUT_CLASSIFICATION	1.9993670875514038E-7	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999965696037459	WITHOUT_CLASSIFICATION	3.4303962539960253E-6	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.999997249721151	WITHOUT_CLASSIFICATION	2.7502788490408325E-6	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999863386644074	WITHOUT_CLASSIFICATION	1.3661335592496204E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999863386644074	WITHOUT_CLASSIFICATION	1.3661335592496204E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999902997950303	WITHOUT_CLASSIFICATION	9.700204969707035E-6	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999998028177319	WITHOUT_CLASSIFICATION	1.9718226804307056E-7	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999998028177319	WITHOUT_CLASSIFICATION	1.9718226804307056E-7	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999955552853544	WITHOUT_CLASSIFICATION	4.444714645634958E-6	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999987204993833	WITHOUT_CLASSIFICATION	1.2795006166429189E-6	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.997452858284666	WITHOUT_CLASSIFICATION	0.002547141715333983	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999983110848288	WITHOUT_CLASSIFICATION	1.6889151712468319E-6	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999993631852004	WITHOUT_CLASSIFICATION	6.368147996719375E-7	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998969068711	WITHOUT_CLASSIFICATION	1.0309312897522929E-7	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999997238827774	WITHOUT_CLASSIFICATION	2.7611722266747943E-7	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999992797616757	WITHOUT_CLASSIFICATION	7.202383242472993E-7	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999999982167134	WITHOUT_CLASSIFICATION	1.7832865966182106E-8	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9935629171606363	WITHOUT_CLASSIFICATION	0.006437082839363814	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999983000614154	WITHOUT_CLASSIFICATION	1.6999385845325743E-6	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999899027138525	WITHOUT_CLASSIFICATION	1.0097286147544362E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999979293505641	WITHOUT_CLASSIFICATION	2.0706494358405625E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999979293505641	WITHOUT_CLASSIFICATION	2.0706494358405625E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999979293505641	WITHOUT_CLASSIFICATION	2.0706494358405625E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999979293505641	WITHOUT_CLASSIFICATION	2.0706494358405625E-6	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999891211279085	WITHOUT_CLASSIFICATION	1.0878872091451691E-5	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9501347355406616	WITHOUT_CLASSIFICATION	0.04986526445933833	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999539741898288	WITHOUT_CLASSIFICATION	4.602581017125171E-5	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999957049197891	WITHOUT_CLASSIFICATION	4.295080210957958E-6	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999996542589298	WITHOUT_CLASSIFICATION	3.4574107020208924E-7	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9997644189806161	WITHOUT_CLASSIFICATION	2.3558101938402372E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999955023423284	WITHOUT_CLASSIFICATION	4.497657671593846E-6	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999986117825083	WITHOUT_CLASSIFICATION	1.3882174918215802E-6	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999961625644063	WITHOUT_CLASSIFICATION	3.837435593744915E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999955023423284	WITHOUT_CLASSIFICATION	4.497657671593846E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999955023423284	WITHOUT_CLASSIFICATION	4.497657671593846E-6	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999999821999774	WITHOUT_CLASSIFICATION	1.78000226091036E-7	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999995971378444	WITHOUT_CLASSIFICATION	4.0286215556082457E-7	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999995971206943	WITHOUT_CLASSIFICATION	4.0287930580275164E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999941973089609	WITHOUT_CLASSIFICATION	5.802691039104263E-6	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9998864698536571	WITHOUT_CLASSIFICATION	1.1353014634286482E-4	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999989827387107	WITHOUT_CLASSIFICATION	1.0172612892489187E-6	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999998535044973	WITHOUT_CLASSIFICATION	1.4649550282752015E-7	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999941973089609	WITHOUT_CLASSIFICATION	5.802691039104263E-6	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999567153310333	WITHOUT_CLASSIFICATION	4.328466896667699E-5	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999923361824841	WITHOUT_CLASSIFICATION	7.663817515952621E-6	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999984150028739	WITHOUT_CLASSIFICATION	1.584997126076648E-6	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999931668484023	WITHOUT_CLASSIFICATION	6.833151597696348E-6	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999917209731418	WITHOUT_CLASSIFICATION	8.279026858260834E-6	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998854397172288	WITHOUT_CLASSIFICATION	1.1456028277124896E-4	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999056207327	WITHOUT_CLASSIFICATION	9.437926721695239E-8	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999931293261136	WITHOUT_CLASSIFICATION	6.870673886445445E-6	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999716766372	WITHOUT_CLASSIFICATION	2.8323362698203473E-8	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999991035930745	WITHOUT_CLASSIFICATION	8.964069255624085E-7	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999781171567	WITHOUT_CLASSIFICATION	2.1882843295984028E-8	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999997321487003	WITHOUT_CLASSIFICATION	2.6785129968837304E-7	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9979485294869622	WITHOUT_CLASSIFICATION	0.0020514705130377673	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999374398296452	WITHOUT_CLASSIFICATION	6.256017035479807E-5	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999995865922122	WITHOUT_CLASSIFICATION	4.13407787808485E-7	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999934072698737	WITHOUT_CLASSIFICATION	6.592730126241359E-6	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999199532649	WITHOUT_CLASSIFICATION	8.004673514785473E-8	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999962803707453	WITHOUT_CLASSIFICATION	3.7196292546391604E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999998117931328	WITHOUT_CLASSIFICATION	1.8820686730502276E-7	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999962803707453	WITHOUT_CLASSIFICATION	3.7196292546391604E-6	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999997270101778	WITHOUT_CLASSIFICATION	2.729898221141607E-7	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999962983772936	WITHOUT_CLASSIFICATION	3.7016227062410874E-6	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999981139088411	WITHOUT_CLASSIFICATION	1.8860911588871033E-6	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999006000034243	WITHOUT_CLASSIFICATION	9.939999657563881E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999999697472036	WITHOUT_CLASSIFICATION	3.025279639153575E-8	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999989594833121	WITHOUT_CLASSIFICATION	1.0405166879019987E-6	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999998503408177	WITHOUT_CLASSIFICATION	1.4965918235876414E-7	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999199532649	WITHOUT_CLASSIFICATION	8.004673514785473E-8	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999998117931328	WITHOUT_CLASSIFICATION	1.8820686730502276E-7	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999997270101778	WITHOUT_CLASSIFICATION	2.729898221141607E-7	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998869421485	WITHOUT_CLASSIFICATION	1.130578515197868E-7	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999627328986047	WITHOUT_CLASSIFICATION	3.726710139521574E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9999968166710133	WITHOUT_CLASSIFICATION	3.1833289866881346E-6	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999845562163363	WITHOUT_CLASSIFICATION	1.5443783663670538E-5	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9999949660755756	WITHOUT_CLASSIFICATION	5.0339244244357975E-6	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9976897190601707	WITHOUT_CLASSIFICATION	0.0023102809398292752	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999668525017	WITHOUT_CLASSIFICATION	3.3147498250147384E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993460283581	WITHOUT_CLASSIFICATION	6.539716419051801E-6	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999962983772936	WITHOUT_CLASSIFICATION	3.7016227062410874E-6	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999876058738391	WITHOUT_CLASSIFICATION	1.2394126160923051E-5	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999884645158528	WITHOUT_CLASSIFICATION	1.1535484147155105E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998883945238719	WITHOUT_CLASSIFICATION	1.116054761280553E-4	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999998468426424	WITHOUT_CLASSIFICATION	1.531573576803761E-7	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993460283581	WITHOUT_CLASSIFICATION	6.539716419051801E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984591093252726	WITHOUT_CLASSIFICATION	0.0015408906747273945	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999662959871	WITHOUT_CLASSIFICATION	3.37040129321907E-8	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993460283581	WITHOUT_CLASSIFICATION	6.539716419051801E-6	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999969241535	WITHOUT_CLASSIFICATION	3.0758464737011494E-9	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999988122807802	WITHOUT_CLASSIFICATION	1.1877192196990135E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984591093252726	WITHOUT_CLASSIFICATION	0.0015408906747273945	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9995614349952493	WITHOUT_CLASSIFICATION	4.385650047507249E-4	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999105998197	WITHOUT_CLASSIFICATION	8.94001802103666E-8	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999471906756	WITHOUT_CLASSIFICATION	5.280932434680898E-8	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9999897546839773	WITHOUT_CLASSIFICATION	1.0245316022729184E-5	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999697891298351	WITHOUT_CLASSIFICATION	3.021087016488208E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999873662960681	WITHOUT_CLASSIFICATION	1.2633703932007798E-5	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999995102880194	WITHOUT_CLASSIFICATION	4.897119806999025E-7	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999990741717558	WITHOUT_CLASSIFICATION	9.258282442653275E-7	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998632509949295	WITHOUT_CLASSIFICATION	1.3674900507044577E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999987806565711	WITHOUT_CLASSIFICATION	1.2193434289561362E-6	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.997452858284666	WITHOUT_CLASSIFICATION	0.002547141715333983	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999972559491833	WITHOUT_CLASSIFICATION	2.7440508166849274E-6	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.965490480996049	WITHOUT_CLASSIFICATION	0.03450951900395112	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999991486404761	WITHOUT_CLASSIFICATION	8.513595237647974E-7	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999750786026044	WITHOUT_CLASSIFICATION	2.492139739558404E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999987650689748	WITHOUT_CLASSIFICATION	1.2349310252536383E-6	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999995404054379	WITHOUT_CLASSIFICATION	4.595945621478432E-7	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9993287526776874	WITHOUT_CLASSIFICATION	6.712473223127113E-4	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999963840804468	WITHOUT_CLASSIFICATION	3.6159195532242686E-6	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999863175462	WITHOUT_CLASSIFICATION	1.3682453789981095E-8	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999929627192801	WITHOUT_CLASSIFICATION	7.037280719988461E-6	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9973532249956023	WITHOUT_CLASSIFICATION	0.002646775004397725	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9989598257986542	WITHOUT_CLASSIFICATION	0.0010401742013458081	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996854033116055	WITHOUT_CLASSIFICATION	3.1459668839461035E-4	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.999999822457999	WITHOUT_CLASSIFICATION	1.7754200095253253E-7	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999993980102938	WITHOUT_CLASSIFICATION	6.019897062543023E-7	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999516271591229	WITHOUT_CLASSIFICATION	4.837284087710373E-5	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999980294945677	WITHOUT_CLASSIFICATION	1.9705054322177783E-6	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999998234315435	WITHOUT_CLASSIFICATION	1.7656845650732693E-6	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999977917772603	WITHOUT_CLASSIFICATION	2.2082227396875607E-6	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999996379013537	WITHOUT_CLASSIFICATION	3.6209864635210604E-7	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9992851601123631	WITHOUT_CLASSIFICATION	7.14839887636965E-4	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9984054567294042	WITHOUT_CLASSIFICATION	0.001594543270595841	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997381629937	WITHOUT_CLASSIFICATION	2.618370062128061E-7	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999925860590821	WITHOUT_CLASSIFICATION	7.41394091783399E-6	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999997282770664	WITHOUT_CLASSIFICATION	2.717229335758274E-7	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999644109293859	WITHOUT_CLASSIFICATION	3.558907061414919E-5	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9997035143289449	WITHOUT_CLASSIFICATION	2.964856710551552E-4	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9838117116580053	WITHOUT_CLASSIFICATION	0.01618828834199481	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999999544371588	WITHOUT_CLASSIFICATION	4.556284120991017E-7	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984591093252726	WITHOUT_CLASSIFICATION	0.0015408906747273945	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999979390895455	WITHOUT_CLASSIFICATION	2.0609104544619612E-6	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.999967773187628	WITHOUT_CLASSIFICATION	3.222681237199499E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.999967773187628	WITHOUT_CLASSIFICATION	3.222681237199499E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999945197022524	WITHOUT_CLASSIFICATION	5.480297747611843E-6	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999873662960681	WITHOUT_CLASSIFICATION	1.2633703932007798E-5	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9998576969927432	WITHOUT_CLASSIFICATION	1.4230300725674846E-4	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999881514713	WITHOUT_CLASSIFICATION	1.1848528680794363E-8	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998562465700851	WITHOUT_CLASSIFICATION	1.437534299148632E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999988039758712	WITHOUT_CLASSIFICATION	1.1960241287896632E-5	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9999903875226427	WITHOUT_CLASSIFICATION	9.612477357249038E-6	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999779827637422	WITHOUT_CLASSIFICATION	2.2017236257730135E-5	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999957854993492	WITHOUT_CLASSIFICATION	4.214500650816168E-6	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999996814386768	WITHOUT_CLASSIFICATION	3.1856132319993106E-7	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999980510811269	WITHOUT_CLASSIFICATION	1.9489188730734473E-6	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999975519951527	WITHOUT_CLASSIFICATION	2.44800484729389E-6	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999443258754	WITHOUT_CLASSIFICATION	5.567412461441519E-8	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999999996045072	WITHOUT_CLASSIFICATION	3.954928098940866E-9	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999836096126	WITHOUT_CLASSIFICATION	1.6390387369399923E-8	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999999975571123	WITHOUT_CLASSIFICATION	2.4428877057880184E-8	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997817274289	WITHOUT_CLASSIFICATION	2.1827257102427754E-7	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999662986775	WITHOUT_CLASSIFICATION	3.3701322492113644E-8	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999368412269	WITHOUT_CLASSIFICATION	6.315877314308558E-8	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999956032713412	WITHOUT_CLASSIFICATION	4.396728658831328E-6	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999990576708411	WITHOUT_CLASSIFICATION	9.423291588597546E-7	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999767291629962	WITHOUT_CLASSIFICATION	2.3270837003842242E-5	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999996774167209	WITHOUT_CLASSIFICATION	3.225832790512386E-7	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999990249688424	WITHOUT_CLASSIFICATION	9.750311576688916E-7	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9838117116580053	WITHOUT_CLASSIFICATION	0.01618828834199481	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999997642726979	WITHOUT_CLASSIFICATION	2.3572730209829744E-6	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999894751643287	WITHOUT_CLASSIFICATION	1.0524835671357174E-5	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999994188628891	WITHOUT_CLASSIFICATION	5.81137110868742E-7	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999919555858854	WITHOUT_CLASSIFICATION	8.044414114560258E-6	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9937095864615981	WITHOUT_CLASSIFICATION	0.006290413538401903	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999983662518986	WITHOUT_CLASSIFICATION	1.6337481014395847E-6	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999979097572013	WITHOUT_CLASSIFICATION	2.0902427987419267E-6	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999997028309251	WITHOUT_CLASSIFICATION	2.9716907488219147E-7	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999996229156614	WITHOUT_CLASSIFICATION	3.770843385963729E-7	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.999999994598662	WITHOUT_CLASSIFICATION	5.401338041370405E-9	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999976118777792	WITHOUT_CLASSIFICATION	2.3881222207549856E-6	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999999188235638	WITHOUT_CLASSIFICATION	8.117643618691065E-7	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999951011835074	WITHOUT_CLASSIFICATION	4.898816492570881E-6	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9985458711943405	WITHOUT_CLASSIFICATION	0.0014541288056595658	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9880389259985102	WITHOUT_CLASSIFICATION	0.01196107400148984	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999998746339734	WITHOUT_CLASSIFICATION	1.2536602660978098E-7	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999998746339734	WITHOUT_CLASSIFICATION	1.2536602660978098E-7	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999567834803289	WITHOUT_CLASSIFICATION	4.3216519671076266E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999694313146	WITHOUT_CLASSIFICATION	3.056868542902425E-8	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998800571907853	WITHOUT_CLASSIFICATION	1.1994280921473064E-4	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998800571907853	WITHOUT_CLASSIFICATION	1.1994280921473064E-4	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999999594471315	WITHOUT_CLASSIFICATION	4.0552868532291674E-8	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.999972848244371	WITHOUT_CLASSIFICATION	2.7151755628924992E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999643125708254	WITHOUT_CLASSIFICATION	3.568742917448911E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999979060333	WITHOUT_CLASSIFICATION	2.0939667346242404E-9	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999872173756519	WITHOUT_CLASSIFICATION	1.2782624348060047E-5	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999986343888759	WITHOUT_CLASSIFICATION	1.3656111241701374E-6	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999991001285218	WITHOUT_CLASSIFICATION	8.998714782903473E-7	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999991001285218	WITHOUT_CLASSIFICATION	8.998714782903473E-7	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999995287799233	WITHOUT_CLASSIFICATION	4.7122007683889E-7	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999974111436237	WITHOUT_CLASSIFICATION	2.588856376178274E-6	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999998727413408	WITHOUT_CLASSIFICATION	1.2725865906414344E-7	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999590671512893	WITHOUT_CLASSIFICATION	4.093284871062075E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999590671512893	WITHOUT_CLASSIFICATION	4.093284871062075E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.999996647229229	WITHOUT_CLASSIFICATION	3.35277077099897E-6	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999499127484616	WITHOUT_CLASSIFICATION	5.0087251538369476E-5	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9965823977472719	WITHOUT_CLASSIFICATION	0.003417602252728228	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999999512596418	WITHOUT_CLASSIFICATION	4.874035825577265E-8	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999904719547619	WITHOUT_CLASSIFICATION	9.528045238003054E-6	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999007146733	WITHOUT_CLASSIFICATION	9.928532674289094E-8	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999950179806975	WITHOUT_CLASSIFICATION	4.982019302580144E-6	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999994790363873	WITHOUT_CLASSIFICATION	5.20963612758524E-7	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999890858783	WITHOUT_CLASSIFICATION	1.091412170688585E-8	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999838606621363	WITHOUT_CLASSIFICATION	1.6139337863679816E-5	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999958846166	WITHOUT_CLASSIFICATION	4.1153834596617795E-9	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9995242508459422	WITHOUT_CLASSIFICATION	4.757491540578236E-4	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999993723658891	WITHOUT_CLASSIFICATION	6.276341107775901E-7	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9989443693101511	WITHOUT_CLASSIFICATION	0.001055630689848903	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999984221208309	WITHOUT_CLASSIFICATION	1.577879169121519E-6	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999973022600321	WITHOUT_CLASSIFICATION	2.6977399679391764E-6	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999998824509304	WITHOUT_CLASSIFICATION	1.1754906952379714E-7	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999943231637373	WITHOUT_CLASSIFICATION	5.676836262784115E-6	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9998936575796877	WITHOUT_CLASSIFICATION	1.0634242031229297E-4	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998710566049255	WITHOUT_CLASSIFICATION	1.289433950743913E-4	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9993789300334912	WITHOUT_CLASSIFICATION	6.210699665088117E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999806913776371	WITHOUT_CLASSIFICATION	1.9308622362865737E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999989423980853	WITHOUT_CLASSIFICATION	1.057601914744783E-6	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999965824442769	WITHOUT_CLASSIFICATION	3.4175557230475085E-6	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999986919139339	WITHOUT_CLASSIFICATION	1.3080860661609234E-6	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999905109726929	WITHOUT_CLASSIFICATION	9.489027307162247E-6	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999989855434461	WITHOUT_CLASSIFICATION	1.0144565538548026E-6	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999180165884907	WITHOUT_CLASSIFICATION	8.198341150928909E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999986664626	WITHOUT_CLASSIFICATION	1.3335373134520474E-9	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999996417501908	WITHOUT_CLASSIFICATION	3.5824980911041304E-7	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9988281183497255	WITHOUT_CLASSIFICATION	0.0011718816502745148	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999993496309015	WITHOUT_CLASSIFICATION	6.503690983756569E-7	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999993462889402	WITHOUT_CLASSIFICATION	6.537110597567422E-7	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999863003063932	WITHOUT_CLASSIFICATION	1.3699693606825958E-5	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999992529992977	WITHOUT_CLASSIFICATION	7.470007023299803E-7	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999325679944592	WITHOUT_CLASSIFICATION	6.743200554085024E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9999951511987609	WITHOUT_CLASSIFICATION	4.848801238999223E-6	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999980797731591	WITHOUT_CLASSIFICATION	1.920226840938367E-6	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999947678135603	WITHOUT_CLASSIFICATION	5.23218643970461E-6	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999994766181212	WITHOUT_CLASSIFICATION	5.233818789455948E-7	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9989174619583382	WITHOUT_CLASSIFICATION	0.001082538041661802	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9980257635551348	WITHOUT_CLASSIFICATION	0.001974236444865152	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9999954308720077	WITHOUT_CLASSIFICATION	4.569127992224187E-6	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999990857292261	WITHOUT_CLASSIFICATION	9.142707738921048E-7	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999988971131969	WITHOUT_CLASSIFICATION	1.1028868031845883E-6	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.999995439476129	WITHOUT_CLASSIFICATION	4.560523870959734E-6	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9985822080152537	WITHOUT_CLASSIFICATION	0.0014177919847463297	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999974243408852	WITHOUT_CLASSIFICATION	2.5756591147796243E-6	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999772364815692	WITHOUT_CLASSIFICATION	2.276351843072732E-5	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999998814791563	WITHOUT_CLASSIFICATION	1.1852084377363147E-7	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9978116403113434	WITHOUT_CLASSIFICATION	0.002188359688656538	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999995160145134	WITHOUT_CLASSIFICATION	4.839854866229292E-7	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999518939844	WITHOUT_CLASSIFICATION	4.8106015478301276E-8	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.999999976480352	WITHOUT_CLASSIFICATION	2.3519648017774565E-8	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999270180720633	WITHOUT_CLASSIFICATION	7.298192793670885E-5	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999961067220628	WITHOUT_CLASSIFICATION	3.893277937234525E-6	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9993191605531621	WITHOUT_CLASSIFICATION	6.808394468378997E-4	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999986974421378	WITHOUT_CLASSIFICATION	1.302557862186483E-6	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999633286984303	WITHOUT_CLASSIFICATION	3.6671301569702247E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.999999284330904	WITHOUT_CLASSIFICATION	7.156690958484154E-7	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999988008680855	WITHOUT_CLASSIFICATION	1.199131914499831E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999988008680855	WITHOUT_CLASSIFICATION	1.199131914499831E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999950357424	WITHOUT_CLASSIFICATION	4.964257544877782E-9	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999974982598391	WITHOUT_CLASSIFICATION	2.5017401609625798E-6	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999989282947	WITHOUT_CLASSIFICATION	1.0717052699956476E-9	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999900702597	WITHOUT_CLASSIFICATION	9.929740382041454E-9	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999924132146131	WITHOUT_CLASSIFICATION	7.5867853869404404E-6	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999996904943474	WITHOUT_CLASSIFICATION	3.095056526157327E-7	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999833485762	WITHOUT_CLASSIFICATION	1.665142369097222E-8	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999778766365	WITHOUT_CLASSIFICATION	2.212336349253665E-8	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999989263566572	WITHOUT_CLASSIFICATION	1.0736433427355053E-6	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999930014684684	WITHOUT_CLASSIFICATION	6.998531531605817E-6	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999678102730662	WITHOUT_CLASSIFICATION	3.21897269337522E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999890292533339	WITHOUT_CLASSIFICATION	1.097074666612486E-5	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999992444632807	WITHOUT_CLASSIFICATION	7.555367192775486E-7	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.99999999973002	WITHOUT_CLASSIFICATION	2.699800790601346E-10	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999997301074898	WITHOUT_CLASSIFICATION	2.698925102616109E-7	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999997301074898	WITHOUT_CLASSIFICATION	2.698925102616109E-7	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999992660260829	WITHOUT_CLASSIFICATION	7.339739172370223E-7	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9992482921831679	WITHOUT_CLASSIFICATION	7.517078168321242E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999999955243598	WITHOUT_CLASSIFICATION	4.475640200840618E-8	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999526899862	WITHOUT_CLASSIFICATION	4.731001382348894E-8	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999283954992	WITHOUT_CLASSIFICATION	7.160450081079484E-8	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945587688893	WITHOUT_CLASSIFICATION	5.441231110596029E-6	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999999999033545	WITHOUT_CLASSIFICATION	9.664549634129372E-10	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9999894378620258	WITHOUT_CLASSIFICATION	1.0562137974229775E-5	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.992841179497347	WITHOUT_CLASSIFICATION	0.007158820502653084	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999994203723	WITHOUT_CLASSIFICATION	5.796276981917746E-10	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999386469249154	WITHOUT_CLASSIFICATION	6.135307508465124E-5	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999829790741	WITHOUT_CLASSIFICATION	1.7020925866219286E-8	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999996392233961	WITHOUT_CLASSIFICATION	3.6077660389201473E-7	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999992141050801	WITHOUT_CLASSIFICATION	7.858949200285513E-7	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999998352700794	WITHOUT_CLASSIFICATION	1.6472992055271784E-7	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999865205747641	WITHOUT_CLASSIFICATION	1.3479425235799729E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998804745064594	WITHOUT_CLASSIFICATION	1.19525493540468E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999997429033931	WITHOUT_CLASSIFICATION	2.5709660687641114E-7	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999965641476635	WITHOUT_CLASSIFICATION	3.435852336646447E-6	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998142033141	WITHOUT_CLASSIFICATION	1.8579668601220586E-7	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999939832798	WITHOUT_CLASSIFICATION	6.0167202416389175E-9	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999283704342	WITHOUT_CLASSIFICATION	7.16295658442211E-8	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999995259941602	WITHOUT_CLASSIFICATION	4.740058397705477E-7	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999877917439	WITHOUT_CLASSIFICATION	1.2208256089745853E-7	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.99999991860769	WITHOUT_CLASSIFICATION	8.139230991807965E-8	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9999994569730266	WITHOUT_CLASSIFICATION	5.4302697331879E-7	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9979626787299358	WITHOUT_CLASSIFICATION	0.002037321270064152	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999980453265361	WITHOUT_CLASSIFICATION	1.954673463820563E-6	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999648425453891	WITHOUT_CLASSIFICATION	3.515745461083443E-5	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999633283964832	WITHOUT_CLASSIFICATION	3.667160351679808E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999995669742716	WITHOUT_CLASSIFICATION	4.3302572837875573E-7	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999999916174611	WITHOUT_CLASSIFICATION	8.38253888528999E-8	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.999991693968432	WITHOUT_CLASSIFICATION	8.306031567963167E-6	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999909142244978	WITHOUT_CLASSIFICATION	9.085775502215833E-6	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999997738482	WITHOUT_CLASSIFICATION	2.2615183137106143E-10	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999960384477289	WITHOUT_CLASSIFICATION	3.9615522711767526E-6	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999992635486654	WITHOUT_CLASSIFICATION	7.364513345514529E-7	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999985007468635	WITHOUT_CLASSIFICATION	1.4992531365895633E-6	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999410858981	WITHOUT_CLASSIFICATION	5.891410204335158E-8	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999996065036533	WITHOUT_CLASSIFICATION	3.934963467660057E-7	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9985256255545859	WITHOUT_CLASSIFICATION	0.0014743744454140957	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999410991979103	WITHOUT_CLASSIFICATION	5.8900802089808236E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999323816923677	WITHOUT_CLASSIFICATION	6.761830763230036E-4	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999323816923677	WITHOUT_CLASSIFICATION	6.761830763230036E-4	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999717039846	WITHOUT_CLASSIFICATION	2.8296015461338628E-8	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9996292185200473	WITHOUT_CLASSIFICATION	3.707814799527636E-4	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999967670100197	WITHOUT_CLASSIFICATION	3.232989980217511E-6	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999444881637326	WITHOUT_CLASSIFICATION	5.5511836267317524E-5	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999998200441864	WITHOUT_CLASSIFICATION	1.7995581360644097E-6	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999432030146	WITHOUT_CLASSIFICATION	5.6796985485175775E-8	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997962834143167	WITHOUT_CLASSIFICATION	2.0371658568336612E-4	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999479146799	WITHOUT_CLASSIFICATION	5.208532015498945E-8	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9948374633330738	WITHOUT_CLASSIFICATION	0.005162536666926306	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993673743295	WITHOUT_CLASSIFICATION	6.32625670537504E-7	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998443231946	WITHOUT_CLASSIFICATION	1.5567680543998412E-7	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999936628341757	WITHOUT_CLASSIFICATION	6.337165824268368E-6	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999978020341568	WITHOUT_CLASSIFICATION	2.1979658430953546E-6	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999789659646	WITHOUT_CLASSIFICATION	2.103403536044353E-8	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.999995640005421	WITHOUT_CLASSIFICATION	4.359994578964541E-6	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999835713443227	WITHOUT_CLASSIFICATION	1.6428655677330612E-5	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9996703595887112	WITHOUT_CLASSIFICATION	3.2964041128879807E-4	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999947252441549	WITHOUT_CLASSIFICATION	5.27475584512733E-6	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999507311395	WITHOUT_CLASSIFICATION	4.926886066881277E-8	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9988798418503736	WITHOUT_CLASSIFICATION	0.0011201581496264347	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999995904166596	WITHOUT_CLASSIFICATION	4.0958334029123045E-7	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9978960578130718	WITHOUT_CLASSIFICATION	0.0021039421869282564	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999699656492328	WITHOUT_CLASSIFICATION	3.0034350767200768E-5	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999995018233	WITHOUT_CLASSIFICATION	4.981767340637928E-10	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999994711015335	WITHOUT_CLASSIFICATION	5.288984665078315E-7	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999199730108681	WITHOUT_CLASSIFICATION	8.002698913183575E-5	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999486432027036	WITHOUT_CLASSIFICATION	5.1356797296439733E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999966564260921	WITHOUT_CLASSIFICATION	3.343573907852648E-6	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999805361429	WITHOUT_CLASSIFICATION	1.94638570672439E-8	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999922469201884	WITHOUT_CLASSIFICATION	7.753079811539285E-6	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998646546071494	WITHOUT_CLASSIFICATION	1.3534539285059614E-4	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999779452491	WITHOUT_CLASSIFICATION	2.205475092188463E-8	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999955212947436	WITHOUT_CLASSIFICATION	4.478705256507257E-6	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999535901605	WITHOUT_CLASSIFICATION	4.640983952834933E-8	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999981920264397	WITHOUT_CLASSIFICATION	1.8079735602611355E-6	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999978675608	WITHOUT_CLASSIFICATION	2.132439302716954E-9	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999985525241706	WITHOUT_CLASSIFICATION	1.44747582943637E-6	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999880394747	WITHOUT_CLASSIFICATION	1.196052539454128E-8	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999975299011907	WITHOUT_CLASSIFICATION	2.470098809232419E-6	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999873378194	WITHOUT_CLASSIFICATION	1.2662180566584452E-8	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999994374950066	WITHOUT_CLASSIFICATION	5.625049933957801E-7	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999956013774988	WITHOUT_CLASSIFICATION	4.398622501287831E-6	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999513199722	WITHOUT_CLASSIFICATION	4.868002780281677E-7	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9991116798023325	WITHOUT_CLASSIFICATION	8.883201976675152E-4	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999279283376	WITHOUT_CLASSIFICATION	7.207166240417891E-8	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.999999971735268	WITHOUT_CLASSIFICATION	2.826473207345365E-8	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999156018109	WITHOUT_CLASSIFICATION	8.439818910612824E-8	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.99989126902205	WITHOUT_CLASSIFICATION	1.0873097795000671E-4	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999981158811068	WITHOUT_CLASSIFICATION	1.8841188932453549E-6	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999992444632807	WITHOUT_CLASSIFICATION	7.555367192775486E-7	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999996879713866	WITHOUT_CLASSIFICATION	3.120286133573821E-7	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999989518569	WITHOUT_CLASSIFICATION	1.0481430424275073E-9	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998916875968373	WITHOUT_CLASSIFICATION	1.0831240316279247E-4	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999655073011	WITHOUT_CLASSIFICATION	3.4492698885607244E-8	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999973573158	WITHOUT_CLASSIFICATION	2.6426841490339965E-9	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998567913750497	WITHOUT_CLASSIFICATION	1.4320862495029236E-4	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999593282336207	WITHOUT_CLASSIFICATION	4.067176637927281E-5	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.994038790543566	WITHOUT_CLASSIFICATION	0.005961209456434023	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998068724797	WITHOUT_CLASSIFICATION	1.9312752034678277E-7	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9973645222091185	WITHOUT_CLASSIFICATION	0.002635477790881494	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999996422651877	WITHOUT_CLASSIFICATION	3.577348123255479E-7	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9986759359043123	WITHOUT_CLASSIFICATION	0.0013240640956877449	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999232382586	WITHOUT_CLASSIFICATION	7.676174132132977E-8	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999956516138386	WITHOUT_CLASSIFICATION	4.348386161331854E-6	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999855348210658	WITHOUT_CLASSIFICATION	1.4465178934325804E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999558402219	WITHOUT_CLASSIFICATION	4.415977808635294E-8	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999987953227709	WITHOUT_CLASSIFICATION	1.2046772291196112E-6	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999963744508851	WITHOUT_CLASSIFICATION	3.6255491150349518E-6	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999994206222855	WITHOUT_CLASSIFICATION	5.793777145248142E-7	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999860218545013	WITHOUT_CLASSIFICATION	1.3978145498759676E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999558402219	WITHOUT_CLASSIFICATION	4.415977808635294E-8	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9863654649406438	WITHOUT_CLASSIFICATION	0.013634535059356237	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999504690019452	WITHOUT_CLASSIFICATION	4.9530998054867554E-5	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999991678891	WITHOUT_CLASSIFICATION	8.321109134989039E-10	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999897038343	WITHOUT_CLASSIFICATION	1.029616564305093E-8	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999992218905844	WITHOUT_CLASSIFICATION	7.781094155486501E-7	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999637899212179	WITHOUT_CLASSIFICATION	3.621007878204527E-5	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999892756	WITHOUT_CLASSIFICATION	1.0724490975905226E-11	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9995856793793787	WITHOUT_CLASSIFICATION	4.1432062062139014E-4	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999230790049	WITHOUT_CLASSIFICATION	7.692099506268044E-8	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9992746511233976	WITHOUT_CLASSIFICATION	7.253488766024388E-4	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999987046997114	WITHOUT_CLASSIFICATION	1.2953002886657028E-6	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9994943098417797	WITHOUT_CLASSIFICATION	5.056901582203985E-4	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999992121533451	WITHOUT_CLASSIFICATION	7.878466549029348E-7	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999999746551517	WITHOUT_CLASSIFICATION	2.534484824511875E-8	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999994823794089	WITHOUT_CLASSIFICATION	5.176205910309051E-7	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999281442520546	WITHOUT_CLASSIFICATION	7.185574794544955E-5	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999990249688424	WITHOUT_CLASSIFICATION	9.750311576688916E-7	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999995277142307	WITHOUT_CLASSIFICATION	4.722857692627529E-7	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999163138786	WITHOUT_CLASSIFICATION	8.36861213490593E-8	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999764452263881	WITHOUT_CLASSIFICATION	2.3554773611990537E-5	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9996923126112828	WITHOUT_CLASSIFICATION	3.076873887172716E-4	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999995265311	WITHOUT_CLASSIFICATION	4.734689883378697E-10	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999978430524543	WITHOUT_CLASSIFICATION	2.1569475457121303E-6	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999883846766378	WITHOUT_CLASSIFICATION	1.1615323362285736E-5	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999874711	WITHOUT_CLASSIFICATION	1.2528865276159592E-11	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999997168334686	WITHOUT_CLASSIFICATION	2.831665313948918E-7	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999979813695994	WITHOUT_CLASSIFICATION	2.0186304005095595E-6	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9993181083439764	WITHOUT_CLASSIFICATION	6.818916560236728E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998360491542	WITHOUT_CLASSIFICATION	1.6395084575456284E-7	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999941306469864	WITHOUT_CLASSIFICATION	5.869353013645209E-6	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.8290348232457545	WITHOUT_CLASSIFICATION	0.17096517675424552	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999994051439214	WITHOUT_CLASSIFICATION	5.948560786741348E-7	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9993481457020543	WITHOUT_CLASSIFICATION	6.518542979457329E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9759527292957122	WITHOUT_CLASSIFICATION	0.024047270704287808	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999964947900324	WITHOUT_CLASSIFICATION	3.505209967616252E-6	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999997574266	WITHOUT_CLASSIFICATION	2.4257338963377026E-10	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999995723965	WITHOUT_CLASSIFICATION	4.276034116722911E-10	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999985220185	WITHOUT_CLASSIFICATION	1.4779814745411494E-9	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999851442810884	WITHOUT_CLASSIFICATION	1.4855718911467794E-5	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999657647402	WITHOUT_CLASSIFICATION	3.4235259861135485E-8	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999901045339907	WITHOUT_CLASSIFICATION	9.895466009265547E-6	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999972813180262	WITHOUT_CLASSIFICATION	2.7186819738077167E-6	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999972813180262	WITHOUT_CLASSIFICATION	2.7186819738077167E-6	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999973615243147	WITHOUT_CLASSIFICATION	2.638475685305122E-5	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994291346298	WITHOUT_CLASSIFICATION	5.708653702154164E-7	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999962154943	WITHOUT_CLASSIFICATION	3.784505690985832E-8	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999774643655813	WITHOUT_CLASSIFICATION	2.2535634418684904E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999955274472783	WITHOUT_CLASSIFICATION	4.472552721699108E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999955274472783	WITHOUT_CLASSIFICATION	4.472552721699108E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999377231856497	WITHOUT_CLASSIFICATION	6.227681435038846E-5	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999917946303	WITHOUT_CLASSIFICATION	8.20536967019752E-9	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999999120016305	WITHOUT_CLASSIFICATION	8.799836949229351E-7	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999283294466	WITHOUT_CLASSIFICATION	7.167055335736347E-8	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999999873585848	WITHOUT_CLASSIFICATION	1.2641415205133579E-7	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999990257047983	WITHOUT_CLASSIFICATION	9.742952017520172E-7	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999999941958966	WITHOUT_CLASSIFICATION	5.804103385370673E-8	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999461886367115	WITHOUT_CLASSIFICATION	5.38113632884265E-5	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999935928207294	WITHOUT_CLASSIFICATION	6.407179270555636E-6	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999900398223	WITHOUT_CLASSIFICATION	9.960177757432417E-9	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999267794312486	WITHOUT_CLASSIFICATION	7.322056875133672E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999334377482	WITHOUT_CLASSIFICATION	6.656225172682228E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999334377482	WITHOUT_CLASSIFICATION	6.656225172682228E-8	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999990928475	WITHOUT_CLASSIFICATION	9.071524715848059E-10	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999695819945262	WITHOUT_CLASSIFICATION	3.0418005473767096E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.99999978165968	WITHOUT_CLASSIFICATION	2.183403201052651E-7	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999999555265391	WITHOUT_CLASSIFICATION	4.447346104285877E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984591093252726	WITHOUT_CLASSIFICATION	0.0015408906747273945	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999999062902539	WITHOUT_CLASSIFICATION	9.370974617947174E-8	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999324762261	WITHOUT_CLASSIFICATION	6.752377387607773E-8	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984591093252726	WITHOUT_CLASSIFICATION	0.0015408906747273945	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999844548991	WITHOUT_CLASSIFICATION	1.5545100840849613E-8	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999106843472672	WITHOUT_CLASSIFICATION	8.93156527328571E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999967244339619	WITHOUT_CLASSIFICATION	3.2755660381144615E-6	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999957953544	WITHOUT_CLASSIFICATION	4.204645594441616E-9	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9992746511233976	WITHOUT_CLASSIFICATION	7.253488766024388E-4	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999993694238415	WITHOUT_CLASSIFICATION	6.305761585147839E-7	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9993844194464057	WITHOUT_CLASSIFICATION	6.155805535942554E-4	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999919276735436	WITHOUT_CLASSIFICATION	8.072326456320501E-6	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999999491019844	WITHOUT_CLASSIFICATION	5.08980155280552E-8	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999991184839645	WITHOUT_CLASSIFICATION	8.815160356532641E-7	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999993650904878	WITHOUT_CLASSIFICATION	6.349095121370571E-7	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999991757075052	WITHOUT_CLASSIFICATION	8.242924949118506E-7	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999999744672913	WITHOUT_CLASSIFICATION	2.5532708701942888E-8	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999969458826405	WITHOUT_CLASSIFICATION	3.0541173594596455E-6	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.994679830618536	WITHOUT_CLASSIFICATION	0.005320169381463925	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.994679830618536	WITHOUT_CLASSIFICATION	0.005320169381463925	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999941973089609	WITHOUT_CLASSIFICATION	5.802691039104263E-6	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999989887043	WITHOUT_CLASSIFICATION	1.0112957228777603E-9	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999955023423284	WITHOUT_CLASSIFICATION	4.497657671593846E-6	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999983068292242	WITHOUT_CLASSIFICATION	1.6931707758322712E-6	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.999999225880848	WITHOUT_CLASSIFICATION	7.741191519906553E-7	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999996286349305	WITHOUT_CLASSIFICATION	3.7136506949780823E-7	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999995865922122	WITHOUT_CLASSIFICATION	4.13407787808485E-7	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999480373819409	WITHOUT_CLASSIFICATION	5.196261805907018E-5	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998869421485	WITHOUT_CLASSIFICATION	1.130578515197868E-7	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999983132455855	WITHOUT_CLASSIFICATION	1.6867544143976552E-6	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993460283581	WITHOUT_CLASSIFICATION	6.539716419051801E-6	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9680192561959415	WITHOUT_CLASSIFICATION	0.0319807438040585	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999997328132515	WITHOUT_CLASSIFICATION	2.67186748456121E-7	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998280351928	WITHOUT_CLASSIFICATION	1.719648071033202E-7	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999968371733167	WITHOUT_CLASSIFICATION	3.16282668324684E-6	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999999949948881	WITHOUT_CLASSIFICATION	5.005111903275938E-8	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999487536904585	WITHOUT_CLASSIFICATION	5.1246309541568074E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999573550900636	WITHOUT_CLASSIFICATION	4.2644909936520386E-5	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9993321791883834	WITHOUT_CLASSIFICATION	6.678208116166249E-4	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9994358269559404	WITHOUT_CLASSIFICATION	5.641730440595587E-4	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999996788536656	WITHOUT_CLASSIFICATION	3.2114633435136475E-7	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999993991556	WITHOUT_CLASSIFICATION	6.008443241471462E-10	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9965823977472719	WITHOUT_CLASSIFICATION	0.003417602252728228	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999994514103	WITHOUT_CLASSIFICATION	5.485897933073577E-10	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999993681097526	WITHOUT_CLASSIFICATION	6.318902474034734E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999993681097526	WITHOUT_CLASSIFICATION	6.318902474034734E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9996997119659442	WITHOUT_CLASSIFICATION	3.0028803405589413E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998500648551917	WITHOUT_CLASSIFICATION	1.499351448082194E-4	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999989206158	WITHOUT_CLASSIFICATION	1.0793842476535698E-9	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999962402382939	WITHOUT_CLASSIFICATION	3.7597617060194455E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999920663247465	WITHOUT_CLASSIFICATION	7.933675253504411E-6	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999898908392049	WITHOUT_CLASSIFICATION	1.0109160795035797E-5	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.8039398910743114	WITHOUT_CLASSIFICATION	0.1960601089256886	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999843329168108	WITHOUT_CLASSIFICATION	1.5667083189262625E-5	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.684469829689572	WITHOUT_CLASSIFICATION	0.3155301703104279	DEFECT
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.9029907661685058	DEFECT	0.09700923383149418	WITHOUT_CLASSIFICATION
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.8818064478712474	DEFECT	0.11819355212875257	WITHOUT_CLASSIFICATION
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9655127040102233	DEFECT	0.03448729598977673	WITHOUT_CLASSIFICATION
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.999999999067257	WITHOUT_CLASSIFICATION	9.327430179411055E-10	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9992280717115368	WITHOUT_CLASSIFICATION	7.719282884631663E-4	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9644255186789273	DEFECT	0.035574481321072694	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.7699574098116818	WITHOUT_CLASSIFICATION	0.2300425901883183	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.997460097601553	DEFECT	0.0025399023984470585	WITHOUT_CLASSIFICATION
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.740082430291584	WITHOUT_CLASSIFICATION	0.259917569708416	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9101767316926052	DEFECT	0.08982326830739483	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9101767316926052	DEFECT	0.08982326830739483	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9966126548100696	WITHOUT_CLASSIFICATION	0.0033873451899303995	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999818205322921	WITHOUT_CLASSIFICATION	1.817946770787272E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.975619859262228	DEFECT	0.02438014073777194	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.9999416641171113	WITHOUT_CLASSIFICATION	5.833588288871358E-5	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9951016070172153	WITHOUT_CLASSIFICATION	0.004898392982784749	DEFECT
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9498346043532353	WITHOUT_CLASSIFICATION	0.05016539564676481	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.8327086962272634	DEFECT	0.16729130377273663	WITHOUT_CLASSIFICATION
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.8094810757970398	WITHOUT_CLASSIFICATION	0.1905189242029603	DEFECT
TODO: is this completely correct?	DEFECT	0.8202130616239459	WITHOUT_CLASSIFICATION	0.17978693837605406	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.5624625910993182	DEFECT	0.4375374089006819	WITHOUT_CLASSIFICATION
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.7921963263992685	DEFECT	0.20780367360073157	WITHOUT_CLASSIFICATION
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9998495507067323	WITHOUT_CLASSIFICATION	1.5044929326763919E-4	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.9868829612429273	DEFECT	0.013117038757072706	WITHOUT_CLASSIFICATION
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.8015880228162648	DEFECT	0.19841197718373524	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9976022450826543	WITHOUT_CLASSIFICATION	0.0023977549173456545	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.975253172362845	WITHOUT_CLASSIFICATION	0.02474682763715498	DEFECT
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8590372677851932	WITHOUT_CLASSIFICATION	0.14096273221480685	DEFECT
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.8751916816687153	WITHOUT_CLASSIFICATION	0.12480831833128465	DEFECT
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.6755834613032395	DEFECT	0.3244165386967605	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9101767316926052	DEFECT	0.08982326830739483	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9993236387765717	DEFECT	6.763612234283501E-4	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.9238864650530283	WITHOUT_CLASSIFICATION	0.07611353494697169	DEFECT
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.7090325866505663	WITHOUT_CLASSIFICATION	0.2909674133494337	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9975246941236614	WITHOUT_CLASSIFICATION	0.0024753058763385964	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.999989724292803	WITHOUT_CLASSIFICATION	1.0275707197099694E-5	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9999383654407166	WITHOUT_CLASSIFICATION	6.163455928344913E-5	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9956133776699161	WITHOUT_CLASSIFICATION	0.004386622330083896	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.7279883982598417	DEFECT	0.2720116017401582	WITHOUT_CLASSIFICATION
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.9004131438603171	DEFECT	0.09958685613968292	WITHOUT_CLASSIFICATION
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9972756729012614	WITHOUT_CLASSIFICATION	0.002724327098738552	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.9987025692218894	WITHOUT_CLASSIFICATION	0.0012974307781106083	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.9439329711045424	DEFECT	0.05606702889545759	WITHOUT_CLASSIFICATION
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9991593446407111	WITHOUT_CLASSIFICATION	8.40655359289046E-4	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9975481208557031	WITHOUT_CLASSIFICATION	0.0024518791442968858	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.987945367816761	WITHOUT_CLASSIFICATION	0.012054632183238866	DEFECT
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.956616846162289	WITHOUT_CLASSIFICATION	0.04338315383771094	DEFECT
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.9627069490284323	DEFECT	0.03729305097156766	WITHOUT_CLASSIFICATION
