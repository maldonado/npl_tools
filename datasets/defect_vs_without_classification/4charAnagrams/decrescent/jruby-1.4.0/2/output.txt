// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999999921056976	WITHOUT_CLASSIFICATION	7.894302451509413E-9	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999979368756267	WITHOUT_CLASSIFICATION	2.063124373322653E-6	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999951567756961	WITHOUT_CLASSIFICATION	4.843224303898757E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999951567756961	WITHOUT_CLASSIFICATION	4.843224303898757E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999389642368346	WITHOUT_CLASSIFICATION	6.103576316544071E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999389642368346	WITHOUT_CLASSIFICATION	6.103576316544071E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997794466544218	WITHOUT_CLASSIFICATION	2.2055334557823038E-4	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.999999391208322	WITHOUT_CLASSIFICATION	6.087916779542564E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999968951152	WITHOUT_CLASSIFICATION	3.1048848000850786E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999962298405877	WITHOUT_CLASSIFICATION	3.77015941240635E-6	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998370046498852	WITHOUT_CLASSIFICATION	1.6299535011478694E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998370046498852	WITHOUT_CLASSIFICATION	1.6299535011478694E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999986278597606	WITHOUT_CLASSIFICATION	1.3721402394507474E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997824235033508	WITHOUT_CLASSIFICATION	2.1757649664919104E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997824235033508	WITHOUT_CLASSIFICATION	2.1757649664919104E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.999936211048978	WITHOUT_CLASSIFICATION	6.378895102201196E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999565383889517	WITHOUT_CLASSIFICATION	4.3461611048213475E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999793894964083	WITHOUT_CLASSIFICATION	2.0610503591661225E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999793894964083	WITHOUT_CLASSIFICATION	2.0610503591661225E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999793894964083	WITHOUT_CLASSIFICATION	2.0610503591661225E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999793894964083	WITHOUT_CLASSIFICATION	2.0610503591661225E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999793894964083	WITHOUT_CLASSIFICATION	2.0610503591661225E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999793894964083	WITHOUT_CLASSIFICATION	2.0610503591661225E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999793894964083	WITHOUT_CLASSIFICATION	2.0610503591661225E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999567539492229	WITHOUT_CLASSIFICATION	4.324605077700776E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999567539492229	WITHOUT_CLASSIFICATION	4.324605077700776E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999567539492229	WITHOUT_CLASSIFICATION	4.324605077700776E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999567539492229	WITHOUT_CLASSIFICATION	4.324605077700776E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999567539492229	WITHOUT_CLASSIFICATION	4.324605077700776E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999567539492229	WITHOUT_CLASSIFICATION	4.324605077700776E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999567539492229	WITHOUT_CLASSIFICATION	4.324605077700776E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998894427723902	WITHOUT_CLASSIFICATION	1.1055722760977802E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998894427723902	WITHOUT_CLASSIFICATION	1.1055722760977802E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998894427723902	WITHOUT_CLASSIFICATION	1.1055722760977802E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998894427723902	WITHOUT_CLASSIFICATION	1.1055722760977802E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998894427723902	WITHOUT_CLASSIFICATION	1.1055722760977802E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998894427723902	WITHOUT_CLASSIFICATION	1.1055722760977802E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998845084534556	WITHOUT_CLASSIFICATION	1.1549154654446199E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998845084534556	WITHOUT_CLASSIFICATION	1.1549154654446199E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998845084534556	WITHOUT_CLASSIFICATION	1.1549154654446199E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998845084534556	WITHOUT_CLASSIFICATION	1.1549154654446199E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998845084534556	WITHOUT_CLASSIFICATION	1.1549154654446199E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998845084534556	WITHOUT_CLASSIFICATION	1.1549154654446199E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999845832130392	WITHOUT_CLASSIFICATION	1.5416786960806677E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999845832130392	WITHOUT_CLASSIFICATION	1.5416786960806677E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999845832130392	WITHOUT_CLASSIFICATION	1.5416786960806677E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999845832130392	WITHOUT_CLASSIFICATION	1.5416786960806677E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999845832130392	WITHOUT_CLASSIFICATION	1.5416786960806677E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999845832130392	WITHOUT_CLASSIFICATION	1.5416786960806677E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999845832130392	WITHOUT_CLASSIFICATION	1.5416786960806677E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999092459247055	WITHOUT_CLASSIFICATION	9.075407529437453E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999092459247055	WITHOUT_CLASSIFICATION	9.075407529437453E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999092459247055	WITHOUT_CLASSIFICATION	9.075407529437453E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999092459247055	WITHOUT_CLASSIFICATION	9.075407529437453E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999778666118292	WITHOUT_CLASSIFICATION	2.2133388170815847E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999778666118292	WITHOUT_CLASSIFICATION	2.2133388170815847E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965970800404	WITHOUT_CLASSIFICATION	3.4029199596021254E-6	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999997464886753	WITHOUT_CLASSIFICATION	2.5351132467055674E-7	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999977735516262	WITHOUT_CLASSIFICATION	2.2264483738027704E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999984496486037	WITHOUT_CLASSIFICATION	1.5503513963620656E-6	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999996289345457	WITHOUT_CLASSIFICATION	3.710654542028161E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999952991578605	WITHOUT_CLASSIFICATION	4.7008421395822645E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999952991578605	WITHOUT_CLASSIFICATION	4.7008421395822645E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999952991578605	WITHOUT_CLASSIFICATION	4.7008421395822645E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999952991578605	WITHOUT_CLASSIFICATION	4.7008421395822645E-6	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9995247831559088	WITHOUT_CLASSIFICATION	4.752168440912545E-4	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999890122481317	WITHOUT_CLASSIFICATION	1.098775186824481E-5	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999989282155661	WITHOUT_CLASSIFICATION	1.0717844338897569E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.999998904783295	WITHOUT_CLASSIFICATION	1.0952167048978455E-6	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999971721090691	WITHOUT_CLASSIFICATION	2.8278909308782546E-6	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999970933649793	WITHOUT_CLASSIFICATION	2.9066350206970063E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999888485412826	WITHOUT_CLASSIFICATION	1.1151458717421948E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999996770754233	WITHOUT_CLASSIFICATION	3.2292457669862765E-7	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999888714436476	WITHOUT_CLASSIFICATION	1.1128556352291074E-5	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9999819512879367	WITHOUT_CLASSIFICATION	1.8048712063314698E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999996937739677	WITHOUT_CLASSIFICATION	3.062260323336037E-7	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999937093270072	WITHOUT_CLASSIFICATION	6.290672992788566E-6	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999847572635263	WITHOUT_CLASSIFICATION	1.5242736473683337E-5	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.999999983243072	WITHOUT_CLASSIFICATION	1.6756927901969485E-8	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999975818679556	WITHOUT_CLASSIFICATION	2.4181320444079234E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999667144620948	WITHOUT_CLASSIFICATION	3.3285537905185784E-5	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999962510840725	WITHOUT_CLASSIFICATION	3.7489159273482924E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999952991578605	WITHOUT_CLASSIFICATION	4.7008421395822645E-6	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999933279706059	WITHOUT_CLASSIFICATION	6.672029394023895E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999997295176479	WITHOUT_CLASSIFICATION	2.7048235215211333E-7	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999913861665249	WITHOUT_CLASSIFICATION	8.613833475075887E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999825985727016	WITHOUT_CLASSIFICATION	1.7401427298356632E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999890099130176	WITHOUT_CLASSIFICATION	1.0990086982344582E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999998554879833	WITHOUT_CLASSIFICATION	1.4451201667778038E-7	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.999999580487709	WITHOUT_CLASSIFICATION	4.195122910808939E-7	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999999745942951	WITHOUT_CLASSIFICATION	2.5405704921704577E-8	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999999947433645	WITHOUT_CLASSIFICATION	5.256635464804847E-9	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9999641777587867	WITHOUT_CLASSIFICATION	3.5822241213329486E-5	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9999874915168779	WITHOUT_CLASSIFICATION	1.2508483122122328E-5	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.999997695786758	WITHOUT_CLASSIFICATION	2.3042132419492956E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999943031698543	WITHOUT_CLASSIFICATION	5.696830145764306E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999988143272214	WITHOUT_CLASSIFICATION	1.1856727786316234E-6	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999980292800252	WITHOUT_CLASSIFICATION	1.9707199748244784E-6	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999933129294349	WITHOUT_CLASSIFICATION	6.68707056503734E-6	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999989856054275	WITHOUT_CLASSIFICATION	1.0143945724704694E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999995999664373	WITHOUT_CLASSIFICATION	4.000335627102877E-7	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999874847198843	WITHOUT_CLASSIFICATION	1.2515280115687911E-5	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999994747871686	WITHOUT_CLASSIFICATION	5.252128313863791E-7	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9450538006255174	WITHOUT_CLASSIFICATION	0.05494619937448268	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999955175085389	WITHOUT_CLASSIFICATION	4.4824914611156735E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999994241296798	WITHOUT_CLASSIFICATION	5.758703202380251E-7	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999906063171063	WITHOUT_CLASSIFICATION	9.39368289360758E-6	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999912710344153	WITHOUT_CLASSIFICATION	8.728965584700269E-6	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999849785793394	WITHOUT_CLASSIFICATION	1.5021420660663638E-5	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999809057394685	WITHOUT_CLASSIFICATION	1.909426053147505E-5	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999959203004003	WITHOUT_CLASSIFICATION	4.0796995996685445E-6	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.999988606001503	WITHOUT_CLASSIFICATION	1.1393998497035905E-5	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999959683947062	WITHOUT_CLASSIFICATION	4.031605293865437E-6	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999335799856099	WITHOUT_CLASSIFICATION	6.642001439007799E-5	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999958360820429	WITHOUT_CLASSIFICATION	4.163917957111111E-6	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999999640976763	WITHOUT_CLASSIFICATION	3.5902323763934555E-8	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999534665154484	WITHOUT_CLASSIFICATION	4.653348455170037E-5	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.99980354501457	WITHOUT_CLASSIFICATION	1.964549854299594E-4	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.999999378864371	WITHOUT_CLASSIFICATION	6.211356290694174E-7	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999977146742084	WITHOUT_CLASSIFICATION	2.285325791537056E-6	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999792327123136	WITHOUT_CLASSIFICATION	2.0767287686465358E-5	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999986115024858	WITHOUT_CLASSIFICATION	1.3884975141129053E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999966025234936	WITHOUT_CLASSIFICATION	3.3974765063137713E-6	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999988864585397	WITHOUT_CLASSIFICATION	1.113541460233221E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999969407392229	WITHOUT_CLASSIFICATION	3.05926077706353E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9995182972387757	WITHOUT_CLASSIFICATION	4.8170276122433696E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999961746430991	WITHOUT_CLASSIFICATION	3.825356900866112E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999961746430991	WITHOUT_CLASSIFICATION	3.825356900866112E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999999546611883	WITHOUT_CLASSIFICATION	4.5338811637617156E-8	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999992068270671	WITHOUT_CLASSIFICATION	7.931729328147952E-7	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999918705396169	WITHOUT_CLASSIFICATION	8.129460383074706E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9998785349377923	WITHOUT_CLASSIFICATION	1.2146506220762615E-4	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9984546873983983	WITHOUT_CLASSIFICATION	0.0015453126016017563	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9999944813984977	WITHOUT_CLASSIFICATION	5.518601502344295E-6	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999863355028952	WITHOUT_CLASSIFICATION	1.3664497104782434E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999843452580076	WITHOUT_CLASSIFICATION	1.5654741992412952E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999969407392229	WITHOUT_CLASSIFICATION	3.05926077706353E-6	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.999999624485727	WITHOUT_CLASSIFICATION	3.7551427304943363E-7	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999869345297334	WITHOUT_CLASSIFICATION	1.3065470266499449E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999972058513747	WITHOUT_CLASSIFICATION	2.7941486252810897E-6	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.999999990998735	WITHOUT_CLASSIFICATION	9.00126496374007E-9	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999998258220887	WITHOUT_CLASSIFICATION	1.741779113229352E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999336328673	WITHOUT_CLASSIFICATION	6.636713270910983E-8	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999336328673	WITHOUT_CLASSIFICATION	6.636713270910983E-8	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999336328673	WITHOUT_CLASSIFICATION	6.636713270910983E-8	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999943907966735	WITHOUT_CLASSIFICATION	5.609203326411184E-6	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999634088638	WITHOUT_CLASSIFICATION	3.6591136202472556E-8	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999990601864917	WITHOUT_CLASSIFICATION	9.398135083016223E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9629868753107859	WITHOUT_CLASSIFICATION	0.03701312468921412	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999676533372366	WITHOUT_CLASSIFICATION	3.2346662763410544E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999994256711383	WITHOUT_CLASSIFICATION	5.743288616883351E-7	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9988576470296601	WITHOUT_CLASSIFICATION	0.00114235297033984	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999998425157995	WITHOUT_CLASSIFICATION	1.5748420047771056E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999994180067971	WITHOUT_CLASSIFICATION	5.819932028977404E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999994180067971	WITHOUT_CLASSIFICATION	5.819932028977404E-7	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999967930540886	WITHOUT_CLASSIFICATION	3.2069459113664298E-6	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999474453922	WITHOUT_CLASSIFICATION	5.2554607768347465E-8	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999962520005686	WITHOUT_CLASSIFICATION	3.7479994313293617E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999962520005686	WITHOUT_CLASSIFICATION	3.7479994313293617E-6	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999993103447167	WITHOUT_CLASSIFICATION	6.896552834226497E-7	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999998766047018	WITHOUT_CLASSIFICATION	1.233952983019512E-7	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999789388435844	WITHOUT_CLASSIFICATION	2.106115641561363E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999986330110399	WITHOUT_CLASSIFICATION	1.3669889600708746E-6	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999924759065312	WITHOUT_CLASSIFICATION	7.524093468864637E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999993748755867	WITHOUT_CLASSIFICATION	6.25124413318651E-7	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999969422053251	WITHOUT_CLASSIFICATION	3.0577946749396388E-6	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999941703016596	WITHOUT_CLASSIFICATION	5.829698340489053E-6	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999997393061119	WITHOUT_CLASSIFICATION	2.6069388816551205E-7	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999993186477579	WITHOUT_CLASSIFICATION	6.813522421028063E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999969407392229	WITHOUT_CLASSIFICATION	3.05926077706353E-6	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999981237006271	WITHOUT_CLASSIFICATION	1.8762993728945286E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999997913327607	WITHOUT_CLASSIFICATION	2.0866723934173938E-7	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999993208528428	WITHOUT_CLASSIFICATION	6.791471572058805E-7	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9031463182711053	WITHOUT_CLASSIFICATION	0.09685368172889476	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999952711870324	WITHOUT_CLASSIFICATION	4.728812967745899E-6	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999805828690462	WITHOUT_CLASSIFICATION	1.9417130953852587E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999489664874245	WITHOUT_CLASSIFICATION	5.1033512575457154E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998960926176137	WITHOUT_CLASSIFICATION	1.0390738238624126E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999998583448411	WITHOUT_CLASSIFICATION	1.4165515898556045E-7	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999148464613227	WITHOUT_CLASSIFICATION	8.51535386772993E-5	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.999998215583952	WITHOUT_CLASSIFICATION	1.7844160480722616E-6	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999990548009742	WITHOUT_CLASSIFICATION	9.451990257710296E-7	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9998960796036417	WITHOUT_CLASSIFICATION	1.0392039635834259E-4	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999994930117886	WITHOUT_CLASSIFICATION	5.069882114828127E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999995209056807	WITHOUT_CLASSIFICATION	4.790943194325223E-7	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.999999865941476	WITHOUT_CLASSIFICATION	1.3405852391558437E-7	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.999999827035039	WITHOUT_CLASSIFICATION	1.7296496097814293E-7	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999999258907423	WITHOUT_CLASSIFICATION	7.41092576907376E-8	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999995823621061	WITHOUT_CLASSIFICATION	4.176378939578051E-7	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.999999759458682	WITHOUT_CLASSIFICATION	2.405413180701524E-7	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999999315570378	WITHOUT_CLASSIFICATION	6.844296224942911E-8	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999999375525076	WITHOUT_CLASSIFICATION	6.244749238912565E-8	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999998167550579	WITHOUT_CLASSIFICATION	1.832449420512007E-7	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999940386363557	WITHOUT_CLASSIFICATION	5.9613636442573405E-6	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999979285738773	WITHOUT_CLASSIFICATION	2.0714261227125485E-6	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999874451564543	WITHOUT_CLASSIFICATION	1.2554843545688321E-5	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999920647775256	WITHOUT_CLASSIFICATION	7.935222474558349E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999989332435574	WITHOUT_CLASSIFICATION	1.0667564426627737E-6	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999939753507104	WITHOUT_CLASSIFICATION	6.024649289612646E-6	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999997760127654	WITHOUT_CLASSIFICATION	2.2398723457259844E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999999518059848	WITHOUT_CLASSIFICATION	4.819401521533339E-8	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999999304551066	WITHOUT_CLASSIFICATION	6.954489334749948E-8	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999897056340477	WITHOUT_CLASSIFICATION	1.0294365952351515E-5	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999798099616529	WITHOUT_CLASSIFICATION	2.0190038347174365E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999955001310556	WITHOUT_CLASSIFICATION	4.4998689443623225E-6	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999959996753646	WITHOUT_CLASSIFICATION	4.000324635452167E-6	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999615513716	WITHOUT_CLASSIFICATION	3.844862839165314E-7	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9997244227994073	WITHOUT_CLASSIFICATION	2.755772005927046E-4	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999999325091599	WITHOUT_CLASSIFICATION	6.749084008330087E-8	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999989619241663	WITHOUT_CLASSIFICATION	1.0380758336860871E-6	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.999999079815552	WITHOUT_CLASSIFICATION	9.201844480212854E-7	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999998886583072	WITHOUT_CLASSIFICATION	1.1134169278549289E-7	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999998579451069	WITHOUT_CLASSIFICATION	1.4205489318264404E-7	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999998451079155	WITHOUT_CLASSIFICATION	1.5489208444028836E-7	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999938817434727	WITHOUT_CLASSIFICATION	6.1182565273066165E-6	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999987607357064	WITHOUT_CLASSIFICATION	1.239264293609728E-6	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999994535106989	WITHOUT_CLASSIFICATION	5.464893012217941E-7	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999371993449913	WITHOUT_CLASSIFICATION	6.28006550088315E-5	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999985810696835	WITHOUT_CLASSIFICATION	1.418930316563657E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999948844481897	WITHOUT_CLASSIFICATION	5.115551810211473E-6	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999927226707147	WITHOUT_CLASSIFICATION	7.277329285341825E-6	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.999259405688136	WITHOUT_CLASSIFICATION	7.405943118639447E-4	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999979222045109	WITHOUT_CLASSIFICATION	2.077795489099765E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999996224502457	WITHOUT_CLASSIFICATION	3.775497543962628E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999547397383728	WITHOUT_CLASSIFICATION	4.526026162727001E-5	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999218574590059	WITHOUT_CLASSIFICATION	7.814254099417074E-5	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9999654295420685	WITHOUT_CLASSIFICATION	3.4570457931523914E-5	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999979248380192	WITHOUT_CLASSIFICATION	2.075161980839532E-6	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999998405838166	WITHOUT_CLASSIFICATION	1.594161833239826E-7	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999999717464203	WITHOUT_CLASSIFICATION	2.8253579822091706E-8	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999925804045822	WITHOUT_CLASSIFICATION	7.419595417833384E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999925804045822	WITHOUT_CLASSIFICATION	7.419595417833384E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999940854186683	WITHOUT_CLASSIFICATION	5.914581331661879E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999940854186683	WITHOUT_CLASSIFICATION	5.914581331661879E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999883632405937	WITHOUT_CLASSIFICATION	1.1636759406254228E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999883632405937	WITHOUT_CLASSIFICATION	1.1636759406254228E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999851482240208	WITHOUT_CLASSIFICATION	1.4851775979070173E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999851482240208	WITHOUT_CLASSIFICATION	1.4851775979070173E-5	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999996246036805	WITHOUT_CLASSIFICATION	3.753963194960251E-7	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999997332514936	WITHOUT_CLASSIFICATION	2.6674850630465786E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.999994149585169	WITHOUT_CLASSIFICATION	5.850414831137867E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999984024029528	WITHOUT_CLASSIFICATION	1.5975970472654692E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9998890419867239	WITHOUT_CLASSIFICATION	1.109580132761287E-4	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999898148891601	WITHOUT_CLASSIFICATION	1.0185110839901639E-5	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.999982658295037	WITHOUT_CLASSIFICATION	1.7341704963079745E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999999028020188	WITHOUT_CLASSIFICATION	9.719798123409233E-8	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999999113658762	WITHOUT_CLASSIFICATION	8.863412388623577E-8	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999997057762594	WITHOUT_CLASSIFICATION	2.9422374062400987E-7	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999999598563264	WITHOUT_CLASSIFICATION	4.014367373360699E-8	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999991256595994	WITHOUT_CLASSIFICATION	8.743404005404763E-7	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999989868584052	WITHOUT_CLASSIFICATION	1.0131415948903358E-6	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999999730024097	WITHOUT_CLASSIFICATION	2.6997590323852254E-8	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999977340110618	WITHOUT_CLASSIFICATION	2.2659889382187716E-6	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999970221793589	WITHOUT_CLASSIFICATION	2.97782064112339E-6	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999810098430547	WITHOUT_CLASSIFICATION	1.899015694527328E-5	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999988251014506	WITHOUT_CLASSIFICATION	1.1748985494175405E-6	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999912733164732	WITHOUT_CLASSIFICATION	8.726683526870727E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9963173320912656	WITHOUT_CLASSIFICATION	0.003682667908734283	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999952410776187	WITHOUT_CLASSIFICATION	4.7589223812217524E-6	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999998631710398	WITHOUT_CLASSIFICATION	1.3682896020601117E-7	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999989475792672	WITHOUT_CLASSIFICATION	1.0524207328075679E-6	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999948817669257	WITHOUT_CLASSIFICATION	5.118233074317322E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999993891949217	WITHOUT_CLASSIFICATION	6.10805078204309E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999995841732133	WITHOUT_CLASSIFICATION	4.1582678676885766E-7	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999988879303477	WITHOUT_CLASSIFICATION	1.1120696522561435E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999997701752567	WITHOUT_CLASSIFICATION	2.29824743464285E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999997701752567	WITHOUT_CLASSIFICATION	2.29824743464285E-7	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.99999991581909	WITHOUT_CLASSIFICATION	8.418090993341291E-8	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999995274876718	WITHOUT_CLASSIFICATION	4.725123280967896E-7	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999991969169976	WITHOUT_CLASSIFICATION	8.030830025435761E-7	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.999783900350906	WITHOUT_CLASSIFICATION	2.1609964909402384E-4	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999932414477305	WITHOUT_CLASSIFICATION	6.758552269445746E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.999997098805081	WITHOUT_CLASSIFICATION	2.901194919050127E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999888503960629	WITHOUT_CLASSIFICATION	1.1149603937215265E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999888503960629	WITHOUT_CLASSIFICATION	1.1149603937215265E-5	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999997949813514	WITHOUT_CLASSIFICATION	2.0501864865227168E-7	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9991463053117257	WITHOUT_CLASSIFICATION	8.536946882742661E-4	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999995575833827	WITHOUT_CLASSIFICATION	4.424166173698399E-7	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999995575833827	WITHOUT_CLASSIFICATION	4.424166173698399E-7	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9999479737013536	WITHOUT_CLASSIFICATION	5.2026298646496245E-5	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999482915317853	WITHOUT_CLASSIFICATION	5.1708468214720074E-5	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999482915317853	WITHOUT_CLASSIFICATION	5.1708468214720074E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999982800768387	WITHOUT_CLASSIFICATION	1.719923161263583E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999982800768387	WITHOUT_CLASSIFICATION	1.719923161263583E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999993380765549	WITHOUT_CLASSIFICATION	6.6192344509813575E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999993380765549	WITHOUT_CLASSIFICATION	6.6192344509813575E-6	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999886473943742	WITHOUT_CLASSIFICATION	1.135260562581399E-5	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999995060393163	WITHOUT_CLASSIFICATION	4.93960683772297E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999999622532577	WITHOUT_CLASSIFICATION	3.774674230614939E-8	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999996361234117	WITHOUT_CLASSIFICATION	3.638765882616793E-7	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999996754747519	WITHOUT_CLASSIFICATION	3.245252480882654E-7	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.999999826452282	WITHOUT_CLASSIFICATION	1.7354771793911244E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999993429974271	WITHOUT_CLASSIFICATION	6.570025728635941E-7	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999934232923157	WITHOUT_CLASSIFICATION	6.576707684283184E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999993429974271	WITHOUT_CLASSIFICATION	6.570025728635941E-7	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999815729833833	WITHOUT_CLASSIFICATION	1.8427016616667652E-5	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999990730325489	WITHOUT_CLASSIFICATION	9.269674509886723E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999999216128299	WITHOUT_CLASSIFICATION	7.838717014321497E-8	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999269956025929	WITHOUT_CLASSIFICATION	7.300439740708929E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999998752891747	WITHOUT_CLASSIFICATION	1.247108253053377E-7	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999907522950071	WITHOUT_CLASSIFICATION	9.247704992917227E-6	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999921882109525	WITHOUT_CLASSIFICATION	7.81178904750244E-6	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999986492395795	WITHOUT_CLASSIFICATION	1.3507604205746568E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999926117399431	WITHOUT_CLASSIFICATION	7.388260056901589E-6	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999991630886892	WITHOUT_CLASSIFICATION	8.369113107402867E-7	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999992151416789	WITHOUT_CLASSIFICATION	7.848583210809309E-7	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999995181604077	WITHOUT_CLASSIFICATION	4.818395922326425E-7	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.999994893746434	WITHOUT_CLASSIFICATION	5.106253565987961E-6	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999997585575244	WITHOUT_CLASSIFICATION	2.4144247554260047E-7	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999974476380713	WITHOUT_CLASSIFICATION	2.552361928728497E-6	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999995318930625	WITHOUT_CLASSIFICATION	4.68106937528946E-7	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999491053807193	WITHOUT_CLASSIFICATION	5.089461928056382E-5	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999806467212203	WITHOUT_CLASSIFICATION	1.9353278779621362E-5	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.999994474413526	WITHOUT_CLASSIFICATION	5.525586474095689E-6	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999983787595681	WITHOUT_CLASSIFICATION	1.6212404319002195E-6	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9997860021074468	WITHOUT_CLASSIFICATION	2.139978925530713E-4	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.999999747865203	WITHOUT_CLASSIFICATION	2.5213479712864075E-7	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999922378859145	WITHOUT_CLASSIFICATION	7.76211408542044E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.99997030020885	WITHOUT_CLASSIFICATION	2.9699791149913422E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999996272336772	WITHOUT_CLASSIFICATION	3.727663227341893E-7	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999997073859282	WITHOUT_CLASSIFICATION	2.9261407170935195E-7	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999999285939973	WITHOUT_CLASSIFICATION	7.140600265231489E-8	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999999811633508	WITHOUT_CLASSIFICATION	1.8836649271383668E-8	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999879297699483	WITHOUT_CLASSIFICATION	1.2070230051694365E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.999999368136169	WITHOUT_CLASSIFICATION	6.318638310314896E-7	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999980743315485	WITHOUT_CLASSIFICATION	1.925668451512465E-6	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999984598403652	WITHOUT_CLASSIFICATION	1.5401596349040495E-6	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999997171985442	WITHOUT_CLASSIFICATION	2.8280145579883894E-7	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999992707458611	WITHOUT_CLASSIFICATION	7.292541389262091E-7	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999196913340791	WITHOUT_CLASSIFICATION	8.030866592089795E-5	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999916751615646	WITHOUT_CLASSIFICATION	8.324838435315823E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.999997315289366	WITHOUT_CLASSIFICATION	2.684710633910966E-6	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999445180411097	WITHOUT_CLASSIFICATION	5.548195889024196E-5	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999997683740064	WITHOUT_CLASSIFICATION	2.3162599355378658E-7	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999971313450444	WITHOUT_CLASSIFICATION	2.8686549555395853E-6	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999997940379683	WITHOUT_CLASSIFICATION	2.059620316305267E-7	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999515009358676	WITHOUT_CLASSIFICATION	4.849906413231786E-5	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999945222934109	WITHOUT_CLASSIFICATION	5.477706589069894E-6	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.999998099867782	WITHOUT_CLASSIFICATION	1.9001322179808245E-6	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999994550474173	WITHOUT_CLASSIFICATION	5.449525827996861E-7	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999994860854236	WITHOUT_CLASSIFICATION	5.139145764297042E-7	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999996057153199	WITHOUT_CLASSIFICATION	3.942846801372834E-7	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999984481285784	WITHOUT_CLASSIFICATION	1.5518714216473571E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999332526209	WITHOUT_CLASSIFICATION	6.674737905877258E-8	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.99999479823688	WITHOUT_CLASSIFICATION	5.201763120015925E-6	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999596234102242	WITHOUT_CLASSIFICATION	4.037658977579168E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999998381611154	WITHOUT_CLASSIFICATION	1.6183888465251612E-7	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9997448029942353	WITHOUT_CLASSIFICATION	2.5519700576480755E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999959995272975	WITHOUT_CLASSIFICATION	4.000472702526548E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999998856941378	WITHOUT_CLASSIFICATION	1.1430586225123886E-7	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999998856941378	WITHOUT_CLASSIFICATION	1.1430586225123886E-7	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.999998966638677	WITHOUT_CLASSIFICATION	1.0333613229555879E-6	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999945332359603	WITHOUT_CLASSIFICATION	5.466764039695757E-6	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999984706791452	WITHOUT_CLASSIFICATION	1.5293208548503503E-6	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999985895311772	WITHOUT_CLASSIFICATION	1.4104688228189647E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9982595150403503	WITHOUT_CLASSIFICATION	0.00174048495964982	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999947804984932	WITHOUT_CLASSIFICATION	5.21950150677373E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999930579262886	WITHOUT_CLASSIFICATION	6.942073711382435E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999990152243955	WITHOUT_CLASSIFICATION	9.847756044568924E-7	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999951169003198	WITHOUT_CLASSIFICATION	4.883099680185273E-6	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999993180630646	WITHOUT_CLASSIFICATION	6.819369354260664E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999999019422167	WITHOUT_CLASSIFICATION	9.805778335204849E-8	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999999019422167	WITHOUT_CLASSIFICATION	9.805778335204849E-8	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999961172503132	WITHOUT_CLASSIFICATION	3.8827496867312505E-6	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999932623642955	WITHOUT_CLASSIFICATION	6.737635704447237E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999926135678081	WITHOUT_CLASSIFICATION	7.3864321919146165E-6	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999999239064042	WITHOUT_CLASSIFICATION	7.609359587106333E-8	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999992868425052	WITHOUT_CLASSIFICATION	7.131574949370019E-7	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999998154327822	WITHOUT_CLASSIFICATION	1.845672178334056E-7	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999997725122589	WITHOUT_CLASSIFICATION	2.2748774120098328E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999970739375953	WITHOUT_CLASSIFICATION	2.9260624046408823E-6	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999981987744401	WITHOUT_CLASSIFICATION	1.8012255598777414E-6	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999995752142757	WITHOUT_CLASSIFICATION	4.2478572417564873E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999985500658415	WITHOUT_CLASSIFICATION	1.4499341585874357E-6	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999976450100889	WITHOUT_CLASSIFICATION	2.3549899109990346E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999992293356506	WITHOUT_CLASSIFICATION	7.706643493636682E-7	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999992293356506	WITHOUT_CLASSIFICATION	7.706643493636682E-7	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999988824188099	WITHOUT_CLASSIFICATION	1.1175811901460967E-6	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999991142947569	WITHOUT_CLASSIFICATION	8.857052431913698E-7	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999999267550347	WITHOUT_CLASSIFICATION	7.324496527602239E-8	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.999998895969125	WITHOUT_CLASSIFICATION	1.1040308750161601E-6	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999984713495405	WITHOUT_CLASSIFICATION	1.5286504595306467E-6	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999994845092334	WITHOUT_CLASSIFICATION	5.154907666396666E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999849441108466	WITHOUT_CLASSIFICATION	1.5055889153335697E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999997188919988	WITHOUT_CLASSIFICATION	2.811080012271861E-7	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.99985395408359	WITHOUT_CLASSIFICATION	1.460459164099977E-4	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999999227392533	WITHOUT_CLASSIFICATION	7.726074664643434E-8	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999926135678081	WITHOUT_CLASSIFICATION	7.3864321919146165E-6	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999941763188872	WITHOUT_CLASSIFICATION	5.823681112789196E-6	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9990634769260773	WITHOUT_CLASSIFICATION	9.365230739226117E-4	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999968949434906	WITHOUT_CLASSIFICATION	3.1050565095025635E-6	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999995479894999	WITHOUT_CLASSIFICATION	4.5201050016184465E-7	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999999676777442	WITHOUT_CLASSIFICATION	3.232225573029063E-8	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9998630955841512	WITHOUT_CLASSIFICATION	1.3690441584875927E-4	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999984459695405	WITHOUT_CLASSIFICATION	1.5540304594818746E-6	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999967690678162	WITHOUT_CLASSIFICATION	3.2309321838818653E-6	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999887592493952	WITHOUT_CLASSIFICATION	1.124075060475779E-5	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999940115786581	WITHOUT_CLASSIFICATION	5.988421341926151E-6	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999974628857518	WITHOUT_CLASSIFICATION	2.537114248247108E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999940483368673	WITHOUT_CLASSIFICATION	5.9516631327302625E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999990352498672	WITHOUT_CLASSIFICATION	9.647501327991106E-7	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.999938786674676	WITHOUT_CLASSIFICATION	6.121332532401522E-5	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999955214191447	WITHOUT_CLASSIFICATION	4.4785808552395726E-6	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999968473463358	WITHOUT_CLASSIFICATION	3.1526536641897684E-6	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999960546848187	WITHOUT_CLASSIFICATION	3.945315181326506E-6	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999992200880905	WITHOUT_CLASSIFICATION	7.799119094150341E-7	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999932347479951	WITHOUT_CLASSIFICATION	6.765252004985533E-6	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999979360928253	WITHOUT_CLASSIFICATION	2.063907174645126E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9999994200627066	WITHOUT_CLASSIFICATION	5.799372935068499E-7	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999998460209707	WITHOUT_CLASSIFICATION	1.5397902925459974E-7	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999984875629608	WITHOUT_CLASSIFICATION	1.5124370391961808E-6	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9997108800388428	WITHOUT_CLASSIFICATION	2.8911996115723134E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999988461847289	WITHOUT_CLASSIFICATION	1.1538152710956517E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999999780672361	WITHOUT_CLASSIFICATION	2.1932763965657323E-8	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999902267043871	WITHOUT_CLASSIFICATION	9.773295612896244E-6	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999908971364259	WITHOUT_CLASSIFICATION	9.10286357409301E-6	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.999999409977592	WITHOUT_CLASSIFICATION	5.900224080511979E-7	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.999807113140495	WITHOUT_CLASSIFICATION	1.9288685950497218E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999591454623926	WITHOUT_CLASSIFICATION	4.085453760738697E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999591454623926	WITHOUT_CLASSIFICATION	4.085453760738697E-5	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.999998665664187	WITHOUT_CLASSIFICATION	1.3343358129354572E-6	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999974153263673	WITHOUT_CLASSIFICATION	2.5846736326951016E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999999744717104	WITHOUT_CLASSIFICATION	2.5528289565233783E-8	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999990942095973	WITHOUT_CLASSIFICATION	9.057904026945383E-7	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999804711147933	WITHOUT_CLASSIFICATION	1.952888520674579E-5	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.999989271863589	WITHOUT_CLASSIFICATION	1.0728136411066424E-5	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999969407392229	WITHOUT_CLASSIFICATION	3.05926077706353E-6	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.999999591104643	WITHOUT_CLASSIFICATION	4.088953570663824E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999817490387494	WITHOUT_CLASSIFICATION	1.825096125065999E-5	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999967961173117	WITHOUT_CLASSIFICATION	3.2038826883600477E-6	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999992979132921	WITHOUT_CLASSIFICATION	7.020867078725611E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999999072410348	WITHOUT_CLASSIFICATION	9.275896517553677E-8	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999896042912998	WITHOUT_CLASSIFICATION	1.0395708700167217E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999989619241663	WITHOUT_CLASSIFICATION	1.0380758336860871E-6	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999982355378633	WITHOUT_CLASSIFICATION	1.7644621367657897E-6	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999730273014127	WITHOUT_CLASSIFICATION	2.6972698587286067E-5	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9996433263117795	WITHOUT_CLASSIFICATION	3.5667368822052967E-4	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999996864533106	WITHOUT_CLASSIFICATION	3.1354668940929675E-7	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.999999433404301	WITHOUT_CLASSIFICATION	5.66595699040161E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9989184387765675	WITHOUT_CLASSIFICATION	0.0010815612234325448	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999997592081449	WITHOUT_CLASSIFICATION	2.407918551004737E-7	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999997592081449	WITHOUT_CLASSIFICATION	2.407918551004737E-7	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999990440158797	WITHOUT_CLASSIFICATION	9.559841203328808E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999999938918156	WITHOUT_CLASSIFICATION	6.108184361654687E-9	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999500125378181	WITHOUT_CLASSIFICATION	4.9987462181962265E-5	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999991996022394	WITHOUT_CLASSIFICATION	8.00397760716156E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999997113820142	WITHOUT_CLASSIFICATION	2.8861798585242304E-7	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999998554109846	WITHOUT_CLASSIFICATION	1.4458901543932968E-7	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999991022438915	WITHOUT_CLASSIFICATION	8.977561085377647E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999912473082	WITHOUT_CLASSIFICATION	8.752691877658748E-9	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999971293762433	WITHOUT_CLASSIFICATION	2.8706237567223547E-6	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999999473912088	WITHOUT_CLASSIFICATION	5.260879119144152E-8	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.999998987667073	WITHOUT_CLASSIFICATION	1.0123329270061382E-6	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9998632636759341	WITHOUT_CLASSIFICATION	1.3673632406592623E-4	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.999999992787567	WITHOUT_CLASSIFICATION	7.212432963672446E-9	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999911845799	WITHOUT_CLASSIFICATION	8.815419998922977E-9	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999992857904864	WITHOUT_CLASSIFICATION	7.142095136677248E-7	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999860348888138	WITHOUT_CLASSIFICATION	1.3965111186341332E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999999846203598	WITHOUT_CLASSIFICATION	1.5379640195271234E-8	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.999999525519235	WITHOUT_CLASSIFICATION	4.7448076493555315E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999557985651779	WITHOUT_CLASSIFICATION	4.42014348220887E-5	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999994055371928	WITHOUT_CLASSIFICATION	5.944628073101396E-7	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9989909919168347	WITHOUT_CLASSIFICATION	0.0010090080831652996	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999943916665655	WITHOUT_CLASSIFICATION	5.6083334345562255E-6	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999998710072527	WITHOUT_CLASSIFICATION	1.2899274730673327E-7	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9720296365342008	WITHOUT_CLASSIFICATION	0.027970363465799168	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.999878728928824	WITHOUT_CLASSIFICATION	1.2127107117587558E-4	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9996729686544427	WITHOUT_CLASSIFICATION	3.270313455573251E-4	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999955877010107	WITHOUT_CLASSIFICATION	4.412298989215469E-6	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999992445606907	WITHOUT_CLASSIFICATION	7.554393092698851E-7	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.999982385055941	WITHOUT_CLASSIFICATION	1.7614944058989675E-5	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999950863790443	WITHOUT_CLASSIFICATION	4.913620955639734E-6	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999997841199431	WITHOUT_CLASSIFICATION	2.158800569216379E-7	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999983547174279	WITHOUT_CLASSIFICATION	1.645282572065731E-6	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999954465786113	WITHOUT_CLASSIFICATION	4.5534213887629475E-6	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999868689121982	WITHOUT_CLASSIFICATION	1.3131087801635777E-5	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9999760905928252	WITHOUT_CLASSIFICATION	2.3909407174762556E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9975836936727084	WITHOUT_CLASSIFICATION	0.002416306327291566	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9987890311803997	WITHOUT_CLASSIFICATION	0.0012109688196003084	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999995509966709	WITHOUT_CLASSIFICATION	4.490033289756498E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999225229540729	WITHOUT_CLASSIFICATION	7.747704592707337E-5	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999998605203346	WITHOUT_CLASSIFICATION	1.394796653795139E-7	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999881891112893	WITHOUT_CLASSIFICATION	1.1810888710643774E-5	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999648227445305	WITHOUT_CLASSIFICATION	3.517725546949331E-5	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999617417798727	WITHOUT_CLASSIFICATION	3.825822012721602E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999626813805382	WITHOUT_CLASSIFICATION	3.731861946167253E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999912239553161	WITHOUT_CLASSIFICATION	8.776044683827388E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999626813805382	WITHOUT_CLASSIFICATION	3.731861946167253E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.8182152607692118	WITHOUT_CLASSIFICATION	0.1817847392307882	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.974734555629303	WITHOUT_CLASSIFICATION	0.025265444370697002	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999962661635193	WITHOUT_CLASSIFICATION	3.733836480701027E-6	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9344932031066431	WITHOUT_CLASSIFICATION	0.06550679689335703	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999996205582996	WITHOUT_CLASSIFICATION	3.7944170047020005E-7	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999998872941699	WITHOUT_CLASSIFICATION	1.1270583008642686E-7	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999968033650316	WITHOUT_CLASSIFICATION	3.1966349684619055E-6	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9999953173607653	WITHOUT_CLASSIFICATION	4.682639234656123E-6	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999995549736814	WITHOUT_CLASSIFICATION	4.4502631862403267E-7	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9975798385920417	WITHOUT_CLASSIFICATION	0.002420161407958297	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9999875224324057	WITHOUT_CLASSIFICATION	1.2477567594310309E-5	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999997993892465	WITHOUT_CLASSIFICATION	2.0061075346293762E-7	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.99998167288097	WITHOUT_CLASSIFICATION	1.8327119030101713E-5	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999997386884283	WITHOUT_CLASSIFICATION	2.613115717530414E-7	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.999972321722146	WITHOUT_CLASSIFICATION	2.767827785403391E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9997308236906971	WITHOUT_CLASSIFICATION	2.6917630930286277E-4	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999945578275049	WITHOUT_CLASSIFICATION	5.442172495111803E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999970861787831	WITHOUT_CLASSIFICATION	2.9138212169634596E-6	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999946936323415	WITHOUT_CLASSIFICATION	5.306367658460484E-6	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999902079798402	WITHOUT_CLASSIFICATION	9.792020159923426E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9988116077489909	WITHOUT_CLASSIFICATION	0.001188392251009076	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999998043313086	WITHOUT_CLASSIFICATION	1.9566869130665768E-7	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999966911132027	WITHOUT_CLASSIFICATION	3.3088867973121656E-6	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999998064232194	WITHOUT_CLASSIFICATION	1.9357678056597432E-7	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.999999513912941	WITHOUT_CLASSIFICATION	4.860870591156952E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999978907444599	WITHOUT_CLASSIFICATION	2.10925554005834E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999992633205953	WITHOUT_CLASSIFICATION	7.366794047955274E-7	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.999995818244306	WITHOUT_CLASSIFICATION	4.181755694092023E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999996937739677	WITHOUT_CLASSIFICATION	3.062260323336037E-7	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999997509708494	WITHOUT_CLASSIFICATION	2.490291505561493E-7	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999074321441012	WITHOUT_CLASSIFICATION	9.256785589878568E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998612176380438	WITHOUT_CLASSIFICATION	1.387823619562494E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999111982184684	WITHOUT_CLASSIFICATION	8.880178153158941E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.99999993605034	WITHOUT_CLASSIFICATION	6.394965999733007E-8	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999987754755213	WITHOUT_CLASSIFICATION	1.2245244787312547E-6	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999999854947702	WITHOUT_CLASSIFICATION	1.4505229782472629E-8	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.999990080423914	WITHOUT_CLASSIFICATION	9.919576085969753E-6	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999843021745	WITHOUT_CLASSIFICATION	1.5697825547347952E-8	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999990963603105	WITHOUT_CLASSIFICATION	9.036396896794341E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999914000045851	WITHOUT_CLASSIFICATION	8.599995414939467E-6	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999559910999298	WITHOUT_CLASSIFICATION	4.400890007010782E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999999490212095	WITHOUT_CLASSIFICATION	5.097879052883397E-8	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999983376844329	WITHOUT_CLASSIFICATION	1.662315567008479E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999896087567817	WITHOUT_CLASSIFICATION	1.0391243218345269E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999896087567817	WITHOUT_CLASSIFICATION	1.0391243218345269E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999948145458036	WITHOUT_CLASSIFICATION	5.185454196383027E-6	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999998277096441	WITHOUT_CLASSIFICATION	1.7229035584621205E-7	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9999173797639778	WITHOUT_CLASSIFICATION	8.262023602220664E-5	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999996470487615	WITHOUT_CLASSIFICATION	3.5295123839002583E-7	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999994136190727	WITHOUT_CLASSIFICATION	5.863809272259453E-7	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999998740039124	WITHOUT_CLASSIFICATION	1.2599608752215268E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999468044886202	WITHOUT_CLASSIFICATION	5.3195511379787726E-5	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999998642517477	WITHOUT_CLASSIFICATION	1.357482523707545E-7	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999620984931	WITHOUT_CLASSIFICATION	3.790150699611648E-8	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999999810349621	WITHOUT_CLASSIFICATION	1.8965037885182587E-8	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999999923760139	WITHOUT_CLASSIFICATION	7.623986222745879E-9	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999979466502179	WITHOUT_CLASSIFICATION	2.053349782007343E-6	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9982875841135042	WITHOUT_CLASSIFICATION	0.0017124158864959443	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.999999242835692	WITHOUT_CLASSIFICATION	7.57164308074298E-7	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999997602424665	WITHOUT_CLASSIFICATION	2.3975753354929994E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.999998459030207	WITHOUT_CLASSIFICATION	1.5409697930271124E-6	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999997214756826	WITHOUT_CLASSIFICATION	2.7852431728491724E-7	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999999736144732	WITHOUT_CLASSIFICATION	2.6385526801219764E-8	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999908292185006	WITHOUT_CLASSIFICATION	9.170781499484228E-6	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999999232167986	WITHOUT_CLASSIFICATION	7.678320134703638E-8	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9938227769266909	WITHOUT_CLASSIFICATION	0.006177223073309168	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9979921249767951	WITHOUT_CLASSIFICATION	0.0020078750232049563	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999999696936857	WITHOUT_CLASSIFICATION	3.0306314400395877E-8	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999999869029506	WITHOUT_CLASSIFICATION	1.3097049424547293E-8	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9993225114822684	WITHOUT_CLASSIFICATION	6.774885177315267E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999980403952	WITHOUT_CLASSIFICATION	1.959604838088898E-9	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999999967336887	WITHOUT_CLASSIFICATION	3.26631129326188E-8	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9998473976896736	WITHOUT_CLASSIFICATION	1.526023103263444E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999998092164403	WITHOUT_CLASSIFICATION	1.9078355975446367E-7	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999999105118176	WITHOUT_CLASSIFICATION	8.94881824704697E-8	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999994990942338	WITHOUT_CLASSIFICATION	5.009057662802695E-7	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999764534234374	WITHOUT_CLASSIFICATION	2.3546576562551443E-5	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999993652461309	WITHOUT_CLASSIFICATION	6.34753869170783E-7	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.99998868579486	WITHOUT_CLASSIFICATION	1.1314205139901961E-5	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999998006976302	WITHOUT_CLASSIFICATION	1.9930236975314065E-7	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999999466777038	WITHOUT_CLASSIFICATION	5.3322296323724386E-8	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998416469755215	WITHOUT_CLASSIFICATION	1.5835302447845292E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999875095636323	WITHOUT_CLASSIFICATION	1.2490436367688007E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9994561502607284	WITHOUT_CLASSIFICATION	5.438497392714819E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999212614095081	WITHOUT_CLASSIFICATION	7.873859049189811E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999994402851902	WITHOUT_CLASSIFICATION	5.59714809781685E-7	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9998849835675098	WITHOUT_CLASSIFICATION	1.150164324901898E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9998751926355336	WITHOUT_CLASSIFICATION	1.2480736446641964E-4	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999999696796336	WITHOUT_CLASSIFICATION	3.0320366442011855E-8	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999180668240503	WITHOUT_CLASSIFICATION	8.193317594971678E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999956295695532	WITHOUT_CLASSIFICATION	4.3704304466676375E-6	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999831029235466	WITHOUT_CLASSIFICATION	1.689707645338842E-5	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999939176267049	WITHOUT_CLASSIFICATION	6.08237329516317E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999922282806278	WITHOUT_CLASSIFICATION	7.771719372124084E-6	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999987118713285	WITHOUT_CLASSIFICATION	1.288128671530817E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999945680581339	WITHOUT_CLASSIFICATION	5.431941866036228E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999996587561805	WITHOUT_CLASSIFICATION	3.412438195347961E-7	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999998887706415	WITHOUT_CLASSIFICATION	1.1122935852359163E-7	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999995909397522	WITHOUT_CLASSIFICATION	4.090602477807919E-7	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999815857234609	WITHOUT_CLASSIFICATION	1.8414276539248718E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.999653020072832	WITHOUT_CLASSIFICATION	3.469799271680438E-4	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999999441949279	WITHOUT_CLASSIFICATION	5.580507211959313E-8	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999949372311694	WITHOUT_CLASSIFICATION	5.062768830646001E-6	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999993813410805	WITHOUT_CLASSIFICATION	6.186589196256403E-7	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999998469415747	WITHOUT_CLASSIFICATION	1.5305842535942856E-7	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999988747424091	WITHOUT_CLASSIFICATION	1.125257590877101E-6	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999998202546716	WITHOUT_CLASSIFICATION	1.7974532840338663E-7	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.99999933428742	WITHOUT_CLASSIFICATION	6.657125799304994E-7	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999980380099968	WITHOUT_CLASSIFICATION	1.96199000325919E-6	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999989738046171	WITHOUT_CLASSIFICATION	1.0261953828473339E-6	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999533318695966	WITHOUT_CLASSIFICATION	4.6668130403320474E-5	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999257456353569	WITHOUT_CLASSIFICATION	7.425436464320216E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999996419479329	WITHOUT_CLASSIFICATION	3.580520671627351E-7	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999945069073026	WITHOUT_CLASSIFICATION	5.493092697414815E-6	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999983148942729	WITHOUT_CLASSIFICATION	1.6851057270760465E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9998219008281501	WITHOUT_CLASSIFICATION	1.7809917184981257E-4	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.999996585386763	WITHOUT_CLASSIFICATION	3.4146132369967605E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999986381738772	WITHOUT_CLASSIFICATION	1.3618261227283602E-6	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999805205871387	WITHOUT_CLASSIFICATION	1.9479412861342086E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9998982905376979	WITHOUT_CLASSIFICATION	1.0170946230220445E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9999332802778732	WITHOUT_CLASSIFICATION	6.671972212680336E-5	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9998612341861656	WITHOUT_CLASSIFICATION	1.3876581383441422E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.999894249849232	WITHOUT_CLASSIFICATION	1.0575015076797564E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9998943434273012	WITHOUT_CLASSIFICATION	1.0565657269880031E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9998559903950095	WITHOUT_CLASSIFICATION	1.4400960499050987E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9998833165322527	WITHOUT_CLASSIFICATION	1.1668346774733638E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9998972398422583	WITHOUT_CLASSIFICATION	1.027601577416399E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9998832777371405	WITHOUT_CLASSIFICATION	1.1672226285958044E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9998905931712744	WITHOUT_CLASSIFICATION	1.0940682872572398E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.999919582653246	WITHOUT_CLASSIFICATION	8.041734675407272E-5	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9998816321917818	WITHOUT_CLASSIFICATION	1.1836780821825121E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9999047586068326	WITHOUT_CLASSIFICATION	9.524139316732653E-5	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9998811540278046	WITHOUT_CLASSIFICATION	1.1884597219539147E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9998983030052551	WITHOUT_CLASSIFICATION	1.016969947449639E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.999885619843098	WITHOUT_CLASSIFICATION	1.143801569019778E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9998963981565908	WITHOUT_CLASSIFICATION	1.0360184340913668E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9997766759553106	WITHOUT_CLASSIFICATION	2.2332404468939038E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9998338538810064	WITHOUT_CLASSIFICATION	1.6614611899353588E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999999434483793	WITHOUT_CLASSIFICATION	5.6551620778552504E-8	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999974798673853	WITHOUT_CLASSIFICATION	2.5201326147194835E-6	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.999963484355858	WITHOUT_CLASSIFICATION	3.651564414196529E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999998113751484	WITHOUT_CLASSIFICATION	1.8862485154679553E-7	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9998611918329086	WITHOUT_CLASSIFICATION	1.3880816709146306E-4	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999993633348819	WITHOUT_CLASSIFICATION	6.36665118147759E-7	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.999999894497799	WITHOUT_CLASSIFICATION	1.0550220096375285E-7	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9980027302657775	WITHOUT_CLASSIFICATION	0.001997269734222525	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999984765885008	WITHOUT_CLASSIFICATION	1.5234114991966137E-6	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999998970735607	WITHOUT_CLASSIFICATION	1.0292643915500517E-7	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.9355346800015091	WITHOUT_CLASSIFICATION	0.06446531999849084	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999989266278826	WITHOUT_CLASSIFICATION	1.0733721174067835E-6	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999940514456153	WITHOUT_CLASSIFICATION	5.948554384659969E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999991010265721	WITHOUT_CLASSIFICATION	8.989734278734087E-7	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999991010265721	WITHOUT_CLASSIFICATION	8.989734278734087E-7	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999959273508042	WITHOUT_CLASSIFICATION	4.072649195768294E-6	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999931764077071	WITHOUT_CLASSIFICATION	6.823592292826986E-6	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999944416931665	WITHOUT_CLASSIFICATION	5.558306833543631E-6	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999982044788576	WITHOUT_CLASSIFICATION	1.7955211424274211E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999996724387877	WITHOUT_CLASSIFICATION	3.2756121225886333E-7	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999990393099133	WITHOUT_CLASSIFICATION	9.606900866256965E-7	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999986448309044	WITHOUT_CLASSIFICATION	1.3551690955099888E-6	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.999992303095319	WITHOUT_CLASSIFICATION	7.696904681082806E-6	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999999415826849	WITHOUT_CLASSIFICATION	5.8417315069680825E-8	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999996781162345	WITHOUT_CLASSIFICATION	3.218837655540685E-7	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999707535410131	WITHOUT_CLASSIFICATION	2.9246458986938525E-5	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999998541147787	WITHOUT_CLASSIFICATION	1.4588522132221773E-7	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.999980113493561	WITHOUT_CLASSIFICATION	1.988650643906819E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.999980067571559	WITHOUT_CLASSIFICATION	1.993242844099785E-5	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.999999830777742	WITHOUT_CLASSIFICATION	1.6922225801205875E-7	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999997330494463	WITHOUT_CLASSIFICATION	2.66950553684184E-7	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999998554879833	WITHOUT_CLASSIFICATION	1.4451201667778038E-7	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999637433987898	WITHOUT_CLASSIFICATION	3.625660121017116E-5	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9972567934897755	WITHOUT_CLASSIFICATION	0.0027432065102245182	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.999997208745027	WITHOUT_CLASSIFICATION	2.7912549730760457E-6	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999990730490038	WITHOUT_CLASSIFICATION	9.269509961812034E-7	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999984379587191	WITHOUT_CLASSIFICATION	1.5620412808939711E-6	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999968616312327	WITHOUT_CLASSIFICATION	3.138368767364254E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999932034726501	WITHOUT_CLASSIFICATION	6.796527349820626E-6	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999902834671387	WITHOUT_CLASSIFICATION	9.716532861262284E-6	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999992077257573	WITHOUT_CLASSIFICATION	7.922742425156015E-7	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999999202045942	WITHOUT_CLASSIFICATION	7.979540583334162E-8	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.999999596017957	WITHOUT_CLASSIFICATION	4.039820430574893E-7	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999970790192743	WITHOUT_CLASSIFICATION	2.920980725856025E-6	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9993894859979782	WITHOUT_CLASSIFICATION	6.105140020218012E-4	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999962571824369	WITHOUT_CLASSIFICATION	3.742817563083635E-6	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999255204273985	WITHOUT_CLASSIFICATION	7.447957260153276E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9997489852244611	WITHOUT_CLASSIFICATION	2.510147755388475E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999943397251005	WITHOUT_CLASSIFICATION	5.660274899538335E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999948596086805	WITHOUT_CLASSIFICATION	5.140391319449597E-6	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999982356553291	WITHOUT_CLASSIFICATION	1.7643446709124201E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999989821220568	WITHOUT_CLASSIFICATION	1.0178779431695848E-6	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.999997843164014	WITHOUT_CLASSIFICATION	2.1568359860091405E-6	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999530932653623	WITHOUT_CLASSIFICATION	4.690673463772206E-5	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999997833787561	WITHOUT_CLASSIFICATION	2.166212439991027E-7	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.999923350665452	WITHOUT_CLASSIFICATION	7.66493345480012E-5	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999995240471268	WITHOUT_CLASSIFICATION	4.759528732024123E-7	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999998630391489	WITHOUT_CLASSIFICATION	1.3696085111615142E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999926368024463	WITHOUT_CLASSIFICATION	7.363197553705983E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999926368024463	WITHOUT_CLASSIFICATION	7.363197553705983E-6	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999993901392822	WITHOUT_CLASSIFICATION	6.098607177111576E-7	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999996188716673	WITHOUT_CLASSIFICATION	3.811283326690798E-7	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999792028234952	WITHOUT_CLASSIFICATION	2.079717650476123E-5	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999996139076576	WITHOUT_CLASSIFICATION	3.8609234251928976E-7	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999998988453926	WITHOUT_CLASSIFICATION	1.0115460734404893E-7	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.999996442175772	WITHOUT_CLASSIFICATION	3.5578242279434053E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999998772516263	WITHOUT_CLASSIFICATION	1.2274837377985292E-7	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9949492169366086	WITHOUT_CLASSIFICATION	0.005050783063391294	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999839139833352	WITHOUT_CLASSIFICATION	1.608601666477048E-5	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999952757109006	WITHOUT_CLASSIFICATION	4.724289099287336E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999943982313352	WITHOUT_CLASSIFICATION	5.601768664845406E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.999999575007257	WITHOUT_CLASSIFICATION	4.249927429549784E-7	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9989739890886681	WITHOUT_CLASSIFICATION	0.0010260109113319608	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.999999919412259	WITHOUT_CLASSIFICATION	8.058774106226687E-8	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9992391195506729	WITHOUT_CLASSIFICATION	7.60880449326986E-4	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999706650783231	WITHOUT_CLASSIFICATION	2.9334921676843337E-5	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999982327918405	WITHOUT_CLASSIFICATION	1.7672081594021126E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999962194842883	WITHOUT_CLASSIFICATION	3.780515711816758E-6	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9988097962047514	WITHOUT_CLASSIFICATION	0.0011902037952485683	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9997244227994073	WITHOUT_CLASSIFICATION	2.755772005927046E-4	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999999512327352	WITHOUT_CLASSIFICATION	4.876726465299394E-8	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999999512327352	WITHOUT_CLASSIFICATION	4.876726465299394E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998053864533	WITHOUT_CLASSIFICATION	1.9461354667984338E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998053864533	WITHOUT_CLASSIFICATION	1.9461354667984338E-7	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.999999887408305	WITHOUT_CLASSIFICATION	1.1259169499891643E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.999999442316494	WITHOUT_CLASSIFICATION	5.576835059448514E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999988304782357	WITHOUT_CLASSIFICATION	1.1695217643523453E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999997377805419	WITHOUT_CLASSIFICATION	2.6221945814238753E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999999622532577	WITHOUT_CLASSIFICATION	3.774674230614939E-8	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999984990653991	WITHOUT_CLASSIFICATION	1.5009346009249124E-6	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9962808460501579	WITHOUT_CLASSIFICATION	0.003719153949842029	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999991022977592	WITHOUT_CLASSIFICATION	8.977022407323775E-7	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999999712536056	WITHOUT_CLASSIFICATION	2.874639440996602E-8	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999908411479103	WITHOUT_CLASSIFICATION	9.15885208974051E-6	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.999999147552248	WITHOUT_CLASSIFICATION	8.524477521432276E-7	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999993225968092	WITHOUT_CLASSIFICATION	6.774031907682501E-7	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.999999884719964	WITHOUT_CLASSIFICATION	1.1528003601525133E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9984792876759919	WITHOUT_CLASSIFICATION	0.0015207123240081736	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999995783644624	WITHOUT_CLASSIFICATION	4.2163553758201144E-7	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999998398945099	WITHOUT_CLASSIFICATION	1.6010548998520982E-7	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999972578503259	WITHOUT_CLASSIFICATION	2.742149674058091E-6	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999992919255904	WITHOUT_CLASSIFICATION	7.080744096700898E-7	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999962375231166	WITHOUT_CLASSIFICATION	3.762476883395223E-6	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999009731223888	WITHOUT_CLASSIFICATION	9.902687761122859E-5	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999968023254368	WITHOUT_CLASSIFICATION	3.1976745632003064E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999992893099673	WITHOUT_CLASSIFICATION	7.106900326533015E-7	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999998626544045	WITHOUT_CLASSIFICATION	1.3734559546884338E-7	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999992633205953	WITHOUT_CLASSIFICATION	7.366794047955274E-7	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999998740039124	WITHOUT_CLASSIFICATION	1.2599608752215268E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999999699610548	WITHOUT_CLASSIFICATION	3.003894523715443E-8	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9998386559570314	WITHOUT_CLASSIFICATION	1.6134404296855393E-4	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999997147560071	WITHOUT_CLASSIFICATION	2.852439928978438E-7	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999989300012242	WITHOUT_CLASSIFICATION	1.0699987757676952E-6	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999986212682974	WITHOUT_CLASSIFICATION	1.3787317026382688E-6	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999986212682974	WITHOUT_CLASSIFICATION	1.3787317026382688E-6	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999982270300072	WITHOUT_CLASSIFICATION	1.772969992765852E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999982269102998	WITHOUT_CLASSIFICATION	1.7730897002251713E-6	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999997493255217	WITHOUT_CLASSIFICATION	2.5067447830350805E-7	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999997214165912	WITHOUT_CLASSIFICATION	2.7858340880711453E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999890688708045	WITHOUT_CLASSIFICATION	1.0931129195498864E-5	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999999832692664	WITHOUT_CLASSIFICATION	1.6730733632389776E-8	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999998639848698	WITHOUT_CLASSIFICATION	1.360151300751306E-7	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999998152905492	WITHOUT_CLASSIFICATION	1.8470945075143218E-7	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999998045160762	WITHOUT_CLASSIFICATION	1.9548392390664503E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.999998516887282	WITHOUT_CLASSIFICATION	1.4831127180093654E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999997568783678	WITHOUT_CLASSIFICATION	2.43121632225925E-7	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999998797800936	WITHOUT_CLASSIFICATION	1.2021990628792148E-7	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999997273169017	WITHOUT_CLASSIFICATION	2.7268309835346155E-7	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999996222251176	WITHOUT_CLASSIFICATION	3.777748824199455E-7	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999999641818417	WITHOUT_CLASSIFICATION	3.581815833359471E-8	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.999994149585169	WITHOUT_CLASSIFICATION	5.850414831137867E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999700608293317	WITHOUT_CLASSIFICATION	2.993917066823168E-5	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999994919033707	WITHOUT_CLASSIFICATION	5.080966293813498E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999632678855258	WITHOUT_CLASSIFICATION	3.6732114474179925E-5	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9999852202217128	WITHOUT_CLASSIFICATION	1.4779778287217082E-5	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999822041621262	WITHOUT_CLASSIFICATION	1.7795837873759626E-5	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9998814115364679	WITHOUT_CLASSIFICATION	1.1858846353213391E-4	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999510341003579	WITHOUT_CLASSIFICATION	4.8965899642038284E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999974233873081	WITHOUT_CLASSIFICATION	2.5766126917967416E-6	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999995363671432	WITHOUT_CLASSIFICATION	4.636328567985715E-7	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9998569353421575	WITHOUT_CLASSIFICATION	1.430646578424607E-4	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999993623221345	WITHOUT_CLASSIFICATION	6.376778655531851E-7	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9999976021196776	WITHOUT_CLASSIFICATION	2.397880322482756E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999999718131983	WITHOUT_CLASSIFICATION	2.8186801627638198E-8	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999874522630361	WITHOUT_CLASSIFICATION	1.2547736963983442E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999964117773933	WITHOUT_CLASSIFICATION	3.5882226068448458E-6	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999934276031383	WITHOUT_CLASSIFICATION	6.572396861766563E-6	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999998077822675	WITHOUT_CLASSIFICATION	1.9221773253425485E-7	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999953439280674	WITHOUT_CLASSIFICATION	4.65607193250501E-6	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999617524404667	WITHOUT_CLASSIFICATION	3.824755953333399E-5	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999860083334885	WITHOUT_CLASSIFICATION	1.3991666511375072E-5	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999951277668861	WITHOUT_CLASSIFICATION	4.872233113850248E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9999884322012494	WITHOUT_CLASSIFICATION	1.1567798750615027E-5	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999992113562656	WITHOUT_CLASSIFICATION	7.886437345281556E-7	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999993754912886	WITHOUT_CLASSIFICATION	6.245087114879683E-7	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999999396533914	WITHOUT_CLASSIFICATION	6.034660855752894E-8	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.999999866141909	WITHOUT_CLASSIFICATION	1.338580910545324E-7	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999986087532782	WITHOUT_CLASSIFICATION	1.3912467217985948E-6	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999965407929016	WITHOUT_CLASSIFICATION	3.459207098465853E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9999429222875705	WITHOUT_CLASSIFICATION	5.707771242942799E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999969833243865	WITHOUT_CLASSIFICATION	3.0166756135271334E-6	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999998870879155	WITHOUT_CLASSIFICATION	1.1291208446714293E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999745394795	WITHOUT_CLASSIFICATION	2.5460520575625775E-8	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999992030347115	WITHOUT_CLASSIFICATION	7.969652884206761E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999993085424853	WITHOUT_CLASSIFICATION	6.914575147341359E-7	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999210030620653	WITHOUT_CLASSIFICATION	7.89969379346456E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999293483774244	WITHOUT_CLASSIFICATION	7.065162257557521E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999348149202638	WITHOUT_CLASSIFICATION	6.518507973621945E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.999951115090123	WITHOUT_CLASSIFICATION	4.888490987688454E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999967500539619	WITHOUT_CLASSIFICATION	3.2499460380398833E-6	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999865925690912	WITHOUT_CLASSIFICATION	1.3407430908859373E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999785867489639	WITHOUT_CLASSIFICATION	2.1413251036117132E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9997395824544265	WITHOUT_CLASSIFICATION	2.6041754557345695E-4	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999983955549561	WITHOUT_CLASSIFICATION	1.6044450438563597E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999996064848088	WITHOUT_CLASSIFICATION	3.935151912574786E-7	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999712384273561	WITHOUT_CLASSIFICATION	2.8761572643879528E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999210030620653	WITHOUT_CLASSIFICATION	7.89969379346456E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999348149202638	WITHOUT_CLASSIFICATION	6.518507973621945E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999293483774244	WITHOUT_CLASSIFICATION	7.065162257557521E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9998621098052993	WITHOUT_CLASSIFICATION	1.3789019470058936E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999817945920729	WITHOUT_CLASSIFICATION	1.8205407927070147E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999964176400172	WITHOUT_CLASSIFICATION	3.5823599827009283E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999996493910718	WITHOUT_CLASSIFICATION	3.506089281920862E-7	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999987137902936	WITHOUT_CLASSIFICATION	1.2862097064357446E-6	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999998649352879	WITHOUT_CLASSIFICATION	1.3506471209468403E-7	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999981507983132	WITHOUT_CLASSIFICATION	1.8492016867419367E-6	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999999395767585	WITHOUT_CLASSIFICATION	6.042324148286022E-8	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.999993726907078	WITHOUT_CLASSIFICATION	6.273092922094653E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999999548896746	WITHOUT_CLASSIFICATION	4.511032530591297E-8	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999999112335434	WITHOUT_CLASSIFICATION	8.876645664749678E-8	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9992590899971451	WITHOUT_CLASSIFICATION	7.409100028549844E-4	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999989043919778	WITHOUT_CLASSIFICATION	1.0956080222632191E-6	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999997112013788	WITHOUT_CLASSIFICATION	2.8879862128456714E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999995171176598	WITHOUT_CLASSIFICATION	4.828823401551753E-7	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999990132129141	WITHOUT_CLASSIFICATION	9.867870858853892E-7	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999934846800254	WITHOUT_CLASSIFICATION	6.515319974548063E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999848437665899	WITHOUT_CLASSIFICATION	1.5156233410009845E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999848437665899	WITHOUT_CLASSIFICATION	1.5156233410009845E-5	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999979553335316	WITHOUT_CLASSIFICATION	2.0446664682709506E-6	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999999433585408	WITHOUT_CLASSIFICATION	5.664145918517064E-8	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999996314374152	WITHOUT_CLASSIFICATION	3.68562584695538E-7	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999413362594892	WITHOUT_CLASSIFICATION	5.8663740510766195E-5	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.999999446410811	WITHOUT_CLASSIFICATION	5.535891890253083E-7	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999995105487979	WITHOUT_CLASSIFICATION	4.8945120215448E-7	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999999753015821	WITHOUT_CLASSIFICATION	2.469841793122301E-8	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.999999961257187	WITHOUT_CLASSIFICATION	3.874281294036364E-8	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999999071862113	WITHOUT_CLASSIFICATION	9.281378858573793E-8	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999999258053405	WITHOUT_CLASSIFICATION	7.419465951590713E-8	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999978581911728	WITHOUT_CLASSIFICATION	2.141808827167067E-6	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999924353795426	WITHOUT_CLASSIFICATION	7.5646204573947304E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999996596704518	WITHOUT_CLASSIFICATION	3.4032954812398125E-7	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999487412409863	WITHOUT_CLASSIFICATION	5.1258759013800876E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999439739565185	WITHOUT_CLASSIFICATION	5.602604348146597E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999328697124	WITHOUT_CLASSIFICATION	6.713028755932484E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999996690058535	WITHOUT_CLASSIFICATION	3.3099414654816386E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999940218600408	WITHOUT_CLASSIFICATION	5.97813995925285E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999940218600408	WITHOUT_CLASSIFICATION	5.97813995925285E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.999995862892996	WITHOUT_CLASSIFICATION	4.137107003952432E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999924706864957	WITHOUT_CLASSIFICATION	7.529313504361496E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999427756482886	WITHOUT_CLASSIFICATION	5.7224351711381014E-5	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999965737060217	WITHOUT_CLASSIFICATION	3.4262939783480133E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999996576354933	WITHOUT_CLASSIFICATION	3.4236450669963825E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999940218600408	WITHOUT_CLASSIFICATION	5.97813995925285E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999940218600408	WITHOUT_CLASSIFICATION	5.97813995925285E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999888082468	WITHOUT_CLASSIFICATION	1.1191753243208018E-8	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999888082468	WITHOUT_CLASSIFICATION	1.1191753243208018E-8	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999954981068933	WITHOUT_CLASSIFICATION	4.501893106778401E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999968174521994	WITHOUT_CLASSIFICATION	3.1825478005554573E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999988738975433	WITHOUT_CLASSIFICATION	1.1261024566822653E-6	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9999973907037845	WITHOUT_CLASSIFICATION	2.6092962155731254E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999992531278229	WITHOUT_CLASSIFICATION	7.468721770878338E-7	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999992531278229	WITHOUT_CLASSIFICATION	7.468721770878338E-7	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.999999671663246	WITHOUT_CLASSIFICATION	3.283367540378586E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999933966395419	WITHOUT_CLASSIFICATION	6.60336045809652E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999958091755631	WITHOUT_CLASSIFICATION	4.190824436935015E-6	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999919421011855	WITHOUT_CLASSIFICATION	8.057898814495716E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999891026758	WITHOUT_CLASSIFICATION	1.089732413168111E-8	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999998395587418	WITHOUT_CLASSIFICATION	1.6044125811778862E-7	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999081802619018	WITHOUT_CLASSIFICATION	9.181973809826057E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999999016571846	WITHOUT_CLASSIFICATION	9.834281535572814E-8	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999982193087927	WITHOUT_CLASSIFICATION	1.7806912073076529E-6	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.999999998116992	WITHOUT_CLASSIFICATION	1.8830078558878855E-9	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9998921607252009	WITHOUT_CLASSIFICATION	1.0783927479911986E-4	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999999342846292	WITHOUT_CLASSIFICATION	6.571537083009313E-8	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999976590189515	WITHOUT_CLASSIFICATION	2.3409810484468717E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999999466569017	WITHOUT_CLASSIFICATION	5.33430982754916E-8	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999328697124	WITHOUT_CLASSIFICATION	6.713028755932484E-8	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999940218600408	WITHOUT_CLASSIFICATION	5.97813995925285E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999888082468	WITHOUT_CLASSIFICATION	1.1191753243208018E-8	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999998395587418	WITHOUT_CLASSIFICATION	1.6044125811778862E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998350581661339	WITHOUT_CLASSIFICATION	1.6494183386602264E-4	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998350581661339	WITHOUT_CLASSIFICATION	1.6494183386602264E-4	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.999748978369758	WITHOUT_CLASSIFICATION	2.5102163024198743E-4	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999546572448	WITHOUT_CLASSIFICATION	4.5342755220706626E-8	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999979707645082	WITHOUT_CLASSIFICATION	2.0292354917736474E-6	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999998875851824	WITHOUT_CLASSIFICATION	1.124148174929254E-7	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999997124043505	WITHOUT_CLASSIFICATION	2.8759564945259956E-7	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999987235770628	WITHOUT_CLASSIFICATION	1.2764229372008235E-6	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.998509161938959	WITHOUT_CLASSIFICATION	0.0014908380610409147	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999233958484858	WITHOUT_CLASSIFICATION	7.660415151426927E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999995068487064	WITHOUT_CLASSIFICATION	4.931512936586731E-7	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.999997042791799	WITHOUT_CLASSIFICATION	2.9572082009793403E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999976134387094	WITHOUT_CLASSIFICATION	2.386561290522687E-6	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999129728849	WITHOUT_CLASSIFICATION	8.702711499194502E-8	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999991957096136	WITHOUT_CLASSIFICATION	8.04290386373371E-7	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999996690058535	WITHOUT_CLASSIFICATION	3.3099414654816386E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999888082468	WITHOUT_CLASSIFICATION	1.1191753243208018E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999933966395419	WITHOUT_CLASSIFICATION	6.60336045809652E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999958091755631	WITHOUT_CLASSIFICATION	4.190824436935015E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999958091755631	WITHOUT_CLASSIFICATION	4.190824436935015E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999891026758	WITHOUT_CLASSIFICATION	1.089732413168111E-8	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999998395587418	WITHOUT_CLASSIFICATION	1.6044125811778862E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999998395587418	WITHOUT_CLASSIFICATION	1.6044125811778862E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998350581661339	WITHOUT_CLASSIFICATION	1.6494183386602264E-4	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999998338432823	WITHOUT_CLASSIFICATION	1.6615671774965722E-7	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999426919452892	WITHOUT_CLASSIFICATION	5.730805471072729E-5	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999778869992333	WITHOUT_CLASSIFICATION	2.211300076667829E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999995571474334	WITHOUT_CLASSIFICATION	4.4285256665227214E-7	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.999988703642132	WITHOUT_CLASSIFICATION	1.1296357868065419E-5	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.997930811789558	WITHOUT_CLASSIFICATION	0.00206918821044209	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999996572046923	WITHOUT_CLASSIFICATION	3.42795307751785E-7	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999989771935206	WITHOUT_CLASSIFICATION	1.0228064793565563E-6	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999999848097602	WITHOUT_CLASSIFICATION	1.51902398242314E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999933966395419	WITHOUT_CLASSIFICATION	6.60336045809652E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999958091755631	WITHOUT_CLASSIFICATION	4.190824436935015E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999958091755631	WITHOUT_CLASSIFICATION	4.190824436935015E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999891026758	WITHOUT_CLASSIFICATION	1.089732413168111E-8	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999233958484858	WITHOUT_CLASSIFICATION	7.660415151426927E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.999997042791799	WITHOUT_CLASSIFICATION	2.9572082009793403E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999920692681844	WITHOUT_CLASSIFICATION	7.930731815712327E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999990974280151	WITHOUT_CLASSIFICATION	9.025719849614302E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999952962280272	WITHOUT_CLASSIFICATION	4.7037719727029435E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999952962280272	WITHOUT_CLASSIFICATION	4.7037719727029435E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999979979481827	WITHOUT_CLASSIFICATION	2.00205181734895E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999995168521905	WITHOUT_CLASSIFICATION	4.831478095707899E-7	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999988226395775	WITHOUT_CLASSIFICATION	1.1773604224556122E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999995396973299	WITHOUT_CLASSIFICATION	4.6030267013670996E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999992528060507	WITHOUT_CLASSIFICATION	7.471939492174216E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999992528060507	WITHOUT_CLASSIFICATION	7.471939492174216E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999960054093386	WITHOUT_CLASSIFICATION	3.994590661385059E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999960054093386	WITHOUT_CLASSIFICATION	3.994590661385059E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999415055311	WITHOUT_CLASSIFICATION	5.8494468819809855E-8	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999415055311	WITHOUT_CLASSIFICATION	5.8494468819809855E-8	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999968129448715	WITHOUT_CLASSIFICATION	3.187055128433087E-6	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9993890418631413	WITHOUT_CLASSIFICATION	6.109581368587442E-4	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999926847803239	WITHOUT_CLASSIFICATION	7.315219676201667E-6	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999987979284485	WITHOUT_CLASSIFICATION	1.202071551502961E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999999364358652	WITHOUT_CLASSIFICATION	6.356413492264494E-8	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999996406871056	WITHOUT_CLASSIFICATION	3.5931289443929995E-7	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999999401469674	WITHOUT_CLASSIFICATION	5.985303261669896E-8	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999999440419773	WITHOUT_CLASSIFICATION	5.595802271612664E-8	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.999999959319396	WITHOUT_CLASSIFICATION	4.06806039004893E-8	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999999169066877	WITHOUT_CLASSIFICATION	8.309331229124833E-8	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999997784064562	WITHOUT_CLASSIFICATION	2.215935438016182E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999998300121057	WITHOUT_CLASSIFICATION	1.699878941939725E-7	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999060323616511	WITHOUT_CLASSIFICATION	9.396763834892032E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999988754677415	WITHOUT_CLASSIFICATION	1.1245322585807126E-6	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999988754677415	WITHOUT_CLASSIFICATION	1.1245322585807126E-6	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999582753517109	WITHOUT_CLASSIFICATION	4.172464828906609E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999984990653991	WITHOUT_CLASSIFICATION	1.5009346009249124E-6	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9991534257428675	WITHOUT_CLASSIFICATION	8.465742571325252E-4	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.999997896670853	WITHOUT_CLASSIFICATION	2.1033291469113294E-6	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.999999885003372	WITHOUT_CLASSIFICATION	1.1499662800709927E-7	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999997507342865	WITHOUT_CLASSIFICATION	2.4926571350325787E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999991643425787	WITHOUT_CLASSIFICATION	8.356574212238474E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999998932104012	WITHOUT_CLASSIFICATION	1.067895987931466E-7	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999833407287058	WITHOUT_CLASSIFICATION	1.6659271294247874E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999960719217688	WITHOUT_CLASSIFICATION	3.928078231237605E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999991586330499	WITHOUT_CLASSIFICATION	8.413669500978137E-7	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9999980312171635	WITHOUT_CLASSIFICATION	1.968782836519886E-6	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999990600881306	WITHOUT_CLASSIFICATION	9.399118696078961E-7	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.999999065959618	WITHOUT_CLASSIFICATION	9.340403819676796E-7	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.999984941790019	WITHOUT_CLASSIFICATION	1.505820998089344E-5	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.999999663052507	WITHOUT_CLASSIFICATION	3.3694749309302684E-7	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999968380009623	WITHOUT_CLASSIFICATION	3.1619990377515386E-6	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999998659910606	WITHOUT_CLASSIFICATION	1.340089393704276E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.999999660603635	WITHOUT_CLASSIFICATION	3.393963650038812E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.999999660603635	WITHOUT_CLASSIFICATION	3.393963650038812E-7	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999841739130088	WITHOUT_CLASSIFICATION	1.5826086991276606E-5	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999958448017567	WITHOUT_CLASSIFICATION	4.15519824324614E-6	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.999804635950782	WITHOUT_CLASSIFICATION	1.9536404921806464E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.999804635950782	WITHOUT_CLASSIFICATION	1.9536404921806464E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999985752704409	WITHOUT_CLASSIFICATION	1.4247295590875011E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999934133089505	WITHOUT_CLASSIFICATION	6.5866910494774945E-6	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999887789334195	WITHOUT_CLASSIFICATION	1.122106658055526E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999797765356654	WITHOUT_CLASSIFICATION	2.022346433466552E-5	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999979198779929	WITHOUT_CLASSIFICATION	2.080122007044837E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.999999811194345	WITHOUT_CLASSIFICATION	1.8880565492248886E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.999999811194345	WITHOUT_CLASSIFICATION	1.8880565492248886E-7	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.999999873487509	WITHOUT_CLASSIFICATION	1.2651249111281745E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999982425359891	WITHOUT_CLASSIFICATION	1.7574640108373338E-6	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999971607148613	WITHOUT_CLASSIFICATION	2.8392851387729325E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999966312779174	WITHOUT_CLASSIFICATION	3.3687220827406607E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999958448017567	WITHOUT_CLASSIFICATION	4.15519824324614E-6	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999945109158563	WITHOUT_CLASSIFICATION	5.4890841436597085E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999941291074663	WITHOUT_CLASSIFICATION	5.8708925336685435E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999941291074663	WITHOUT_CLASSIFICATION	5.8708925336685435E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999991961285203	WITHOUT_CLASSIFICATION	8.03871479694361E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999949237807	WITHOUT_CLASSIFICATION	5.076219264601645E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999949237807	WITHOUT_CLASSIFICATION	5.076219264601645E-9	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999845580966522	WITHOUT_CLASSIFICATION	1.544190334779407E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999845580966522	WITHOUT_CLASSIFICATION	1.544190334779407E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999845580966522	WITHOUT_CLASSIFICATION	1.544190334779407E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999949237807	WITHOUT_CLASSIFICATION	5.076219264601645E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999949237807	WITHOUT_CLASSIFICATION	5.076219264601645E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999991961285203	WITHOUT_CLASSIFICATION	8.03871479694361E-7	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.99999570650276	WITHOUT_CLASSIFICATION	4.293497239930502E-6	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999995671869063	WITHOUT_CLASSIFICATION	4.328130937178536E-7	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999994957542214	WITHOUT_CLASSIFICATION	5.042457786053249E-7	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999986288121095	WITHOUT_CLASSIFICATION	1.3711878905368152E-6	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999992305149422	WITHOUT_CLASSIFICATION	7.694850577179223E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999994460571676	WITHOUT_CLASSIFICATION	5.539428323156674E-7	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999997803773037	WITHOUT_CLASSIFICATION	2.1962269633330317E-7	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999915475743195	WITHOUT_CLASSIFICATION	8.45242568047636E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999991586330499	WITHOUT_CLASSIFICATION	8.413669500978137E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999949237807	WITHOUT_CLASSIFICATION	5.076219264601645E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999949237807	WITHOUT_CLASSIFICATION	5.076219264601645E-9	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.999998969834546	WITHOUT_CLASSIFICATION	1.0301654540423118E-6	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999988037274292	WITHOUT_CLASSIFICATION	1.1962725707953507E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999994010106275	WITHOUT_CLASSIFICATION	5.989893726485492E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9981913242844145	WITHOUT_CLASSIFICATION	0.0018086757155854852	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999997675899276	WITHOUT_CLASSIFICATION	2.3241007244935863E-7	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999998756688966	WITHOUT_CLASSIFICATION	1.2433110340360345E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999995065699644	WITHOUT_CLASSIFICATION	4.934300356069095E-7	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.999997656632041	WITHOUT_CLASSIFICATION	2.3433679589578324E-6	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999990863727413	WITHOUT_CLASSIFICATION	9.136272588803425E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999840957876679	WITHOUT_CLASSIFICATION	1.590421233214776E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999708412140972	WITHOUT_CLASSIFICATION	2.915878590281898E-5	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999998570955376	WITHOUT_CLASSIFICATION	1.4290446235608376E-7	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999980458292898	WITHOUT_CLASSIFICATION	1.95417071032616E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999230210912	WITHOUT_CLASSIFICATION	7.69789087937099E-8	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.999999984792036	WITHOUT_CLASSIFICATION	1.5207963954814523E-8	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999967454233404	WITHOUT_CLASSIFICATION	3.2545766595463933E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999967454233404	WITHOUT_CLASSIFICATION	3.2545766595463933E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999967454233404	WITHOUT_CLASSIFICATION	3.2545766595463933E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999997232304413	WITHOUT_CLASSIFICATION	2.767695587162015E-7	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.999983663110949	WITHOUT_CLASSIFICATION	1.6336889051064627E-5	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999999087208316	WITHOUT_CLASSIFICATION	9.127916852528147E-8	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.999987391911043	WITHOUT_CLASSIFICATION	1.2608088956898566E-5	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999999615106757	WITHOUT_CLASSIFICATION	3.848932430287931E-8	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999998325678755	WITHOUT_CLASSIFICATION	1.6743212458713644E-7	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999995738174	WITHOUT_CLASSIFICATION	4.261827369441786E-10	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999997949075766	WITHOUT_CLASSIFICATION	2.0509242336800164E-7	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999997436124207	WITHOUT_CLASSIFICATION	2.5638757928897253E-7	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999997365415764	WITHOUT_CLASSIFICATION	2.634584235722028E-7	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999942282394612	WITHOUT_CLASSIFICATION	5.7717605387799684E-6	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9999797868236947	WITHOUT_CLASSIFICATION	2.021317630528865E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.999999873487509	WITHOUT_CLASSIFICATION	1.2651249111281745E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999949237807	WITHOUT_CLASSIFICATION	5.076219264601645E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999949237807	WITHOUT_CLASSIFICATION	5.076219264601645E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999991961285203	WITHOUT_CLASSIFICATION	8.03871479694361E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999994460571676	WITHOUT_CLASSIFICATION	5.539428323156674E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999988037274292	WITHOUT_CLASSIFICATION	1.1962725707953507E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9981913242844145	WITHOUT_CLASSIFICATION	0.0018086757155854852	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999998756688966	WITHOUT_CLASSIFICATION	1.2433110340360345E-7	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999994010106275	WITHOUT_CLASSIFICATION	5.989893726485492E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999995065699644	WITHOUT_CLASSIFICATION	4.934300356069095E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999840957876679	WITHOUT_CLASSIFICATION	1.590421233214776E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999990863727413	WITHOUT_CLASSIFICATION	9.136272588803425E-7	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999998570955376	WITHOUT_CLASSIFICATION	1.4290446235608376E-7	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999996221391662	WITHOUT_CLASSIFICATION	3.7786083380613944E-7	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999992237389909	WITHOUT_CLASSIFICATION	7.762610092296691E-7	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999993777827856	WITHOUT_CLASSIFICATION	6.222172144498761E-7	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999997225774979	WITHOUT_CLASSIFICATION	2.7742250207771504E-7	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999999724190173	WITHOUT_CLASSIFICATION	2.758098273170124E-8	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999999292619708	WITHOUT_CLASSIFICATION	7.073802926588643E-8	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999963374091545	WITHOUT_CLASSIFICATION	3.662590845422135E-6	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9959723955968897	WITHOUT_CLASSIFICATION	0.0040276044031102775	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9998796482878975	WITHOUT_CLASSIFICATION	1.2035171210242458E-4	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999954329122116	WITHOUT_CLASSIFICATION	4.5670877883686804E-6	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999999268204922	WITHOUT_CLASSIFICATION	7.317950782977946E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999993801565146	WITHOUT_CLASSIFICATION	6.198434854361562E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999987199752788	WITHOUT_CLASSIFICATION	1.2800247212433808E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999995344012718	WITHOUT_CLASSIFICATION	4.655987282071626E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999947698240931	WITHOUT_CLASSIFICATION	5.230175906986087E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999048795375	WITHOUT_CLASSIFICATION	9.512046260419629E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999991087991195	WITHOUT_CLASSIFICATION	8.912008804973642E-7	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999993749990062	WITHOUT_CLASSIFICATION	6.250009938092466E-7	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999996899514524	WITHOUT_CLASSIFICATION	3.1004854761211553E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999994188876367	WITHOUT_CLASSIFICATION	5.811123632281498E-7	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999996985484542	WITHOUT_CLASSIFICATION	3.014515457342861E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999112942007566	WITHOUT_CLASSIFICATION	8.870579924332002E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999112942007566	WITHOUT_CLASSIFICATION	8.870579924332002E-5	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999867198978135	WITHOUT_CLASSIFICATION	1.3280102186391149E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999998032137516	WITHOUT_CLASSIFICATION	1.9678624850352136E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997130798523586	WITHOUT_CLASSIFICATION	2.869201476413865E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997130798523586	WITHOUT_CLASSIFICATION	2.869201476413865E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997130798523586	WITHOUT_CLASSIFICATION	2.869201476413865E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9997610532120882	WITHOUT_CLASSIFICATION	2.3894678791181698E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9997610532120882	WITHOUT_CLASSIFICATION	2.3894678791181698E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9996106546584492	WITHOUT_CLASSIFICATION	3.893453415507793E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9998612718094015	WITHOUT_CLASSIFICATION	1.3872819059837282E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999998032137516	WITHOUT_CLASSIFICATION	1.9678624850352136E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999973183322197	WITHOUT_CLASSIFICATION	2.681667780248017E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997130798523586	WITHOUT_CLASSIFICATION	2.869201476413865E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997130798523586	WITHOUT_CLASSIFICATION	2.869201476413865E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9997610532120882	WITHOUT_CLASSIFICATION	2.3894678791181698E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9998612718094015	WITHOUT_CLASSIFICATION	1.3872819059837282E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999841530925258	WITHOUT_CLASSIFICATION	1.5846907474321826E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999841530925258	WITHOUT_CLASSIFICATION	1.5846907474321826E-5	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999991487914777	WITHOUT_CLASSIFICATION	8.512085223810806E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999991487914777	WITHOUT_CLASSIFICATION	8.512085223810806E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999984634997868	WITHOUT_CLASSIFICATION	1.536500213103775E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999984634997868	WITHOUT_CLASSIFICATION	1.536500213103775E-6	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999998693138341	WITHOUT_CLASSIFICATION	1.3068616594207452E-7	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999988344224153	WITHOUT_CLASSIFICATION	1.1655775847001E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999988344224153	WITHOUT_CLASSIFICATION	1.1655775847001E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999971851323126	WITHOUT_CLASSIFICATION	2.81486768731313E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999971851323126	WITHOUT_CLASSIFICATION	2.81486768731313E-6	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999997219712249	WITHOUT_CLASSIFICATION	2.780287751647977E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999978467049752	WITHOUT_CLASSIFICATION	2.153295024919156E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999978467049752	WITHOUT_CLASSIFICATION	2.153295024919156E-6	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999998505872534	WITHOUT_CLASSIFICATION	1.494127466400947E-7	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999995300557046	WITHOUT_CLASSIFICATION	4.699442953874201E-7	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999972937809438	WITHOUT_CLASSIFICATION	2.706219056178227E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999998505872534	WITHOUT_CLASSIFICATION	1.494127466400947E-7	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999993303772591	WITHOUT_CLASSIFICATION	6.69622740904487E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999987767984284	WITHOUT_CLASSIFICATION	1.2232015715603469E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999987767984284	WITHOUT_CLASSIFICATION	1.2232015715603469E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999987767984284	WITHOUT_CLASSIFICATION	1.2232015715603469E-6	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.999997550288692	WITHOUT_CLASSIFICATION	2.449711308093155E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999992915680623	WITHOUT_CLASSIFICATION	7.084319375828674E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978691244379	WITHOUT_CLASSIFICATION	2.130875562124908E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978691244379	WITHOUT_CLASSIFICATION	2.130875562124908E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999815603245	WITHOUT_CLASSIFICATION	1.8439675480922342E-8	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999543185927	WITHOUT_CLASSIFICATION	4.568140737565487E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999341891338	WITHOUT_CLASSIFICATION	6.581086619219501E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.999999772448565	WITHOUT_CLASSIFICATION	2.2755143498205644E-7	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999997963848545	WITHOUT_CLASSIFICATION	2.036151455797792E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999992210772152	WITHOUT_CLASSIFICATION	7.789227849301137E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999992210772152	WITHOUT_CLASSIFICATION	7.789227849301137E-7	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.999998444040165	WITHOUT_CLASSIFICATION	1.5559598349655763E-6	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997227287106003	WITHOUT_CLASSIFICATION	2.7727128939968775E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997227287106003	WITHOUT_CLASSIFICATION	2.7727128939968775E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999987767984284	WITHOUT_CLASSIFICATION	1.2232015715603469E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999992915680623	WITHOUT_CLASSIFICATION	7.084319375828674E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978691244379	WITHOUT_CLASSIFICATION	2.130875562124908E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999815603245	WITHOUT_CLASSIFICATION	1.8439675480922342E-8	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999543185927	WITHOUT_CLASSIFICATION	4.568140737565487E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999341891338	WITHOUT_CLASSIFICATION	6.581086619219501E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.999999772448565	WITHOUT_CLASSIFICATION	2.2755143498205644E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997227287106003	WITHOUT_CLASSIFICATION	2.7727128939968775E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999988064534033	WITHOUT_CLASSIFICATION	1.193546596691578E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999998762770129	WITHOUT_CLASSIFICATION	1.2372298707268708E-7	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999956997070203	WITHOUT_CLASSIFICATION	4.300292979706199E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999997632690187	WITHOUT_CLASSIFICATION	2.3673098114526302E-7	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999971296135409	WITHOUT_CLASSIFICATION	2.8703864591522484E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999995308816704	WITHOUT_CLASSIFICATION	4.6911832960384596E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999987196556044	WITHOUT_CLASSIFICATION	1.28034439557788E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999987196556044	WITHOUT_CLASSIFICATION	1.28034439557788E-6	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999994191101926	WITHOUT_CLASSIFICATION	5.808898073402671E-7	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999997547814129	WITHOUT_CLASSIFICATION	2.452185871278476E-7	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999992707647096	WITHOUT_CLASSIFICATION	7.292352904552712E-7	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999999356215757	WITHOUT_CLASSIFICATION	6.43784242673752E-8	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999993203404677	WITHOUT_CLASSIFICATION	6.796595322997385E-7	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999993203404677	WITHOUT_CLASSIFICATION	6.796595322997385E-7	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999999624018633	WITHOUT_CLASSIFICATION	3.759813680956583E-8	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.999999954940521	WITHOUT_CLASSIFICATION	4.505947897725121E-8	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999999629763557	WITHOUT_CLASSIFICATION	3.7023644169169473E-8	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999999629763557	WITHOUT_CLASSIFICATION	3.7023644169169473E-8	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.999999895816018	WITHOUT_CLASSIFICATION	1.0418398195711823E-7	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999999522485531	WITHOUT_CLASSIFICATION	4.775144689095352E-8	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999997963848545	WITHOUT_CLASSIFICATION	2.036151455797792E-7	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999940481897683	WITHOUT_CLASSIFICATION	5.95181023161742E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999997942912856	WITHOUT_CLASSIFICATION	2.057087143718636E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999965219528849	WITHOUT_CLASSIFICATION	3.478047114987652E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999944938483151	WITHOUT_CLASSIFICATION	5.506151684883427E-6	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999993875589651	WITHOUT_CLASSIFICATION	6.124410347490624E-7	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999993339694488	WITHOUT_CLASSIFICATION	6.660305512195937E-7	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.999983567085163	WITHOUT_CLASSIFICATION	1.643291483708139E-5	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999985173205405	WITHOUT_CLASSIFICATION	1.4826794595859434E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.999999928712494	WITHOUT_CLASSIFICATION	7.128750599350842E-8	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.999999928712494	WITHOUT_CLASSIFICATION	7.128750599350842E-8	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998905075427	WITHOUT_CLASSIFICATION	1.0949245729041824E-7	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998905075427	WITHOUT_CLASSIFICATION	1.0949245729041824E-7	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999997471402859	WITHOUT_CLASSIFICATION	2.528597140192856E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999925402084233	WITHOUT_CLASSIFICATION	7.459791576624232E-6	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999925402084233	WITHOUT_CLASSIFICATION	7.459791576624232E-6	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999925402084233	WITHOUT_CLASSIFICATION	7.459791576624232E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999995628784194	WITHOUT_CLASSIFICATION	4.3712158055661224E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999999628795585	WITHOUT_CLASSIFICATION	3.7120441470831267E-8	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999999628795585	WITHOUT_CLASSIFICATION	3.7120441470831267E-8	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999983189642291	WITHOUT_CLASSIFICATION	1.6810357708414284E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999998717381975	WITHOUT_CLASSIFICATION	1.282618024514912E-7	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999996847458442	WITHOUT_CLASSIFICATION	3.1525415574959256E-7	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999999386439387	WITHOUT_CLASSIFICATION	6.135606127584032E-8	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9998980944710355	WITHOUT_CLASSIFICATION	1.0190552896452493E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999887662147782	WITHOUT_CLASSIFICATION	1.1233785221877887E-5	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999382161767408	WITHOUT_CLASSIFICATION	6.178382325922082E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999987199752788	WITHOUT_CLASSIFICATION	1.2800247212433808E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999987199752788	WITHOUT_CLASSIFICATION	1.2800247212433808E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999995628784194	WITHOUT_CLASSIFICATION	4.3712158055661224E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999983189642291	WITHOUT_CLASSIFICATION	1.6810357708414284E-6	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.999999930187417	WITHOUT_CLASSIFICATION	6.981258303479603E-8	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999998717381975	WITHOUT_CLASSIFICATION	1.282618024514912E-7	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999996847458442	WITHOUT_CLASSIFICATION	3.1525415574959256E-7	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999998434474644	WITHOUT_CLASSIFICATION	1.5655253566588573E-7	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999993812282107	WITHOUT_CLASSIFICATION	6.187717892799423E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999867250127	WITHOUT_CLASSIFICATION	1.327498731080114E-8	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999399385402066	WITHOUT_CLASSIFICATION	6.00614597934243E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999967400848975	WITHOUT_CLASSIFICATION	3.2599151025810543E-6	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999988567041177	WITHOUT_CLASSIFICATION	1.143295882345266E-6	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999991432571952	WITHOUT_CLASSIFICATION	8.567428047404685E-7	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999998434474644	WITHOUT_CLASSIFICATION	1.5655253566588573E-7	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999705158239265	WITHOUT_CLASSIFICATION	2.948417607345831E-5	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999705158239265	WITHOUT_CLASSIFICATION	2.948417607345831E-5	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999813350686406	WITHOUT_CLASSIFICATION	1.8664931359472996E-5	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999988052954886	WITHOUT_CLASSIFICATION	1.1947045114904439E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999080907729091	WITHOUT_CLASSIFICATION	9.190922709093196E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999822151467658	WITHOUT_CLASSIFICATION	1.7784853234184794E-5	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999994869010476	WITHOUT_CLASSIFICATION	5.130989524473646E-7	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999999779329075	WITHOUT_CLASSIFICATION	2.206709243315748E-8	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999902238786456	WITHOUT_CLASSIFICATION	9.77612135445543E-6	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999987977923706	WITHOUT_CLASSIFICATION	1.202207629540906E-6	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999865554064437	WITHOUT_CLASSIFICATION	1.3444593556245734E-5	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999993496555989	WITHOUT_CLASSIFICATION	6.503444011037846E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999976641040158	WITHOUT_CLASSIFICATION	2.3358959842532258E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999822151467658	WITHOUT_CLASSIFICATION	1.7784853234184794E-5	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999994869010476	WITHOUT_CLASSIFICATION	5.130989524473646E-7	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999991160633069	WITHOUT_CLASSIFICATION	8.839366931650985E-7	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.999999799488654	WITHOUT_CLASSIFICATION	2.0051134606581456E-7	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999997059314509	WITHOUT_CLASSIFICATION	2.940685491106627E-7	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999992997587234	WITHOUT_CLASSIFICATION	7.002412766944752E-7	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999971278061162	WITHOUT_CLASSIFICATION	2.8721938837825222E-6	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999506020850719	WITHOUT_CLASSIFICATION	4.9397914928022614E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9997997642059872	WITHOUT_CLASSIFICATION	2.0023579401279624E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999998272843146	WITHOUT_CLASSIFICATION	1.7271568544474203E-7	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999989399810697	WITHOUT_CLASSIFICATION	1.060018930349647E-6	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999977472183191	WITHOUT_CLASSIFICATION	2.2527816809182865E-6	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999881810705197	WITHOUT_CLASSIFICATION	1.1818929480255174E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999952423990925	WITHOUT_CLASSIFICATION	4.757600907494844E-6	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999993306531937	WITHOUT_CLASSIFICATION	6.693468063218255E-7	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999998430530505	WITHOUT_CLASSIFICATION	1.5694694958323744E-7	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9998624386926392	WITHOUT_CLASSIFICATION	1.3756130736080377E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999999372341302	WITHOUT_CLASSIFICATION	6.276586984004525E-8	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999741352495856	WITHOUT_CLASSIFICATION	2.5864750414523796E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999510031204	WITHOUT_CLASSIFICATION	4.899687964987941E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999911843255	WITHOUT_CLASSIFICATION	8.815674581870586E-9	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999999116205283	WITHOUT_CLASSIFICATION	8.837947177688159E-8	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999741352495856	WITHOUT_CLASSIFICATION	2.5864750414523796E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999510031204	WITHOUT_CLASSIFICATION	4.899687964987941E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999911843255	WITHOUT_CLASSIFICATION	8.815674581870586E-9	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999926908591188	WITHOUT_CLASSIFICATION	7.309140881173135E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999999591610921	WITHOUT_CLASSIFICATION	4.0838907906572554E-8	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999983618659009	WITHOUT_CLASSIFICATION	1.6381340990531617E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999427923084957	WITHOUT_CLASSIFICATION	5.720769150440417E-5	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9997886827160661	WITHOUT_CLASSIFICATION	2.1131728393383097E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999961127795993	WITHOUT_CLASSIFICATION	3.8872204007213935E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999572843384115	WITHOUT_CLASSIFICATION	4.2715661588618396E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999999897113276	WITHOUT_CLASSIFICATION	1.0288672371122673E-8	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999978459631268	WITHOUT_CLASSIFICATION	2.1540368731268833E-6	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999986042704616	WITHOUT_CLASSIFICATION	1.395729538349028E-6	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9671187675224021	WITHOUT_CLASSIFICATION	0.0328812324775978	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999983545456248	WITHOUT_CLASSIFICATION	1.6454543752174289E-6	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999982729121825	WITHOUT_CLASSIFICATION	1.7270878174969897E-6	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.999999959157401	WITHOUT_CLASSIFICATION	4.084259902812229E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999980789429721	WITHOUT_CLASSIFICATION	1.9210570278422876E-6	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999998180186054	WITHOUT_CLASSIFICATION	1.81981394603231E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999996836508092	WITHOUT_CLASSIFICATION	3.163491908266462E-7	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999956832304953	WITHOUT_CLASSIFICATION	4.316769504766383E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999329965094	WITHOUT_CLASSIFICATION	6.700349065751591E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999997788422299	WITHOUT_CLASSIFICATION	2.2115777004123456E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999974693334132	WITHOUT_CLASSIFICATION	2.5306665868815054E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999964256915898	WITHOUT_CLASSIFICATION	3.5743084103169043E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999964256915898	WITHOUT_CLASSIFICATION	3.5743084103169043E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999988597629135	WITHOUT_CLASSIFICATION	1.1402370865667503E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999988597629135	WITHOUT_CLASSIFICATION	1.1402370865667503E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999998857446505	WITHOUT_CLASSIFICATION	1.1425534947580846E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999998857446505	WITHOUT_CLASSIFICATION	1.1425534947580846E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999998701639216	WITHOUT_CLASSIFICATION	1.2983607856589773E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999974132024	WITHOUT_CLASSIFICATION	2.5867974398876767E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999991950184116	WITHOUT_CLASSIFICATION	8.049815883319897E-7	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999164671788	WITHOUT_CLASSIFICATION	8.353282122264336E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999766398285	WITHOUT_CLASSIFICATION	2.336017149330473E-8	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999864532377	WITHOUT_CLASSIFICATION	1.354676233842331E-8	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999999674202907	WITHOUT_CLASSIFICATION	3.257970919895804E-8	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999999032634197	WITHOUT_CLASSIFICATION	9.673658030074757E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999987199752788	WITHOUT_CLASSIFICATION	1.2800247212433808E-6	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999998701639216	WITHOUT_CLASSIFICATION	1.2983607856589773E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999974132024	WITHOUT_CLASSIFICATION	2.5867974398876767E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999991950184116	WITHOUT_CLASSIFICATION	8.049815883319897E-7	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999766398285	WITHOUT_CLASSIFICATION	2.336017149330473E-8	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999864532377	WITHOUT_CLASSIFICATION	1.354676233842331E-8	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999960227942337	WITHOUT_CLASSIFICATION	3.9772057663016655E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999991803298889	WITHOUT_CLASSIFICATION	8.196701111537729E-7	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9997529592585062	WITHOUT_CLASSIFICATION	2.4704074149389023E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9997529592585062	WITHOUT_CLASSIFICATION	2.4704074149389023E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999993836459624	WITHOUT_CLASSIFICATION	6.163540375739022E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999304014021115	WITHOUT_CLASSIFICATION	6.95985978884377E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999981173455603	WITHOUT_CLASSIFICATION	1.8826544397313107E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999976389740786	WITHOUT_CLASSIFICATION	2.3610259213705407E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999976389740786	WITHOUT_CLASSIFICATION	2.3610259213705407E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.99999918701673	WITHOUT_CLASSIFICATION	8.129832701249363E-7	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999999884613352	WITHOUT_CLASSIFICATION	1.153866477713931E-8	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999970307911957	WITHOUT_CLASSIFICATION	2.969208804229598E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.999999819517572	WITHOUT_CLASSIFICATION	1.8048242811322975E-7	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999951588858181	WITHOUT_CLASSIFICATION	4.841114181878053E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999995344012718	WITHOUT_CLASSIFICATION	4.655987282071626E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999947698240931	WITHOUT_CLASSIFICATION	5.230175906986087E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999048795375	WITHOUT_CLASSIFICATION	9.512046260419629E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999991087991195	WITHOUT_CLASSIFICATION	8.912008804973642E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999994188876367	WITHOUT_CLASSIFICATION	5.811123632281498E-7	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999996985484542	WITHOUT_CLASSIFICATION	3.014515457342861E-7	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.99999918701673	WITHOUT_CLASSIFICATION	8.129832701249363E-7	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999999884613352	WITHOUT_CLASSIFICATION	1.153866477713931E-8	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.999999819517572	WITHOUT_CLASSIFICATION	1.8048242811322975E-7	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999954618398434	WITHOUT_CLASSIFICATION	4.538160156512465E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999981173455603	WITHOUT_CLASSIFICATION	1.8826544397313107E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999981173455603	WITHOUT_CLASSIFICATION	1.8826544397313107E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999976641040158	WITHOUT_CLASSIFICATION	2.3358959842532258E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999976641040158	WITHOUT_CLASSIFICATION	2.3358959842532258E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.998909508633523	WITHOUT_CLASSIFICATION	0.0010904913664769912	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.998909508633523	WITHOUT_CLASSIFICATION	0.0010904913664769912	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.999996684152943	WITHOUT_CLASSIFICATION	3.315847056992288E-6	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999989447859083	WITHOUT_CLASSIFICATION	1.0552140916054037E-6	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999816687322893	WITHOUT_CLASSIFICATION	1.8331267710736976E-5	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.999986509222755	WITHOUT_CLASSIFICATION	1.349077724493077E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999983372727091	WITHOUT_CLASSIFICATION	1.6627272908439778E-6	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999976915334828	WITHOUT_CLASSIFICATION	2.308466517131389E-6	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999328482254006	WITHOUT_CLASSIFICATION	6.715177459933725E-5	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999505580279	WITHOUT_CLASSIFICATION	4.9441972011611873E-8	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999969552162076	WITHOUT_CLASSIFICATION	3.0447837924821567E-6	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999994885166963	WITHOUT_CLASSIFICATION	5.114833037019376E-7	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999996185070216	WITHOUT_CLASSIFICATION	3.8149297837364096E-7	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999997587886275	WITHOUT_CLASSIFICATION	2.412113725656488E-7	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999998343758424	WITHOUT_CLASSIFICATION	1.6562415766279723E-7	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.999999876360193	WITHOUT_CLASSIFICATION	1.2363980692028433E-7	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999991674863208	WITHOUT_CLASSIFICATION	8.32513679219151E-7	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999955265455397	WITHOUT_CLASSIFICATION	4.473454460292993E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.999998889179294	WITHOUT_CLASSIFICATION	1.1108207059077276E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999997614385749	WITHOUT_CLASSIFICATION	2.385614250941731E-7	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999984869689937	WITHOUT_CLASSIFICATION	1.5130310063217029E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999947698240931	WITHOUT_CLASSIFICATION	5.230175906986087E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999991087991195	WITHOUT_CLASSIFICATION	8.912008804973642E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999112942007566	WITHOUT_CLASSIFICATION	8.870579924332002E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978691244379	WITHOUT_CLASSIFICATION	2.130875562124908E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978691244379	WITHOUT_CLASSIFICATION	2.130875562124908E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999954618398434	WITHOUT_CLASSIFICATION	4.538160156512465E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999981173455603	WITHOUT_CLASSIFICATION	1.8826544397313107E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999976641040158	WITHOUT_CLASSIFICATION	2.3358959842532258E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.998909508633523	WITHOUT_CLASSIFICATION	0.0010904913664769912	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.999935235083052	WITHOUT_CLASSIFICATION	6.476491694793019E-5	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9966796889118416	WITHOUT_CLASSIFICATION	0.003320311088158562	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999999938728354	WITHOUT_CLASSIFICATION	6.12716451259688E-9	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9996292659871899	WITHOUT_CLASSIFICATION	3.7073401281010747E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999989030008186	WITHOUT_CLASSIFICATION	1.096999181365942E-6	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999989030008186	WITHOUT_CLASSIFICATION	1.096999181365942E-6	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999999483558836	WITHOUT_CLASSIFICATION	5.1644116475166114E-8	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999998395964645	WITHOUT_CLASSIFICATION	1.6040353545168688E-7	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999576219919	WITHOUT_CLASSIFICATION	4.237800809834533E-8	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999996113452104	WITHOUT_CLASSIFICATION	3.8865478954621993E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999371232364	WITHOUT_CLASSIFICATION	6.287676359669358E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999371232364	WITHOUT_CLASSIFICATION	6.287676359669358E-8	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999997103399456	WITHOUT_CLASSIFICATION	2.8966005434937303E-7	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999999850580553	WITHOUT_CLASSIFICATION	1.4941944699208613E-8	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999985413975364	WITHOUT_CLASSIFICATION	1.458602463617165E-6	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999994278906867	WITHOUT_CLASSIFICATION	5.721093133228201E-7	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999997691918429	WITHOUT_CLASSIFICATION	2.3080815711709238E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999998602506943	WITHOUT_CLASSIFICATION	1.3974930567865782E-7	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999973020006986	WITHOUT_CLASSIFICATION	2.6979993014783667E-6	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999998832346788	WITHOUT_CLASSIFICATION	1.1676532121815421E-7	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9993406569036438	WITHOUT_CLASSIFICATION	6.593430963561831E-4	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9992310907789416	WITHOUT_CLASSIFICATION	7.689092210584323E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9999997822296608	WITHOUT_CLASSIFICATION	2.177703392077486E-7	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.999993683950786	WITHOUT_CLASSIFICATION	6.316049214028586E-6	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999988489774938	WITHOUT_CLASSIFICATION	1.1510225062089099E-6	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.999998837867148	WITHOUT_CLASSIFICATION	1.1621328519039643E-6	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.999998637760072	WITHOUT_CLASSIFICATION	1.3622399280112167E-6	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.999997342428192	WITHOUT_CLASSIFICATION	2.657571807939018E-6	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.999999912070544	WITHOUT_CLASSIFICATION	8.79294561337075E-8	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999994922904489	WITHOUT_CLASSIFICATION	5.07709551009903E-7	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999992547678719	WITHOUT_CLASSIFICATION	7.452321281013406E-7	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999987610307133	WITHOUT_CLASSIFICATION	1.2389692866602568E-6	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999955939759906	WITHOUT_CLASSIFICATION	4.406024009396597E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999992387931047	WITHOUT_CLASSIFICATION	7.612068953235593E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999992387931047	WITHOUT_CLASSIFICATION	7.612068953235593E-7	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999818625041971	WITHOUT_CLASSIFICATION	1.8137495802880857E-5	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999993512726794	WITHOUT_CLASSIFICATION	6.487273206751234E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999998932104012	WITHOUT_CLASSIFICATION	1.067895987931466E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999998932104012	WITHOUT_CLASSIFICATION	1.067895987931466E-7	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9311543232963215	WITHOUT_CLASSIFICATION	0.06884567670367849	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999901933421884	WITHOUT_CLASSIFICATION	9.806657811710722E-6	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999935096482816	WITHOUT_CLASSIFICATION	6.490351718328636E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999903823093694	WITHOUT_CLASSIFICATION	9.617690630490042E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999903823093694	WITHOUT_CLASSIFICATION	9.617690630490042E-6	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9996829217181749	WITHOUT_CLASSIFICATION	3.1707828182506897E-4	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999995310820968	WITHOUT_CLASSIFICATION	4.68917903164265E-7	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999988065519386	WITHOUT_CLASSIFICATION	1.193448061329689E-6	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999988254069329	WITHOUT_CLASSIFICATION	1.174593067136324E-6	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999864604710175	WITHOUT_CLASSIFICATION	1.3539528982544139E-5	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999998031092306	WITHOUT_CLASSIFICATION	1.9689076930921866E-7	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999999402600723	WITHOUT_CLASSIFICATION	5.973992771802424E-8	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.99999140049823	WITHOUT_CLASSIFICATION	8.599501770104785E-6	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999989949823218	WITHOUT_CLASSIFICATION	1.0050176781886932E-6	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9999976840594497	WITHOUT_CLASSIFICATION	2.3159405503695186E-6	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999939036529557	WITHOUT_CLASSIFICATION	6.096347044276259E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.99999964719705	WITHOUT_CLASSIFICATION	3.528029500620471E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999995467406579	WITHOUT_CLASSIFICATION	4.5325934208442305E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999993377534876	WITHOUT_CLASSIFICATION	6.622465125175404E-7	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999943985807943	WITHOUT_CLASSIFICATION	5.601419205586774E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.999994217630761	WITHOUT_CLASSIFICATION	5.78236923896584E-6	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999998296387534	WITHOUT_CLASSIFICATION	1.7036124649546043E-7	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999955627701738	WITHOUT_CLASSIFICATION	4.437229826214054E-6	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999753786547289	WITHOUT_CLASSIFICATION	2.4621345271149203E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999952234701055	WITHOUT_CLASSIFICATION	4.776529894442969E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999999114363156	WITHOUT_CLASSIFICATION	8.8563684370449E-8	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999999381403796	WITHOUT_CLASSIFICATION	6.185962039963583E-8	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999762474936674	WITHOUT_CLASSIFICATION	2.3752506332585257E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999898912536818	WITHOUT_CLASSIFICATION	1.0108746318311742E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999994462602065	WITHOUT_CLASSIFICATION	5.537397935160707E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9994841480925433	WITHOUT_CLASSIFICATION	5.158519074567427E-4	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9952298932992603	WITHOUT_CLASSIFICATION	0.0047701067007397185	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999997678366106	WITHOUT_CLASSIFICATION	2.3216338945870955E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999989299154302	WITHOUT_CLASSIFICATION	1.0700845698968378E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999999517418685	WITHOUT_CLASSIFICATION	4.8258131440871616E-8	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999999997125504	WITHOUT_CLASSIFICATION	2.8744959179160086E-9	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999993377534876	WITHOUT_CLASSIFICATION	6.622465125175404E-7	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999997678366106	WITHOUT_CLASSIFICATION	2.3216338945870955E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999989299154302	WITHOUT_CLASSIFICATION	1.0700845698968378E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999999997125504	WITHOUT_CLASSIFICATION	2.8744959179160086E-9	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999999069198732	WITHOUT_CLASSIFICATION	9.308012681831721E-8	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999993006102588	WITHOUT_CLASSIFICATION	6.993897411247963E-7	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999975929936862	WITHOUT_CLASSIFICATION	2.4070063138795682E-6	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999979654862369	WITHOUT_CLASSIFICATION	2.034513763136721E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999998638426768	WITHOUT_CLASSIFICATION	1.3615732317560444E-7	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.999998487643373	WITHOUT_CLASSIFICATION	1.5123566270649406E-6	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.99999930083077	WITHOUT_CLASSIFICATION	6.991692300440222E-7	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999992439724219	WITHOUT_CLASSIFICATION	7.56027578186868E-7	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999997766497735	WITHOUT_CLASSIFICATION	2.233502264551456E-7	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999608900862123	WITHOUT_CLASSIFICATION	3.910991378774253E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999908523196015	WITHOUT_CLASSIFICATION	9.147680398466834E-6	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999908523196015	WITHOUT_CLASSIFICATION	9.147680398466834E-6	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999972370662178	WITHOUT_CLASSIFICATION	2.7629337821913737E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999990577270034	WITHOUT_CLASSIFICATION	9.422729965869427E-7	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999651092742377	WITHOUT_CLASSIFICATION	3.489072576230121E-5	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999989950091437	WITHOUT_CLASSIFICATION	1.0049908562822146E-6	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999975291809926	WITHOUT_CLASSIFICATION	2.470819007515729E-6	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.999996148569832	WITHOUT_CLASSIFICATION	3.8514301681041845E-6	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999987023076632	WITHOUT_CLASSIFICATION	1.2976923367837382E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.998867202808406	WITHOUT_CLASSIFICATION	0.0011327971915939179	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999989998848282	WITHOUT_CLASSIFICATION	1.0001151718210094E-6	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999998625772444	WITHOUT_CLASSIFICATION	1.3742275557518446E-7	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999999155756034	WITHOUT_CLASSIFICATION	8.442439654009434E-8	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999998980301709	WITHOUT_CLASSIFICATION	1.019698292056956E-7	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999999721484975	WITHOUT_CLASSIFICATION	2.7851502534270187E-8	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999998811443906	WITHOUT_CLASSIFICATION	1.1885560940428259E-7	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999999769157315	WITHOUT_CLASSIFICATION	2.3084268452106687E-8	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999999957299529	WITHOUT_CLASSIFICATION	4.270047090504921E-9	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999999974248923	WITHOUT_CLASSIFICATION	2.5751076784689902E-9	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.99999998001746	WITHOUT_CLASSIFICATION	1.9982539895224427E-8	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999999673977854	WITHOUT_CLASSIFICATION	3.260221466472707E-8	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.999999602618568	WITHOUT_CLASSIFICATION	3.973814319444583E-7	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999983526988389	WITHOUT_CLASSIFICATION	1.6473011611620323E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999945193941567	WITHOUT_CLASSIFICATION	5.480605843276045E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999999626685248	WITHOUT_CLASSIFICATION	3.733147525001264E-8	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999987567953799	WITHOUT_CLASSIFICATION	1.2432046202034747E-6	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999995824532542	WITHOUT_CLASSIFICATION	4.175467458583317E-7	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999992361501157	WITHOUT_CLASSIFICATION	7.638498842715251E-7	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9998519877362186	WITHOUT_CLASSIFICATION	1.480122637812649E-4	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9999711337631727	WITHOUT_CLASSIFICATION	2.886623682721814E-5	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999934198578165	WITHOUT_CLASSIFICATION	6.580142183417742E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.999999489484651	WITHOUT_CLASSIFICATION	5.105153490967679E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999998365754478	WITHOUT_CLASSIFICATION	1.6342455218341994E-7	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999999531934557	WITHOUT_CLASSIFICATION	4.68065442251517E-8	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999996264345906	WITHOUT_CLASSIFICATION	3.7356540950151746E-7	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.999999783632567	WITHOUT_CLASSIFICATION	2.1636743295224225E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999992467109048	WITHOUT_CLASSIFICATION	7.532890950993351E-7	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999763340025035	WITHOUT_CLASSIFICATION	2.366599749650104E-5	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999999385276553	WITHOUT_CLASSIFICATION	6.147234462442998E-8	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999997905895933	WITHOUT_CLASSIFICATION	2.0941040665491842E-7	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999977784248947	WITHOUT_CLASSIFICATION	2.221575105366066E-6	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999994032502805	WITHOUT_CLASSIFICATION	5.967497194874732E-7	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.999961462600748	WITHOUT_CLASSIFICATION	3.8537399251989414E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999943103348159	WITHOUT_CLASSIFICATION	5.689665184151711E-6	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.999997717781813	WITHOUT_CLASSIFICATION	2.282218186931611E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999995912760756	WITHOUT_CLASSIFICATION	4.0872392435094064E-7	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999998771853201	WITHOUT_CLASSIFICATION	1.2281467986057328E-7	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999343123246786	WITHOUT_CLASSIFICATION	6.568767532149772E-5	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999993004639488	WITHOUT_CLASSIFICATION	6.995360512251701E-7	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999888803378195	WITHOUT_CLASSIFICATION	1.1119662180486428E-5	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9997218104001865	WITHOUT_CLASSIFICATION	2.781895998136016E-4	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999999300248487	WITHOUT_CLASSIFICATION	6.997515130051797E-8	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999991404980423	WITHOUT_CLASSIFICATION	8.595019576882541E-7	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999990043077194	WITHOUT_CLASSIFICATION	9.956922806198886E-7	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999913307441491	WITHOUT_CLASSIFICATION	8.669255850809163E-6	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999715552834354	WITHOUT_CLASSIFICATION	2.84447165646858E-5	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999989210264933	WITHOUT_CLASSIFICATION	1.0789735066167973E-6	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999994709273168	WITHOUT_CLASSIFICATION	5.29072683243531E-7	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999996104012783	WITHOUT_CLASSIFICATION	3.895987218011306E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999990208165433	WITHOUT_CLASSIFICATION	9.791834566097576E-7	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9503518005976554	WITHOUT_CLASSIFICATION	0.049648199402344564	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9994481877832336	WITHOUT_CLASSIFICATION	5.518122167664377E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9994481877832336	WITHOUT_CLASSIFICATION	5.518122167664377E-4	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999988612114515	WITHOUT_CLASSIFICATION	1.1387885484089485E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999863297370555	WITHOUT_CLASSIFICATION	1.3670262944618523E-5	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999903409767242	WITHOUT_CLASSIFICATION	9.65902327580596E-6	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999989583097221	WITHOUT_CLASSIFICATION	1.0416902780112691E-6	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999993533811254	WITHOUT_CLASSIFICATION	6.466188745303606E-7	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9997580312994697	WITHOUT_CLASSIFICATION	2.41968700530353E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9998242063629588	WITHOUT_CLASSIFICATION	1.7579363704129156E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999992736040679	WITHOUT_CLASSIFICATION	7.263959320459344E-7	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999975557754247	WITHOUT_CLASSIFICATION	2.444224575183945E-6	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999999975228043	WITHOUT_CLASSIFICATION	2.4771956036942067E-9	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999991347214982	WITHOUT_CLASSIFICATION	8.652785019292106E-7	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999999370758702	WITHOUT_CLASSIFICATION	6.292412988342068E-8	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999976692471976	WITHOUT_CLASSIFICATION	2.33075280243579E-6	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999999860114241	WITHOUT_CLASSIFICATION	1.3988575858455434E-8	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999593568251289	WITHOUT_CLASSIFICATION	4.064317487108835E-5	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999970966113224	WITHOUT_CLASSIFICATION	2.903388677520923E-6	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999997596723853	WITHOUT_CLASSIFICATION	2.40327614719723E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999991859586651	WITHOUT_CLASSIFICATION	8.140413348810268E-7	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9998366976532356	WITHOUT_CLASSIFICATION	1.6330234676451108E-4	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.999999510615659	WITHOUT_CLASSIFICATION	4.893843410620616E-7	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999990949235551	WITHOUT_CLASSIFICATION	9.050764449791065E-7	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999963269805188	WITHOUT_CLASSIFICATION	3.6730194813432818E-6	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999935242979596	WITHOUT_CLASSIFICATION	6.475702040441358E-6	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999165375088626	WITHOUT_CLASSIFICATION	8.346249113733601E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.99999777054151	WITHOUT_CLASSIFICATION	2.229458490037585E-6	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999943213723981	WITHOUT_CLASSIFICATION	5.678627601868627E-6	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999983172358012	WITHOUT_CLASSIFICATION	1.6827641987643534E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999841546378951	WITHOUT_CLASSIFICATION	1.5845362104882478E-5	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.999999922596435	WITHOUT_CLASSIFICATION	7.740356511439439E-8	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999993848558363	WITHOUT_CLASSIFICATION	6.151441636298345E-7	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999996094257834	WITHOUT_CLASSIFICATION	3.905742166780366E-7	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999986529728966	WITHOUT_CLASSIFICATION	1.3470271034428036E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998566477529	WITHOUT_CLASSIFICATION	1.4335224699629433E-7	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999994318205765	WITHOUT_CLASSIFICATION	5.68179423461327E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998566477529	WITHOUT_CLASSIFICATION	1.4335224699629433E-7	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999974240376288	WITHOUT_CLASSIFICATION	2.575962371171615E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999105455956315	WITHOUT_CLASSIFICATION	8.945440436849844E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999105455956315	WITHOUT_CLASSIFICATION	8.945440436849844E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999105455956315	WITHOUT_CLASSIFICATION	8.945440436849844E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998036650136	WITHOUT_CLASSIFICATION	1.9633498635344585E-7	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998036650136	WITHOUT_CLASSIFICATION	1.9633498635344585E-7	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999995522670067	WITHOUT_CLASSIFICATION	4.4773299337356604E-7	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999849879644858	WITHOUT_CLASSIFICATION	1.501203551424499E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999999946873217	WITHOUT_CLASSIFICATION	5.312678234159142E-9	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999986300008255	WITHOUT_CLASSIFICATION	1.3699991745992824E-6	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999965516338575	WITHOUT_CLASSIFICATION	3.4483661425148386E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999998667513587	WITHOUT_CLASSIFICATION	1.3324864142103197E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999997558116867	WITHOUT_CLASSIFICATION	2.4418831333920783E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999833331336	WITHOUT_CLASSIFICATION	1.666686639859383E-7	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999999951193868	WITHOUT_CLASSIFICATION	4.880613302906601E-9	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999998913010069	WITHOUT_CLASSIFICATION	1.0869899322766884E-7	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999957643164281	WITHOUT_CLASSIFICATION	4.2356835719541536E-6	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9999872687251008	WITHOUT_CLASSIFICATION	1.2731274899296991E-5	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999757573541573	WITHOUT_CLASSIFICATION	2.4242645842635573E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.999999569763273	WITHOUT_CLASSIFICATION	4.302367269635664E-7	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999997572017888	WITHOUT_CLASSIFICATION	2.4279821120599217E-7	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999999302664845	WITHOUT_CLASSIFICATION	6.97335154856291E-8	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999989043809966	WITHOUT_CLASSIFICATION	1.0956190034048633E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999994028278204	WITHOUT_CLASSIFICATION	5.971721796275912E-7	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999994028278204	WITHOUT_CLASSIFICATION	5.971721796275912E-7	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999986653915364	WITHOUT_CLASSIFICATION	1.3346084636647402E-6	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999999461425308	WITHOUT_CLASSIFICATION	5.385746913949362E-8	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999999461425308	WITHOUT_CLASSIFICATION	5.385746913949362E-8	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.999982033241127	WITHOUT_CLASSIFICATION	1.7966758873027844E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999996125476981	WITHOUT_CLASSIFICATION	3.8745230188604737E-7	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.999999834974357	WITHOUT_CLASSIFICATION	1.6502564307417752E-7	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.999999294059593	WITHOUT_CLASSIFICATION	7.059404069667546E-7	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999996649225379	WITHOUT_CLASSIFICATION	3.3507746212295097E-7	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999999213046623	WITHOUT_CLASSIFICATION	7.869533776058067E-8	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999995167107437	WITHOUT_CLASSIFICATION	4.832892562930609E-7	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999732338454561	WITHOUT_CLASSIFICATION	2.6766154543828802E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999999370636452	WITHOUT_CLASSIFICATION	6.293635486260786E-8	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999984148692928	WITHOUT_CLASSIFICATION	1.585130707206204E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999998106519872	WITHOUT_CLASSIFICATION	1.8934801289461028E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999965341582413	WITHOUT_CLASSIFICATION	3.4658417587065136E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999999699610548	WITHOUT_CLASSIFICATION	3.003894523715443E-8	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999984561699431	WITHOUT_CLASSIFICATION	1.5438300569041697E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999833331336	WITHOUT_CLASSIFICATION	1.666686639859383E-7	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9999269397936621	WITHOUT_CLASSIFICATION	7.306020633789967E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999995467762137	WITHOUT_CLASSIFICATION	4.5322378631367245E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999406908987	WITHOUT_CLASSIFICATION	5.9309101322885586E-8	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999406908987	WITHOUT_CLASSIFICATION	5.9309101322885586E-8	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999857657662358	WITHOUT_CLASSIFICATION	1.4234233764192226E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999285153261966	WITHOUT_CLASSIFICATION	7.148467380336897E-5	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999990077500402	WITHOUT_CLASSIFICATION	9.922499597877341E-7	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999979493819999	WITHOUT_CLASSIFICATION	2.050618000162086E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999999440672628	WITHOUT_CLASSIFICATION	5.593273720273689E-8	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.999999840861527	WITHOUT_CLASSIFICATION	1.5913847302526906E-7	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999903506432977	WITHOUT_CLASSIFICATION	9.64935670231412E-6	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9999873089298883	WITHOUT_CLASSIFICATION	1.2691070111722693E-5	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999994153987768	WITHOUT_CLASSIFICATION	5.84601223237407E-7	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999782512984517	WITHOUT_CLASSIFICATION	2.17487015482987E-5	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999931853395707	WITHOUT_CLASSIFICATION	6.814660429199379E-6	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999978371440021	WITHOUT_CLASSIFICATION	2.1628559979000746E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9453797318834154	WITHOUT_CLASSIFICATION	0.05462026811658471	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999915732729531	WITHOUT_CLASSIFICATION	8.426727047007898E-6	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999996772028946	WITHOUT_CLASSIFICATION	3.2279710544008003E-7	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.999955818134919	WITHOUT_CLASSIFICATION	4.418186508108428E-5	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999997529270455	WITHOUT_CLASSIFICATION	2.470729545179542E-7	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999998456138788	WITHOUT_CLASSIFICATION	1.5438612117957697E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999995590433166	WITHOUT_CLASSIFICATION	4.409566833609503E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999885694456314	WITHOUT_CLASSIFICATION	1.1430554368588392E-5	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.999997478019904	WITHOUT_CLASSIFICATION	2.5219800959841363E-6	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.999999026903101	WITHOUT_CLASSIFICATION	9.730968989744862E-7	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.999998998950863	WITHOUT_CLASSIFICATION	1.0010491370432617E-6	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999746190371	WITHOUT_CLASSIFICATION	2.5380962867646045E-8	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999526247807472	WITHOUT_CLASSIFICATION	4.7375219252848346E-5	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999694611222616	WITHOUT_CLASSIFICATION	3.0538877738485116E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9999342692033462	WITHOUT_CLASSIFICATION	6.573079665376503E-5	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9997032143300195	WITHOUT_CLASSIFICATION	2.96785669980571E-4	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999981076360397	WITHOUT_CLASSIFICATION	1.8923639602359775E-6	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999997346008546	WITHOUT_CLASSIFICATION	2.6539914543663633E-7	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9992702931917756	WITHOUT_CLASSIFICATION	7.297068082244752E-4	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.999999950313523	WITHOUT_CLASSIFICATION	4.968647704500154E-8	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999843103948074	WITHOUT_CLASSIFICATION	1.5689605192688808E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9985148524513101	WITHOUT_CLASSIFICATION	0.0014851475486899496	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999998767471409	WITHOUT_CLASSIFICATION	1.2325285915348416E-7	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999969766527762	WITHOUT_CLASSIFICATION	3.0233472238564933E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9997032143300195	WITHOUT_CLASSIFICATION	2.96785669980571E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999758931672851	WITHOUT_CLASSIFICATION	2.4106832714870195E-5	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999998767471409	WITHOUT_CLASSIFICATION	1.2325285915348416E-7	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.999999479193866	WITHOUT_CLASSIFICATION	5.208061340849199E-7	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.999999622718705	WITHOUT_CLASSIFICATION	3.772812949701041E-7	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.999998013447484	WITHOUT_CLASSIFICATION	1.986552516010183E-6	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999951906515243	WITHOUT_CLASSIFICATION	4.809348475654461E-6	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999995962776284	WITHOUT_CLASSIFICATION	4.0372237167355085E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.999999289013415	WITHOUT_CLASSIFICATION	7.109865851045716E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.999999289013415	WITHOUT_CLASSIFICATION	7.109865851045716E-7	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999998908801875	WITHOUT_CLASSIFICATION	1.0911981246896765E-7	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999993191054788	WITHOUT_CLASSIFICATION	6.808945211961371E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999998291576984	WITHOUT_CLASSIFICATION	1.7084230169748737E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999998291576984	WITHOUT_CLASSIFICATION	1.7084230169748737E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9998341143814965	WITHOUT_CLASSIFICATION	1.6588561850347083E-4	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9960980761801561	WITHOUT_CLASSIFICATION	0.0039019238198438914	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9997766235249653	WITHOUT_CLASSIFICATION	2.23376475034605E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9997766235249653	WITHOUT_CLASSIFICATION	2.23376475034605E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999835612769651	WITHOUT_CLASSIFICATION	1.64387230348699E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999981545980512	WITHOUT_CLASSIFICATION	1.8454019487374206E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999995188696598	WITHOUT_CLASSIFICATION	4.811303401849908E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999999607733938	WITHOUT_CLASSIFICATION	3.922660615040639E-8	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999365821774147	WITHOUT_CLASSIFICATION	6.341782258527991E-5	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999921195537975	WITHOUT_CLASSIFICATION	7.880446202363345E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999998204246974	WITHOUT_CLASSIFICATION	1.7957530257605753E-7	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999843769233365	WITHOUT_CLASSIFICATION	1.5623076663504574E-5	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999961455823814	WITHOUT_CLASSIFICATION	3.85441761859733E-6	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999925418110021	WITHOUT_CLASSIFICATION	7.4581889979482E-6	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999982035184062	WITHOUT_CLASSIFICATION	1.7964815938930727E-6	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999954224735769	WITHOUT_CLASSIFICATION	4.5775264231685575E-6	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999982585742648	WITHOUT_CLASSIFICATION	1.741425735235984E-6	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999683211448537	WITHOUT_CLASSIFICATION	3.1678855146199604E-5	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999991348090268	WITHOUT_CLASSIFICATION	8.651909732389134E-7	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999996091851803	WITHOUT_CLASSIFICATION	3.9081481969370966E-7	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999737382839196	WITHOUT_CLASSIFICATION	2.6261716080410976E-5	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999993125905848	WITHOUT_CLASSIFICATION	6.874094152672103E-7	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.999957664393099	WITHOUT_CLASSIFICATION	4.23356069010745E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999254736580918	WITHOUT_CLASSIFICATION	7.452634190822211E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999988351941538	WITHOUT_CLASSIFICATION	1.1648058461389652E-6	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999990273349895	WITHOUT_CLASSIFICATION	9.726650105749246E-7	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999570842774214	WITHOUT_CLASSIFICATION	4.291572257861911E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999704263959205	WITHOUT_CLASSIFICATION	2.9573604079541837E-5	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999861352452014	WITHOUT_CLASSIFICATION	1.386475479853343E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999912725635399	WITHOUT_CLASSIFICATION	8.727436460180392E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999872148640231	WITHOUT_CLASSIFICATION	1.2785135976875236E-5	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.999997880525076	WITHOUT_CLASSIFICATION	2.1194749239883773E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999998469415747	WITHOUT_CLASSIFICATION	1.5305842535942856E-7	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999998469415747	WITHOUT_CLASSIFICATION	1.5305842535942856E-7	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999968631391171	WITHOUT_CLASSIFICATION	3.1368608828013526E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999993423457841	WITHOUT_CLASSIFICATION	6.576542158496553E-7	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999613185736251	WITHOUT_CLASSIFICATION	3.868142637479671E-5	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9999905560128467	WITHOUT_CLASSIFICATION	9.443987153355526E-6	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999841557908213	WITHOUT_CLASSIFICATION	1.584420917865394E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999965289575464	WITHOUT_CLASSIFICATION	3.4710424536658336E-6	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.999990645668078	WITHOUT_CLASSIFICATION	9.35433192195949E-6	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999998253327603	WITHOUT_CLASSIFICATION	1.746672397385713E-7	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999852816079046	WITHOUT_CLASSIFICATION	1.4718392095447607E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999676345103	WITHOUT_CLASSIFICATION	3.236548966700697E-8	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999999421113228	WITHOUT_CLASSIFICATION	5.7888677210228174E-8	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999998426096656	WITHOUT_CLASSIFICATION	1.5739033440696614E-7	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999942580831537	WITHOUT_CLASSIFICATION	5.741916846338455E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999980516262186	WITHOUT_CLASSIFICATION	1.948373781415237E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999991664711794	WITHOUT_CLASSIFICATION	8.335288207012826E-7	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999996881317395	WITHOUT_CLASSIFICATION	3.118682605728387E-7	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999974918190152	WITHOUT_CLASSIFICATION	2.5081809847823895E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999841938904167	WITHOUT_CLASSIFICATION	1.5806109583345793E-5	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999971501162075	WITHOUT_CLASSIFICATION	2.8498837924272922E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999975003552211	WITHOUT_CLASSIFICATION	2.4996447790272983E-6	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999996687091706	WITHOUT_CLASSIFICATION	3.3129082948224004E-7	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999773116190894	WITHOUT_CLASSIFICATION	2.2688380910488173E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999998013811312	WITHOUT_CLASSIFICATION	1.9861886885792194E-7	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999999601156015	WITHOUT_CLASSIFICATION	3.9884398334621606E-8	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999996195368716	WITHOUT_CLASSIFICATION	3.804631285043777E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999932773177165	WITHOUT_CLASSIFICATION	6.722682283634524E-6	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999858365100613	WITHOUT_CLASSIFICATION	1.4163489938623136E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999998595990185	WITHOUT_CLASSIFICATION	1.4040098140492571E-7	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999976926220311	WITHOUT_CLASSIFICATION	2.3073779690304E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999999161202298	WITHOUT_CLASSIFICATION	8.387977027671277E-8	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999919793564473	WITHOUT_CLASSIFICATION	8.020643552683154E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.999999737863449	WITHOUT_CLASSIFICATION	2.621365509456504E-7	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.999999967447308	WITHOUT_CLASSIFICATION	3.2552691954865626E-8	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999997270544813	WITHOUT_CLASSIFICATION	2.729455187226093E-7	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999935112497542	WITHOUT_CLASSIFICATION	6.488750245757726E-6	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999747847830606	WITHOUT_CLASSIFICATION	2.5215216939400368E-5	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999880187343865	WITHOUT_CLASSIFICATION	1.1981265613507445E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999743973591746	WITHOUT_CLASSIFICATION	2.5602640825401014E-5	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999999934744311	WITHOUT_CLASSIFICATION	6.525568858882296E-9	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999969246479445	WITHOUT_CLASSIFICATION	3.075352055449564E-6	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9983749454184522	WITHOUT_CLASSIFICATION	0.001625054581547917	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999999965336601	WITHOUT_CLASSIFICATION	3.466339968925434E-9	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999632183817624	WITHOUT_CLASSIFICATION	3.6781618237699884E-5	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999632183817624	WITHOUT_CLASSIFICATION	3.6781618237699884E-5	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999999059280207	WITHOUT_CLASSIFICATION	9.407197929465592E-8	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999873274906139	WITHOUT_CLASSIFICATION	1.2672509386083732E-5	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999979521928871	WITHOUT_CLASSIFICATION	2.0478071128606097E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999994352445841	WITHOUT_CLASSIFICATION	5.647554158508964E-7	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999329965094	WITHOUT_CLASSIFICATION	6.700349065751591E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999997788422299	WITHOUT_CLASSIFICATION	2.2115777004123456E-7	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999997329179986	WITHOUT_CLASSIFICATION	2.670820013937139E-7	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999765998939429	WITHOUT_CLASSIFICATION	2.340010605715244E-5	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9896356927982773	WITHOUT_CLASSIFICATION	0.010364307201722614	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999797245727605	WITHOUT_CLASSIFICATION	2.0275427239438263E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999993078141288	WITHOUT_CLASSIFICATION	6.921858712580869E-7	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999998433637854	WITHOUT_CLASSIFICATION	1.5663621465831298E-7	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999998537342221	WITHOUT_CLASSIFICATION	1.4626577789992582E-7	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999999605889234	WITHOUT_CLASSIFICATION	3.9411076606544854E-8	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999625692125	WITHOUT_CLASSIFICATION	3.743078749782533E-8	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999999520120307	WITHOUT_CLASSIFICATION	4.798796922618456E-8	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999675190321	WITHOUT_CLASSIFICATION	3.248096786523622E-8	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999993731101701	WITHOUT_CLASSIFICATION	6.268898298952961E-7	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999997998468294	WITHOUT_CLASSIFICATION	2.0015317061519313E-7	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999985145075861	WITHOUT_CLASSIFICATION	1.4854924138677085E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999998086877169	WITHOUT_CLASSIFICATION	1.913122831534794E-7	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999996364302771	WITHOUT_CLASSIFICATION	3.635697228157986E-7	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999969041033132	WITHOUT_CLASSIFICATION	3.0958966868644246E-6	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999967656401347	WITHOUT_CLASSIFICATION	3.234359865250507E-6	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999843732088	WITHOUT_CLASSIFICATION	1.5626791120888428E-8	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999271679753	WITHOUT_CLASSIFICATION	7.283202465131785E-8	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999096615618	WITHOUT_CLASSIFICATION	9.033843811406274E-8	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999998727077587	WITHOUT_CLASSIFICATION	1.27292241291217E-7	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999998744940555	WITHOUT_CLASSIFICATION	1.2550594452167808E-7	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999998101679787	WITHOUT_CLASSIFICATION	1.8983202126017408E-7	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999995718273185	WITHOUT_CLASSIFICATION	4.2817268143037605E-7	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999998975210854	WITHOUT_CLASSIFICATION	1.0247891460582547E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999914444352488	WITHOUT_CLASSIFICATION	8.555564751136678E-6	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999990018718148	WITHOUT_CLASSIFICATION	9.981281852859455E-7	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999743973591746	WITHOUT_CLASSIFICATION	2.5602640825401014E-5	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999898829112688	WITHOUT_CLASSIFICATION	1.0117088731187748E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999996994500319	WITHOUT_CLASSIFICATION	3.005499681147973E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999996994500319	WITHOUT_CLASSIFICATION	3.005499681147973E-7	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999997077587223	WITHOUT_CLASSIFICATION	2.92241277714126E-7	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999979812362575	WITHOUT_CLASSIFICATION	2.0187637425794133E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.999999320560955	WITHOUT_CLASSIFICATION	6.79439045153402E-7	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999987523937252	WITHOUT_CLASSIFICATION	1.2476062748905705E-6	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999989874109174	WITHOUT_CLASSIFICATION	1.0125890825787192E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999990988905711	WITHOUT_CLASSIFICATION	9.011094288405394E-7	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999995607876422	WITHOUT_CLASSIFICATION	4.392123577649298E-7	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.999999227899308	WITHOUT_CLASSIFICATION	7.721006920974923E-7	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999972995012362	WITHOUT_CLASSIFICATION	2.7004987638013297E-6	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999987620143851	WITHOUT_CLASSIFICATION	1.237985614916526E-6	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999976861217573	WITHOUT_CLASSIFICATION	2.313878242689557E-6	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999975490485562	WITHOUT_CLASSIFICATION	2.4509514438088577E-6	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999992565721177	WITHOUT_CLASSIFICATION	7.434278823332683E-7	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999971511309165	WITHOUT_CLASSIFICATION	2.8488690834746444E-6	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999984581210609	WITHOUT_CLASSIFICATION	1.5418789391684032E-6	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999748124347919	WITHOUT_CLASSIFICATION	2.5187565208103012E-5	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999974907202595	WITHOUT_CLASSIFICATION	2.5092797405483044E-6	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999957881235108	WITHOUT_CLASSIFICATION	4.211876489279024E-6	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999972194558243	WITHOUT_CLASSIFICATION	2.780544175672108E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999987253192312	WITHOUT_CLASSIFICATION	1.2746807687853088E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999965928617145	WITHOUT_CLASSIFICATION	3.4071382855397466E-6	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999991847050624	WITHOUT_CLASSIFICATION	8.152949376062546E-7	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999989420613683	WITHOUT_CLASSIFICATION	1.0579386316463494E-6	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999997735784082	WITHOUT_CLASSIFICATION	2.2642159185980031E-7	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.99999992154795	WITHOUT_CLASSIFICATION	7.845205006376701E-8	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999999311965565	WITHOUT_CLASSIFICATION	6.880344344507459E-8	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999988189619206	WITHOUT_CLASSIFICATION	1.1810380794635428E-6	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999930472178	WITHOUT_CLASSIFICATION	6.952782238388306E-9	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999985242038183	WITHOUT_CLASSIFICATION	1.4757961816276401E-6	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999308958906	WITHOUT_CLASSIFICATION	6.910410940682889E-8	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999999850035145	WITHOUT_CLASSIFICATION	1.4996485527042766E-8	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999994806520224	WITHOUT_CLASSIFICATION	5.1934797760555E-7	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999979974958164	WITHOUT_CLASSIFICATION	2.00250418351875E-6	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.999994863282355	WITHOUT_CLASSIFICATION	5.136717645023162E-6	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999999524368851	WITHOUT_CLASSIFICATION	4.75631148958241E-8	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999967995403447	WITHOUT_CLASSIFICATION	3.2004596553702487E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999999264477969	WITHOUT_CLASSIFICATION	7.355220315503528E-8	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999999311965565	WITHOUT_CLASSIFICATION	6.880344344507459E-8	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999988189619206	WITHOUT_CLASSIFICATION	1.1810380794635428E-6	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999930472178	WITHOUT_CLASSIFICATION	6.952782238388306E-9	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999308958906	WITHOUT_CLASSIFICATION	6.910410940682889E-8	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998081853895153	WITHOUT_CLASSIFICATION	1.9181461048477068E-4	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999989643521868	WITHOUT_CLASSIFICATION	1.0356478131928247E-6	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999820071331641	WITHOUT_CLASSIFICATION	1.7992866835891783E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999996055214758	WITHOUT_CLASSIFICATION	3.9447852419472325E-7	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999997468974612	WITHOUT_CLASSIFICATION	2.5310253886766043E-7	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999993391131069	WITHOUT_CLASSIFICATION	6.608868930861433E-7	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999999096127088	WITHOUT_CLASSIFICATION	9.038729118567024E-8	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999997393070927	WITHOUT_CLASSIFICATION	2.606929072496748E-7	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.999999096852394	WITHOUT_CLASSIFICATION	9.031476061110017E-7	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999994238372784	WITHOUT_CLASSIFICATION	5.761627217139493E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999998537817874	WITHOUT_CLASSIFICATION	1.4621821268172268E-7	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999999495750053	WITHOUT_CLASSIFICATION	5.042499470707062E-8	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999998125342684	WITHOUT_CLASSIFICATION	1.8746573159045158E-7	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.999999838577783	WITHOUT_CLASSIFICATION	1.6142221698486145E-7	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999988318195808	WITHOUT_CLASSIFICATION	1.1681804191367593E-6	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999990551114754	WITHOUT_CLASSIFICATION	9.44888524566464E-7	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.99999946953442	WITHOUT_CLASSIFICATION	5.304655800417998E-7	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999941646791027	WITHOUT_CLASSIFICATION	5.835320897362903E-6	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999996986764059	WITHOUT_CLASSIFICATION	3.013235941801653E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999999264477969	WITHOUT_CLASSIFICATION	7.355220315503528E-8	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999989643521868	WITHOUT_CLASSIFICATION	1.0356478131928247E-6	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999820071331641	WITHOUT_CLASSIFICATION	1.7992866835891783E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999997468974612	WITHOUT_CLASSIFICATION	2.5310253886766043E-7	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999993391131069	WITHOUT_CLASSIFICATION	6.608868930861433E-7	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999999096127088	WITHOUT_CLASSIFICATION	9.038729118567024E-8	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999997393070927	WITHOUT_CLASSIFICATION	2.606929072496748E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999999738969784	WITHOUT_CLASSIFICATION	2.6103021609353642E-8	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999952367978953	WITHOUT_CLASSIFICATION	4.763202104780008E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999998354170946	WITHOUT_CLASSIFICATION	1.6458290545595795E-7	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999985253404	WITHOUT_CLASSIFICATION	1.4746596244258122E-9	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999946243191653	WITHOUT_CLASSIFICATION	5.375680834741605E-6	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999946243191653	WITHOUT_CLASSIFICATION	5.375680834741605E-6	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999999775084878	WITHOUT_CLASSIFICATION	2.2491512276466145E-8	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999999885396079	WITHOUT_CLASSIFICATION	1.1460391944319666E-8	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999998754158551	WITHOUT_CLASSIFICATION	1.2458414496796116E-7	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999995176494374	WITHOUT_CLASSIFICATION	4.823505626667959E-7	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999999843214241	WITHOUT_CLASSIFICATION	1.5678575852275338E-8	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999998973683508	WITHOUT_CLASSIFICATION	1.0263164912165692E-7	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999998395833202	WITHOUT_CLASSIFICATION	1.6041667974981127E-7	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999989098031835	WITHOUT_CLASSIFICATION	1.0901968165053465E-6	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.999999874275391	WITHOUT_CLASSIFICATION	1.2572460888951576E-7	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999999887708078	WITHOUT_CLASSIFICATION	1.122919222501947E-8	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.999999855451298	WITHOUT_CLASSIFICATION	1.445487019489833E-7	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.999999855679459	WITHOUT_CLASSIFICATION	1.4432054088394292E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999902907831072	WITHOUT_CLASSIFICATION	9.709216892697095E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999996219121315	WITHOUT_CLASSIFICATION	3.780878684188134E-7	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999999937209871	WITHOUT_CLASSIFICATION	6.279012869883513E-9	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999999779020149	WITHOUT_CLASSIFICATION	2.209798502502828E-8	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999286955025	WITHOUT_CLASSIFICATION	7.13044975904643E-8	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999999878733672	WITHOUT_CLASSIFICATION	1.2126632734894174E-8	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999999479905606	WITHOUT_CLASSIFICATION	5.200943942549502E-8	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999994324861402	WITHOUT_CLASSIFICATION	5.675138596960675E-7	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9998719843015955	WITHOUT_CLASSIFICATION	1.280156984044298E-4	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999946625011086	WITHOUT_CLASSIFICATION	5.337498891401675E-6	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999995641541767	WITHOUT_CLASSIFICATION	4.358458233417972E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.999034924028924	WITHOUT_CLASSIFICATION	9.650759710759173E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998429677323	WITHOUT_CLASSIFICATION	1.5703226766728627E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999997696705334	WITHOUT_CLASSIFICATION	2.303294666110065E-7	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999986021827141	WITHOUT_CLASSIFICATION	1.3978172859574038E-6	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999997030366894	WITHOUT_CLASSIFICATION	2.969633105432513E-7	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999975733326427	WITHOUT_CLASSIFICATION	2.426667357384325E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998429677323	WITHOUT_CLASSIFICATION	1.5703226766728627E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999997696705334	WITHOUT_CLASSIFICATION	2.303294666110065E-7	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999996219121315	WITHOUT_CLASSIFICATION	3.780878684188134E-7	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999999590900188	WITHOUT_CLASSIFICATION	4.090998105395964E-8	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999987939030156	WITHOUT_CLASSIFICATION	1.2060969843561058E-6	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9997933959768198	WITHOUT_CLASSIFICATION	2.0660402318016074E-4	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.999982437674427	WITHOUT_CLASSIFICATION	1.7562325573116107E-5	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999993020969579	WITHOUT_CLASSIFICATION	6.979030421925089E-7	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999822741352772	WITHOUT_CLASSIFICATION	1.7725864722777944E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999997858906974	WITHOUT_CLASSIFICATION	2.14109302492728E-7	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999997633455405	WITHOUT_CLASSIFICATION	2.366544593882089E-7	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9999016197286382	WITHOUT_CLASSIFICATION	9.838027136185305E-5	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999968381722766	WITHOUT_CLASSIFICATION	3.16182772331846E-6	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9999415570971057	WITHOUT_CLASSIFICATION	5.844290289422479E-5	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999979057664776	WITHOUT_CLASSIFICATION	2.094233522403617E-6	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999999413973258	WITHOUT_CLASSIFICATION	5.860267418607887E-8	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999998360891084	WITHOUT_CLASSIFICATION	1.63910891714182E-7	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999990028809342	WITHOUT_CLASSIFICATION	9.97119065826763E-7	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999363504170095	WITHOUT_CLASSIFICATION	6.364958299055981E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9999991486775203	WITHOUT_CLASSIFICATION	8.513224797876794E-7	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999906414370776	WITHOUT_CLASSIFICATION	9.358562922294582E-6	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999077101249	WITHOUT_CLASSIFICATION	9.228987508442332E-8	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999988482588942	WITHOUT_CLASSIFICATION	1.1517411057495958E-6	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999886407028	WITHOUT_CLASSIFICATION	1.1359297109118973E-8	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9997656500449945	WITHOUT_CLASSIFICATION	2.3434995500542445E-4	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999950011536166	WITHOUT_CLASSIFICATION	4.998846383395842E-6	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999999190799559	WITHOUT_CLASSIFICATION	8.092004409985383E-8	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.999999937699486	WITHOUT_CLASSIFICATION	6.230051386489804E-8	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999995859891326	WITHOUT_CLASSIFICATION	4.140108672863023E-7	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999956609872126	WITHOUT_CLASSIFICATION	4.339012787384408E-6	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999820882899705	WITHOUT_CLASSIFICATION	1.7911710029419772E-5	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999974245555655	WITHOUT_CLASSIFICATION	2.57544443452948E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9999854625446178	WITHOUT_CLASSIFICATION	1.4537455382112412E-5	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999997827100053	WITHOUT_CLASSIFICATION	2.1728999471718347E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998184931059	WITHOUT_CLASSIFICATION	1.8150689402835652E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998184931059	WITHOUT_CLASSIFICATION	1.8150689402835652E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999902907831072	WITHOUT_CLASSIFICATION	9.709216892697095E-6	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999999888564893	WITHOUT_CLASSIFICATION	1.1143510668667899E-8	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999653720024629	WITHOUT_CLASSIFICATION	3.4627997537020284E-5	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999805754597068	WITHOUT_CLASSIFICATION	1.9424540293162754E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999746394270951	WITHOUT_CLASSIFICATION	2.536057290491195E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999746394270951	WITHOUT_CLASSIFICATION	2.536057290491195E-5	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999985409216243	WITHOUT_CLASSIFICATION	1.4590783756648454E-6	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999999803221515	WITHOUT_CLASSIFICATION	1.9677848541156582E-8	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999998477189116	WITHOUT_CLASSIFICATION	1.5228108842634433E-7	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999997546130786	WITHOUT_CLASSIFICATION	2.4538692142703643E-7	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999984933383975	WITHOUT_CLASSIFICATION	1.5066616025574425E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.999999940588464	WITHOUT_CLASSIFICATION	5.9411535974713374E-8	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999772344362061	WITHOUT_CLASSIFICATION	2.2765563793974932E-5	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.999999989900084	WITHOUT_CLASSIFICATION	1.009991606849377E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999960440345429	WITHOUT_CLASSIFICATION	3.9559654570806785E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999986811020096	WITHOUT_CLASSIFICATION	1.3188979902981388E-6	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999935023892064	WITHOUT_CLASSIFICATION	6.497610793603905E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999990597983044	WITHOUT_CLASSIFICATION	9.40201695711638E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999852842876132	WITHOUT_CLASSIFICATION	1.4715712386801088E-5	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999444830189851	WITHOUT_CLASSIFICATION	5.551698101491711E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999994396668289	WITHOUT_CLASSIFICATION	5.603331710067097E-7	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999996777528878	WITHOUT_CLASSIFICATION	3.22247112239322E-7	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999905025089	WITHOUT_CLASSIFICATION	9.497491139075162E-9	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999905025089	WITHOUT_CLASSIFICATION	9.497491139075162E-9	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999991274690966	WITHOUT_CLASSIFICATION	8.725309033425815E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999991274690966	WITHOUT_CLASSIFICATION	8.725309033425815E-7	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999899602677	WITHOUT_CLASSIFICATION	1.0039732240713355E-8	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999970785228747	WITHOUT_CLASSIFICATION	2.9214771253420063E-6	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999655525653328	WITHOUT_CLASSIFICATION	3.44474346672172E-5	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999999334845024	WITHOUT_CLASSIFICATION	6.651549757580172E-8	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999999068565937	WITHOUT_CLASSIFICATION	9.31434063681066E-8	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999912450374283	WITHOUT_CLASSIFICATION	8.754962571628222E-6	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999999627573576	WITHOUT_CLASSIFICATION	3.724264239313848E-8	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999990597983044	WITHOUT_CLASSIFICATION	9.40201695711638E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999852842876132	WITHOUT_CLASSIFICATION	1.4715712386801088E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999994396668289	WITHOUT_CLASSIFICATION	5.603331710067097E-7	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999997148195002	WITHOUT_CLASSIFICATION	2.8518049978028794E-7	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999895586257532	WITHOUT_CLASSIFICATION	1.0441374246857993E-5	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9999580162613759	WITHOUT_CLASSIFICATION	4.1983738623993925E-5	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.999998479833647	WITHOUT_CLASSIFICATION	1.5201663530031528E-6	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999999047577028	WITHOUT_CLASSIFICATION	9.524229705440492E-8	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999939695131876	WITHOUT_CLASSIFICATION	6.030486812363299E-6	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999998921656972	WITHOUT_CLASSIFICATION	1.0783430270678438E-7	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999998213449036	WITHOUT_CLASSIFICATION	1.7865509628530286E-7	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999996697991066	WITHOUT_CLASSIFICATION	3.302008933031348E-7	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999999842503315	WITHOUT_CLASSIFICATION	1.574966842652926E-8	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999866682483354	WITHOUT_CLASSIFICATION	1.3331751664657764E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.999974472852523	WITHOUT_CLASSIFICATION	2.5527147476938147E-5	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999914246147684	WITHOUT_CLASSIFICATION	8.575385231471428E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9996714327015312	WITHOUT_CLASSIFICATION	3.2856729846873864E-4	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9998554705998784	WITHOUT_CLASSIFICATION	1.4452940012161272E-4	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999994399868419	WITHOUT_CLASSIFICATION	5.60013158038474E-7	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9998021576215492	WITHOUT_CLASSIFICATION	1.9784237845077497E-4	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999994050870912	WITHOUT_CLASSIFICATION	5.94912908828845E-7	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999992328991748	WITHOUT_CLASSIFICATION	7.671008251350246E-7	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999999694804338	WITHOUT_CLASSIFICATION	3.051956621641339E-8	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999996083441092	WITHOUT_CLASSIFICATION	3.916558907756827E-7	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999984354022053	WITHOUT_CLASSIFICATION	1.564597794623649E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999533633357147	WITHOUT_CLASSIFICATION	4.663666428522231E-5	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999999815220884	WITHOUT_CLASSIFICATION	1.8477911543851642E-8	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999998869307616	WITHOUT_CLASSIFICATION	1.1306923848045238E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999985552162304	WITHOUT_CLASSIFICATION	1.4447837697212932E-6	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999886771549364	WITHOUT_CLASSIFICATION	1.1322845063553401E-5	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999998820311906	WITHOUT_CLASSIFICATION	1.1796880934479805E-7	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999981784367076	WITHOUT_CLASSIFICATION	1.8215632923532046E-6	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999925380708928	WITHOUT_CLASSIFICATION	7.4619291071708435E-6	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999409390083294	WITHOUT_CLASSIFICATION	5.906099167051955E-5	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999914519167107	WITHOUT_CLASSIFICATION	8.548083289265042E-6	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999998746919901	WITHOUT_CLASSIFICATION	1.2530800978742865E-7	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999998932753564	WITHOUT_CLASSIFICATION	1.067246436583463E-7	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9999927289041215	WITHOUT_CLASSIFICATION	7.271095878463842E-6	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999999108765939	WITHOUT_CLASSIFICATION	8.912340621907557E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999992402692641	WITHOUT_CLASSIFICATION	7.597307358353066E-7	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999709920148747	WITHOUT_CLASSIFICATION	2.9007985125294506E-5	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999323302824682	WITHOUT_CLASSIFICATION	6.766971753178217E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999996930679828	WITHOUT_CLASSIFICATION	3.069320172222851E-7	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999978982409179	WITHOUT_CLASSIFICATION	2.1017590821698788E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999653720024629	WITHOUT_CLASSIFICATION	3.4627997537020284E-5	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999992402692641	WITHOUT_CLASSIFICATION	7.597307358353066E-7	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.999999534930784	WITHOUT_CLASSIFICATION	4.650692160490964E-7	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999997064031054	WITHOUT_CLASSIFICATION	2.9359689456073887E-7	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999866425426016	WITHOUT_CLASSIFICATION	1.3357457398405841E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999969870521495	WITHOUT_CLASSIFICATION	3.0129478504251306E-6	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999969870521495	WITHOUT_CLASSIFICATION	3.0129478504251306E-6	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999998864135475	WITHOUT_CLASSIFICATION	1.1358645252013928E-7	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999981987760627	WITHOUT_CLASSIFICATION	1.8012239373300164E-6	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999922444684489	WITHOUT_CLASSIFICATION	7.755531551065124E-6	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999659728456	WITHOUT_CLASSIFICATION	3.4027154450874295E-8	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999996227227829	WITHOUT_CLASSIFICATION	3.772772170665508E-7	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999998542276245	WITHOUT_CLASSIFICATION	1.4577237563679024E-7	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999999481579683	WITHOUT_CLASSIFICATION	5.1842031661276486E-8	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999988766108568	WITHOUT_CLASSIFICATION	1.1233891432027708E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999982971480263	WITHOUT_CLASSIFICATION	1.7028519736888781E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999982971480263	WITHOUT_CLASSIFICATION	1.7028519736888781E-6	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999993309487698	WITHOUT_CLASSIFICATION	6.690512301546857E-7	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999767960681488	WITHOUT_CLASSIFICATION	2.320393185113631E-5	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999999996981358	WITHOUT_CLASSIFICATION	3.018642026948842E-10	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999999855092544	WITHOUT_CLASSIFICATION	1.449074565570714E-8	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999999715061781	WITHOUT_CLASSIFICATION	2.8493821921148267E-8	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999995960638146	WITHOUT_CLASSIFICATION	4.0393618530719575E-7	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999999777664934	WITHOUT_CLASSIFICATION	2.223350669547186E-8	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999956417849892	WITHOUT_CLASSIFICATION	4.3582150107452874E-6	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999998802414326	WITHOUT_CLASSIFICATION	1.1975856741470058E-7	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999903975456413	WITHOUT_CLASSIFICATION	9.602454358557831E-6	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999977477851913	WITHOUT_CLASSIFICATION	2.2522148086562635E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.999999581172989	WITHOUT_CLASSIFICATION	4.188270109425929E-7	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999998543438837	WITHOUT_CLASSIFICATION	1.456561162208181E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999993397856775	WITHOUT_CLASSIFICATION	6.602143226731976E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999993397856775	WITHOUT_CLASSIFICATION	6.602143226731976E-7	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999995168521905	WITHOUT_CLASSIFICATION	4.831478095707899E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999997393070927	WITHOUT_CLASSIFICATION	2.606929072496748E-7	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999977379560121	WITHOUT_CLASSIFICATION	2.262043987798228E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999954846221075	WITHOUT_CLASSIFICATION	4.515377892501051E-6	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.999997564560277	WITHOUT_CLASSIFICATION	2.43543972287536E-6	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999963649103472	WITHOUT_CLASSIFICATION	3.6350896528483525E-6	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999981839754752	WITHOUT_CLASSIFICATION	1.8160245247927143E-6	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999988881294583	WITHOUT_CLASSIFICATION	1.1118705416869357E-6	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999992210587835	WITHOUT_CLASSIFICATION	7.78941216469336E-7	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.999999873753782	WITHOUT_CLASSIFICATION	1.2624621798744107E-7	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9998782354361718	WITHOUT_CLASSIFICATION	1.2176456382817686E-4	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999996274454409	WITHOUT_CLASSIFICATION	3.725545591675567E-7	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999907250969914	WITHOUT_CLASSIFICATION	9.274903008648262E-6	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999993514749339	WITHOUT_CLASSIFICATION	6.485250660146435E-7	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.999999478631701	WITHOUT_CLASSIFICATION	5.213682988892617E-7	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999983854749775	WITHOUT_CLASSIFICATION	1.6145250224115664E-6	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999999890143141	WITHOUT_CLASSIFICATION	1.0985686027418934E-8	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999927287239782	WITHOUT_CLASSIFICATION	7.271276021792172E-6	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999999595777643	WITHOUT_CLASSIFICATION	4.0422235695979274E-8	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999995834529828	WITHOUT_CLASSIFICATION	4.1654701725315076E-7	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9998947620156551	WITHOUT_CLASSIFICATION	1.0523798434492066E-4	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.999999773394724	WITHOUT_CLASSIFICATION	2.2660527590738884E-7	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999952627644606	WITHOUT_CLASSIFICATION	4.73723553933898E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9999920499034028	WITHOUT_CLASSIFICATION	7.950096597147156E-6	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.9000370657853043	WITHOUT_CLASSIFICATION	0.09996293421469574	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9999996006155542	WITHOUT_CLASSIFICATION	3.993844458514766E-7	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999999918245687	WITHOUT_CLASSIFICATION	8.175431390149998E-9	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999999458092576	WITHOUT_CLASSIFICATION	5.419074235488908E-8	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999999705704317	WITHOUT_CLASSIFICATION	2.9429568438554737E-8	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9998440514138667	WITHOUT_CLASSIFICATION	1.5594858613333132E-4	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999999875180635	WITHOUT_CLASSIFICATION	1.248193654092655E-8	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999999383645352	WITHOUT_CLASSIFICATION	6.163546484565132E-8	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.999999856453634	WITHOUT_CLASSIFICATION	1.4354636607177637E-7	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999037834053	WITHOUT_CLASSIFICATION	9.621659473902561E-8	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999941612029197	WITHOUT_CLASSIFICATION	5.838797080237832E-6	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.999999992180535	WITHOUT_CLASSIFICATION	7.819464939122162E-9	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999994415533869	WITHOUT_CLASSIFICATION	5.584466131153343E-7	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999641810813177	WITHOUT_CLASSIFICATION	3.5818918682340434E-5	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999861117958916	WITHOUT_CLASSIFICATION	1.3888204108434159E-5	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999857550789045	WITHOUT_CLASSIFICATION	1.4244921095423343E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999999221263245	WITHOUT_CLASSIFICATION	7.787367548357192E-8	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999184987734886	WITHOUT_CLASSIFICATION	8.150122651137489E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999989218215956	WITHOUT_CLASSIFICATION	1.0781784044887794E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.999994105437883	WITHOUT_CLASSIFICATION	5.894562116954232E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999709564202627	WITHOUT_CLASSIFICATION	2.9043579737309028E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999988304782357	WITHOUT_CLASSIFICATION	1.1695217643523453E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999997377805419	WITHOUT_CLASSIFICATION	2.6221945814238753E-7	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999995068487064	WITHOUT_CLASSIFICATION	4.931512936586731E-7	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999995571474334	WITHOUT_CLASSIFICATION	4.4285256665227214E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998429677323	WITHOUT_CLASSIFICATION	1.5703226766728627E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998429677323	WITHOUT_CLASSIFICATION	1.5703226766728627E-7	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999999966928909	WITHOUT_CLASSIFICATION	3.307109115196433E-9	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.999962284691315	WITHOUT_CLASSIFICATION	3.7715308684980044E-5	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999981476870404	WITHOUT_CLASSIFICATION	1.8523129596442792E-6	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9344936227215956	WITHOUT_CLASSIFICATION	0.06550637727840432	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999998892031203	WITHOUT_CLASSIFICATION	1.1079687976500435E-7	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999995752750842	WITHOUT_CLASSIFICATION	4.247249159144973E-7	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999816612428668	WITHOUT_CLASSIFICATION	1.833875713321973E-5	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.999999854585275	WITHOUT_CLASSIFICATION	1.4541472503198946E-7	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999920925143875	WITHOUT_CLASSIFICATION	7.907485612471834E-6	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999982912799852	WITHOUT_CLASSIFICATION	1.708720014786897E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999996669637904	WITHOUT_CLASSIFICATION	3.330362096591061E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999996669637904	WITHOUT_CLASSIFICATION	3.330362096591061E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999996669637904	WITHOUT_CLASSIFICATION	3.330362096591061E-7	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999907662472108	WITHOUT_CLASSIFICATION	9.23375278911968E-6	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999993664942045	WITHOUT_CLASSIFICATION	6.335057954099187E-7	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.99999924106074	WITHOUT_CLASSIFICATION	7.589392599096849E-7	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999960738548918	WITHOUT_CLASSIFICATION	3.926145108182513E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999960738548918	WITHOUT_CLASSIFICATION	3.926145108182513E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999998061929549	WITHOUT_CLASSIFICATION	1.9380704513017667E-7	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999913466161364	WITHOUT_CLASSIFICATION	8.653383863536989E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999996727827959	WITHOUT_CLASSIFICATION	3.2721720402898797E-7	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999977263357782	WITHOUT_CLASSIFICATION	2.2736642217121494E-6	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999989752632767	WITHOUT_CLASSIFICATION	1.024736723296453E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999502129346604	WITHOUT_CLASSIFICATION	4.978706533962197E-5	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999999120275068	WITHOUT_CLASSIFICATION	8.797249321530863E-8	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999339577242211	WITHOUT_CLASSIFICATION	6.604227577885022E-5	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9981801842722203	WITHOUT_CLASSIFICATION	0.0018198157277797024	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999746923820289	WITHOUT_CLASSIFICATION	2.5307617971051728E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999746923820289	WITHOUT_CLASSIFICATION	2.5307617971051728E-5	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999967911975101	WITHOUT_CLASSIFICATION	3.2088024899299195E-6	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999957201210117	WITHOUT_CLASSIFICATION	4.279878988344691E-6	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999995856093011	WITHOUT_CLASSIFICATION	4.1439069882054314E-7	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999962434761585	WITHOUT_CLASSIFICATION	3.7565238415441106E-6	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999849875286853	WITHOUT_CLASSIFICATION	1.5012471314863195E-5	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999998636017955	WITHOUT_CLASSIFICATION	1.3639820452367478E-7	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999962226290666	WITHOUT_CLASSIFICATION	3.7773709332934867E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999954901590495	WITHOUT_CLASSIFICATION	4.509840950500685E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999918642904803	WITHOUT_CLASSIFICATION	8.13570951974672E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999920269265739	WITHOUT_CLASSIFICATION	7.973073426135368E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999985823534092	WITHOUT_CLASSIFICATION	1.417646590734263E-6	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999923295695575	WITHOUT_CLASSIFICATION	7.670430442472804E-6	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999932470859844	WITHOUT_CLASSIFICATION	6.752914015625958E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999946297848776	WITHOUT_CLASSIFICATION	5.3702151223549876E-6	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999440702029878	WITHOUT_CLASSIFICATION	5.592979701230504E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999994383846633	WITHOUT_CLASSIFICATION	5.616153367635915E-7	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999950045263796	WITHOUT_CLASSIFICATION	4.995473620474673E-6	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.999995195756323	WITHOUT_CLASSIFICATION	4.804243677047538E-6	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999479884161614	WITHOUT_CLASSIFICATION	5.2011583838560336E-5	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9998468831373062	WITHOUT_CLASSIFICATION	1.5311686269377594E-4	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9965908171358615	WITHOUT_CLASSIFICATION	0.0034091828641385187	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.999999682978468	WITHOUT_CLASSIFICATION	3.1702153202331677E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999950006395587	WITHOUT_CLASSIFICATION	4.999360441383628E-6	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999710073228442	WITHOUT_CLASSIFICATION	2.8992677155909965E-5	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999972145050494	WITHOUT_CLASSIFICATION	2.7854949505493364E-6	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999876589097105	WITHOUT_CLASSIFICATION	1.2341090289517707E-5	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.999999305820425	WITHOUT_CLASSIFICATION	6.941795750493267E-7	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999987063912719	WITHOUT_CLASSIFICATION	1.2936087280925257E-6	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9976261960980192	WITHOUT_CLASSIFICATION	0.00237380390198083	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.999988743421219	WITHOUT_CLASSIFICATION	1.1256578780962232E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999582881426877	WITHOUT_CLASSIFICATION	4.171185731221815E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999937288932428	WITHOUT_CLASSIFICATION	6.271106757244151E-6	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999992659251469	WITHOUT_CLASSIFICATION	7.3407485311771E-7	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999582881426877	WITHOUT_CLASSIFICATION	4.171185731221815E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.999995481172848	WITHOUT_CLASSIFICATION	4.51882715198146E-6	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999988807032031	WITHOUT_CLASSIFICATION	1.1192967969021761E-6	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.999945194978977	WITHOUT_CLASSIFICATION	5.480502102301462E-5	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999989179677273	WITHOUT_CLASSIFICATION	1.0820322726064662E-6	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.999997718068637	WITHOUT_CLASSIFICATION	2.2819313629499464E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9999645187039381	WITHOUT_CLASSIFICATION	3.548129606193819E-5	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999996176514344	WITHOUT_CLASSIFICATION	3.823485655160852E-7	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999870344534096	WITHOUT_CLASSIFICATION	1.2965546590314334E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9996917511028238	WITHOUT_CLASSIFICATION	3.0824889717614247E-4	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999753413436394	WITHOUT_CLASSIFICATION	2.46586563605867E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9998538326956959	WITHOUT_CLASSIFICATION	1.4616730430412262E-4	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999378862659751	WITHOUT_CLASSIFICATION	6.211373402492459E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9998766334574729	WITHOUT_CLASSIFICATION	1.2336654252704542E-4	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9990404358632685	WITHOUT_CLASSIFICATION	9.595641367315566E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.999979071616711	WITHOUT_CLASSIFICATION	2.0928383289097455E-5	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999934522033194	WITHOUT_CLASSIFICATION	6.547796680617944E-6	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999502837924784	WITHOUT_CLASSIFICATION	4.97162075214595E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999699263686553	WITHOUT_CLASSIFICATION	3.0073631344540268E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999996040866347	WITHOUT_CLASSIFICATION	3.959133652373794E-7	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999685920444242	WITHOUT_CLASSIFICATION	3.140795557587391E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999900553450557	WITHOUT_CLASSIFICATION	9.944654944341535E-6	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999490841883469	WITHOUT_CLASSIFICATION	5.0915811653129414E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999834862822309	WITHOUT_CLASSIFICATION	1.6513717769186222E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999958112822731	WITHOUT_CLASSIFICATION	4.188717726851233E-6	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999935719311178	WITHOUT_CLASSIFICATION	6.428068882157613E-6	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.999999212362052	WITHOUT_CLASSIFICATION	7.876379478584891E-7	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9996375583223293	WITHOUT_CLASSIFICATION	3.624416776707545E-4	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999990507603773	WITHOUT_CLASSIFICATION	9.492396227240918E-7	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999998206226037	WITHOUT_CLASSIFICATION	1.793773963195816E-7	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999997121729142	WITHOUT_CLASSIFICATION	2.878270857990038E-7	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.999996091399155	WITHOUT_CLASSIFICATION	3.908600844974336E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9979656907728217	WITHOUT_CLASSIFICATION	0.0020343092271783445	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9906362599009433	WITHOUT_CLASSIFICATION	0.0093637400990567	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999164718867263	WITHOUT_CLASSIFICATION	8.352811327366416E-5	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999958091697458	WITHOUT_CLASSIFICATION	4.190830254216076E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999989334927708	WITHOUT_CLASSIFICATION	1.0665072292325897E-6	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999976246910844	WITHOUT_CLASSIFICATION	2.375308915575367E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999117514614422	WITHOUT_CLASSIFICATION	8.824853855784222E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999997120679318	WITHOUT_CLASSIFICATION	2.8793206820336525E-7	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999996276230898	WITHOUT_CLASSIFICATION	3.723769102822989E-7	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999976223948172	WITHOUT_CLASSIFICATION	2.3776051828037765E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.999997930885259	WITHOUT_CLASSIFICATION	2.069114740954733E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999984178732407	WITHOUT_CLASSIFICATION	1.5821267593554447E-6	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999903473780758	WITHOUT_CLASSIFICATION	9.652621924235276E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999996751586522	WITHOUT_CLASSIFICATION	3.2484134775010406E-7	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999987488109506	WITHOUT_CLASSIFICATION	1.2511890492894066E-6	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.99999911797645	WITHOUT_CLASSIFICATION	8.820235500014577E-7	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999967605876949	WITHOUT_CLASSIFICATION	3.2394123050634655E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999930864168203	WITHOUT_CLASSIFICATION	6.913583179667614E-6	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999998324553431	WITHOUT_CLASSIFICATION	1.675446569783385E-7	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999930775592212	WITHOUT_CLASSIFICATION	6.922440778780076E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9997799164363772	WITHOUT_CLASSIFICATION	2.200835636228115E-4	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999919323095195	WITHOUT_CLASSIFICATION	8.067690480413327E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999930864168203	WITHOUT_CLASSIFICATION	6.913583179667614E-6	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9965503616614901	WITHOUT_CLASSIFICATION	0.003449638338509974	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9965503616614901	WITHOUT_CLASSIFICATION	0.003449638338509974	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999995547619596	WITHOUT_CLASSIFICATION	4.452380403562444E-7	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999970140159307	WITHOUT_CLASSIFICATION	2.985984069324611E-6	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.999997517700236	WITHOUT_CLASSIFICATION	2.4822997639193975E-6	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999989105570467	WITHOUT_CLASSIFICATION	1.0894429532830043E-6	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.999995325520965	WITHOUT_CLASSIFICATION	4.674479034973478E-6	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999710564648859	WITHOUT_CLASSIFICATION	2.894353511406298E-5	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999990209675066	WITHOUT_CLASSIFICATION	9.79032493441879E-7	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.7258604860010828	WITHOUT_CLASSIFICATION	0.2741395139989172	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999994865243065	WITHOUT_CLASSIFICATION	5.134756935483104E-7	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9999922368127153	WITHOUT_CLASSIFICATION	7.763187284722925E-6	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999996820228134	WITHOUT_CLASSIFICATION	3.1797718657377223E-7	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999776776674366	WITHOUT_CLASSIFICATION	2.232233256347383E-5	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9993533330041056	WITHOUT_CLASSIFICATION	6.466669958944684E-4	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.999999675396997	WITHOUT_CLASSIFICATION	3.246030030398678E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.8983498574404434	WITHOUT_CLASSIFICATION	0.1016501425595567	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9574727841251024	WITHOUT_CLASSIFICATION	0.04252721587489752	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.999998320771435	WITHOUT_CLASSIFICATION	1.6792285649594666E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999662851539028	WITHOUT_CLASSIFICATION	3.3714846097146646E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999662851539028	WITHOUT_CLASSIFICATION	3.3714846097146646E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999662851539028	WITHOUT_CLASSIFICATION	3.3714846097146646E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999662851539028	WITHOUT_CLASSIFICATION	3.3714846097146646E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999662851539028	WITHOUT_CLASSIFICATION	3.3714846097146646E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999978924975697	WITHOUT_CLASSIFICATION	2.1075024303647572E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999991633745126	WITHOUT_CLASSIFICATION	8.366254874466608E-7	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998189488847941	WITHOUT_CLASSIFICATION	1.8105111520596288E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999799031683428	WITHOUT_CLASSIFICATION	2.009683165713162E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.999847226448843	WITHOUT_CLASSIFICATION	1.5277355115687582E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999998548510527	WITHOUT_CLASSIFICATION	1.451489474032174E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999894127762189	WITHOUT_CLASSIFICATION	1.058722378109654E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999994094156596	WITHOUT_CLASSIFICATION	5.905843405152491E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999998771383701	WITHOUT_CLASSIFICATION	1.228616299437733E-7	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999984351217179	WITHOUT_CLASSIFICATION	1.5648782821493326E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999981113715072	WITHOUT_CLASSIFICATION	1.888628492844319E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999984518580913	WITHOUT_CLASSIFICATION	1.548141908600716E-6	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.999998764596336	WITHOUT_CLASSIFICATION	1.2354036639949561E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999985412012724	WITHOUT_CLASSIFICATION	1.4587987275975257E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.999998365120697	WITHOUT_CLASSIFICATION	1.6348793030659942E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999973185202659	WITHOUT_CLASSIFICATION	2.681479734031167E-6	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999982730956938	WITHOUT_CLASSIFICATION	1.7269043061560505E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999984419100687	WITHOUT_CLASSIFICATION	1.5580899312697116E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999983557592124	WITHOUT_CLASSIFICATION	1.6442407876816492E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999983249216827	WITHOUT_CLASSIFICATION	1.675078317330066E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999976720655815	WITHOUT_CLASSIFICATION	2.327934418443893E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999983143734325	WITHOUT_CLASSIFICATION	1.6856265675876716E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999962298405877	WITHOUT_CLASSIFICATION	3.77015941240635E-6	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999979773797321	WITHOUT_CLASSIFICATION	2.022620267899056E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.999996879404954	WITHOUT_CLASSIFICATION	3.120595046105265E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999986319824447	WITHOUT_CLASSIFICATION	1.3680175553125265E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999985676457988	WITHOUT_CLASSIFICATION	1.432354201172162E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999983669694443	WITHOUT_CLASSIFICATION	1.6330305556941982E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999978332854831	WITHOUT_CLASSIFICATION	2.166714516892309E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999980415019981	WITHOUT_CLASSIFICATION	1.9584980018855647E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999997426942159	WITHOUT_CLASSIFICATION	2.5730578409046963E-6	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999983496148717	WITHOUT_CLASSIFICATION	1.6503851283362418E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999983571785838	WITHOUT_CLASSIFICATION	1.642821416219669E-6	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999982053347908	WITHOUT_CLASSIFICATION	1.7946652092127838E-6	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999965065826518	WITHOUT_CLASSIFICATION	3.493417348249505E-6	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999979757844868	WITHOUT_CLASSIFICATION	2.0242155132429747E-6	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999983514342828	WITHOUT_CLASSIFICATION	1.64856571710515E-6	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999982357154467	WITHOUT_CLASSIFICATION	1.764284553427776E-6	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.999998759886301	WITHOUT_CLASSIFICATION	1.2401136988982189E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999983256855546	WITHOUT_CLASSIFICATION	1.6743144454039492E-6	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999983367072055	WITHOUT_CLASSIFICATION	1.6632927944784675E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.999998076244278	WITHOUT_CLASSIFICATION	1.9237557220104573E-6	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999972069988081	WITHOUT_CLASSIFICATION	2.7930011919446945E-6	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999983624791372	WITHOUT_CLASSIFICATION	1.6375208627308112E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999978495391215	WITHOUT_CLASSIFICATION	2.1504608784901603E-6	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999975098165237	WITHOUT_CLASSIFICATION	2.490183476317281E-6	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999976035513635	WITHOUT_CLASSIFICATION	2.3964486364776185E-6	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999988538443643	WITHOUT_CLASSIFICATION	1.1461556356781408E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999980913073379	WITHOUT_CLASSIFICATION	1.9086926621587017E-6	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999965763110045	WITHOUT_CLASSIFICATION	3.4236889954925432E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998189488847941	WITHOUT_CLASSIFICATION	1.8105111520596288E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.999997695949241	WITHOUT_CLASSIFICATION	2.30405075901935E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999982299529036	WITHOUT_CLASSIFICATION	1.7700470964897015E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999977931653723	WITHOUT_CLASSIFICATION	2.206834627744505E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999975891907159	WITHOUT_CLASSIFICATION	2.410809284155862E-6	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999976669552859	WITHOUT_CLASSIFICATION	2.3330447140970832E-6	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999977463096249	WITHOUT_CLASSIFICATION	2.253690375037021E-6	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999975596354392	WITHOUT_CLASSIFICATION	2.440364560840126E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999975282986858	WITHOUT_CLASSIFICATION	2.471701314147008E-6	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999974620278744	WITHOUT_CLASSIFICATION	2.5379721256148516E-6	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999975914224689	WITHOUT_CLASSIFICATION	2.4085775310244844E-6	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999975623235693	WITHOUT_CLASSIFICATION	2.4376764307776857E-6	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999974478158584	WITHOUT_CLASSIFICATION	2.552184141682685E-6	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999975284205266	WITHOUT_CLASSIFICATION	2.4715794733886866E-6	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999982611639475	WITHOUT_CLASSIFICATION	1.7388360524141772E-6	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999983986050819	WITHOUT_CLASSIFICATION	1.601394918079538E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999988700328708	WITHOUT_CLASSIFICATION	1.1299671291965886E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999982408304903	WITHOUT_CLASSIFICATION	1.7591695097786391E-6	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999982595803374	WITHOUT_CLASSIFICATION	1.7404196625630576E-6	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999980834733528	WITHOUT_CLASSIFICATION	1.9165266472358444E-6	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999979098711937	WITHOUT_CLASSIFICATION	2.090128806288556E-6	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999981627655751	WITHOUT_CLASSIFICATION	1.83723442492614E-6	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.999998180725323	WITHOUT_CLASSIFICATION	1.8192746771004143E-6	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999975810133005	WITHOUT_CLASSIFICATION	2.4189866994934024E-6	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999984522501851	WITHOUT_CLASSIFICATION	1.5477498149554746E-6	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999981534405874	WITHOUT_CLASSIFICATION	1.8465594126480594E-6	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999986010693863	WITHOUT_CLASSIFICATION	1.3989306137620606E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999962246451178	WITHOUT_CLASSIFICATION	3.7753548821307136E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999981819392412	WITHOUT_CLASSIFICATION	1.8180607588049288E-6	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.999999045485631	WITHOUT_CLASSIFICATION	9.545143689604294E-7	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999987194935851	WITHOUT_CLASSIFICATION	1.2805064149893394E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.999997946698624	WITHOUT_CLASSIFICATION	2.0533013760963163E-6	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999973023903812	WITHOUT_CLASSIFICATION	2.697609618824803E-6	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999976571906268	WITHOUT_CLASSIFICATION	2.342809373169382E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999973824482371	WITHOUT_CLASSIFICATION	2.61755176294217E-6	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999979860616911	WITHOUT_CLASSIFICATION	2.0139383089163016E-6	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999983142660931	WITHOUT_CLASSIFICATION	1.6857339068325137E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999983230123227	WITHOUT_CLASSIFICATION	1.6769876772717704E-6	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999981151598382	WITHOUT_CLASSIFICATION	1.8848401618400672E-6	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999980795295573	WITHOUT_CLASSIFICATION	1.920470442751803E-6	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999987247576053	WITHOUT_CLASSIFICATION	1.275242394749189E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999984550577965	WITHOUT_CLASSIFICATION	1.5449422036100703E-6	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999984269539329	WITHOUT_CLASSIFICATION	1.5730460670907561E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999967298741145	WITHOUT_CLASSIFICATION	3.2701258855768024E-6	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999978495859089	WITHOUT_CLASSIFICATION	2.1504140912045455E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999971065872769	WITHOUT_CLASSIFICATION	2.8934127231572815E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999984132376024	WITHOUT_CLASSIFICATION	1.5867623976078229E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999986911326151	WITHOUT_CLASSIFICATION	1.3088673849582472E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999984546940888	WITHOUT_CLASSIFICATION	1.5453059112155405E-6	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.999998511135933	WITHOUT_CLASSIFICATION	1.4888640670420637E-6	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999981006644926	WITHOUT_CLASSIFICATION	1.8993355075103197E-6	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999980551588334	WITHOUT_CLASSIFICATION	1.944841166538563E-6	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999982405558129	WITHOUT_CLASSIFICATION	1.759444187035061E-6	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999981325447178	WITHOUT_CLASSIFICATION	1.8674552822337317E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999986185845502	WITHOUT_CLASSIFICATION	1.381415449803574E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.999998038493634	WITHOUT_CLASSIFICATION	1.9615063659690234E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999978140921435	WITHOUT_CLASSIFICATION	2.1859078564238297E-6	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999987091958722	WITHOUT_CLASSIFICATION	1.2908041277230549E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.999998343262295	WITHOUT_CLASSIFICATION	1.6567377050053059E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999981465158019	WITHOUT_CLASSIFICATION	1.853484198199669E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999982447579773	WITHOUT_CLASSIFICATION	1.7552420227908818E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999969745479854	WITHOUT_CLASSIFICATION	3.025452014477966E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999983946153203	WITHOUT_CLASSIFICATION	1.6053846797611043E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999963863687747	WITHOUT_CLASSIFICATION	3.6136312252652286E-6	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999978600876941	WITHOUT_CLASSIFICATION	2.139912305934916E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999983322089803	WITHOUT_CLASSIFICATION	1.6677910196751825E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999982599431423	WITHOUT_CLASSIFICATION	1.7400568576710536E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.999998687895133	WITHOUT_CLASSIFICATION	1.3121048669221669E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999982690357873	WITHOUT_CLASSIFICATION	1.7309642127750928E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999982680697047	WITHOUT_CLASSIFICATION	1.7319302953019245E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.999998358184104	WITHOUT_CLASSIFICATION	1.6418158961038428E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999983643052132	WITHOUT_CLASSIFICATION	1.6356947868609433E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999982589071786	WITHOUT_CLASSIFICATION	1.7410928213498884E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999984219726598	WITHOUT_CLASSIFICATION	1.5780273402080508E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999982138983676	WITHOUT_CLASSIFICATION	1.7861016324477341E-6	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999986038402031	WITHOUT_CLASSIFICATION	1.3961597968076264E-6	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999982668238518	WITHOUT_CLASSIFICATION	1.733176148234169E-6	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999981743861697	WITHOUT_CLASSIFICATION	1.8256138303147605E-6	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999977968470619	WITHOUT_CLASSIFICATION	2.2031529380690926E-6	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999976015241414	WITHOUT_CLASSIFICATION	2.3984758584923462E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999972411396987	WITHOUT_CLASSIFICATION	2.7588603013067363E-6	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999983014942759	WITHOUT_CLASSIFICATION	1.6985057240421506E-6	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999986766901983	WITHOUT_CLASSIFICATION	1.323309801721636E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999984235413831	WITHOUT_CLASSIFICATION	1.576458616820593E-6	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999982024678744	WITHOUT_CLASSIFICATION	1.7975321255620905E-6	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.999997883027848	WITHOUT_CLASSIFICATION	2.1169721520720893E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999986173732784	WITHOUT_CLASSIFICATION	1.3826267215366635E-6	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999984144197783	WITHOUT_CLASSIFICATION	1.5855802216877508E-6	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999983504424012	WITHOUT_CLASSIFICATION	1.6495575987489948E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999967904543509	WITHOUT_CLASSIFICATION	3.20954564922497E-6	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999982767022375	WITHOUT_CLASSIFICATION	1.7232977623994224E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999985879975348	WITHOUT_CLASSIFICATION	1.412002465112296E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999984059763384	WITHOUT_CLASSIFICATION	1.594023661565066E-6	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999982077735434	WITHOUT_CLASSIFICATION	1.7922264565581206E-6	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999983846127152	WITHOUT_CLASSIFICATION	1.6153872849233608E-6	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999992613860749	WITHOUT_CLASSIFICATION	7.386139250597481E-7	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999992269297837	WITHOUT_CLASSIFICATION	7.730702162353269E-7	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999989316342887	WITHOUT_CLASSIFICATION	1.0683657112768538E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999992159865383	WITHOUT_CLASSIFICATION	7.840134618175554E-7	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999988537520607	WITHOUT_CLASSIFICATION	1.1462479393188711E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999982951166995	WITHOUT_CLASSIFICATION	1.7048833004735102E-6	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.999998909135681	WITHOUT_CLASSIFICATION	1.0908643189725778E-6	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999988370084418	WITHOUT_CLASSIFICATION	1.1629915580800334E-6	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999990429780937	WITHOUT_CLASSIFICATION	9.570219063318954E-7	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999989383619465	WITHOUT_CLASSIFICATION	1.061638053387541E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999987409959898	WITHOUT_CLASSIFICATION	1.2590040102005087E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999994721522424	WITHOUT_CLASSIFICATION	5.278477576683944E-7	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999992360171456	WITHOUT_CLASSIFICATION	7.639828543312189E-7	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999992095016635	WITHOUT_CLASSIFICATION	7.904983363589425E-7	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999991871698578	WITHOUT_CLASSIFICATION	8.128301422334293E-7	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999981622471171	WITHOUT_CLASSIFICATION	1.8377528829356247E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999989901736872	WITHOUT_CLASSIFICATION	1.0098263127939678E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999991130263193	WITHOUT_CLASSIFICATION	8.869736806454086E-7	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999994581365557	WITHOUT_CLASSIFICATION	5.418634442567227E-7	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.999999225659484	WITHOUT_CLASSIFICATION	7.743405159722533E-7	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999993921009634	WITHOUT_CLASSIFICATION	6.078990366535007E-7	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999991184157352	WITHOUT_CLASSIFICATION	8.815842649404786E-7	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999991290568601	WITHOUT_CLASSIFICATION	8.709431399901602E-7	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999988113758761	WITHOUT_CLASSIFICATION	1.188624123889275E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999990683766502	WITHOUT_CLASSIFICATION	9.316233496654961E-7	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999993142041247	WITHOUT_CLASSIFICATION	6.85795875271861E-7	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999991197858337	WITHOUT_CLASSIFICATION	8.802141664805244E-7	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999987693425174	WITHOUT_CLASSIFICATION	1.2306574825093288E-6	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999990449309483	WITHOUT_CLASSIFICATION	9.550690517099756E-7	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999992114137096	WITHOUT_CLASSIFICATION	7.885862903381406E-7	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999988675751323	WITHOUT_CLASSIFICATION	1.1324248676893263E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.999998907358671	WITHOUT_CLASSIFICATION	1.0926413289775412E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999986570494281	WITHOUT_CLASSIFICATION	1.342950571864002E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.999999067268215	WITHOUT_CLASSIFICATION	9.327317850457393E-7	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999984222602991	WITHOUT_CLASSIFICATION	1.577739700858327E-6	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999988236414759	WITHOUT_CLASSIFICATION	1.1763585242291112E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.999998961852948	WITHOUT_CLASSIFICATION	1.03814705198776E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999989838907062	WITHOUT_CLASSIFICATION	1.0161092937930797E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999990346654948	WITHOUT_CLASSIFICATION	9.65334505136018E-7	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.999998836439323	WITHOUT_CLASSIFICATION	1.1635606769803155E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999989284527762	WITHOUT_CLASSIFICATION	1.0715472238612238E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999991744274611	WITHOUT_CLASSIFICATION	8.255725388075046E-7	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999986648737464	WITHOUT_CLASSIFICATION	1.3351262535670515E-6	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999985313291606	WITHOUT_CLASSIFICATION	1.468670839404914E-6	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999985347908654	WITHOUT_CLASSIFICATION	1.4652091345901063E-6	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999986465289856	WITHOUT_CLASSIFICATION	1.353471014433379E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999986661597362	WITHOUT_CLASSIFICATION	1.3338402638912416E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999981988140156	WITHOUT_CLASSIFICATION	1.801185984350162E-6	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999984765898443	WITHOUT_CLASSIFICATION	1.523410155738046E-6	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999984488776671	WITHOUT_CLASSIFICATION	1.5511223328541541E-6	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999987319822887	WITHOUT_CLASSIFICATION	1.268017711214948E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999984681469959	WITHOUT_CLASSIFICATION	1.5318530040391612E-6	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999988941105401	WITHOUT_CLASSIFICATION	1.1058894599365432E-6	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999985922623111	WITHOUT_CLASSIFICATION	1.4077376888174027E-6	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999987241067999	WITHOUT_CLASSIFICATION	1.2758932000631682E-6	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999982394646775	WITHOUT_CLASSIFICATION	1.7605353226039128E-6	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999989496573181	WITHOUT_CLASSIFICATION	1.0503426819299145E-6	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.999998930077239	WITHOUT_CLASSIFICATION	1.0699227610832394E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999984878447027	WITHOUT_CLASSIFICATION	1.5121552973119314E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999987403834489	WITHOUT_CLASSIFICATION	1.2596165510570045E-6	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999983578023743	WITHOUT_CLASSIFICATION	1.6421976256522047E-6	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999985930457317	WITHOUT_CLASSIFICATION	1.406954268222444E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999987078510049	WITHOUT_CLASSIFICATION	1.2921489951266304E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999976782664897	WITHOUT_CLASSIFICATION	2.3217335103167483E-6	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999984124575405	WITHOUT_CLASSIFICATION	1.5875424595703596E-6	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999989279159063	WITHOUT_CLASSIFICATION	1.072084093739761E-6	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999987949332079	WITHOUT_CLASSIFICATION	1.2050667921328655E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.999998795790598	WITHOUT_CLASSIFICATION	1.2042094020083313E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999998071390256	WITHOUT_CLASSIFICATION	1.9286097440242605E-6	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.999998400988575	WITHOUT_CLASSIFICATION	1.5990114250633823E-6	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999986615067586	WITHOUT_CLASSIFICATION	1.338493241330213E-6	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999988266489144	WITHOUT_CLASSIFICATION	1.1733510855152004E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999990272453242	WITHOUT_CLASSIFICATION	9.727546758027776E-7	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999987863892534	WITHOUT_CLASSIFICATION	1.21361074655816E-6	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999985551618522	WITHOUT_CLASSIFICATION	1.4448381478603001E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999984317046553	WITHOUT_CLASSIFICATION	1.5682953447514016E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999976895551558	WITHOUT_CLASSIFICATION	2.3104448441898205E-6	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999982956782201	WITHOUT_CLASSIFICATION	1.7043217799146288E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999991183339226	WITHOUT_CLASSIFICATION	8.81666077345954E-7	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999988389708163	WITHOUT_CLASSIFICATION	1.1610291836921363E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999989224556138	WITHOUT_CLASSIFICATION	1.0775443861035014E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999982804530598	WITHOUT_CLASSIFICATION	1.719546940215758E-6	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999987726255952	WITHOUT_CLASSIFICATION	1.227374404760109E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999987633254824	WITHOUT_CLASSIFICATION	1.2366745175754443E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999974977791515	WITHOUT_CLASSIFICATION	2.5022208484806855E-6	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999991810504936	WITHOUT_CLASSIFICATION	8.189495063683798E-7	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999987250326015	WITHOUT_CLASSIFICATION	1.274967398545795E-6	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999986084309063	WITHOUT_CLASSIFICATION	1.3915690936287826E-6	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999986974845652	WITHOUT_CLASSIFICATION	1.3025154348172808E-6	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999988215181075	WITHOUT_CLASSIFICATION	1.1784818925262385E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999986815864811	WITHOUT_CLASSIFICATION	1.3184135188663278E-6	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999985689318839	WITHOUT_CLASSIFICATION	1.4310681161717795E-6	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999984895532055	WITHOUT_CLASSIFICATION	1.5104467944458674E-6	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999983691060157	WITHOUT_CLASSIFICATION	1.6308939843934615E-6	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999987705103586	WITHOUT_CLASSIFICATION	1.2294896414474054E-6	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999987261613199	WITHOUT_CLASSIFICATION	1.2738386801643162E-6	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999986411430374	WITHOUT_CLASSIFICATION	1.3588569625931168E-6	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999984345136469	WITHOUT_CLASSIFICATION	1.5654863531440933E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999985412719751	WITHOUT_CLASSIFICATION	1.4587280249102992E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999985468708854	WITHOUT_CLASSIFICATION	1.4531291146626585E-6	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999990868491742	WITHOUT_CLASSIFICATION	9.131508258604306E-7	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999988035452244	WITHOUT_CLASSIFICATION	1.1964547754931865E-6	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999982953695123	WITHOUT_CLASSIFICATION	1.7046304876176119E-6	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999982339607493	WITHOUT_CLASSIFICATION	1.7660392506310929E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999983883201371	WITHOUT_CLASSIFICATION	1.6116798627863292E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999979457378622	WITHOUT_CLASSIFICATION	2.0542621378185503E-6	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.999998677031456	WITHOUT_CLASSIFICATION	1.32296854406601E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999987734632215	WITHOUT_CLASSIFICATION	1.2265367784197671E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.999998888838919	WITHOUT_CLASSIFICATION	1.1111610810602378E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999988407913735	WITHOUT_CLASSIFICATION	1.1592086264225333E-6	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999984688772823	WITHOUT_CLASSIFICATION	1.531122717699505E-6	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999982931844356	WITHOUT_CLASSIFICATION	1.7068155644545247E-6	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999987228939872	WITHOUT_CLASSIFICATION	1.277106012872519E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999976103487851	WITHOUT_CLASSIFICATION	2.3896512148710807E-6	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999988339651359	WITHOUT_CLASSIFICATION	1.1660348641677868E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999987136065127	WITHOUT_CLASSIFICATION	1.2863934873504201E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999988072635444	WITHOUT_CLASSIFICATION	1.192736455652441E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.999998390060316	WITHOUT_CLASSIFICATION	1.6099396840559368E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999984032939178	WITHOUT_CLASSIFICATION	1.5967060822148384E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999958042245725	WITHOUT_CLASSIFICATION	4.195775427514032E-6	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999986701563132	WITHOUT_CLASSIFICATION	1.3298436868522837E-6	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999975415431915	WITHOUT_CLASSIFICATION	2.458456808483692E-6	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999981695114711	WITHOUT_CLASSIFICATION	1.8304885288264117E-6	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999986363456326	WITHOUT_CLASSIFICATION	1.3636543674097345E-6	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.999998060789628	WITHOUT_CLASSIFICATION	1.939210371887778E-6	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999985477391686	WITHOUT_CLASSIFICATION	1.4522608313281153E-6	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999969809680368	WITHOUT_CLASSIFICATION	3.0190319631053123E-6	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999980147038541	WITHOUT_CLASSIFICATION	1.9852961458515897E-6	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999985481139974	WITHOUT_CLASSIFICATION	1.451886002672085E-6	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999986358879177	WITHOUT_CLASSIFICATION	1.3641120823719813E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.999998776449378	WITHOUT_CLASSIFICATION	1.2235506220651305E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999988348736951	WITHOUT_CLASSIFICATION	1.165126304875636E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999978338059589	WITHOUT_CLASSIFICATION	2.166194041101558E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999988804037503	WITHOUT_CLASSIFICATION	1.1195962496269353E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.999282318360638	WITHOUT_CLASSIFICATION	7.176816393620412E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9998031083074614	WITHOUT_CLASSIFICATION	1.9689169253865116E-4	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999464993602117	WITHOUT_CLASSIFICATION	5.3500639788252006E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998221107761088	WITHOUT_CLASSIFICATION	1.7788922389109753E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9995808119513729	WITHOUT_CLASSIFICATION	4.191880486269804E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9998181803408374	WITHOUT_CLASSIFICATION	1.8181965916259468E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9998096851502061	WITHOUT_CLASSIFICATION	1.9031484979405792E-4	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.999987388552886	WITHOUT_CLASSIFICATION	1.2611447114043458E-5	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999423258862173	WITHOUT_CLASSIFICATION	5.7674113782700015E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999894575178578	WITHOUT_CLASSIFICATION	1.0542482142141509E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999972838264456	WITHOUT_CLASSIFICATION	2.7161735544560725E-6	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999860110147225	WITHOUT_CLASSIFICATION	1.3988985277549917E-5	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9997526487261841	WITHOUT_CLASSIFICATION	2.473512738159018E-4	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.999997937343354	WITHOUT_CLASSIFICATION	2.0626566459918586E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9996509501260259	WITHOUT_CLASSIFICATION	3.4904987397399586E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9999463291781632	WITHOUT_CLASSIFICATION	5.3670821836824064E-5	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999159168559556	WITHOUT_CLASSIFICATION	8.408314404439032E-5	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999991240731204	WITHOUT_CLASSIFICATION	8.759268794378844E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999491938909	WITHOUT_CLASSIFICATION	5.080610915051101E-8	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.999855568263889	WITHOUT_CLASSIFICATION	1.444317361109115E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999987286738179	WITHOUT_CLASSIFICATION	1.2713261821154033E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999997515424176	WITHOUT_CLASSIFICATION	2.484575824646762E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999327545369	WITHOUT_CLASSIFICATION	6.72454630643206E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999327545369	WITHOUT_CLASSIFICATION	6.72454630643206E-8	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9998470392696867	WITHOUT_CLASSIFICATION	1.5296073031335238E-4	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9998875567494884	WITHOUT_CLASSIFICATION	1.1244325051165299E-4	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999499516958756	WITHOUT_CLASSIFICATION	5.004830412446329E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999994503772206	WITHOUT_CLASSIFICATION	5.496227793863432E-7	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999963159984521	WITHOUT_CLASSIFICATION	3.684001547929933E-6	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.999989640634386	WITHOUT_CLASSIFICATION	1.0359365613950477E-5	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9997161710799585	WITHOUT_CLASSIFICATION	2.83828920041464E-4	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999929959557855	WITHOUT_CLASSIFICATION	7.00404421446503E-6	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9998635957760343	WITHOUT_CLASSIFICATION	1.3640422396555272E-4	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999926658834685	WITHOUT_CLASSIFICATION	7.334116531533496E-6	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999981671834228	WITHOUT_CLASSIFICATION	1.8328165770759635E-6	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9919178982470708	WITHOUT_CLASSIFICATION	0.00808210175292925	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999939981603971	WITHOUT_CLASSIFICATION	6.001839602771258E-6	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999941741456853	WITHOUT_CLASSIFICATION	5.825854314729389E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999954620286718	WITHOUT_CLASSIFICATION	4.53797132812622E-6	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999890861134002	WITHOUT_CLASSIFICATION	1.0913886599854531E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999821394416192	WITHOUT_CLASSIFICATION	1.7860558380850884E-5	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9999320297458346	WITHOUT_CLASSIFICATION	6.797025416540113E-5	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9998031488355225	WITHOUT_CLASSIFICATION	1.9685116447739425E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9968496557860198	WITHOUT_CLASSIFICATION	0.0031503442139800978	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.999999862718194	WITHOUT_CLASSIFICATION	1.3728180600821281E-7	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999977964246335	WITHOUT_CLASSIFICATION	2.2035753665331807E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6521829399632508	WITHOUT_CLASSIFICATION	0.34781706003674917	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999969474794927	WITHOUT_CLASSIFICATION	3.0525205072693124E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6521829399632508	WITHOUT_CLASSIFICATION	0.34781706003674917	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999880529915773	WITHOUT_CLASSIFICATION	1.194700842267816E-5	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999973257533976	WITHOUT_CLASSIFICATION	2.674246602415006E-6	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9955000514282863	WITHOUT_CLASSIFICATION	0.004499948571713564	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999890821958862	WITHOUT_CLASSIFICATION	1.0917804113777841E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999997654113847	WITHOUT_CLASSIFICATION	2.345886152989082E-7	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999992801366072	WITHOUT_CLASSIFICATION	7.198633927917287E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999992801366072	WITHOUT_CLASSIFICATION	7.198633927917287E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999992801366072	WITHOUT_CLASSIFICATION	7.198633927917287E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999988625010708	WITHOUT_CLASSIFICATION	1.1374989290471841E-6	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999834340588513	WITHOUT_CLASSIFICATION	1.6565941148796423E-5	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999999339186327	WITHOUT_CLASSIFICATION	6.608136723901338E-8	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220527510618	WITHOUT_CLASSIFICATION	7.794724893817073E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220527510618	WITHOUT_CLASSIFICATION	7.794724893817073E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220527510618	WITHOUT_CLASSIFICATION	7.794724893817073E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220527510618	WITHOUT_CLASSIFICATION	7.794724893817073E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220527510618	WITHOUT_CLASSIFICATION	7.794724893817073E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220527510618	WITHOUT_CLASSIFICATION	7.794724893817073E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999951567756961	WITHOUT_CLASSIFICATION	4.843224303898757E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999951567756961	WITHOUT_CLASSIFICATION	4.843224303898757E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999951567756961	WITHOUT_CLASSIFICATION	4.843224303898757E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999951567756961	WITHOUT_CLASSIFICATION	4.843224303898757E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999951567756961	WITHOUT_CLASSIFICATION	4.843224303898757E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999389642368346	WITHOUT_CLASSIFICATION	6.103576316544071E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999389642368346	WITHOUT_CLASSIFICATION	6.103576316544071E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999389642368346	WITHOUT_CLASSIFICATION	6.103576316544071E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999389642368346	WITHOUT_CLASSIFICATION	6.103576316544071E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999389642368346	WITHOUT_CLASSIFICATION	6.103576316544071E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997794466544218	WITHOUT_CLASSIFICATION	2.2055334557823038E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997794466544218	WITHOUT_CLASSIFICATION	2.2055334557823038E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997794466544218	WITHOUT_CLASSIFICATION	2.2055334557823038E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997794466544218	WITHOUT_CLASSIFICATION	2.2055334557823038E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997794466544218	WITHOUT_CLASSIFICATION	2.2055334557823038E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9997794466544218	WITHOUT_CLASSIFICATION	2.2055334557823038E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998370046498852	WITHOUT_CLASSIFICATION	1.6299535011478694E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998370046498852	WITHOUT_CLASSIFICATION	1.6299535011478694E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998370046498852	WITHOUT_CLASSIFICATION	1.6299535011478694E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998370046498852	WITHOUT_CLASSIFICATION	1.6299535011478694E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998370046498852	WITHOUT_CLASSIFICATION	1.6299535011478694E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997824235033508	WITHOUT_CLASSIFICATION	2.1757649664919104E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997824235033508	WITHOUT_CLASSIFICATION	2.1757649664919104E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997824235033508	WITHOUT_CLASSIFICATION	2.1757649664919104E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997824235033508	WITHOUT_CLASSIFICATION	2.1757649664919104E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997824235033508	WITHOUT_CLASSIFICATION	2.1757649664919104E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998189488847941	WITHOUT_CLASSIFICATION	1.8105111520596288E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998189488847941	WITHOUT_CLASSIFICATION	1.8105111520596288E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998189488847941	WITHOUT_CLASSIFICATION	1.8105111520596288E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998189488847941	WITHOUT_CLASSIFICATION	1.8105111520596288E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998189488847941	WITHOUT_CLASSIFICATION	1.8105111520596288E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999799031683428	WITHOUT_CLASSIFICATION	2.009683165713162E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999998548510527	WITHOUT_CLASSIFICATION	1.451489474032174E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999894127762189	WITHOUT_CLASSIFICATION	1.058722378109654E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999994094156596	WITHOUT_CLASSIFICATION	5.905843405152491E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999998771383701	WITHOUT_CLASSIFICATION	1.228616299437733E-7	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999981545980512	WITHOUT_CLASSIFICATION	1.8454019487374206E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999983249216827	WITHOUT_CLASSIFICATION	1.675078317330066E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.999996879404954	WITHOUT_CLASSIFICATION	3.120595046105265E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999978332854831	WITHOUT_CLASSIFICATION	2.166714516892309E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999980415019981	WITHOUT_CLASSIFICATION	1.9584980018855647E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999976364823507	WITHOUT_CLASSIFICATION	2.363517649149941E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999997426942159	WITHOUT_CLASSIFICATION	2.5730578409046963E-6	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999980811763494	WITHOUT_CLASSIFICATION	1.918823650719716E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999976804824862	WITHOUT_CLASSIFICATION	2.3195175137670183E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999978797257899	WITHOUT_CLASSIFICATION	2.1202742100838373E-6	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999979434791844	WITHOUT_CLASSIFICATION	2.0565208156196134E-6	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999979070214631	WITHOUT_CLASSIFICATION	2.092978536852646E-6	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999984925645793	WITHOUT_CLASSIFICATION	1.5074354206834962E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999985243727383	WITHOUT_CLASSIFICATION	1.4756272617754834E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999983491340465	WITHOUT_CLASSIFICATION	1.6508659534309886E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999969075111504	WITHOUT_CLASSIFICATION	3.092488849527139E-6	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999976974310626	WITHOUT_CLASSIFICATION	2.30256893748283E-6	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.999998105223255	WITHOUT_CLASSIFICATION	1.8947767448868985E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999981067671521	WITHOUT_CLASSIFICATION	1.8932328479639942E-6	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999980951753068	WITHOUT_CLASSIFICATION	1.9048246932602147E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999979818278967	WITHOUT_CLASSIFICATION	2.018172103288415E-6	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999982886494742	WITHOUT_CLASSIFICATION	1.7113505258696994E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999971719330959	WITHOUT_CLASSIFICATION	2.828066904063139E-6	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999984044873219	WITHOUT_CLASSIFICATION	1.595512678142899E-6	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999977653609008	WITHOUT_CLASSIFICATION	2.2346390992086676E-6	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999971250332901	WITHOUT_CLASSIFICATION	2.8749667099009325E-6	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999982300127235	WITHOUT_CLASSIFICATION	1.7699872765559052E-6	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999978017675101	WITHOUT_CLASSIFICATION	2.198232489986511E-6	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999981910814234	WITHOUT_CLASSIFICATION	1.8089185766004966E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.99999811071189	WITHOUT_CLASSIFICATION	1.889288109976316E-6	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999978691332566	WITHOUT_CLASSIFICATION	2.1308667433234835E-6	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.999998185458689	WITHOUT_CLASSIFICATION	1.8145413109447982E-6	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999981758742262	WITHOUT_CLASSIFICATION	1.8241257737046806E-6	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999982030333214	WITHOUT_CLASSIFICATION	1.796966678540172E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999984697370277	WITHOUT_CLASSIFICATION	1.5302629723247905E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999982736280342	WITHOUT_CLASSIFICATION	1.72637196575898E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999984772852708	WITHOUT_CLASSIFICATION	1.5227147292013347E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999984242703956	WITHOUT_CLASSIFICATION	1.5757296043137226E-6	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999970788490451	WITHOUT_CLASSIFICATION	2.9211509548605866E-6	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.999997008862063	WITHOUT_CLASSIFICATION	2.9911379369987823E-6	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999972939996996	WITHOUT_CLASSIFICATION	2.7060003003488817E-6	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999970411162789	WITHOUT_CLASSIFICATION	2.9588837211491166E-6	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999975464251223	WITHOUT_CLASSIFICATION	2.4535748777522473E-6	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999967735977909	WITHOUT_CLASSIFICATION	3.226402209148E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999982299529036	WITHOUT_CLASSIFICATION	1.7700470964897015E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999977931653723	WITHOUT_CLASSIFICATION	2.206834627744505E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999975891907159	WITHOUT_CLASSIFICATION	2.410809284155862E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999975282986858	WITHOUT_CLASSIFICATION	2.471701314147008E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999988700328708	WITHOUT_CLASSIFICATION	1.1299671291965886E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999962246451178	WITHOUT_CLASSIFICATION	3.7753548821307136E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999984039398241	WITHOUT_CLASSIFICATION	1.5960601758736966E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999981819392412	WITHOUT_CLASSIFICATION	1.8180607588049288E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999967298741145	WITHOUT_CLASSIFICATION	3.2701258855768024E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999971065872769	WITHOUT_CLASSIFICATION	2.8934127231572815E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999977769521494	WITHOUT_CLASSIFICATION	2.2230478506467205E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999984132376024	WITHOUT_CLASSIFICATION	1.5867623976078229E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999986911326151	WITHOUT_CLASSIFICATION	1.3088673849582472E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999977213425114	WITHOUT_CLASSIFICATION	2.2786574885048577E-6	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999978001635477	WITHOUT_CLASSIFICATION	2.1998364523261574E-6	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999962080280377	WITHOUT_CLASSIFICATION	3.7919719624004564E-6	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999974757523767	WITHOUT_CLASSIFICATION	2.524247623235081E-6	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999977457162627	WITHOUT_CLASSIFICATION	2.2542837372602627E-6	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999982792757802	WITHOUT_CLASSIFICATION	1.720724219805242E-6	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999979232834131	WITHOUT_CLASSIFICATION	2.0767165869327008E-6	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999977287074444	WITHOUT_CLASSIFICATION	2.2712925556728685E-6	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999972437473884	WITHOUT_CLASSIFICATION	2.7562526116139328E-6	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999975019934756	WITHOUT_CLASSIFICATION	2.49800652443041E-6	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999959463428513	WITHOUT_CLASSIFICATION	4.053657148713311E-6	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999976065239365	WITHOUT_CLASSIFICATION	2.393476063490983E-6	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999976080341537	WITHOUT_CLASSIFICATION	2.391965846349293E-6	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999970315402514	WITHOUT_CLASSIFICATION	2.9684597486161785E-6	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999972127468492	WITHOUT_CLASSIFICATION	2.7872531507775225E-6	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999986084844208	WITHOUT_CLASSIFICATION	1.3915155792092798E-6	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999982139999308	WITHOUT_CLASSIFICATION	1.7860000691384025E-6	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999981078101015	WITHOUT_CLASSIFICATION	1.8921898985548824E-6	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999979770123626	WITHOUT_CLASSIFICATION	2.0229876374153183E-6	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999977149106489	WITHOUT_CLASSIFICATION	2.2850893510617177E-6	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999982678955383	WITHOUT_CLASSIFICATION	1.7321044616755332E-6	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999981910658654	WITHOUT_CLASSIFICATION	1.8089341346318308E-6	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999979743572668	WITHOUT_CLASSIFICATION	2.0256427332564473E-6	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999964084061668	WITHOUT_CLASSIFICATION	3.591593833323822E-6	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999980303508748	WITHOUT_CLASSIFICATION	1.969649125221769E-6	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999981821402143	WITHOUT_CLASSIFICATION	1.81785978567146E-6	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999984345179306	WITHOUT_CLASSIFICATION	1.5654820694591627E-6	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999982704951215	WITHOUT_CLASSIFICATION	1.7295048785805918E-6	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999977239002494	WITHOUT_CLASSIFICATION	2.276099750668806E-6	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999984710212316	WITHOUT_CLASSIFICATION	1.5289787683262125E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999980290767666	WITHOUT_CLASSIFICATION	1.9709232334139297E-6	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999984380480728	WITHOUT_CLASSIFICATION	1.5619519271916169E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999986718761077	WITHOUT_CLASSIFICATION	1.3281238923792921E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999981538585094	WITHOUT_CLASSIFICATION	1.8461414905862969E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999987880249221	WITHOUT_CLASSIFICATION	1.2119750778084084E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999983961250535	WITHOUT_CLASSIFICATION	1.6038749465452291E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999969745479854	WITHOUT_CLASSIFICATION	3.025452014477966E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999977473445983	WITHOUT_CLASSIFICATION	2.2526554015417508E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999983946153203	WITHOUT_CLASSIFICATION	1.6053846797611043E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999983643052132	WITHOUT_CLASSIFICATION	1.6356947868609433E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999984219726598	WITHOUT_CLASSIFICATION	1.5780273402080508E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999972411396987	WITHOUT_CLASSIFICATION	2.7588603013067363E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999984235413831	WITHOUT_CLASSIFICATION	1.576458616820593E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999986173732784	WITHOUT_CLASSIFICATION	1.3826267215366635E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999985879975348	WITHOUT_CLASSIFICATION	1.412002465112296E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999992269297837	WITHOUT_CLASSIFICATION	7.730702162353269E-7	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999989020355992	WITHOUT_CLASSIFICATION	1.0979644008316332E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.999998021143209	WITHOUT_CLASSIFICATION	1.978856791069151E-6	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999974206577061	WITHOUT_CLASSIFICATION	2.579342293846375E-6	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.999997759903002	WITHOUT_CLASSIFICATION	2.24009699790086E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999969894105116	WITHOUT_CLASSIFICATION	3.010589488392021E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999982113308185	WITHOUT_CLASSIFICATION	1.788669181560002E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999979061280042	WITHOUT_CLASSIFICATION	2.09387199579922E-6	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999985097185062	WITHOUT_CLASSIFICATION	1.4902814937155252E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999981945403636	WITHOUT_CLASSIFICATION	1.8054596362783425E-6	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.999998171356418	WITHOUT_CLASSIFICATION	1.8286435820371033E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999981616974667	WITHOUT_CLASSIFICATION	1.8383025332877276E-6	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.999997615568694	WITHOUT_CLASSIFICATION	2.384431305893386E-6	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999984648073493	WITHOUT_CLASSIFICATION	1.535192650647368E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999984017159683	WITHOUT_CLASSIFICATION	1.598284031641026E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.999998632233581	WITHOUT_CLASSIFICATION	1.367766419003828E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.999997226721257	WITHOUT_CLASSIFICATION	2.7732787430374366E-6	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999984152635658	WITHOUT_CLASSIFICATION	1.5847364341135755E-6	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999978941346171	WITHOUT_CLASSIFICATION	2.105865382876754E-6	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999986139026783	WITHOUT_CLASSIFICATION	1.3860973217827642E-6	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999972741698928	WITHOUT_CLASSIFICATION	2.7258301071034937E-6	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999976198961664	WITHOUT_CLASSIFICATION	2.380103833660317E-6	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999985061407626	WITHOUT_CLASSIFICATION	1.4938592374122042E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999983740716237	WITHOUT_CLASSIFICATION	1.6259283762924623E-6	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999983405404481	WITHOUT_CLASSIFICATION	1.6594595518695412E-6	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999979435550513	WITHOUT_CLASSIFICATION	2.05644494862094E-6	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999977586602515	WITHOUT_CLASSIFICATION	2.241339748437283E-6	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999983664564893	WITHOUT_CLASSIFICATION	1.6335435107512674E-6	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999984338954266	WITHOUT_CLASSIFICATION	1.5661045733458087E-6	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999982742348441	WITHOUT_CLASSIFICATION	1.7257651558740852E-6	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999992452582643	WITHOUT_CLASSIFICATION	7.547417356205367E-7	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999987876443198	WITHOUT_CLASSIFICATION	1.2123556801181537E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.999998688266984	WITHOUT_CLASSIFICATION	1.3117330159544472E-6	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999990833252844	WITHOUT_CLASSIFICATION	9.1667471572967E-7	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.999999130853107	WITHOUT_CLASSIFICATION	8.691468929937369E-7	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999989756586563	WITHOUT_CLASSIFICATION	1.0243413437473433E-6	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999989331086989	WITHOUT_CLASSIFICATION	1.066891301134356E-6	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999992026750009	WITHOUT_CLASSIFICATION	7.973249990539312E-7	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999989860751268	WITHOUT_CLASSIFICATION	1.0139248731949532E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.999998911075321	WITHOUT_CLASSIFICATION	1.0889246789588813E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999990790901699	WITHOUT_CLASSIFICATION	9.209098301634637E-7	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999991184157352	WITHOUT_CLASSIFICATION	8.815842649404786E-7	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.999998623944273	WITHOUT_CLASSIFICATION	1.3760557270608456E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999993142041247	WITHOUT_CLASSIFICATION	6.85795875271861E-7	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999992114137096	WITHOUT_CLASSIFICATION	7.885862903381406E-7	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999986570494281	WITHOUT_CLASSIFICATION	1.342950571864002E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.999998836439323	WITHOUT_CLASSIFICATION	1.1635606769803155E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999989284527762	WITHOUT_CLASSIFICATION	1.0715472238612238E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999986661597362	WITHOUT_CLASSIFICATION	1.3338402638912416E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999981988140156	WITHOUT_CLASSIFICATION	1.801185984350162E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999983607427194	WITHOUT_CLASSIFICATION	1.6392572806521268E-6	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999991511199865	WITHOUT_CLASSIFICATION	8.488800134616682E-7	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.999999008999105	WITHOUT_CLASSIFICATION	9.910008950880513E-7	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999989682721966	WITHOUT_CLASSIFICATION	1.0317278034886952E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999992695641238	WITHOUT_CLASSIFICATION	7.304358761923379E-7	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999990994499391	WITHOUT_CLASSIFICATION	9.005500608234284E-7	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.99999909527841	WITHOUT_CLASSIFICATION	9.047215900829801E-7	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999990494050263	WITHOUT_CLASSIFICATION	9.505949737092679E-7	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999989847344327	WITHOUT_CLASSIFICATION	1.0152655672383857E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999989738867392	WITHOUT_CLASSIFICATION	1.0261132607467413E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999987891997019	WITHOUT_CLASSIFICATION	1.2108002981168145E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999989698985456	WITHOUT_CLASSIFICATION	1.0301014544305071E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.999999023849689	WITHOUT_CLASSIFICATION	9.761503109424282E-7	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999990199349587	WITHOUT_CLASSIFICATION	9.800650412884324E-7	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999987952874961	WITHOUT_CLASSIFICATION	1.2047125038785803E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999982126054142	WITHOUT_CLASSIFICATION	1.7873945857669934E-6	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999989412899841	WITHOUT_CLASSIFICATION	1.058710015832259E-6	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999989039340517	WITHOUT_CLASSIFICATION	1.0960659483454477E-6	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.999998165367642	WITHOUT_CLASSIFICATION	1.8346323579776324E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999991962576671	WITHOUT_CLASSIFICATION	8.037423329585375E-7	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999989724629172	WITHOUT_CLASSIFICATION	1.027537082831672E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999987147216526	WITHOUT_CLASSIFICATION	1.2852783475016268E-6	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999984681747687	WITHOUT_CLASSIFICATION	1.5318252312964563E-6	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999983542841887	WITHOUT_CLASSIFICATION	1.6457158112945058E-6	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999984535586383	WITHOUT_CLASSIFICATION	1.546441361727113E-6	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999987067425666	WITHOUT_CLASSIFICATION	1.2932574333817872E-6	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999982620919496	WITHOUT_CLASSIFICATION	1.737908050297506E-6	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999978639612075	WITHOUT_CLASSIFICATION	2.136038792503668E-6	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999985579489614	WITHOUT_CLASSIFICATION	1.4420510386352008E-6	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999989529433537	WITHOUT_CLASSIFICATION	1.0470566463354688E-6	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999986345177244	WITHOUT_CLASSIFICATION	1.3654822755725111E-6	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999986264046025	WITHOUT_CLASSIFICATION	1.3735953975085226E-6	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999985863375366	WITHOUT_CLASSIFICATION	1.4136624635098935E-6	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999981176337694	WITHOUT_CLASSIFICATION	1.8823662305817095E-6	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.999998540419178	WITHOUT_CLASSIFICATION	1.459580821974376E-6	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999983508432678	WITHOUT_CLASSIFICATION	1.64915673208776E-6	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999982301228092	WITHOUT_CLASSIFICATION	1.769877190846776E-6	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999986463384232	WITHOUT_CLASSIFICATION	1.3536615768158045E-6	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999986515267777	WITHOUT_CLASSIFICATION	1.3484732222753778E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999987078510049	WITHOUT_CLASSIFICATION	1.2921489951266304E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.999998795790598	WITHOUT_CLASSIFICATION	1.2042094020083313E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999998071390256	WITHOUT_CLASSIFICATION	1.9286097440242605E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999986636873017	WITHOUT_CLASSIFICATION	1.3363126982660983E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999976895551558	WITHOUT_CLASSIFICATION	2.3104448441898205E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999991183339226	WITHOUT_CLASSIFICATION	8.81666077345954E-7	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999987633254824	WITHOUT_CLASSIFICATION	1.2366745175754443E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999974977791515	WITHOUT_CLASSIFICATION	2.5022208484806855E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999985412719751	WITHOUT_CLASSIFICATION	1.4587280249102992E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999985468708854	WITHOUT_CLASSIFICATION	1.4531291146626585E-6	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999987274302421	WITHOUT_CLASSIFICATION	1.272569757905193E-6	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999990186140879	WITHOUT_CLASSIFICATION	9.813859121533618E-7	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999987012765992	WITHOUT_CLASSIFICATION	1.2987234008181806E-6	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999985546172675	WITHOUT_CLASSIFICATION	1.4453827324706094E-6	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999983451262392	WITHOUT_CLASSIFICATION	1.654873760855132E-6	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999985627819535	WITHOUT_CLASSIFICATION	1.437218046513951E-6	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999989081133046	WITHOUT_CLASSIFICATION	1.0918866954437832E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999978910666429	WITHOUT_CLASSIFICATION	2.108933357091966E-6	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999984297556255	WITHOUT_CLASSIFICATION	1.570244374536713E-6	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999987089038709	WITHOUT_CLASSIFICATION	1.2910961291021073E-6	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999985838215221	WITHOUT_CLASSIFICATION	1.416178477949747E-6	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999988177369326	WITHOUT_CLASSIFICATION	1.182263067453327E-6	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.999998811492179	WITHOUT_CLASSIFICATION	1.1885078211420271E-6	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999989231039302	WITHOUT_CLASSIFICATION	1.076896069838879E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999988021601278	WITHOUT_CLASSIFICATION	1.197839872221603E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.999998823799846	WITHOUT_CLASSIFICATION	1.1762001539679254E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.999998934228414	WITHOUT_CLASSIFICATION	1.0657715860652949E-6	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999989828381798	WITHOUT_CLASSIFICATION	1.0171618202690185E-6	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999987213278202	WITHOUT_CLASSIFICATION	1.2786721798138078E-6	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.999998531719259	WITHOUT_CLASSIFICATION	1.4682807410094206E-6	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999984929347423	WITHOUT_CLASSIFICATION	1.5070652577574419E-6	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.999998422218594	WITHOUT_CLASSIFICATION	1.5777814059164862E-6	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999991236366302	WITHOUT_CLASSIFICATION	8.763633697759875E-7	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999988751938598	WITHOUT_CLASSIFICATION	1.1248061401386577E-6	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999987416170151	WITHOUT_CLASSIFICATION	1.2583829849369082E-6	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999978189865434	WITHOUT_CLASSIFICATION	2.1810134565237663E-6	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999983760870573	WITHOUT_CLASSIFICATION	1.6239129427363054E-6	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999983017313839	WITHOUT_CLASSIFICATION	1.698268615998769E-6	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999988279424363	WITHOUT_CLASSIFICATION	1.1720575637040778E-6	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999987604412072	WITHOUT_CLASSIFICATION	1.2395587928101343E-6	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999988382112539	WITHOUT_CLASSIFICATION	1.1617887460470439E-6	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999987135415919	WITHOUT_CLASSIFICATION	1.2864584081697575E-6	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999986362033174	WITHOUT_CLASSIFICATION	1.3637966826694487E-6	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.999997633095209	WITHOUT_CLASSIFICATION	2.3669047911250338E-6	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999984756858064	WITHOUT_CLASSIFICATION	1.5243141935589965E-6	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999975673148986	WITHOUT_CLASSIFICATION	2.43268510132744E-6	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999986867968331	WITHOUT_CLASSIFICATION	1.3132031667912523E-6	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999986542925676	WITHOUT_CLASSIFICATION	1.3457074323719779E-6	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999986037032519	WITHOUT_CLASSIFICATION	1.396296748136642E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999983604582238	WITHOUT_CLASSIFICATION	1.639541776167114E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999983883201371	WITHOUT_CLASSIFICATION	1.6116798627863292E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999979457378622	WITHOUT_CLASSIFICATION	2.0542621378185503E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.999998390060316	WITHOUT_CLASSIFICATION	1.6099396840559368E-6	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.999998664674013	WITHOUT_CLASSIFICATION	1.335325986980362E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999958042245725	WITHOUT_CLASSIFICATION	4.195775427514032E-6	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999975415431915	WITHOUT_CLASSIFICATION	2.458456808483692E-6	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999986363456326	WITHOUT_CLASSIFICATION	1.3636543674097345E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999988348736951	WITHOUT_CLASSIFICATION	1.165126304875636E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999978338059589	WITHOUT_CLASSIFICATION	2.166194041101558E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.999998986037206	WITHOUT_CLASSIFICATION	1.0139627939145802E-6	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999992283402708	WITHOUT_CLASSIFICATION	7.71659729141133E-7	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999978909618239	WITHOUT_CLASSIFICATION	2.109038176102496E-6	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999974433949942	WITHOUT_CLASSIFICATION	2.5566050057095557E-6	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999988536067012	WITHOUT_CLASSIFICATION	1.1463932988502205E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999988023190123	WITHOUT_CLASSIFICATION	1.1976809877872654E-6	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999988539703235	WITHOUT_CLASSIFICATION	1.1460296765359292E-6	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999985607508269	WITHOUT_CLASSIFICATION	1.4392491730470716E-6	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999985536290686	WITHOUT_CLASSIFICATION	1.446370931335727E-6	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999990203360168	WITHOUT_CLASSIFICATION	9.79663983137592E-7	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999988131477328	WITHOUT_CLASSIFICATION	1.186852267263772E-6	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.99999871784861	WITHOUT_CLASSIFICATION	1.282151389962979E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999978095663329	WITHOUT_CLASSIFICATION	2.1904336670599713E-6	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999990066898325	WITHOUT_CLASSIFICATION	9.933101673925013E-7	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999986913239468	WITHOUT_CLASSIFICATION	1.3086760532551474E-6	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999969739021648	WITHOUT_CLASSIFICATION	3.0260978351763E-6	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.999998417516891	WITHOUT_CLASSIFICATION	1.5824831088877331E-6	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.99999857296705	WITHOUT_CLASSIFICATION	1.4270329500640735E-6	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999984437039721	WITHOUT_CLASSIFICATION	1.5562960280273573E-6	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.99999850556578	WITHOUT_CLASSIFICATION	1.4944342200944328E-6	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999978397916522	WITHOUT_CLASSIFICATION	2.1602083477425167E-6	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999974410400834	WITHOUT_CLASSIFICATION	2.5589599166657415E-6	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.999998465221534	WITHOUT_CLASSIFICATION	1.5347784659594258E-6	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999986259070565	WITHOUT_CLASSIFICATION	1.3740929435626211E-6	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999985587858221	WITHOUT_CLASSIFICATION	1.4412141779194773E-6	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999973287556667	WITHOUT_CLASSIFICATION	2.671244333290183E-6	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999979476472124	WITHOUT_CLASSIFICATION	2.0523527875855018E-6	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999985350760353	WITHOUT_CLASSIFICATION	1.464923964597513E-6	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.999998592412923	WITHOUT_CLASSIFICATION	1.4075870770185927E-6	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.999998625457322	WITHOUT_CLASSIFICATION	1.3745426780537018E-6	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999990077826951	WITHOUT_CLASSIFICATION	9.922173048253683E-7	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999985965828928	WITHOUT_CLASSIFICATION	1.4034171072312134E-6	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999985629587897	WITHOUT_CLASSIFICATION	1.437041210257481E-6	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.999998699948497	WITHOUT_CLASSIFICATION	1.300051502932941E-6	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999983924981379	WITHOUT_CLASSIFICATION	1.6075018620342502E-6	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999973741099026	WITHOUT_CLASSIFICATION	2.625890097390104E-6	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999983619264387	WITHOUT_CLASSIFICATION	1.6380735612791386E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999985431425361	WITHOUT_CLASSIFICATION	1.4568574638834396E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999987739980041	WITHOUT_CLASSIFICATION	1.2260019959670217E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9998181803408374	WITHOUT_CLASSIFICATION	1.8181965916259468E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9998096851502061	WITHOUT_CLASSIFICATION	1.9031484979405792E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999860110147225	WITHOUT_CLASSIFICATION	1.3988985277549917E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.999997937343354	WITHOUT_CLASSIFICATION	2.0626566459918586E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9996509501260259	WITHOUT_CLASSIFICATION	3.4904987397399586E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9999463291781632	WITHOUT_CLASSIFICATION	5.3670821836824064E-5	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999159168559556	WITHOUT_CLASSIFICATION	8.408314404439032E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998479924243295	WITHOUT_CLASSIFICATION	1.52007575670424E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999985144080921	WITHOUT_CLASSIFICATION	1.4855919079203995E-6	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999986415557578	WITHOUT_CLASSIFICATION	1.3584442421920615E-6	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999974417581166	WITHOUT_CLASSIFICATION	2.558241883409817E-6	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999987517008901	WITHOUT_CLASSIFICATION	1.2482991099199623E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999987244842516	WITHOUT_CLASSIFICATION	1.275515748347333E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999990178193292	WITHOUT_CLASSIFICATION	9.82180670837535E-7	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999978569283045	WITHOUT_CLASSIFICATION	2.1430716955321944E-6	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999983585248098	WITHOUT_CLASSIFICATION	1.641475190234366E-6	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999989663312203	WITHOUT_CLASSIFICATION	1.0336687796878578E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999986395796947	WITHOUT_CLASSIFICATION	1.360420305278738E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.999998325444817	WITHOUT_CLASSIFICATION	1.674555182981612E-6	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999985983412292	WITHOUT_CLASSIFICATION	1.4016587708718212E-6	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999972627956158	WITHOUT_CLASSIFICATION	2.7372043841321588E-6	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999984659941819	WITHOUT_CLASSIFICATION	1.534005818170232E-6	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999989092537374	WITHOUT_CLASSIFICATION	1.090746262639723E-6	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999986785727896	WITHOUT_CLASSIFICATION	1.3214272104448843E-6	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999985294494325	WITHOUT_CLASSIFICATION	1.4705505676417953E-6	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999974716159135	WITHOUT_CLASSIFICATION	2.5283840865813656E-6	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999976863655778	WITHOUT_CLASSIFICATION	2.3136344220962597E-6	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999983989079699	WITHOUT_CLASSIFICATION	1.6010920300828094E-6	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999978987195379	WITHOUT_CLASSIFICATION	2.1012804620124456E-6	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999966425069723	WITHOUT_CLASSIFICATION	3.357493027764334E-6	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999987606433659	WITHOUT_CLASSIFICATION	1.2393566341110553E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999991258798772	WITHOUT_CLASSIFICATION	8.741201228656881E-7	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999939560512986	WITHOUT_CLASSIFICATION	6.043948701435065E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9999696292402397	WITHOUT_CLASSIFICATION	3.0370759760420964E-5	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999989827677661	WITHOUT_CLASSIFICATION	1.0172322339249518E-6	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999994972246641	WITHOUT_CLASSIFICATION	5.027753359103695E-7	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9997617641187988	WITHOUT_CLASSIFICATION	2.3823588120107082E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999491938909	WITHOUT_CLASSIFICATION	5.080610915051101E-8	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.999855568263889	WITHOUT_CLASSIFICATION	1.444317361109115E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999327545369	WITHOUT_CLASSIFICATION	6.72454630643206E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999327545369	WITHOUT_CLASSIFICATION	6.72454630643206E-8	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9801709884425063	WITHOUT_CLASSIFICATION	0.019829011557493646	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999722308915833	WITHOUT_CLASSIFICATION	2.7769108416785482E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999991243857638	WITHOUT_CLASSIFICATION	8.756142362458178E-7	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999983176471817	WITHOUT_CLASSIFICATION	1.6823528182452952E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999982156009719	WITHOUT_CLASSIFICATION	1.784399028180906E-6	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999960974937742	WITHOUT_CLASSIFICATION	3.902506225871149E-6	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.999923852209425	WITHOUT_CLASSIFICATION	7.614779057498871E-5	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.999999753035231	WITHOUT_CLASSIFICATION	2.4696476905278225E-7	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999998460115772	WITHOUT_CLASSIFICATION	1.539884226730382E-7	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999999345595431	WITHOUT_CLASSIFICATION	6.544045701503239E-8	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999716479635454	WITHOUT_CLASSIFICATION	2.8352036454607E-5	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999982782434997	WITHOUT_CLASSIFICATION	1.7217565002820026E-6	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999995756595819	WITHOUT_CLASSIFICATION	4.2434041815263527E-7	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999999816532683	WITHOUT_CLASSIFICATION	1.8346731614166526E-8	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.99999862219683	WITHOUT_CLASSIFICATION	1.3778031699224614E-6	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.99999862219683	WITHOUT_CLASSIFICATION	1.3778031699224614E-6	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999452518747629	WITHOUT_CLASSIFICATION	5.474812523713461E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999959531150251	WITHOUT_CLASSIFICATION	4.046884974922521E-6	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999999452970882	WITHOUT_CLASSIFICATION	5.4702911891675E-8	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999991080343473	WITHOUT_CLASSIFICATION	8.919656527866837E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999858779515683	WITHOUT_CLASSIFICATION	1.4122048431630305E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999997025251838	WITHOUT_CLASSIFICATION	2.974748161970678E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.999999763841834	WITHOUT_CLASSIFICATION	2.361581659132358E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999997025251838	WITHOUT_CLASSIFICATION	2.974748161970678E-7	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999318715863964	WITHOUT_CLASSIFICATION	6.812841360356178E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9995875335434645	WITHOUT_CLASSIFICATION	4.124664565355037E-4	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.999923768593618	WITHOUT_CLASSIFICATION	7.623140638201781E-5	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9999394165526044	WITHOUT_CLASSIFICATION	6.058344739563354E-5	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999989244663695	WITHOUT_CLASSIFICATION	1.075533630455534E-6	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999996271167364	WITHOUT_CLASSIFICATION	3.7288326357124486E-7	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999997401517038	WITHOUT_CLASSIFICATION	2.5984829623081404E-7	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999764613975453	WITHOUT_CLASSIFICATION	2.353860245473705E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999950777776239	WITHOUT_CLASSIFICATION	4.922222376205282E-6	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9932343764959196	WITHOUT_CLASSIFICATION	0.006765623504080468	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999600621157615	WITHOUT_CLASSIFICATION	3.9937884238589895E-5	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999436911490844	WITHOUT_CLASSIFICATION	5.630885091565072E-5	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999088841285446	WITHOUT_CLASSIFICATION	9.111587145540824E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9995073015099688	WITHOUT_CLASSIFICATION	4.926984900312429E-4	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999999659382087	WITHOUT_CLASSIFICATION	3.4061791297999344E-7	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999999659382087	WITHOUT_CLASSIFICATION	3.4061791297999344E-7	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999915552067692	WITHOUT_CLASSIFICATION	8.444793230793588E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999978517928308	WITHOUT_CLASSIFICATION	2.148207169219306E-6	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999995951128574	WITHOUT_CLASSIFICATION	4.0488714262885995E-7	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.999474637069895	WITHOUT_CLASSIFICATION	5.253629301049575E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999953619310402	WITHOUT_CLASSIFICATION	4.63806895980082E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999997025251838	WITHOUT_CLASSIFICATION	2.974748161970678E-7	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999998938799781	WITHOUT_CLASSIFICATION	1.0612002188937267E-7	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999999248301532	WITHOUT_CLASSIFICATION	7.51698468019988E-8	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999926489789327	WITHOUT_CLASSIFICATION	7.351021067287097E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999998345476622	WITHOUT_CLASSIFICATION	1.6545233784430717E-7	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999999771026197	WITHOUT_CLASSIFICATION	2.289738042111692E-8	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999987444675466	WITHOUT_CLASSIFICATION	1.2555324534282655E-6	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999968305763711	WITHOUT_CLASSIFICATION	3.1694236289168736E-6	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999894717851844	WITHOUT_CLASSIFICATION	1.052821481554998E-5	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999992460659086	WITHOUT_CLASSIFICATION	7.539340912700911E-7	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999998609172812	WITHOUT_CLASSIFICATION	1.3908271875224764E-7	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999999924694809	WITHOUT_CLASSIFICATION	7.530519055439405E-9	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999999806886314	WITHOUT_CLASSIFICATION	1.9311368664822073E-8	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9999924036902532	WITHOUT_CLASSIFICATION	7.596309746728994E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999647291197	WITHOUT_CLASSIFICATION	3.5270880263275204E-8	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9999448894629122	WITHOUT_CLASSIFICATION	5.511053708779589E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999905299480856	WITHOUT_CLASSIFICATION	9.470051914461622E-6	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999996113265892	WITHOUT_CLASSIFICATION	3.8867341081687136E-7	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9999859880474286	WITHOUT_CLASSIFICATION	1.4011952571409906E-5	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999992691713124	WITHOUT_CLASSIFICATION	7.30828687608989E-7	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999993446821721	WITHOUT_CLASSIFICATION	6.55317827859953E-7	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999998856259283	WITHOUT_CLASSIFICATION	1.1437407162504664E-7	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9998019423950255	WITHOUT_CLASSIFICATION	1.9805760497442601E-4	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999999981145845	WITHOUT_CLASSIFICATION	1.8854154705733385E-9	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999980931845468	WITHOUT_CLASSIFICATION	1.9068154531886797E-6	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999981019771605	WITHOUT_CLASSIFICATION	1.8980228394897551E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999988771406209	WITHOUT_CLASSIFICATION	1.1228593791222195E-6	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999996731202401	WITHOUT_CLASSIFICATION	3.2687976000031896E-7	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999979007716354	WITHOUT_CLASSIFICATION	2.0992283644660715E-6	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9999907791918703	WITHOUT_CLASSIFICATION	9.220808129741155E-6	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999998130851295	WITHOUT_CLASSIFICATION	1.8691487039922284E-7	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999988854310581	WITHOUT_CLASSIFICATION	1.114568941808962E-6	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.999999900573424	WITHOUT_CLASSIFICATION	9.94265759252429E-8	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999999429692945	WITHOUT_CLASSIFICATION	5.703070545538492E-8	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9997080607351296	WITHOUT_CLASSIFICATION	2.919392648703853E-4	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999804233516598	WITHOUT_CLASSIFICATION	1.957664834017156E-5	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999990580799565	WITHOUT_CLASSIFICATION	9.419200435897335E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999991548335527	WITHOUT_CLASSIFICATION	8.451664473333896E-7	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999999213031544	WITHOUT_CLASSIFICATION	7.86968455233495E-8	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999979830833694	WITHOUT_CLASSIFICATION	2.01691663056E-6	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999999759701451	WITHOUT_CLASSIFICATION	2.402985483163568E-8	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998479924243295	WITHOUT_CLASSIFICATION	1.52007575670424E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999216863252633	WITHOUT_CLASSIFICATION	7.831367473668386E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.999999442316494	WITHOUT_CLASSIFICATION	5.576835059448514E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999988304782357	WITHOUT_CLASSIFICATION	1.1695217643523453E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999997377805419	WITHOUT_CLASSIFICATION	2.6221945814238753E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9995875335434645	WITHOUT_CLASSIFICATION	4.124664565355037E-4	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999525666758906	WITHOUT_CLASSIFICATION	4.743332410926847E-5	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999960639443334	WITHOUT_CLASSIFICATION	3.936055666595864E-6	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999423613035981	WITHOUT_CLASSIFICATION	5.763869640183922E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996204625017	WITHOUT_CLASSIFICATION	3.7953749828934995E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996204625017	WITHOUT_CLASSIFICATION	3.7953749828934995E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999766037829029	WITHOUT_CLASSIFICATION	2.339621709712518E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999766037829029	WITHOUT_CLASSIFICATION	2.339621709712518E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999766037829029	WITHOUT_CLASSIFICATION	2.339621709712518E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999981893358848	WITHOUT_CLASSIFICATION	1.8106641151691368E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999981893358848	WITHOUT_CLASSIFICATION	1.8106641151691368E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999934909683094	WITHOUT_CLASSIFICATION	6.5090316906634625E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999934909683094	WITHOUT_CLASSIFICATION	6.5090316906634625E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9989377791437002	WITHOUT_CLASSIFICATION	0.0010622208562997288	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9981989244393372	WITHOUT_CLASSIFICATION	0.0018010755606627767	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999997185748155	WITHOUT_CLASSIFICATION	2.814251845602553E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999997185748155	WITHOUT_CLASSIFICATION	2.814251845602553E-7	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999658729898435	WITHOUT_CLASSIFICATION	3.4127010156511686E-5	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999998521031114	WITHOUT_CLASSIFICATION	1.4789688854308357E-7	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999630756786235	WITHOUT_CLASSIFICATION	3.692432137642626E-5	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999999413967988	WITHOUT_CLASSIFICATION	5.860320117048539E-8	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999997034124483	WITHOUT_CLASSIFICATION	2.965875517340719E-7	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999995624249293	WITHOUT_CLASSIFICATION	4.375750707638895E-7	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.999999839895819	WITHOUT_CLASSIFICATION	1.6010418105521438E-7	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999982485566238	WITHOUT_CLASSIFICATION	1.751443376195391E-6	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999933795413722	WITHOUT_CLASSIFICATION	6.620458627688363E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999984339212575	WITHOUT_CLASSIFICATION	1.5660787424794705E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999996975247368	WITHOUT_CLASSIFICATION	3.0247526311766565E-7	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999994831077855	WITHOUT_CLASSIFICATION	5.168922144890792E-7	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.999928714553251	WITHOUT_CLASSIFICATION	7.128544674894698E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999709228627232	WITHOUT_CLASSIFICATION	2.90771372769331E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999996471587851	WITHOUT_CLASSIFICATION	3.5284121492618567E-7	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999413387595784	WITHOUT_CLASSIFICATION	5.866124042160192E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.999991846126613	WITHOUT_CLASSIFICATION	8.153873387036773E-6	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999971141281416	WITHOUT_CLASSIFICATION	2.8858718584085976E-6	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999969784568157	WITHOUT_CLASSIFICATION	3.021543184370219E-6	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9995417955870629	WITHOUT_CLASSIFICATION	4.5820441293712507E-4	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999972204876761	WITHOUT_CLASSIFICATION	2.7795123237800845E-6	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999953406762901	WITHOUT_CLASSIFICATION	4.6593237098790185E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999993452734218	WITHOUT_CLASSIFICATION	6.547265780761716E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999990602155929	WITHOUT_CLASSIFICATION	9.397844070845574E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999995319119521	WITHOUT_CLASSIFICATION	4.680880478555184E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999977502577929	WITHOUT_CLASSIFICATION	2.249742207114305E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999956198353935	WITHOUT_CLASSIFICATION	4.380164606534499E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999976678734454	WITHOUT_CLASSIFICATION	2.332126554688561E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999989320905587	WITHOUT_CLASSIFICATION	1.067909441358318E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999994680953695	WITHOUT_CLASSIFICATION	5.319046305406439E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999974435407776	WITHOUT_CLASSIFICATION	2.556459222366196E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996750506317	WITHOUT_CLASSIFICATION	3.249493683083031E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998381491889	WITHOUT_CLASSIFICATION	1.6185081107687635E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995840938951	WITHOUT_CLASSIFICATION	4.1590610494751824E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998381491889	WITHOUT_CLASSIFICATION	1.6185081107687635E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998381491889	WITHOUT_CLASSIFICATION	1.6185081107687635E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998381491889	WITHOUT_CLASSIFICATION	1.6185081107687635E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998381491889	WITHOUT_CLASSIFICATION	1.6185081107687635E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998381491889	WITHOUT_CLASSIFICATION	1.6185081107687635E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998381491889	WITHOUT_CLASSIFICATION	1.6185081107687635E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995840938951	WITHOUT_CLASSIFICATION	4.1590610494751824E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995840938951	WITHOUT_CLASSIFICATION	4.1590610494751824E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995840938951	WITHOUT_CLASSIFICATION	4.1590610494751824E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995840938951	WITHOUT_CLASSIFICATION	4.1590610494751824E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995840938951	WITHOUT_CLASSIFICATION	4.1590610494751824E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995840938951	WITHOUT_CLASSIFICATION	4.1590610494751824E-7	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9999881635996628	WITHOUT_CLASSIFICATION	1.1836400337300175E-5	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999953027354268	WITHOUT_CLASSIFICATION	4.697264573138632E-6	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999965871611673	WITHOUT_CLASSIFICATION	3.412838832659786E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.999985858717959	WITHOUT_CLASSIFICATION	1.4141282041032507E-5	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999996215487923	WITHOUT_CLASSIFICATION	3.7845120768916775E-7	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.999981545888448	WITHOUT_CLASSIFICATION	1.8454111551987154E-5	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999998940182346	WITHOUT_CLASSIFICATION	1.059817653136712E-7	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999995309504891	WITHOUT_CLASSIFICATION	4.690495109592061E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.999997399337944	WITHOUT_CLASSIFICATION	2.600662055949198E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999985632379268	WITHOUT_CLASSIFICATION	1.4367620731909438E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999917499053368	WITHOUT_CLASSIFICATION	8.250094663181023E-6	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999983125006799	WITHOUT_CLASSIFICATION	1.687499320073721E-6	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.999998075023288	WITHOUT_CLASSIFICATION	1.9249767120856808E-6	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999999576537698	WITHOUT_CLASSIFICATION	4.234623016675641E-8	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.999999832895543	WITHOUT_CLASSIFICATION	1.671044570925284E-7	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999991769904728	WITHOUT_CLASSIFICATION	8.230095271169363E-7	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999958840905045	WITHOUT_CLASSIFICATION	4.115909495375014E-6	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999996903476566	WITHOUT_CLASSIFICATION	3.0965234343502887E-7	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999965818727985	WITHOUT_CLASSIFICATION	3.418127201505519E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999962227116506	WITHOUT_CLASSIFICATION	3.7772883493058926E-6	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999979761073061	WITHOUT_CLASSIFICATION	2.0238926939731526E-6	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999995439264608	WITHOUT_CLASSIFICATION	4.560735391506338E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.999999763841834	WITHOUT_CLASSIFICATION	2.361581659132358E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.999645516753889	WITHOUT_CLASSIFICATION	3.5448324611099096E-4	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9998836337530294	WITHOUT_CLASSIFICATION	1.1636624697071655E-4	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999999333089407	WITHOUT_CLASSIFICATION	6.669105931445009E-8	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999999864551258	WITHOUT_CLASSIFICATION	1.3544874087480856E-8	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999668869060072	WITHOUT_CLASSIFICATION	3.311309399273E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999946043468801	WITHOUT_CLASSIFICATION	5.395653119883151E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999976172554441	WITHOUT_CLASSIFICATION	2.3827445558760256E-6	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.999998780656005	WITHOUT_CLASSIFICATION	1.219343994945106E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999991232119513	WITHOUT_CLASSIFICATION	8.767880487441763E-7	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999982993302232	WITHOUT_CLASSIFICATION	1.7006697767500194E-6	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999994169730821	WITHOUT_CLASSIFICATION	5.830269178687055E-7	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999995139681562	WITHOUT_CLASSIFICATION	4.860318437470698E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999998909486858	WITHOUT_CLASSIFICATION	1.0905131415110966E-7	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999812893947972	WITHOUT_CLASSIFICATION	1.871060520279431E-5	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999856353394057	WITHOUT_CLASSIFICATION	1.4364660594369196E-5	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999999210519159	WITHOUT_CLASSIFICATION	7.894808402205553E-8	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999977822952228	WITHOUT_CLASSIFICATION	2.2177047771603834E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999970870066792	WITHOUT_CLASSIFICATION	2.9129933208497937E-6	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999999172712621	WITHOUT_CLASSIFICATION	8.272873785720977E-8	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999998875136291	WITHOUT_CLASSIFICATION	1.1248637082625415E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999970327127288	WITHOUT_CLASSIFICATION	2.9672872711753537E-6	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999970327127288	WITHOUT_CLASSIFICATION	2.9672872711753537E-6	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999996356591802	WITHOUT_CLASSIFICATION	3.6434081983688496E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999996356591802	WITHOUT_CLASSIFICATION	3.6434081983688496E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999938793974912	WITHOUT_CLASSIFICATION	6.1206025087319446E-6	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999938793974912	WITHOUT_CLASSIFICATION	6.1206025087319446E-6	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999985356429032	WITHOUT_CLASSIFICATION	1.4643570967643235E-6	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999998487060637	WITHOUT_CLASSIFICATION	1.5129393615167693E-7	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999997605512668	WITHOUT_CLASSIFICATION	2.394487330884568E-7	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999995764216513	WITHOUT_CLASSIFICATION	4.235783487006004E-7	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999991620593891	WITHOUT_CLASSIFICATION	8.379406108593253E-7	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999817435303385	WITHOUT_CLASSIFICATION	1.8256469661453753E-5	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999998813288014	WITHOUT_CLASSIFICATION	1.1867119861356489E-7	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999933098009396	WITHOUT_CLASSIFICATION	6.690199060396506E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999998099218425	WITHOUT_CLASSIFICATION	1.9007815760042571E-7	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999877252014115	WITHOUT_CLASSIFICATION	1.2274798588461796E-5	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999855304829799	WITHOUT_CLASSIFICATION	1.4469517019991801E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999803631298182	WITHOUT_CLASSIFICATION	1.963687018181221E-5	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.999995363197881	WITHOUT_CLASSIFICATION	4.636802119068831E-6	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9998998123668943	WITHOUT_CLASSIFICATION	1.0018763310567023E-4	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.999902284250435	WITHOUT_CLASSIFICATION	9.771574956506762E-5	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999983561645746	WITHOUT_CLASSIFICATION	1.6438354255532833E-6	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999976309464047	WITHOUT_CLASSIFICATION	2.3690535952307015E-6	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999213059320056	WITHOUT_CLASSIFICATION	7.869406799440976E-5	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999992680123442	WITHOUT_CLASSIFICATION	7.319876557916609E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999944101155986	WITHOUT_CLASSIFICATION	5.5898844013104445E-6	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999965929246784	WITHOUT_CLASSIFICATION	3.407075321653042E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999459434919885	WITHOUT_CLASSIFICATION	5.4056508011476045E-5	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999966024001533	WITHOUT_CLASSIFICATION	3.397599846774645E-6	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999896571523991	WITHOUT_CLASSIFICATION	1.0342847600900184E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.999998541869856	WITHOUT_CLASSIFICATION	1.4581301439937431E-6	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999841232710742	WITHOUT_CLASSIFICATION	1.5876728925730182E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999952189218867	WITHOUT_CLASSIFICATION	4.781078113346585E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999981515560814	WITHOUT_CLASSIFICATION	1.8484439186424315E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999981515560814	WITHOUT_CLASSIFICATION	1.8484439186424315E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999981515560814	WITHOUT_CLASSIFICATION	1.8484439186424315E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999984013917254	WITHOUT_CLASSIFICATION	1.5986082747238015E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999984013917254	WITHOUT_CLASSIFICATION	1.5986082747238015E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999647291197	WITHOUT_CLASSIFICATION	3.5270880263275204E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999647291197	WITHOUT_CLASSIFICATION	3.5270880263275204E-8	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999999517001773	WITHOUT_CLASSIFICATION	4.8299822657554984E-8	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9996328429990261	WITHOUT_CLASSIFICATION	3.6715700097382644E-4	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999999542049545	WITHOUT_CLASSIFICATION	4.579504550031138E-8	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999993776495205	WITHOUT_CLASSIFICATION	6.223504795613683E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999981515560814	WITHOUT_CLASSIFICATION	1.8484439186424315E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999981515560814	WITHOUT_CLASSIFICATION	1.8484439186424315E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999981515560814	WITHOUT_CLASSIFICATION	1.8484439186424315E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999984013917254	WITHOUT_CLASSIFICATION	1.5986082747238015E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999984013917254	WITHOUT_CLASSIFICATION	1.5986082747238015E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999984013917254	WITHOUT_CLASSIFICATION	1.5986082747238015E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999647291197	WITHOUT_CLASSIFICATION	3.5270880263275204E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999647291197	WITHOUT_CLASSIFICATION	3.5270880263275204E-8	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999996278806651	WITHOUT_CLASSIFICATION	3.7211933496011814E-7	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.99999956761697	WITHOUT_CLASSIFICATION	4.323830300191092E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999994361998807	WITHOUT_CLASSIFICATION	5.638001193669623E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999994361998807	WITHOUT_CLASSIFICATION	5.638001193669623E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999994361998807	WITHOUT_CLASSIFICATION	5.638001193669623E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999994361998807	WITHOUT_CLASSIFICATION	5.638001193669623E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999994361998807	WITHOUT_CLASSIFICATION	5.638001193669623E-7	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999998231815911	WITHOUT_CLASSIFICATION	1.768184088798976E-7	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999992036934463	WITHOUT_CLASSIFICATION	7.963065536182514E-7	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9994906588390245	WITHOUT_CLASSIFICATION	5.093411609755102E-4	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999988503217303	WITHOUT_CLASSIFICATION	1.1496782697432776E-6	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999996167611096	WITHOUT_CLASSIFICATION	3.832388903954618E-7	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999955955253946	WITHOUT_CLASSIFICATION	4.4044746053597315E-6	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999568054486955	WITHOUT_CLASSIFICATION	4.319455130461866E-5	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999883241738212	WITHOUT_CLASSIFICATION	1.167582617873578E-5	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999998612613747	WITHOUT_CLASSIFICATION	1.3873862518597098E-7	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999836821155386	WITHOUT_CLASSIFICATION	1.631788446141703E-5	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999088473129909	WITHOUT_CLASSIFICATION	9.115268700909479E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999979300728848	WITHOUT_CLASSIFICATION	2.06992711516269E-6	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9999984947713441	WITHOUT_CLASSIFICATION	1.5052286560217914E-6	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.999993981051265	WITHOUT_CLASSIFICATION	6.0189487349770636E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999839623166713	WITHOUT_CLASSIFICATION	1.60376833286823E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999967553086238	WITHOUT_CLASSIFICATION	3.2446913760969646E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999967553086238	WITHOUT_CLASSIFICATION	3.2446913760969646E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999967553086238	WITHOUT_CLASSIFICATION	3.2446913760969646E-6	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.999962629609333	WITHOUT_CLASSIFICATION	3.7370390666962176E-5	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999626499681354	WITHOUT_CLASSIFICATION	3.735003186452452E-5	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999987999381723	WITHOUT_CLASSIFICATION	1.2000618276820168E-6	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999992556774988	WITHOUT_CLASSIFICATION	7.443225013053671E-7	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999980458134174	WITHOUT_CLASSIFICATION	1.95418658250426E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999993902771722	WITHOUT_CLASSIFICATION	6.097228277407326E-7	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999997360143024	WITHOUT_CLASSIFICATION	2.63985697616108E-7	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999999688913407	WITHOUT_CLASSIFICATION	3.110865926403353E-8	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999998527456831	WITHOUT_CLASSIFICATION	1.4725431693534488E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999998431381399	WITHOUT_CLASSIFICATION	1.5686186004198312E-7	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999999057154536	WITHOUT_CLASSIFICATION	9.428454632736232E-8	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999999903079293	WITHOUT_CLASSIFICATION	9.692070670590264E-9	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999995009307201	WITHOUT_CLASSIFICATION	4.99069279979629E-7	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999857780425	WITHOUT_CLASSIFICATION	1.422195739149572E-8	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999999941452555	WITHOUT_CLASSIFICATION	5.854744506908457E-9	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999981956251691	WITHOUT_CLASSIFICATION	1.8043748308712083E-6	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999991891852753	WITHOUT_CLASSIFICATION	8.108147246414437E-7	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999999542614625	WITHOUT_CLASSIFICATION	4.573853763138435E-8	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999994673645051	WITHOUT_CLASSIFICATION	5.326354949286468E-7	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.999995519914413	WITHOUT_CLASSIFICATION	4.480085586956487E-6	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9999391484430151	WITHOUT_CLASSIFICATION	6.0851556984827344E-5	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999979923976586	WITHOUT_CLASSIFICATION	2.0076023413078545E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9999982919334369	WITHOUT_CLASSIFICATION	1.7080665630072552E-6	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999995144247295	WITHOUT_CLASSIFICATION	4.85575270520785E-7	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999995077171592	WITHOUT_CLASSIFICATION	4.92282840729611E-7	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999990319065302	WITHOUT_CLASSIFICATION	9.68093469834547E-7	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999997011845658	WITHOUT_CLASSIFICATION	2.988154341787031E-7	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999992023545421	WITHOUT_CLASSIFICATION	7.97645457963582E-7	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999906287499595	WITHOUT_CLASSIFICATION	9.371250040504226E-6	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999735321349263	WITHOUT_CLASSIFICATION	2.6467865073649476E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.999923733939687	WITHOUT_CLASSIFICATION	7.626606031290856E-5	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999564220742494	WITHOUT_CLASSIFICATION	4.3577925750700646E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9999617537722045	WITHOUT_CLASSIFICATION	3.8246227795503326E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999403713783555	WITHOUT_CLASSIFICATION	5.962862164458792E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9999536782214059	WITHOUT_CLASSIFICATION	4.6321778594136625E-5	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9999572706383942	WITHOUT_CLASSIFICATION	4.2729361605632147E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999999401924566	WITHOUT_CLASSIFICATION	5.980754342335577E-8	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999996800017632	WITHOUT_CLASSIFICATION	3.1999823679244576E-7	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999512061647	WITHOUT_CLASSIFICATION	4.879383540203652E-8	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9995665208997119	WITHOUT_CLASSIFICATION	4.33479100288092E-4	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9991488102733246	WITHOUT_CLASSIFICATION	8.511897266753385E-4	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9841351543699309	WITHOUT_CLASSIFICATION	0.015864845630069107	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.999994818054842	WITHOUT_CLASSIFICATION	5.181945157960768E-6	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999905599629724	WITHOUT_CLASSIFICATION	9.4400370276667E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999935204817564	WITHOUT_CLASSIFICATION	6.479518243630799E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.999864030077821	WITHOUT_CLASSIFICATION	1.3596992217902512E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999836194770215	WITHOUT_CLASSIFICATION	1.6380522978443235E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999836194770215	WITHOUT_CLASSIFICATION	1.6380522978443235E-5	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999996858270104	WITHOUT_CLASSIFICATION	3.141729896096364E-7	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.999997735453517	WITHOUT_CLASSIFICATION	2.2645464830489765E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9998213584075787	WITHOUT_CLASSIFICATION	1.786415924213295E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999818973654706	WITHOUT_CLASSIFICATION	1.8102634529392717E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999856335461362	WITHOUT_CLASSIFICATION	1.436645386383066E-5	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999980374288575	WITHOUT_CLASSIFICATION	1.962571142530842E-6	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999999140604725	WITHOUT_CLASSIFICATION	8.593952747441413E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999976983799322	WITHOUT_CLASSIFICATION	2.3016200676952906E-6	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999998235326918	WITHOUT_CLASSIFICATION	1.7646730821645222E-7	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999982852145479	WITHOUT_CLASSIFICATION	1.714785451995167E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999998831194766	WITHOUT_CLASSIFICATION	1.1688052336807554E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999998831194766	WITHOUT_CLASSIFICATION	1.1688052336807554E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999998831194766	WITHOUT_CLASSIFICATION	1.1688052336807554E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999998831194766	WITHOUT_CLASSIFICATION	1.1688052336807554E-7	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999972834173052	WITHOUT_CLASSIFICATION	2.7165826948006415E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999985223568503	WITHOUT_CLASSIFICATION	1.4776431496808396E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.999998016883145	WITHOUT_CLASSIFICATION	1.983116855022283E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999981987759861	WITHOUT_CLASSIFICATION	1.8012240140289932E-6	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9999421832738364	WITHOUT_CLASSIFICATION	5.7816726163566395E-5	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.999807403310561	WITHOUT_CLASSIFICATION	1.9259668943913492E-4	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9998961921722196	WITHOUT_CLASSIFICATION	1.038078277804037E-4	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999924048931911	WITHOUT_CLASSIFICATION	7.595106808986469E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999924048931911	WITHOUT_CLASSIFICATION	7.595106808986469E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999856135927829	WITHOUT_CLASSIFICATION	1.438640721712795E-5	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999984749404991	WITHOUT_CLASSIFICATION	1.5250595008582757E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999807547175	WITHOUT_CLASSIFICATION	1.924528251333172E-8	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9986123973501526	WITHOUT_CLASSIFICATION	0.001387602649847382	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9986123973501526	WITHOUT_CLASSIFICATION	0.001387602649847382	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9970929821340714	WITHOUT_CLASSIFICATION	0.002907017865928685	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999951175369807	WITHOUT_CLASSIFICATION	4.882463019301592E-6	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999951175369807	WITHOUT_CLASSIFICATION	4.882463019301592E-6	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9704756209558617	WITHOUT_CLASSIFICATION	0.02952437904413837	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999990590185253	WITHOUT_CLASSIFICATION	9.409814747840547E-7	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9998273564314041	WITHOUT_CLASSIFICATION	1.726435685958667E-4	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9968467301906594	WITHOUT_CLASSIFICATION	0.0031532698093406026	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999456891918294	WITHOUT_CLASSIFICATION	5.43108081705431E-5	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999997215856617	WITHOUT_CLASSIFICATION	2.784143382543312E-7	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9999488237372764	WITHOUT_CLASSIFICATION	5.1176262723456996E-5	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999971968309962	WITHOUT_CLASSIFICATION	2.8031690038217677E-6	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999991646752514	WITHOUT_CLASSIFICATION	8.353247485027264E-7	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999992773418336	WITHOUT_CLASSIFICATION	7.226581663961042E-7	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999992587592871	WITHOUT_CLASSIFICATION	7.412407128218007E-7	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.999999863563289	WITHOUT_CLASSIFICATION	1.3643671108038928E-7	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.999942183919722	WITHOUT_CLASSIFICATION	5.7816080277991845E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.999916010707441	WITHOUT_CLASSIFICATION	8.398929255904256E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999960953390915	WITHOUT_CLASSIFICATION	3.9046609084332355E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999498859767805	WITHOUT_CLASSIFICATION	5.011402321950661E-5	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.999994612441381	WITHOUT_CLASSIFICATION	5.387558619023723E-6	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999998861762699	WITHOUT_CLASSIFICATION	1.1382373011955275E-7	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999992412230152	WITHOUT_CLASSIFICATION	7.58776984834177E-7	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9995913374538162	WITHOUT_CLASSIFICATION	4.08662546183705E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9991282330027242	WITHOUT_CLASSIFICATION	8.717669972758462E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999992519817956	WITHOUT_CLASSIFICATION	7.48018204372072E-7	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999990728368652	WITHOUT_CLASSIFICATION	9.271631347019748E-7	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.999864780202772	WITHOUT_CLASSIFICATION	1.3521979722788395E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9998763091057837	WITHOUT_CLASSIFICATION	1.2369089421623085E-4	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.999853763733414	WITHOUT_CLASSIFICATION	1.4623626658603317E-4	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999999464001491	WITHOUT_CLASSIFICATION	5.3599850942594995E-8	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.99999958111074	WITHOUT_CLASSIFICATION	4.188892598543638E-7	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999996400162953	WITHOUT_CLASSIFICATION	3.599837047052784E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999988911415916	WITHOUT_CLASSIFICATION	1.1088584084832535E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999898467393781	WITHOUT_CLASSIFICATION	1.0153260622012606E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999984484813076	WITHOUT_CLASSIFICATION	1.5515186923599487E-6	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.8245424152167851	DEFECT	0.17545758478321485	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999720074098233	WITHOUT_CLASSIFICATION	2.799259017673995E-5	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999868415783573	WITHOUT_CLASSIFICATION	1.3158421642677289E-5	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999757959822098	WITHOUT_CLASSIFICATION	2.4204017790207998E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999906164989999	WITHOUT_CLASSIFICATION	9.383501000134135E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999996723882953	WITHOUT_CLASSIFICATION	3.276117046049268E-7	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999994842145359	WITHOUT_CLASSIFICATION	5.157854640418298E-7	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999757959822098	WITHOUT_CLASSIFICATION	2.4204017790207998E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999906164989999	WITHOUT_CLASSIFICATION	9.383501000134135E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999966692808939	WITHOUT_CLASSIFICATION	3.3307191060051353E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999963828101266	WITHOUT_CLASSIFICATION	3.617189873400677E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999963828101266	WITHOUT_CLASSIFICATION	3.617189873400677E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.999995703252834	WITHOUT_CLASSIFICATION	4.296747165977072E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9998551126499551	WITHOUT_CLASSIFICATION	1.4488735004485675E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999854235027887	WITHOUT_CLASSIFICATION	1.4576497211197694E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999928175270296	WITHOUT_CLASSIFICATION	7.18247297046867E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.999987269939543	WITHOUT_CLASSIFICATION	1.2730060456956847E-5	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.998281631013489	WITHOUT_CLASSIFICATION	0.0017183689865110311	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.999998474018746	WITHOUT_CLASSIFICATION	1.52598125394916E-6	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999996617857431	WITHOUT_CLASSIFICATION	3.382142568244675E-7	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999998247351359	WITHOUT_CLASSIFICATION	1.752648639915652E-7	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999898558119219	WITHOUT_CLASSIFICATION	1.0144188078065107E-5	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999989791755919	WITHOUT_CLASSIFICATION	1.020824408074902E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999997083968218	WITHOUT_CLASSIFICATION	2.916031781612533E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999484605529397	WITHOUT_CLASSIFICATION	5.153944706034206E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999998207405705	WITHOUT_CLASSIFICATION	1.7925942958022643E-7	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999998207405705	WITHOUT_CLASSIFICATION	1.7925942958022643E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999959820141372	WITHOUT_CLASSIFICATION	4.0179858628116135E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999959820141372	WITHOUT_CLASSIFICATION	4.0179858628116135E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999997804993165	WITHOUT_CLASSIFICATION	2.195006834934996E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999998758856364	WITHOUT_CLASSIFICATION	1.2411436354713886E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999992102817088	WITHOUT_CLASSIFICATION	7.897182911723604E-7	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999971706617881	WITHOUT_CLASSIFICATION	2.829338211985443E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999943637948702	WITHOUT_CLASSIFICATION	5.6362051298082556E-6	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999991708629369	WITHOUT_CLASSIFICATION	8.291370629940117E-7	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999854235027887	WITHOUT_CLASSIFICATION	1.4576497211197694E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999928175270296	WITHOUT_CLASSIFICATION	7.18247297046867E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999998247351359	WITHOUT_CLASSIFICATION	1.752648639915652E-7	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999898558119219	WITHOUT_CLASSIFICATION	1.0144188078065107E-5	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999968842016727	WITHOUT_CLASSIFICATION	3.115798327316791E-6	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999997053707057	WITHOUT_CLASSIFICATION	2.946292942622962E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999848030643403	WITHOUT_CLASSIFICATION	1.5196935659639966E-5	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999995357749253	WITHOUT_CLASSIFICATION	4.6422507463867655E-7	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999996911498481	WITHOUT_CLASSIFICATION	3.088501519040602E-7	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999988295728205	WITHOUT_CLASSIFICATION	1.1704271794972112E-6	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.999319093796767	WITHOUT_CLASSIFICATION	6.809062032330534E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999948493990035	WITHOUT_CLASSIFICATION	5.1506009965733575E-6	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999998664215926	WITHOUT_CLASSIFICATION	1.3357840742801147E-7	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999994208416757	WITHOUT_CLASSIFICATION	5.791583242925551E-7	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9998298374178873	WITHOUT_CLASSIFICATION	1.70162582112682E-4	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999987137152315	WITHOUT_CLASSIFICATION	1.2862847685339572E-6	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.999999867255037	WITHOUT_CLASSIFICATION	1.3274496310295592E-7	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999936550527522	WITHOUT_CLASSIFICATION	6.3449472479120774E-6	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.999437605492188	WITHOUT_CLASSIFICATION	5.623945078121164E-4	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999937447167279	WITHOUT_CLASSIFICATION	6.2552832721562415E-6	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999929621146243	WITHOUT_CLASSIFICATION	7.037885375784552E-6	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.999992775653869	WITHOUT_CLASSIFICATION	7.224346131016013E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999996780671868	WITHOUT_CLASSIFICATION	3.219328132804102E-7	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999982097756777	WITHOUT_CLASSIFICATION	1.7902243223403907E-6	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999973778681868	WITHOUT_CLASSIFICATION	2.6221318132507945E-6	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999973778681868	WITHOUT_CLASSIFICATION	2.6221318132507945E-6	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999036669356962	WITHOUT_CLASSIFICATION	9.633306430368594E-5	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999980036913481	WITHOUT_CLASSIFICATION	1.9963086518497278E-6	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9792536966744004	WITHOUT_CLASSIFICATION	0.02074630332559955	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999988191380483	WITHOUT_CLASSIFICATION	1.1808619516490974E-6	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999988191380483	WITHOUT_CLASSIFICATION	1.1808619516490974E-6	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999848030643403	WITHOUT_CLASSIFICATION	1.5196935659639966E-5	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999952571844052	WITHOUT_CLASSIFICATION	4.742815594796242E-6	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999984274789597	WITHOUT_CLASSIFICATION	1.572521040308842E-6	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999981736870598	WITHOUT_CLASSIFICATION	1.826312940174703E-6	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999980387347316	WITHOUT_CLASSIFICATION	1.9612652684344614E-6	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999993769105446	WITHOUT_CLASSIFICATION	6.230894552734495E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999564762675858	WITHOUT_CLASSIFICATION	4.352373241423353E-5	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999995896320959	WITHOUT_CLASSIFICATION	4.103679041060071E-7	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999995421821118	WITHOUT_CLASSIFICATION	4.57817888182893E-7	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999998010552036	WITHOUT_CLASSIFICATION	1.989447964003343E-7	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999225265906829	WITHOUT_CLASSIFICATION	7.74734093170808E-5	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999367756565581	WITHOUT_CLASSIFICATION	6.322434344188815E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999530908533175	WITHOUT_CLASSIFICATION	4.6909146682553556E-5	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999991662863554	WITHOUT_CLASSIFICATION	8.337136445919072E-7	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999896848288368	WITHOUT_CLASSIFICATION	1.031517116321385E-5	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999982622355388	WITHOUT_CLASSIFICATION	1.7377644611342857E-6	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999988014931073	WITHOUT_CLASSIFICATION	1.1985068927779435E-6	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999984689009196	WITHOUT_CLASSIFICATION	1.5310990803261732E-6	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999992702035398	WITHOUT_CLASSIFICATION	7.297964601429136E-7	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999981129890257	WITHOUT_CLASSIFICATION	1.8870109741413974E-6	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999519618861998	WITHOUT_CLASSIFICATION	4.803811380022939E-5	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999965589106018	WITHOUT_CLASSIFICATION	3.4410893981266596E-6	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999650988104122	WITHOUT_CLASSIFICATION	3.49011895879209E-5	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999913707884878	WITHOUT_CLASSIFICATION	8.629211512211335E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999725671994	WITHOUT_CLASSIFICATION	2.743280063661421E-8	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999991637587601	WITHOUT_CLASSIFICATION	8.362412398334877E-7	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999994627028082	WITHOUT_CLASSIFICATION	5.372971918977461E-7	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999998414640782	WITHOUT_CLASSIFICATION	1.585359217931234E-7	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999922213193506	WITHOUT_CLASSIFICATION	7.778680649349065E-6	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999686616160784	WITHOUT_CLASSIFICATION	3.133838392156283E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998830787059	WITHOUT_CLASSIFICATION	1.169212940326533E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998830787059	WITHOUT_CLASSIFICATION	1.169212940326533E-7	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999998543751257	WITHOUT_CLASSIFICATION	1.456248742893923E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999360396767	WITHOUT_CLASSIFICATION	6.396032328925401E-8	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999360396767	WITHOUT_CLASSIFICATION	6.396032328925401E-8	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999583419041908	WITHOUT_CLASSIFICATION	4.165809580935149E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999583419041908	WITHOUT_CLASSIFICATION	4.165809580935149E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999983841845838	WITHOUT_CLASSIFICATION	1.6158154162502248E-6	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999998751587603	WITHOUT_CLASSIFICATION	1.2484123961763643E-7	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999935861531485	WITHOUT_CLASSIFICATION	6.41384685150369E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999963346421773	WITHOUT_CLASSIFICATION	3.6653578227384295E-6	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.999999888628201	WITHOUT_CLASSIFICATION	1.1137179907916472E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978691244379	WITHOUT_CLASSIFICATION	2.130875562124908E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978691244379	WITHOUT_CLASSIFICATION	2.130875562124908E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999725671994	WITHOUT_CLASSIFICATION	2.743280063661421E-8	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999725671994	WITHOUT_CLASSIFICATION	2.743280063661421E-8	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999725671994	WITHOUT_CLASSIFICATION	2.743280063661421E-8	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999991637587601	WITHOUT_CLASSIFICATION	8.362412398334877E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998830787059	WITHOUT_CLASSIFICATION	1.169212940326533E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998830787059	WITHOUT_CLASSIFICATION	1.169212940326533E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998830787059	WITHOUT_CLASSIFICATION	1.169212940326533E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999983841845838	WITHOUT_CLASSIFICATION	1.6158154162502248E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999983841845838	WITHOUT_CLASSIFICATION	1.6158154162502248E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999983841845838	WITHOUT_CLASSIFICATION	1.6158154162502248E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999963346421773	WITHOUT_CLASSIFICATION	3.6653578227384295E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999963346421773	WITHOUT_CLASSIFICATION	3.6653578227384295E-6	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999892379436397	WITHOUT_CLASSIFICATION	1.0762056360225871E-5	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999880344055009	WITHOUT_CLASSIFICATION	1.1965594499086596E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999984692658453	WITHOUT_CLASSIFICATION	1.5307341547369782E-6	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.6441056329510053	WITHOUT_CLASSIFICATION	0.3558943670489947	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999989322148604	WITHOUT_CLASSIFICATION	1.0677851396842177E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999950883107196	WITHOUT_CLASSIFICATION	4.911689280385658E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999950883107196	WITHOUT_CLASSIFICATION	4.911689280385658E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999995603688014	WITHOUT_CLASSIFICATION	4.3963119846967546E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999564762675858	WITHOUT_CLASSIFICATION	4.352373241423353E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999564762675858	WITHOUT_CLASSIFICATION	4.352373241423353E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999564762675858	WITHOUT_CLASSIFICATION	4.352373241423353E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999564762675858	WITHOUT_CLASSIFICATION	4.352373241423353E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999564762675858	WITHOUT_CLASSIFICATION	4.352373241423353E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998343132048	WITHOUT_CLASSIFICATION	1.656867951618274E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998343132048	WITHOUT_CLASSIFICATION	1.656867951618274E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998343132048	WITHOUT_CLASSIFICATION	1.656867951618274E-7	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999999802570371	WITHOUT_CLASSIFICATION	1.9742962877610785E-8	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999996380434185	WITHOUT_CLASSIFICATION	3.6195658146408536E-7	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999991637587601	WITHOUT_CLASSIFICATION	8.362412398334877E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999983841845838	WITHOUT_CLASSIFICATION	1.6158154162502248E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999983841845838	WITHOUT_CLASSIFICATION	1.6158154162502248E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999564762675858	WITHOUT_CLASSIFICATION	4.352373241423353E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999564762675858	WITHOUT_CLASSIFICATION	4.352373241423353E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998343132048	WITHOUT_CLASSIFICATION	1.656867951618274E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999995603688014	WITHOUT_CLASSIFICATION	4.3963119846967546E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9997237254877436	WITHOUT_CLASSIFICATION	2.762745122563449E-4	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999994782987853	WITHOUT_CLASSIFICATION	5.217012146199059E-7	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999819483354444	WITHOUT_CLASSIFICATION	1.805166455567159E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999995000938258	WITHOUT_CLASSIFICATION	4.999061742410612E-7	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999996900490978	WITHOUT_CLASSIFICATION	3.0995090212104057E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999999201171951	WITHOUT_CLASSIFICATION	7.988280487949541E-8	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998228943756788	WITHOUT_CLASSIFICATION	1.7710562432116214E-4	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.999998972227729	WITHOUT_CLASSIFICATION	1.0277722709235445E-6	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999999312256713	WITHOUT_CLASSIFICATION	6.877432867218852E-8	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999998475645505	WITHOUT_CLASSIFICATION	1.5243544950891147E-7	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999753869442098	WITHOUT_CLASSIFICATION	2.46130557901055E-5	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999989052561971	WITHOUT_CLASSIFICATION	1.094743802887898E-6	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999783585147728	WITHOUT_CLASSIFICATION	2.1641485227274557E-5	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999705728375126	WITHOUT_CLASSIFICATION	2.9427162487347655E-5	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999996511709346	WITHOUT_CLASSIFICATION	3.4882906542163477E-7	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.99995260958471	WITHOUT_CLASSIFICATION	4.739041528997153E-5	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999999036702836	WITHOUT_CLASSIFICATION	9.632971637545646E-8	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999988611727323	WITHOUT_CLASSIFICATION	1.1388272677348135E-6	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999346694416967	WITHOUT_CLASSIFICATION	6.533055830332062E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999996894975882	WITHOUT_CLASSIFICATION	3.105024118333882E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9998773726564129	WITHOUT_CLASSIFICATION	1.2262734358711938E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999973778100932	WITHOUT_CLASSIFICATION	2.6221899068466633E-6	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999664351763	WITHOUT_CLASSIFICATION	3.35648236197959E-8	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999987361212661	WITHOUT_CLASSIFICATION	1.2638787339288618E-6	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999738636175067	WITHOUT_CLASSIFICATION	2.6136382493234485E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9987224685535521	WITHOUT_CLASSIFICATION	0.0012775314464478613	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999995135768451	WITHOUT_CLASSIFICATION	4.864231549420943E-7	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.999999187507164	WITHOUT_CLASSIFICATION	8.124928359322918E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999933261186034	WITHOUT_CLASSIFICATION	6.673881396700095E-6	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999830029350348	WITHOUT_CLASSIFICATION	1.6997064965219514E-5	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999999956799963	WITHOUT_CLASSIFICATION	4.320003654580338E-9	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999996882019996	WITHOUT_CLASSIFICATION	3.1179800034020636E-7	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999714014687382	WITHOUT_CLASSIFICATION	2.8598531261869955E-5	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999918259419492	WITHOUT_CLASSIFICATION	8.17405805082088E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9997237254877436	WITHOUT_CLASSIFICATION	2.762745122563449E-4	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999999474323469	WITHOUT_CLASSIFICATION	5.2567653034980876E-8	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999998216567694	WITHOUT_CLASSIFICATION	1.7834323068853237E-7	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.999999498752015	WITHOUT_CLASSIFICATION	5.012479849801416E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999994785424499	WITHOUT_CLASSIFICATION	5.214575500573719E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999994785424499	WITHOUT_CLASSIFICATION	5.214575500573719E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.999999251499129	WITHOUT_CLASSIFICATION	7.485008709078056E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.999999251499129	WITHOUT_CLASSIFICATION	7.485008709078056E-7	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999998631375662	WITHOUT_CLASSIFICATION	1.3686243385454886E-7	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9963609001438121	WITHOUT_CLASSIFICATION	0.0036390998561878275	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999820470872912	WITHOUT_CLASSIFICATION	1.7952912708714058E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.999992744879406	WITHOUT_CLASSIFICATION	7.255120593889435E-6	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999999170258541	WITHOUT_CLASSIFICATION	8.297414590921154E-8	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999981443708728	WITHOUT_CLASSIFICATION	1.8556291273015375E-6	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999725161935463	WITHOUT_CLASSIFICATION	2.748380645362278E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999933285275356	WITHOUT_CLASSIFICATION	6.671472464386674E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999875898542591	WITHOUT_CLASSIFICATION	1.2410145740948186E-5	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999464735638555	WITHOUT_CLASSIFICATION	5.3526436144674096E-5	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999956212359892	WITHOUT_CLASSIFICATION	4.3787640108040985E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999848349773623	WITHOUT_CLASSIFICATION	1.5165022637554122E-5	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999848349773623	WITHOUT_CLASSIFICATION	1.5165022637554122E-5	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.999962816283091	WITHOUT_CLASSIFICATION	3.718371690894391E-5	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999859286534107	WITHOUT_CLASSIFICATION	1.4071346589275203E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999990342197963	WITHOUT_CLASSIFICATION	9.657802037374762E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999990342197963	WITHOUT_CLASSIFICATION	9.657802037374762E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999426647107578	WITHOUT_CLASSIFICATION	5.733528924236886E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999986306184251	WITHOUT_CLASSIFICATION	1.3693815749131422E-6	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999992446097637	WITHOUT_CLASSIFICATION	7.553902363565556E-7	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999946969077543	WITHOUT_CLASSIFICATION	5.303092245620807E-6	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999995181778498	WITHOUT_CLASSIFICATION	4.818221502385612E-7	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999992647445063	WITHOUT_CLASSIFICATION	7.352554938284502E-7	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999997288837977	WITHOUT_CLASSIFICATION	2.7111620223764393E-7	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999992895626367	WITHOUT_CLASSIFICATION	7.104373633204588E-7	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9999935247404425	WITHOUT_CLASSIFICATION	6.475259557506689E-6	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999993493661959	WITHOUT_CLASSIFICATION	6.506338041166107E-7	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999998877698975	WITHOUT_CLASSIFICATION	1.12230102580943E-7	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999918624391171	WITHOUT_CLASSIFICATION	8.13756088291444E-6	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999964102029861	WITHOUT_CLASSIFICATION	3.5897970139071596E-6	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999988048770132	WITHOUT_CLASSIFICATION	1.1951229867881023E-6	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999998044654066	WITHOUT_CLASSIFICATION	1.9553459336274481E-7	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9996012874869699	WITHOUT_CLASSIFICATION	3.987125130301183E-4	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999929605554433	WITHOUT_CLASSIFICATION	7.039444556736728E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999933561536177	WITHOUT_CLASSIFICATION	6.643846382311771E-6	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999996645832826	WITHOUT_CLASSIFICATION	3.3541671732733464E-7	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999008539187316	WITHOUT_CLASSIFICATION	9.914608126836715E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9818561296211915	WITHOUT_CLASSIFICATION	0.01814387037880858	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999929458793908	WITHOUT_CLASSIFICATION	7.054120609148052E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999929405428494	WITHOUT_CLASSIFICATION	7.059457150586242E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999982633613538	WITHOUT_CLASSIFICATION	1.7366386461140534E-6	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999995568074478	WITHOUT_CLASSIFICATION	4.4319255219033633E-7	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999948432053245	WITHOUT_CLASSIFICATION	5.1567946755828135E-6	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999990929184678	WITHOUT_CLASSIFICATION	9.070815322980356E-7	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.999999232254125	WITHOUT_CLASSIFICATION	7.677458750057456E-7	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999981044508367	WITHOUT_CLASSIFICATION	1.8955491633446592E-6	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999999668776713	WITHOUT_CLASSIFICATION	3.312232873158848E-8	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999965870407134	WITHOUT_CLASSIFICATION	3.4129592866822517E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999995375400877	WITHOUT_CLASSIFICATION	4.624599122202373E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.999998374687103	WITHOUT_CLASSIFICATION	1.625312897136986E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999987138481293	WITHOUT_CLASSIFICATION	1.2861518706117466E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999987138481293	WITHOUT_CLASSIFICATION	1.2861518706117466E-6	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999989110490344	WITHOUT_CLASSIFICATION	1.0889509656029068E-6	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999989838044683	WITHOUT_CLASSIFICATION	1.0161955317651402E-6	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999997638684478	WITHOUT_CLASSIFICATION	2.3613155221483437E-7	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999934251325268	WITHOUT_CLASSIFICATION	6.574867473253479E-6	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999936450759845	WITHOUT_CLASSIFICATION	6.354924015500427E-6	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999998795145473	WITHOUT_CLASSIFICATION	1.2048545269643299E-7	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9997226374045337	WITHOUT_CLASSIFICATION	2.773625954662697E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9987362136399125	WITHOUT_CLASSIFICATION	0.0012637863600875002	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9999408007038456	WITHOUT_CLASSIFICATION	5.919929615450247E-5	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999920689134286	WITHOUT_CLASSIFICATION	7.931086571433367E-6	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999995633797882	WITHOUT_CLASSIFICATION	4.366202117586589E-7	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9974810014343027	WITHOUT_CLASSIFICATION	0.0025189985656972292	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999997629011024	WITHOUT_CLASSIFICATION	2.370988975905388E-7	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9989644971575083	WITHOUT_CLASSIFICATION	0.0010355028424916585	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999996267808059	WITHOUT_CLASSIFICATION	3.7321919404464524E-7	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999997627377437	WITHOUT_CLASSIFICATION	2.3726225631881635E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999980614329504	WITHOUT_CLASSIFICATION	1.9385670496058926E-6	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999973206358359	WITHOUT_CLASSIFICATION	2.6793641640219464E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999976430487185	WITHOUT_CLASSIFICATION	2.3569512814793226E-6	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999778261318506	WITHOUT_CLASSIFICATION	2.2173868149395572E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999779588019814	WITHOUT_CLASSIFICATION	2.2041198018717947E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999995841732133	WITHOUT_CLASSIFICATION	4.1582678676885766E-7	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999467530790813	WITHOUT_CLASSIFICATION	5.3246920918702256E-5	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.999996573475063	WITHOUT_CLASSIFICATION	3.4265249370648093E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999625202404431	WITHOUT_CLASSIFICATION	3.747975955696913E-5	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999999927553186	WITHOUT_CLASSIFICATION	7.244681293991444E-9	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999999329071865	WITHOUT_CLASSIFICATION	6.70928136074954E-8	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999986576367619	WITHOUT_CLASSIFICATION	1.3423632380767E-6	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9998213706013657	WITHOUT_CLASSIFICATION	1.7862939863429972E-4	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9939627333592543	WITHOUT_CLASSIFICATION	0.006037266640745724	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9996891381186653	WITHOUT_CLASSIFICATION	3.108618813346303E-4	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999998238666957	WITHOUT_CLASSIFICATION	1.761333042045868E-7	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.999996467869624	WITHOUT_CLASSIFICATION	3.5321303759908682E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999979032680257	WITHOUT_CLASSIFICATION	2.096731974259215E-6	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999850983154498	WITHOUT_CLASSIFICATION	1.4901684550172036E-5	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999999935605235	WITHOUT_CLASSIFICATION	6.439476519843548E-9	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999981228277418	WITHOUT_CLASSIFICATION	1.8771722581588328E-6	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999981572476564	WITHOUT_CLASSIFICATION	1.8427523436616886E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999982171787912	WITHOUT_CLASSIFICATION	1.7828212087338397E-6	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999997527808099	WITHOUT_CLASSIFICATION	2.4721919020621847E-7	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999977260991105	WITHOUT_CLASSIFICATION	2.2739008894786233E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999973818883371	WITHOUT_CLASSIFICATION	2.6181116630531E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999973818883371	WITHOUT_CLASSIFICATION	2.6181116630531E-6	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.999995507873698	WITHOUT_CLASSIFICATION	4.492126301963889E-6	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999999242387886	WITHOUT_CLASSIFICATION	7.57612114972774E-8	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999995320722659	WITHOUT_CLASSIFICATION	4.679277341359481E-7	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999968884736381	WITHOUT_CLASSIFICATION	3.111526361778785E-6	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999984071949464	WITHOUT_CLASSIFICATION	1.5928050535454583E-6	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999999972120776	WITHOUT_CLASSIFICATION	2.7879225678469776E-9	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999112942007566	WITHOUT_CLASSIFICATION	8.870579924332002E-5	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9997954037588023	WITHOUT_CLASSIFICATION	2.045962411977246E-4	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999997437371089	WITHOUT_CLASSIFICATION	2.562628911641268E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999995316022163	WITHOUT_CLASSIFICATION	4.683977836119462E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999966312779174	WITHOUT_CLASSIFICATION	3.3687220827406607E-6	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999973183322197	WITHOUT_CLASSIFICATION	2.681667780248017E-6	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999778528997577	WITHOUT_CLASSIFICATION	2.214710024221929E-5	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999998990399915	WITHOUT_CLASSIFICATION	1.0096000856048146E-7	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999986619943563	WITHOUT_CLASSIFICATION	1.3380056437349635E-6	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9999084539048644	WITHOUT_CLASSIFICATION	9.154609513559329E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999997064031054	WITHOUT_CLASSIFICATION	2.9359689456073887E-7	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.999997617381838	WITHOUT_CLASSIFICATION	2.3826181621013215E-6	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999520960147	WITHOUT_CLASSIFICATION	4.790398524414482E-8	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9866334132784365	WITHOUT_CLASSIFICATION	0.013366586721563602	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999997596682584	WITHOUT_CLASSIFICATION	2.403317415904162E-7	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.999908275295614	WITHOUT_CLASSIFICATION	9.172470438597895E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999627463717	WITHOUT_CLASSIFICATION	3.725362829128024E-8	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999957080021432	WITHOUT_CLASSIFICATION	4.291997856784029E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999960440345429	WITHOUT_CLASSIFICATION	3.9559654570806785E-6	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999977583520212	WITHOUT_CLASSIFICATION	2.2416479788420253E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999999926899461	WITHOUT_CLASSIFICATION	7.310053843563245E-9	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999999792463822	WITHOUT_CLASSIFICATION	2.0753617806851046E-8	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999990342693875	WITHOUT_CLASSIFICATION	9.65730612517604E-7	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.99999789786134	WITHOUT_CLASSIFICATION	2.102138660040548E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999982791921798	WITHOUT_CLASSIFICATION	1.7208078202265062E-6	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999952951843044	WITHOUT_CLASSIFICATION	4.7048156955140255E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.99999789786134	WITHOUT_CLASSIFICATION	2.102138660040548E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999873939365609	WITHOUT_CLASSIFICATION	1.260606343914661E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9998763091057837	WITHOUT_CLASSIFICATION	1.2369089421623085E-4	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9999973725169584	WITHOUT_CLASSIFICATION	2.6274830415804535E-6	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.7461085009614438	WITHOUT_CLASSIFICATION	0.25389149903855623	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999999830476668	WITHOUT_CLASSIFICATION	1.695233321600376E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999994361998807	WITHOUT_CLASSIFICATION	5.638001193669623E-7	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999999049938174	WITHOUT_CLASSIFICATION	9.500618257629069E-8	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999967915830371	WITHOUT_CLASSIFICATION	3.2084169630015305E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9998551126499551	WITHOUT_CLASSIFICATION	1.4488735004485675E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999008539187316	WITHOUT_CLASSIFICATION	9.914608126836715E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999984692658453	WITHOUT_CLASSIFICATION	1.5307341547369782E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998350581661339	WITHOUT_CLASSIFICATION	1.6494183386602264E-4	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999931600038607	WITHOUT_CLASSIFICATION	6.8399961392419035E-6	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999998248442334	WITHOUT_CLASSIFICATION	1.7515576668346314E-7	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9998214104735179	WITHOUT_CLASSIFICATION	1.7858952648221367E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999991821044802	WITHOUT_CLASSIFICATION	8.178955198512701E-7	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999993887168118	WITHOUT_CLASSIFICATION	6.112831881664527E-7	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999962487394163	WITHOUT_CLASSIFICATION	3.7512605836364684E-6	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.999973691876115	WITHOUT_CLASSIFICATION	2.630812388510791E-5	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9997833108348306	WITHOUT_CLASSIFICATION	2.1668916516934646E-4	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999909211845116	WITHOUT_CLASSIFICATION	9.078815488435523E-6	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999981863205795	WITHOUT_CLASSIFICATION	1.8136794205529668E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.999999899783264	WITHOUT_CLASSIFICATION	1.0021673604670397E-7	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999990551486713	WITHOUT_CLASSIFICATION	9.448513288354614E-7	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.999997427436068	WITHOUT_CLASSIFICATION	2.5725639320883E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999976364823507	WITHOUT_CLASSIFICATION	2.363517649149941E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.999998076244278	WITHOUT_CLASSIFICATION	1.9237557220104573E-6	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999898027815373	WITHOUT_CLASSIFICATION	1.0197218462725151E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999912473082	WITHOUT_CLASSIFICATION	8.752691877658748E-9	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999949372311694	WITHOUT_CLASSIFICATION	5.062768830646001E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999949372311694	WITHOUT_CLASSIFICATION	5.062768830646001E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.999999660603635	WITHOUT_CLASSIFICATION	3.393963650038812E-7	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999999681849212	WITHOUT_CLASSIFICATION	3.181507878523658E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999993191054788	WITHOUT_CLASSIFICATION	6.808945211961371E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.999034924028924	WITHOUT_CLASSIFICATION	9.650759710759173E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.999034924028924	WITHOUT_CLASSIFICATION	9.650759710759173E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.999034924028924	WITHOUT_CLASSIFICATION	9.650759710759173E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.999034924028924	WITHOUT_CLASSIFICATION	9.650759710759173E-4	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999984427999866	WITHOUT_CLASSIFICATION	1.5572000134613624E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999230210912	WITHOUT_CLASSIFICATION	7.69789087937099E-8	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999985841223408	WITHOUT_CLASSIFICATION	1.4158776591517646E-6	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9988450168883081	WITHOUT_CLASSIFICATION	0.0011549831116919095	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999998429677323	WITHOUT_CLASSIFICATION	1.5703226766728627E-7	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999570239344927	WITHOUT_CLASSIFICATION	4.2976065507206284E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999897056340477	WITHOUT_CLASSIFICATION	1.0294365952351515E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999897056340477	WITHOUT_CLASSIFICATION	1.0294365952351515E-5	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9999789937571191	WITHOUT_CLASSIFICATION	2.100624288091799E-5	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9999232358268294	WITHOUT_CLASSIFICATION	7.67641731705685E-5	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.999996542537064	WITHOUT_CLASSIFICATION	3.457462935912272E-6	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9735125212797585	WITHOUT_CLASSIFICATION	0.026487478720241514	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999980458292898	WITHOUT_CLASSIFICATION	1.95417071032616E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999995670642301	WITHOUT_CLASSIFICATION	4.3293576997821904E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999984871999285	WITHOUT_CLASSIFICATION	1.5128000715084837E-6	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999962590418586	WITHOUT_CLASSIFICATION	3.740958141297959E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999662851539028	WITHOUT_CLASSIFICATION	3.3714846097146646E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999662851539028	WITHOUT_CLASSIFICATION	3.3714846097146646E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999952951843044	WITHOUT_CLASSIFICATION	4.7048156955140255E-6	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999983623881988	WITHOUT_CLASSIFICATION	1.6376118011579201E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999978589843863	WITHOUT_CLASSIFICATION	2.1410156136264195E-6	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999977770253788	WITHOUT_CLASSIFICATION	2.2229746212162622E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999997640327468	WITHOUT_CLASSIFICATION	2.3596725331110425E-7	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9998988122064328	WITHOUT_CLASSIFICATION	1.0118779356707984E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999821514421915	WITHOUT_CLASSIFICATION	1.7848557808487744E-5	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999998001029056	WITHOUT_CLASSIFICATION	1.998970944466008E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999974693334132	WITHOUT_CLASSIFICATION	2.5306665868815054E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999974693334132	WITHOUT_CLASSIFICATION	2.5306665868815054E-6	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999990530250347	WITHOUT_CLASSIFICATION	9.469749653395577E-7	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999993504187042	WITHOUT_CLASSIFICATION	6.495812956356168E-7	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.999999950461944	WITHOUT_CLASSIFICATION	4.953805607546747E-8	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999964256915898	WITHOUT_CLASSIFICATION	3.5743084103169043E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999951349489926	WITHOUT_CLASSIFICATION	4.8650510074334285E-6	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9998912140309177	WITHOUT_CLASSIFICATION	1.0878596908218812E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999439739565185	WITHOUT_CLASSIFICATION	5.602604348146597E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999993801565146	WITHOUT_CLASSIFICATION	6.198434854361562E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999993801565146	WITHOUT_CLASSIFICATION	6.198434854361562E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999993801565146	WITHOUT_CLASSIFICATION	6.198434854361562E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999993801565146	WITHOUT_CLASSIFICATION	6.198434854361562E-7	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999903823093694	WITHOUT_CLASSIFICATION	9.617690630490042E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9998159181290401	WITHOUT_CLASSIFICATION	1.8408187095980683E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999737382839196	WITHOUT_CLASSIFICATION	2.6261716080410976E-5	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999837385729283	WITHOUT_CLASSIFICATION	1.626142707174309E-5	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999802342068345	WITHOUT_CLASSIFICATION	1.9765793165454544E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9998086662812029	WITHOUT_CLASSIFICATION	1.913337187971401E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999328697124	WITHOUT_CLASSIFICATION	6.713028755932484E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999987199752788	WITHOUT_CLASSIFICATION	1.2800247212433808E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999987199752788	WITHOUT_CLASSIFICATION	1.2800247212433808E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999987199752788	WITHOUT_CLASSIFICATION	1.2800247212433808E-6	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999304014021115	WITHOUT_CLASSIFICATION	6.95985978884377E-5	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999991611015291	WITHOUT_CLASSIFICATION	8.388984708642742E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998566477529	WITHOUT_CLASSIFICATION	1.4335224699629433E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998566477529	WITHOUT_CLASSIFICATION	1.4335224699629433E-7	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999704263959205	WITHOUT_CLASSIFICATION	2.9573604079541837E-5	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999993810205247	WITHOUT_CLASSIFICATION	6.189794753312916E-7	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999999830412498	WITHOUT_CLASSIFICATION	1.6958750200295105E-8	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9999677719161136	WITHOUT_CLASSIFICATION	3.222808388641523E-5	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999884722522534	WITHOUT_CLASSIFICATION	1.1527747746598631E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999996690058535	WITHOUT_CLASSIFICATION	3.3099414654816386E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999995344012718	WITHOUT_CLASSIFICATION	4.655987282071626E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999995344012718	WITHOUT_CLASSIFICATION	4.655987282071626E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999976389740786	WITHOUT_CLASSIFICATION	2.3610259213705407E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.998481766206231	WITHOUT_CLASSIFICATION	0.001518233793769008	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999929881203106	WITHOUT_CLASSIFICATION	7.011879689365775E-6	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.999977846534631	WITHOUT_CLASSIFICATION	2.215346536902493E-5	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999975948939748	WITHOUT_CLASSIFICATION	2.40510602520689E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999925983507864	WITHOUT_CLASSIFICATION	7.401649213535549E-6	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999998713005482	WITHOUT_CLASSIFICATION	1.2869945169153586E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998894427723902	WITHOUT_CLASSIFICATION	1.1055722760977802E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.999847226448843	WITHOUT_CLASSIFICATION	1.5277355115687582E-4	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999991643324667	WITHOUT_CLASSIFICATION	8.356675331567466E-7	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999995912828429	WITHOUT_CLASSIFICATION	4.0871715704100945E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999947698240931	WITHOUT_CLASSIFICATION	5.230175906986087E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.998909508633523	WITHOUT_CLASSIFICATION	0.0010904913664769912	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.99999874850306	WITHOUT_CLASSIFICATION	1.251496939931613E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999676345103	WITHOUT_CLASSIFICATION	3.236548966700697E-8	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999999249659997	WITHOUT_CLASSIFICATION	7.503400038013725E-8	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9997494173763047	WITHOUT_CLASSIFICATION	2.5058262369531865E-4	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999998517397822	WITHOUT_CLASSIFICATION	1.4826021771976243E-7	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999996899514524	WITHOUT_CLASSIFICATION	3.1004854761211553E-7	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999990329431054	WITHOUT_CLASSIFICATION	9.67056894588896E-7	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999999517418685	WITHOUT_CLASSIFICATION	4.8258131440871616E-8	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998081853895153	WITHOUT_CLASSIFICATION	1.9181461048477068E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998184931059	WITHOUT_CLASSIFICATION	1.8150689402835652E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998184931059	WITHOUT_CLASSIFICATION	1.8150689402835652E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998184931059	WITHOUT_CLASSIFICATION	1.8150689402835652E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998184931059	WITHOUT_CLASSIFICATION	1.8150689402835652E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998184931059	WITHOUT_CLASSIFICATION	1.8150689402835652E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998184931059	WITHOUT_CLASSIFICATION	1.8150689402835652E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998184931059	WITHOUT_CLASSIFICATION	1.8150689402835652E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998184931059	WITHOUT_CLASSIFICATION	1.8150689402835652E-7	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999655525653328	WITHOUT_CLASSIFICATION	3.44474346672172E-5	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9998738321993436	WITHOUT_CLASSIFICATION	1.2616780065633144E-4	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999790629939784	WITHOUT_CLASSIFICATION	2.093700602150969E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.8182152607692118	WITHOUT_CLASSIFICATION	0.1817847392307882	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999112942007566	WITHOUT_CLASSIFICATION	8.870579924332002E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999112942007566	WITHOUT_CLASSIFICATION	8.870579924332002E-5	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999969841652511	WITHOUT_CLASSIFICATION	3.015834749014594E-6	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999984489073273	WITHOUT_CLASSIFICATION	1.551092672753356E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999161256496	WITHOUT_CLASSIFICATION	8.387435033232287E-8	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999964103515716	WITHOUT_CLASSIFICATION	3.589648428396519E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999967995403447	WITHOUT_CLASSIFICATION	3.2004596553702487E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999993541370296	WITHOUT_CLASSIFICATION	6.458629704270365E-7	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999983678212083	WITHOUT_CLASSIFICATION	1.6321787916618216E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9963173320912656	WITHOUT_CLASSIFICATION	0.003682667908734283	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999998970735607	WITHOUT_CLASSIFICATION	1.0292643915500517E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999940218600408	WITHOUT_CLASSIFICATION	5.97813995925285E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999940218600408	WITHOUT_CLASSIFICATION	5.97813995925285E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999940218600408	WITHOUT_CLASSIFICATION	5.97813995925285E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999989030008186	WITHOUT_CLASSIFICATION	1.096999181365942E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999965341582413	WITHOUT_CLASSIFICATION	3.4658417587065136E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999993891949217	WITHOUT_CLASSIFICATION	6.10805078204309E-7	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999998872941699	WITHOUT_CLASSIFICATION	1.1270583008642686E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998372007394776	WITHOUT_CLASSIFICATION	1.6279926052241618E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999576219919	WITHOUT_CLASSIFICATION	4.237800809834533E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999998638426768	WITHOUT_CLASSIFICATION	1.3615732317560444E-7	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999904651315202	WITHOUT_CLASSIFICATION	9.534868479737455E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999932773177165	WITHOUT_CLASSIFICATION	6.722682283634524E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999932773177165	WITHOUT_CLASSIFICATION	6.722682283634524E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999996055214758	WITHOUT_CLASSIFICATION	3.9447852419472325E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999653720024629	WITHOUT_CLASSIFICATION	3.4627997537020284E-5	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999924362391931	WITHOUT_CLASSIFICATION	7.563760807011472E-6	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9999529704826673	WITHOUT_CLASSIFICATION	4.702951733269957E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999997701752567	WITHOUT_CLASSIFICATION	2.29824743464285E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999997701752567	WITHOUT_CLASSIFICATION	2.29824743464285E-7	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999099683371269	WITHOUT_CLASSIFICATION	9.003166287313727E-5	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.999990857689909	WITHOUT_CLASSIFICATION	9.142310090896059E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999933966395419	WITHOUT_CLASSIFICATION	6.60336045809652E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9997866744983481	WITHOUT_CLASSIFICATION	2.1332550165176095E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999371232364	WITHOUT_CLASSIFICATION	6.287676359669358E-8	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999995467762137	WITHOUT_CLASSIFICATION	4.5322378631367245E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999995467762137	WITHOUT_CLASSIFICATION	4.5322378631367245E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999998542526044	WITHOUT_CLASSIFICATION	1.4574739568411274E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999998542526044	WITHOUT_CLASSIFICATION	1.4574739568411274E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999999738969784	WITHOUT_CLASSIFICATION	2.6103021609353642E-8	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999746394270951	WITHOUT_CLASSIFICATION	2.536057290491195E-5	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999988262320715	WITHOUT_CLASSIFICATION	1.1737679284822292E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999993380765549	WITHOUT_CLASSIFICATION	6.6192344509813575E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999966911132027	WITHOUT_CLASSIFICATION	3.3088867973121656E-6	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999982616985452	WITHOUT_CLASSIFICATION	1.7383014547865124E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999891026758	WITHOUT_CLASSIFICATION	1.089732413168111E-8	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999978691244379	WITHOUT_CLASSIFICATION	2.130875562124908E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.999999934597347	WITHOUT_CLASSIFICATION	6.540265297174078E-8	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999986308552916	WITHOUT_CLASSIFICATION	1.3691447084447498E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9453797318834154	WITHOUT_CLASSIFICATION	0.05462026811658471	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999998595990185	WITHOUT_CLASSIFICATION	1.4040098140492571E-7	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999999152944969	WITHOUT_CLASSIFICATION	8.470550316325861E-8	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999772344362061	WITHOUT_CLASSIFICATION	2.2765563793974932E-5	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9996564007320429	WITHOUT_CLASSIFICATION	3.4359926795711964E-4	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.999997686933202	WITHOUT_CLASSIFICATION	2.313066797973274E-6	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999975368029688	WITHOUT_CLASSIFICATION	2.4631970311900305E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999926117399431	WITHOUT_CLASSIFICATION	7.388260056901589E-6	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999908526490318	WITHOUT_CLASSIFICATION	9.147350968247402E-6	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999996967216103	WITHOUT_CLASSIFICATION	3.0327838975379403E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998350581661339	WITHOUT_CLASSIFICATION	1.6494183386602264E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997227287106003	WITHOUT_CLASSIFICATION	2.7727128939968775E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999980333546236	WITHOUT_CLASSIFICATION	1.9666453763844647E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.999992738019797	WITHOUT_CLASSIFICATION	7.261980202974202E-6	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999999576794731	WITHOUT_CLASSIFICATION	4.2320526797915935E-8	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.999982034972876	WITHOUT_CLASSIFICATION	1.7965027124020937E-5	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999323302824682	WITHOUT_CLASSIFICATION	6.766971753178217E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999999931438716	WITHOUT_CLASSIFICATION	6.8561285455013004E-9	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999998340017243	WITHOUT_CLASSIFICATION	1.659982756717282E-7	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9995951533695348	WITHOUT_CLASSIFICATION	4.048466304652461E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999975209363946	WITHOUT_CLASSIFICATION	2.479063605344471E-6	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999934938959911	WITHOUT_CLASSIFICATION	6.506104008802458E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999998762770129	WITHOUT_CLASSIFICATION	1.2372298707268708E-7	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999932061263146	WITHOUT_CLASSIFICATION	6.793873685419743E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.999999747865203	WITHOUT_CLASSIFICATION	2.5213479712864075E-7	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9991306415976542	WITHOUT_CLASSIFICATION	8.693584023457973E-4	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999998908698828	WITHOUT_CLASSIFICATION	1.091301170901075E-7	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999992250484623	WITHOUT_CLASSIFICATION	7.749515377326837E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999995308816704	WITHOUT_CLASSIFICATION	4.6911832960384596E-7	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.998867202808406	WITHOUT_CLASSIFICATION	0.0011327971915939179	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9994381880869918	WITHOUT_CLASSIFICATION	5.618119130082201E-4	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999919793564473	WITHOUT_CLASSIFICATION	8.020643552683154E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.999999880355382	WITHOUT_CLASSIFICATION	1.1964461792286135E-7	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.999996872958159	WITHOUT_CLASSIFICATION	3.127041840955751E-6	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9984933121415271	WITHOUT_CLASSIFICATION	0.001506687858472867	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999995571474334	WITHOUT_CLASSIFICATION	4.4285256665227214E-7	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999999685737243	WITHOUT_CLASSIFICATION	3.1426275687137537E-8	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.999994193761128	WITHOUT_CLASSIFICATION	5.806238871947856E-6	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999577682438984	WITHOUT_CLASSIFICATION	4.223175610166258E-5	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999074321441012	WITHOUT_CLASSIFICATION	9.256785589878568E-5	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999999003060219	WITHOUT_CLASSIFICATION	9.969397808520272E-8	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999995396973299	WITHOUT_CLASSIFICATION	4.6030267013670996E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999995396973299	WITHOUT_CLASSIFICATION	4.6030267013670996E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999997942912856	WITHOUT_CLASSIFICATION	2.057087143718636E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999997942912856	WITHOUT_CLASSIFICATION	2.057087143718636E-7	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999943103348159	WITHOUT_CLASSIFICATION	5.689665184151711E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999943103348159	WITHOUT_CLASSIFICATION	5.689665184151711E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999966025234936	WITHOUT_CLASSIFICATION	3.3974765063137713E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999966025234936	WITHOUT_CLASSIFICATION	3.3974765063137713E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998053864533	WITHOUT_CLASSIFICATION	1.9461354667984338E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998053864533	WITHOUT_CLASSIFICATION	1.9461354667984338E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998053864533	WITHOUT_CLASSIFICATION	1.9461354667984338E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998053864533	WITHOUT_CLASSIFICATION	1.9461354667984338E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998053864533	WITHOUT_CLASSIFICATION	1.9461354667984338E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998053864533	WITHOUT_CLASSIFICATION	1.9461354667984338E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998053864533	WITHOUT_CLASSIFICATION	1.9461354667984338E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998053864533	WITHOUT_CLASSIFICATION	1.9461354667984338E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998053864533	WITHOUT_CLASSIFICATION	1.9461354667984338E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999965219528849	WITHOUT_CLASSIFICATION	3.478047114987652E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999965219528849	WITHOUT_CLASSIFICATION	3.478047114987652E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999965219528849	WITHOUT_CLASSIFICATION	3.478047114987652E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999986811020096	WITHOUT_CLASSIFICATION	1.3188979902981388E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999969407392229	WITHOUT_CLASSIFICATION	3.05926077706353E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999969407392229	WITHOUT_CLASSIFICATION	3.05926077706353E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999969407392229	WITHOUT_CLASSIFICATION	3.05926077706353E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999332526209	WITHOUT_CLASSIFICATION	6.674737905877258E-8	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999332526209	WITHOUT_CLASSIFICATION	6.674737905877258E-8	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999332526209	WITHOUT_CLASSIFICATION	6.674737905877258E-8	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998612176380438	WITHOUT_CLASSIFICATION	1.387823619562494E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999999097797344	WITHOUT_CLASSIFICATION	9.022026553385861E-8	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998845084534556	WITHOUT_CLASSIFICATION	1.1549154654446199E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999092459247055	WITHOUT_CLASSIFICATION	9.075407529437453E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999092459247055	WITHOUT_CLASSIFICATION	9.075407529437453E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999092459247055	WITHOUT_CLASSIFICATION	9.075407529437453E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999997489536352	WITHOUT_CLASSIFICATION	2.5104636489173644E-7	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999658025841669	WITHOUT_CLASSIFICATION	3.419741583316343E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999658025841669	WITHOUT_CLASSIFICATION	3.419741583316343E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9995182972387757	WITHOUT_CLASSIFICATION	4.8170276122433696E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999997585419509	WITHOUT_CLASSIFICATION	2.414580491329113E-7	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999997585419509	WITHOUT_CLASSIFICATION	2.414580491329113E-7	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9899456831595627	WITHOUT_CLASSIFICATION	0.010054316840437389	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999216863252633	WITHOUT_CLASSIFICATION	7.831367473668386E-5	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.999998231428473	WITHOUT_CLASSIFICATION	1.7685715270299183E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999995628784194	WITHOUT_CLASSIFICATION	4.3712158055661224E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999995628784194	WITHOUT_CLASSIFICATION	4.3712158055661224E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9984546873983983	WITHOUT_CLASSIFICATION	0.0015453126016017563	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999986198848616	WITHOUT_CLASSIFICATION	1.3801151383965325E-6	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999952921394271	WITHOUT_CLASSIFICATION	4.707860572971181E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.999999273141889	WITHOUT_CLASSIFICATION	7.268581110029674E-7	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9970280481796153	WITHOUT_CLASSIFICATION	0.0029719518203846196	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999995628784194	WITHOUT_CLASSIFICATION	4.3712158055661224E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999995628784194	WITHOUT_CLASSIFICATION	4.3712158055661224E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999995628784194	WITHOUT_CLASSIFICATION	4.3712158055661224E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999995628784194	WITHOUT_CLASSIFICATION	4.3712158055661224E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999995628784194	WITHOUT_CLASSIFICATION	4.3712158055661224E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999995590433166	WITHOUT_CLASSIFICATION	4.409566833609503E-7	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999880187343865	WITHOUT_CLASSIFICATION	1.1981265613507445E-5	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999999445637953	WITHOUT_CLASSIFICATION	5.543620472317674E-8	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999935023892064	WITHOUT_CLASSIFICATION	6.497610793603905E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9997701404887291	WITHOUT_CLASSIFICATION	2.298595112709386E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999976836879438	WITHOUT_CLASSIFICATION	2.3163120561586127E-6	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9999215936361533	WITHOUT_CLASSIFICATION	7.84063638467006E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999989300012242	WITHOUT_CLASSIFICATION	1.0699987757676952E-6	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.999999930187417	WITHOUT_CLASSIFICATION	6.981258303479603E-8	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999987610307133	WITHOUT_CLASSIFICATION	1.2389692866602568E-6	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999885694456314	WITHOUT_CLASSIFICATION	1.1430554368588392E-5	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.999908275295614	WITHOUT_CLASSIFICATION	9.172470438597895E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999999672565595	WITHOUT_CLASSIFICATION	3.274344041712526E-8	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999474453922	WITHOUT_CLASSIFICATION	5.2554607768347465E-8	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999257543110701	WITHOUT_CLASSIFICATION	7.424568892992471E-5	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9994395570028379	WITHOUT_CLASSIFICATION	5.60442997162109E-4	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.999999964488905	WITHOUT_CLASSIFICATION	3.5511094931048474E-8	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999998453805	WITHOUT_CLASSIFICATION	1.546194916426328E-10	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999974657350055	WITHOUT_CLASSIFICATION	2.5342649945443003E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999997725122589	WITHOUT_CLASSIFICATION	2.2748774120098328E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.999999987551888	WITHOUT_CLASSIFICATION	1.2448112024610571E-8	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.999998516887282	WITHOUT_CLASSIFICATION	1.4831127180093654E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999995316022163	WITHOUT_CLASSIFICATION	4.683977836119462E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999867250127	WITHOUT_CLASSIFICATION	1.327498731080114E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999867250127	WITHOUT_CLASSIFICATION	1.327498731080114E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999867250127	WITHOUT_CLASSIFICATION	1.327498731080114E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999867250127	WITHOUT_CLASSIFICATION	1.327498731080114E-8	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9997593036418163	WITHOUT_CLASSIFICATION	2.406963581836025E-4	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9996657727402202	WITHOUT_CLASSIFICATION	3.3422725977983695E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999944296233614	WITHOUT_CLASSIFICATION	5.5703766386198E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999944296233614	WITHOUT_CLASSIFICATION	5.5703766386198E-6	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999999372341302	WITHOUT_CLASSIFICATION	6.276586984004525E-8	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999992512728358	WITHOUT_CLASSIFICATION	7.487271642508115E-7	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999758931672851	WITHOUT_CLASSIFICATION	2.4106832714870195E-5	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999819918205	WITHOUT_CLASSIFICATION	1.800817948677095E-8	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999970785228747	WITHOUT_CLASSIFICATION	2.9214771253420063E-6	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.999995148279194	WITHOUT_CLASSIFICATION	4.851720805924835E-6	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999785100007956	WITHOUT_CLASSIFICATION	2.1489999204303456E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999985723337431	WITHOUT_CLASSIFICATION	1.4276662569673376E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999985723337431	WITHOUT_CLASSIFICATION	1.4276662569673376E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999985723337431	WITHOUT_CLASSIFICATION	1.4276662569673376E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999985723337431	WITHOUT_CLASSIFICATION	1.4276662569673376E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999228815457549	WITHOUT_CLASSIFICATION	7.711845424504684E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999999967336887	WITHOUT_CLASSIFICATION	3.26631129326188E-8	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999999967336887	WITHOUT_CLASSIFICATION	3.26631129326188E-8	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999999967336887	WITHOUT_CLASSIFICATION	3.26631129326188E-8	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999991643425787	WITHOUT_CLASSIFICATION	8.356574212238474E-7	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999959677185465	WITHOUT_CLASSIFICATION	4.032281453480115E-6	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999817383285828	WITHOUT_CLASSIFICATION	1.826167141721655E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.999034924028924	WITHOUT_CLASSIFICATION	9.650759710759173E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.999034924028924	WITHOUT_CLASSIFICATION	9.650759710759173E-4	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999693294831371	WITHOUT_CLASSIFICATION	3.0670516862817685E-5	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.999980089654613	WITHOUT_CLASSIFICATION	1.9910345387012923E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999889163099189	WITHOUT_CLASSIFICATION	1.1083690081025862E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999889163099189	WITHOUT_CLASSIFICATION	1.1083690081025862E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999700608293317	WITHOUT_CLASSIFICATION	2.993917066823168E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999700608293317	WITHOUT_CLASSIFICATION	2.993917066823168E-5	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999998872366839	WITHOUT_CLASSIFICATION	1.1276331613559455E-7	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999999840645983	WITHOUT_CLASSIFICATION	1.5935401666015702E-8	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999999755783736	WITHOUT_CLASSIFICATION	2.4421626392823433E-8	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9999982030656966	WITHOUT_CLASSIFICATION	1.7969343034090628E-6	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999483470716342	WITHOUT_CLASSIFICATION	5.1652928365734574E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999999374560519	WITHOUT_CLASSIFICATION	6.254394808917181E-8	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999997913327607	WITHOUT_CLASSIFICATION	2.0866723934173938E-7	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999783535285797	WITHOUT_CLASSIFICATION	2.1646471420265457E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999996417049841	WITHOUT_CLASSIFICATION	3.582950158877982E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999745394795	WITHOUT_CLASSIFICATION	2.5460520575625775E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999745394795	WITHOUT_CLASSIFICATION	2.5460520575625775E-8	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999994930117886	WITHOUT_CLASSIFICATION	5.069882114828127E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999994930117886	WITHOUT_CLASSIFICATION	5.069882114828127E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999854031822396	WITHOUT_CLASSIFICATION	1.4596817760389092E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999956295695532	WITHOUT_CLASSIFICATION	4.3704304466676375E-6	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.999951115090123	WITHOUT_CLASSIFICATION	4.888490987688454E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999991633745126	WITHOUT_CLASSIFICATION	8.366254874466608E-7	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999991633745126	WITHOUT_CLASSIFICATION	8.366254874466608E-7	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999991633745126	WITHOUT_CLASSIFICATION	8.366254874466608E-7	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999975614358162	WITHOUT_CLASSIFICATION	2.4385641838522503E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999983266194986	WITHOUT_CLASSIFICATION	1.6733805013372271E-6	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.999998215627714	WITHOUT_CLASSIFICATION	1.7843722861249611E-6	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999985783738968	WITHOUT_CLASSIFICATION	1.421626103185189E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999978765322474	WITHOUT_CLASSIFICATION	2.123467752589635E-6	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.999997695949241	WITHOUT_CLASSIFICATION	2.30405075901935E-6	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999981711646454	WITHOUT_CLASSIFICATION	1.8288353546593509E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999984478826602	WITHOUT_CLASSIFICATION	1.5521173396930574E-6	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9996533012302563	WITHOUT_CLASSIFICATION	3.4669876974365867E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999999591610921	WITHOUT_CLASSIFICATION	4.0838907906572554E-8	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9999996393075042	WITHOUT_CLASSIFICATION	3.6069249571879987E-7	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999843947246411	WITHOUT_CLASSIFICATION	1.5605275358905227E-5	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999963218764629	WITHOUT_CLASSIFICATION	3.6781235369569027E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.999034924028924	WITHOUT_CLASSIFICATION	9.650759710759173E-4	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999943225225488	WITHOUT_CLASSIFICATION	5.6774774511278E-6	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9989184387765675	WITHOUT_CLASSIFICATION	0.0010815612234325448	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999949372311694	WITHOUT_CLASSIFICATION	5.062768830646001E-6	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997720098096021	WITHOUT_CLASSIFICATION	2.2799019039790723E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997720098096021	WITHOUT_CLASSIFICATION	2.2799019039790723E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997720098096021	WITHOUT_CLASSIFICATION	2.2799019039790723E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997720098096021	WITHOUT_CLASSIFICATION	2.2799019039790723E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997720098096021	WITHOUT_CLASSIFICATION	2.2799019039790723E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999220527510618	WITHOUT_CLASSIFICATION	7.794724893817073E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997720098096021	WITHOUT_CLASSIFICATION	2.2799019039790723E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997720098096021	WITHOUT_CLASSIFICATION	2.2799019039790723E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997720098096021	WITHOUT_CLASSIFICATION	2.2799019039790723E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999547560763477	WITHOUT_CLASSIFICATION	4.524392365228535E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9969853010054763	WITHOUT_CLASSIFICATION	0.003014698994523536	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.5233489152617196	WITHOUT_CLASSIFICATION	0.47665108473828055	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9996033618718915	WITHOUT_CLASSIFICATION	3.9663812810842734E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999478681231476	WITHOUT_CLASSIFICATION	5.213187685237048E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9997799164363772	WITHOUT_CLASSIFICATION	2.200835636228115E-4	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999991862495418	WITHOUT_CLASSIFICATION	8.137504582553539E-7	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999954599668537	WITHOUT_CLASSIFICATION	4.540033146313051E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999985736182395	WITHOUT_CLASSIFICATION	1.4263817605497019E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999985736182395	WITHOUT_CLASSIFICATION	1.4263817605497019E-6	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999955479065322	WITHOUT_CLASSIFICATION	4.452093467696205E-6	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999981685916997	WITHOUT_CLASSIFICATION	1.8314083003196065E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999984039398241	WITHOUT_CLASSIFICATION	1.5960601758736966E-6	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.999997522073578	WITHOUT_CLASSIFICATION	2.477926421987419E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999973824482371	WITHOUT_CLASSIFICATION	2.61755176294217E-6	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999980172689171	WITHOUT_CLASSIFICATION	1.9827310827573423E-6	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999984352191553	WITHOUT_CLASSIFICATION	1.564780844685293E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999977769521494	WITHOUT_CLASSIFICATION	2.2230478506467205E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999984546940888	WITHOUT_CLASSIFICATION	1.5453059112155405E-6	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999986571676929	WITHOUT_CLASSIFICATION	1.3428323071904495E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999977317456631	WITHOUT_CLASSIFICATION	2.2682543369361987E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999977753406716	WITHOUT_CLASSIFICATION	2.2246593284105093E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999982447579773	WITHOUT_CLASSIFICATION	1.7552420227908818E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999977473445983	WITHOUT_CLASSIFICATION	2.2526554015417508E-6	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999982909625663	WITHOUT_CLASSIFICATION	1.7090374336290406E-6	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999982739196596	WITHOUT_CLASSIFICATION	1.7260803405071886E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999982589071786	WITHOUT_CLASSIFICATION	1.7410928213498884E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999988751718887	WITHOUT_CLASSIFICATION	1.1248281113294916E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999980048742897	WITHOUT_CLASSIFICATION	1.995125710258349E-6	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999966474093107	WITHOUT_CLASSIFICATION	3.3525906892529023E-6	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999988115742237	WITHOUT_CLASSIFICATION	1.1884257763629033E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999967904543509	WITHOUT_CLASSIFICATION	3.20954564922497E-6	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999987145413419	WITHOUT_CLASSIFICATION	1.2854586580709023E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999994031345663	WITHOUT_CLASSIFICATION	5.968654337766671E-7	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999986801614923	WITHOUT_CLASSIFICATION	1.3198385077346519E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999989020355992	WITHOUT_CLASSIFICATION	1.0979644008316332E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999990193373887	WITHOUT_CLASSIFICATION	9.806626112930107E-7	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999985991435736	WITHOUT_CLASSIFICATION	1.400856426381093E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999991130263193	WITHOUT_CLASSIFICATION	8.869736806454086E-7	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999990790901699	WITHOUT_CLASSIFICATION	9.209098301634637E-7	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.999998623944273	WITHOUT_CLASSIFICATION	1.3760557270608456E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999991197858337	WITHOUT_CLASSIFICATION	8.802141664805244E-7	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999986844187985	WITHOUT_CLASSIFICATION	1.3155812015436385E-6	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999989967198668	WITHOUT_CLASSIFICATION	1.0032801331713258E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999988882040435	WITHOUT_CLASSIFICATION	1.1117959565097254E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999991744274611	WITHOUT_CLASSIFICATION	8.255725388075046E-7	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999987132594848	WITHOUT_CLASSIFICATION	1.286740515180394E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999983607427194	WITHOUT_CLASSIFICATION	1.6392572806521268E-6	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999985087632579	WITHOUT_CLASSIFICATION	1.4912367421029536E-6	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999986774805316	WITHOUT_CLASSIFICATION	1.3225194683269517E-6	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999991098632406	WITHOUT_CLASSIFICATION	8.901367593802256E-7	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999987403834489	WITHOUT_CLASSIFICATION	1.2596165510570045E-6	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999977201432414	WITHOUT_CLASSIFICATION	2.2798567585896887E-6	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999988901058734	WITHOUT_CLASSIFICATION	1.1098941266693293E-6	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999988692673775	WITHOUT_CLASSIFICATION	1.130732622545776E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999986636873017	WITHOUT_CLASSIFICATION	1.3363126982660983E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999984317046553	WITHOUT_CLASSIFICATION	1.5682953447514016E-6	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.999998850205988	WITHOUT_CLASSIFICATION	1.149794011963345E-6	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999979717186862	WITHOUT_CLASSIFICATION	2.0282813138202023E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999987250326015	WITHOUT_CLASSIFICATION	1.274967398545795E-6	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999981627691626	WITHOUT_CLASSIFICATION	1.8372308373913442E-6	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999973416247518	WITHOUT_CLASSIFICATION	2.65837524813098E-6	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999972334451541	WITHOUT_CLASSIFICATION	2.7665548459124903E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999987084164665	WITHOUT_CLASSIFICATION	1.291583533420184E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999987084164665	WITHOUT_CLASSIFICATION	1.291583533420184E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999983604582238	WITHOUT_CLASSIFICATION	1.639541776167114E-6	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999985874803905	WITHOUT_CLASSIFICATION	1.4125196095760058E-6	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.999998419455639	WITHOUT_CLASSIFICATION	1.580544360986323E-6	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999975038332679	WITHOUT_CLASSIFICATION	2.496166732075272E-6	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.999998712690608	WITHOUT_CLASSIFICATION	1.2873093919927258E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999984032939178	WITHOUT_CLASSIFICATION	1.5967060822148384E-6	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.999998664674013	WITHOUT_CLASSIFICATION	1.335325986980362E-6	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999979015550367	WITHOUT_CLASSIFICATION	2.098444963400811E-6	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999969809680368	WITHOUT_CLASSIFICATION	3.0190319631053123E-6	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999985205334495	WITHOUT_CLASSIFICATION	1.4794665505411712E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999806661709284	WITHOUT_CLASSIFICATION	1.9333829071650738E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999806661709284	WITHOUT_CLASSIFICATION	1.9333829071650738E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999988804037503	WITHOUT_CLASSIFICATION	1.1195962496269353E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998221107761088	WITHOUT_CLASSIFICATION	1.7788922389109753E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9995808119513729	WITHOUT_CLASSIFICATION	4.191880486269804E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999645905661	WITHOUT_CLASSIFICATION	3.540943394318988E-8	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999491938909	WITHOUT_CLASSIFICATION	5.080610915051101E-8	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999491938909	WITHOUT_CLASSIFICATION	5.080610915051101E-8	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999491938909	WITHOUT_CLASSIFICATION	5.080610915051101E-8	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999491938909	WITHOUT_CLASSIFICATION	5.080610915051101E-8	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6521829399632508	WITHOUT_CLASSIFICATION	0.34781706003674917	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.551903207713526	WITHOUT_CLASSIFICATION	0.44809679228647403	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.999998673768106	WITHOUT_CLASSIFICATION	1.3262318940235253E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999984366366504	WITHOUT_CLASSIFICATION	1.5633633494968815E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999984188533284	WITHOUT_CLASSIFICATION	1.5811466716504777E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999983828426582	WITHOUT_CLASSIFICATION	1.617157341910796E-6	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999982708341886	WITHOUT_CLASSIFICATION	1.7291658114135868E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999966532503294	WITHOUT_CLASSIFICATION	3.346749670494222E-6	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.999997935634651	WITHOUT_CLASSIFICATION	2.0643653489876296E-6	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999981242574575	WITHOUT_CLASSIFICATION	1.8757425425324054E-6	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999977609889156	WITHOUT_CLASSIFICATION	2.239011084462997E-6	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999954897389903	WITHOUT_CLASSIFICATION	4.510261009667463E-6	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999981182660328	WITHOUT_CLASSIFICATION	1.8817339670722498E-6	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999981888383414	WITHOUT_CLASSIFICATION	1.8111616586452065E-6	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999980908087636	WITHOUT_CLASSIFICATION	1.909191236382047E-6	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999984606934099	WITHOUT_CLASSIFICATION	1.5393065900988263E-6	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999984389193404	WITHOUT_CLASSIFICATION	1.5610806596093953E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999985785856501	WITHOUT_CLASSIFICATION	1.4214143498628243E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999976307096791	WITHOUT_CLASSIFICATION	2.3692903209984998E-6	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999979896361144	WITHOUT_CLASSIFICATION	2.0103638855995736E-6	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.999996538083496	WITHOUT_CLASSIFICATION	3.4619165040624356E-6	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999978758205182	WITHOUT_CLASSIFICATION	2.124179481846452E-6	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.999996695711788	WITHOUT_CLASSIFICATION	3.3042882121953134E-6	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999977075828126	WITHOUT_CLASSIFICATION	2.2924171874635994E-6	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999973505890162	WITHOUT_CLASSIFICATION	2.649410983857181E-6	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.999999143459224	WITHOUT_CLASSIFICATION	8.565407759786087E-7	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999983091502556	WITHOUT_CLASSIFICATION	1.6908497443492806E-6	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999989678854776	WITHOUT_CLASSIFICATION	1.0321145223755632E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999991309267755	WITHOUT_CLASSIFICATION	8.690732244883722E-7	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999990152555869	WITHOUT_CLASSIFICATION	9.847444131451869E-7	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999989034467206	WITHOUT_CLASSIFICATION	1.0965532794470202E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999983147267016	WITHOUT_CLASSIFICATION	1.6852732984714182E-6	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999985724592023	WITHOUT_CLASSIFICATION	1.4275407976870813E-6	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999984997629071	WITHOUT_CLASSIFICATION	1.5002370928975664E-6	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999983895262703	WITHOUT_CLASSIFICATION	1.6104737297379994E-6	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999990764285189	WITHOUT_CLASSIFICATION	9.235714810561399E-7	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999988411523881	WITHOUT_CLASSIFICATION	1.1588476118504669E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.999998993691455	WITHOUT_CLASSIFICATION	1.0063085450277644E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999978826131736	WITHOUT_CLASSIFICATION	2.1173868263563668E-6	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999985215964987	WITHOUT_CLASSIFICATION	1.4784035013195413E-6	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999986075941174	WITHOUT_CLASSIFICATION	1.392405882537867E-6	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999988083164516	WITHOUT_CLASSIFICATION	1.191683548422452E-6	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999988103002099	WITHOUT_CLASSIFICATION	1.1896997901052973E-6	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999985973001422	WITHOUT_CLASSIFICATION	1.4026998578301524E-6	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999984828072007	WITHOUT_CLASSIFICATION	1.517192799281851E-6	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999985995821661	WITHOUT_CLASSIFICATION	1.4004178338700754E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999988371036659	WITHOUT_CLASSIFICATION	1.1628963341038881E-6	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999987915578337	WITHOUT_CLASSIFICATION	1.2084421663385809E-6	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999973577123115	WITHOUT_CLASSIFICATION	2.642287688459612E-6	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999980098445207	WITHOUT_CLASSIFICATION	1.9901554793380314E-6	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999985579814541	WITHOUT_CLASSIFICATION	1.4420185459289895E-6	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999985733493193	WITHOUT_CLASSIFICATION	1.4266506807702467E-6	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999980474909851	WITHOUT_CLASSIFICATION	1.9525090149742868E-6	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999986716119105	WITHOUT_CLASSIFICATION	1.3283880894996511E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999983824111173	WITHOUT_CLASSIFICATION	1.6175888827588273E-6	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999973932649904	WITHOUT_CLASSIFICATION	2.606735009604511E-6	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999986247025863	WITHOUT_CLASSIFICATION	1.375297413797854E-6	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999979113404615	WITHOUT_CLASSIFICATION	2.088659538599339E-6	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999979338235516	WITHOUT_CLASSIFICATION	2.066176448297041E-6	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999962652906563	WITHOUT_CLASSIFICATION	3.734709343687055E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999959531150251	WITHOUT_CLASSIFICATION	4.046884974922521E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999858779515683	WITHOUT_CLASSIFICATION	1.4122048431630305E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999858779515683	WITHOUT_CLASSIFICATION	1.4122048431630305E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999858779515683	WITHOUT_CLASSIFICATION	1.4122048431630305E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999858779515683	WITHOUT_CLASSIFICATION	1.4122048431630305E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999858779515683	WITHOUT_CLASSIFICATION	1.4122048431630305E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999858779515683	WITHOUT_CLASSIFICATION	1.4122048431630305E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999858779515683	WITHOUT_CLASSIFICATION	1.4122048431630305E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9995875335434645	WITHOUT_CLASSIFICATION	4.124664565355037E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9995875335434645	WITHOUT_CLASSIFICATION	4.124664565355037E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9995875335434645	WITHOUT_CLASSIFICATION	4.124664565355037E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9995875335434645	WITHOUT_CLASSIFICATION	4.124664565355037E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9995073015099688	WITHOUT_CLASSIFICATION	4.926984900312429E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9995073015099688	WITHOUT_CLASSIFICATION	4.926984900312429E-4	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9893819489254948	WITHOUT_CLASSIFICATION	0.010618051074505159	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996204625017	WITHOUT_CLASSIFICATION	3.7953749828934995E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999996204625017	WITHOUT_CLASSIFICATION	3.7953749828934995E-7	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999999538408335	WITHOUT_CLASSIFICATION	4.6159166490109856E-8	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999993678412319	WITHOUT_CLASSIFICATION	6.32158768009288E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996750506317	WITHOUT_CLASSIFICATION	3.249493683083031E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996750506317	WITHOUT_CLASSIFICATION	3.249493683083031E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996750506317	WITHOUT_CLASSIFICATION	3.249493683083031E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996750506317	WITHOUT_CLASSIFICATION	3.249493683083031E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996750506317	WITHOUT_CLASSIFICATION	3.249493683083031E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996750506317	WITHOUT_CLASSIFICATION	3.249493683083031E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996750506317	WITHOUT_CLASSIFICATION	3.249493683083031E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998381491889	WITHOUT_CLASSIFICATION	1.6185081107687635E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995840938951	WITHOUT_CLASSIFICATION	4.1590610494751824E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999668869060072	WITHOUT_CLASSIFICATION	3.311309399273E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999668869060072	WITHOUT_CLASSIFICATION	3.311309399273E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999997670625862	WITHOUT_CLASSIFICATION	2.3293741379797357E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999970870066792	WITHOUT_CLASSIFICATION	2.9129933208497937E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999970870066792	WITHOUT_CLASSIFICATION	2.9129933208497937E-6	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999804138283643	WITHOUT_CLASSIFICATION	1.9586171635678653E-5	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9940461976241687	WITHOUT_CLASSIFICATION	0.005953802375831258	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999974363646899	WITHOUT_CLASSIFICATION	2.5636353101518725E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.999066880033574	WITHOUT_CLASSIFICATION	9.331199664260097E-4	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999999541221192	WITHOUT_CLASSIFICATION	4.58778807627873E-8	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999995263303988	WITHOUT_CLASSIFICATION	4.736696011090273E-7	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9996737498031893	WITHOUT_CLASSIFICATION	3.262501968106368E-4	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999995936890491	WITHOUT_CLASSIFICATION	4.0631095092497337E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999807547175	WITHOUT_CLASSIFICATION	1.924528251333172E-8	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999447016267534	WITHOUT_CLASSIFICATION	5.5298373246615925E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999818973654706	WITHOUT_CLASSIFICATION	1.8102634529392717E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9994918111536795	WITHOUT_CLASSIFICATION	5.081888463204988E-4	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999976983799322	WITHOUT_CLASSIFICATION	2.3016200676952906E-6	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9997954783272548	WITHOUT_CLASSIFICATION	2.0452167274514536E-4	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.999995703252834	WITHOUT_CLASSIFICATION	4.296747165977072E-6	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9997397937064012	WITHOUT_CLASSIFICATION	2.6020629359883233E-4	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999989866472592	WITHOUT_CLASSIFICATION	1.0133527408797557E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.999987269939543	WITHOUT_CLASSIFICATION	1.2730060456956847E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999998247351359	WITHOUT_CLASSIFICATION	1.752648639915652E-7	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999998247351359	WITHOUT_CLASSIFICATION	1.752648639915652E-7	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999790227611823	WITHOUT_CLASSIFICATION	2.0977238817614697E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999998830787059	WITHOUT_CLASSIFICATION	1.169212940326533E-7	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999887179258521	WITHOUT_CLASSIFICATION	1.1282074147791061E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999564762675858	WITHOUT_CLASSIFICATION	4.352373241423353E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998228943756788	WITHOUT_CLASSIFICATION	1.7710562432116214E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998228943756788	WITHOUT_CLASSIFICATION	1.7710562432116214E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998228943756788	WITHOUT_CLASSIFICATION	1.7710562432116214E-4	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999753869442098	WITHOUT_CLASSIFICATION	2.46130557901055E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9998773726564129	WITHOUT_CLASSIFICATION	1.2262734358711938E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999877236594081	WITHOUT_CLASSIFICATION	1.2276340591738155E-5	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.999969077337249	WITHOUT_CLASSIFICATION	3.09226627509794E-5	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.999997821823758	WITHOUT_CLASSIFICATION	2.1781762420708286E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.999987871764843	WITHOUT_CLASSIFICATION	1.212823515700773E-5	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9907865631435263	WITHOUT_CLASSIFICATION	0.009213436856473706	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999464735638555	WITHOUT_CLASSIFICATION	5.3526436144674096E-5	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999875898542591	WITHOUT_CLASSIFICATION	1.2410145740948186E-5	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999988693408596	WITHOUT_CLASSIFICATION	1.1306591404666307E-6	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999910295918656	WITHOUT_CLASSIFICATION	8.970408134410535E-6	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999939441319416	WITHOUT_CLASSIFICATION	6.055868058284064E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9818561296211915	WITHOUT_CLASSIFICATION	0.01814387037880858	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999900633591717	WITHOUT_CLASSIFICATION	9.936640828213712E-6	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999997060419781	WITHOUT_CLASSIFICATION	2.939580219572979E-7	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999999037934848	WITHOUT_CLASSIFICATION	9.620651520486374E-8	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999810883114147	WITHOUT_CLASSIFICATION	1.8911688585325907E-5	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9996891381186653	WITHOUT_CLASSIFICATION	3.108618813346303E-4	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999993598454188	WITHOUT_CLASSIFICATION	6.401545813633858E-7	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.7073046544228399	DEFECT	0.2926953455771601	WITHOUT_CLASSIFICATION
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.6350722297862548	WITHOUT_CLASSIFICATION	0.3649277702137451	DEFECT
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9608555889528356	WITHOUT_CLASSIFICATION	0.03914441104716435	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.6639253250828613	DEFECT	0.33607467491713877	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.8884444837784736	DEFECT	0.11155551622152629	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.993480052694817	WITHOUT_CLASSIFICATION	0.00651994730518296	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.8559663769239201	WITHOUT_CLASSIFICATION	0.14403362307607998	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9981637163089595	WITHOUT_CLASSIFICATION	0.0018362836910405373	DEFECT
// FIXME: not correct exception	DEFECT	0.8251164527555115	DEFECT	0.1748835472444886	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9998582394001543	WITHOUT_CLASSIFICATION	1.4176059984579003E-4	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9976239996749058	WITHOUT_CLASSIFICATION	0.002376000325094179	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.992419209106646	WITHOUT_CLASSIFICATION	0.00758079089335388	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9980539856821597	WITHOUT_CLASSIFICATION	0.0019460143178401997	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.8248061995568384	WITHOUT_CLASSIFICATION	0.17519380044316157	DEFECT
// TODO: sys fail	DEFECT	0.9870362206097782	WITHOUT_CLASSIFICATION	0.01296377939022168	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9974577044444723	WITHOUT_CLASSIFICATION	0.0025422955555277154	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9974577044444723	WITHOUT_CLASSIFICATION	0.0025422955555277154	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9998936934930431	WITHOUT_CLASSIFICATION	1.0630650695684594E-4	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9990619437206236	WITHOUT_CLASSIFICATION	9.380562793763022E-4	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9988006711725509	WITHOUT_CLASSIFICATION	0.001199328827449129	DEFECT
// ENEBO: Very wrong	DEFECT	0.9999852573472601	WITHOUT_CLASSIFICATION	1.4742652740001046E-5	DEFECT
// ENEBO: Very wrong	DEFECT	0.9999852573472601	WITHOUT_CLASSIFICATION	1.4742652740001046E-5	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9583474385449571	WITHOUT_CLASSIFICATION	0.04165256145504291	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9825773288614543	WITHOUT_CLASSIFICATION	0.017422671138545696	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9866574377662048	WITHOUT_CLASSIFICATION	0.013342562233795234	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.9351788576077755	WITHOUT_CLASSIFICATION	0.0648211423922245	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.9634504809115612	WITHOUT_CLASSIFICATION	0.03654951908843883	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.6079744716182853	WITHOUT_CLASSIFICATION	0.39202552838171467	DEFECT
// TODO: proper sign	DEFECT	0.9995385152883647	WITHOUT_CLASSIFICATION	4.6148471163523047E-4	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9992451673761593	DEFECT	7.548326238406815E-4	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.6770989495492712	WITHOUT_CLASSIFICATION	0.3229010504507288	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.8662721984958713	WITHOUT_CLASSIFICATION	0.13372780150412872	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.887205278403168	DEFECT	0.11279472159683199	WITHOUT_CLASSIFICATION
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.6288141007028322	WITHOUT_CLASSIFICATION	0.3711858992971678	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.9493733056630603	DEFECT	0.05062669433693959	WITHOUT_CLASSIFICATION
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.6455230020203968	WITHOUT_CLASSIFICATION	0.35447699797960314	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.7746935859324559	DEFECT	0.22530641406754406	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.5867141899179724	WITHOUT_CLASSIFICATION	0.4132858100820276	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9701767986492428	WITHOUT_CLASSIFICATION	0.029823201350757184	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.8124954544063487	DEFECT	0.1875045455936512	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9744399488360175	WITHOUT_CLASSIFICATION	0.025560051163982453	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.999983402656315	WITHOUT_CLASSIFICATION	1.6597343684990224E-5	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9929248041819417	WITHOUT_CLASSIFICATION	0.007075195818058209	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9929248041819417	WITHOUT_CLASSIFICATION	0.007075195818058209	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9968444484783459	WITHOUT_CLASSIFICATION	0.003155551521654204	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9996114062345349	WITHOUT_CLASSIFICATION	3.8859376546512364E-4	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9821284553420588	DEFECT	0.017871544657941173	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.96724602055263	WITHOUT_CLASSIFICATION	0.03275397944737001	DEFECT
// FIXME: This is wrong	DEFECT	0.7798759307042594	WITHOUT_CLASSIFICATION	0.22012406929574058	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.8037294459348631	WITHOUT_CLASSIFICATION	0.1962705540651369	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.999983006789806	WITHOUT_CLASSIFICATION	1.6993210194039418E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.5935532732597188	WITHOUT_CLASSIFICATION	0.40644672674028104	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9993345482310424	WITHOUT_CLASSIFICATION	6.654517689576318E-4	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9998922755415459	WITHOUT_CLASSIFICATION	1.0772445845417714E-4	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9917357032507857	WITHOUT_CLASSIFICATION	0.008264296749214296	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9762515569060239	WITHOUT_CLASSIFICATION	0.02374844309397604	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9762515569060239	WITHOUT_CLASSIFICATION	0.02374844309397604	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.8512635191624189	DEFECT	0.148736480837581	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9978398857291976	WITHOUT_CLASSIFICATION	0.0021601142708024984	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.8130160455174026	WITHOUT_CLASSIFICATION	0.18698395448259744	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9986164462149059	WITHOUT_CLASSIFICATION	0.0013835537850940339	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.8222395020440184	DEFECT	0.1777604979559815	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.8963379491373443	DEFECT	0.10366205086265576	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9989330893106881	WITHOUT_CLASSIFICATION	0.0010669106893119546	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.5667805959223478	WITHOUT_CLASSIFICATION	0.4332194040776524	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9968444484783459	WITHOUT_CLASSIFICATION	0.003155551521654204	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9909416287631523	WITHOUT_CLASSIFICATION	0.0090583712368476	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.6648135710830845	WITHOUT_CLASSIFICATION	0.3351864289169156	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.8650205434162208	WITHOUT_CLASSIFICATION	0.13497945658377916	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.9351788576077755	WITHOUT_CLASSIFICATION	0.0648211423922245	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9250678734609061	WITHOUT_CLASSIFICATION	0.07493212653909391	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.895290551514852	DEFECT	0.10470944848514797	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.5867141899179724	WITHOUT_CLASSIFICATION	0.4132858100820276	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9983869817725614	WITHOUT_CLASSIFICATION	0.0016130182274387045	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9917357032507857	WITHOUT_CLASSIFICATION	0.008264296749214296	DEFECT
// TODO: we loose encoding information here, fix it	DEFECT	0.7733900501886923	WITHOUT_CLASSIFICATION	0.22660994981130764	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// TODO: don't require pop	DEFECT	0.9171190593671434	WITHOUT_CLASSIFICATION	0.08288094063285652	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.5935532732597188	WITHOUT_CLASSIFICATION	0.40644672674028104	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.5713884449149809	WITHOUT_CLASSIFICATION	0.42861155508501897	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9762515569060239	WITHOUT_CLASSIFICATION	0.02374844309397604	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9762515569060239	WITHOUT_CLASSIFICATION	0.02374844309397604	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9978398857291976	WITHOUT_CLASSIFICATION	0.0021601142708024984	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9978398857291976	WITHOUT_CLASSIFICATION	0.0021601142708024984	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9978398857291976	WITHOUT_CLASSIFICATION	0.0021601142708024984	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9978398857291976	WITHOUT_CLASSIFICATION	0.0021601142708024984	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9978398857291976	WITHOUT_CLASSIFICATION	0.0021601142708024984	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9978398857291976	WITHOUT_CLASSIFICATION	0.0021601142708024984	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9797127232535776	WITHOUT_CLASSIFICATION	0.020287276746422438	DEFECT
