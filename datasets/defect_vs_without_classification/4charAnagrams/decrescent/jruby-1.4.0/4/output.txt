// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.999999997234948	WITHOUT_CLASSIFICATION	2.765052047785108E-9	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999825608137036	WITHOUT_CLASSIFICATION	1.743918629640802E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997551510233428	WITHOUT_CLASSIFICATION	2.4484897665719184E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997551510233428	WITHOUT_CLASSIFICATION	2.4484897665719184E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999605425175059	WITHOUT_CLASSIFICATION	3.945748249412779E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999605425175059	WITHOUT_CLASSIFICATION	3.945748249412779E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998044705996263	WITHOUT_CLASSIFICATION	1.9552940037369498E-4	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999983325150117	WITHOUT_CLASSIFICATION	1.6674849882221995E-6	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999724474342508	WITHOUT_CLASSIFICATION	2.7552565749249E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999713329801511	WITHOUT_CLASSIFICATION	2.8667019848966477E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998248081158595	WITHOUT_CLASSIFICATION	1.7519188414048416E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998248081158595	WITHOUT_CLASSIFICATION	1.7519188414048416E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999878574147357	WITHOUT_CLASSIFICATION	1.2142585264253809E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997388133518124	WITHOUT_CLASSIFICATION	2.6118664818761096E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997388133518124	WITHOUT_CLASSIFICATION	2.6118664818761096E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999165420151205	WITHOUT_CLASSIFICATION	8.345798487953094E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999379335658364	WITHOUT_CLASSIFICATION	6.206643416355152E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998991019352996	WITHOUT_CLASSIFICATION	1.0089806470035913E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998991019352996	WITHOUT_CLASSIFICATION	1.0089806470035913E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998991019352996	WITHOUT_CLASSIFICATION	1.0089806470035913E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998991019352996	WITHOUT_CLASSIFICATION	1.0089806470035913E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998991019352996	WITHOUT_CLASSIFICATION	1.0089806470035913E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998991019352996	WITHOUT_CLASSIFICATION	1.0089806470035913E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998991019352996	WITHOUT_CLASSIFICATION	1.0089806470035913E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999833960547599	WITHOUT_CLASSIFICATION	1.6603945240065036E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999833960547599	WITHOUT_CLASSIFICATION	1.6603945240065036E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999833960547599	WITHOUT_CLASSIFICATION	1.6603945240065036E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999833960547599	WITHOUT_CLASSIFICATION	1.6603945240065036E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999833960547599	WITHOUT_CLASSIFICATION	1.6603945240065036E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999833960547599	WITHOUT_CLASSIFICATION	1.6603945240065036E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999833960547599	WITHOUT_CLASSIFICATION	1.6603945240065036E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999054264100259	WITHOUT_CLASSIFICATION	9.457358997399716E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999054264100259	WITHOUT_CLASSIFICATION	9.457358997399716E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999054264100259	WITHOUT_CLASSIFICATION	9.457358997399716E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999054264100259	WITHOUT_CLASSIFICATION	9.457358997399716E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999054264100259	WITHOUT_CLASSIFICATION	9.457358997399716E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999054264100259	WITHOUT_CLASSIFICATION	9.457358997399716E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999928662375921	WITHOUT_CLASSIFICATION	7.133762407893523E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999928662375921	WITHOUT_CLASSIFICATION	7.133762407893523E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999928662375921	WITHOUT_CLASSIFICATION	7.133762407893523E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999928662375921	WITHOUT_CLASSIFICATION	7.133762407893523E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999928662375921	WITHOUT_CLASSIFICATION	7.133762407893523E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999928662375921	WITHOUT_CLASSIFICATION	7.133762407893523E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998936401359434	WITHOUT_CLASSIFICATION	1.0635986405659086E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998936401359434	WITHOUT_CLASSIFICATION	1.0635986405659086E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998936401359434	WITHOUT_CLASSIFICATION	1.0635986405659086E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998936401359434	WITHOUT_CLASSIFICATION	1.0635986405659086E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998936401359434	WITHOUT_CLASSIFICATION	1.0635986405659086E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998936401359434	WITHOUT_CLASSIFICATION	1.0635986405659086E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998936401359434	WITHOUT_CLASSIFICATION	1.0635986405659086E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998983396062114	WITHOUT_CLASSIFICATION	1.0166039378857255E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998983396062114	WITHOUT_CLASSIFICATION	1.0166039378857255E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998983396062114	WITHOUT_CLASSIFICATION	1.0166039378857255E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998983396062114	WITHOUT_CLASSIFICATION	1.0166039378857255E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999895835142635	WITHOUT_CLASSIFICATION	1.0416485736547054E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999895835142635	WITHOUT_CLASSIFICATION	1.0416485736547054E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999965957341657	WITHOUT_CLASSIFICATION	3.404265834345896E-6	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999992280480535	WITHOUT_CLASSIFICATION	7.719519464401496E-7	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999975815543377	WITHOUT_CLASSIFICATION	2.418445662344451E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999999118016016	WITHOUT_CLASSIFICATION	8.819839838647649E-8	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999997042996603	WITHOUT_CLASSIFICATION	2.957003396487571E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999992964837067	WITHOUT_CLASSIFICATION	7.0351629329672665E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999992964837067	WITHOUT_CLASSIFICATION	7.0351629329672665E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999992964837067	WITHOUT_CLASSIFICATION	7.0351629329672665E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999992964837067	WITHOUT_CLASSIFICATION	7.0351629329672665E-6	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9995979043220276	WITHOUT_CLASSIFICATION	4.02095677972504E-4	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.999914892005327	WITHOUT_CLASSIFICATION	8.510799467293713E-5	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999970403410271	WITHOUT_CLASSIFICATION	2.959658972993774E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.999998940289692	WITHOUT_CLASSIFICATION	1.0597103080444825E-6	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999998172563214	WITHOUT_CLASSIFICATION	1.8274367855717698E-7	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999774183085196	WITHOUT_CLASSIFICATION	2.258169148028599E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999876602621635	WITHOUT_CLASSIFICATION	1.2339737836486841E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999998905758439	WITHOUT_CLASSIFICATION	1.0942415613316845E-7	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999998281551089	WITHOUT_CLASSIFICATION	1.7184489113384726E-7	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9998666373813156	WITHOUT_CLASSIFICATION	1.3336261868435588E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999975828452617	WITHOUT_CLASSIFICATION	2.4171547383129586E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999746979167702	WITHOUT_CLASSIFICATION	2.530208322979213E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9998866541736265	WITHOUT_CLASSIFICATION	1.1334582637356843E-4	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.999999974605328	WITHOUT_CLASSIFICATION	2.5394671990273168E-8	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999950575252057	WITHOUT_CLASSIFICATION	4.942474794305594E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.999983373748605	WITHOUT_CLASSIFICATION	1.6626251394995176E-5	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999844785537749	WITHOUT_CLASSIFICATION	1.5521446225125317E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999992964837067	WITHOUT_CLASSIFICATION	7.0351629329672665E-6	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.999992524556073	WITHOUT_CLASSIFICATION	7.475443926935628E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999995250618053	WITHOUT_CLASSIFICATION	4.749381946938297E-7	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999890320012613	WITHOUT_CLASSIFICATION	1.096799873857219E-5	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999971424192944	WITHOUT_CLASSIFICATION	2.857580705497539E-6	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9997250222951833	WITHOUT_CLASSIFICATION	2.749777048166661E-4	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999809978357996	WITHOUT_CLASSIFICATION	1.9002164200324645E-5	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999999043008336	WITHOUT_CLASSIFICATION	9.569916630214724E-8	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999999046839575	WITHOUT_CLASSIFICATION	9.531604258117183E-8	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999999779136118	WITHOUT_CLASSIFICATION	2.2086388111595877E-8	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9996111802578667	WITHOUT_CLASSIFICATION	3.8881974213329014E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9988785619679976	WITHOUT_CLASSIFICATION	0.0011214380320024278	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999950309222639	WITHOUT_CLASSIFICATION	4.969077736098978E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999949039305945	WITHOUT_CLASSIFICATION	5.0960694054817475E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999998507744728	WITHOUT_CLASSIFICATION	1.492255272539604E-7	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999952081444144	WITHOUT_CLASSIFICATION	4.79185558557285E-6	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999879265754517	WITHOUT_CLASSIFICATION	1.2073424548332373E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999941224546208	WITHOUT_CLASSIFICATION	5.877545379173189E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999994309021794	WITHOUT_CLASSIFICATION	5.690978207005851E-7	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999744717611889	WITHOUT_CLASSIFICATION	2.552823881110097E-5	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999993618719751	WITHOUT_CLASSIFICATION	6.381280249461419E-7	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.8256962296123223	WITHOUT_CLASSIFICATION	0.17430377038767766	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999956377346321	WITHOUT_CLASSIFICATION	4.362265367960728E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999989895843223	WITHOUT_CLASSIFICATION	1.010415677610699E-6	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999955738900477	WITHOUT_CLASSIFICATION	4.426109952375539E-6	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.999950697414178	WITHOUT_CLASSIFICATION	4.9302585822049016E-5	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9998560247785312	WITHOUT_CLASSIFICATION	1.4397522146881374E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999902197924735	WITHOUT_CLASSIFICATION	9.78020752652202E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999985978049847	WITHOUT_CLASSIFICATION	1.4021950152938954E-6	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999995566668396	WITHOUT_CLASSIFICATION	4.433331603546183E-7	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999983247866046	WITHOUT_CLASSIFICATION	1.675213395392146E-6	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999469299994129	WITHOUT_CLASSIFICATION	5.307000058716673E-5	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.999997934578662	WITHOUT_CLASSIFICATION	2.065421337932053E-6	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999990006806152	WITHOUT_CLASSIFICATION	9.993193848301083E-7	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999898786495051	WITHOUT_CLASSIFICATION	1.0121350494973368E-5	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9993017959937481	WITHOUT_CLASSIFICATION	6.98204006251852E-4	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999997118608329	WITHOUT_CLASSIFICATION	2.881391670623628E-7	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999982249714575	WITHOUT_CLASSIFICATION	1.7750285424830177E-6	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999987308582821	WITHOUT_CLASSIFICATION	1.2691417179706105E-6	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999998458087079	WITHOUT_CLASSIFICATION	1.541912921397125E-7	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999986722049831	WITHOUT_CLASSIFICATION	1.3277950169441704E-6	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999992883359167	WITHOUT_CLASSIFICATION	7.116640832832341E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999983788244292	WITHOUT_CLASSIFICATION	1.6211755708656142E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9982054246923189	WITHOUT_CLASSIFICATION	0.0017945753076811682	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999988217118356	WITHOUT_CLASSIFICATION	1.178288164307107E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999988217118356	WITHOUT_CLASSIFICATION	1.178288164307107E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999999519606778	WITHOUT_CLASSIFICATION	4.803932210699505E-8	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999995214200039	WITHOUT_CLASSIFICATION	4.785799960379945E-7	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999928310364963	WITHOUT_CLASSIFICATION	7.168963503698828E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9998590280567367	WITHOUT_CLASSIFICATION	1.4097194326343347E-4	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999408372151277	WITHOUT_CLASSIFICATION	5.9162784872209286E-5	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9998680553108102	WITHOUT_CLASSIFICATION	1.3194468918968275E-4	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999668923540614	WITHOUT_CLASSIFICATION	3.31076459385631E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999802095884253	WITHOUT_CLASSIFICATION	1.97904115747174E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999983788244292	WITHOUT_CLASSIFICATION	1.6211755708656142E-6	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999994823000133	WITHOUT_CLASSIFICATION	5.176999867237388E-7	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999841206848041	WITHOUT_CLASSIFICATION	1.5879315195925053E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999985995159394	WITHOUT_CLASSIFICATION	1.4004840605455076E-6	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999999897729547	WITHOUT_CLASSIFICATION	1.0227045446106684E-8	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999999959022802	WITHOUT_CLASSIFICATION	4.09771985015942E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.999999982198199	WITHOUT_CLASSIFICATION	1.7801801057374252E-8	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.999999982198199	WITHOUT_CLASSIFICATION	1.7801801057374252E-8	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.999999982198199	WITHOUT_CLASSIFICATION	1.7801801057374252E-8	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999995916356099	WITHOUT_CLASSIFICATION	4.0836439009413964E-7	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.999999985359694	WITHOUT_CLASSIFICATION	1.4640305963549425E-8	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999997177109512	WITHOUT_CLASSIFICATION	2.822890487753228E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.8765349286951333	WITHOUT_CLASSIFICATION	0.12346507130486682	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9996225363688698	WITHOUT_CLASSIFICATION	3.774636311301528E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999998978536836	WITHOUT_CLASSIFICATION	1.02146316338991E-7	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9991607573202816	WITHOUT_CLASSIFICATION	8.392426797183352E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999997231043866	WITHOUT_CLASSIFICATION	2.7689561353758536E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999983031408537	WITHOUT_CLASSIFICATION	1.6968591463468355E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999983031408537	WITHOUT_CLASSIFICATION	1.6968591463468355E-6	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999989201678928	WITHOUT_CLASSIFICATION	1.0798321071771367E-6	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999783638538	WITHOUT_CLASSIFICATION	2.1636146216726313E-8	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.99999429328963	WITHOUT_CLASSIFICATION	5.706710370017683E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.99999429328963	WITHOUT_CLASSIFICATION	5.706710370017683E-6	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999917341316592	WITHOUT_CLASSIFICATION	8.265868340851268E-6	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.999999940104186	WITHOUT_CLASSIFICATION	5.989581392870173E-8	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999873911682907	WITHOUT_CLASSIFICATION	1.2608831709416187E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999966170429293	WITHOUT_CLASSIFICATION	3.3829570706392765E-6	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999913531912293	WITHOUT_CLASSIFICATION	8.646808770651496E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.999996972137897	WITHOUT_CLASSIFICATION	3.0278621030132863E-6	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999952238200304	WITHOUT_CLASSIFICATION	4.776179969641325E-6	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999778419049147	WITHOUT_CLASSIFICATION	2.2158095085319752E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.999999800877884	WITHOUT_CLASSIFICATION	1.9912211599121703E-7	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999959329940971	WITHOUT_CLASSIFICATION	4.0670059030201375E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999983788244292	WITHOUT_CLASSIFICATION	1.6211755708656142E-6	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999979097720486	WITHOUT_CLASSIFICATION	2.090227951419647E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999998590752022	WITHOUT_CLASSIFICATION	1.4092479781954935E-7	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.99999676003837	WITHOUT_CLASSIFICATION	3.2399616300962126E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9653132341732463	WITHOUT_CLASSIFICATION	0.03468676582675375	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.999994655520928	WITHOUT_CLASSIFICATION	5.344479071886977E-6	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999479512723444	WITHOUT_CLASSIFICATION	5.204872765573622E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999181009596804	WITHOUT_CLASSIFICATION	8.189904031959862E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998853226548547	WITHOUT_CLASSIFICATION	1.1467734514529239E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999996586083993	WITHOUT_CLASSIFICATION	3.413916005788548E-7	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9998763241109148	WITHOUT_CLASSIFICATION	1.2367588908516761E-4	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999989826388546	WITHOUT_CLASSIFICATION	1.0173611454224932E-6	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999993749394265	WITHOUT_CLASSIFICATION	6.250605735720815E-7	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.999999350788418	WITHOUT_CLASSIFICATION	6.492115819310317E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999996714964758	WITHOUT_CLASSIFICATION	3.28503524095842E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999966467337265	WITHOUT_CLASSIFICATION	3.3532662734284645E-6	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999952898414441	WITHOUT_CLASSIFICATION	4.710158555841212E-6	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999999710559533	WITHOUT_CLASSIFICATION	2.894404664122728E-8	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999999653691651	WITHOUT_CLASSIFICATION	3.4630834775112155E-8	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999994114067089	WITHOUT_CLASSIFICATION	5.88593291042006E-7	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999972417132	WITHOUT_CLASSIFICATION	2.7582868465742077E-9	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999934543156459	WITHOUT_CLASSIFICATION	6.545684354109828E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999990534696944	WITHOUT_CLASSIFICATION	9.465303055538063E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999998403444971	WITHOUT_CLASSIFICATION	1.5965550290724826E-7	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999993541948735	WITHOUT_CLASSIFICATION	6.458051265594618E-7	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999944184309258	WITHOUT_CLASSIFICATION	5.581569074185854E-6	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999963612888814	WITHOUT_CLASSIFICATION	3.638711118591649E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999912150041992	WITHOUT_CLASSIFICATION	8.784995800861724E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999995611670528	WITHOUT_CLASSIFICATION	4.388329472659229E-7	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999993212846624	WITHOUT_CLASSIFICATION	6.787153377126822E-7	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999997624998304	WITHOUT_CLASSIFICATION	2.3750016956335987E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999941181985008	WITHOUT_CLASSIFICATION	5.881801499100632E-6	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999996712157586	WITHOUT_CLASSIFICATION	3.287842413162423E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999945028996752	WITHOUT_CLASSIFICATION	5.497100324757167E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999706720173077	WITHOUT_CLASSIFICATION	2.932798269227218E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.999999179933357	WITHOUT_CLASSIFICATION	8.200666430995092E-7	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999964417787283	WITHOUT_CLASSIFICATION	3.5582212718226086E-6	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999994176121578	WITHOUT_CLASSIFICATION	5.823878421713621E-7	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999175137925705	WITHOUT_CLASSIFICATION	8.248620742934469E-5	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999999559860774	WITHOUT_CLASSIFICATION	4.401392257914083E-8	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999947965822802	WITHOUT_CLASSIFICATION	5.203417719847777E-6	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999999228878368	WITHOUT_CLASSIFICATION	7.711216329405995E-8	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999999139210196	WITHOUT_CLASSIFICATION	8.607898040050487E-8	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999999839357441	WITHOUT_CLASSIFICATION	1.6064256013507743E-8	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999999231314683	WITHOUT_CLASSIFICATION	7.686853158857384E-8	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.999969606057027	WITHOUT_CLASSIFICATION	3.039394297291231E-5	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999987371955095	WITHOUT_CLASSIFICATION	1.2628044905216903E-6	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999991111763101	WITHOUT_CLASSIFICATION	8.888236899438772E-7	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999985921905219	WITHOUT_CLASSIFICATION	1.40780947818686E-6	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.999998081348181	WITHOUT_CLASSIFICATION	1.9186518189933637E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999994062901751	WITHOUT_CLASSIFICATION	5.937098249025676E-7	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.999995542665126	WITHOUT_CLASSIFICATION	4.457334873994125E-6	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999869720210414	WITHOUT_CLASSIFICATION	1.3027978958550896E-5	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999933092263877	WITHOUT_CLASSIFICATION	6.690773612343148E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999991491513565	WITHOUT_CLASSIFICATION	8.508486435655203E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999887108872098	WITHOUT_CLASSIFICATION	1.1289112790260614E-5	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999552679207735	WITHOUT_CLASSIFICATION	4.473207922644617E-5	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9999962496320505	WITHOUT_CLASSIFICATION	3.75036794947743E-6	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999369885022307	WITHOUT_CLASSIFICATION	6.30114977693182E-5	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999998826767553	WITHOUT_CLASSIFICATION	1.1732324472216426E-7	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999999402499089	WITHOUT_CLASSIFICATION	5.975009107604019E-8	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999906258486264	WITHOUT_CLASSIFICATION	9.374151373612203E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999906258486264	WITHOUT_CLASSIFICATION	9.374151373612203E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999969920989006	WITHOUT_CLASSIFICATION	3.007901099445305E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999969920989006	WITHOUT_CLASSIFICATION	3.007901099445305E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999920809228956	WITHOUT_CLASSIFICATION	7.919077104306836E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999920809228956	WITHOUT_CLASSIFICATION	7.919077104306836E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999787374830605	WITHOUT_CLASSIFICATION	2.1262516939426324E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999787374830605	WITHOUT_CLASSIFICATION	2.1262516939426324E-5	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999989389685641	WITHOUT_CLASSIFICATION	1.0610314359762737E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999997498655098	WITHOUT_CLASSIFICATION	2.501344902800185E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999981416013681	WITHOUT_CLASSIFICATION	1.8583986317669838E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999200184793459	WITHOUT_CLASSIFICATION	7.998152065406669E-5	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9998214797497276	WITHOUT_CLASSIFICATION	1.785202502725079E-4	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9997978625182891	WITHOUT_CLASSIFICATION	2.0213748171093125E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999973777395401	WITHOUT_CLASSIFICATION	2.6222604598365557E-6	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999997777668275	WITHOUT_CLASSIFICATION	2.2223317241455017E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.999999881430888	WITHOUT_CLASSIFICATION	1.1856911195775913E-7	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999997956765777	WITHOUT_CLASSIFICATION	2.04323422280443E-7	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999999656641099	WITHOUT_CLASSIFICATION	3.43358901635386E-8	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999999242853649	WITHOUT_CLASSIFICATION	7.57146350725549E-8	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999996654474884	WITHOUT_CLASSIFICATION	3.345525116363493E-7	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999999734567911	WITHOUT_CLASSIFICATION	2.6543208910189542E-8	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999976934839451	WITHOUT_CLASSIFICATION	2.3065160549502514E-6	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999988501719663	WITHOUT_CLASSIFICATION	1.149828033676539E-6	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.999999684329188	WITHOUT_CLASSIFICATION	3.156708120216862E-7	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999992515020644	WITHOUT_CLASSIFICATION	7.484979355886997E-7	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999737037834786	WITHOUT_CLASSIFICATION	2.629621652137085E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9982188196080247	WITHOUT_CLASSIFICATION	0.0017811803919753624	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999993551366317	WITHOUT_CLASSIFICATION	6.44863368303809E-7	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999997944531369	WITHOUT_CLASSIFICATION	2.0554686314169306E-7	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999987325043947	WITHOUT_CLASSIFICATION	1.26749560529612E-6	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999914714606359	WITHOUT_CLASSIFICATION	8.528539364079734E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999961960330614	WITHOUT_CLASSIFICATION	3.803966938499007E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999997884300251	WITHOUT_CLASSIFICATION	2.1156997478141523E-7	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999966702975038	WITHOUT_CLASSIFICATION	3.329702496094221E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999991936957311	WITHOUT_CLASSIFICATION	8.063042688851336E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999991936957311	WITHOUT_CLASSIFICATION	8.063042688851336E-7	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999999803475988	WITHOUT_CLASSIFICATION	1.965240120444235E-8	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999990380116697	WITHOUT_CLASSIFICATION	9.619883303752111E-7	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999986858710342	WITHOUT_CLASSIFICATION	1.3141289657401708E-6	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999542630693136	WITHOUT_CLASSIFICATION	4.5736930686467445E-5	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999979125076188	WITHOUT_CLASSIFICATION	2.087492381143442E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999989806670526	WITHOUT_CLASSIFICATION	1.0193329474548212E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999871918182947	WITHOUT_CLASSIFICATION	1.2808181705324578E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999871918182947	WITHOUT_CLASSIFICATION	1.2808181705324578E-5	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999997958857072	WITHOUT_CLASSIFICATION	2.041142928987113E-7	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9990021394168982	WITHOUT_CLASSIFICATION	9.978605831018192E-4	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999981506092783	WITHOUT_CLASSIFICATION	1.8493907216602278E-6	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999981506092783	WITHOUT_CLASSIFICATION	1.8493907216602278E-6	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9999665981306395	WITHOUT_CLASSIFICATION	3.34018693605554E-5	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9984464703938328	WITHOUT_CLASSIFICATION	0.0015535296061671244	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9984464703938328	WITHOUT_CLASSIFICATION	0.0015535296061671244	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999987777076822	WITHOUT_CLASSIFICATION	1.222292317729695E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999987777076822	WITHOUT_CLASSIFICATION	1.222292317729695E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999702121944742	WITHOUT_CLASSIFICATION	2.978780552575257E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999702121944742	WITHOUT_CLASSIFICATION	2.978780552575257E-5	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999883658508578	WITHOUT_CLASSIFICATION	1.163414914204947E-5	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999988547051816	WITHOUT_CLASSIFICATION	1.1452948184206187E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999999357388685	WITHOUT_CLASSIFICATION	6.42611315794538E-8	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999984146472958	WITHOUT_CLASSIFICATION	1.5853527041840677E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999999059994449	WITHOUT_CLASSIFICATION	9.400055519251816E-8	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.999999217112085	WITHOUT_CLASSIFICATION	7.828879149586678E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999967196740142	WITHOUT_CLASSIFICATION	3.2803259858747274E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999910192962173	WITHOUT_CLASSIFICATION	8.980703782809395E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999967196740142	WITHOUT_CLASSIFICATION	3.2803259858747274E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999943690634193	WITHOUT_CLASSIFICATION	5.630936580670394E-6	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999985994377343	WITHOUT_CLASSIFICATION	1.4005622657412644E-6	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999999537598507	WITHOUT_CLASSIFICATION	4.6240149229006396E-8	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.999992610773892	WITHOUT_CLASSIFICATION	7.389226108033316E-6	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999999112783425	WITHOUT_CLASSIFICATION	8.872165739312757E-8	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9996049735115352	WITHOUT_CLASSIFICATION	3.950264884647504E-4	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999929391822306	WITHOUT_CLASSIFICATION	7.0608177693057245E-6	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999987652540161	WITHOUT_CLASSIFICATION	1.234745983939893E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999914350580899	WITHOUT_CLASSIFICATION	8.564941910164485E-6	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999986622663753	WITHOUT_CLASSIFICATION	1.3377336245818931E-6	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999995830663077	WITHOUT_CLASSIFICATION	4.169336922431121E-7	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999993429475278	WITHOUT_CLASSIFICATION	6.57052472322112E-7	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999894291022673	WITHOUT_CLASSIFICATION	1.0570897732606681E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999996902005908	WITHOUT_CLASSIFICATION	3.097994092016331E-7	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.999994697852875	WITHOUT_CLASSIFICATION	5.302147125041808E-6	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999999198389677	WITHOUT_CLASSIFICATION	8.016103227778224E-8	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999831816658183	WITHOUT_CLASSIFICATION	1.6818334181666156E-5	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999996296030472	WITHOUT_CLASSIFICATION	3.703969527784441E-7	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999987526745949	WITHOUT_CLASSIFICATION	1.2473254050967448E-6	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999989726391977	WITHOUT_CLASSIFICATION	1.027360802323296E-6	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999685069954909	WITHOUT_CLASSIFICATION	3.149300450907551E-5	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999997929627832	WITHOUT_CLASSIFICATION	2.0703721683393053E-7	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999928522108161	WITHOUT_CLASSIFICATION	7.147789183901554E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999846932769629	WITHOUT_CLASSIFICATION	1.5306723037024406E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999995458364451	WITHOUT_CLASSIFICATION	4.5416355486659847E-7	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999998446991333	WITHOUT_CLASSIFICATION	1.5530086668634676E-7	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999999898324566	WITHOUT_CLASSIFICATION	1.0167543360755162E-8	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999999915198955	WITHOUT_CLASSIFICATION	8.480104609756321E-9	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999990085425788	WITHOUT_CLASSIFICATION	9.9145742113999E-7	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999992593521299	WITHOUT_CLASSIFICATION	7.406478702102216E-7	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999990429099155	WITHOUT_CLASSIFICATION	9.570900845839004E-7	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999998409413231	WITHOUT_CLASSIFICATION	1.5905867679539158E-7	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999998695876166	WITHOUT_CLASSIFICATION	1.3041238338476395E-7	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999986930325242	WITHOUT_CLASSIFICATION	1.3069674757830447E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999892737061155	WITHOUT_CLASSIFICATION	1.0726293884490183E-5	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999972007327455	WITHOUT_CLASSIFICATION	2.799267254523833E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999990880071458	WITHOUT_CLASSIFICATION	9.119928543582541E-7	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999967980616647	WITHOUT_CLASSIFICATION	3.2019383352077908E-6	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999996982899305	WITHOUT_CLASSIFICATION	3.017100694463673E-7	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999979984905537	WITHOUT_CLASSIFICATION	2.0015094462837137E-6	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999998955494238	WITHOUT_CLASSIFICATION	1.044505762287994E-7	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999886415609575	WITHOUT_CLASSIFICATION	1.1358439042636843E-5	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999993489172958	WITHOUT_CLASSIFICATION	6.510827041785976E-7	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.999999530785721	WITHOUT_CLASSIFICATION	4.6921427888132445E-7	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999999185425561	WITHOUT_CLASSIFICATION	8.145744383350926E-8	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999998499244411	WITHOUT_CLASSIFICATION	1.500755588738631E-7	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999998835503147	WITHOUT_CLASSIFICATION	1.1644968540251017E-7	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999989958934792	WITHOUT_CLASSIFICATION	1.0041065207777331E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999403146059	WITHOUT_CLASSIFICATION	5.968539404305816E-8	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999991584807202	WITHOUT_CLASSIFICATION	8.415192797152349E-7	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999971328699891	WITHOUT_CLASSIFICATION	2.8671300109475714E-6	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999999989336441	WITHOUT_CLASSIFICATION	1.0663558709221658E-9	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.999678449526226	WITHOUT_CLASSIFICATION	3.215504737740457E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999996168080756	WITHOUT_CLASSIFICATION	3.8319192448763133E-7	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999560224854	WITHOUT_CLASSIFICATION	4.3977514560852406E-8	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999560224854	WITHOUT_CLASSIFICATION	4.3977514560852406E-8	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999868069389978	WITHOUT_CLASSIFICATION	1.3193061002233098E-5	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999598688085483	WITHOUT_CLASSIFICATION	4.0131191451882985E-5	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999990133413228	WITHOUT_CLASSIFICATION	9.866586771554472E-7	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999957749621207	WITHOUT_CLASSIFICATION	4.225037879369243E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9997792486532874	WITHOUT_CLASSIFICATION	2.207513467126052E-4	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999911819867527	WITHOUT_CLASSIFICATION	8.818013247209344E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999810395885429	WITHOUT_CLASSIFICATION	1.8960411457093865E-5	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999998055071239	WITHOUT_CLASSIFICATION	1.9449287614586502E-7	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.999999104359479	WITHOUT_CLASSIFICATION	8.956405210465243E-7	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999990312655628	WITHOUT_CLASSIFICATION	9.687344372588743E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999989411805833	WITHOUT_CLASSIFICATION	1.0588194166260256E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999989411805833	WITHOUT_CLASSIFICATION	1.0588194166260256E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999809083727853	WITHOUT_CLASSIFICATION	1.9091627214776018E-5	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999962572750867	WITHOUT_CLASSIFICATION	3.742724913230656E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999431802407165	WITHOUT_CLASSIFICATION	5.681975928345203E-5	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.999996962055674	WITHOUT_CLASSIFICATION	3.037944325904215E-6	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999983004782382	WITHOUT_CLASSIFICATION	1.6995217617284837E-6	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.999999974689659	WITHOUT_CLASSIFICATION	2.5310341060172363E-8	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999996522650174	WITHOUT_CLASSIFICATION	3.477349825830209E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999991198357167	WITHOUT_CLASSIFICATION	8.801642834004176E-7	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999993145033911	WITHOUT_CLASSIFICATION	6.854966089451528E-7	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999992140485141	WITHOUT_CLASSIFICATION	7.859514859739515E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999998322702676	WITHOUT_CLASSIFICATION	1.6772973242287322E-7	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.99999856990369	WITHOUT_CLASSIFICATION	1.4300963101454358E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999889016548953	WITHOUT_CLASSIFICATION	1.1098345104720863E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999889016548953	WITHOUT_CLASSIFICATION	1.1098345104720863E-5	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999948888634863	WITHOUT_CLASSIFICATION	5.1111365136570315E-6	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999987509611837	WITHOUT_CLASSIFICATION	1.2490388162582038E-6	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999974466031359	WITHOUT_CLASSIFICATION	2.553396864068987E-6	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999986295874816	WITHOUT_CLASSIFICATION	1.3704125183022905E-6	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.999998029455658	WITHOUT_CLASSIFICATION	1.9705443420222953E-6	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999996438715312	WITHOUT_CLASSIFICATION	3.5612846891021007E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999671277780766	WITHOUT_CLASSIFICATION	3.287222192331247E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999991935718909	WITHOUT_CLASSIFICATION	8.064281089981929E-7	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9999444453414378	WITHOUT_CLASSIFICATION	5.555465856214738E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999999236550879	WITHOUT_CLASSIFICATION	7.634491203775308E-8	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999431802407165	WITHOUT_CLASSIFICATION	5.681975928345203E-5	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.999978629443151	WITHOUT_CLASSIFICATION	2.137055684902586E-5	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999947519069704	WITHOUT_CLASSIFICATION	5.248093029612629E-6	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999999591454403	WITHOUT_CLASSIFICATION	4.08545597251388E-8	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999995702342175	WITHOUT_CLASSIFICATION	4.297657824728638E-7	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999999876431162	WITHOUT_CLASSIFICATION	1.2356883832926942E-8	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.999866379012432	WITHOUT_CLASSIFICATION	1.3362098756802834E-4	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999997044059381	WITHOUT_CLASSIFICATION	2.955940618551798E-7	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999971529463051	WITHOUT_CLASSIFICATION	2.847053695002547E-6	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999980700251131	WITHOUT_CLASSIFICATION	1.929974886903307E-6	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999955382226433	WITHOUT_CLASSIFICATION	4.461777356731205E-6	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999966262395539	WITHOUT_CLASSIFICATION	3.373760446165521E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999972137914828	WITHOUT_CLASSIFICATION	2.7862085172479803E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999943514375872	WITHOUT_CLASSIFICATION	5.6485624128790695E-6	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9998152993870347	WITHOUT_CLASSIFICATION	1.8470061296520682E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999893324603971	WITHOUT_CLASSIFICATION	1.066753960281872E-5	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999991491630021	WITHOUT_CLASSIFICATION	8.50836997862144E-7	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999968266743248	WITHOUT_CLASSIFICATION	3.173325675302165E-6	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999994919867818	WITHOUT_CLASSIFICATION	5.080132182494381E-7	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999908099652416	WITHOUT_CLASSIFICATION	9.190034758463208E-6	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999930502388845	WITHOUT_CLASSIFICATION	6.949761115451766E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9993668908237703	WITHOUT_CLASSIFICATION	6.331091762296863E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999998267251219	WITHOUT_CLASSIFICATION	1.7327487816305702E-7	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999890587795164	WITHOUT_CLASSIFICATION	1.0941220483530693E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9996694610272362	WITHOUT_CLASSIFICATION	3.3053897276382876E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999980491111291	WITHOUT_CLASSIFICATION	1.950888870873642E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999999996444422	WITHOUT_CLASSIFICATION	3.55557688751519E-10	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999289454159094	WITHOUT_CLASSIFICATION	7.10545840906076E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999796509110375	WITHOUT_CLASSIFICATION	2.034908896250597E-5	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999988176124721	WITHOUT_CLASSIFICATION	1.1823875279210383E-6	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9991935029355636	WITHOUT_CLASSIFICATION	8.064970644363277E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999613868955244	WITHOUT_CLASSIFICATION	3.861310447564202E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999613868955244	WITHOUT_CLASSIFICATION	3.861310447564202E-5	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999966299822638	WITHOUT_CLASSIFICATION	3.3700177361924093E-6	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999936239642577	WITHOUT_CLASSIFICATION	6.376035742331556E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999999849654562	WITHOUT_CLASSIFICATION	1.503454372934911E-8	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999949252747536	WITHOUT_CLASSIFICATION	5.074725246308471E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999982800296358	WITHOUT_CLASSIFICATION	1.7199703642668278E-6	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999984693305982	WITHOUT_CLASSIFICATION	1.5306694016970508E-6	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999983788244292	WITHOUT_CLASSIFICATION	1.6211755708656142E-6	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999995988119484	WITHOUT_CLASSIFICATION	4.011880516213079E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999922650603587	WITHOUT_CLASSIFICATION	7.73493964133908E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999926723131158	WITHOUT_CLASSIFICATION	7.3276868842132435E-6	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999916246815737	WITHOUT_CLASSIFICATION	8.375318426356138E-6	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999998677166345	WITHOUT_CLASSIFICATION	1.3228336560776779E-7	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999430922776729	WITHOUT_CLASSIFICATION	5.6907722327106713E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999947965822802	WITHOUT_CLASSIFICATION	5.203417719847777E-6	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999872375314284	WITHOUT_CLASSIFICATION	1.2762468571563375E-5	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999933012864279	WITHOUT_CLASSIFICATION	6.698713572166039E-6	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999604766095589	WITHOUT_CLASSIFICATION	3.952339044114131E-5	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999999581204185	WITHOUT_CLASSIFICATION	4.1879581456027276E-8	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.999999691108173	WITHOUT_CLASSIFICATION	3.0889182703807124E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999436286517173	WITHOUT_CLASSIFICATION	5.637134828274269E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999130909124	WITHOUT_CLASSIFICATION	8.690908761117371E-8	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999130909124	WITHOUT_CLASSIFICATION	8.690908761117371E-8	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999995226607296	WITHOUT_CLASSIFICATION	4.773392705344289E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999999951579741	WITHOUT_CLASSIFICATION	4.842025823673835E-9	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.999996477843059	WITHOUT_CLASSIFICATION	3.522156941040288E-6	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999997104490821	WITHOUT_CLASSIFICATION	2.89550917854864E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.999999929248195	WITHOUT_CLASSIFICATION	7.075180501349297E-8	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999997328971636	WITHOUT_CLASSIFICATION	2.671028364697436E-7	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999996020756121	WITHOUT_CLASSIFICATION	3.9792438789914404E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999739136013	WITHOUT_CLASSIFICATION	2.6086398695307725E-8	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999990972533656	WITHOUT_CLASSIFICATION	9.027466344100298E-7	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999999997579967	WITHOUT_CLASSIFICATION	2.4200329926764273E-10	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.999999083148694	WITHOUT_CLASSIFICATION	9.168513060215267E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999848171127159	WITHOUT_CLASSIFICATION	1.5182887284149644E-5	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999999918711032	WITHOUT_CLASSIFICATION	8.128896758375942E-9	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999928990443	WITHOUT_CLASSIFICATION	7.100955663130636E-9	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999999159725591	WITHOUT_CLASSIFICATION	8.402744097037856E-8	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999866520504003	WITHOUT_CLASSIFICATION	1.3347949599699749E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999993254942966	WITHOUT_CLASSIFICATION	6.745057032853787E-7	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999994274470021	WITHOUT_CLASSIFICATION	5.725529977822764E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999931804242496	WITHOUT_CLASSIFICATION	6.819575750362318E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999997443371961	WITHOUT_CLASSIFICATION	2.556628038860095E-7	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9996635011948691	WITHOUT_CLASSIFICATION	3.3649880513082666E-4	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999832424029339	WITHOUT_CLASSIFICATION	1.6757597066163724E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999999666508284	WITHOUT_CLASSIFICATION	3.334917176297747E-8	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9515957920874466	WITHOUT_CLASSIFICATION	0.04840420791255336	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999584940920667	WITHOUT_CLASSIFICATION	4.1505907933337674E-5	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999994848610296	WITHOUT_CLASSIFICATION	5.151389704306823E-7	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999969194943684	WITHOUT_CLASSIFICATION	3.0805056315679074E-6	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999981369378937	WITHOUT_CLASSIFICATION	1.8630621063078427E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999983959144251	WITHOUT_CLASSIFICATION	1.6040855748646961E-6	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999929912610953	WITHOUT_CLASSIFICATION	7.008738904661967E-6	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999989436067096	WITHOUT_CLASSIFICATION	1.0563932904229034E-6	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999971488202671	WITHOUT_CLASSIFICATION	2.85117973290009E-6	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999894688049136	WITHOUT_CLASSIFICATION	1.0531195086490524E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999845913820505	WITHOUT_CLASSIFICATION	1.540861794939432E-5	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9996984984097497	WITHOUT_CLASSIFICATION	3.015015902503779E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9999616350840488	WITHOUT_CLASSIFICATION	3.836491595129405E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9999202319622391	WITHOUT_CLASSIFICATION	7.97680377608701E-5	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999996073556323	WITHOUT_CLASSIFICATION	3.926443677180455E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999874199824453	WITHOUT_CLASSIFICATION	1.258001755472467E-5	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.999992812951951	WITHOUT_CLASSIFICATION	7.187048049039863E-6	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999961509817109	WITHOUT_CLASSIFICATION	3.849018289065583E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.999988502513512	WITHOUT_CLASSIFICATION	1.149748648802633E-5	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.999995071598429	WITHOUT_CLASSIFICATION	4.928401570946461E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999679598830937	WITHOUT_CLASSIFICATION	3.204011690625313E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999773683251758	WITHOUT_CLASSIFICATION	2.263167482415392E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999679598830937	WITHOUT_CLASSIFICATION	3.204011690625313E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.964862816996939	WITHOUT_CLASSIFICATION	0.035137183003061005	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9999490347744693	WITHOUT_CLASSIFICATION	5.096522553070343E-5	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999950016867513	WITHOUT_CLASSIFICATION	4.998313248735976E-6	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.977901221496435	WITHOUT_CLASSIFICATION	0.02209877850356506	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999961724860592	WITHOUT_CLASSIFICATION	3.827513940781096E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999648755599	WITHOUT_CLASSIFICATION	3.512444004582288E-8	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999969163547174	WITHOUT_CLASSIFICATION	3.0836452826306306E-6	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.999805979479352	WITHOUT_CLASSIFICATION	1.9402052064789488E-4	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999999775927214	WITHOUT_CLASSIFICATION	2.240727857332154E-8	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9934504791606442	WITHOUT_CLASSIFICATION	0.006549520839355806	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9993240914605539	WITHOUT_CLASSIFICATION	6.759085394461961E-4	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999999397904358	WITHOUT_CLASSIFICATION	6.020956414747471E-8	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.99998442798182	WITHOUT_CLASSIFICATION	1.5572018180039186E-5	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999994382556789	WITHOUT_CLASSIFICATION	5.617443211625145E-7	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999969309482104	WITHOUT_CLASSIFICATION	3.069051789656939E-6	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9998535314519953	WITHOUT_CLASSIFICATION	1.4646854800474013E-4	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999945790866737	WITHOUT_CLASSIFICATION	5.420913326350356E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999866086591378	WITHOUT_CLASSIFICATION	1.339134086210114E-5	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999954139178625	WITHOUT_CLASSIFICATION	4.586082137514552E-6	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999966222738134	WITHOUT_CLASSIFICATION	3.377726186633256E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9993667162911026	WITHOUT_CLASSIFICATION	6.332837088973541E-4	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999982738701858	WITHOUT_CLASSIFICATION	1.7261298142006475E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999774607004991	WITHOUT_CLASSIFICATION	2.253929950090043E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999998632291053	WITHOUT_CLASSIFICATION	1.367708946587139E-7	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999996524635099	WITHOUT_CLASSIFICATION	3.475364901216696E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999226949170992	WITHOUT_CLASSIFICATION	7.730508290079542E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999845893840204	WITHOUT_CLASSIFICATION	1.5410615979642446E-5	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999989180302018	WITHOUT_CLASSIFICATION	1.0819697982665845E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999975828452617	WITHOUT_CLASSIFICATION	2.4171547383129586E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999999835712711	WITHOUT_CLASSIFICATION	1.6428728857014404E-8	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999742654443177	WITHOUT_CLASSIFICATION	2.573455568242405E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999260256670386	WITHOUT_CLASSIFICATION	7.39743329614313E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999645365179377	WITHOUT_CLASSIFICATION	3.546348206234155E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999998753986019	WITHOUT_CLASSIFICATION	1.2460139811819768E-7	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999999030837265	WITHOUT_CLASSIFICATION	9.691627345490008E-8	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999999070569608	WITHOUT_CLASSIFICATION	9.294303915819862E-8	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999989104886092	WITHOUT_CLASSIFICATION	1.089511390751554E-6	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.99999998425895	WITHOUT_CLASSIFICATION	1.5741049947129472E-8	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999994387048861	WITHOUT_CLASSIFICATION	5.612951139676611E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999975386446893	WITHOUT_CLASSIFICATION	2.461355310551705E-6	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999676045218711	WITHOUT_CLASSIFICATION	3.2395478128857454E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999999800462878	WITHOUT_CLASSIFICATION	1.9953712175975097E-8	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999999709078358	WITHOUT_CLASSIFICATION	2.909216418992297E-8	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999940391721832	WITHOUT_CLASSIFICATION	5.960827816780217E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999940391721832	WITHOUT_CLASSIFICATION	5.960827816780217E-6	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999971793006317	WITHOUT_CLASSIFICATION	2.8206993681844475E-6	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999983320074202	WITHOUT_CLASSIFICATION	1.6679925799098007E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9951144533930911	WITHOUT_CLASSIFICATION	0.004885546606908834	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999974896111217	WITHOUT_CLASSIFICATION	2.5103888784149943E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999922985362819	WITHOUT_CLASSIFICATION	7.701463718205248E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999984751037153	WITHOUT_CLASSIFICATION	1.524896284712558E-6	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999990558553624	WITHOUT_CLASSIFICATION	9.44144637479179E-7	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999998431161197	WITHOUT_CLASSIFICATION	1.5688388028364723E-7	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999696996538	WITHOUT_CLASSIFICATION	3.030034613036178E-8	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999999929247996	WITHOUT_CLASSIFICATION	7.075200393274403E-9	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999998951806737	WITHOUT_CLASSIFICATION	1.0481932630187154E-7	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999993993335449	WITHOUT_CLASSIFICATION	6.006664551749125E-7	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9995595998445999	WITHOUT_CLASSIFICATION	4.404001554000902E-4	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999994187258944	WITHOUT_CLASSIFICATION	5.812741056167913E-7	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999998147650448	WITHOUT_CLASSIFICATION	1.8523495508220283E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999992692864991	WITHOUT_CLASSIFICATION	7.307135010116551E-7	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999998633749007	WITHOUT_CLASSIFICATION	1.366250992963171E-7	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999826776320504	WITHOUT_CLASSIFICATION	1.7322367949580382E-5	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999991032779817	WITHOUT_CLASSIFICATION	8.967220182913604E-7	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.999998744951769	WITHOUT_CLASSIFICATION	1.2550482310423214E-6	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.938934873917412	WITHOUT_CLASSIFICATION	0.06106512608258802	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9711971279973823	WITHOUT_CLASSIFICATION	0.028802872002617615	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999999984949581	WITHOUT_CLASSIFICATION	1.5050419016660954E-9	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999999998229343	WITHOUT_CLASSIFICATION	1.7706559485198095E-10	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9912070162755698	WITHOUT_CLASSIFICATION	0.008792983724430155	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.999999977651987	WITHOUT_CLASSIFICATION	2.234801295374638E-8	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999996449051632	WITHOUT_CLASSIFICATION	3.550948366786901E-7	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9995843047799083	WITHOUT_CLASSIFICATION	4.15695220091649E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999970525513492	WITHOUT_CLASSIFICATION	2.947448650760841E-6	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999984820574435	WITHOUT_CLASSIFICATION	1.517942556561745E-6	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999999401871834	WITHOUT_CLASSIFICATION	5.981281661275786E-8	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999970258737515	WITHOUT_CLASSIFICATION	2.974126248534354E-6	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999995622087536	WITHOUT_CLASSIFICATION	4.3779124633526175E-7	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999997566230778	WITHOUT_CLASSIFICATION	2.433769221790457E-7	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.999999560603538	WITHOUT_CLASSIFICATION	4.3939646200258843E-7	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999999331734104	WITHOUT_CLASSIFICATION	6.68265895382182E-8	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999335790900742	WITHOUT_CLASSIFICATION	6.642090992580936E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999527732294871	WITHOUT_CLASSIFICATION	4.7226770512932705E-5	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9995289294396699	WITHOUT_CLASSIFICATION	4.710705603301715E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999963701804675	WITHOUT_CLASSIFICATION	3.629819532504265E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999931612325221	WITHOUT_CLASSIFICATION	6.838767477850151E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9994674878971586	WITHOUT_CLASSIFICATION	5.32512102841552E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999198928338421	WITHOUT_CLASSIFICATION	8.010716615793668E-5	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999989955299393	WITHOUT_CLASSIFICATION	1.0044700605914824E-6	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999500263396492	WITHOUT_CLASSIFICATION	4.99736603508431E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.999997511219024	WITHOUT_CLASSIFICATION	2.488780975937608E-6	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999882161985546	WITHOUT_CLASSIFICATION	1.1783801445475566E-5	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.999997481615743	WITHOUT_CLASSIFICATION	2.518384257041513E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999896612048911	WITHOUT_CLASSIFICATION	1.0338795108964129E-5	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999985180125548	WITHOUT_CLASSIFICATION	1.481987445221507E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999930985143234	WITHOUT_CLASSIFICATION	6.901485676638126E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999949512922491	WITHOUT_CLASSIFICATION	5.0487077508379815E-6	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.999999760288311	WITHOUT_CLASSIFICATION	2.3971168907788776E-7	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999985556972466	WITHOUT_CLASSIFICATION	1.444302753413075E-6	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999975593787211	WITHOUT_CLASSIFICATION	2.440621278811233E-6	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999861861405346	WITHOUT_CLASSIFICATION	1.381385946539378E-5	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999996887267166	WITHOUT_CLASSIFICATION	3.1127328333686416E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999933156394444	WITHOUT_CLASSIFICATION	6.684360555674726E-6	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999967218643931	WITHOUT_CLASSIFICATION	3.278135606762788E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999951384865368	WITHOUT_CLASSIFICATION	4.8615134632590474E-6	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.999999345443851	WITHOUT_CLASSIFICATION	6.545561488973387E-7	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999995699617766	WITHOUT_CLASSIFICATION	4.300382234919841E-7	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999996717220498	WITHOUT_CLASSIFICATION	3.282779500653679E-7	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999981056967032	WITHOUT_CLASSIFICATION	1.8943032968178814E-6	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999995335427158	WITHOUT_CLASSIFICATION	4.6645728429114725E-7	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999916320815518	WITHOUT_CLASSIFICATION	8.367918448166815E-6	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999562423449876	WITHOUT_CLASSIFICATION	4.37576550124933E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999999914611455	WITHOUT_CLASSIFICATION	8.538854579652192E-9	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999748233865627	WITHOUT_CLASSIFICATION	2.517661343716612E-5	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.999997948890484	WITHOUT_CLASSIFICATION	2.0511095160099386E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9998617990096746	WITHOUT_CLASSIFICATION	1.382009903254046E-4	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.999987030325802	WITHOUT_CLASSIFICATION	1.2969674197865644E-5	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.999998315739907	WITHOUT_CLASSIFICATION	1.6842600930238066E-6	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999828039315509	WITHOUT_CLASSIFICATION	1.719606844904827E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9997209134843034	WITHOUT_CLASSIFICATION	2.7908651569658575E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.999754576267105	WITHOUT_CLASSIFICATION	2.454237328951123E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9996312269877946	WITHOUT_CLASSIFICATION	3.68773012205413E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9997210788704683	WITHOUT_CLASSIFICATION	2.7892112953169457E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9997362663617698	WITHOUT_CLASSIFICATION	2.6373363823015063E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9995292711975393	WITHOUT_CLASSIFICATION	4.707288024607322E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9996118688755423	WITHOUT_CLASSIFICATION	3.881311244577407E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9997347193579011	WITHOUT_CLASSIFICATION	2.652806420987792E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9997350974897335	WITHOUT_CLASSIFICATION	2.6490251026640706E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9996210379651881	WITHOUT_CLASSIFICATION	3.7896203481182524E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9995982367136518	WITHOUT_CLASSIFICATION	4.017632863482197E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9991999250869953	WITHOUT_CLASSIFICATION	8.00074913004682E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9994076527538686	WITHOUT_CLASSIFICATION	5.92347246131477E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9992206762337623	WITHOUT_CLASSIFICATION	7.79323766237731E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9993858455352871	WITHOUT_CLASSIFICATION	6.141544647128004E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9989751495970174	WITHOUT_CLASSIFICATION	0.001024850402982612	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9993043633341544	WITHOUT_CLASSIFICATION	6.956366658456419E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9985997117195283	WITHOUT_CLASSIFICATION	0.0014002882804716706	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9993079238605809	WITHOUT_CLASSIFICATION	6.92076139419064E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999999252867181	WITHOUT_CLASSIFICATION	7.471328191295105E-8	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999999226180587	WITHOUT_CLASSIFICATION	7.73819413353333E-8	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999636888729528	WITHOUT_CLASSIFICATION	3.631112704713071E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999992874331401	WITHOUT_CLASSIFICATION	7.125668598898256E-7	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9965217354962099	WITHOUT_CLASSIFICATION	0.003478264503790054	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999847966208218	WITHOUT_CLASSIFICATION	1.5203379178043625E-5	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999912441906944	WITHOUT_CLASSIFICATION	8.755809305536603E-6	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9973943158851037	WITHOUT_CLASSIFICATION	0.0026056841148962635	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.999999541907181	WITHOUT_CLASSIFICATION	4.5809281905619175E-7	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999993583359665	WITHOUT_CLASSIFICATION	6.416640334818918E-7	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.9537917220486692	WITHOUT_CLASSIFICATION	0.04620827795133077	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999997264405398	WITHOUT_CLASSIFICATION	2.7355946017687945E-7	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999828972179781	WITHOUT_CLASSIFICATION	1.7102782021944305E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999983775160785	WITHOUT_CLASSIFICATION	1.6224839216216309E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999983775160785	WITHOUT_CLASSIFICATION	1.6224839216216309E-6	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999176415940122	WITHOUT_CLASSIFICATION	8.235840598787637E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999602542687209	WITHOUT_CLASSIFICATION	3.9745731279013025E-5	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999964040897108	WITHOUT_CLASSIFICATION	3.595910289166671E-6	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999939076791906	WITHOUT_CLASSIFICATION	6.092320809403563E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.999979946539283	WITHOUT_CLASSIFICATION	2.005346071692477E-5	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999446298029472	WITHOUT_CLASSIFICATION	5.537019705275937E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999978030475325	WITHOUT_CLASSIFICATION	2.19695246752376E-6	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999988734259093	WITHOUT_CLASSIFICATION	1.1265740907364337E-6	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999999518060925	WITHOUT_CLASSIFICATION	4.819390744142248E-8	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999995558184236	WITHOUT_CLASSIFICATION	4.4418157639910345E-7	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999974795882278	WITHOUT_CLASSIFICATION	2.5204117722045694E-6	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999999571273033	WITHOUT_CLASSIFICATION	4.28726968103958E-8	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999690986215016	WITHOUT_CLASSIFICATION	3.0901378498452694E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9999958504603274	WITHOUT_CLASSIFICATION	4.1495396726209545E-6	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999999441238048	WITHOUT_CLASSIFICATION	5.587619515813487E-8	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999998811405971	WITHOUT_CLASSIFICATION	1.1885940280743708E-7	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999809978357996	WITHOUT_CLASSIFICATION	1.9002164200324645E-5	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999996291146717	WITHOUT_CLASSIFICATION	3.708853283973794E-7	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9913733142849601	WITHOUT_CLASSIFICATION	0.008626685715039962	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999334556576747	WITHOUT_CLASSIFICATION	6.65443423253312E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999961697989063	WITHOUT_CLASSIFICATION	3.830201093730184E-6	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999886943182839	WITHOUT_CLASSIFICATION	1.1305681716073787E-5	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999947346851007	WITHOUT_CLASSIFICATION	5.2653148993533E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.999998191251545	WITHOUT_CLASSIFICATION	1.8087484550397469E-6	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9997391206819002	WITHOUT_CLASSIFICATION	2.608793180997735E-4	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999996516600081	WITHOUT_CLASSIFICATION	3.483399918712754E-7	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999999337079679	WITHOUT_CLASSIFICATION	6.629203214065294E-8	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999999367390243	WITHOUT_CLASSIFICATION	6.326097565528642E-8	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999994371153644	WITHOUT_CLASSIFICATION	5.628846355770154E-7	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999414861027917	WITHOUT_CLASSIFICATION	5.851389720836845E-5	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999990114986248	WITHOUT_CLASSIFICATION	9.885013751435526E-7	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9998847733611742	WITHOUT_CLASSIFICATION	1.1522663882586117E-4	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.999939442294364	WITHOUT_CLASSIFICATION	6.0557705636008714E-5	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.999994432520157	WITHOUT_CLASSIFICATION	5.567479843055225E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999885450856665	WITHOUT_CLASSIFICATION	1.1454914333621085E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.999992379912136	WITHOUT_CLASSIFICATION	7.6200878640008455E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999995054551233	WITHOUT_CLASSIFICATION	4.945448768174806E-7	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999997436099646	WITHOUT_CLASSIFICATION	2.563900354766116E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999831997070853	WITHOUT_CLASSIFICATION	1.6800292914766676E-5	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.99999984867474	WITHOUT_CLASSIFICATION	1.5132526009384188E-7	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999942798123397	WITHOUT_CLASSIFICATION	5.720187660412088E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.999992171294815	WITHOUT_CLASSIFICATION	7.828705184925104E-6	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999999231360609	WITHOUT_CLASSIFICATION	7.686393916953467E-8	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.99999713308375	WITHOUT_CLASSIFICATION	2.8669162500038658E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.99999713308375	WITHOUT_CLASSIFICATION	2.8669162500038658E-6	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.999941597712054	WITHOUT_CLASSIFICATION	5.8402287946017156E-5	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999933336104605	WITHOUT_CLASSIFICATION	6.66638953957941E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.999990228976428	WITHOUT_CLASSIFICATION	9.771023572136793E-6	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999999219210611	WITHOUT_CLASSIFICATION	7.807893889122786E-8	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999998122426614	WITHOUT_CLASSIFICATION	1.8775733864231995E-7	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999981248958314	WITHOUT_CLASSIFICATION	1.875104168614288E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999944444796	WITHOUT_CLASSIFICATION	5.555520389921833E-9	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9996696451897222	WITHOUT_CLASSIFICATION	3.3035481027771937E-4	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999919215193765	WITHOUT_CLASSIFICATION	8.078480623512287E-6	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999966904525597	WITHOUT_CLASSIFICATION	3.3095474402693547E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999968678695071	WITHOUT_CLASSIFICATION	3.1321304929477262E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999999255765957	WITHOUT_CLASSIFICATION	7.442340439984008E-8	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9998946182014323	WITHOUT_CLASSIFICATION	1.0538179856761763E-4	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999992958876528	WITHOUT_CLASSIFICATION	7.041123472716093E-7	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9977230698857386	WITHOUT_CLASSIFICATION	0.0022769301142615294	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999606582306491	WITHOUT_CLASSIFICATION	3.9341769350931054E-5	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999999165517209	WITHOUT_CLASSIFICATION	8.344827902142563E-8	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999986064669316	WITHOUT_CLASSIFICATION	1.3935330683484215E-6	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9996840250796359	WITHOUT_CLASSIFICATION	3.159749203640879E-4	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999175137925705	WITHOUT_CLASSIFICATION	8.248620742934469E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999976879459154	WITHOUT_CLASSIFICATION	2.3120540846353104E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999976879459154	WITHOUT_CLASSIFICATION	2.3120540846353104E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999681699416	WITHOUT_CLASSIFICATION	3.183005840416102E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999681699416	WITHOUT_CLASSIFICATION	3.183005840416102E-7	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.999999827671987	WITHOUT_CLASSIFICATION	1.7232801299742076E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999995651533575	WITHOUT_CLASSIFICATION	4.348466424125046E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999702277800676	WITHOUT_CLASSIFICATION	2.977221993243174E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998113905683	WITHOUT_CLASSIFICATION	1.886094317883809E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999999357388685	WITHOUT_CLASSIFICATION	6.42611315794538E-8	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999993350525638	WITHOUT_CLASSIFICATION	6.649474361296435E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.8301359541179938	WITHOUT_CLASSIFICATION	0.16986404588200618	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999985143714002	WITHOUT_CLASSIFICATION	1.4856285997566354E-6	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999999865703908	WITHOUT_CLASSIFICATION	1.3429609335120868E-8	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9996335524904073	WITHOUT_CLASSIFICATION	3.664475095926688E-4	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999997430960341	WITHOUT_CLASSIFICATION	2.56903965950384E-7	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.999998251982658	WITHOUT_CLASSIFICATION	1.7480173418821655E-6	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999988798019563	WITHOUT_CLASSIFICATION	1.1201980436455538E-6	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9998677638040956	WITHOUT_CLASSIFICATION	1.3223619590431844E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999998543300548	WITHOUT_CLASSIFICATION	1.4566994510221397E-7	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999998288081464	WITHOUT_CLASSIFICATION	1.7119185355776356E-7	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999995518851029	WITHOUT_CLASSIFICATION	4.4811489712729167E-7	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999996704320487	WITHOUT_CLASSIFICATION	3.295679512245243E-7	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999905310620096	WITHOUT_CLASSIFICATION	9.468937990423983E-6	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9998658103793353	WITHOUT_CLASSIFICATION	1.3418962066468745E-4	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999975539812	WITHOUT_CLASSIFICATION	2.446018800071507E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999999202440077	WITHOUT_CLASSIFICATION	7.975599220425423E-8	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.999993887246024	WITHOUT_CLASSIFICATION	6.112753976021844E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999845893840204	WITHOUT_CLASSIFICATION	1.5410615979642446E-5	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999984751037153	WITHOUT_CLASSIFICATION	1.524896284712558E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.999999900498326	WITHOUT_CLASSIFICATION	9.950167410378801E-8	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999984110714343	WITHOUT_CLASSIFICATION	1.5889285656751821E-6	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999972677189976	WITHOUT_CLASSIFICATION	2.732281002495821E-6	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999385266849107	WITHOUT_CLASSIFICATION	6.147331508935542E-5	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999984671512226	WITHOUT_CLASSIFICATION	1.5328487774364864E-6	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999984671512226	WITHOUT_CLASSIFICATION	1.5328487774364864E-6	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999892837768207	WITHOUT_CLASSIFICATION	1.0716223179331217E-5	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999834334506708	WITHOUT_CLASSIFICATION	1.65665493292942E-5	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.999998993272788	WITHOUT_CLASSIFICATION	1.0067272119741997E-6	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999995066927355	WITHOUT_CLASSIFICATION	4.933072644295412E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999459633828719	WITHOUT_CLASSIFICATION	5.403661712807722E-5	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999999924761245	WITHOUT_CLASSIFICATION	7.523875465000099E-9	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999997621070177	WITHOUT_CLASSIFICATION	2.378929823051447E-7	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999998900254281	WITHOUT_CLASSIFICATION	1.099745719108562E-7	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999999887409198	WITHOUT_CLASSIFICATION	1.1259080275136783E-8	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999958447863508	WITHOUT_CLASSIFICATION	4.155213649166194E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999999502299408	WITHOUT_CLASSIFICATION	4.9770059102094354E-8	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999999803952868	WITHOUT_CLASSIFICATION	1.960471319649025E-8	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999999462839796	WITHOUT_CLASSIFICATION	5.371602051259688E-8	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999981936181993	WITHOUT_CLASSIFICATION	1.806381800698899E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999995480018795	WITHOUT_CLASSIFICATION	4.519981205386063E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999981416013681	WITHOUT_CLASSIFICATION	1.8583986317669838E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9973509825127782	WITHOUT_CLASSIFICATION	0.002649017487221804	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.999997897082446	WITHOUT_CLASSIFICATION	2.1029175539612704E-6	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999946821664217	WITHOUT_CLASSIFICATION	5.317833578275175E-6	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9998796242709865	WITHOUT_CLASSIFICATION	1.2037572901354602E-4	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999985426099112	WITHOUT_CLASSIFICATION	1.4573900888370046E-6	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999951770981633	WITHOUT_CLASSIFICATION	4.8229018367742494E-6	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999522397002991	WITHOUT_CLASSIFICATION	4.7760299700781746E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999967892612778	WITHOUT_CLASSIFICATION	3.210738722224319E-6	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999790688901989	WITHOUT_CLASSIFICATION	2.0931109801079683E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999527758706954	WITHOUT_CLASSIFICATION	4.7224129304540396E-5	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.999999861780559	WITHOUT_CLASSIFICATION	1.382194410658482E-7	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.999401808033911	WITHOUT_CLASSIFICATION	5.981919660889813E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.999999517346106	WITHOUT_CLASSIFICATION	4.826538939286443E-7	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.999944406791151	WITHOUT_CLASSIFICATION	5.5593208849051776E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9998881576877919	WITHOUT_CLASSIFICATION	1.1184231220807717E-4	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.999986966744164	WITHOUT_CLASSIFICATION	1.303325583602074E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.999999932068455	WITHOUT_CLASSIFICATION	6.793154498621898E-8	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999677745510479	WITHOUT_CLASSIFICATION	3.22254489520411E-5	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.999889902179937	WITHOUT_CLASSIFICATION	1.1009782006296957E-4	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9998862551162488	WITHOUT_CLASSIFICATION	1.1374488375121914E-4	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999930104813501	WITHOUT_CLASSIFICATION	6.989518649889689E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9999180582095263	WITHOUT_CLASSIFICATION	8.194179047369306E-5	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999993624706563	WITHOUT_CLASSIFICATION	6.375293435623953E-7	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999990112063517	WITHOUT_CLASSIFICATION	9.88793648364009E-7	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999999229030185	WITHOUT_CLASSIFICATION	7.709698143730657E-8	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999533922284	WITHOUT_CLASSIFICATION	4.660777150813445E-8	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999984787557556	WITHOUT_CLASSIFICATION	1.5212442442960074E-6	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999961934426422	WITHOUT_CLASSIFICATION	3.806557357721128E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9999529370260007	WITHOUT_CLASSIFICATION	4.70629739993622E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999999505730152	WITHOUT_CLASSIFICATION	4.942698488664155E-8	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999998062138205	WITHOUT_CLASSIFICATION	1.937861795880966E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999973299966	WITHOUT_CLASSIFICATION	2.6700034691706365E-9	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999997946102435	WITHOUT_CLASSIFICATION	2.0538975655059233E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999989563419829	WITHOUT_CLASSIFICATION	1.0436580171052065E-6	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999151045007694	WITHOUT_CLASSIFICATION	8.489549923066024E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999507960767755	WITHOUT_CLASSIFICATION	4.9203923224356044E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999320377287462	WITHOUT_CLASSIFICATION	6.796227125379189E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999292271995397	WITHOUT_CLASSIFICATION	7.077280046026236E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999922673838465	WITHOUT_CLASSIFICATION	7.732616153511532E-6	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999945544519545	WITHOUT_CLASSIFICATION	5.44554804546747E-6	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999908904764874	WITHOUT_CLASSIFICATION	9.109523512590908E-6	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.999986533999631	WITHOUT_CLASSIFICATION	1.3466000369005082E-5	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999983596450674	WITHOUT_CLASSIFICATION	1.640354932616423E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999943924474605	WITHOUT_CLASSIFICATION	5.607552539482657E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999641217878675	WITHOUT_CLASSIFICATION	3.58782121323452E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999151045007694	WITHOUT_CLASSIFICATION	8.489549923066024E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999320377287462	WITHOUT_CLASSIFICATION	6.796227125379189E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999507960767755	WITHOUT_CLASSIFICATION	4.9203923224356044E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9998149333848598	WITHOUT_CLASSIFICATION	1.8506661514023896E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999833744686404	WITHOUT_CLASSIFICATION	1.6625531359647916E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999961262644671	WITHOUT_CLASSIFICATION	3.873735532861299E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999997936856833	WITHOUT_CLASSIFICATION	2.0631431673281885E-7	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999962561279628	WITHOUT_CLASSIFICATION	3.743872037257736E-6	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999998253786275	WITHOUT_CLASSIFICATION	1.7462137240787303E-7	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999977103725094	WITHOUT_CLASSIFICATION	2.2896274906082853E-6	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.999999857959788	WITHOUT_CLASSIFICATION	1.4204021209686703E-7	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999942319282349	WITHOUT_CLASSIFICATION	5.768071765044953E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999999479583086	WITHOUT_CLASSIFICATION	5.204169131828835E-8	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999998354529613	WITHOUT_CLASSIFICATION	1.6454703866353486E-7	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9982301517486055	WITHOUT_CLASSIFICATION	0.0017698482513944904	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999988947209862	WITHOUT_CLASSIFICATION	1.1052790137765859E-6	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999997792725642	WITHOUT_CLASSIFICATION	2.2072743570656561E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999716906666323	WITHOUT_CLASSIFICATION	2.8309333367760144E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999981177043423	WITHOUT_CLASSIFICATION	1.8822956577475987E-6	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999688536797873	WITHOUT_CLASSIFICATION	3.1146320212634826E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999978362600438	WITHOUT_CLASSIFICATION	2.163739956128134E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999978362600438	WITHOUT_CLASSIFICATION	2.163739956128134E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999970097263386	WITHOUT_CLASSIFICATION	2.9902736613527224E-6	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999999869922389	WITHOUT_CLASSIFICATION	1.3007761018434386E-8	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999998311418591	WITHOUT_CLASSIFICATION	1.688581408965293E-7	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999920987222866	WITHOUT_CLASSIFICATION	7.901277713500179E-6	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999994300060202	WITHOUT_CLASSIFICATION	5.699939797607006E-7	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999999874120389	WITHOUT_CLASSIFICATION	1.2587961077986392E-8	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999999895623884	WITHOUT_CLASSIFICATION	1.0437611607087628E-8	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999998437532182	WITHOUT_CLASSIFICATION	1.5624678187226914E-7	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999999101741139	WITHOUT_CLASSIFICATION	8.982588603228895E-8	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999998537175052	WITHOUT_CLASSIFICATION	1.4628249479283978E-7	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999984881651067	WITHOUT_CLASSIFICATION	1.5118348933807577E-6	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999928811291137	WITHOUT_CLASSIFICATION	7.118870886304314E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.999994816933138	WITHOUT_CLASSIFICATION	5.18306686204715E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999598696107548	WITHOUT_CLASSIFICATION	4.013038924516703E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999979265365021	WITHOUT_CLASSIFICATION	2.073463497913556E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999317259617	WITHOUT_CLASSIFICATION	6.82740383601499E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999993855295648	WITHOUT_CLASSIFICATION	6.144704351744629E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999782729802604	WITHOUT_CLASSIFICATION	2.1727019739505485E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999782729802604	WITHOUT_CLASSIFICATION	2.1727019739505485E-5	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999787330171637	WITHOUT_CLASSIFICATION	2.1266982836353477E-5	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999842150590627	WITHOUT_CLASSIFICATION	1.578494093739249E-5	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999122496936813	WITHOUT_CLASSIFICATION	8.77503063187696E-5	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999968743537802	WITHOUT_CLASSIFICATION	3.1256462199116953E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999995066933132	WITHOUT_CLASSIFICATION	4.933066867996801E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999782729802604	WITHOUT_CLASSIFICATION	2.1727019739505485E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999782729802604	WITHOUT_CLASSIFICATION	2.1727019739505485E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999995800887	WITHOUT_CLASSIFICATION	4.199113720651746E-10	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999995800887	WITHOUT_CLASSIFICATION	4.199113720651746E-10	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999982184957724	WITHOUT_CLASSIFICATION	1.7815042276061975E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999963021136421	WITHOUT_CLASSIFICATION	3.6978863579373776E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999866246573466	WITHOUT_CLASSIFICATION	1.3375342653423716E-5	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9974069306851978	WITHOUT_CLASSIFICATION	0.002593069314802184	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999753130094216	WITHOUT_CLASSIFICATION	2.4686990578483552E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999753130094216	WITHOUT_CLASSIFICATION	2.4686990578483552E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999998407396249	WITHOUT_CLASSIFICATION	1.5926037505032262E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999720166740548	WITHOUT_CLASSIFICATION	2.7983325945219372E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999985284103076	WITHOUT_CLASSIFICATION	1.4715896924081967E-6	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999952954572784	WITHOUT_CLASSIFICATION	4.7045427216648725E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999995728314	WITHOUT_CLASSIFICATION	4.2716867211414937E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999192477774	WITHOUT_CLASSIFICATION	8.075222248821267E-8	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999041685427428	WITHOUT_CLASSIFICATION	9.583145725720436E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999998284497669	WITHOUT_CLASSIFICATION	1.7155023320395875E-7	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999981588161322	WITHOUT_CLASSIFICATION	1.8411838679152099E-6	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999999995008481	WITHOUT_CLASSIFICATION	4.991519289998818E-10	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.999007950524987	WITHOUT_CLASSIFICATION	9.920494750130157E-4	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999998563894015	WITHOUT_CLASSIFICATION	1.4361059842976265E-7	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999990717259652	WITHOUT_CLASSIFICATION	9.282740346903956E-7	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999999440139807	WITHOUT_CLASSIFICATION	5.5986019381785396E-8	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999317259617	WITHOUT_CLASSIFICATION	6.82740383601499E-8	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999782729802604	WITHOUT_CLASSIFICATION	2.1727019739505485E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999995800887	WITHOUT_CLASSIFICATION	4.199113720651746E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999192477774	WITHOUT_CLASSIFICATION	8.075222248821267E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999932497738203	WITHOUT_CLASSIFICATION	6.750226179676233E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999932497738203	WITHOUT_CLASSIFICATION	6.750226179676233E-6	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999913836580879	WITHOUT_CLASSIFICATION	8.616341912093202E-6	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999966973622	WITHOUT_CLASSIFICATION	3.302637851239645E-9	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999999960342714	WITHOUT_CLASSIFICATION	3.965728585466857E-9	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999998763749174	WITHOUT_CLASSIFICATION	1.2362508262288612E-7	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999982940739157	WITHOUT_CLASSIFICATION	1.7059260842766857E-6	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999993172706635	WITHOUT_CLASSIFICATION	6.827293364714708E-7	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9982249173466325	WITHOUT_CLASSIFICATION	0.001775082653367511	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999132668261304	WITHOUT_CLASSIFICATION	8.673317386970875E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999997297044614	WITHOUT_CLASSIFICATION	2.702955386704148E-7	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999662173876	WITHOUT_CLASSIFICATION	3.3782612441091144E-8	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999962188584647	WITHOUT_CLASSIFICATION	3.781141535282951E-6	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999998298411418	WITHOUT_CLASSIFICATION	1.701588583107471E-7	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999959616584774	WITHOUT_CLASSIFICATION	4.038341522617324E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999993855295648	WITHOUT_CLASSIFICATION	6.144704351744629E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999995800887	WITHOUT_CLASSIFICATION	4.199113720651746E-10	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999720166740548	WITHOUT_CLASSIFICATION	2.7983325945219372E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999985284103076	WITHOUT_CLASSIFICATION	1.4715896924081967E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999985284103076	WITHOUT_CLASSIFICATION	1.4715896924081967E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999995728314	WITHOUT_CLASSIFICATION	4.2716867211414937E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999192477774	WITHOUT_CLASSIFICATION	8.075222248821267E-8	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999192477774	WITHOUT_CLASSIFICATION	8.075222248821267E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999932497738203	WITHOUT_CLASSIFICATION	6.750226179676233E-6	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999998369677481	WITHOUT_CLASSIFICATION	1.6303225192518257E-7	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999802404666149	WITHOUT_CLASSIFICATION	1.975953338504218E-5	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999999522660268	WITHOUT_CLASSIFICATION	4.773397329153954E-8	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999075216808	WITHOUT_CLASSIFICATION	9.247831927181341E-8	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9998278607906154	WITHOUT_CLASSIFICATION	1.7213920938460622E-4	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9977199821979946	WITHOUT_CLASSIFICATION	0.0022800178020053502	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999997854428492	WITHOUT_CLASSIFICATION	2.1455715085751196E-7	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999999462300929	WITHOUT_CLASSIFICATION	5.376990719061187E-8	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999999833512951	WITHOUT_CLASSIFICATION	1.6648704818647173E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999720166740548	WITHOUT_CLASSIFICATION	2.7983325945219372E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999985284103076	WITHOUT_CLASSIFICATION	1.4715896924081967E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999985284103076	WITHOUT_CLASSIFICATION	1.4715896924081967E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999995728314	WITHOUT_CLASSIFICATION	4.2716867211414937E-10	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999132668261304	WITHOUT_CLASSIFICATION	8.673317386970875E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999662173876	WITHOUT_CLASSIFICATION	3.3782612441091144E-8	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999972966669526	WITHOUT_CLASSIFICATION	2.7033330475269885E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999996696199257	WITHOUT_CLASSIFICATION	3.303800743097219E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999932730895695	WITHOUT_CLASSIFICATION	6.726910430359942E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999932730895695	WITHOUT_CLASSIFICATION	6.726910430359942E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999994063445087	WITHOUT_CLASSIFICATION	5.936554913848383E-7	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999985100897223	WITHOUT_CLASSIFICATION	1.489910277752727E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999954293667805	WITHOUT_CLASSIFICATION	4.570633219520625E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999999610605179	WITHOUT_CLASSIFICATION	3.893948211284274E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999998857785947	WITHOUT_CLASSIFICATION	1.1422140536586561E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999998857785947	WITHOUT_CLASSIFICATION	1.1422140536586561E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999980689455343	WITHOUT_CLASSIFICATION	1.9310544657066185E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999980689455343	WITHOUT_CLASSIFICATION	1.9310544657066185E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999101359528	WITHOUT_CLASSIFICATION	8.986404722966917E-8	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999101359528	WITHOUT_CLASSIFICATION	8.986404722966917E-8	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999992818628309	WITHOUT_CLASSIFICATION	7.181371690478668E-7	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999214006248369	WITHOUT_CLASSIFICATION	7.859937516316124E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999991735212578	WITHOUT_CLASSIFICATION	8.26478742204712E-7	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999978986568413	WITHOUT_CLASSIFICATION	2.10134315866018E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999998529361179	WITHOUT_CLASSIFICATION	1.4706388204434892E-7	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999992715772444	WITHOUT_CLASSIFICATION	7.284227554564058E-7	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999999302035226	WITHOUT_CLASSIFICATION	6.97964773669254E-8	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.99999995685037	WITHOUT_CLASSIFICATION	4.3149629963730076E-8	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999998717078387	WITHOUT_CLASSIFICATION	1.2829216141692287E-7	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999995015195761	WITHOUT_CLASSIFICATION	4.984804239216515E-7	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999990272700626	WITHOUT_CLASSIFICATION	9.727299374079667E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999999020850727	WITHOUT_CLASSIFICATION	9.791492723956913E-8	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9997104818395366	WITHOUT_CLASSIFICATION	2.895181604634187E-4	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999880294678914	WITHOUT_CLASSIFICATION	1.1970532108625503E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999880294678914	WITHOUT_CLASSIFICATION	1.1970532108625503E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999896361761138	WITHOUT_CLASSIFICATION	1.036382388619524E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999993350525638	WITHOUT_CLASSIFICATION	6.649474361296435E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9998463323247642	WITHOUT_CLASSIFICATION	1.5366767523586203E-4	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999998162380821	WITHOUT_CLASSIFICATION	1.8376191793316928E-7	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999999150857568	WITHOUT_CLASSIFICATION	8.491424315648332E-8	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999997390772538	WITHOUT_CLASSIFICATION	2.609227461920052E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999997692328809	WITHOUT_CLASSIFICATION	2.3076711908752285E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999994535758239	WITHOUT_CLASSIFICATION	5.464241762438181E-7	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999965177431355	WITHOUT_CLASSIFICATION	3.4822568645675755E-6	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999618385788062	WITHOUT_CLASSIFICATION	3.816142119382421E-5	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999996988789781	WITHOUT_CLASSIFICATION	3.0112102189581753E-7	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9999912942638413	WITHOUT_CLASSIFICATION	8.705736158844521E-6	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999996654920282	WITHOUT_CLASSIFICATION	3.345079717838628E-7	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999999107407843	WITHOUT_CLASSIFICATION	8.925921573005598E-8	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999903213192013	WITHOUT_CLASSIFICATION	9.678680798662312E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999987324187487	WITHOUT_CLASSIFICATION	1.2675812513381038E-6	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999911964589209	WITHOUT_CLASSIFICATION	8.803541079106555E-6	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999999341708135	WITHOUT_CLASSIFICATION	6.58291865487857E-8	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997849379797	WITHOUT_CLASSIFICATION	2.150620202132606E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997849379797	WITHOUT_CLASSIFICATION	2.150620202132606E-7	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.999991277792957	WITHOUT_CLASSIFICATION	8.722207043075778E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999986123164646	WITHOUT_CLASSIFICATION	1.3876835353829486E-6	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999280399288382	WITHOUT_CLASSIFICATION	7.196007116182225E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999280399288382	WITHOUT_CLASSIFICATION	7.196007116182225E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.999997485042579	WITHOUT_CLASSIFICATION	2.5149574210878497E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999945683139186	WITHOUT_CLASSIFICATION	5.431686081359143E-6	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999943507480842	WITHOUT_CLASSIFICATION	5.649251915794678E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999751792682389	WITHOUT_CLASSIFICATION	2.4820731761153194E-5	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999988574653594	WITHOUT_CLASSIFICATION	1.1425346405523578E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999997056847117	WITHOUT_CLASSIFICATION	2.9431528825756277E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999997056847117	WITHOUT_CLASSIFICATION	2.9431528825756277E-7	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999998419795302	WITHOUT_CLASSIFICATION	1.5802046983228805E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999990491735019	WITHOUT_CLASSIFICATION	9.508264980859015E-7	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999991475084602	WITHOUT_CLASSIFICATION	8.524915398739945E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999991076745727	WITHOUT_CLASSIFICATION	8.923254271877712E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999986123164646	WITHOUT_CLASSIFICATION	1.3876835353829486E-6	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999962206269212	WITHOUT_CLASSIFICATION	3.7793730787855106E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999925792626494	WITHOUT_CLASSIFICATION	7.4207373506087974E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999925792626494	WITHOUT_CLASSIFICATION	7.4207373506087974E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999966333956567	WITHOUT_CLASSIFICATION	3.366604343333142E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999542656497	WITHOUT_CLASSIFICATION	4.573435019709612E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999542656497	WITHOUT_CLASSIFICATION	4.573435019709612E-8	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999944641753765	WITHOUT_CLASSIFICATION	5.535824623562247E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999944641753765	WITHOUT_CLASSIFICATION	5.535824623562247E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999944641753765	WITHOUT_CLASSIFICATION	5.535824623562247E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999542656497	WITHOUT_CLASSIFICATION	4.573435019709612E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999542656497	WITHOUT_CLASSIFICATION	4.573435019709612E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999966333956567	WITHOUT_CLASSIFICATION	3.366604343333142E-6	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999977802402655	WITHOUT_CLASSIFICATION	2.2197597344812915E-6	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999950679395125	WITHOUT_CLASSIFICATION	4.932060487465787E-6	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999853789616124	WITHOUT_CLASSIFICATION	1.462103838742632E-5	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999983646042957	WITHOUT_CLASSIFICATION	1.6353957042994394E-6	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999987527197174	WITHOUT_CLASSIFICATION	1.2472802826223737E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999998245904337	WITHOUT_CLASSIFICATION	1.7540956639357785E-7	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999999765642019	WITHOUT_CLASSIFICATION	2.3435798019588677E-8	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999946982805551	WITHOUT_CLASSIFICATION	5.3017194448730015E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999996988789781	WITHOUT_CLASSIFICATION	3.0112102189581753E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999542656497	WITHOUT_CLASSIFICATION	4.573435019709612E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999542656497	WITHOUT_CLASSIFICATION	4.573435019709612E-8	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999994732877363	WITHOUT_CLASSIFICATION	5.267122637630239E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999993141105856	WITHOUT_CLASSIFICATION	6.858894145022942E-7	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999996657170187	WITHOUT_CLASSIFICATION	3.342829812581743E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9995732995809565	WITHOUT_CLASSIFICATION	4.2670041904356186E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999998511790998	WITHOUT_CLASSIFICATION	1.4882090008178933E-7	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999995461226268	WITHOUT_CLASSIFICATION	4.538773732266132E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999999473570238	WITHOUT_CLASSIFICATION	5.264297619395508E-7	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999951704676954	WITHOUT_CLASSIFICATION	4.829532304530192E-6	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999995072060789	WITHOUT_CLASSIFICATION	4.927939210742274E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.99983795873442	WITHOUT_CLASSIFICATION	1.6204126557995915E-4	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999631869013912	WITHOUT_CLASSIFICATION	3.681309860875894E-5	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999996033456413	WITHOUT_CLASSIFICATION	3.9665435863267525E-7	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999983194587712	WITHOUT_CLASSIFICATION	1.6805412288370732E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999205113398	WITHOUT_CLASSIFICATION	7.948866016745602E-8	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999999994852018	WITHOUT_CLASSIFICATION	5.147981709473753E-10	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999963209632576	WITHOUT_CLASSIFICATION	3.679036742369617E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999963209632576	WITHOUT_CLASSIFICATION	3.679036742369617E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999963209632576	WITHOUT_CLASSIFICATION	3.679036742369617E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.999999870259229	WITHOUT_CLASSIFICATION	1.2974077107449262E-7	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999961436860223	WITHOUT_CLASSIFICATION	3.856313977751685E-6	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999998505387783	WITHOUT_CLASSIFICATION	1.4946122177682088E-7	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9999574518400592	WITHOUT_CLASSIFICATION	4.254815994080996E-5	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999999879135717	WITHOUT_CLASSIFICATION	1.2086428270246178E-8	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999999838793283	WITHOUT_CLASSIFICATION	1.612067159528386E-8	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999999735142	WITHOUT_CLASSIFICATION	2.6485825935576997E-11	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999997510775516	WITHOUT_CLASSIFICATION	2.4892244836174513E-7	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999999693348657	WITHOUT_CLASSIFICATION	3.066513428705212E-8	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999994707349472	WITHOUT_CLASSIFICATION	5.2926505288223E-7	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999986232705702	WITHOUT_CLASSIFICATION	1.376729429781743E-6	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9999578245972796	WITHOUT_CLASSIFICATION	4.217540272049811E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999998419795302	WITHOUT_CLASSIFICATION	1.5802046983228805E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999542656497	WITHOUT_CLASSIFICATION	4.573435019709612E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999542656497	WITHOUT_CLASSIFICATION	4.573435019709612E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999966333956567	WITHOUT_CLASSIFICATION	3.366604343333142E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999998245904337	WITHOUT_CLASSIFICATION	1.7540956639357785E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999993141105856	WITHOUT_CLASSIFICATION	6.858894145022942E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9995732995809565	WITHOUT_CLASSIFICATION	4.2670041904356186E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999995461226268	WITHOUT_CLASSIFICATION	4.538773732266132E-7	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999996657170187	WITHOUT_CLASSIFICATION	3.342829812581743E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999999473570238	WITHOUT_CLASSIFICATION	5.264297619395508E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.99983795873442	WITHOUT_CLASSIFICATION	1.6204126557995915E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999995072060789	WITHOUT_CLASSIFICATION	4.927939210742274E-7	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999996033456413	WITHOUT_CLASSIFICATION	3.9665435863267525E-7	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999996754540951	WITHOUT_CLASSIFICATION	3.2454590493843436E-7	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999525841121902	WITHOUT_CLASSIFICATION	4.7415887809793177E-5	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.999999001157194	WITHOUT_CLASSIFICATION	9.98842806063132E-7	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999997854594622	WITHOUT_CLASSIFICATION	2.1454053779747186E-7	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999997875470178	WITHOUT_CLASSIFICATION	2.1245298217180408E-7	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999997064160324	WITHOUT_CLASSIFICATION	2.935839675754972E-7	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999994490959635	WITHOUT_CLASSIFICATION	5.509040365277297E-7	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9995022142119773	WITHOUT_CLASSIFICATION	4.977857880227599E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.999994499154572	WITHOUT_CLASSIFICATION	5.500845428102943E-6	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999944411568623	WITHOUT_CLASSIFICATION	5.558843137736553E-6	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999997068765666	WITHOUT_CLASSIFICATION	2.9312343345187157E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999162637031	WITHOUT_CLASSIFICATION	8.373629697036013E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999519128666	WITHOUT_CLASSIFICATION	4.808713339923702E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999992306464298	WITHOUT_CLASSIFICATION	7.693535701681752E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999971228887259	WITHOUT_CLASSIFICATION	2.877111274170392E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999697814157	WITHOUT_CLASSIFICATION	3.0218584324569976E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999995222855919	WITHOUT_CLASSIFICATION	4.777144080592372E-7	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999997446884478	WITHOUT_CLASSIFICATION	2.553115521544137E-7	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999998809899779	WITHOUT_CLASSIFICATION	1.1901002206354369E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999998924587103	WITHOUT_CLASSIFICATION	1.0754128967415567E-7	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999852020549	WITHOUT_CLASSIFICATION	1.4797945117328764E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999979809520918	WITHOUT_CLASSIFICATION	2.0190479082089624E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999979809520918	WITHOUT_CLASSIFICATION	2.0190479082089624E-6	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999903842844883	WITHOUT_CLASSIFICATION	9.61571551177007E-6	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999439515975	WITHOUT_CLASSIFICATION	5.604840252258417E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997157602430055	WITHOUT_CLASSIFICATION	2.8423975699461303E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997157602430055	WITHOUT_CLASSIFICATION	2.8423975699461303E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997157602430055	WITHOUT_CLASSIFICATION	2.8423975699461303E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9997800528586613	WITHOUT_CLASSIFICATION	2.199471413387227E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9997800528586613	WITHOUT_CLASSIFICATION	2.199471413387227E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9996619241053569	WITHOUT_CLASSIFICATION	3.380758946430728E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9998954662047005	WITHOUT_CLASSIFICATION	1.0453379529945669E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999439515975	WITHOUT_CLASSIFICATION	5.604840252258417E-8	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999964011456848	WITHOUT_CLASSIFICATION	3.5988543152254526E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997157602430055	WITHOUT_CLASSIFICATION	2.8423975699461303E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9997157602430055	WITHOUT_CLASSIFICATION	2.8423975699461303E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9997800528586613	WITHOUT_CLASSIFICATION	2.199471413387227E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9998954662047005	WITHOUT_CLASSIFICATION	1.0453379529945669E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999975797407047	WITHOUT_CLASSIFICATION	2.4202592952743686E-6	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999975797407047	WITHOUT_CLASSIFICATION	2.4202592952743686E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999989458212508	WITHOUT_CLASSIFICATION	1.0541787492079672E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999989458212508	WITHOUT_CLASSIFICATION	1.0541787492079672E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999937637423367	WITHOUT_CLASSIFICATION	6.236257663230692E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999937637423367	WITHOUT_CLASSIFICATION	6.236257663230692E-6	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999980946036799	WITHOUT_CLASSIFICATION	1.9053963200157923E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999967637172292	WITHOUT_CLASSIFICATION	3.2362827708909023E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999967637172292	WITHOUT_CLASSIFICATION	3.2362827708909023E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999992891236821	WITHOUT_CLASSIFICATION	7.108763178389429E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999992891236821	WITHOUT_CLASSIFICATION	7.108763178389429E-7	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999998697017825	WITHOUT_CLASSIFICATION	1.3029821752361588E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999969997852862	WITHOUT_CLASSIFICATION	3.0002147138334732E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999969997852862	WITHOUT_CLASSIFICATION	3.0002147138334732E-6	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999995048948381	WITHOUT_CLASSIFICATION	4.951051618679925E-7	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999970172293651	WITHOUT_CLASSIFICATION	2.9827706349109874E-6	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999987911441324	WITHOUT_CLASSIFICATION	1.2088558676630263E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999995048948381	WITHOUT_CLASSIFICATION	4.951051618679925E-7	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999983172632825	WITHOUT_CLASSIFICATION	1.6827367174726828E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999986109292758	WITHOUT_CLASSIFICATION	1.3890707241723046E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999986109292758	WITHOUT_CLASSIFICATION	1.3890707241723046E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999986109292758	WITHOUT_CLASSIFICATION	1.3890707241723046E-6	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999990298900898	WITHOUT_CLASSIFICATION	9.701099101727638E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.99999797129189	WITHOUT_CLASSIFICATION	2.0287081099938316E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999961948874698	WITHOUT_CLASSIFICATION	3.8051125300642044E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999961948874698	WITHOUT_CLASSIFICATION	3.8051125300642044E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999717406352	WITHOUT_CLASSIFICATION	2.8259364856050095E-8	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999797551058	WITHOUT_CLASSIFICATION	2.0244894202396117E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999559854584	WITHOUT_CLASSIFICATION	4.4014541461653176E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999997881394761	WITHOUT_CLASSIFICATION	2.1186052392568965E-7	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999994727052378	WITHOUT_CLASSIFICATION	5.272947622415779E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999994351396267	WITHOUT_CLASSIFICATION	5.648603732533325E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999994351396267	WITHOUT_CLASSIFICATION	5.648603732533325E-7	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999998307999991	WITHOUT_CLASSIFICATION	1.6920000086975027E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997771937615142	WITHOUT_CLASSIFICATION	2.2280623848577202E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997771937615142	WITHOUT_CLASSIFICATION	2.2280623848577202E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999986109292758	WITHOUT_CLASSIFICATION	1.3890707241723046E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.99999797129189	WITHOUT_CLASSIFICATION	2.0287081099938316E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999961948874698	WITHOUT_CLASSIFICATION	3.8051125300642044E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999717406352	WITHOUT_CLASSIFICATION	2.8259364856050095E-8	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999797551058	WITHOUT_CLASSIFICATION	2.0244894202396117E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999559854584	WITHOUT_CLASSIFICATION	4.4014541461653176E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999997881394761	WITHOUT_CLASSIFICATION	2.1186052392568965E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997771937615142	WITHOUT_CLASSIFICATION	2.2280623848577202E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999995709042134	WITHOUT_CLASSIFICATION	4.2909578647898444E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999998808535626	WITHOUT_CLASSIFICATION	1.1914643748635884E-7	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999983328069041	WITHOUT_CLASSIFICATION	1.667193096008444E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999998892050482	WITHOUT_CLASSIFICATION	1.1079495171022315E-7	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999980804591815	WITHOUT_CLASSIFICATION	1.9195408186106604E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999995310332467	WITHOUT_CLASSIFICATION	4.6896675330384625E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999994553142375	WITHOUT_CLASSIFICATION	5.446857624891701E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999994553142375	WITHOUT_CLASSIFICATION	5.446857624891701E-7	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999902750129832	WITHOUT_CLASSIFICATION	9.724987016784673E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999945168602837	WITHOUT_CLASSIFICATION	5.483139716378617E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.999993747968975	WITHOUT_CLASSIFICATION	6.252031025074591E-6	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999982874122981	WITHOUT_CLASSIFICATION	1.7125877018872785E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999817314812498	WITHOUT_CLASSIFICATION	1.826851875018665E-5	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999817314812498	WITHOUT_CLASSIFICATION	1.826851875018665E-5	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999996336353638	WITHOUT_CLASSIFICATION	3.6636463620843685E-7	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999996932884584	WITHOUT_CLASSIFICATION	3.067115415490293E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999993123766513	WITHOUT_CLASSIFICATION	6.876233487143753E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999993123766513	WITHOUT_CLASSIFICATION	6.876233487143753E-7	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999971225558156	WITHOUT_CLASSIFICATION	2.8774441843256676E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999995355028013	WITHOUT_CLASSIFICATION	4.644971986355551E-7	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999994727052378	WITHOUT_CLASSIFICATION	5.272947622415779E-7	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999990759528212	WITHOUT_CLASSIFICATION	9.240471787073528E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999996238578285	WITHOUT_CLASSIFICATION	3.76142171502095E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999979978199376	WITHOUT_CLASSIFICATION	2.00218006237822E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999966916754259	WITHOUT_CLASSIFICATION	3.3083245740204916E-6	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999971698217077	WITHOUT_CLASSIFICATION	2.8301782923062846E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999997210157416	WITHOUT_CLASSIFICATION	2.7898425835465557E-7	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999949488230967	WITHOUT_CLASSIFICATION	5.051176903289845E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999999882183119	WITHOUT_CLASSIFICATION	1.1781688004167745E-8	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999854874962	WITHOUT_CLASSIFICATION	1.4512503762166363E-8	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999854874962	WITHOUT_CLASSIFICATION	1.4512503762166363E-8	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998632525663	WITHOUT_CLASSIFICATION	1.3674743372840263E-7	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998632525663	WITHOUT_CLASSIFICATION	1.3674743372840263E-7	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999997861041338	WITHOUT_CLASSIFICATION	2.1389586617937864E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.99998002881124	WITHOUT_CLASSIFICATION	1.997118876006631E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.99998002881124	WITHOUT_CLASSIFICATION	1.997118876006631E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.99998002881124	WITHOUT_CLASSIFICATION	1.997118876006631E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994900199662	WITHOUT_CLASSIFICATION	5.099800337490976E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.999999394010688	WITHOUT_CLASSIFICATION	6.059893119367644E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.999999394010688	WITHOUT_CLASSIFICATION	6.059893119367644E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999964817407044	WITHOUT_CLASSIFICATION	3.51825929550922E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999908425693921	WITHOUT_CLASSIFICATION	9.157430607860313E-6	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999998588932588	WITHOUT_CLASSIFICATION	1.4110674119637253E-7	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.999999927916581	WITHOUT_CLASSIFICATION	7.208341899069023E-8	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9995461746632934	WITHOUT_CLASSIFICATION	4.5382533670659505E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999961308699222	WITHOUT_CLASSIFICATION	3.86913007772347E-6	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9998910224698471	WITHOUT_CLASSIFICATION	1.0897753015296058E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999519128666	WITHOUT_CLASSIFICATION	4.808713339923702E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999519128666	WITHOUT_CLASSIFICATION	4.808713339923702E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994900199662	WITHOUT_CLASSIFICATION	5.099800337490976E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999964817407044	WITHOUT_CLASSIFICATION	3.51825929550922E-6	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999991813516875	WITHOUT_CLASSIFICATION	8.186483124309285E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999908425693921	WITHOUT_CLASSIFICATION	9.157430607860313E-6	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999998588932588	WITHOUT_CLASSIFICATION	1.4110674119637253E-7	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999998571257467	WITHOUT_CLASSIFICATION	1.428742533851484E-7	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999995656681926	WITHOUT_CLASSIFICATION	4.343318074681132E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999788479276	WITHOUT_CLASSIFICATION	2.11520724684276E-8	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999631505615538	WITHOUT_CLASSIFICATION	3.6849438446254366E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999943765783796	WITHOUT_CLASSIFICATION	5.623421620435773E-6	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999997718068198	WITHOUT_CLASSIFICATION	2.2819318018190207E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999957287049135	WITHOUT_CLASSIFICATION	4.271295086428344E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999998571257467	WITHOUT_CLASSIFICATION	1.428742533851484E-7	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999999645367772	WITHOUT_CLASSIFICATION	3.5463222805682975E-7	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999999645367772	WITHOUT_CLASSIFICATION	3.5463222805682975E-7	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999944767986052	WITHOUT_CLASSIFICATION	5.523201394772696E-6	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999980484344873	WITHOUT_CLASSIFICATION	1.9515655127975534E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999940832740273	WITHOUT_CLASSIFICATION	5.916725972656018E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999945052391197	WITHOUT_CLASSIFICATION	5.49476088025095E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999998733837846	WITHOUT_CLASSIFICATION	1.266162154235963E-7	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.999999996918571	WITHOUT_CLASSIFICATION	3.0814291365879206E-9	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999979018482439	WITHOUT_CLASSIFICATION	2.098151756080096E-6	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999981643812236	WITHOUT_CLASSIFICATION	1.8356187764045798E-6	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999949619678623	WITHOUT_CLASSIFICATION	5.038032137642472E-6	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999986665078853	WITHOUT_CLASSIFICATION	1.333492114722588E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999974441755165	WITHOUT_CLASSIFICATION	2.5558244834138524E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999945052391197	WITHOUT_CLASSIFICATION	5.49476088025095E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999998733837846	WITHOUT_CLASSIFICATION	1.266162154235963E-7	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999977537104145	WITHOUT_CLASSIFICATION	2.2462895854165172E-6	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999997879789199	WITHOUT_CLASSIFICATION	2.1202108015961623E-7	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999963272517661	WITHOUT_CLASSIFICATION	3.672748233830172E-6	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999997249028028	WITHOUT_CLASSIFICATION	2.7509719731987465E-7	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.999998893140961	WITHOUT_CLASSIFICATION	1.1068590389707508E-6	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999708346599713	WITHOUT_CLASSIFICATION	2.9165340028633064E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999496812663955	WITHOUT_CLASSIFICATION	5.0318733604579524E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999998740857918	WITHOUT_CLASSIFICATION	1.2591420807286218E-7	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999984691226917	WITHOUT_CLASSIFICATION	1.5308773081592304E-6	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999974729221316	WITHOUT_CLASSIFICATION	2.527077868436206E-6	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.99998187844503	WITHOUT_CLASSIFICATION	1.812155496995531E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999974131071012	WITHOUT_CLASSIFICATION	2.5868928988096255E-6	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999963971800854	WITHOUT_CLASSIFICATION	3.6028199146114698E-6	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999972865471379	WITHOUT_CLASSIFICATION	2.7134528621010204E-6	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999224469456239	WITHOUT_CLASSIFICATION	7.75530543760374E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999961614543857	WITHOUT_CLASSIFICATION	3.8385456142212165E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999458754223531	WITHOUT_CLASSIFICATION	5.4124577646853756E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999685041892	WITHOUT_CLASSIFICATION	3.149581081998278E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999998941139295	WITHOUT_CLASSIFICATION	1.0588607045726173E-7	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999988778745328	WITHOUT_CLASSIFICATION	1.1221254672122076E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999458754223531	WITHOUT_CLASSIFICATION	5.4124577646853756E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999685041892	WITHOUT_CLASSIFICATION	3.149581081998278E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999998941139295	WITHOUT_CLASSIFICATION	1.0588607045726173E-7	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999984090740398	WITHOUT_CLASSIFICATION	1.5909259602341583E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999995430875449	WITHOUT_CLASSIFICATION	4.5691245507417906E-7	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999532449688396	WITHOUT_CLASSIFICATION	4.675503116031045E-5	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999434644472744	WITHOUT_CLASSIFICATION	5.65355527255111E-5	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9989915436554299	WITHOUT_CLASSIFICATION	0.0010084563445700967	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999924980413238	WITHOUT_CLASSIFICATION	7.501958676170673E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999602271854688	WITHOUT_CLASSIFICATION	3.977281453120107E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999999969498926	WITHOUT_CLASSIFICATION	3.050107315944736E-9	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999985343009669	WITHOUT_CLASSIFICATION	1.4656990331141788E-6	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999986543583439	WITHOUT_CLASSIFICATION	1.3456416561408482E-6	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.997487412827712	WITHOUT_CLASSIFICATION	0.00251258717228805	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999997921817604	WITHOUT_CLASSIFICATION	2.0781823953976649E-7	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999991069623606	WITHOUT_CLASSIFICATION	8.930376393234329E-7	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999996026912352	WITHOUT_CLASSIFICATION	3.9730876470775613E-7	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999992972969266	WITHOUT_CLASSIFICATION	7.027030734240797E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999996223319706	WITHOUT_CLASSIFICATION	3.77668029420337E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999945429957677	WITHOUT_CLASSIFICATION	5.4570042322794545E-6	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999957387955464	WITHOUT_CLASSIFICATION	4.2612044535477465E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999536255821	WITHOUT_CLASSIFICATION	4.637441779837339E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999636803752	WITHOUT_CLASSIFICATION	3.6319624633574546E-8	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999991192664714	WITHOUT_CLASSIFICATION	8.807335285071537E-7	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999989615276147	WITHOUT_CLASSIFICATION	1.0384723853117458E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999989615276147	WITHOUT_CLASSIFICATION	1.0384723853117458E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999985290921607	WITHOUT_CLASSIFICATION	1.4709078393236391E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999985290921607	WITHOUT_CLASSIFICATION	1.4709078393236391E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.999999868589993	WITHOUT_CLASSIFICATION	1.3141000700717406E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.999999868589993	WITHOUT_CLASSIFICATION	1.3141000700717406E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999769155444	WITHOUT_CLASSIFICATION	2.3084455611245712E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999940195909	WITHOUT_CLASSIFICATION	5.980409049808357E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999727002622	WITHOUT_CLASSIFICATION	2.7299737827681763E-8	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999827377083	WITHOUT_CLASSIFICATION	1.7262291612347364E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999887979538	WITHOUT_CLASSIFICATION	1.1202046201733258E-8	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999744051332	WITHOUT_CLASSIFICATION	2.5594866751126837E-8	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999999415735609	WITHOUT_CLASSIFICATION	5.84264391724883E-8	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.999999809009585	WITHOUT_CLASSIFICATION	1.9099041493983519E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999519128666	WITHOUT_CLASSIFICATION	4.808713339923702E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999769155444	WITHOUT_CLASSIFICATION	2.3084455611245712E-8	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999940195909	WITHOUT_CLASSIFICATION	5.980409049808357E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999727002622	WITHOUT_CLASSIFICATION	2.7299737827681763E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999887979538	WITHOUT_CLASSIFICATION	1.1202046201733258E-8	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999744051332	WITHOUT_CLASSIFICATION	2.5594866751126837E-8	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999947141337139	WITHOUT_CLASSIFICATION	5.285866286179272E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999991531378193	WITHOUT_CLASSIFICATION	8.468621805869814E-7	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999264320801214	WITHOUT_CLASSIFICATION	7.356791987859462E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999264320801214	WITHOUT_CLASSIFICATION	7.356791987859462E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999997304373817	WITHOUT_CLASSIFICATION	2.695626183158994E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999833424098545	WITHOUT_CLASSIFICATION	1.6657590145439603E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999973358074351	WITHOUT_CLASSIFICATION	2.664192564809581E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999959785531787	WITHOUT_CLASSIFICATION	4.02144682132917E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999959785531787	WITHOUT_CLASSIFICATION	4.02144682132917E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999812431843449	WITHOUT_CLASSIFICATION	1.875681565507124E-5	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999996433413282	WITHOUT_CLASSIFICATION	3.5665867178274046E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999996521384918	WITHOUT_CLASSIFICATION	3.4786150817376045E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999979095536208	WITHOUT_CLASSIFICATION	2.0904463791426074E-6	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999970940623597	WITHOUT_CLASSIFICATION	2.905937640301011E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999992306464298	WITHOUT_CLASSIFICATION	7.693535701681752E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999971228887259	WITHOUT_CLASSIFICATION	2.877111274170392E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999697814157	WITHOUT_CLASSIFICATION	3.0218584324569976E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999995222855919	WITHOUT_CLASSIFICATION	4.777144080592372E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999998924587103	WITHOUT_CLASSIFICATION	1.0754128967415567E-7	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999852020549	WITHOUT_CLASSIFICATION	1.4797945117328764E-8	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999812431843449	WITHOUT_CLASSIFICATION	1.875681565507124E-5	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999996433413282	WITHOUT_CLASSIFICATION	3.5665867178274046E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999979095536208	WITHOUT_CLASSIFICATION	2.0904463791426074E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999986460536129	WITHOUT_CLASSIFICATION	1.3539463870755535E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999973358074351	WITHOUT_CLASSIFICATION	2.664192564809581E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999973358074351	WITHOUT_CLASSIFICATION	2.664192564809581E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999974441755165	WITHOUT_CLASSIFICATION	2.5558244834138524E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999974441755165	WITHOUT_CLASSIFICATION	2.5558244834138524E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998717417236967	WITHOUT_CLASSIFICATION	1.282582763033052E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998717417236967	WITHOUT_CLASSIFICATION	1.282582763033052E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999996421556002	WITHOUT_CLASSIFICATION	3.57844399793239E-7	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999997508595755	WITHOUT_CLASSIFICATION	2.491404245070758E-7	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999493029295735	WITHOUT_CLASSIFICATION	5.069707042648051E-5	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999909796102381	WITHOUT_CLASSIFICATION	9.020389761869174E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.999999831264834	WITHOUT_CLASSIFICATION	1.6873516602626607E-7	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.999999550549357	WITHOUT_CLASSIFICATION	4.4945064305598824E-7	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.999400301643991	WITHOUT_CLASSIFICATION	5.996983560090509E-4	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.99999999656695	WITHOUT_CLASSIFICATION	3.4330498870965063E-9	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999992684634085	WITHOUT_CLASSIFICATION	7.315365916240016E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999998949890962	WITHOUT_CLASSIFICATION	1.0501090369112836E-7	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999981996403315	WITHOUT_CLASSIFICATION	1.8003596684237233E-6	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999890349938922	WITHOUT_CLASSIFICATION	1.0965006107774343E-5	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999998537667338	WITHOUT_CLASSIFICATION	1.4623326611068907E-7	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999987347661501	WITHOUT_CLASSIFICATION	1.2652338498736843E-6	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999995315653677	WITHOUT_CLASSIFICATION	4.684346323514403E-7	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999973466753381	WITHOUT_CLASSIFICATION	2.653324661815149E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999980835360618	WITHOUT_CLASSIFICATION	1.916463938194129E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999996960951478	WITHOUT_CLASSIFICATION	3.039048520808514E-7	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999988076962195	WITHOUT_CLASSIFICATION	1.1923037805423547E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999971228887259	WITHOUT_CLASSIFICATION	2.877111274170392E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999995222855919	WITHOUT_CLASSIFICATION	4.777144080592372E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999979809520918	WITHOUT_CLASSIFICATION	2.0190479082089624E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999961948874698	WITHOUT_CLASSIFICATION	3.8051125300642044E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999961948874698	WITHOUT_CLASSIFICATION	3.8051125300642044E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999986460536129	WITHOUT_CLASSIFICATION	1.3539463870755535E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999973358074351	WITHOUT_CLASSIFICATION	2.664192564809581E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999974441755165	WITHOUT_CLASSIFICATION	2.5558244834138524E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998717417236967	WITHOUT_CLASSIFICATION	1.282582763033052E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999983854592599	WITHOUT_CLASSIFICATION	1.614540740109985E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9998561061237863	WITHOUT_CLASSIFICATION	1.438938762136796E-4	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999999913499683	WITHOUT_CLASSIFICATION	8.650031658352058E-9	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9947714032031186	WITHOUT_CLASSIFICATION	0.005228596796881354	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999991230960096	WITHOUT_CLASSIFICATION	8.769039903201522E-7	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999991230960096	WITHOUT_CLASSIFICATION	8.769039903201522E-7	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999983266063045	WITHOUT_CLASSIFICATION	1.6733936955173652E-6	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999999723427876	WITHOUT_CLASSIFICATION	2.7657212386527788E-8	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999259032022	WITHOUT_CLASSIFICATION	7.409679781989532E-8	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999998975461433	WITHOUT_CLASSIFICATION	1.0245385667392971E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999999748308923	WITHOUT_CLASSIFICATION	2.5169107697738553E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999999748308923	WITHOUT_CLASSIFICATION	2.5169107697738553E-7	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999999886113761	WITHOUT_CLASSIFICATION	1.1388623843453132E-8	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999999928838466	WITHOUT_CLASSIFICATION	7.116153544887613E-9	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999995907185268	WITHOUT_CLASSIFICATION	4.092814731396727E-7	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999829402106323	WITHOUT_CLASSIFICATION	1.7059789367727793E-5	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999998603743419	WITHOUT_CLASSIFICATION	1.396256580940045E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999999087936515	WITHOUT_CLASSIFICATION	9.120634852053024E-8	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999682938179684	WITHOUT_CLASSIFICATION	3.170618203171471E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.999999825207682	WITHOUT_CLASSIFICATION	1.747923178798451E-7	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9996384802385093	WITHOUT_CLASSIFICATION	3.6151976149063724E-4	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9960744406383649	WITHOUT_CLASSIFICATION	0.003925559361635118	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9999942882529889	WITHOUT_CLASSIFICATION	5.711747011237121E-6	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999992549943444	WITHOUT_CLASSIFICATION	7.450056555804005E-7	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999999981577452	WITHOUT_CLASSIFICATION	1.8422547349610903E-9	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999994427478133	WITHOUT_CLASSIFICATION	5.572521867104209E-7	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999996779136143	WITHOUT_CLASSIFICATION	3.220863856397737E-7	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999986575334827	WITHOUT_CLASSIFICATION	1.3424665172426566E-6	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.999999648466931	WITHOUT_CLASSIFICATION	3.5153306898609287E-7	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999788697370824	WITHOUT_CLASSIFICATION	2.1130262917575748E-5	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999999160619093	WITHOUT_CLASSIFICATION	8.39380906758883E-8	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999994288309233	WITHOUT_CLASSIFICATION	5.711690767082906E-7	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999934700203235	WITHOUT_CLASSIFICATION	6.52997967647567E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999990978974775	WITHOUT_CLASSIFICATION	9.021025224269847E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999990978974775	WITHOUT_CLASSIFICATION	9.021025224269847E-7	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999883970159658	WITHOUT_CLASSIFICATION	1.1602984034228752E-5	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999544748322672	WITHOUT_CLASSIFICATION	4.5525167732960674E-5	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999994535758239	WITHOUT_CLASSIFICATION	5.464241762438181E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999994535758239	WITHOUT_CLASSIFICATION	5.464241762438181E-7	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.7894993703032862	WITHOUT_CLASSIFICATION	0.21050062969671385	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999117754382811	WITHOUT_CLASSIFICATION	8.822456171889414E-5	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999820284774884	WITHOUT_CLASSIFICATION	1.797152251164047E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999830107065342	WITHOUT_CLASSIFICATION	1.69892934658458E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999830107065342	WITHOUT_CLASSIFICATION	1.69892934658458E-5	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9998190588082568	WITHOUT_CLASSIFICATION	1.8094119174319587E-4	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999990676714524	WITHOUT_CLASSIFICATION	9.323285476792779E-7	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.999999394213468	WITHOUT_CLASSIFICATION	6.057865320891097E-7	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999994219043494	WITHOUT_CLASSIFICATION	5.780956506140994E-7	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999983817377711	WITHOUT_CLASSIFICATION	1.6182622288154111E-6	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999998561856535	WITHOUT_CLASSIFICATION	1.4381434651094275E-7	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999999360254037	WITHOUT_CLASSIFICATION	6.397459628754566E-8	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999853625840032	WITHOUT_CLASSIFICATION	1.4637415996816308E-5	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999982388624414	WITHOUT_CLASSIFICATION	1.761137558602863E-6	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9996596071335438	WITHOUT_CLASSIFICATION	3.4039286645615744E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999871192857603	WITHOUT_CLASSIFICATION	1.288071423973177E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999997767089512	WITHOUT_CLASSIFICATION	2.2329104882879675E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999992987908785	WITHOUT_CLASSIFICATION	7.012091215085689E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9998969744180531	WITHOUT_CLASSIFICATION	1.030255819467828E-4	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999983962552548	WITHOUT_CLASSIFICATION	1.6037447451864902E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9974228791633356	WITHOUT_CLASSIFICATION	0.00257712083666441	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999998788489366	WITHOUT_CLASSIFICATION	1.211510633712519E-7	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999839771258331	WITHOUT_CLASSIFICATION	1.6022874166973658E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.999964153463701	WITHOUT_CLASSIFICATION	3.584653629893066E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999918442094067	WITHOUT_CLASSIFICATION	8.155790593231774E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999997793320294	WITHOUT_CLASSIFICATION	2.2066797057716782E-7	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999998467339967	WITHOUT_CLASSIFICATION	1.5326600329887444E-7	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999909247601463	WITHOUT_CLASSIFICATION	9.07523985360878E-6	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999832068952755	WITHOUT_CLASSIFICATION	1.679310472450951E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999997425590281	WITHOUT_CLASSIFICATION	2.574409718935232E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9988304498148861	WITHOUT_CLASSIFICATION	0.0011695501851138276	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.997968127866396	WITHOUT_CLASSIFICATION	0.002031872133603989	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999997238103172	WITHOUT_CLASSIFICATION	2.761896827701658E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999891472748839	WITHOUT_CLASSIFICATION	1.0852725116210353E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999999414252579	WITHOUT_CLASSIFICATION	5.857474210097584E-8	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999994011668	WITHOUT_CLASSIFICATION	5.988331318327444E-10	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9998969744180531	WITHOUT_CLASSIFICATION	1.030255819467828E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999997238103172	WITHOUT_CLASSIFICATION	2.761896827701658E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999891472748839	WITHOUT_CLASSIFICATION	1.0852725116210353E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999994011668	WITHOUT_CLASSIFICATION	5.988331318327444E-10	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999998316344207	WITHOUT_CLASSIFICATION	1.683655792079429E-7	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.999993880980467	WITHOUT_CLASSIFICATION	6.11901953302385E-6	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999947576059416	WITHOUT_CLASSIFICATION	5.242394058488953E-6	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999983277687516	WITHOUT_CLASSIFICATION	1.6722312483970212E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999258517748	WITHOUT_CLASSIFICATION	7.414822523318762E-8	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999967753958686	WITHOUT_CLASSIFICATION	3.2246041313011717E-6	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.999999065357363	WITHOUT_CLASSIFICATION	9.346426368394662E-7	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999995632906866	WITHOUT_CLASSIFICATION	4.367093133952264E-7	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999997696062337	WITHOUT_CLASSIFICATION	2.303937662928253E-7	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9996658935456345	WITHOUT_CLASSIFICATION	3.3410645436551974E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999876625934162	WITHOUT_CLASSIFICATION	1.2337406583766179E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999876625934162	WITHOUT_CLASSIFICATION	1.2337406583766179E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999974252431096	WITHOUT_CLASSIFICATION	2.5747568904438863E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999993836416323	WITHOUT_CLASSIFICATION	6.163583675608576E-7	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999900241862277	WITHOUT_CLASSIFICATION	9.975813772279187E-6	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999996674520825	WITHOUT_CLASSIFICATION	3.3254791749768137E-7	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999575103767316	WITHOUT_CLASSIFICATION	4.248962326846546E-5	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999735442157044	WITHOUT_CLASSIFICATION	2.645578429561545E-5	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999962567991069	WITHOUT_CLASSIFICATION	3.7432008931319654E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9997309403873267	WITHOUT_CLASSIFICATION	2.690596126734152E-4	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999999626362536	WITHOUT_CLASSIFICATION	3.7363746383595316E-8	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999997122012135	WITHOUT_CLASSIFICATION	2.877987864031473E-7	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999997658632868	WITHOUT_CLASSIFICATION	2.341367131013079E-7	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999993439346095	WITHOUT_CLASSIFICATION	6.560653904720233E-7	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999999754149443	WITHOUT_CLASSIFICATION	2.458505556954169E-8	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999997202463058	WITHOUT_CLASSIFICATION	2.7975369411889956E-7	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999999657020716	WITHOUT_CLASSIFICATION	3.4297928479609646E-8	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999999900946424	WITHOUT_CLASSIFICATION	9.905357648095972E-9	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999999921983439	WITHOUT_CLASSIFICATION	7.801656150447455E-9	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999999589530455	WITHOUT_CLASSIFICATION	4.104695457177289E-8	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999998462655609	WITHOUT_CLASSIFICATION	1.5373443903855188E-7	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999998322516874	WITHOUT_CLASSIFICATION	1.6774831250572057E-7	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999939324760215	WITHOUT_CLASSIFICATION	6.067523978550124E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999967861188276	WITHOUT_CLASSIFICATION	3.213881172437224E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999999927807882	WITHOUT_CLASSIFICATION	7.219211910418483E-9	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999982817334687	WITHOUT_CLASSIFICATION	1.7182665313086564E-6	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999996608392802	WITHOUT_CLASSIFICATION	3.391607199272785E-7	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999991778562451	WITHOUT_CLASSIFICATION	8.221437548568318E-7	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9994383384979058	WITHOUT_CLASSIFICATION	5.616615020942193E-4	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.999879510681282	WITHOUT_CLASSIFICATION	1.2048931871791913E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999875132095942	WITHOUT_CLASSIFICATION	1.2486790405672135E-5	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999994072072689	WITHOUT_CLASSIFICATION	5.927927310926956E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999949103576404	WITHOUT_CLASSIFICATION	5.089642359510244E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999999645135167	WITHOUT_CLASSIFICATION	3.5486483255059087E-8	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999999063543509	WITHOUT_CLASSIFICATION	9.364564918285889E-8	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999992612903008	WITHOUT_CLASSIFICATION	7.387096992611165E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999997363991743	WITHOUT_CLASSIFICATION	2.6360082570248257E-7	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999805089931015	WITHOUT_CLASSIFICATION	1.9491006898504764E-5	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999999254345876	WITHOUT_CLASSIFICATION	7.456541238019577E-8	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999990714268319	WITHOUT_CLASSIFICATION	9.285731680090883E-7	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999982842934041	WITHOUT_CLASSIFICATION	1.7157065959096154E-6	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999988878329504	WITHOUT_CLASSIFICATION	1.1121670495059005E-6	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9995386796625418	WITHOUT_CLASSIFICATION	4.6132033745826135E-4	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999521070664464	WITHOUT_CLASSIFICATION	4.789293355348332E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999907843631094	WITHOUT_CLASSIFICATION	9.215636890545923E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999984367069014	WITHOUT_CLASSIFICATION	1.5632930986226894E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.999991396718583	WITHOUT_CLASSIFICATION	8.603281416960007E-6	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999970744118016	WITHOUT_CLASSIFICATION	2.9255881984280487E-6	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999994046406758	WITHOUT_CLASSIFICATION	5.953593241332695E-7	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999845703250904	WITHOUT_CLASSIFICATION	1.542967490970341E-5	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.999974447414777	WITHOUT_CLASSIFICATION	2.5552585222967192E-5	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999998642856985	WITHOUT_CLASSIFICATION	1.3571430148388123E-7	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999974892358423	WITHOUT_CLASSIFICATION	2.5107641577229588E-6	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999587588876	WITHOUT_CLASSIFICATION	4.1241112406177174E-8	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999815565938178	WITHOUT_CLASSIFICATION	1.8443406182270326E-5	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999855090607929	WITHOUT_CLASSIFICATION	1.4490939207203064E-5	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999978624066846	WITHOUT_CLASSIFICATION	2.1375933152945266E-6	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999987778930092	WITHOUT_CLASSIFICATION	1.2221069907933875E-6	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999991411917943	WITHOUT_CLASSIFICATION	8.588082055277542E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999987511095	WITHOUT_CLASSIFICATION	1.2488905000185908E-6	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9990679927136129	WITHOUT_CLASSIFICATION	9.320072863871414E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9998140061991346	WITHOUT_CLASSIFICATION	1.8599380086536328E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9998140061991346	WITHOUT_CLASSIFICATION	1.8599380086536328E-4	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999960660109529	WITHOUT_CLASSIFICATION	3.933989047087205E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999963501947572	WITHOUT_CLASSIFICATION	3.6498052428033162E-6	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999876612810088	WITHOUT_CLASSIFICATION	1.2338718991304656E-5	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999927097758199	WITHOUT_CLASSIFICATION	7.290224180116953E-6	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999935232381906	WITHOUT_CLASSIFICATION	6.476761809388606E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9998920195226487	WITHOUT_CLASSIFICATION	1.0798047735125171E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9997877119571857	WITHOUT_CLASSIFICATION	2.1228804281433542E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999998526110059	WITHOUT_CLASSIFICATION	1.473889941370026E-7	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999999391141668	WITHOUT_CLASSIFICATION	6.08858331178545E-8	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999999998350279	WITHOUT_CLASSIFICATION	1.6497225725925565E-10	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999974006599435	WITHOUT_CLASSIFICATION	2.5993400564377516E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999971838065872	WITHOUT_CLASSIFICATION	2.816193412813419E-6	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999997535024749	WITHOUT_CLASSIFICATION	2.464975251198292E-7	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.999999964884036	WITHOUT_CLASSIFICATION	3.511596409847056E-8	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.999994065372205	WITHOUT_CLASSIFICATION	5.9346277949978325E-6	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999902749588423	WITHOUT_CLASSIFICATION	9.725041157696914E-6	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999990965239993	WITHOUT_CLASSIFICATION	9.03476000642747E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999913010319348	WITHOUT_CLASSIFICATION	8.698968065142624E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9991610253605678	WITHOUT_CLASSIFICATION	8.389746394322005E-4	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999999492281868	WITHOUT_CLASSIFICATION	5.0771813200585306E-8	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999857382997238	WITHOUT_CLASSIFICATION	1.4261700276096048E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999990962894574	WITHOUT_CLASSIFICATION	9.037105424938114E-7	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999987626104909	WITHOUT_CLASSIFICATION	1.2373895090331941E-6	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999994878529453	WITHOUT_CLASSIFICATION	5.121470547566265E-7	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999989269323704	WITHOUT_CLASSIFICATION	1.0730676296603165E-6	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999993584551461	WITHOUT_CLASSIFICATION	6.41544853994201E-7	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999999801183457	WITHOUT_CLASSIFICATION	1.9881654297301644E-8	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999931214797427	WITHOUT_CLASSIFICATION	6.8785202572356196E-6	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999998566421222	WITHOUT_CLASSIFICATION	1.433578777437382E-7	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999926966040917	WITHOUT_CLASSIFICATION	7.3033959082388745E-6	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999992692768931	WITHOUT_CLASSIFICATION	7.307231067849923E-7	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999984912035201	WITHOUT_CLASSIFICATION	1.5087964799289568E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999059132956	WITHOUT_CLASSIFICATION	9.408670436364247E-8	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999993134133185	WITHOUT_CLASSIFICATION	6.865866814902604E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999059132956	WITHOUT_CLASSIFICATION	9.408670436364247E-8	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999964043725128	WITHOUT_CLASSIFICATION	3.5956274870743096E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9990650351971522	WITHOUT_CLASSIFICATION	9.349648028478909E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9990650351971522	WITHOUT_CLASSIFICATION	9.349648028478909E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9990650351971522	WITHOUT_CLASSIFICATION	9.349648028478909E-4	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998925355363	WITHOUT_CLASSIFICATION	1.0746446365829637E-7	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998925355363	WITHOUT_CLASSIFICATION	1.0746446365829637E-7	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999999823105241	WITHOUT_CLASSIFICATION	1.7689475776827703E-8	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.999927879527648	WITHOUT_CLASSIFICATION	7.212047235201698E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.999999930837396	WITHOUT_CLASSIFICATION	6.916260391445484E-8	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999996657203043	WITHOUT_CLASSIFICATION	3.342796957266955E-7	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999994871478074	WITHOUT_CLASSIFICATION	5.128521926587135E-7	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999994932572649	WITHOUT_CLASSIFICATION	5.067427350529271E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999981861372192	WITHOUT_CLASSIFICATION	1.8138627806819208E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999997894189832	WITHOUT_CLASSIFICATION	2.1058101688083896E-7	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999999979978176	WITHOUT_CLASSIFICATION	2.0021823521840043E-9	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999999143101108	WITHOUT_CLASSIFICATION	8.568988915567717E-8	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999991730555009	WITHOUT_CLASSIFICATION	8.269444990165487E-7	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9999523643936334	WITHOUT_CLASSIFICATION	4.763560636646325E-5	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999902131903984	WITHOUT_CLASSIFICATION	9.786809601613395E-6	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999992307131103	WITHOUT_CLASSIFICATION	7.692868898636982E-7	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.99999976039769	WITHOUT_CLASSIFICATION	2.3960231005557755E-7	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999994355620254	WITHOUT_CLASSIFICATION	5.644379746763927E-7	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999590765748481	WITHOUT_CLASSIFICATION	4.092342515194557E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999987852379366	WITHOUT_CLASSIFICATION	1.2147620634028388E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999987852379366	WITHOUT_CLASSIFICATION	1.2147620634028388E-6	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999988888741334	WITHOUT_CLASSIFICATION	1.1111258666319519E-6	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999997560894105	WITHOUT_CLASSIFICATION	2.439105894826384E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999997560894105	WITHOUT_CLASSIFICATION	2.439105894826384E-7	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999099222774276	WITHOUT_CLASSIFICATION	9.007772257247184E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999997341111209	WITHOUT_CLASSIFICATION	2.6588887920568053E-7	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999997723157571	WITHOUT_CLASSIFICATION	2.2768424295868475E-7	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999986611636332	WITHOUT_CLASSIFICATION	1.3388363667992419E-6	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999996613808179	WITHOUT_CLASSIFICATION	3.3861918218428197E-7	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999998780676858	WITHOUT_CLASSIFICATION	1.2193231419733656E-7	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999991872913044	WITHOUT_CLASSIFICATION	8.127086955366497E-7	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999893151156615	WITHOUT_CLASSIFICATION	1.0684884338446877E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999998165916982	WITHOUT_CLASSIFICATION	1.8340830175318054E-7	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999960919486135	WITHOUT_CLASSIFICATION	3.908051386484027E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999999177672346	WITHOUT_CLASSIFICATION	8.223276530917663E-8	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999939599413451	WITHOUT_CLASSIFICATION	6.040058654898442E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.999999900498326	WITHOUT_CLASSIFICATION	9.950167410378801E-8	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999952697533689	WITHOUT_CLASSIFICATION	4.73024663102149E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999997894189832	WITHOUT_CLASSIFICATION	2.1058101688083896E-7	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9999800300949878	WITHOUT_CLASSIFICATION	1.9969905012163583E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999994412787339	WITHOUT_CLASSIFICATION	5.587212661405979E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999663306328	WITHOUT_CLASSIFICATION	3.366936719189032E-8	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999663306328	WITHOUT_CLASSIFICATION	3.366936719189032E-8	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999646110852702	WITHOUT_CLASSIFICATION	3.538891472981385E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9997598023726941	WITHOUT_CLASSIFICATION	2.4019762730582823E-4	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.999999472904827	WITHOUT_CLASSIFICATION	5.270951729058485E-7	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999991090692704	WITHOUT_CLASSIFICATION	8.909307295291676E-7	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999992848505359	WITHOUT_CLASSIFICATION	7.151494640195106E-7	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999998659020324	WITHOUT_CLASSIFICATION	1.3409796766535007E-7	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9994232883302518	WITHOUT_CLASSIFICATION	5.767116697481571E-4	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9991112327542986	WITHOUT_CLASSIFICATION	8.887672457013849E-4	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.999994377106432	WITHOUT_CLASSIFICATION	5.62289356800148E-6	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.99998961947653	WITHOUT_CLASSIFICATION	1.0380523470007084E-5	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999887167245415	WITHOUT_CLASSIFICATION	1.1283275458557868E-5	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999936577104725	WITHOUT_CLASSIFICATION	6.342289527504347E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.5952539043828097	WITHOUT_CLASSIFICATION	0.4047460956171904	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999977325391387	WITHOUT_CLASSIFICATION	2.2674608614079464E-6	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999993215861974	WITHOUT_CLASSIFICATION	6.784138025845734E-7	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999909823600442	WITHOUT_CLASSIFICATION	9.017639955822478E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999996467747327	WITHOUT_CLASSIFICATION	3.5322526720727693E-7	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999999680221372	WITHOUT_CLASSIFICATION	3.197786285732941E-8	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.999999945995299	WITHOUT_CLASSIFICATION	5.400470109155185E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999932261138226	WITHOUT_CLASSIFICATION	6.773886177435307E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999977154258286	WITHOUT_CLASSIFICATION	2.2845741713928388E-6	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999992874253444	WITHOUT_CLASSIFICATION	7.125746555686029E-7	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999979087044013	WITHOUT_CLASSIFICATION	2.091295598632679E-6	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999844199471	WITHOUT_CLASSIFICATION	1.5580052840884684E-8	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999939853924625	WITHOUT_CLASSIFICATION	6.014607537478136E-6	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999985936578242	WITHOUT_CLASSIFICATION	1.4063421758301405E-6	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9995778617736649	WITHOUT_CLASSIFICATION	4.221382263350609E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9789012118670627	WITHOUT_CLASSIFICATION	0.02109878813293737	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999999712984464	WITHOUT_CLASSIFICATION	2.8701553591459576E-8	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999234971332612	WITHOUT_CLASSIFICATION	7.650286673880549E-5	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999586908910959	WITHOUT_CLASSIFICATION	4.130910890417878E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999999961546727	WITHOUT_CLASSIFICATION	3.84532726433853E-9	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9998128500085166	WITHOUT_CLASSIFICATION	1.8714999148333666E-4	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9916491565951774	WITHOUT_CLASSIFICATION	0.008350843404822646	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999765878437	WITHOUT_CLASSIFICATION	2.3412156226416967E-8	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999927812508753	WITHOUT_CLASSIFICATION	7.218749124667704E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9789012118670627	WITHOUT_CLASSIFICATION	0.02109878813293737	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999966044363808	WITHOUT_CLASSIFICATION	3.395563619241875E-6	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999765878437	WITHOUT_CLASSIFICATION	2.3412156226416967E-8	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999988429221065	WITHOUT_CLASSIFICATION	1.157077893522205E-6	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999999213946513	WITHOUT_CLASSIFICATION	7.860534862059114E-8	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999996999920683	WITHOUT_CLASSIFICATION	3.0000793164667123E-7	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999974954305262	WITHOUT_CLASSIFICATION	2.5045694737749193E-6	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999994381171043	WITHOUT_CLASSIFICATION	5.618828955670744E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999936318869811	WITHOUT_CLASSIFICATION	6.368113018840069E-6	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999936318869811	WITHOUT_CLASSIFICATION	6.368113018840069E-6	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999999549290072	WITHOUT_CLASSIFICATION	4.507099283696165E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999956705339024	WITHOUT_CLASSIFICATION	4.329466097676119E-6	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.999999625377377	WITHOUT_CLASSIFICATION	3.746226230901428E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.999999625377377	WITHOUT_CLASSIFICATION	3.746226230901428E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999825958954833	WITHOUT_CLASSIFICATION	1.7404104516649822E-5	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9987968517512514	WITHOUT_CLASSIFICATION	0.0012031482487486107	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999263405887259	WITHOUT_CLASSIFICATION	7.365941127409973E-5	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999263405887259	WITHOUT_CLASSIFICATION	7.365941127409973E-5	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999741695600537	WITHOUT_CLASSIFICATION	2.583043994625058E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999869066070634	WITHOUT_CLASSIFICATION	1.3093392936586013E-5	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999980400135432	WITHOUT_CLASSIFICATION	1.959986456777192E-6	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999976055444533	WITHOUT_CLASSIFICATION	2.3944555468430998E-6	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999963430013478	WITHOUT_CLASSIFICATION	3.6569986522150994E-6	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999938842484156	WITHOUT_CLASSIFICATION	6.115751584433223E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999946686035894	WITHOUT_CLASSIFICATION	5.3313964105484265E-6	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999893578577872	WITHOUT_CLASSIFICATION	1.0642142212821886E-5	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999834370280336	WITHOUT_CLASSIFICATION	1.656297196641393E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999991380566826	WITHOUT_CLASSIFICATION	8.619433173611264E-7	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999990276176461	WITHOUT_CLASSIFICATION	9.723823537753566E-7	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999809084058617	WITHOUT_CLASSIFICATION	1.9091594138289485E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999810059400446	WITHOUT_CLASSIFICATION	1.8994059955397073E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.999997159104086	WITHOUT_CLASSIFICATION	2.8408959140397487E-6	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999997303216932	WITHOUT_CLASSIFICATION	2.696783067847651E-7	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999995823841956	WITHOUT_CLASSIFICATION	4.176158043504602E-7	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9998330693748331	WITHOUT_CLASSIFICATION	1.6693062516694916E-4	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999962671519256	WITHOUT_CLASSIFICATION	3.732848074431489E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999918700386129	WITHOUT_CLASSIFICATION	8.129961387165325E-6	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999798847740916	WITHOUT_CLASSIFICATION	2.0115225908434645E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999993027194292	WITHOUT_CLASSIFICATION	6.972805708211916E-7	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999982688970098	WITHOUT_CLASSIFICATION	1.7311029901743874E-6	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999899425366937	WITHOUT_CLASSIFICATION	1.0057463306227734E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999983207746735	WITHOUT_CLASSIFICATION	1.679225326498688E-5	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999601358572707	WITHOUT_CLASSIFICATION	3.9864142729240465E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999804952700375	WITHOUT_CLASSIFICATION	1.9504729962448368E-5	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999962041468634	WITHOUT_CLASSIFICATION	3.795853136582047E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999835765446196	WITHOUT_CLASSIFICATION	1.642345538051166E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999951384865368	WITHOUT_CLASSIFICATION	4.8615134632590474E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999951384865368	WITHOUT_CLASSIFICATION	4.8615134632590474E-6	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999969575416088	WITHOUT_CLASSIFICATION	3.042458391158219E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999994686498924	WITHOUT_CLASSIFICATION	5.313501076208385E-7	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999923807645612	WITHOUT_CLASSIFICATION	7.619235438834686E-6	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9997719532440906	WITHOUT_CLASSIFICATION	2.280467559094043E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999539608907602	WITHOUT_CLASSIFICATION	4.603910923981541E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999845472324718	WITHOUT_CLASSIFICATION	1.5452767528292025E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999992158551492	WITHOUT_CLASSIFICATION	7.841448508374705E-7	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999994931328714	WITHOUT_CLASSIFICATION	5.068671285789242E-7	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999733494422904	WITHOUT_CLASSIFICATION	2.665055770960778E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999852742569	WITHOUT_CLASSIFICATION	1.472574314587986E-8	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999995935886166	WITHOUT_CLASSIFICATION	4.064113835548393E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999999582488132	WITHOUT_CLASSIFICATION	4.175118680834482E-8	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999958905344914	WITHOUT_CLASSIFICATION	4.1094655086173185E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999932289136464	WITHOUT_CLASSIFICATION	6.771086353653444E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999978058285117	WITHOUT_CLASSIFICATION	2.1941714883534444E-6	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999992404963144	WITHOUT_CLASSIFICATION	7.595036855993397E-7	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999906251811371	WITHOUT_CLASSIFICATION	9.374818862898889E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999964250500515	WITHOUT_CLASSIFICATION	3.574949948547171E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999959757574141	WITHOUT_CLASSIFICATION	4.024242585958109E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999845148214187	WITHOUT_CLASSIFICATION	1.5485178581279557E-5	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.99999964187849	WITHOUT_CLASSIFICATION	3.581215098833191E-7	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999668742401658	WITHOUT_CLASSIFICATION	3.3125759834039755E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999998329244865	WITHOUT_CLASSIFICATION	1.6707551358408998E-7	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999999733803387	WITHOUT_CLASSIFICATION	2.6619661285405635E-8	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.999999780686551	WITHOUT_CLASSIFICATION	2.1931344892665085E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999985752550419	WITHOUT_CLASSIFICATION	1.4247449580686227E-6	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999851584545121	WITHOUT_CLASSIFICATION	1.4841545487895142E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999998718908055	WITHOUT_CLASSIFICATION	1.2810919450436576E-7	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999969709361516	WITHOUT_CLASSIFICATION	3.029063848261324E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999999125570274	WITHOUT_CLASSIFICATION	8.744297264440283E-8	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999903641727507	WITHOUT_CLASSIFICATION	9.63582724924163E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999993035004047	WITHOUT_CLASSIFICATION	6.964995953168196E-7	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.999999938688667	WITHOUT_CLASSIFICATION	6.131133296257352E-8	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999959503241489	WITHOUT_CLASSIFICATION	4.049675851181843E-6	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999997055818559	WITHOUT_CLASSIFICATION	2.9441814405416284E-7	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999961722467116	WITHOUT_CLASSIFICATION	3.827753288493115E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999993742538414	WITHOUT_CLASSIFICATION	6.257461584913313E-7	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.999998786235995	WITHOUT_CLASSIFICATION	1.213764004978325E-6	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999999932198113	WITHOUT_CLASSIFICATION	6.7801887271531804E-9	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999993632605478	WITHOUT_CLASSIFICATION	6.367394521478727E-7	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9990084709605141	WITHOUT_CLASSIFICATION	9.91529039485864E-4	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999999950234209	WITHOUT_CLASSIFICATION	4.976579231909032E-9	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999437099721136	WITHOUT_CLASSIFICATION	5.629002788644984E-5	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999437099721136	WITHOUT_CLASSIFICATION	5.629002788644984E-5	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.999999985268505	WITHOUT_CLASSIFICATION	1.4731495117151276E-8	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999087194880321	WITHOUT_CLASSIFICATION	9.128051196794167E-5	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999956517903208	WITHOUT_CLASSIFICATION	4.348209679144036E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999989506030362	WITHOUT_CLASSIFICATION	1.049396963827353E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999536255821	WITHOUT_CLASSIFICATION	4.637441779837339E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999636803752	WITHOUT_CLASSIFICATION	3.6319624633574546E-8	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999982559148729	WITHOUT_CLASSIFICATION	1.7440851270856785E-6	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999978439119317	WITHOUT_CLASSIFICATION	2.1560880682493694E-6	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9152137430652291	WITHOUT_CLASSIFICATION	0.08478625693477103	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999576258806498	WITHOUT_CLASSIFICATION	4.237411935018576E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999996453166843	WITHOUT_CLASSIFICATION	3.546833156719661E-7	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999996767659872	WITHOUT_CLASSIFICATION	3.232340127809845E-7	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999998330431666	WITHOUT_CLASSIFICATION	1.669568333427602E-7	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999998805652115	WITHOUT_CLASSIFICATION	1.1943478857103916E-7	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.999999971764771	WITHOUT_CLASSIFICATION	2.8235229014716997E-8	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999998388282525	WITHOUT_CLASSIFICATION	1.6117174761304316E-7	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999998833834329	WITHOUT_CLASSIFICATION	1.1661656700681964E-7	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999973279456422	WITHOUT_CLASSIFICATION	2.672054357852059E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999994341778576	WITHOUT_CLASSIFICATION	5.658221423608819E-7	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999938497873135	WITHOUT_CLASSIFICATION	6.150212686461256E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.99999961942512	WITHOUT_CLASSIFICATION	3.8057488004337306E-7	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999910040498758	WITHOUT_CLASSIFICATION	8.995950124147738E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999996223419002	WITHOUT_CLASSIFICATION	3.776580998626179E-7	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999997409378604	WITHOUT_CLASSIFICATION	2.590621396698161E-7	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999401322026	WITHOUT_CLASSIFICATION	5.986779730141793E-8	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.999999725813707	WITHOUT_CLASSIFICATION	2.741862929077378E-7	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.999999640729058	WITHOUT_CLASSIFICATION	3.5927094198071845E-7	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999999579101114	WITHOUT_CLASSIFICATION	4.2089888657370054E-8	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999999161803993	WITHOUT_CLASSIFICATION	8.381960067234966E-8	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999998971806306	WITHOUT_CLASSIFICATION	1.0281936938511182E-7	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999997689405679	WITHOUT_CLASSIFICATION	2.3105943214799443E-7	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999997337195404	WITHOUT_CLASSIFICATION	2.662804595691735E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999985877862265	WITHOUT_CLASSIFICATION	1.4122137735079878E-6	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999966994312148	WITHOUT_CLASSIFICATION	3.3005687851669506E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.999998786235995	WITHOUT_CLASSIFICATION	1.213764004978325E-6	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999994565383996	WITHOUT_CLASSIFICATION	5.434616003669464E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999738567854	WITHOUT_CLASSIFICATION	2.6143214667692643E-8	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999738567854	WITHOUT_CLASSIFICATION	2.6143214667692643E-8	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999978453430667	WITHOUT_CLASSIFICATION	2.154656933362616E-6	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999989964880609	WITHOUT_CLASSIFICATION	1.0035119390051047E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999997530959247	WITHOUT_CLASSIFICATION	2.469040752700259E-7	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999994045180026	WITHOUT_CLASSIFICATION	5.954819974162255E-7	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999982751834157	WITHOUT_CLASSIFICATION	1.7248165843275735E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999992817499369	WITHOUT_CLASSIFICATION	7.182500631027386E-7	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999994548028177	WITHOUT_CLASSIFICATION	5.451971822461801E-7	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.999996472424983	WITHOUT_CLASSIFICATION	3.5275750170566057E-6	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999952619140311	WITHOUT_CLASSIFICATION	4.738085968986187E-6	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999962699930153	WITHOUT_CLASSIFICATION	3.7300069847658285E-6	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999767299833826	WITHOUT_CLASSIFICATION	2.32700166173126E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999906020085286	WITHOUT_CLASSIFICATION	9.397991471291887E-6	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999973905592183	WITHOUT_CLASSIFICATION	2.6094407816232417E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999996128692066	WITHOUT_CLASSIFICATION	3.8713079341446663E-7	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999999202842346	WITHOUT_CLASSIFICATION	7.971576552810289E-8	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.999992781882664	WITHOUT_CLASSIFICATION	7.218117335829385E-6	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999735817795512	WITHOUT_CLASSIFICATION	2.6418220448794958E-5	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999836305463492	WITHOUT_CLASSIFICATION	1.6369453650851803E-5	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999932237626377	WITHOUT_CLASSIFICATION	6.776237362312379E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999946654780395	WITHOUT_CLASSIFICATION	5.334521960503625E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999588304291849	WITHOUT_CLASSIFICATION	4.116957081503284E-5	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999966411333936	WITHOUT_CLASSIFICATION	3.3588666063533986E-6	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999998781476045	WITHOUT_CLASSIFICATION	1.218523954405497E-7	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999981292516151	WITHOUT_CLASSIFICATION	1.8707483848348781E-6	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999842492525192	WITHOUT_CLASSIFICATION	1.5750747480779574E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999956368882359	WITHOUT_CLASSIFICATION	4.363111764146755E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999173493975	WITHOUT_CLASSIFICATION	8.265060249733647E-7	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999893614356	WITHOUT_CLASSIFICATION	1.0638564350640373E-8	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999992046333388	WITHOUT_CLASSIFICATION	7.953666612738506E-7	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999819666955	WITHOUT_CLASSIFICATION	1.8033304575798622E-8	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999999772252901	WITHOUT_CLASSIFICATION	2.277470995225999E-8	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999967779210281	WITHOUT_CLASSIFICATION	3.222078971892785E-6	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999989378881105	WITHOUT_CLASSIFICATION	1.0621118896121632E-6	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999989796636466	WITHOUT_CLASSIFICATION	1.0203363534312152E-6	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999987835314466	WITHOUT_CLASSIFICATION	1.2164685533734563E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999971486307492	WITHOUT_CLASSIFICATION	2.8513692507520166E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999993103112532	WITHOUT_CLASSIFICATION	6.896887468097317E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999956368882359	WITHOUT_CLASSIFICATION	4.363111764146755E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999173493975	WITHOUT_CLASSIFICATION	8.265060249733647E-7	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999893614356	WITHOUT_CLASSIFICATION	1.0638564350640373E-8	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999819666955	WITHOUT_CLASSIFICATION	1.8033304575798622E-8	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999132584110481	WITHOUT_CLASSIFICATION	8.674158895194935E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999997572153144	WITHOUT_CLASSIFICATION	2.4278468555255417E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999927833581266	WITHOUT_CLASSIFICATION	7.216641873395662E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999998365613108	WITHOUT_CLASSIFICATION	1.6343868920056028E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999991329140906	WITHOUT_CLASSIFICATION	8.670859094350009E-7	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999971895325016	WITHOUT_CLASSIFICATION	2.8104674984197125E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999998881268436	WITHOUT_CLASSIFICATION	1.1187315637638401E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999825499783139	WITHOUT_CLASSIFICATION	1.745002168604479E-5	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.999999680081068	WITHOUT_CLASSIFICATION	3.199189320051051E-7	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999996054859012	WITHOUT_CLASSIFICATION	3.945140988570907E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999996589214675	WITHOUT_CLASSIFICATION	3.410785325298224E-7	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999998169854913	WITHOUT_CLASSIFICATION	1.8301450867727978E-7	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999949976090953	WITHOUT_CLASSIFICATION	5.002390904750328E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999996524655145	WITHOUT_CLASSIFICATION	3.475344855416323E-7	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999994662641467	WITHOUT_CLASSIFICATION	5.337358533675299E-7	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999990651484287	WITHOUT_CLASSIFICATION	9.348515712381796E-7	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999997607367849	WITHOUT_CLASSIFICATION	2.392632152024637E-7	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999989815806289	WITHOUT_CLASSIFICATION	1.0184193709885883E-6	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999994549781748	WITHOUT_CLASSIFICATION	5.450218252516204E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999993103112532	WITHOUT_CLASSIFICATION	6.896887468097317E-7	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999997572153144	WITHOUT_CLASSIFICATION	2.4278468555255417E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999927833581266	WITHOUT_CLASSIFICATION	7.216641873395662E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999991329140906	WITHOUT_CLASSIFICATION	8.670859094350009E-7	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999971895325016	WITHOUT_CLASSIFICATION	2.8104674984197125E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999998881268436	WITHOUT_CLASSIFICATION	1.1187315637638401E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999825499783139	WITHOUT_CLASSIFICATION	1.745002168604479E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999963481280896	WITHOUT_CLASSIFICATION	3.65187191041786E-6	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.999983366091177	WITHOUT_CLASSIFICATION	1.6633908823020632E-5	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999999599254212	WITHOUT_CLASSIFICATION	4.007457866381312E-8	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999184532913	WITHOUT_CLASSIFICATION	8.154670861296182E-8	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999211626423798	WITHOUT_CLASSIFICATION	7.883735762012582E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999211626423798	WITHOUT_CLASSIFICATION	7.883735762012582E-5	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999943661017273	WITHOUT_CLASSIFICATION	5.633898272600492E-6	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999999950679136	WITHOUT_CLASSIFICATION	4.9320863518297865E-9	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999998911980188	WITHOUT_CLASSIFICATION	1.0880198111725196E-7	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999978951988459	WITHOUT_CLASSIFICATION	2.1048011542091747E-6	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999999873654442	WITHOUT_CLASSIFICATION	1.2634555842433357E-8	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999976239223062	WITHOUT_CLASSIFICATION	2.376077693947497E-6	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999998969732277	WITHOUT_CLASSIFICATION	1.0302677232600126E-7	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999996321796236	WITHOUT_CLASSIFICATION	3.678203763347031E-7	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.999999456086236	WITHOUT_CLASSIFICATION	5.439137640385943E-7	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999999613166294	WITHOUT_CLASSIFICATION	3.8683370622345416E-8	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999999607931828	WITHOUT_CLASSIFICATION	3.920681730463469E-8	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999996313713087	WITHOUT_CLASSIFICATION	3.68628691271563E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999834988515138	WITHOUT_CLASSIFICATION	1.650114848614238E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999996498315046	WITHOUT_CLASSIFICATION	3.5016849546265973E-7	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999999663700383	WITHOUT_CLASSIFICATION	3.3629961660865046E-8	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999997899068965	WITHOUT_CLASSIFICATION	2.1009310353486944E-7	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999800727729	WITHOUT_CLASSIFICATION	1.9927227080797123E-8	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999999515001493	WITHOUT_CLASSIFICATION	4.849985071915876E-8	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.999997481540797	WITHOUT_CLASSIFICATION	2.518459202985382E-6	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999999938023888	WITHOUT_CLASSIFICATION	6.197611166029504E-9	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9999988839881427	WITHOUT_CLASSIFICATION	1.1160118572632681E-6	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999996115543895	WITHOUT_CLASSIFICATION	3.8844561046651115E-7	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999999532980357	WITHOUT_CLASSIFICATION	4.670196430470245E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970832055736037	WITHOUT_CLASSIFICATION	0.002916794426396358	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999997526168007	WITHOUT_CLASSIFICATION	2.4738319927845006E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999999002789415	WITHOUT_CLASSIFICATION	9.972105851132037E-8	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999993591437429	WITHOUT_CLASSIFICATION	6.40856257068847E-7	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.999756498916677	WITHOUT_CLASSIFICATION	2.4350108332296723E-4	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999798802022692	WITHOUT_CLASSIFICATION	2.0119797730794333E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999997526168007	WITHOUT_CLASSIFICATION	2.4738319927845006E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999999002789415	WITHOUT_CLASSIFICATION	9.972105851132037E-8	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999996498315046	WITHOUT_CLASSIFICATION	3.5016849546265973E-7	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999994822531836	WITHOUT_CLASSIFICATION	5.177468164604301E-7	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999989719435639	WITHOUT_CLASSIFICATION	1.0280564361163528E-6	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9992255967634853	WITHOUT_CLASSIFICATION	7.744032365146332E-4	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999489840589902	WITHOUT_CLASSIFICATION	5.1015941009812856E-5	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999999333625763	WITHOUT_CLASSIFICATION	6.663742371540662E-8	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.999987887235841	WITHOUT_CLASSIFICATION	1.211276415902587E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999988779280508	WITHOUT_CLASSIFICATION	1.1220719492533723E-6	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999999532813646	WITHOUT_CLASSIFICATION	4.6718635352140107E-8	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9979140473631252	WITHOUT_CLASSIFICATION	0.0020859526368747178	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999159870330384	WITHOUT_CLASSIFICATION	8.401296696154326E-5	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9997065594122254	WITHOUT_CLASSIFICATION	2.934405877745676E-4	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999967039208316	WITHOUT_CLASSIFICATION	3.296079168403698E-6	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999991056689221	WITHOUT_CLASSIFICATION	8.943310779264901E-7	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999982903171377	WITHOUT_CLASSIFICATION	1.709682862331788E-6	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999990928164911	WITHOUT_CLASSIFICATION	9.071835089237033E-7	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999550544663405	WITHOUT_CLASSIFICATION	4.494553365954973E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9998585745152521	WITHOUT_CLASSIFICATION	1.4142548474783552E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.999990027425502	WITHOUT_CLASSIFICATION	9.972574498039407E-6	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999995455535	WITHOUT_CLASSIFICATION	4.5444647598858075E-10	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999905911046946	WITHOUT_CLASSIFICATION	9.408895305328007E-6	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999874763603	WITHOUT_CLASSIFICATION	1.2523639682191846E-8	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999985851852409	WITHOUT_CLASSIFICATION	1.4148147592093294E-6	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999949606266834	WITHOUT_CLASSIFICATION	5.039373316711006E-6	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999999439104396	WITHOUT_CLASSIFICATION	5.608956034721323E-8	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999999976749677	WITHOUT_CLASSIFICATION	2.325032236546647E-9	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999973735178935	WITHOUT_CLASSIFICATION	2.6264821063457888E-6	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999987377145578	WITHOUT_CLASSIFICATION	1.2622854421695301E-6	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.999997393287457	WITHOUT_CLASSIFICATION	2.606712543028268E-6	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999618102719992	WITHOUT_CLASSIFICATION	3.818972800085326E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9993685424494044	WITHOUT_CLASSIFICATION	6.314575505956814E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999990143210957	WITHOUT_CLASSIFICATION	9.856789041942544E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999031986287	WITHOUT_CLASSIFICATION	9.68013711834252E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999031986287	WITHOUT_CLASSIFICATION	9.68013711834252E-8	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999834988515138	WITHOUT_CLASSIFICATION	1.650114848614238E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999999588021159	WITHOUT_CLASSIFICATION	4.119788417516886E-8	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999998336384881	WITHOUT_CLASSIFICATION	1.6636151191221035E-7	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.999996166337848	WITHOUT_CLASSIFICATION	3.833662151967622E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999991060390701	WITHOUT_CLASSIFICATION	8.939609299086757E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999991060390701	WITHOUT_CLASSIFICATION	8.939609299086757E-6	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999996018836643	WITHOUT_CLASSIFICATION	3.981163356527478E-7	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999999994296713	WITHOUT_CLASSIFICATION	5.703287558881035E-10	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999999368795348	WITHOUT_CLASSIFICATION	6.312046519301085E-8	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999998845816872	WITHOUT_CLASSIFICATION	1.154183127771498E-7	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999986578069677	WITHOUT_CLASSIFICATION	1.3421930322507562E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999999813876856	WITHOUT_CLASSIFICATION	1.8612314355432755E-8	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999959511431342	WITHOUT_CLASSIFICATION	4.0488568657590356E-6	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999999875854251	WITHOUT_CLASSIFICATION	1.2414574851023421E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999965712507001	WITHOUT_CLASSIFICATION	3.428749299861499E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.999999768748354	WITHOUT_CLASSIFICATION	2.3125164608088587E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999950853629487	WITHOUT_CLASSIFICATION	4.914637051240095E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999993005264048	WITHOUT_CLASSIFICATION	6.994735951086876E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999850849984953	WITHOUT_CLASSIFICATION	1.4915001504857664E-5	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999898350902751	WITHOUT_CLASSIFICATION	1.0164909724936332E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999986331323557	WITHOUT_CLASSIFICATION	1.3668676442521684E-6	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999991358397909	WITHOUT_CLASSIFICATION	8.641602091441043E-7	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999639312165	WITHOUT_CLASSIFICATION	3.606878353983217E-8	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999639312165	WITHOUT_CLASSIFICATION	3.606878353983217E-8	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999957677323694	WITHOUT_CLASSIFICATION	4.2322676305514E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999957677323694	WITHOUT_CLASSIFICATION	4.2322676305514E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999952589846	WITHOUT_CLASSIFICATION	4.741015386973345E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999835768273679	WITHOUT_CLASSIFICATION	1.64231726321053E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.997399960263618	WITHOUT_CLASSIFICATION	0.002600039736382048	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999999962975242	WITHOUT_CLASSIFICATION	3.702475834781271E-9	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999849883116129	WITHOUT_CLASSIFICATION	1.501168838708849E-5	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999830430294304	WITHOUT_CLASSIFICATION	1.6956970569602394E-5	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999999232742949	WITHOUT_CLASSIFICATION	7.672570509023525E-8	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999993005264048	WITHOUT_CLASSIFICATION	6.994735951086876E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999850849984953	WITHOUT_CLASSIFICATION	1.4915001504857664E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999986331323557	WITHOUT_CLASSIFICATION	1.3668676442521684E-6	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999780106927189	WITHOUT_CLASSIFICATION	2.198930728110463E-5	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9992809092671712	WITHOUT_CLASSIFICATION	7.190907328289385E-4	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9959799520359184	WITHOUT_CLASSIFICATION	0.004020047964081587	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999988178312457	WITHOUT_CLASSIFICATION	1.1821687542974604E-6	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999993900460068	WITHOUT_CLASSIFICATION	6.099539931732205E-7	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999934949355604	WITHOUT_CLASSIFICATION	6.50506443957741E-6	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999988127182966	WITHOUT_CLASSIFICATION	1.1872817034657524E-6	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999995523744455	WITHOUT_CLASSIFICATION	4.476255545049768E-7	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.999999743329113	WITHOUT_CLASSIFICATION	2.5667088699479236E-7	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999994873678233	WITHOUT_CLASSIFICATION	5.12632176759861E-7	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999899080891917	WITHOUT_CLASSIFICATION	1.009191080819569E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9998076903570531	WITHOUT_CLASSIFICATION	1.9230964294690483E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.999944865297997	WITHOUT_CLASSIFICATION	5.513470200309335E-5	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9995567412781877	WITHOUT_CLASSIFICATION	4.432587218122825E-4	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999818941173714	WITHOUT_CLASSIFICATION	1.810588262866343E-5	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999999018142058	WITHOUT_CLASSIFICATION	9.818579416150286E-8	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999258666711862	WITHOUT_CLASSIFICATION	7.413332881378468E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999998376354045	WITHOUT_CLASSIFICATION	1.623645955979706E-7	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999988331781848	WITHOUT_CLASSIFICATION	1.166821815104307E-6	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999977381364442	WITHOUT_CLASSIFICATION	2.2618635557559756E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999988299179106	WITHOUT_CLASSIFICATION	1.1700820894164734E-6	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999861278887472	WITHOUT_CLASSIFICATION	1.3872111252837679E-5	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999605604255499	WITHOUT_CLASSIFICATION	3.943957445012831E-5	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999987987736182	WITHOUT_CLASSIFICATION	1.201226381814302E-6	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999997010482371	WITHOUT_CLASSIFICATION	2.9895176292360637E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999782997900579	WITHOUT_CLASSIFICATION	2.1700209942021367E-5	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9998611248512347	WITHOUT_CLASSIFICATION	1.3887514876538293E-4	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999496184992778	WITHOUT_CLASSIFICATION	5.0381500722210024E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999993615440635	WITHOUT_CLASSIFICATION	6.38455936426705E-7	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.994145409350067	WITHOUT_CLASSIFICATION	0.005854590649932971	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.999979246624038	WITHOUT_CLASSIFICATION	2.0753375961918267E-5	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9997420002663667	WITHOUT_CLASSIFICATION	2.5799973363327936E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999659439088169	WITHOUT_CLASSIFICATION	3.405609118320977E-5	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999916523689745	WITHOUT_CLASSIFICATION	8.347631025518397E-6	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9994858931142031	WITHOUT_CLASSIFICATION	5.141068857969198E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999999613896836	WITHOUT_CLASSIFICATION	3.8610316342422745E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999993743549179	WITHOUT_CLASSIFICATION	6.256450820903876E-7	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999285270969219	WITHOUT_CLASSIFICATION	7.147290307808076E-5	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.999986155557641	WITHOUT_CLASSIFICATION	1.3844442358985815E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999956411676714	WITHOUT_CLASSIFICATION	4.358832328686776E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.999418372043476	WITHOUT_CLASSIFICATION	5.816279565239565E-4	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999998336384881	WITHOUT_CLASSIFICATION	1.6636151191221035E-7	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999993743549179	WITHOUT_CLASSIFICATION	6.256450820903876E-7	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999937476471773	WITHOUT_CLASSIFICATION	6.25235282268625E-6	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999154797786218	WITHOUT_CLASSIFICATION	8.452022137819264E-5	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9995945410635295	WITHOUT_CLASSIFICATION	4.0545893647050843E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9996465639671268	WITHOUT_CLASSIFICATION	3.5343603287309254E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9996465639671268	WITHOUT_CLASSIFICATION	3.5343603287309254E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999999598558237	WITHOUT_CLASSIFICATION	4.01441763289187E-8	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.999999944838269	WITHOUT_CLASSIFICATION	5.516173098088828E-8	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999978287161949	WITHOUT_CLASSIFICATION	2.171283805096586E-6	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999941437244	WITHOUT_CLASSIFICATION	5.8562755707575075E-9	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.999943268118806	WITHOUT_CLASSIFICATION	5.6731881194084846E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999993381434714	WITHOUT_CLASSIFICATION	6.618565285381119E-7	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999998993767852	WITHOUT_CLASSIFICATION	1.006232147865602E-7	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999970739191498	WITHOUT_CLASSIFICATION	2.9260808501119973E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999998011870583	WITHOUT_CLASSIFICATION	1.9881294167150643E-7	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999998011870583	WITHOUT_CLASSIFICATION	1.9881294167150643E-7	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999998996231111	WITHOUT_CLASSIFICATION	1.0037688891039094E-7	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999832613784774	WITHOUT_CLASSIFICATION	1.6738621522543024E-5	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999999886600707	WITHOUT_CLASSIFICATION	1.1339929402618318E-8	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999999948040873	WITHOUT_CLASSIFICATION	5.195912672614659E-9	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999993494076647	WITHOUT_CLASSIFICATION	6.505923352488851E-7	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999922169143955	WITHOUT_CLASSIFICATION	7.783085604408375E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.999981019439699	WITHOUT_CLASSIFICATION	1.8980560301065037E-5	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999993367519914	WITHOUT_CLASSIFICATION	6.632480086305679E-7	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999999634447385	WITHOUT_CLASSIFICATION	3.655526149085164E-8	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9997519922960401	WITHOUT_CLASSIFICATION	2.480077039599029E-4	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999983633268659	WITHOUT_CLASSIFICATION	1.6366731341098543E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999986443504806	WITHOUT_CLASSIFICATION	1.3556495193653553E-6	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999996523599615	WITHOUT_CLASSIFICATION	3.4764003848894393E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999992251800177	WITHOUT_CLASSIFICATION	7.748199824010941E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999992251800177	WITHOUT_CLASSIFICATION	7.748199824010941E-7	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999985100897223	WITHOUT_CLASSIFICATION	1.489910277752727E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999825499783139	WITHOUT_CLASSIFICATION	1.745002168604479E-5	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999827397276174	WITHOUT_CLASSIFICATION	1.7260272382543428E-5	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.999998631032951	WITHOUT_CLASSIFICATION	1.3689670490789339E-6	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999991338552723	WITHOUT_CLASSIFICATION	8.661447277371465E-7	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999859184321991	WITHOUT_CLASSIFICATION	1.4081567800931043E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999994492501039	WITHOUT_CLASSIFICATION	5.507498961345345E-7	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999990678431077	WITHOUT_CLASSIFICATION	9.32156892316414E-7	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999990425369073	WITHOUT_CLASSIFICATION	9.574630927522191E-7	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.999999588347874	WITHOUT_CLASSIFICATION	4.1165212609933705E-7	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999995572269175	WITHOUT_CLASSIFICATION	4.4277308253388973E-7	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999994120341101	WITHOUT_CLASSIFICATION	5.879658899023379E-7	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999660369291348	WITHOUT_CLASSIFICATION	3.396307086530835E-5	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999998411769035	WITHOUT_CLASSIFICATION	1.5882309652051934E-7	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.999989330489558	WITHOUT_CLASSIFICATION	1.0669510442000527E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.999999356967653	WITHOUT_CLASSIFICATION	6.430323471261136E-7	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999992539046547	WITHOUT_CLASSIFICATION	7.460953452856445E-7	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999975896399983	WITHOUT_CLASSIFICATION	2.410360001727757E-6	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999997215795235	WITHOUT_CLASSIFICATION	2.7842047642627156E-7	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999808206688674	WITHOUT_CLASSIFICATION	1.9179331132645376E-5	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9998426589540073	WITHOUT_CLASSIFICATION	1.5734104599277374E-4	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999929654617866	WITHOUT_CLASSIFICATION	7.0345382133687174E-6	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999983348340049	WITHOUT_CLASSIFICATION	1.665165995086026E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9998162646776024	WITHOUT_CLASSIFICATION	1.8373532239762794E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.976293155641527	WITHOUT_CLASSIFICATION	0.023706844358473072	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9999729940104642	WITHOUT_CLASSIFICATION	2.700598953569202E-5	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999999707765376	WITHOUT_CLASSIFICATION	2.9223462476906123E-8	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999999603158588	WITHOUT_CLASSIFICATION	3.968414116172226E-8	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999999695068835	WITHOUT_CLASSIFICATION	3.0493116447371705E-8	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999398760117164	WITHOUT_CLASSIFICATION	6.0123988283691733E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999999666356039	WITHOUT_CLASSIFICATION	3.336439623114741E-8	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999995460620558	WITHOUT_CLASSIFICATION	4.539379442142194E-7	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999997456227535	WITHOUT_CLASSIFICATION	2.5437724651282233E-7	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999664993343	WITHOUT_CLASSIFICATION	3.35006657463445E-8	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999998038760083	WITHOUT_CLASSIFICATION	1.9612399170402457E-7	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999999873051069	WITHOUT_CLASSIFICATION	1.269489319628004E-8	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999997856461089	WITHOUT_CLASSIFICATION	2.1435389101957926E-7	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999115366829171	WITHOUT_CLASSIFICATION	8.84633170828884E-5	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999885168229382	WITHOUT_CLASSIFICATION	1.148317706174579E-5	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999658677457703	WITHOUT_CLASSIFICATION	3.4132254229526595E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999999704542232	WITHOUT_CLASSIFICATION	2.954577685021789E-8	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999198932413214	WITHOUT_CLASSIFICATION	8.010675867865116E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999998925657495	WITHOUT_CLASSIFICATION	1.0743425052947418E-7	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999933523632796	WITHOUT_CLASSIFICATION	6.647636720447655E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999577326267824	WITHOUT_CLASSIFICATION	4.2267373217550276E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999702277800676	WITHOUT_CLASSIFICATION	2.977221993243174E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998113905683	WITHOUT_CLASSIFICATION	1.886094317883809E-7	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999997297044614	WITHOUT_CLASSIFICATION	2.702955386704148E-7	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999075216808	WITHOUT_CLASSIFICATION	9.247831927181341E-8	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999997526168007	WITHOUT_CLASSIFICATION	2.4738319927845006E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999997526168007	WITHOUT_CLASSIFICATION	2.4738319927845006E-7	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.999999941037649	WITHOUT_CLASSIFICATION	5.896235089093609E-8	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999924623961073	WITHOUT_CLASSIFICATION	7.537603892679143E-6	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999977372643285	WITHOUT_CLASSIFICATION	2.2627356714363633E-6	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.7455969947419441	DEFECT	0.25440300525805587	WITHOUT_CLASSIFICATION
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999998482330794	WITHOUT_CLASSIFICATION	1.5176692055530208E-7	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999998588813612	WITHOUT_CLASSIFICATION	1.4111863875694236E-7	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999751216300575	WITHOUT_CLASSIFICATION	2.4878369942469146E-5	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999960712402661	WITHOUT_CLASSIFICATION	3.928759733886256E-6	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9992427661185433	WITHOUT_CLASSIFICATION	7.572338814566479E-4	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999996261870538	WITHOUT_CLASSIFICATION	3.7381294613416735E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999987609390821	WITHOUT_CLASSIFICATION	1.239060917815388E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999987609390821	WITHOUT_CLASSIFICATION	1.239060917815388E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999987609390821	WITHOUT_CLASSIFICATION	1.239060917815388E-6	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999933558788466	WITHOUT_CLASSIFICATION	6.644121153334441E-6	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999994614466264	WITHOUT_CLASSIFICATION	5.385533735723266E-7	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999994396867286	WITHOUT_CLASSIFICATION	5.603132714904674E-7	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999967510720297	WITHOUT_CLASSIFICATION	3.2489279702292587E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999967510720297	WITHOUT_CLASSIFICATION	3.2489279702292587E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999386913591022	WITHOUT_CLASSIFICATION	6.130864089772693E-5	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.999969148515949	WITHOUT_CLASSIFICATION	3.085148405111073E-5	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999991554160795	WITHOUT_CLASSIFICATION	8.445839205810451E-7	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999992264665928	WITHOUT_CLASSIFICATION	7.735334072614471E-7	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999973421389453	WITHOUT_CLASSIFICATION	2.6578610547192427E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999840901415964	WITHOUT_CLASSIFICATION	1.5909858403613453E-5	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999997580782468	WITHOUT_CLASSIFICATION	2.419217531513846E-7	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999818089859017	WITHOUT_CLASSIFICATION	1.8191014098254532E-5	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9825566074271225	WITHOUT_CLASSIFICATION	0.017443392572877484	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.999997126885038	WITHOUT_CLASSIFICATION	2.87311496196241E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.999997126885038	WITHOUT_CLASSIFICATION	2.87311496196241E-6	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999977095962549	WITHOUT_CLASSIFICATION	2.290403745038218E-6	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999771713984273	WITHOUT_CLASSIFICATION	2.282860157272951E-5	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999983354754468	WITHOUT_CLASSIFICATION	1.6645245532124457E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999432417286075	WITHOUT_CLASSIFICATION	5.6758271392429784E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999713813757491	WITHOUT_CLASSIFICATION	2.8618624250856993E-5	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999999721112479	WITHOUT_CLASSIFICATION	2.788875204457276E-8	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999984738315988	WITHOUT_CLASSIFICATION	1.5261684012817282E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999957253228703	WITHOUT_CLASSIFICATION	4.2746771297435775E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999825601678239	WITHOUT_CLASSIFICATION	1.7439832176038274E-5	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999902697153352	WITHOUT_CLASSIFICATION	9.730284664695477E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999938814936912	WITHOUT_CLASSIFICATION	6.118506308906861E-6	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999852616822027	WITHOUT_CLASSIFICATION	1.4738317797397327E-5	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999945031519999	WITHOUT_CLASSIFICATION	5.496848000171825E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999950820509501	WITHOUT_CLASSIFICATION	4.917949049846448E-6	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999680315049043	WITHOUT_CLASSIFICATION	3.1968495095723455E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999951970046757	WITHOUT_CLASSIFICATION	4.802995324328281E-6	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9997842537560164	WITHOUT_CLASSIFICATION	2.1574624398362725E-4	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9998905386877812	WITHOUT_CLASSIFICATION	1.0946131221889185E-4	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999942989706019	WITHOUT_CLASSIFICATION	5.701029398042222E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999457349837891	WITHOUT_CLASSIFICATION	5.4265016210971174E-5	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9980184119053421	WITHOUT_CLASSIFICATION	0.0019815880946579445	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999985603251104	WITHOUT_CLASSIFICATION	1.439674889610119E-6	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999954127413521	WITHOUT_CLASSIFICATION	4.587258648024591E-6	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999769215889759	WITHOUT_CLASSIFICATION	2.3078411024049125E-5	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999778527303426	WITHOUT_CLASSIFICATION	2.2147269657446915E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999899780863877	WITHOUT_CLASSIFICATION	1.0021913612262789E-5	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999988114546906	WITHOUT_CLASSIFICATION	1.1885453094356202E-6	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999992436206983	WITHOUT_CLASSIFICATION	7.563793016773217E-7	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9986838032459288	WITHOUT_CLASSIFICATION	0.0013161967540712464	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999631752153209	WITHOUT_CLASSIFICATION	3.682478467915896E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999353570134432	WITHOUT_CLASSIFICATION	6.4642986556897E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999971985709166	WITHOUT_CLASSIFICATION	2.801429083444444E-6	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999980253639027	WITHOUT_CLASSIFICATION	1.974636097322839E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999353570134432	WITHOUT_CLASSIFICATION	6.4642986556897E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999936008138945	WITHOUT_CLASSIFICATION	6.399186105366163E-6	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999931253321961	WITHOUT_CLASSIFICATION	6.874667803950195E-6	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999948377833573	WITHOUT_CLASSIFICATION	5.162216642648247E-6	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999994363894981	WITHOUT_CLASSIFICATION	5.63610501970461E-7	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999968121321277	WITHOUT_CLASSIFICATION	3.187867872437226E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.99921613424604	WITHOUT_CLASSIFICATION	7.838657539599341E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999993521146061	WITHOUT_CLASSIFICATION	6.478853939946E-7	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999466514632008	WITHOUT_CLASSIFICATION	5.334853679916564E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9997297962569125	WITHOUT_CLASSIFICATION	2.702037430874428E-4	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9998831166758267	WITHOUT_CLASSIFICATION	1.168833241731628E-4	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9998247159938616	WITHOUT_CLASSIFICATION	1.7528400613837797E-4	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9997704831784203	WITHOUT_CLASSIFICATION	2.2951682157966495E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999441040115772	WITHOUT_CLASSIFICATION	5.589598842273816E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9997412202691907	WITHOUT_CLASSIFICATION	2.587797308093054E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999964776003744	WITHOUT_CLASSIFICATION	3.5223996256513317E-6	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999964468662288	WITHOUT_CLASSIFICATION	3.553133771199183E-6	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999875892257792	WITHOUT_CLASSIFICATION	1.241077422084465E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999704916700658	WITHOUT_CLASSIFICATION	2.9508329934230706E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999992679551851	WITHOUT_CLASSIFICATION	7.32044814964526E-7	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999056424133975	WITHOUT_CLASSIFICATION	9.43575866024681E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999796320914383	WITHOUT_CLASSIFICATION	2.0367908561671163E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999941413945054	WITHOUT_CLASSIFICATION	5.858605494618747E-6	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9998603095687014	WITHOUT_CLASSIFICATION	1.3969043129852013E-4	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.999938801425722	WITHOUT_CLASSIFICATION	6.119857427801898E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999463419000081	WITHOUT_CLASSIFICATION	5.3658099991977636E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999976157852534	WITHOUT_CLASSIFICATION	2.3842147465900985E-6	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9998950899197382	WITHOUT_CLASSIFICATION	1.0491008026181938E-4	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999996815310029	WITHOUT_CLASSIFICATION	3.184689971042407E-7	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999997659243103	WITHOUT_CLASSIFICATION	2.3407568968968598E-7	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999994045724863	WITHOUT_CLASSIFICATION	5.954275137923299E-7	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999958743139571	WITHOUT_CLASSIFICATION	4.125686042873401E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9943088946123019	WITHOUT_CLASSIFICATION	0.005691105387698169	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.94558342338435	WITHOUT_CLASSIFICATION	0.05441657661564997	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.999836901334963	WITHOUT_CLASSIFICATION	1.6309866503696842E-4	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999954807499268	WITHOUT_CLASSIFICATION	4.5192500730731495E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999989591365325	WITHOUT_CLASSIFICATION	1.0408634675238554E-6	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999967827968556	WITHOUT_CLASSIFICATION	3.217203144415433E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999661375894736	WITHOUT_CLASSIFICATION	3.386241052649487E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999999914405601	WITHOUT_CLASSIFICATION	8.559439936819682E-9	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999982974340215	WITHOUT_CLASSIFICATION	1.7025659785915418E-6	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999931700837574	WITHOUT_CLASSIFICATION	6.8299162425932685E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999988353498714	WITHOUT_CLASSIFICATION	1.1646501286534668E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999993839358103	WITHOUT_CLASSIFICATION	6.160641896127389E-7	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.999993614407331	WITHOUT_CLASSIFICATION	6.3855926690216644E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999994066117162	WITHOUT_CLASSIFICATION	5.933882839526109E-7	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999991117835612	WITHOUT_CLASSIFICATION	8.882164387630289E-7	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999990463587811	WITHOUT_CLASSIFICATION	9.536412188762206E-7	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999984600078897	WITHOUT_CLASSIFICATION	1.5399921102323827E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999994884273965	WITHOUT_CLASSIFICATION	5.115726034997902E-6	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999995370870016	WITHOUT_CLASSIFICATION	4.6291299844707185E-7	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999928760956998	WITHOUT_CLASSIFICATION	7.1239043002018035E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999990888392282	WITHOUT_CLASSIFICATION	9.111607716838309E-7	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999553200001101	WITHOUT_CLASSIFICATION	4.467999988990722E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999994884273965	WITHOUT_CLASSIFICATION	5.115726034997902E-6	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9071346895312125	WITHOUT_CLASSIFICATION	0.09286531046878758	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9071346895312125	WITHOUT_CLASSIFICATION	0.09286531046878758	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999997332250067	WITHOUT_CLASSIFICATION	2.6677499337273384E-7	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999986075072589	WITHOUT_CLASSIFICATION	1.392492741101857E-6	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999996555291912	WITHOUT_CLASSIFICATION	3.444708088551562E-7	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.999999941654586	WITHOUT_CLASSIFICATION	5.834541393125132E-8	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.999999551698952	WITHOUT_CLASSIFICATION	4.483010479875918E-7	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999989081760359	WITHOUT_CLASSIFICATION	1.0918239641836354E-6	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999971712712666	WITHOUT_CLASSIFICATION	2.8287287334042783E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.7877624188274528	WITHOUT_CLASSIFICATION	0.21223758117254715	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999994274364248	WITHOUT_CLASSIFICATION	5.725635752191983E-7	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9998402407285418	WITHOUT_CLASSIFICATION	1.5975927145821375E-4	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.999999975743732	WITHOUT_CLASSIFICATION	2.425626792278187E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999947977273221	WITHOUT_CLASSIFICATION	5.202272677930186E-6	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999176757438033	WITHOUT_CLASSIFICATION	8.232425619665897E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999998447575148	WITHOUT_CLASSIFICATION	1.5524248522896083E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999617310829482	WITHOUT_CLASSIFICATION	3.826891705188382E-5	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999731022875022	WITHOUT_CLASSIFICATION	2.6897712497795623E-5	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999994861052643	WITHOUT_CLASSIFICATION	5.138947357620484E-7	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999525152086831	WITHOUT_CLASSIFICATION	4.7484791316861526E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999525152086831	WITHOUT_CLASSIFICATION	4.7484791316861526E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999525152086831	WITHOUT_CLASSIFICATION	4.7484791316861526E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999525152086831	WITHOUT_CLASSIFICATION	4.7484791316861526E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999525152086831	WITHOUT_CLASSIFICATION	4.7484791316861526E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.999981729111925	WITHOUT_CLASSIFICATION	1.827088807499692E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977997294996	WITHOUT_CLASSIFICATION	2.200270500380726E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997898203350788	WITHOUT_CLASSIFICATION	2.1017966492113812E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999900026413959	WITHOUT_CLASSIFICATION	9.997358604002908E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.998961118754262	WITHOUT_CLASSIFICATION	0.0010388812457380629	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999998920617269	WITHOUT_CLASSIFICATION	1.0793827305460694E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999970844824572	WITHOUT_CLASSIFICATION	2.915517542807723E-6	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999967997239908	WITHOUT_CLASSIFICATION	3.2002760092499423E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999989115120376	WITHOUT_CLASSIFICATION	1.0884879623816942E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999890556522782	WITHOUT_CLASSIFICATION	1.0944347721826748E-5	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999858477433086	WITHOUT_CLASSIFICATION	1.4152256691428654E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999825305476885	WITHOUT_CLASSIFICATION	1.7469452311532133E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999922739168448	WITHOUT_CLASSIFICATION	7.726083155172515E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999882210803633	WITHOUT_CLASSIFICATION	1.1778919636658209E-5	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999832988490771	WITHOUT_CLASSIFICATION	1.6701150922874402E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999815410391517	WITHOUT_CLASSIFICATION	1.8458960848289698E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999914031495066	WITHOUT_CLASSIFICATION	8.596850493295374E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.999989446761916	WITHOUT_CLASSIFICATION	1.0553238083923101E-5	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.999988532777424	WITHOUT_CLASSIFICATION	1.146722257586655E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999856009389754	WITHOUT_CLASSIFICATION	1.4399061024707672E-5	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999819647418368	WITHOUT_CLASSIFICATION	1.8035258163289702E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999850649792003	WITHOUT_CLASSIFICATION	1.4935020799779073E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999713329801511	WITHOUT_CLASSIFICATION	2.8667019848966477E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999871199206174	WITHOUT_CLASSIFICATION	1.2880079382585453E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999800212040023	WITHOUT_CLASSIFICATION	1.9978795997702205E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999865506416047	WITHOUT_CLASSIFICATION	1.3449358395366415E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999914416045997	WITHOUT_CLASSIFICATION	8.558395400209356E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999881728096326	WITHOUT_CLASSIFICATION	1.182719036746159E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.99997916863164	WITHOUT_CLASSIFICATION	2.08313683599117E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999817821253987	WITHOUT_CLASSIFICATION	1.8217874601431217E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999793647554243	WITHOUT_CLASSIFICATION	2.063524457578216E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999886323313868	WITHOUT_CLASSIFICATION	1.1367668613095583E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999864502837803	WITHOUT_CLASSIFICATION	1.3549716219583829E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999865499813247	WITHOUT_CLASSIFICATION	1.345001867526496E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999672971986612	WITHOUT_CLASSIFICATION	3.2702801338765925E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999793969710695	WITHOUT_CLASSIFICATION	2.060302893041374E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999873252383061	WITHOUT_CLASSIFICATION	1.2674761693818244E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.999985407198354	WITHOUT_CLASSIFICATION	1.4592801645915983E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999868647955505	WITHOUT_CLASSIFICATION	1.3135204449456075E-5	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999850688266747	WITHOUT_CLASSIFICATION	1.4931173325412608E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999893338968354	WITHOUT_CLASSIFICATION	1.0666103164549131E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999863072956696	WITHOUT_CLASSIFICATION	1.3692704330373784E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999760082388918	WITHOUT_CLASSIFICATION	2.3991761108249384E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999874894887026	WITHOUT_CLASSIFICATION	1.2510511297325542E-5	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999711189248314	WITHOUT_CLASSIFICATION	2.8881075168643377E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999610088036242	WITHOUT_CLASSIFICATION	3.899119637591293E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999669550575427	WITHOUT_CLASSIFICATION	3.304494245724641E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999868767581933	WITHOUT_CLASSIFICATION	1.3123241806646793E-5	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999773540726261	WITHOUT_CLASSIFICATION	2.2645927373813485E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999650660116237	WITHOUT_CLASSIFICATION	3.493398837638582E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997898203350788	WITHOUT_CLASSIFICATION	2.1017966492113812E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999763412251869	WITHOUT_CLASSIFICATION	2.365877481313731E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.999978249033816	WITHOUT_CLASSIFICATION	2.1750966183871777E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999746051435218	WITHOUT_CLASSIFICATION	2.539485647822992E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999747919943028	WITHOUT_CLASSIFICATION	2.5208005697087997E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999776815365246	WITHOUT_CLASSIFICATION	2.2318463475403678E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.999975932045741	WITHOUT_CLASSIFICATION	2.4067954258948043E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999692533790009	WITHOUT_CLASSIFICATION	3.0746620999071976E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999759098842776	WITHOUT_CLASSIFICATION	2.409011572234246E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999697790833944	WITHOUT_CLASSIFICATION	3.0220916605715867E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999702708337315	WITHOUT_CLASSIFICATION	2.972916626858917E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999763969771704	WITHOUT_CLASSIFICATION	2.360302282958498E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999772922107735	WITHOUT_CLASSIFICATION	2.270778922655029E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.999969134182908	WITHOUT_CLASSIFICATION	3.086581709206584E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999761552701659	WITHOUT_CLASSIFICATION	2.3844729834063302E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999801294444661	WITHOUT_CLASSIFICATION	1.987055553387373E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999859466618366	WITHOUT_CLASSIFICATION	1.405333816348382E-5	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999761539073104	WITHOUT_CLASSIFICATION	2.384609268956739E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999824911260252	WITHOUT_CLASSIFICATION	1.750887397469712E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999796442939419	WITHOUT_CLASSIFICATION	2.0355706058123975E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999819210302938	WITHOUT_CLASSIFICATION	1.8078969706172902E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999778750143725	WITHOUT_CLASSIFICATION	2.2124985627493976E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999827956818882	WITHOUT_CLASSIFICATION	1.7204318111812818E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999715578699758	WITHOUT_CLASSIFICATION	2.844213002419269E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999827522259244	WITHOUT_CLASSIFICATION	1.7247774075641774E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999812429626443	WITHOUT_CLASSIFICATION	1.875703735556061E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999794264168397	WITHOUT_CLASSIFICATION	2.057358316022173E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999598268794851	WITHOUT_CLASSIFICATION	4.0173120514775706E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999795555227371	WITHOUT_CLASSIFICATION	2.0444477262840684E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999897445671659	WITHOUT_CLASSIFICATION	1.025543283409793E-5	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999881258624458	WITHOUT_CLASSIFICATION	1.187413755428184E-5	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999799400318518	WITHOUT_CLASSIFICATION	2.0059968148301297E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999773674278912	WITHOUT_CLASSIFICATION	2.2632572108768518E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999794472443078	WITHOUT_CLASSIFICATION	2.055275569214695E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999978481406402	WITHOUT_CLASSIFICATION	2.151859359792816E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999796702084636	WITHOUT_CLASSIFICATION	2.0329791536375135E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999891042593363	WITHOUT_CLASSIFICATION	1.0895740663745862E-5	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999844725842812	WITHOUT_CLASSIFICATION	1.5527415718818584E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999811076496208	WITHOUT_CLASSIFICATION	1.8892350379247142E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999791095205044	WITHOUT_CLASSIFICATION	2.089047949567823E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999876270826624	WITHOUT_CLASSIFICATION	1.2372917337559873E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999837660859564	WITHOUT_CLASSIFICATION	1.6233914043693414E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999842563036409	WITHOUT_CLASSIFICATION	1.5743696359079488E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999774237920817	WITHOUT_CLASSIFICATION	2.2576207918389908E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.999979902355772	WITHOUT_CLASSIFICATION	2.0097644227954268E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999809258781226	WITHOUT_CLASSIFICATION	1.907412187734421E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999904970480388	WITHOUT_CLASSIFICATION	9.502951961115754E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999885708142393	WITHOUT_CLASSIFICATION	1.1429185760735035E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999859150081485	WITHOUT_CLASSIFICATION	1.4084991851431925E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999876247608692	WITHOUT_CLASSIFICATION	1.2375239130805822E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999782767849614	WITHOUT_CLASSIFICATION	2.1723215038502543E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999839456180257	WITHOUT_CLASSIFICATION	1.6054381974286798E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.999981345150859	WITHOUT_CLASSIFICATION	1.865484914095998E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999842635196192	WITHOUT_CLASSIFICATION	1.573648038078142E-5	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999919012143746	WITHOUT_CLASSIFICATION	8.098785625344169E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999876294241157	WITHOUT_CLASSIFICATION	1.237057588431522E-5	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999847595476604	WITHOUT_CLASSIFICATION	1.5240452339603565E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.999989968434439	WITHOUT_CLASSIFICATION	1.0031565560948311E-5	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.999988307030968	WITHOUT_CLASSIFICATION	1.1692969031917021E-5	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999859585861827	WITHOUT_CLASSIFICATION	1.4041413817241353E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999858326116838	WITHOUT_CLASSIFICATION	1.4167388316096333E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999799650039335	WITHOUT_CLASSIFICATION	2.0034996066516873E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999899356258036	WITHOUT_CLASSIFICATION	1.0064374196459074E-5	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999696599274814	WITHOUT_CLASSIFICATION	3.0340072518575845E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999847440909719	WITHOUT_CLASSIFICATION	1.5255909028175076E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999883479380874	WITHOUT_CLASSIFICATION	1.1652061912594302E-5	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999884795856026	WITHOUT_CLASSIFICATION	1.1520414397539351E-5	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999912054913557	WITHOUT_CLASSIFICATION	8.794508644454334E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999865911122123	WITHOUT_CLASSIFICATION	1.3408887787669415E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.999985951269963	WITHOUT_CLASSIFICATION	1.404873003693017E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.999987922760288	WITHOUT_CLASSIFICATION	1.207723971201559E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999780846077243	WITHOUT_CLASSIFICATION	2.1915392275715874E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999852624163095	WITHOUT_CLASSIFICATION	1.4737583690499484E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999882405757032	WITHOUT_CLASSIFICATION	1.1759424296753699E-5	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999700006414586	WITHOUT_CLASSIFICATION	2.9999358541464247E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999825275734658	WITHOUT_CLASSIFICATION	1.7472426534255024E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999778533767679	WITHOUT_CLASSIFICATION	2.2146623232081395E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999768124939687	WITHOUT_CLASSIFICATION	2.3187506031208486E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999741149140324	WITHOUT_CLASSIFICATION	2.5885085967588276E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999739168175016	WITHOUT_CLASSIFICATION	2.6083182498363553E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999647107788902	WITHOUT_CLASSIFICATION	3.52892211098713E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999758672647082	WITHOUT_CLASSIFICATION	2.413273529182859E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999833531780887	WITHOUT_CLASSIFICATION	1.6646821911227574E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999846600072696	WITHOUT_CLASSIFICATION	1.533999273039979E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.999984268460217	WITHOUT_CLASSIFICATION	1.5731539783033127E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999737675427646	WITHOUT_CLASSIFICATION	2.6232457235491184E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999827910248803	WITHOUT_CLASSIFICATION	1.7208975119710505E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999821281448137	WITHOUT_CLASSIFICATION	1.7871855186222675E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999812851566323	WITHOUT_CLASSIFICATION	1.8714843367707557E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999661631687535	WITHOUT_CLASSIFICATION	3.383683124638434E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999847795557285	WITHOUT_CLASSIFICATION	1.5220444271473415E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999852353701187	WITHOUT_CLASSIFICATION	1.4764629881365356E-5	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999851819878479	WITHOUT_CLASSIFICATION	1.4818012152072688E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999826982174607	WITHOUT_CLASSIFICATION	1.7301782539323965E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999832332891824	WITHOUT_CLASSIFICATION	1.6766710817593223E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999892762525775	WITHOUT_CLASSIFICATION	1.0723747422583398E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999834452461944	WITHOUT_CLASSIFICATION	1.6554753805631922E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999844039162454	WITHOUT_CLASSIFICATION	1.559608375447426E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999901712131086	WITHOUT_CLASSIFICATION	9.828786891442463E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999829957296165	WITHOUT_CLASSIFICATION	1.700427038356791E-5	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999732062244551	WITHOUT_CLASSIFICATION	2.6793775544831113E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999837693568391	WITHOUT_CLASSIFICATION	1.6230643160956752E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999796457811897	WITHOUT_CLASSIFICATION	2.035421881036293E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999879300336803	WITHOUT_CLASSIFICATION	1.2069966319776879E-5	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999872827642853	WITHOUT_CLASSIFICATION	1.2717235714710023E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999845458799087	WITHOUT_CLASSIFICATION	1.5454120091308755E-5	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999923769863029	WITHOUT_CLASSIFICATION	7.623013697063415E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999874004206771	WITHOUT_CLASSIFICATION	1.2599579322819496E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999875424719737	WITHOUT_CLASSIFICATION	1.245752802629893E-5	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999873597942389	WITHOUT_CLASSIFICATION	1.2640205761020074E-5	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999788088026855	WITHOUT_CLASSIFICATION	2.1191197314478274E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999864505237246	WITHOUT_CLASSIFICATION	1.354947627539214E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999838991322364	WITHOUT_CLASSIFICATION	1.6100867763521326E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999922951662659	WITHOUT_CLASSIFICATION	7.70483373421842E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999880862284755	WITHOUT_CLASSIFICATION	1.1913771524595946E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999930603839585	WITHOUT_CLASSIFICATION	6.939616041431942E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999933227346747	WITHOUT_CLASSIFICATION	6.677265325301386E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999903677633653	WITHOUT_CLASSIFICATION	9.632236634780784E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999872363510879	WITHOUT_CLASSIFICATION	1.2763648912053367E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999901394821872	WITHOUT_CLASSIFICATION	9.860517812715087E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999918865616373	WITHOUT_CLASSIFICATION	8.113438362678217E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999905428307199	WITHOUT_CLASSIFICATION	9.457169280210134E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.999984243437457	WITHOUT_CLASSIFICATION	1.5756562543079064E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999897588576281	WITHOUT_CLASSIFICATION	1.0241142371933001E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999903102214268	WITHOUT_CLASSIFICATION	9.689778573196597E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999894258580866	WITHOUT_CLASSIFICATION	1.0574141913444874E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999874948604869	WITHOUT_CLASSIFICATION	1.2505139513078849E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999871501843616	WITHOUT_CLASSIFICATION	1.2849815638328057E-5	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999901037178706	WITHOUT_CLASSIFICATION	9.896282129485989E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999712344483661	WITHOUT_CLASSIFICATION	2.8765551633871923E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.999987480670842	WITHOUT_CLASSIFICATION	1.2519329158022965E-5	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999916279345515	WITHOUT_CLASSIFICATION	8.37206544842481E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999909024819866	WITHOUT_CLASSIFICATION	9.097518013378648E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999810819786001	WITHOUT_CLASSIFICATION	1.891802139987153E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999764669807966	WITHOUT_CLASSIFICATION	2.3533019203437082E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999803990781608	WITHOUT_CLASSIFICATION	1.9600921839149088E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999889041554054	WITHOUT_CLASSIFICATION	1.1095844594612704E-5	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999836738548089	WITHOUT_CLASSIFICATION	1.6326145191130873E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999817613472349	WITHOUT_CLASSIFICATION	1.8238652765065034E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.999977374338842	WITHOUT_CLASSIFICATION	2.2625661158030455E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.999979143972854	WITHOUT_CLASSIFICATION	2.08560271459706E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.999981992868169	WITHOUT_CLASSIFICATION	1.800713183093364E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999770411425329	WITHOUT_CLASSIFICATION	2.2958857466993865E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999726279937843	WITHOUT_CLASSIFICATION	2.73720062157848E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.999973454541007	WITHOUT_CLASSIFICATION	2.6545458993021167E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999828647926234	WITHOUT_CLASSIFICATION	1.7135207376601444E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999789860988018	WITHOUT_CLASSIFICATION	2.1013901198227646E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.999980642590794	WITHOUT_CLASSIFICATION	1.9357409206014168E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999768522981092	WITHOUT_CLASSIFICATION	2.3147701890932915E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999815299362252	WITHOUT_CLASSIFICATION	1.847006377484938E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999745827930226	WITHOUT_CLASSIFICATION	2.5417206977234845E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999794775222597	WITHOUT_CLASSIFICATION	2.0522477740314767E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999873888735429	WITHOUT_CLASSIFICATION	1.2611126457206414E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999801600180426	WITHOUT_CLASSIFICATION	1.9839981957464842E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999805831024138	WITHOUT_CLASSIFICATION	1.9416897586234625E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999829121004927	WITHOUT_CLASSIFICATION	1.70878995073243E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999812109661809	WITHOUT_CLASSIFICATION	1.8789033819138505E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999871945639358	WITHOUT_CLASSIFICATION	1.2805436064275235E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999642198336243	WITHOUT_CLASSIFICATION	3.5780166375806374E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999805687573851	WITHOUT_CLASSIFICATION	1.9431242614913166E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999862491207385	WITHOUT_CLASSIFICATION	1.3750879261503869E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999894550648477	WITHOUT_CLASSIFICATION	1.054493515225807E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999872452956188	WITHOUT_CLASSIFICATION	1.275470438119529E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999728342759374	WITHOUT_CLASSIFICATION	2.7165724062555913E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999796630539254	WITHOUT_CLASSIFICATION	2.0336946074591684E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999866171059387	WITHOUT_CLASSIFICATION	1.3382894061332504E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999870554642035	WITHOUT_CLASSIFICATION	1.2944535796529062E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999861050681067	WITHOUT_CLASSIFICATION	1.3894931893321242E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999837573542404	WITHOUT_CLASSIFICATION	1.6242645759614084E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999766326031986	WITHOUT_CLASSIFICATION	2.3367396801441367E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.999977269018982	WITHOUT_CLASSIFICATION	2.2730981017939004E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999693263563048	WITHOUT_CLASSIFICATION	3.0673643695312434E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999730595726698	WITHOUT_CLASSIFICATION	2.694042733023901E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.999985157319363	WITHOUT_CLASSIFICATION	1.4842680636929687E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999869893842731	WITHOUT_CLASSIFICATION	1.3010615726882541E-5	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999861922720519	WITHOUT_CLASSIFICATION	1.3807727948166634E-5	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999778005255129	WITHOUT_CLASSIFICATION	2.2199474487048412E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999880345066712	WITHOUT_CLASSIFICATION	1.1965493328737322E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999813752998206	WITHOUT_CLASSIFICATION	1.8624700179438897E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999595361221674	WITHOUT_CLASSIFICATION	4.0463877832567164E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999891830253123	WITHOUT_CLASSIFICATION	1.0816974687799116E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999817659547089	WITHOUT_CLASSIFICATION	1.8234045291112595E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999829153882258	WITHOUT_CLASSIFICATION	1.7084611774290594E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.999982682394947	WITHOUT_CLASSIFICATION	1.731760505298121E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999826184357965	WITHOUT_CLASSIFICATION	1.7381564203550665E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999815978326463	WITHOUT_CLASSIFICATION	1.8402167353702542E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999821031255517	WITHOUT_CLASSIFICATION	1.7896874448269497E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999797917756723	WITHOUT_CLASSIFICATION	2.0208224327665863E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999811350857088	WITHOUT_CLASSIFICATION	1.8864914291171094E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.999984262265031	WITHOUT_CLASSIFICATION	1.5737734968978414E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999802196645685	WITHOUT_CLASSIFICATION	1.9780335431465116E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.999981192011159	WITHOUT_CLASSIFICATION	1.8807988841002436E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999816052625735	WITHOUT_CLASSIFICATION	1.8394737426496647E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999785462199	WITHOUT_CLASSIFICATION	2.1453780099981502E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999808699517778	WITHOUT_CLASSIFICATION	1.913004822220604E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999834755893607	WITHOUT_CLASSIFICATION	1.652441063916314E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999779326634654	WITHOUT_CLASSIFICATION	2.2067336534597746E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999754145407416	WITHOUT_CLASSIFICATION	2.4585459258491933E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999790332067363	WITHOUT_CLASSIFICATION	2.0966793263648114E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999774356672971	WITHOUT_CLASSIFICATION	2.2564332702870648E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999740193470293	WITHOUT_CLASSIFICATION	2.5980652970645556E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999868449079018	WITHOUT_CLASSIFICATION	1.3155092098228375E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999879777123084	WITHOUT_CLASSIFICATION	1.2022287691649311E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.999987302573745	WITHOUT_CLASSIFICATION	1.269742625491129E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999840655304695	WITHOUT_CLASSIFICATION	1.5934469530518744E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999797507478987	WITHOUT_CLASSIFICATION	2.0249252101291166E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999799853346865	WITHOUT_CLASSIFICATION	2.0014665313520708E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999876968747743	WITHOUT_CLASSIFICATION	1.2303125225784914E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999707680089625	WITHOUT_CLASSIFICATION	2.923199103752778E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999869263225817	WITHOUT_CLASSIFICATION	1.3073677418419116E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999861094782421	WITHOUT_CLASSIFICATION	1.3890521757945882E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999831152238566	WITHOUT_CLASSIFICATION	1.688477614334977E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999364806321634	WITHOUT_CLASSIFICATION	6.351936783651457E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999506736286643	WITHOUT_CLASSIFICATION	4.932637133570163E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999910873314842	WITHOUT_CLASSIFICATION	8.91266851580495E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999737643187665	WITHOUT_CLASSIFICATION	2.6235681233583428E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999567945966676	WITHOUT_CLASSIFICATION	4.3205403332362094E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999604098620369	WITHOUT_CLASSIFICATION	3.9590137963085873E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999716137094806	WITHOUT_CLASSIFICATION	2.8386290519407348E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999429864160325	WITHOUT_CLASSIFICATION	5.701358396752541E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.99996614959438	WITHOUT_CLASSIFICATION	3.385040562009708E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999515276667021	WITHOUT_CLASSIFICATION	4.8472333297819126E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999568187972526	WITHOUT_CLASSIFICATION	4.318120274739248E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.99997702676909	WITHOUT_CLASSIFICATION	2.2973230910049435E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999850243856226	WITHOUT_CLASSIFICATION	1.4975614377438568E-5	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999884269912641	WITHOUT_CLASSIFICATION	1.1573008735968079E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999902118900749	WITHOUT_CLASSIFICATION	9.788109925182118E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999812664278506	WITHOUT_CLASSIFICATION	1.8733572149427484E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999974917805593	WITHOUT_CLASSIFICATION	2.5082194407097147E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9992222297250661	WITHOUT_CLASSIFICATION	7.777702749339448E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9998902616333919	WITHOUT_CLASSIFICATION	1.097383666081655E-4	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.999970919475126	WITHOUT_CLASSIFICATION	2.908052487397941E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9996805731804141	WITHOUT_CLASSIFICATION	3.194268195858293E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9997196814014503	WITHOUT_CLASSIFICATION	2.8031859854967694E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999113416542358	WITHOUT_CLASSIFICATION	8.865834576421816E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9998860060057021	WITHOUT_CLASSIFICATION	1.1399399429793952E-4	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.999999464316315	WITHOUT_CLASSIFICATION	5.356836849817419E-7	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999534467200598	WITHOUT_CLASSIFICATION	4.655327994018645E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.999932430608225	WITHOUT_CLASSIFICATION	6.756939177491026E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999669282946797	WITHOUT_CLASSIFICATION	3.307170532036898E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999783152344515	WITHOUT_CLASSIFICATION	2.1684765548513028E-5	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9988187746740916	WITHOUT_CLASSIFICATION	0.0011812253259083103	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999973146185609	WITHOUT_CLASSIFICATION	2.68538143919948E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.999673019229192	WITHOUT_CLASSIFICATION	3.269807708078647E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.99988496356706	WITHOUT_CLASSIFICATION	1.1503643293996199E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9998410162320799	WITHOUT_CLASSIFICATION	1.5898376792004666E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999983626594299	WITHOUT_CLASSIFICATION	1.6373405701635919E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999941350991	WITHOUT_CLASSIFICATION	5.864900933399657E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9993242703559623	WITHOUT_CLASSIFICATION	6.757296440378145E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.999992867072573	WITHOUT_CLASSIFICATION	7.1329274270509545E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.999999633647611	WITHOUT_CLASSIFICATION	3.6635238898640695E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999853349769	WITHOUT_CLASSIFICATION	1.4665023113995463E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999853349769	WITHOUT_CLASSIFICATION	1.4665023113995463E-8	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999930955743318	WITHOUT_CLASSIFICATION	6.904425668168191E-6	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9999625433679357	WITHOUT_CLASSIFICATION	3.745663206426309E-5	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9997792417725366	WITHOUT_CLASSIFICATION	2.2075822746328949E-4	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999546260168625	WITHOUT_CLASSIFICATION	4.5373983137475856E-5	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9997411500384991	WITHOUT_CLASSIFICATION	2.5884996150092214E-4	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999739766057356	WITHOUT_CLASSIFICATION	2.6023394264435052E-5	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9999552981935924	WITHOUT_CLASSIFICATION	4.470180640762455E-5	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999414393457126	WITHOUT_CLASSIFICATION	5.856065428736038E-5	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9999809843495371	WITHOUT_CLASSIFICATION	1.9015650462945578E-5	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999984923176053	WITHOUT_CLASSIFICATION	1.5076823945977826E-6	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999990163822162	WITHOUT_CLASSIFICATION	9.836177838753613E-7	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9995059314129425	WITHOUT_CLASSIFICATION	4.940685870574607E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9998826333962523	WITHOUT_CLASSIFICATION	1.1736660374773895E-4	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999947557338911	WITHOUT_CLASSIFICATION	5.2442661088817564E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999987664381779	WITHOUT_CLASSIFICATION	1.2335618221741162E-6	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999921867598301	WITHOUT_CLASSIFICATION	7.813240169919078E-6	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999997347626265	WITHOUT_CLASSIFICATION	2.652373734770389E-7	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9998740585814287	WITHOUT_CLASSIFICATION	1.2594141857120465E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9991457568353603	WITHOUT_CLASSIFICATION	8.5424316463968E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9992980171595688	WITHOUT_CLASSIFICATION	7.019828404311482E-4	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999999796328617	WITHOUT_CLASSIFICATION	2.036713831215101E-8	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999963836544544	WITHOUT_CLASSIFICATION	3.6163455456480204E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6385061776859993	WITHOUT_CLASSIFICATION	0.36149382231400057	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999990889314604	WITHOUT_CLASSIFICATION	9.110685395926001E-7	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6385061776859993	WITHOUT_CLASSIFICATION	0.36149382231400057	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999885592486553	WITHOUT_CLASSIFICATION	1.1440751344798597E-5	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.999997867429843	WITHOUT_CLASSIFICATION	2.1325701569832984E-6	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.8524762761454421	WITHOUT_CLASSIFICATION	0.14752372385455795	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999811519649259	WITHOUT_CLASSIFICATION	1.8848035074181718E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999520495207663	WITHOUT_CLASSIFICATION	4.7950479233568065E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999851459944827	WITHOUT_CLASSIFICATION	1.485400551710488E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999851459944827	WITHOUT_CLASSIFICATION	1.485400551710488E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999851459944827	WITHOUT_CLASSIFICATION	1.485400551710488E-5	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999989027217316	WITHOUT_CLASSIFICATION	1.0972782684043754E-6	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999930989738639	WITHOUT_CLASSIFICATION	6.901026136143896E-6	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999999518844237	WITHOUT_CLASSIFICATION	4.811557626637367E-8	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998896628141062	WITHOUT_CLASSIFICATION	1.1033718589386166E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998896628141062	WITHOUT_CLASSIFICATION	1.1033718589386166E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998896628141062	WITHOUT_CLASSIFICATION	1.1033718589386166E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998896628141062	WITHOUT_CLASSIFICATION	1.1033718589386166E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998896628141062	WITHOUT_CLASSIFICATION	1.1033718589386166E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998896628141062	WITHOUT_CLASSIFICATION	1.1033718589386166E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997551510233428	WITHOUT_CLASSIFICATION	2.4484897665719184E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997551510233428	WITHOUT_CLASSIFICATION	2.4484897665719184E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997551510233428	WITHOUT_CLASSIFICATION	2.4484897665719184E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997551510233428	WITHOUT_CLASSIFICATION	2.4484897665719184E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9997551510233428	WITHOUT_CLASSIFICATION	2.4484897665719184E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999605425175059	WITHOUT_CLASSIFICATION	3.945748249412779E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999605425175059	WITHOUT_CLASSIFICATION	3.945748249412779E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999605425175059	WITHOUT_CLASSIFICATION	3.945748249412779E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999605425175059	WITHOUT_CLASSIFICATION	3.945748249412779E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999605425175059	WITHOUT_CLASSIFICATION	3.945748249412779E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998044705996263	WITHOUT_CLASSIFICATION	1.9552940037369498E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998044705996263	WITHOUT_CLASSIFICATION	1.9552940037369498E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998044705996263	WITHOUT_CLASSIFICATION	1.9552940037369498E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998044705996263	WITHOUT_CLASSIFICATION	1.9552940037369498E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998044705996263	WITHOUT_CLASSIFICATION	1.9552940037369498E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998044705996263	WITHOUT_CLASSIFICATION	1.9552940037369498E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998248081158595	WITHOUT_CLASSIFICATION	1.7519188414048416E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998248081158595	WITHOUT_CLASSIFICATION	1.7519188414048416E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998248081158595	WITHOUT_CLASSIFICATION	1.7519188414048416E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998248081158595	WITHOUT_CLASSIFICATION	1.7519188414048416E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998248081158595	WITHOUT_CLASSIFICATION	1.7519188414048416E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997388133518124	WITHOUT_CLASSIFICATION	2.6118664818761096E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997388133518124	WITHOUT_CLASSIFICATION	2.6118664818761096E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997388133518124	WITHOUT_CLASSIFICATION	2.6118664818761096E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997388133518124	WITHOUT_CLASSIFICATION	2.6118664818761096E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997388133518124	WITHOUT_CLASSIFICATION	2.6118664818761096E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997898203350788	WITHOUT_CLASSIFICATION	2.1017966492113812E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997898203350788	WITHOUT_CLASSIFICATION	2.1017966492113812E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997898203350788	WITHOUT_CLASSIFICATION	2.1017966492113812E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997898203350788	WITHOUT_CLASSIFICATION	2.1017966492113812E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9997898203350788	WITHOUT_CLASSIFICATION	2.1017966492113812E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999900026413959	WITHOUT_CLASSIFICATION	9.997358604002908E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999998920617269	WITHOUT_CLASSIFICATION	1.0793827305460694E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999970844824572	WITHOUT_CLASSIFICATION	2.915517542807723E-6	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999967997239908	WITHOUT_CLASSIFICATION	3.2002760092499423E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999989115120376	WITHOUT_CLASSIFICATION	1.0884879623816942E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999869066070634	WITHOUT_CLASSIFICATION	1.3093392936586013E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999856009389754	WITHOUT_CLASSIFICATION	1.4399061024707672E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999800212040023	WITHOUT_CLASSIFICATION	1.9978795997702205E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.99997916863164	WITHOUT_CLASSIFICATION	2.08313683599117E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999817821253987	WITHOUT_CLASSIFICATION	1.8217874601431217E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999795825421535	WITHOUT_CLASSIFICATION	2.041745784653307E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999793647554243	WITHOUT_CLASSIFICATION	2.063524457578216E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999863051452073	WITHOUT_CLASSIFICATION	1.3694854792791492E-5	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999831084304951	WITHOUT_CLASSIFICATION	1.6891569504890473E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999814020749195	WITHOUT_CLASSIFICATION	1.8597925080429985E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999838505467104	WITHOUT_CLASSIFICATION	1.6149453289622154E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999838962941224	WITHOUT_CLASSIFICATION	1.6103705877621147E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999903816678479	WITHOUT_CLASSIFICATION	9.618332152079838E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999890842935273	WITHOUT_CLASSIFICATION	1.0915706472807294E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999873768014252	WITHOUT_CLASSIFICATION	1.2623198574682577E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999781021923789	WITHOUT_CLASSIFICATION	2.189780762103945E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999799361147248	WITHOUT_CLASSIFICATION	2.0063885275191828E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999881145411053	WITHOUT_CLASSIFICATION	1.1885458894867232E-5	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999824637184025	WITHOUT_CLASSIFICATION	1.7536281597519418E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999860142231386	WITHOUT_CLASSIFICATION	1.3985776861334489E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999864409168211	WITHOUT_CLASSIFICATION	1.3559083178997671E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999899758066504	WITHOUT_CLASSIFICATION	1.0024193349546703E-5	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999748422513833	WITHOUT_CLASSIFICATION	2.5157748616748273E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.999984973294373	WITHOUT_CLASSIFICATION	1.502670562710609E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999812610312018	WITHOUT_CLASSIFICATION	1.873896879818632E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999781022190565	WITHOUT_CLASSIFICATION	2.1897780943540525E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999850079679553	WITHOUT_CLASSIFICATION	1.4992032044672718E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999812820203677	WITHOUT_CLASSIFICATION	1.8717979632278872E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999889155633689	WITHOUT_CLASSIFICATION	1.1084436631043903E-5	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999842800137692	WITHOUT_CLASSIFICATION	1.571998623085545E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999784745204786	WITHOUT_CLASSIFICATION	2.1525479521359267E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999862057341908	WITHOUT_CLASSIFICATION	1.3794265809306303E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999829257429539	WITHOUT_CLASSIFICATION	1.7074257046112896E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999884824250863	WITHOUT_CLASSIFICATION	1.1517574913737061E-5	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999901115894845	WITHOUT_CLASSIFICATION	9.888410515572796E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.999989536345439	WITHOUT_CLASSIFICATION	1.046365456102637E-5	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999873215664119	WITHOUT_CLASSIFICATION	1.2678433588059226E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999857078455435	WITHOUT_CLASSIFICATION	1.4292154456503947E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999441943464402	WITHOUT_CLASSIFICATION	5.580565355972845E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999574191618501	WITHOUT_CLASSIFICATION	4.258083814998328E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999505124013284	WITHOUT_CLASSIFICATION	4.948759867173481E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999688801418379	WITHOUT_CLASSIFICATION	3.111985816205479E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999757620138873	WITHOUT_CLASSIFICATION	2.4237986112715337E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999627978878447	WITHOUT_CLASSIFICATION	3.7202112155325595E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.999978249033816	WITHOUT_CLASSIFICATION	2.1750966183871777E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999746051435218	WITHOUT_CLASSIFICATION	2.539485647822992E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999747919943028	WITHOUT_CLASSIFICATION	2.5208005697087997E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999759098842776	WITHOUT_CLASSIFICATION	2.409011572234246E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999859466618366	WITHOUT_CLASSIFICATION	1.405333816348382E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999598268794851	WITHOUT_CLASSIFICATION	4.0173120514775706E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999811707109141	WITHOUT_CLASSIFICATION	1.882928908585988E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999795555227371	WITHOUT_CLASSIFICATION	2.0444477262840684E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999774237920817	WITHOUT_CLASSIFICATION	2.2576207918389908E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999809258781226	WITHOUT_CLASSIFICATION	1.907412187734421E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999823123307203	WITHOUT_CLASSIFICATION	1.7687669279676122E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999904970480388	WITHOUT_CLASSIFICATION	9.502951961115754E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999885708142393	WITHOUT_CLASSIFICATION	1.1429185760735035E-5	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.999978031229313	WITHOUT_CLASSIFICATION	2.196877068711555E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999748694305498	WITHOUT_CLASSIFICATION	2.513056945024717E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999618826148665	WITHOUT_CLASSIFICATION	3.8117385133447E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999801868048096	WITHOUT_CLASSIFICATION	1.9813195190378615E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999777977242749	WITHOUT_CLASSIFICATION	2.2202275725103084E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999809068717672	WITHOUT_CLASSIFICATION	1.9093128232739133E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999753105243678	WITHOUT_CLASSIFICATION	2.4689475632225896E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999694999954473	WITHOUT_CLASSIFICATION	3.050000455274888E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999747340488436	WITHOUT_CLASSIFICATION	2.526595115642986E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999750517317607	WITHOUT_CLASSIFICATION	2.4948268239400912E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999538803659604	WITHOUT_CLASSIFICATION	4.6119634039428094E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999727521125144	WITHOUT_CLASSIFICATION	2.7247887485611115E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999755268228082	WITHOUT_CLASSIFICATION	2.4473177191874933E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999608250230029	WITHOUT_CLASSIFICATION	3.917497699708433E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999683054805079	WITHOUT_CLASSIFICATION	3.169451949211074E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.999982630216955	WITHOUT_CLASSIFICATION	1.7369783045002282E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999797535003725	WITHOUT_CLASSIFICATION	2.024649962758091E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999754690615977	WITHOUT_CLASSIFICATION	2.4530938402281385E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999819004782231	WITHOUT_CLASSIFICATION	1.809952177693833E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999673826165772	WITHOUT_CLASSIFICATION	3.2617383422831025E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999835514143638	WITHOUT_CLASSIFICATION	1.6448585636198182E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999834569337788	WITHOUT_CLASSIFICATION	1.654306622124941E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999821139380238	WITHOUT_CLASSIFICATION	1.7886061976193147E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999675258228055	WITHOUT_CLASSIFICATION	3.2474177194514034E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.99998377453425	WITHOUT_CLASSIFICATION	1.6225465750053384E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999791830221029	WITHOUT_CLASSIFICATION	2.081697789715784E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.999982227087942	WITHOUT_CLASSIFICATION	1.7772912057949454E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999834747392582	WITHOUT_CLASSIFICATION	1.6525260741734683E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999841479354338	WITHOUT_CLASSIFICATION	1.5852064566189828E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999884387148226	WITHOUT_CLASSIFICATION	1.1561285177321346E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999775621598068	WITHOUT_CLASSIFICATION	2.243784019316689E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999872349972154	WITHOUT_CLASSIFICATION	1.2765002784693602E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999896867300707	WITHOUT_CLASSIFICATION	1.0313269929279942E-5	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999863188574601	WITHOUT_CLASSIFICATION	1.3681142539845602E-5	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999931685375155	WITHOUT_CLASSIFICATION	6.8314624844891094E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999852326978292	WITHOUT_CLASSIFICATION	1.4767302170797894E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999799650039335	WITHOUT_CLASSIFICATION	2.0034996066516873E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999816444235061	WITHOUT_CLASSIFICATION	1.8355576493921983E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999899356258036	WITHOUT_CLASSIFICATION	1.0064374196459074E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999780846077243	WITHOUT_CLASSIFICATION	2.1915392275715874E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999882405757032	WITHOUT_CLASSIFICATION	1.1759424296753699E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999647107788902	WITHOUT_CLASSIFICATION	3.52892211098713E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999846600072696	WITHOUT_CLASSIFICATION	1.533999273039979E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999827910248803	WITHOUT_CLASSIFICATION	1.7208975119710505E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999852353701187	WITHOUT_CLASSIFICATION	1.4764629881365356E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999834452461944	WITHOUT_CLASSIFICATION	1.6554753805631922E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999864331844609	WITHOUT_CLASSIFICATION	1.3566815539178466E-5	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999830004193518	WITHOUT_CLASSIFICATION	1.6999580648047826E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999810126769355	WITHOUT_CLASSIFICATION	1.8987323064547844E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999827721259906	WITHOUT_CLASSIFICATION	1.72278740093229E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999793792029845	WITHOUT_CLASSIFICATION	2.0620797015432367E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999868211228831	WITHOUT_CLASSIFICATION	1.3178877116919997E-5	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999808855260164	WITHOUT_CLASSIFICATION	1.9114473983561493E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999877822341706	WITHOUT_CLASSIFICATION	1.2217765829369033E-5	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999839696520657	WITHOUT_CLASSIFICATION	1.6030347934256697E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999874401903729	WITHOUT_CLASSIFICATION	1.2559809627006752E-5	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999844676556435	WITHOUT_CLASSIFICATION	1.5532344356405522E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999778812292727	WITHOUT_CLASSIFICATION	2.2118770727276224E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999900594144056	WITHOUT_CLASSIFICATION	9.94058559437919E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999895683783158	WITHOUT_CLASSIFICATION	1.0431621684212868E-5	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999876756212482	WITHOUT_CLASSIFICATION	1.2324378751640005E-5	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999670290315672	WITHOUT_CLASSIFICATION	3.2970968432742417E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999797792264055	WITHOUT_CLASSIFICATION	2.0220773594574517E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999764884254173	WITHOUT_CLASSIFICATION	2.351157458271274E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999843403210357	WITHOUT_CLASSIFICATION	1.565967896433881E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999765981464903	WITHOUT_CLASSIFICATION	2.340185350972257E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999796210139339	WITHOUT_CLASSIFICATION	2.0378986066099484E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999858826630084	WITHOUT_CLASSIFICATION	1.4117336991547511E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999832192336408	WITHOUT_CLASSIFICATION	1.6780766359163675E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999816576763224	WITHOUT_CLASSIFICATION	1.8342323677681258E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999762675323095	WITHOUT_CLASSIFICATION	2.373246769047815E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999696764292134	WITHOUT_CLASSIFICATION	3.0323570786716138E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999833677119313	WITHOUT_CLASSIFICATION	1.6632288068710405E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.999984861586602	WITHOUT_CLASSIFICATION	1.5138413397902432E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999817561317023	WITHOUT_CLASSIFICATION	1.824386829773952E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999887111927112	WITHOUT_CLASSIFICATION	1.128880728880703E-5	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999814726182933	WITHOUT_CLASSIFICATION	1.8527381706715197E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.99997468644837	WITHOUT_CLASSIFICATION	2.531355163005231E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999889804999192	WITHOUT_CLASSIFICATION	1.1019500080784358E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999852455665534	WITHOUT_CLASSIFICATION	1.475443344653309E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999849604113604	WITHOUT_CLASSIFICATION	1.5039588639512163E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999820719542689	WITHOUT_CLASSIFICATION	1.7928045731085116E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999901743843449	WITHOUT_CLASSIFICATION	9.825615655091887E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999838389355344	WITHOUT_CLASSIFICATION	1.616106446561928E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999806170135813	WITHOUT_CLASSIFICATION	1.938298641868974E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999882830079474	WITHOUT_CLASSIFICATION	1.1716992052537616E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999933227346747	WITHOUT_CLASSIFICATION	6.677265325301386E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999879805217827	WITHOUT_CLASSIFICATION	1.2019478217236945E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999918865616373	WITHOUT_CLASSIFICATION	8.113438362678217E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999903102214268	WITHOUT_CLASSIFICATION	9.689778573196597E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999871501843616	WITHOUT_CLASSIFICATION	1.2849815638328057E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999764669807966	WITHOUT_CLASSIFICATION	2.3533019203437082E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999803990781608	WITHOUT_CLASSIFICATION	1.9600921839149088E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.999981992868169	WITHOUT_CLASSIFICATION	1.800713183093364E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999770411425329	WITHOUT_CLASSIFICATION	2.2958857466993865E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999795302948037	WITHOUT_CLASSIFICATION	2.0469705196247863E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999905973862678	WITHOUT_CLASSIFICATION	9.402613732113617E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999882484438204	WITHOUT_CLASSIFICATION	1.1751556179607605E-5	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999876679521407	WITHOUT_CLASSIFICATION	1.2332047859368624E-5	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999883645548576	WITHOUT_CLASSIFICATION	1.1635445142427125E-5	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999627849573501	WITHOUT_CLASSIFICATION	3.7215042649824484E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999915811572927	WITHOUT_CLASSIFICATION	8.418842707302624E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999909749629573	WITHOUT_CLASSIFICATION	9.02503704263038E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999929054886658	WITHOUT_CLASSIFICATION	7.094511334211962E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.999989616212619	WITHOUT_CLASSIFICATION	1.0383787381091685E-5	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999867980351044	WITHOUT_CLASSIFICATION	1.3201964895661146E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999915552968378	WITHOUT_CLASSIFICATION	8.444703162252822E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999906039042123	WITHOUT_CLASSIFICATION	9.396095787695863E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999887969202963	WITHOUT_CLASSIFICATION	1.120307970373021E-5	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.999986934203102	WITHOUT_CLASSIFICATION	1.3065796897955913E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999808749029911	WITHOUT_CLASSIFICATION	1.9125097008758425E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999834432759694	WITHOUT_CLASSIFICATION	1.6556724030594253E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999840000874872	WITHOUT_CLASSIFICATION	1.5999912512734676E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999857578416289	WITHOUT_CLASSIFICATION	1.4242158371076588E-5	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.999989351519108	WITHOUT_CLASSIFICATION	1.0648480892123748E-5	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999872791437765	WITHOUT_CLASSIFICATION	1.2720856223508807E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999811903441927	WITHOUT_CLASSIFICATION	1.880965580719028E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999763537553179	WITHOUT_CLASSIFICATION	2.3646244682095403E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999823316571533	WITHOUT_CLASSIFICATION	1.766834284673004E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.999977488943153	WITHOUT_CLASSIFICATION	2.251105684692898E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999835389341252	WITHOUT_CLASSIFICATION	1.646106587479071E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.999972571727072	WITHOUT_CLASSIFICATION	2.7428272927946023E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.999971790333403	WITHOUT_CLASSIFICATION	2.820966659693284E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999783343751585	WITHOUT_CLASSIFICATION	2.1665624841543168E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999802756713333	WITHOUT_CLASSIFICATION	1.972432866671632E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999771697648593	WITHOUT_CLASSIFICATION	2.283023514073563E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999797313895659	WITHOUT_CLASSIFICATION	2.026861043413609E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999776205273466	WITHOUT_CLASSIFICATION	2.2379472653362037E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999794556705183	WITHOUT_CLASSIFICATION	2.0544329481738874E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999800575544575	WITHOUT_CLASSIFICATION	1.99424455425776E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999769178897935	WITHOUT_CLASSIFICATION	2.3082110206464224E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999675699766143	WITHOUT_CLASSIFICATION	3.2430023385741646E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999819103687351	WITHOUT_CLASSIFICATION	1.8089631264831358E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999774063455533	WITHOUT_CLASSIFICATION	2.2593654446625885E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999871945639358	WITHOUT_CLASSIFICATION	1.2805436064275235E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999872452956188	WITHOUT_CLASSIFICATION	1.275470438119529E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999728342759374	WITHOUT_CLASSIFICATION	2.7165724062555913E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999867125877075	WITHOUT_CLASSIFICATION	1.3287412292569504E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999693263563048	WITHOUT_CLASSIFICATION	3.0673643695312434E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.999985157319363	WITHOUT_CLASSIFICATION	1.4842680636929687E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999813752998206	WITHOUT_CLASSIFICATION	1.8624700179438897E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999595361221674	WITHOUT_CLASSIFICATION	4.0463877832567164E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999785462199	WITHOUT_CLASSIFICATION	2.1453780099981502E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999808699517778	WITHOUT_CLASSIFICATION	1.913004822220604E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.999983742896986	WITHOUT_CLASSIFICATION	1.6257103014035948E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999913871206337	WITHOUT_CLASSIFICATION	8.612879366314319E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999813819179648	WITHOUT_CLASSIFICATION	1.8618082035205604E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999820937302206	WITHOUT_CLASSIFICATION	1.7906269779360985E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999780636658065	WITHOUT_CLASSIFICATION	2.1936334193502656E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999800795028312	WITHOUT_CLASSIFICATION	1.9920497168733437E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999877878582907	WITHOUT_CLASSIFICATION	1.221214170935927E-5	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999764072417733	WITHOUT_CLASSIFICATION	2.359275822673674E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999783831116899	WITHOUT_CLASSIFICATION	2.161688831019563E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999811063555419	WITHOUT_CLASSIFICATION	1.8893644458014406E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999765191546262	WITHOUT_CLASSIFICATION	2.3480845373852594E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.999984789478873	WITHOUT_CLASSIFICATION	1.52105211270352E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999811727377406	WITHOUT_CLASSIFICATION	1.882726225947708E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999856573971658	WITHOUT_CLASSIFICATION	1.4342602834251982E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999865539934553	WITHOUT_CLASSIFICATION	1.344600654470556E-5	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999878175514662	WITHOUT_CLASSIFICATION	1.2182448533874965E-5	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999855203065189	WITHOUT_CLASSIFICATION	1.4479693481151513E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999864413561395	WITHOUT_CLASSIFICATION	1.3558643860636488E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999794851235521	WITHOUT_CLASSIFICATION	2.0514876447960347E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999796275727946	WITHOUT_CLASSIFICATION	2.0372427205477598E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999828056757862	WITHOUT_CLASSIFICATION	1.7194324213685377E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999811462037324	WITHOUT_CLASSIFICATION	1.8853796267746726E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999878555867144	WITHOUT_CLASSIFICATION	1.214441328549809E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999864238223461	WITHOUT_CLASSIFICATION	1.3576177653844947E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999829283554524	WITHOUT_CLASSIFICATION	1.7071644547543376E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999755090197675	WITHOUT_CLASSIFICATION	2.4490980232423295E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.999977561950724	WITHOUT_CLASSIFICATION	2.2438049276008554E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.99997976845585	WITHOUT_CLASSIFICATION	2.023154414999548E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999855585429477	WITHOUT_CLASSIFICATION	1.4441457052288658E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999845381214795	WITHOUT_CLASSIFICATION	1.5461878520476686E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999723895449757	WITHOUT_CLASSIFICATION	2.761045502435298E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999785548887976	WITHOUT_CLASSIFICATION	2.1445111202288367E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999813338169987	WITHOUT_CLASSIFICATION	1.866618300133907E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.999969460170123	WITHOUT_CLASSIFICATION	3.0539829876980964E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999845472422252	WITHOUT_CLASSIFICATION	1.5452757774824047E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999693227730313	WITHOUT_CLASSIFICATION	3.067722696877252E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999815272980445	WITHOUT_CLASSIFICATION	1.847270195551014E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999749918379273	WITHOUT_CLASSIFICATION	2.5008162072720833E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999819544673354	WITHOUT_CLASSIFICATION	1.80455326645058E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999786376478433	WITHOUT_CLASSIFICATION	2.1362352156666373E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999774356672971	WITHOUT_CLASSIFICATION	2.2564332702870648E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999740193470293	WITHOUT_CLASSIFICATION	2.5980652970645556E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999364806321634	WITHOUT_CLASSIFICATION	6.351936783651457E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999770056717958	WITHOUT_CLASSIFICATION	2.299432820419877E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999910873314842	WITHOUT_CLASSIFICATION	8.91266851580495E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999567945966676	WITHOUT_CLASSIFICATION	4.3205403332362094E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999716137094806	WITHOUT_CLASSIFICATION	2.8386290519407348E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999902118900749	WITHOUT_CLASSIFICATION	9.788109925182118E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999812664278506	WITHOUT_CLASSIFICATION	1.8733572149427484E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999855299032635	WITHOUT_CLASSIFICATION	1.4470096736502859E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999904991344708	WITHOUT_CLASSIFICATION	9.50086552913932E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999773778564862	WITHOUT_CLASSIFICATION	2.262214351379542E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.999962311816593	WITHOUT_CLASSIFICATION	3.768818340702812E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.999986077039842	WITHOUT_CLASSIFICATION	1.39229601579888E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999821501265692	WITHOUT_CLASSIFICATION	1.7849873430862305E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999861692614183	WITHOUT_CLASSIFICATION	1.3830738581681337E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999835298664292	WITHOUT_CLASSIFICATION	1.6470133570685498E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999767813650375	WITHOUT_CLASSIFICATION	2.3218634962454486E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.999987460617319	WITHOUT_CLASSIFICATION	1.2539382680941799E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999835476755824	WITHOUT_CLASSIFICATION	1.645232441754348E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999869852771462	WITHOUT_CLASSIFICATION	1.301472285385777E-5	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999238361059057	WITHOUT_CLASSIFICATION	7.616389409419362E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999872992276466	WITHOUT_CLASSIFICATION	1.2700772353421186E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999748770350123	WITHOUT_CLASSIFICATION	2.5122964987654296E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999529884231254	WITHOUT_CLASSIFICATION	4.7011576874660326E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999751966579674	WITHOUT_CLASSIFICATION	2.4803342032517478E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999737076449189	WITHOUT_CLASSIFICATION	2.629235508107636E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999765730176032	WITHOUT_CLASSIFICATION	2.3426982396776943E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.999971551885756	WITHOUT_CLASSIFICATION	2.844811424390852E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999438331582109	WITHOUT_CLASSIFICATION	5.6166841789109884E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999431843007756	WITHOUT_CLASSIFICATION	5.681569922449867E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999738972687363	WITHOUT_CLASSIFICATION	2.610273126370634E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999746867317887	WITHOUT_CLASSIFICATION	2.5313268211272E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999738223831812	WITHOUT_CLASSIFICATION	2.6177616818771705E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999589890280819	WITHOUT_CLASSIFICATION	4.101097191813061E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999619699575439	WITHOUT_CLASSIFICATION	3.8030042456144123E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999795676263048	WITHOUT_CLASSIFICATION	2.043237369524929E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999752720463916	WITHOUT_CLASSIFICATION	2.472795360836564E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999739755052724	WITHOUT_CLASSIFICATION	2.6024494727478212E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999848215228315	WITHOUT_CLASSIFICATION	1.5178477168453702E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999762214125785	WITHOUT_CLASSIFICATION	2.377858742157058E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999824266007881	WITHOUT_CLASSIFICATION	1.7573399211868928E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999795800902798	WITHOUT_CLASSIFICATION	2.041990972017787E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.999982454407922	WITHOUT_CLASSIFICATION	1.7545592077977953E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999687900427696	WITHOUT_CLASSIFICATION	3.1209957230364146E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999851590367874	WITHOUT_CLASSIFICATION	1.4840963212498806E-5	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999880201293452	WITHOUT_CLASSIFICATION	1.1979870654906886E-5	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999875674123713	WITHOUT_CLASSIFICATION	1.2432587628700845E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999113416542358	WITHOUT_CLASSIFICATION	8.865834576421816E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9998860060057021	WITHOUT_CLASSIFICATION	1.1399399429793952E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999783152344515	WITHOUT_CLASSIFICATION	2.1684765548513028E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999973146185609	WITHOUT_CLASSIFICATION	2.68538143919948E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.999673019229192	WITHOUT_CLASSIFICATION	3.269807708078647E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.99988496356706	WITHOUT_CLASSIFICATION	1.1503643293996199E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9998410162320799	WITHOUT_CLASSIFICATION	1.5898376792004666E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999483419695023	WITHOUT_CLASSIFICATION	5.1658030497630536E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999826229889551	WITHOUT_CLASSIFICATION	1.7377011044823364E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999831695385734	WITHOUT_CLASSIFICATION	1.6830461426645567E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999737984260247	WITHOUT_CLASSIFICATION	2.6201573975248222E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999882816619728	WITHOUT_CLASSIFICATION	1.1718338027181675E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999874262140969	WITHOUT_CLASSIFICATION	1.2573785903147872E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999893289736504	WITHOUT_CLASSIFICATION	1.067102634950521E-5	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999675831107068	WITHOUT_CLASSIFICATION	3.241688929319419E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999711842231482	WITHOUT_CLASSIFICATION	2.881577685186254E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999900548648853	WITHOUT_CLASSIFICATION	9.945135114697898E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999872663638467	WITHOUT_CLASSIFICATION	1.2733636153218936E-5	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999664815865361	WITHOUT_CLASSIFICATION	3.3518413463790034E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999820357146747	WITHOUT_CLASSIFICATION	1.79642853252233E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999678381818717	WITHOUT_CLASSIFICATION	3.2161818128324906E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999834759678712	WITHOUT_CLASSIFICATION	1.6524032128777116E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999827026700747	WITHOUT_CLASSIFICATION	1.7297329925367016E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.999977305034211	WITHOUT_CLASSIFICATION	2.2694965788987863E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999823846561134	WITHOUT_CLASSIFICATION	1.7615343886545206E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.999966321771112	WITHOUT_CLASSIFICATION	3.367822888796488E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999734112870288	WITHOUT_CLASSIFICATION	2.6588712971228145E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999746868261196	WITHOUT_CLASSIFICATION	2.531317388038777E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999468617774996	WITHOUT_CLASSIFICATION	5.313822250052927E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999298122199973	WITHOUT_CLASSIFICATION	7.018778000266853E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999867986877389	WITHOUT_CLASSIFICATION	1.3201312261117675E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999991907464479	WITHOUT_CLASSIFICATION	8.092535519730381E-7	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999968159480953	WITHOUT_CLASSIFICATION	3.1840519046772365E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9998411481544841	WITHOUT_CLASSIFICATION	1.5885184551591862E-4	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999992319548251	WITHOUT_CLASSIFICATION	7.680451747943794E-7	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999992063563653	WITHOUT_CLASSIFICATION	7.936436346327613E-7	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9999085261973668	WITHOUT_CLASSIFICATION	9.147380263322992E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999941350991	WITHOUT_CLASSIFICATION	5.864900933399657E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9993242703559623	WITHOUT_CLASSIFICATION	6.757296440378145E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999853349769	WITHOUT_CLASSIFICATION	1.4665023113995463E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999853349769	WITHOUT_CLASSIFICATION	1.4665023113995463E-8	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9708124997579463	WITHOUT_CLASSIFICATION	0.02918750024205372	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999733569636239	WITHOUT_CLASSIFICATION	2.664303637613678E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.999996112647088	WITHOUT_CLASSIFICATION	3.887352912064345E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.999991183813277	WITHOUT_CLASSIFICATION	8.816186722953295E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999982521560749	WITHOUT_CLASSIFICATION	1.7478439251914513E-6	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999995851601807	WITHOUT_CLASSIFICATION	4.148398192300215E-7	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999986953502937	WITHOUT_CLASSIFICATION	1.3046497061651918E-6	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999994706755475	WITHOUT_CLASSIFICATION	5.293244524943975E-7	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999999332608245	WITHOUT_CLASSIFICATION	6.673917544599989E-8	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999999807760269	WITHOUT_CLASSIFICATION	1.922397310852665E-8	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999940190024841	WITHOUT_CLASSIFICATION	5.980997515878712E-6	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.999999857258375	WITHOUT_CLASSIFICATION	1.4274162487437992E-7	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.999999969256962	WITHOUT_CLASSIFICATION	3.074303791484546E-8	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999999960356973	WITHOUT_CLASSIFICATION	3.964302582891958E-9	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999984279582423	WITHOUT_CLASSIFICATION	1.572041757683185E-6	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999984279582423	WITHOUT_CLASSIFICATION	1.572041757683185E-6	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999993613672836	WITHOUT_CLASSIFICATION	6.386327164117627E-7	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999994198166724	WITHOUT_CLASSIFICATION	5.801833276066321E-7	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999999957701339	WITHOUT_CLASSIFICATION	4.229866131352108E-9	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999978118656914	WITHOUT_CLASSIFICATION	2.1881343085736393E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999870770186448	WITHOUT_CLASSIFICATION	1.2922981355329669E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999997892713249	WITHOUT_CLASSIFICATION	2.107286749596639E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999974769027881	WITHOUT_CLASSIFICATION	2.5230972119575227E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999997892713249	WITHOUT_CLASSIFICATION	2.107286749596639E-7	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9998736233312199	WITHOUT_CLASSIFICATION	1.2637666878007116E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9996727281044708	WITHOUT_CLASSIFICATION	3.2727189552913974E-4	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.99809533095754	WITHOUT_CLASSIFICATION	0.001904669042460004	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9965924537336408	WITHOUT_CLASSIFICATION	0.0034075462663591895	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999617480548281	WITHOUT_CLASSIFICATION	3.8251945171906355E-5	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.999997613179149	WITHOUT_CLASSIFICATION	2.386820850895504E-6	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999999922537232	WITHOUT_CLASSIFICATION	7.746276935304645E-9	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999658357749371	WITHOUT_CLASSIFICATION	3.416422506285601E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999856977149054	WITHOUT_CLASSIFICATION	1.4302285094511954E-5	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.6417795483715804	WITHOUT_CLASSIFICATION	0.35822045162841964	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999977941149587	WITHOUT_CLASSIFICATION	2.2058850413477843E-6	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999871917868272	WITHOUT_CLASSIFICATION	1.2808213172763487E-5	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999642459642545	WITHOUT_CLASSIFICATION	3.575403574555075E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996804869449123	WITHOUT_CLASSIFICATION	3.1951305508768176E-4	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999549171684	WITHOUT_CLASSIFICATION	4.508283154575914E-8	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999549171684	WITHOUT_CLASSIFICATION	4.508283154575914E-8	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999988764649519	WITHOUT_CLASSIFICATION	1.1235350481338437E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.999998367715819	WITHOUT_CLASSIFICATION	1.6322841809289654E-6	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999993721830824	WITHOUT_CLASSIFICATION	6.278169176088193E-7	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.999959511905729	WITHOUT_CLASSIFICATION	4.0488094270987646E-5	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999976751251428	WITHOUT_CLASSIFICATION	2.3248748572932696E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999997892713249	WITHOUT_CLASSIFICATION	2.107286749596639E-7	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999970750289303	WITHOUT_CLASSIFICATION	2.924971069732013E-6	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999997591163038	WITHOUT_CLASSIFICATION	2.408836962162613E-7	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999896562213186	WITHOUT_CLASSIFICATION	1.0343778681398294E-5	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999969962573368	WITHOUT_CLASSIFICATION	3.0037426632317995E-6	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999999287733793	WITHOUT_CLASSIFICATION	7.12266207296424E-8	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.999999914767052	WITHOUT_CLASSIFICATION	8.523294804926155E-8	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999996752299722	WITHOUT_CLASSIFICATION	3.247700278363809E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999939701882591	WITHOUT_CLASSIFICATION	6.029811740886895E-6	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999999983667934	WITHOUT_CLASSIFICATION	1.6332066517974915E-9	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999998061729389	WITHOUT_CLASSIFICATION	1.9382706111744148E-7	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999999950857031	WITHOUT_CLASSIFICATION	4.914296828043442E-9	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999999938396714	WITHOUT_CLASSIFICATION	6.160328566489871E-9	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9999637419091475	WITHOUT_CLASSIFICATION	3.625809085251676E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999857464903	WITHOUT_CLASSIFICATION	1.4253509799557712E-8	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.999687616037095	WITHOUT_CLASSIFICATION	3.1238396290503604E-4	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999984822736573	WITHOUT_CLASSIFICATION	1.5177263427038619E-6	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999988092082072	WITHOUT_CLASSIFICATION	1.1907917928871628E-6	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9999914275559529	WITHOUT_CLASSIFICATION	8.572444047102953E-6	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999947815093156	WITHOUT_CLASSIFICATION	5.218490684355646E-6	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999994603601977	WITHOUT_CLASSIFICATION	5.396398023106193E-7	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999999545812116	WITHOUT_CLASSIFICATION	4.541878829124545E-8	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9996722936194006	WITHOUT_CLASSIFICATION	3.2770638059947667E-4	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999999994578949	WITHOUT_CLASSIFICATION	5.421050900624908E-10	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999996036920042	WITHOUT_CLASSIFICATION	3.963079956903274E-7	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999980899268985	WITHOUT_CLASSIFICATION	1.9100731014630923E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999998992712319	WITHOUT_CLASSIFICATION	1.0072876813536514E-7	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999994901177122	WITHOUT_CLASSIFICATION	5.098822878740136E-7	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999956995146632	WITHOUT_CLASSIFICATION	4.300485336814245E-6	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.999994929108373	WITHOUT_CLASSIFICATION	5.070891627078849E-6	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999999286872621	WITHOUT_CLASSIFICATION	7.131273792445643E-8	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999828708001428	WITHOUT_CLASSIFICATION	1.712919985722658E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999996329711884	WITHOUT_CLASSIFICATION	3.670288115504604E-7	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999999899076812	WITHOUT_CLASSIFICATION	1.0092318732302335E-8	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9992893402118944	WITHOUT_CLASSIFICATION	7.106597881055472E-4	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999871793657168	WITHOUT_CLASSIFICATION	1.28206342832155E-5	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999995496182167	WITHOUT_CLASSIFICATION	4.5038178331467295E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999843367643734	WITHOUT_CLASSIFICATION	1.5663235626625903E-5	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.999999645737859	WITHOUT_CLASSIFICATION	3.542621410385337E-7	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999996702197832	WITHOUT_CLASSIFICATION	3.297802168509855E-7	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.999999995918707	WITHOUT_CLASSIFICATION	4.081292884022817E-9	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999483419695023	WITHOUT_CLASSIFICATION	5.1658030497630536E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999966349184923	WITHOUT_CLASSIFICATION	3.3650815076973136E-6	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999995651533575	WITHOUT_CLASSIFICATION	4.348466424125046E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999702277800676	WITHOUT_CLASSIFICATION	2.977221993243174E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998113905683	WITHOUT_CLASSIFICATION	1.886094317883809E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9996727281044708	WITHOUT_CLASSIFICATION	3.2727189552913974E-4	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.999970259154969	WITHOUT_CLASSIFICATION	2.974084503095733E-5	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999988695939764	WITHOUT_CLASSIFICATION	1.1304060235509144E-6	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999534264600507	WITHOUT_CLASSIFICATION	4.6573539949350737E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.999999602359394	WITHOUT_CLASSIFICATION	3.976406060798488E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.999999602359394	WITHOUT_CLASSIFICATION	3.976406060798488E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999837819434081	WITHOUT_CLASSIFICATION	1.6218056591924058E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999837819434081	WITHOUT_CLASSIFICATION	1.6218056591924058E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999837819434081	WITHOUT_CLASSIFICATION	1.6218056591924058E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999980364150733	WITHOUT_CLASSIFICATION	1.9635849266174594E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999980364150733	WITHOUT_CLASSIFICATION	1.9635849266174594E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.999987842275365	WITHOUT_CLASSIFICATION	1.2157724635034427E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.999987842275365	WITHOUT_CLASSIFICATION	1.2157724635034427E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999988301212902	WITHOUT_CLASSIFICATION	1.1698787098288876E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999698663487091	WITHOUT_CLASSIFICATION	3.013365129093208E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999992953967041	WITHOUT_CLASSIFICATION	7.046032959729371E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999992953967041	WITHOUT_CLASSIFICATION	7.046032959729371E-7	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999972138115887	WITHOUT_CLASSIFICATION	2.786188411224159E-6	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999999307496126	WITHOUT_CLASSIFICATION	6.925038741881347E-8	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9997376407036064	WITHOUT_CLASSIFICATION	2.623592963935906E-4	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999999581957201	WITHOUT_CLASSIFICATION	4.1804279927518125E-8	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999929215368001	WITHOUT_CLASSIFICATION	7.078463199848437E-6	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999999886573246	WITHOUT_CLASSIFICATION	1.1342675459696053E-8	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999998120483585	WITHOUT_CLASSIFICATION	1.879516415531788E-7	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999888456099105	WITHOUT_CLASSIFICATION	1.1154390089430628E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999764849455689	WITHOUT_CLASSIFICATION	2.351505443109247E-5	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999884742925484	WITHOUT_CLASSIFICATION	1.152570745150809E-5	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999998705452209	WITHOUT_CLASSIFICATION	1.2945477910462557E-7	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999996359543956	WITHOUT_CLASSIFICATION	3.6404560445958395E-7	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.999902569215628	WITHOUT_CLASSIFICATION	9.743078437201295E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999915737353905	WITHOUT_CLASSIFICATION	8.426264609549094E-6	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999995970091128	WITHOUT_CLASSIFICATION	4.0299088724937653E-7	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999807627627603	WITHOUT_CLASSIFICATION	1.923723723967495E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999834675841407	WITHOUT_CLASSIFICATION	1.653241585934168E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999926851628801	WITHOUT_CLASSIFICATION	7.314837119936759E-6	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999856602646473	WITHOUT_CLASSIFICATION	1.4339735352610722E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999273552833084	WITHOUT_CLASSIFICATION	7.264471669154468E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999686096627072	WITHOUT_CLASSIFICATION	3.139033729285493E-5	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999270275762692	WITHOUT_CLASSIFICATION	7.297242373087929E-5	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999902782214695	WITHOUT_CLASSIFICATION	9.721778530524848E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999998623784148	WITHOUT_CLASSIFICATION	1.3762158519656636E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999984044702231	WITHOUT_CLASSIFICATION	1.5955297768286502E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.99999797760798	WITHOUT_CLASSIFICATION	2.02239201993742E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999971392285351	WITHOUT_CLASSIFICATION	2.8607714648478504E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999979218117883	WITHOUT_CLASSIFICATION	2.0781882117982718E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.999999193696243	WITHOUT_CLASSIFICATION	8.063037569403336E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999990652034938	WITHOUT_CLASSIFICATION	9.347965062091628E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999988151112214	WITHOUT_CLASSIFICATION	1.1848887786785945E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996177827583	WITHOUT_CLASSIFICATION	3.822172418353744E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999556872502	WITHOUT_CLASSIFICATION	4.4312749798335924E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529061618	WITHOUT_CLASSIFICATION	2.470938381825284E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999556872502	WITHOUT_CLASSIFICATION	4.4312749798335924E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999556872502	WITHOUT_CLASSIFICATION	4.4312749798335924E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999556872502	WITHOUT_CLASSIFICATION	4.4312749798335924E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999556872502	WITHOUT_CLASSIFICATION	4.4312749798335924E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999556872502	WITHOUT_CLASSIFICATION	4.4312749798335924E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999556872502	WITHOUT_CLASSIFICATION	4.4312749798335924E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529061618	WITHOUT_CLASSIFICATION	2.470938381825284E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529061618	WITHOUT_CLASSIFICATION	2.470938381825284E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529061618	WITHOUT_CLASSIFICATION	2.470938381825284E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529061618	WITHOUT_CLASSIFICATION	2.470938381825284E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529061618	WITHOUT_CLASSIFICATION	2.470938381825284E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529061618	WITHOUT_CLASSIFICATION	2.470938381825284E-7	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.998983250438842	WITHOUT_CLASSIFICATION	0.0010167495611581073	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999789646293872	WITHOUT_CLASSIFICATION	2.1035370612853904E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999975536730353	WITHOUT_CLASSIFICATION	2.446326964697456E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999620786540437	WITHOUT_CLASSIFICATION	3.792134595619189E-5	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999457460873435	WITHOUT_CLASSIFICATION	5.4253912656436485E-5	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999943324000549	WITHOUT_CLASSIFICATION	5.667599945163042E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999999616168076	WITHOUT_CLASSIFICATION	3.838319233824163E-8	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999996415376163	WITHOUT_CLASSIFICATION	3.5846238362733834E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999993119288152	WITHOUT_CLASSIFICATION	6.880711848033309E-7	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999973058277559	WITHOUT_CLASSIFICATION	2.6941722441140175E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999913408602907	WITHOUT_CLASSIFICATION	8.659139709303655E-6	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999964433065455	WITHOUT_CLASSIFICATION	3.55669345448287E-6	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999973976216309	WITHOUT_CLASSIFICATION	2.602378369218442E-6	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999998512014618	WITHOUT_CLASSIFICATION	1.487985382155492E-7	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999999643538151	WITHOUT_CLASSIFICATION	3.5646184924582E-8	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999945354271756	WITHOUT_CLASSIFICATION	5.4645728243661036E-6	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999026544560098	WITHOUT_CLASSIFICATION	9.734554399018536E-5	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999904743320683	WITHOUT_CLASSIFICATION	9.52566793163002E-6	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999913543476491	WITHOUT_CLASSIFICATION	8.645652350934432E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.999954324158371	WITHOUT_CLASSIFICATION	4.5675841628831425E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999990800161974	WITHOUT_CLASSIFICATION	9.19983802472116E-7	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999996834375554	WITHOUT_CLASSIFICATION	3.165624447050755E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999974769027881	WITHOUT_CLASSIFICATION	2.5230972119575227E-6	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9583228996643084	WITHOUT_CLASSIFICATION	0.041677100335691525	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9995590963447722	WITHOUT_CLASSIFICATION	4.409036552278248E-4	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999965515577258	WITHOUT_CLASSIFICATION	3.4484422741940147E-6	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999993388615982	WITHOUT_CLASSIFICATION	6.611384018832094E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999875856711733	WITHOUT_CLASSIFICATION	1.2414328826758648E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999902949569982	WITHOUT_CLASSIFICATION	9.705043001746013E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9998535553340406	WITHOUT_CLASSIFICATION	1.4644466595936493E-4	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999945306796267	WITHOUT_CLASSIFICATION	5.469320373302336E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999881528930986	WITHOUT_CLASSIFICATION	1.1847106901452023E-5	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9998149290254021	WITHOUT_CLASSIFICATION	1.8507097459792319E-4	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999994193973865	WITHOUT_CLASSIFICATION	5.806026135406004E-7	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999998762189674	WITHOUT_CLASSIFICATION	1.2378103270596834E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999999714431864	WITHOUT_CLASSIFICATION	2.8556813495807125E-8	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999991345374	WITHOUT_CLASSIFICATION	8.654626000830042E-7	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.999949982707317	WITHOUT_CLASSIFICATION	5.0017292682984476E-5	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999994723180554	WITHOUT_CLASSIFICATION	5.276819445855978E-7	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999877385150264	WITHOUT_CLASSIFICATION	1.2261484973526422E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999993328451067	WITHOUT_CLASSIFICATION	6.671548933869069E-7	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999999736590299	WITHOUT_CLASSIFICATION	2.634096996820544E-8	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999999783208805	WITHOUT_CLASSIFICATION	2.167911941987712E-8	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999996762287949	WITHOUT_CLASSIFICATION	3.237712051672526E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999996762287949	WITHOUT_CLASSIFICATION	3.237712051672526E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999998652306409	WITHOUT_CLASSIFICATION	1.3476935912095534E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999998652306409	WITHOUT_CLASSIFICATION	1.3476935912095534E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.99999990009857	WITHOUT_CLASSIFICATION	9.990143006428481E-8	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.99999990009857	WITHOUT_CLASSIFICATION	9.990143006428481E-8	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999881347641857	WITHOUT_CLASSIFICATION	1.1865235814408418E-5	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999999231638464	WITHOUT_CLASSIFICATION	7.68361534654782E-8	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999998505822686	WITHOUT_CLASSIFICATION	1.494177314359863E-7	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999864635943366	WITHOUT_CLASSIFICATION	1.3536405663434553E-5	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999761333673155	WITHOUT_CLASSIFICATION	2.386663268456275E-5	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999889691565896	WITHOUT_CLASSIFICATION	1.1030843410384624E-5	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999999451419472	WITHOUT_CLASSIFICATION	5.4858052736025875E-8	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999919281050296	WITHOUT_CLASSIFICATION	8.071894970363352E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999984874425477	WITHOUT_CLASSIFICATION	1.512557452348329E-6	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999495670471659	WITHOUT_CLASSIFICATION	5.043295283416145E-5	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9998011355404108	WITHOUT_CLASSIFICATION	1.9886445958926678E-4	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999973649225735	WITHOUT_CLASSIFICATION	2.635077426423644E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999990263239107	WITHOUT_CLASSIFICATION	9.736760893232416E-7	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9973352764654646	WITHOUT_CLASSIFICATION	0.0026647235345353404	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999843984225221	WITHOUT_CLASSIFICATION	1.5601577477857337E-5	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999987057064688	WITHOUT_CLASSIFICATION	1.294293531327115E-6	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999992155655898	WITHOUT_CLASSIFICATION	7.844344102353216E-7	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999945749221337	WITHOUT_CLASSIFICATION	5.4250778663452175E-6	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999997003818422	WITHOUT_CLASSIFICATION	2.9961815780182846E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999971558879716	WITHOUT_CLASSIFICATION	2.844112028508345E-6	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999972294755617	WITHOUT_CLASSIFICATION	2.7705244383268034E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9997294075394693	WITHOUT_CLASSIFICATION	2.705924605307046E-4	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.99999530461319	WITHOUT_CLASSIFICATION	4.695386809957269E-6	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999968991033926	WITHOUT_CLASSIFICATION	3.1008966074421587E-6	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999996188265448	WITHOUT_CLASSIFICATION	3.81173455209373E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999867135823732	WITHOUT_CLASSIFICATION	1.3286417626780871E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999944218557593	WITHOUT_CLASSIFICATION	5.5781442406881215E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999992335753999	WITHOUT_CLASSIFICATION	7.664246001084001E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999992335753999	WITHOUT_CLASSIFICATION	7.664246001084001E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999992335753999	WITHOUT_CLASSIFICATION	7.664246001084001E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999502331568	WITHOUT_CLASSIFICATION	4.976684315812319E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999502331568	WITHOUT_CLASSIFICATION	4.976684315812319E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999857464903	WITHOUT_CLASSIFICATION	1.4253509799557712E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999857464903	WITHOUT_CLASSIFICATION	1.4253509799557712E-8	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.999999999353153	WITHOUT_CLASSIFICATION	6.468469820402753E-10	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.946479068888296	WITHOUT_CLASSIFICATION	0.05352093111170402	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999999560197976	WITHOUT_CLASSIFICATION	4.398020236564142E-8	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999995470087918	WITHOUT_CLASSIFICATION	4.529912081135218E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999992335753999	WITHOUT_CLASSIFICATION	7.664246001084001E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999992335753999	WITHOUT_CLASSIFICATION	7.664246001084001E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999992335753999	WITHOUT_CLASSIFICATION	7.664246001084001E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999502331568	WITHOUT_CLASSIFICATION	4.976684315812319E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999502331568	WITHOUT_CLASSIFICATION	4.976684315812319E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999502331568	WITHOUT_CLASSIFICATION	4.976684315812319E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999857464903	WITHOUT_CLASSIFICATION	1.4253509799557712E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999857464903	WITHOUT_CLASSIFICATION	1.4253509799557712E-8	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999988906143851	WITHOUT_CLASSIFICATION	1.1093856149090398E-6	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999999851938277	WITHOUT_CLASSIFICATION	1.4806172345104062E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999872385125	WITHOUT_CLASSIFICATION	1.2761487398068476E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999872385125	WITHOUT_CLASSIFICATION	1.2761487398068476E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999872385125	WITHOUT_CLASSIFICATION	1.2761487398068476E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999872385125	WITHOUT_CLASSIFICATION	1.2761487398068476E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999872385125	WITHOUT_CLASSIFICATION	1.2761487398068476E-8	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999992189363566	WITHOUT_CLASSIFICATION	7.810636433892847E-7	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999972958282138	WITHOUT_CLASSIFICATION	2.704171786200741E-6	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9995481048677038	WITHOUT_CLASSIFICATION	4.5189513229614014E-4	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999874880660209	WITHOUT_CLASSIFICATION	1.2511933979173694E-5	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999990335526012	WITHOUT_CLASSIFICATION	9.664473987614745E-7	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999992152533331	WITHOUT_CLASSIFICATION	7.84746666880196E-7	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999777220477435	WITHOUT_CLASSIFICATION	2.2277952256469685E-5	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999975625423367	WITHOUT_CLASSIFICATION	2.4374576633490638E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999995934204667	WITHOUT_CLASSIFICATION	4.065795332896243E-7	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999973860156414	WITHOUT_CLASSIFICATION	2.6139843586029715E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999697021316234	WITHOUT_CLASSIFICATION	3.0297868376575723E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999960358722563	WITHOUT_CLASSIFICATION	3.964127743777527E-6	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9999605812645617	WITHOUT_CLASSIFICATION	3.941873543827902E-5	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999958839913082	WITHOUT_CLASSIFICATION	4.116008691729501E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999908444199735	WITHOUT_CLASSIFICATION	9.155580026503669E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999989040843285	WITHOUT_CLASSIFICATION	1.0959156714700312E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999989040843285	WITHOUT_CLASSIFICATION	1.0959156714700312E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999989040843285	WITHOUT_CLASSIFICATION	1.0959156714700312E-6	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9998888892215788	WITHOUT_CLASSIFICATION	1.1111077842123826E-4	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9998889259530327	WITHOUT_CLASSIFICATION	1.110740469672393E-4	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.999998756562667	WITHOUT_CLASSIFICATION	1.243437333066576E-6	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.999999255553583	WITHOUT_CLASSIFICATION	7.444464169088114E-7	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999984132869661	WITHOUT_CLASSIFICATION	1.5867130338465753E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999964355506054	WITHOUT_CLASSIFICATION	3.564449394536499E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999987435003085	WITHOUT_CLASSIFICATION	1.2564996914275217E-6	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999999575714691	WITHOUT_CLASSIFICATION	4.2428530943511216E-8	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999997766444753	WITHOUT_CLASSIFICATION	2.2335552466283385E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.999997285926222	WITHOUT_CLASSIFICATION	2.7140737781640275E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.999998084448644	WITHOUT_CLASSIFICATION	1.915551355920834E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999999630865648	WITHOUT_CLASSIFICATION	3.6913435256075613E-8	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.999999041268211	WITHOUT_CLASSIFICATION	9.587317890323184E-7	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999863644776	WITHOUT_CLASSIFICATION	1.363552241356136E-8	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.999999988814991	WITHOUT_CLASSIFICATION	1.1185009023692415E-8	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999875400794075	WITHOUT_CLASSIFICATION	1.2459920592645992E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999947295325368	WITHOUT_CLASSIFICATION	5.2704674632388845E-6	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999999743473398	WITHOUT_CLASSIFICATION	2.5652660283277142E-8	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999997466713102	WITHOUT_CLASSIFICATION	2.5332868985942167E-7	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999870282105912	WITHOUT_CLASSIFICATION	1.2971789408932962E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9996179031957044	WITHOUT_CLASSIFICATION	3.8209680429561395E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999969220021727	WITHOUT_CLASSIFICATION	3.0779978272187046E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9966495513348154	WITHOUT_CLASSIFICATION	0.0033504486651846992	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999998465442269	WITHOUT_CLASSIFICATION	1.5345577305613247E-7	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999987635304253	WITHOUT_CLASSIFICATION	1.2364695747124143E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999963480128061	WITHOUT_CLASSIFICATION	3.6519871939339156E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999984725843917	WITHOUT_CLASSIFICATION	1.527415608319343E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999979356800437	WITHOUT_CLASSIFICATION	2.064319956263264E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999756280406259	WITHOUT_CLASSIFICATION	2.4371959374193607E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999413340775416	WITHOUT_CLASSIFICATION	5.866592245840374E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9998603395046267	WITHOUT_CLASSIFICATION	1.3966049537324828E-4	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.999928610143834	WITHOUT_CLASSIFICATION	7.138985616586968E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9999219735418063	WITHOUT_CLASSIFICATION	7.802645819371183E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9998703320857072	WITHOUT_CLASSIFICATION	1.2966791429280138E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9998576796892723	WITHOUT_CLASSIFICATION	1.4232031072768057E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.99992666014933	WITHOUT_CLASSIFICATION	7.333985066996063E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999997582406893	WITHOUT_CLASSIFICATION	2.4175931070546886E-7	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999984762007351	WITHOUT_CLASSIFICATION	1.5237992649664064E-6	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999501628846	WITHOUT_CLASSIFICATION	4.983711537321393E-8	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9987830261118095	WITHOUT_CLASSIFICATION	0.0012169738881905351	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999655896921967	WITHOUT_CLASSIFICATION	3.441030780334786E-5	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9904977517197551	WITHOUT_CLASSIFICATION	0.009502248280244912	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999695601957914	WITHOUT_CLASSIFICATION	3.0439804208621288E-5	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999891097167989	WITHOUT_CLASSIFICATION	1.0890283201025276E-5	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999979450575082	WITHOUT_CLASSIFICATION	2.0549424918278067E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999771840542129	WITHOUT_CLASSIFICATION	2.2815945787047317E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999651502614734	WITHOUT_CLASSIFICATION	3.4849738526649515E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999651502614734	WITHOUT_CLASSIFICATION	3.4849738526649515E-5	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999991301721366	WITHOUT_CLASSIFICATION	8.698278634066393E-7	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.999994484826114	WITHOUT_CLASSIFICATION	5.515173886006481E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999701311690685	WITHOUT_CLASSIFICATION	2.9868830931489013E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999945514640644	WITHOUT_CLASSIFICATION	5.448535935680216E-6	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999934016621429	WITHOUT_CLASSIFICATION	6.598337857101477E-6	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999989840120287	WITHOUT_CLASSIFICATION	1.0159879713724717E-6	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999999602074496	WITHOUT_CLASSIFICATION	3.9792550358503776E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999997028809272	WITHOUT_CLASSIFICATION	2.9711907269028026E-7	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999997789536219	WITHOUT_CLASSIFICATION	2.210463779988035E-7	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999993254905241	WITHOUT_CLASSIFICATION	6.74509475923624E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999659179066	WITHOUT_CLASSIFICATION	3.408209337208778E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999659179066	WITHOUT_CLASSIFICATION	3.408209337208778E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999659179066	WITHOUT_CLASSIFICATION	3.408209337208778E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999659179066	WITHOUT_CLASSIFICATION	3.408209337208778E-8	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999978606534509	WITHOUT_CLASSIFICATION	2.139346549217387E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999994272886351	WITHOUT_CLASSIFICATION	5.727113648548738E-7	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999995629840315	WITHOUT_CLASSIFICATION	4.370159685669744E-7	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999978242853695	WITHOUT_CLASSIFICATION	2.175714630439857E-6	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9998647674352285	WITHOUT_CLASSIFICATION	1.3523256477150508E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9999328322200435	WITHOUT_CLASSIFICATION	6.716777995646121E-5	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.999939037516485	WITHOUT_CLASSIFICATION	6.096248351479397E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999979701424763	WITHOUT_CLASSIFICATION	2.0298575237939613E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999979701424763	WITHOUT_CLASSIFICATION	2.0298575237939613E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999066057542417	WITHOUT_CLASSIFICATION	9.339424575825979E-5	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999989174963082	WITHOUT_CLASSIFICATION	1.0825036917628817E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999969371853	WITHOUT_CLASSIFICATION	3.0628146186634622E-9	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9985042744025329	WITHOUT_CLASSIFICATION	0.00149572559746713	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9985042744025329	WITHOUT_CLASSIFICATION	0.00149572559746713	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9973386051003656	WITHOUT_CLASSIFICATION	0.0026613948996343033	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.999996121767311	WITHOUT_CLASSIFICATION	3.87823268896527E-6	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.999996121767311	WITHOUT_CLASSIFICATION	3.87823268896527E-6	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9904888517623965	WITHOUT_CLASSIFICATION	0.009511148237603571	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999989996569512	WITHOUT_CLASSIFICATION	1.0003430488431725E-6	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999438062112294	WITHOUT_CLASSIFICATION	5.6193788770706826E-5	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9720128562499164	WITHOUT_CLASSIFICATION	0.027987143750083644	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999913394876849	WITHOUT_CLASSIFICATION	8.660512315049938E-6	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999999781299345	WITHOUT_CLASSIFICATION	2.1870065618902E-8	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9996301292982765	WITHOUT_CLASSIFICATION	3.6987070172341956E-4	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999986357999595	WITHOUT_CLASSIFICATION	1.3642000405089094E-6	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999994298351159	WITHOUT_CLASSIFICATION	5.701648841287408E-7	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999910067813569	WITHOUT_CLASSIFICATION	8.993218643177584E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999966132968537	WITHOUT_CLASSIFICATION	3.3867031462354763E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999994749239298	WITHOUT_CLASSIFICATION	5.250760702498493E-7	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999575634484559	WITHOUT_CLASSIFICATION	4.243655154410058E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999798439219415	WITHOUT_CLASSIFICATION	2.015607805850418E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999983108855102	WITHOUT_CLASSIFICATION	1.6891144897119327E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9998917216012763	WITHOUT_CLASSIFICATION	1.0827839872372298E-4	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.999991764660287	WITHOUT_CLASSIFICATION	8.235339713021885E-6	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.999999880723632	WITHOUT_CLASSIFICATION	1.1927636793695558E-7	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999997237994916	WITHOUT_CLASSIFICATION	2.7620050837153696E-7	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9729009403488755	WITHOUT_CLASSIFICATION	0.027099059651124545	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9973894929540482	WITHOUT_CLASSIFICATION	0.0026105070459517075	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.999996624197242	WITHOUT_CLASSIFICATION	3.375802758079016E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999982979888603	WITHOUT_CLASSIFICATION	1.7020111397639642E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9998961198991951	WITHOUT_CLASSIFICATION	1.0388010080488163E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9875858378545154	WITHOUT_CLASSIFICATION	0.01241416214548476	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9901232027996475	WITHOUT_CLASSIFICATION	0.009876797200352524	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.999999864921749	WITHOUT_CLASSIFICATION	1.3507825100320776E-7	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999459147526913	WITHOUT_CLASSIFICATION	5.4085247308640236E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999998391591842	WITHOUT_CLASSIFICATION	1.6084081580534595E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999905726456069	WITHOUT_CLASSIFICATION	9.427354393189961E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999357818507899	WITHOUT_CLASSIFICATION	6.421814921005736E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999912539271476	WITHOUT_CLASSIFICATION	8.746072852286502E-6	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9985903663548354	DEFECT	0.001409633645164592	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9998251071276413	WITHOUT_CLASSIFICATION	1.748928723587103E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999999664234167	WITHOUT_CLASSIFICATION	3.3576583227245334E-8	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.999335253838253	WITHOUT_CLASSIFICATION	6.647461617470069E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999916807169582	WITHOUT_CLASSIFICATION	8.319283041888968E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999999579567621	WITHOUT_CLASSIFICATION	4.204323780432096E-8	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999998325169851	WITHOUT_CLASSIFICATION	1.6748301488076735E-7	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.999335253838253	WITHOUT_CLASSIFICATION	6.647461617470069E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999916807169582	WITHOUT_CLASSIFICATION	8.319283041888968E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999976238055766	WITHOUT_CLASSIFICATION	2.3761944234091787E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999921411407318	WITHOUT_CLASSIFICATION	7.858859268177089E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999921411407318	WITHOUT_CLASSIFICATION	7.858859268177089E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999977877735774	WITHOUT_CLASSIFICATION	2.2122264224959603E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9994468219506839	WITHOUT_CLASSIFICATION	5.531780493161955E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999789899054239	WITHOUT_CLASSIFICATION	2.1010094576050042E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.999985764831103	WITHOUT_CLASSIFICATION	1.423516889690641E-5	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.999963511464538	WITHOUT_CLASSIFICATION	3.6488535462012654E-5	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.811167111245482	WITHOUT_CLASSIFICATION	0.18883288875451795	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999981713927475	WITHOUT_CLASSIFICATION	1.828607252467504E-6	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999999749764943	WITHOUT_CLASSIFICATION	2.5023505741375643E-8	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999977639295676	WITHOUT_CLASSIFICATION	2.2360704324811647E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999742822594995	WITHOUT_CLASSIFICATION	2.5717740500533495E-5	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.99999469134922	WITHOUT_CLASSIFICATION	5.308650779990551E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999984691266223	WITHOUT_CLASSIFICATION	1.5308733777156263E-6	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9998358399138457	WITHOUT_CLASSIFICATION	1.6416008615421362E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999998696192138	WITHOUT_CLASSIFICATION	1.3038078611028713E-7	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999998696192138	WITHOUT_CLASSIFICATION	1.3038078611028713E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.999985491841454	WITHOUT_CLASSIFICATION	1.450815854593176E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.999985491841454	WITHOUT_CLASSIFICATION	1.450815854593176E-5	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999983874851199	WITHOUT_CLASSIFICATION	1.6125148801159548E-6	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999992450022414	WITHOUT_CLASSIFICATION	7.549977587396892E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999956443409215	WITHOUT_CLASSIFICATION	4.3556590786047956E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999916879353127	WITHOUT_CLASSIFICATION	8.31206468730515E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999919914909073	WITHOUT_CLASSIFICATION	8.00850909265929E-6	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999994836013407	WITHOUT_CLASSIFICATION	5.163986592792537E-7	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999789899054239	WITHOUT_CLASSIFICATION	2.1010094576050042E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.999985764831103	WITHOUT_CLASSIFICATION	1.423516889690641E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999977639295676	WITHOUT_CLASSIFICATION	2.2360704324811647E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999742822594995	WITHOUT_CLASSIFICATION	2.5717740500533495E-5	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999963018619349	WITHOUT_CLASSIFICATION	3.698138065075329E-6	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999995253154859	WITHOUT_CLASSIFICATION	4.7468451402784597E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999752417726956	WITHOUT_CLASSIFICATION	2.475822730441322E-5	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.999997227509739	WITHOUT_CLASSIFICATION	2.7724902609634762E-6	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999998394480979	WITHOUT_CLASSIFICATION	1.6055190212522629E-7	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999939775383193	WITHOUT_CLASSIFICATION	6.022461680653496E-6	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9990446505560832	WITHOUT_CLASSIFICATION	9.553494439168782E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999905842449883	WITHOUT_CLASSIFICATION	9.415755011627053E-6	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.999986239046926	WITHOUT_CLASSIFICATION	1.376095307410012E-5	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999985709680991	WITHOUT_CLASSIFICATION	1.429031900921318E-6	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999380190341811	WITHOUT_CLASSIFICATION	6.198096581887976E-5	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999987672097945	WITHOUT_CLASSIFICATION	1.232790205517849E-6	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999980535082605	WITHOUT_CLASSIFICATION	1.946491739516617E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9992923975250965	WITHOUT_CLASSIFICATION	7.076024749035256E-4	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999612043714631	WITHOUT_CLASSIFICATION	3.879562853685089E-5	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999779583223263	WITHOUT_CLASSIFICATION	2.2041677673748028E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999991686778902	WITHOUT_CLASSIFICATION	8.313221099104772E-7	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999976551064358	WITHOUT_CLASSIFICATION	2.3448935641246986E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999997242773646	WITHOUT_CLASSIFICATION	2.7572263538417996E-7	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999997570508662	WITHOUT_CLASSIFICATION	2.429491337889185E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999997473986607	WITHOUT_CLASSIFICATION	2.526013392830488E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999997473986607	WITHOUT_CLASSIFICATION	2.526013392830488E-7	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999708955771568	WITHOUT_CLASSIFICATION	2.9104422843213268E-5	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.999998248024875	WITHOUT_CLASSIFICATION	1.7519751249873618E-6	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9719228156913208	WITHOUT_CLASSIFICATION	0.028077184308679125	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999997929517076	WITHOUT_CLASSIFICATION	2.070482922882259E-7	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999997929517076	WITHOUT_CLASSIFICATION	2.070482922882259E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999752417726956	WITHOUT_CLASSIFICATION	2.475822730441322E-5	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999984565424523	WITHOUT_CLASSIFICATION	1.543457547709414E-6	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999995971497119	WITHOUT_CLASSIFICATION	4.0285028812272604E-7	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999994393062354	WITHOUT_CLASSIFICATION	5.606937645340428E-7	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999993575774011	WITHOUT_CLASSIFICATION	6.424225988692985E-7	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999998299283664	WITHOUT_CLASSIFICATION	1.7007163360569326E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999831725725881	WITHOUT_CLASSIFICATION	1.6827427411972307E-5	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999996916021208	WITHOUT_CLASSIFICATION	3.0839787931735605E-7	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999998842596036	WITHOUT_CLASSIFICATION	1.157403963709807E-7	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999991925455509	WITHOUT_CLASSIFICATION	8.074544491434877E-7	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999980578367148	WITHOUT_CLASSIFICATION	1.9421632851450446E-6	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999652885754391	WITHOUT_CLASSIFICATION	3.471142456090173E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999961599091358	WITHOUT_CLASSIFICATION	3.8400908642322545E-6	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999997264030187	WITHOUT_CLASSIFICATION	2.735969813604392E-7	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999911725790037	WITHOUT_CLASSIFICATION	8.827420996354804E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999993486204488	WITHOUT_CLASSIFICATION	6.513795513064255E-7	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999983484637028	WITHOUT_CLASSIFICATION	1.6515362970849708E-6	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999988185228631	WITHOUT_CLASSIFICATION	1.1814771369751752E-6	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999544418578942	WITHOUT_CLASSIFICATION	4.555814210570229E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999984676806482	WITHOUT_CLASSIFICATION	1.5323193518392086E-6	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999872100982	WITHOUT_CLASSIFICATION	1.2789901797865736E-8	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999989812835729	WITHOUT_CLASSIFICATION	1.0187164270686006E-6	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999611482313129	WITHOUT_CLASSIFICATION	3.885176868700858E-5	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999970927470273	WITHOUT_CLASSIFICATION	2.9072529727097583E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999967692467	WITHOUT_CLASSIFICATION	3.230753425430516E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999986910845473	WITHOUT_CLASSIFICATION	1.3089154526040675E-6	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999974884605424	WITHOUT_CLASSIFICATION	2.5115394576765725E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999997836149116	WITHOUT_CLASSIFICATION	2.1638508841156628E-7	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999999749094807	WITHOUT_CLASSIFICATION	2.5090519360581418E-8	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999957150608468	WITHOUT_CLASSIFICATION	4.284939153167337E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999711516957	WITHOUT_CLASSIFICATION	2.8848304376388592E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999711516957	WITHOUT_CLASSIFICATION	2.8848304376388592E-8	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999995891595236	WITHOUT_CLASSIFICATION	4.108404764527613E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999443222661	WITHOUT_CLASSIFICATION	5.567773385371548E-8	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999443222661	WITHOUT_CLASSIFICATION	5.567773385371548E-8	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999896106492703	WITHOUT_CLASSIFICATION	1.0389350729743738E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999896106492703	WITHOUT_CLASSIFICATION	1.0389350729743738E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999990515072765	WITHOUT_CLASSIFICATION	9.484927234659135E-7	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999999309980877	WITHOUT_CLASSIFICATION	6.900191225417579E-8	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999983271484133	WITHOUT_CLASSIFICATION	1.6728515866543506E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999984690355186	WITHOUT_CLASSIFICATION	1.5309644813815575E-6	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999998093482456	WITHOUT_CLASSIFICATION	1.9065175435100353E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999961948874698	WITHOUT_CLASSIFICATION	3.8051125300642044E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999961948874698	WITHOUT_CLASSIFICATION	3.8051125300642044E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999967692467	WITHOUT_CLASSIFICATION	3.230753425430516E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999967692467	WITHOUT_CLASSIFICATION	3.230753425430516E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999967692467	WITHOUT_CLASSIFICATION	3.230753425430516E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999986910845473	WITHOUT_CLASSIFICATION	1.3089154526040675E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999711516957	WITHOUT_CLASSIFICATION	2.8848304376388592E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999711516957	WITHOUT_CLASSIFICATION	2.8848304376388592E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999711516957	WITHOUT_CLASSIFICATION	2.8848304376388592E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999990515072765	WITHOUT_CLASSIFICATION	9.484927234659135E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999990515072765	WITHOUT_CLASSIFICATION	9.484927234659135E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999990515072765	WITHOUT_CLASSIFICATION	9.484927234659135E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999984690355186	WITHOUT_CLASSIFICATION	1.5309644813815575E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999984690355186	WITHOUT_CLASSIFICATION	1.5309644813815575E-6	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999972104986801	WITHOUT_CLASSIFICATION	2.78950132003181E-6	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999997514881253	WITHOUT_CLASSIFICATION	2.485118746947225E-7	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999998966777164	WITHOUT_CLASSIFICATION	1.0332228364594734E-7	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.6796336530005036	WITHOUT_CLASSIFICATION	0.32036634699949634	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.999998994950288	WITHOUT_CLASSIFICATION	1.0050497119243378E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999993435203616	WITHOUT_CLASSIFICATION	6.564796384637922E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999993435203616	WITHOUT_CLASSIFICATION	6.564796384637922E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999996924738738	WITHOUT_CLASSIFICATION	3.0752612616575834E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999831725725881	WITHOUT_CLASSIFICATION	1.6827427411972307E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999831725725881	WITHOUT_CLASSIFICATION	1.6827427411972307E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999831725725881	WITHOUT_CLASSIFICATION	1.6827427411972307E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999831725725881	WITHOUT_CLASSIFICATION	1.6827427411972307E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999831725725881	WITHOUT_CLASSIFICATION	1.6827427411972307E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998839252066	WITHOUT_CLASSIFICATION	1.1607479339386525E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998839252066	WITHOUT_CLASSIFICATION	1.1607479339386525E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998839252066	WITHOUT_CLASSIFICATION	1.1607479339386525E-7	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999999944256823	WITHOUT_CLASSIFICATION	5.5743176581621835E-9	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999999728860443	WITHOUT_CLASSIFICATION	2.711395572122127E-8	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999986910845473	WITHOUT_CLASSIFICATION	1.3089154526040675E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999990515072765	WITHOUT_CLASSIFICATION	9.484927234659135E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999990515072765	WITHOUT_CLASSIFICATION	9.484927234659135E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999831725725881	WITHOUT_CLASSIFICATION	1.6827427411972307E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999831725725881	WITHOUT_CLASSIFICATION	1.6827427411972307E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999998839252066	WITHOUT_CLASSIFICATION	1.1607479339386525E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999996924738738	WITHOUT_CLASSIFICATION	3.0752612616575834E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9998884090801198	WITHOUT_CLASSIFICATION	1.1159091988021082E-4	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999994816104291	WITHOUT_CLASSIFICATION	5.183895708561281E-7	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999956796709771	WITHOUT_CLASSIFICATION	4.320329022824375E-6	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999975653350865	WITHOUT_CLASSIFICATION	2.434664913395635E-6	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999993706579514	WITHOUT_CLASSIFICATION	6.293420485540484E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999999294492122	WITHOUT_CLASSIFICATION	7.055078786023721E-8	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999199832372525	WITHOUT_CLASSIFICATION	8.001676274751642E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999991192690759	WITHOUT_CLASSIFICATION	8.807309241044821E-7	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999999140802001	WITHOUT_CLASSIFICATION	8.591979983947293E-8	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999999934672757	WITHOUT_CLASSIFICATION	6.5327241830973776E-9	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.999998400631181	WITHOUT_CLASSIFICATION	1.5993688190185443E-6	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999999168757759	WITHOUT_CLASSIFICATION	8.312422403396526E-8	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999995241084212	WITHOUT_CLASSIFICATION	4.7589157880521796E-7	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999940121208617	WITHOUT_CLASSIFICATION	5.987879138242288E-6	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999995669379314	WITHOUT_CLASSIFICATION	4.330620685872612E-7	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.999959620598446	WITHOUT_CLASSIFICATION	4.037940155395773E-5	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999999650049476	WITHOUT_CLASSIFICATION	3.499505245469133E-8	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999796326523451	WITHOUT_CLASSIFICATION	2.0367347654902865E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999578547688576	WITHOUT_CLASSIFICATION	4.2145231142419485E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999997695086422	WITHOUT_CLASSIFICATION	2.3049135783706273E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9996788788237442	WITHOUT_CLASSIFICATION	3.211211762557607E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999511553588	WITHOUT_CLASSIFICATION	4.884464129538677E-8	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999997327991	WITHOUT_CLASSIFICATION	2.6720090159234956E-10	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999994507376978	WITHOUT_CLASSIFICATION	5.492623021968581E-7	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999884726017404	WITHOUT_CLASSIFICATION	1.1527398259520946E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999684277125438	WITHOUT_CLASSIFICATION	3.157228745621904E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999979714418477	WITHOUT_CLASSIFICATION	2.028558152448628E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999972797606379	WITHOUT_CLASSIFICATION	2.720239362163196E-6	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999980719537948	WITHOUT_CLASSIFICATION	1.9280462051832706E-6	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999958071039012	WITHOUT_CLASSIFICATION	4.192896098781773E-6	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999999973116256	WITHOUT_CLASSIFICATION	2.6883744167840592E-9	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999998496328277	WITHOUT_CLASSIFICATION	1.5036717225960565E-7	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999789828037624	WITHOUT_CLASSIFICATION	2.1017196237560932E-5	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.999997255856161	WITHOUT_CLASSIFICATION	2.744143839079993E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9998884090801198	WITHOUT_CLASSIFICATION	1.1159091988021082E-4	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999998249523818	WITHOUT_CLASSIFICATION	1.7504761825033E-7	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999999843611144	WITHOUT_CLASSIFICATION	1.5638885557268033E-8	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9993563351291511	WITHOUT_CLASSIFICATION	6.436648708488152E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.999998832423563	WITHOUT_CLASSIFICATION	1.1675764368918998E-6	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.999998832423563	WITHOUT_CLASSIFICATION	1.1675764368918998E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999988195705994	WITHOUT_CLASSIFICATION	1.1804294004892038E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999988195705994	WITHOUT_CLASSIFICATION	1.1804294004892038E-6	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999968382391119	WITHOUT_CLASSIFICATION	3.1617608879787276E-6	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9984612908225783	WITHOUT_CLASSIFICATION	0.0015387091774217937	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.999999726270217	WITHOUT_CLASSIFICATION	2.7372978291242956E-7	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999998455851229	WITHOUT_CLASSIFICATION	1.5441487706952446E-7	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999999428745227	WITHOUT_CLASSIFICATION	5.712547724417907E-8	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999950778431574	WITHOUT_CLASSIFICATION	4.922156842574731E-6	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999674965040976	WITHOUT_CLASSIFICATION	3.2503495902452285E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999845471759472	WITHOUT_CLASSIFICATION	1.5452824052863263E-5	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999997274883881	WITHOUT_CLASSIFICATION	2.7251161195760285E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999933049259238	WITHOUT_CLASSIFICATION	6.695074076196581E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999983768455177	WITHOUT_CLASSIFICATION	1.623154482239995E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999994362668747	WITHOUT_CLASSIFICATION	5.637331251787454E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999994362668747	WITHOUT_CLASSIFICATION	5.637331251787454E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999983860529468	WITHOUT_CLASSIFICATION	1.6139470531863488E-6	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999970160908895	WITHOUT_CLASSIFICATION	2.983909110493423E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.999998766057906	WITHOUT_CLASSIFICATION	1.233942093891896E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.999998766057906	WITHOUT_CLASSIFICATION	1.233942093891896E-6	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999808154113375	WITHOUT_CLASSIFICATION	1.9184588662485284E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999983730743521	WITHOUT_CLASSIFICATION	1.626925647853121E-6	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999939221928936	WITHOUT_CLASSIFICATION	6.077807106329035E-6	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.999996056413477	WITHOUT_CLASSIFICATION	3.94358652299431E-6	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999994644533945	WITHOUT_CLASSIFICATION	5.355466053978311E-7	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999996197204764	WITHOUT_CLASSIFICATION	3.8027952355447373E-7	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999988295966096	WITHOUT_CLASSIFICATION	1.1704033904056962E-6	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999998578972772	WITHOUT_CLASSIFICATION	1.421027227998656E-7	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9996002180699733	WITHOUT_CLASSIFICATION	3.9978193002665946E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.999999668314889	WITHOUT_CLASSIFICATION	3.316851110061763E-7	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999995278998209	WITHOUT_CLASSIFICATION	4.7210017907917795E-7	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999937570850058	WITHOUT_CLASSIFICATION	6.242914994180256E-6	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999992472303741	WITHOUT_CLASSIFICATION	7.527696258135337E-7	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999981041534485	WITHOUT_CLASSIFICATION	1.895846551468356E-6	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999999267486483	WITHOUT_CLASSIFICATION	7.325135161421984E-8	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9998261596281337	WITHOUT_CLASSIFICATION	1.7384037186619645E-4	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999903856620249	WITHOUT_CLASSIFICATION	9.614337975023244E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999993577914098	WITHOUT_CLASSIFICATION	6.422085902900116E-7	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999985185564446	WITHOUT_CLASSIFICATION	1.4814435553992727E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999982130126922	WITHOUT_CLASSIFICATION	1.7869873077228287E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.8577526240429302	WITHOUT_CLASSIFICATION	0.14224737595706985	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999972352422121	WITHOUT_CLASSIFICATION	2.76475778798219E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999977460888634	WITHOUT_CLASSIFICATION	2.253911136589768E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999999032751652	WITHOUT_CLASSIFICATION	9.672483479431178E-8	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999992266079467	WITHOUT_CLASSIFICATION	7.733920532380442E-7	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.999886817437347	WITHOUT_CLASSIFICATION	1.1318256265305995E-4	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999976742317362	WITHOUT_CLASSIFICATION	2.325768263792247E-6	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999989484557977	WITHOUT_CLASSIFICATION	1.051544202291302E-6	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999675524336914	WITHOUT_CLASSIFICATION	3.244756630865191E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999998515709329	WITHOUT_CLASSIFICATION	1.4842906721648298E-7	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999940804669097	WITHOUT_CLASSIFICATION	5.919533090297545E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999993940270308	WITHOUT_CLASSIFICATION	6.059729693546512E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999953401725612	WITHOUT_CLASSIFICATION	4.659827438836034E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999988131323541	WITHOUT_CLASSIFICATION	1.186867645977936E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999988131323541	WITHOUT_CLASSIFICATION	1.186867645977936E-6	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999884336367031	WITHOUT_CLASSIFICATION	1.1566363296772246E-5	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999998719439002	WITHOUT_CLASSIFICATION	1.2805609986353485E-7	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999998529997515	WITHOUT_CLASSIFICATION	1.470002485430717E-7	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999657169769969	WITHOUT_CLASSIFICATION	3.428302300310826E-5	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999332338883146	WITHOUT_CLASSIFICATION	6.676611168550563E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999999813134225	WITHOUT_CLASSIFICATION	1.868657752485865E-8	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9998131996537656	WITHOUT_CLASSIFICATION	1.8680034623433963E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9982349702244	WITHOUT_CLASSIFICATION	0.0017650297755999627	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9997947230054236	WITHOUT_CLASSIFICATION	2.052769945765027E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.999920532077676	WITHOUT_CLASSIFICATION	7.946792232402602E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999996954754151	WITHOUT_CLASSIFICATION	3.0452458490359064E-7	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9989051570316412	WITHOUT_CLASSIFICATION	0.0010948429683587948	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999998697173161	WITHOUT_CLASSIFICATION	1.3028268384299855E-7	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9996530899596078	WITHOUT_CLASSIFICATION	3.469100403922092E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999999919746391	WITHOUT_CLASSIFICATION	8.025361033619562E-9	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999995112008475	WITHOUT_CLASSIFICATION	4.887991525946928E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999973919668393	WITHOUT_CLASSIFICATION	2.6080331606681174E-6	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999988167113265	WITHOUT_CLASSIFICATION	1.1832886735178769E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999997400414135	WITHOUT_CLASSIFICATION	2.5995858649117674E-7	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999892461888288	WITHOUT_CLASSIFICATION	1.0753811171179006E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999997087113154	WITHOUT_CLASSIFICATION	2.9128868459668336E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999997884300251	WITHOUT_CLASSIFICATION	2.1156997478141523E-7	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.999947104801132	WITHOUT_CLASSIFICATION	5.289519886799051E-5	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999911906626566	WITHOUT_CLASSIFICATION	8.809337343361756E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999908849015825	WITHOUT_CLASSIFICATION	9.115098417432325E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999992357031319	WITHOUT_CLASSIFICATION	7.642968681240665E-7	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999999859744696	WITHOUT_CLASSIFICATION	1.402553040068778E-8	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999983796148951	WITHOUT_CLASSIFICATION	1.6203851048764332E-6	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9979601856005472	WITHOUT_CLASSIFICATION	0.002039814399452767	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9561770342568318	WITHOUT_CLASSIFICATION	0.04382296574316826	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999706965996545	WITHOUT_CLASSIFICATION	2.930340034535956E-5	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999999984552471	WITHOUT_CLASSIFICATION	1.544752904784898E-9	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999838135961134	WITHOUT_CLASSIFICATION	1.6186403886642657E-5	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999996678273969	WITHOUT_CLASSIFICATION	3.3217260307895666E-7	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999934393125123	WITHOUT_CLASSIFICATION	6.560687487722633E-6	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999997847003941	WITHOUT_CLASSIFICATION	2.152996059445413E-7	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999969908338471	WITHOUT_CLASSIFICATION	3.0091661529403963E-6	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999983041498248	WITHOUT_CLASSIFICATION	1.6958501752320986E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999991805755866	WITHOUT_CLASSIFICATION	8.19424413346761E-7	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999997904086512	WITHOUT_CLASSIFICATION	2.0959134889439014E-7	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999988930736994	WITHOUT_CLASSIFICATION	1.106926300657794E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999984481225178	WITHOUT_CLASSIFICATION	1.5518774822413633E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999984481225178	WITHOUT_CLASSIFICATION	1.5518774822413633E-6	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999987365328651	WITHOUT_CLASSIFICATION	1.263467134840398E-6	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999996734055852	WITHOUT_CLASSIFICATION	3.265944149223555E-7	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999980278545023	WITHOUT_CLASSIFICATION	1.972145497663751E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999958326103903	WITHOUT_CLASSIFICATION	4.1673896097189345E-6	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999992955674356	WITHOUT_CLASSIFICATION	7.04432564434012E-7	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999999507335678	WITHOUT_CLASSIFICATION	4.92664322410149E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999979809520918	WITHOUT_CLASSIFICATION	2.0190479082089624E-6	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9692605910801041	WITHOUT_CLASSIFICATION	0.030739408919895874	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999973553301277	WITHOUT_CLASSIFICATION	2.64466987232688E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999894880575	WITHOUT_CLASSIFICATION	1.0511942499578821E-8	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999991076745727	WITHOUT_CLASSIFICATION	8.923254271877712E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999964011456848	WITHOUT_CLASSIFICATION	3.5988543152254526E-6	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9997820576886537	WITHOUT_CLASSIFICATION	2.179423113463625E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999996058283129	WITHOUT_CLASSIFICATION	3.941716870020777E-7	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999983601915349	WITHOUT_CLASSIFICATION	1.6398084651117517E-6	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9998270420471047	WITHOUT_CLASSIFICATION	1.7295795289532648E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999154797786218	WITHOUT_CLASSIFICATION	8.452022137819264E-5	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999984691707172	WITHOUT_CLASSIFICATION	1.530829282698404E-6	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999980490305	WITHOUT_CLASSIFICATION	1.950969450366164E-9	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9892697292922901	WITHOUT_CLASSIFICATION	0.010730270707709986	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999998528842203	WITHOUT_CLASSIFICATION	1.4711577975263454E-7	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.999961155068025	WITHOUT_CLASSIFICATION	3.8844931975074326E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999998546223	WITHOUT_CLASSIFICATION	1.4537771092557109E-10	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999872295590345	WITHOUT_CLASSIFICATION	1.277044096560214E-5	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999965712507001	WITHOUT_CLASSIFICATION	3.428749299861499E-6	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999997078243341	WITHOUT_CLASSIFICATION	2.9217566582332504E-7	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999998707284316	WITHOUT_CLASSIFICATION	1.2927156833774223E-7	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999998652728049	WITHOUT_CLASSIFICATION	1.3472719509500007E-7	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9997014473706827	WITHOUT_CLASSIFICATION	2.9855262931731787E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999984949839632	WITHOUT_CLASSIFICATION	1.5050160367240507E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9995224140166025	WITHOUT_CLASSIFICATION	4.77585983397448E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999968701346185	WITHOUT_CLASSIFICATION	3.129865381495876E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999984949839632	WITHOUT_CLASSIFICATION	1.5050160367240507E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999983851958008	WITHOUT_CLASSIFICATION	1.6148041992796999E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9875858378545154	WITHOUT_CLASSIFICATION	0.01241416214548476	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9987669708712875	WITHOUT_CLASSIFICATION	0.001233029128712455	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.548501109868514	DEFECT	0.45149889013148603	WITHOUT_CLASSIFICATION
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999999857864832	WITHOUT_CLASSIFICATION	1.4213516916462202E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999872385125	WITHOUT_CLASSIFICATION	1.2761487398068476E-8	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999999167271585	WITHOUT_CLASSIFICATION	8.327284153713338E-8	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.999998310203029	WITHOUT_CLASSIFICATION	1.689796971004064E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9994468219506839	WITHOUT_CLASSIFICATION	5.531780493161955E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999982130126922	WITHOUT_CLASSIFICATION	1.7869873077228287E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999998966777164	WITHOUT_CLASSIFICATION	1.0332228364594734E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999932497738203	WITHOUT_CLASSIFICATION	6.750226179676233E-6	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999990042992337	WITHOUT_CLASSIFICATION	9.957007662691984E-7	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999997505300294	WITHOUT_CLASSIFICATION	2.494699705915108E-7	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999351064602976	WITHOUT_CLASSIFICATION	6.489353970235974E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999993532092286	WITHOUT_CLASSIFICATION	6.467907713429187E-7	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999984433815671	WITHOUT_CLASSIFICATION	1.5566184329431549E-6	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999997783051321	WITHOUT_CLASSIFICATION	2.216948679973374E-7	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9996341638119611	WITHOUT_CLASSIFICATION	3.6583618803890994E-4	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999837812489479	WITHOUT_CLASSIFICATION	1.6218751052074458E-5	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999975596214058	WITHOUT_CLASSIFICATION	2.4403785941766475E-6	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999988096217968	WITHOUT_CLASSIFICATION	1.190378203264027E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999999053959542	WITHOUT_CLASSIFICATION	9.460404575541988E-8	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999861816680224	WITHOUT_CLASSIFICATION	1.3818331977545065E-5	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.999998963450002	WITHOUT_CLASSIFICATION	1.036549997971821E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999795825421535	WITHOUT_CLASSIFICATION	2.041745784653307E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999863072956696	WITHOUT_CLASSIFICATION	1.3692704330373784E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999689993894355	WITHOUT_CLASSIFICATION	3.100061056453349E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999739136013	WITHOUT_CLASSIFICATION	2.6086398695307725E-8	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999933156394444	WITHOUT_CLASSIFICATION	6.684360555674726E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999933156394444	WITHOUT_CLASSIFICATION	6.684360555674726E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997849379797	WITHOUT_CLASSIFICATION	2.150620202132606E-7	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999991884655612	WITHOUT_CLASSIFICATION	8.115344387421528E-7	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999956705339024	WITHOUT_CLASSIFICATION	4.329466097676119E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970832055736037	WITHOUT_CLASSIFICATION	0.002916794426396358	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970832055736037	WITHOUT_CLASSIFICATION	0.002916794426396358	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970832055736037	WITHOUT_CLASSIFICATION	0.002916794426396358	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970832055736037	WITHOUT_CLASSIFICATION	0.002916794426396358	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999982027125317	WITHOUT_CLASSIFICATION	1.7972874684115286E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999205113398	WITHOUT_CLASSIFICATION	7.948866016745602E-8	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999987848124825	WITHOUT_CLASSIFICATION	1.215187517477648E-6	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9997375170296852	WITHOUT_CLASSIFICATION	2.624829703148769E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999997526168007	WITHOUT_CLASSIFICATION	2.4738319927845006E-7	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9993953955322672	WITHOUT_CLASSIFICATION	6.046044677327849E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999945028996752	WITHOUT_CLASSIFICATION	5.497100324757167E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999945028996752	WITHOUT_CLASSIFICATION	5.497100324757167E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9958772071807952	WITHOUT_CLASSIFICATION	0.0041227928192048196	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9994896053967179	WITHOUT_CLASSIFICATION	5.103946032821205E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999975305408418	WITHOUT_CLASSIFICATION	2.469459158223019E-6	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9853015791186687	WITHOUT_CLASSIFICATION	0.014698420881331319	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999983194587712	WITHOUT_CLASSIFICATION	1.6805412288370732E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999990005689144	WITHOUT_CLASSIFICATION	9.994310855290734E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999993785605176	WITHOUT_CLASSIFICATION	6.214394824756913E-7	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999984144896947	WITHOUT_CLASSIFICATION	1.585510305313332E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999525152086831	WITHOUT_CLASSIFICATION	4.7484791316861526E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999525152086831	WITHOUT_CLASSIFICATION	4.7484791316861526E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999968701346185	WITHOUT_CLASSIFICATION	3.129865381495876E-5	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999865934123454	WITHOUT_CLASSIFICATION	1.3406587654665366E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999771729724283	WITHOUT_CLASSIFICATION	2.282702757180944E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999983135821723	WITHOUT_CLASSIFICATION	1.6864178276853236E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999999959866318	WITHOUT_CLASSIFICATION	4.0133681218916906E-9	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9993857662098719	WITHOUT_CLASSIFICATION	6.142337901280161E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999993653573674	WITHOUT_CLASSIFICATION	6.346426326002794E-7	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.999999095358707	WITHOUT_CLASSIFICATION	9.046412930623226E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999991192664714	WITHOUT_CLASSIFICATION	8.807335285071537E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999991192664714	WITHOUT_CLASSIFICATION	8.807335285071537E-7	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999984009748991	WITHOUT_CLASSIFICATION	1.5990251007886136E-6	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999999383102142	WITHOUT_CLASSIFICATION	6.168978581746917E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999792128717071	WITHOUT_CLASSIFICATION	2.0787128292946653E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999989615276147	WITHOUT_CLASSIFICATION	1.0384723853117458E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999997702091489	WITHOUT_CLASSIFICATION	2.2979085111824721E-7	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9994553021380309	WITHOUT_CLASSIFICATION	5.446978619691008E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999979265365021	WITHOUT_CLASSIFICATION	2.073463497913556E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999162637031	WITHOUT_CLASSIFICATION	8.373629697036013E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999162637031	WITHOUT_CLASSIFICATION	8.373629697036013E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999162637031	WITHOUT_CLASSIFICATION	8.373629697036013E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999162637031	WITHOUT_CLASSIFICATION	8.373629697036013E-8	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999830107065342	WITHOUT_CLASSIFICATION	1.69892934658458E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9995950580736973	WITHOUT_CLASSIFICATION	4.0494192630271376E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9998330693748331	WITHOUT_CLASSIFICATION	1.6693062516694916E-4	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999997714715568	WITHOUT_CLASSIFICATION	2.2852844309785728E-7	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999648459095761	WITHOUT_CLASSIFICATION	3.5154090423884074E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9993023279119606	WITHOUT_CLASSIFICATION	6.976720880394106E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999317259617	WITHOUT_CLASSIFICATION	6.82740383601499E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999519128666	WITHOUT_CLASSIFICATION	4.808713339923702E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999519128666	WITHOUT_CLASSIFICATION	4.808713339923702E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999519128666	WITHOUT_CLASSIFICATION	4.808713339923702E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999833424098545	WITHOUT_CLASSIFICATION	1.6657590145439603E-5	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9989133562255544	WITHOUT_CLASSIFICATION	0.001086643774445484	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999059132956	WITHOUT_CLASSIFICATION	9.408670436364247E-8	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999059132956	WITHOUT_CLASSIFICATION	9.408670436364247E-8	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999983207746735	WITHOUT_CLASSIFICATION	1.679225326498688E-5	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999881372964	WITHOUT_CLASSIFICATION	1.1862703575329947E-8	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999994990267986	WITHOUT_CLASSIFICATION	5.009732013865619E-7	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9997730849073172	WITHOUT_CLASSIFICATION	2.2691509268285207E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999999265859797	WITHOUT_CLASSIFICATION	7.341402023234208E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999993855295648	WITHOUT_CLASSIFICATION	6.144704351744629E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999992306464298	WITHOUT_CLASSIFICATION	7.693535701681752E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999992306464298	WITHOUT_CLASSIFICATION	7.693535701681752E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999959785531787	WITHOUT_CLASSIFICATION	4.02144682132917E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9936283628383223	WITHOUT_CLASSIFICATION	0.0063716371616776716	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.999999995532715	WITHOUT_CLASSIFICATION	4.467285009571674E-9	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999970153781259	WITHOUT_CLASSIFICATION	2.9846218739940044E-6	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999947323257109	WITHOUT_CLASSIFICATION	5.267674289099928E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999993950126764	WITHOUT_CLASSIFICATION	6.049873235563781E-7	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999996010887582	WITHOUT_CLASSIFICATION	3.989112418022418E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999054264100259	WITHOUT_CLASSIFICATION	9.457358997399716E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.998961118754262	WITHOUT_CLASSIFICATION	0.0010388812457380629	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999999323965949	WITHOUT_CLASSIFICATION	6.760340508720198E-8	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999998670781245	WITHOUT_CLASSIFICATION	1.3292187547715015E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999971228887259	WITHOUT_CLASSIFICATION	2.877111274170392E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998717417236967	WITHOUT_CLASSIFICATION	1.282582763033052E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999980242350364	WITHOUT_CLASSIFICATION	1.9757649635934404E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999852742569	WITHOUT_CLASSIFICATION	1.472574314587986E-8	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999999969740546	WITHOUT_CLASSIFICATION	3.0259453944582014E-9	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9998607485348056	WITHOUT_CLASSIFICATION	1.3925146519441566E-4	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999999659433594	WITHOUT_CLASSIFICATION	3.405664060039786E-8	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999998809899779	WITHOUT_CLASSIFICATION	1.1901002206354369E-7	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999965669061197	WITHOUT_CLASSIFICATION	3.4330938803969764E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999999414252579	WITHOUT_CLASSIFICATION	5.857474210097584E-8	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999132584110481	WITHOUT_CLASSIFICATION	8.674158895194935E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999031986287	WITHOUT_CLASSIFICATION	9.68013711834252E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999031986287	WITHOUT_CLASSIFICATION	9.68013711834252E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999031986287	WITHOUT_CLASSIFICATION	9.68013711834252E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999031986287	WITHOUT_CLASSIFICATION	9.68013711834252E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999031986287	WITHOUT_CLASSIFICATION	9.68013711834252E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999031986287	WITHOUT_CLASSIFICATION	9.68013711834252E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999031986287	WITHOUT_CLASSIFICATION	9.68013711834252E-8	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999999031986287	WITHOUT_CLASSIFICATION	9.68013711834252E-8	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.997399960263618	WITHOUT_CLASSIFICATION	0.002600039736382048	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999399279851884	WITHOUT_CLASSIFICATION	6.007201481164426E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9998544259868044	WITHOUT_CLASSIFICATION	1.4557401319551815E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.964862816996939	WITHOUT_CLASSIFICATION	0.035137183003061005	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999979809520918	WITHOUT_CLASSIFICATION	2.0190479082089624E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999979809520918	WITHOUT_CLASSIFICATION	2.0190479082089624E-6	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999999463344272	WITHOUT_CLASSIFICATION	5.366557280262743E-8	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999997703970478	WITHOUT_CLASSIFICATION	2.2960295211602833E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999998905510676	WITHOUT_CLASSIFICATION	1.0944893232143005E-7	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999681933119977	WITHOUT_CLASSIFICATION	3.180668800222113E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999971486307492	WITHOUT_CLASSIFICATION	2.8513692507520166E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999989252722364	WITHOUT_CLASSIFICATION	1.0747277635534656E-6	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999978510786726	WITHOUT_CLASSIFICATION	2.148921327569321E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9982188196080247	WITHOUT_CLASSIFICATION	0.0017811803919753624	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999993583359665	WITHOUT_CLASSIFICATION	6.416640334818918E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999782729802604	WITHOUT_CLASSIFICATION	2.1727019739505485E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999782729802604	WITHOUT_CLASSIFICATION	2.1727019739505485E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999782729802604	WITHOUT_CLASSIFICATION	2.1727019739505485E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999991230960096	WITHOUT_CLASSIFICATION	8.769039903201522E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999939599413451	WITHOUT_CLASSIFICATION	6.040058654898442E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999961960330614	WITHOUT_CLASSIFICATION	3.803966938499007E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999648755599	WITHOUT_CLASSIFICATION	3.512444004582288E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999609963471818	WITHOUT_CLASSIFICATION	3.900365281819113E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999259032022	WITHOUT_CLASSIFICATION	7.409679781989532E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999258517748	WITHOUT_CLASSIFICATION	7.414822523318762E-8	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999882903650605	WITHOUT_CLASSIFICATION	1.1709634939454959E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999985752550419	WITHOUT_CLASSIFICATION	1.4247449580686227E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999985752550419	WITHOUT_CLASSIFICATION	1.4247449580686227E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999998365613108	WITHOUT_CLASSIFICATION	1.6343868920056028E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999998336384881	WITHOUT_CLASSIFICATION	1.6636151191221035E-7	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999239983706106	WITHOUT_CLASSIFICATION	7.600162938938846E-5	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9969191870023596	WITHOUT_CLASSIFICATION	0.0030808129976403983	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999991936957311	WITHOUT_CLASSIFICATION	8.063042688851336E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999991936957311	WITHOUT_CLASSIFICATION	8.063042688851336E-7	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999992083434359	WITHOUT_CLASSIFICATION	7.916565641068458E-7	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999988409262452	WITHOUT_CLASSIFICATION	1.1590737547062083E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999720166740548	WITHOUT_CLASSIFICATION	2.7983325945219372E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999211146632889	WITHOUT_CLASSIFICATION	7.888533671105386E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999999748308923	WITHOUT_CLASSIFICATION	2.5169107697738553E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999994412787339	WITHOUT_CLASSIFICATION	5.587212661405979E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999994412787339	WITHOUT_CLASSIFICATION	5.587212661405979E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999997303333867	WITHOUT_CLASSIFICATION	2.696666132895695E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999997303333867	WITHOUT_CLASSIFICATION	2.696666132895695E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999963481280896	WITHOUT_CLASSIFICATION	3.65187191041786E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999991060390701	WITHOUT_CLASSIFICATION	8.939609299086757E-6	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999974478382905	WITHOUT_CLASSIFICATION	2.552161709534961E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999702121944742	WITHOUT_CLASSIFICATION	2.978780552575257E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999774607004991	WITHOUT_CLASSIFICATION	2.253929950090043E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999987972396257	WITHOUT_CLASSIFICATION	1.2027603743175124E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999995728314	WITHOUT_CLASSIFICATION	4.2716867211414937E-10	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999961948874698	WITHOUT_CLASSIFICATION	3.8051125300642044E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999999893729983	WITHOUT_CLASSIFICATION	1.0627001645019684E-8	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999844985623945	WITHOUT_CLASSIFICATION	1.550143760557836E-5	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.5952539043828097	WITHOUT_CLASSIFICATION	0.4047460956171904	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999998718908055	WITHOUT_CLASSIFICATION	1.2810919450436576E-7	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.999999267883856	WITHOUT_CLASSIFICATION	7.321161440327615E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999959511431342	WITHOUT_CLASSIFICATION	4.0488568657590356E-6	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999980634732633	WITHOUT_CLASSIFICATION	1.9365267366882647E-6	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999997781262263	WITHOUT_CLASSIFICATION	2.2187377371166206E-7	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999998449447474	WITHOUT_CLASSIFICATION	1.5505525276720641E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999914350580899	WITHOUT_CLASSIFICATION	8.564941910164485E-6	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.999818143940291	WITHOUT_CLASSIFICATION	1.818560597089658E-4	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999999327746277	WITHOUT_CLASSIFICATION	6.72253722681854E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999932497738203	WITHOUT_CLASSIFICATION	6.750226179676233E-6	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9997771937615142	WITHOUT_CLASSIFICATION	2.2280623848577202E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999981340606968	WITHOUT_CLASSIFICATION	1.8659393031355225E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999994966569526	WITHOUT_CLASSIFICATION	5.03343047365315E-7	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999996623436179	WITHOUT_CLASSIFICATION	3.376563821393869E-7	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999939624008755	WITHOUT_CLASSIFICATION	6.0375991245332464E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.999986155557641	WITHOUT_CLASSIFICATION	1.3844442358985815E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999999378086949	WITHOUT_CLASSIFICATION	6.21913051221603E-8	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999987315959862	WITHOUT_CLASSIFICATION	1.26840401388302E-6	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.999286549288273	WITHOUT_CLASSIFICATION	7.134507117271007E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999996417965525	WITHOUT_CLASSIFICATION	3.582034474363839E-7	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.999999426217179	WITHOUT_CLASSIFICATION	5.737828209880433E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999998808535626	WITHOUT_CLASSIFICATION	1.1914643748635884E-7	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999901652406897	WITHOUT_CLASSIFICATION	9.834759310225753E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999997929627832	WITHOUT_CLASSIFICATION	2.0703721683393053E-7	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999503130223159	WITHOUT_CLASSIFICATION	4.968697768408941E-5	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999153481959	WITHOUT_CLASSIFICATION	8.4651804176917E-8	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999995664600527	WITHOUT_CLASSIFICATION	4.3353994726725353E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999995310332467	WITHOUT_CLASSIFICATION	4.6896675330384625E-7	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9997309403873267	WITHOUT_CLASSIFICATION	2.690596126734152E-4	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.999632428605243	WITHOUT_CLASSIFICATION	3.6757139475690503E-4	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999903641727507	WITHOUT_CLASSIFICATION	9.63582724924163E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999999967085454	WITHOUT_CLASSIFICATION	3.2914546683696545E-9	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999984806790287	WITHOUT_CLASSIFICATION	1.5193209713206502E-6	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9985814620585454	WITHOUT_CLASSIFICATION	0.0014185379414545925	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999075216808	WITHOUT_CLASSIFICATION	9.247831927181341E-8	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999999634410502	WITHOUT_CLASSIFICATION	3.655894975556079E-8	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999980481583927	WITHOUT_CLASSIFICATION	1.95184160730768E-6	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999901020054479	WITHOUT_CLASSIFICATION	9.897994552147137E-6	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999742654443177	WITHOUT_CLASSIFICATION	2.573455568242405E-5	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999997847110247	WITHOUT_CLASSIFICATION	2.1528897531757105E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999999610605179	WITHOUT_CLASSIFICATION	3.893948211284274E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999999610605179	WITHOUT_CLASSIFICATION	3.893948211284274E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999996238578285	WITHOUT_CLASSIFICATION	3.76142171502095E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999996238578285	WITHOUT_CLASSIFICATION	3.76142171502095E-7	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999521070664464	WITHOUT_CLASSIFICATION	4.789293355348332E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999521070664464	WITHOUT_CLASSIFICATION	4.789293355348332E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999986722049831	WITHOUT_CLASSIFICATION	1.3277950169441704E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999986722049831	WITHOUT_CLASSIFICATION	1.3277950169441704E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999681699416	WITHOUT_CLASSIFICATION	3.183005840416102E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999681699416	WITHOUT_CLASSIFICATION	3.183005840416102E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999681699416	WITHOUT_CLASSIFICATION	3.183005840416102E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999681699416	WITHOUT_CLASSIFICATION	3.183005840416102E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999681699416	WITHOUT_CLASSIFICATION	3.183005840416102E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999681699416	WITHOUT_CLASSIFICATION	3.183005840416102E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999681699416	WITHOUT_CLASSIFICATION	3.183005840416102E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999681699416	WITHOUT_CLASSIFICATION	3.183005840416102E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.999999681699416	WITHOUT_CLASSIFICATION	3.183005840416102E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999979978199376	WITHOUT_CLASSIFICATION	2.00218006237822E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999979978199376	WITHOUT_CLASSIFICATION	2.00218006237822E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999979978199376	WITHOUT_CLASSIFICATION	2.00218006237822E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.999999768748354	WITHOUT_CLASSIFICATION	2.3125164608088587E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999983788244292	WITHOUT_CLASSIFICATION	1.6211755708656142E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999983788244292	WITHOUT_CLASSIFICATION	1.6211755708656142E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999983788244292	WITHOUT_CLASSIFICATION	1.6211755708656142E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999403146059	WITHOUT_CLASSIFICATION	5.968539404305816E-8	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999403146059	WITHOUT_CLASSIFICATION	5.968539404305816E-8	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999403146059	WITHOUT_CLASSIFICATION	5.968539404305816E-8	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999260256670386	WITHOUT_CLASSIFICATION	7.39743329614313E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999997388736198	WITHOUT_CLASSIFICATION	2.6112638011198925E-7	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999928662375921	WITHOUT_CLASSIFICATION	7.133762407893523E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998983396062114	WITHOUT_CLASSIFICATION	1.0166039378857255E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998983396062114	WITHOUT_CLASSIFICATION	1.0166039378857255E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998983396062114	WITHOUT_CLASSIFICATION	1.0166039378857255E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999981907875654	WITHOUT_CLASSIFICATION	1.8092124346637238E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999803908542141	WITHOUT_CLASSIFICATION	1.96091457859405E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999803908542141	WITHOUT_CLASSIFICATION	1.96091457859405E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9982054246923189	WITHOUT_CLASSIFICATION	0.0017945753076811682	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999972600585	WITHOUT_CLASSIFICATION	2.7399414364747206E-9	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999972600585	WITHOUT_CLASSIFICATION	2.7399414364747206E-9	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.937320612131441	WITHOUT_CLASSIFICATION	0.06267938786855892	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999966349184923	WITHOUT_CLASSIFICATION	3.3650815076973136E-6	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999962850981048	WITHOUT_CLASSIFICATION	3.7149018950993955E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994900199662	WITHOUT_CLASSIFICATION	5.099800337490976E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994900199662	WITHOUT_CLASSIFICATION	5.099800337490976E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999408372151277	WITHOUT_CLASSIFICATION	5.9162784872209286E-5	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999969607044344	WITHOUT_CLASSIFICATION	3.0392955656391674E-6	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999978343389286	WITHOUT_CLASSIFICATION	2.165661071269628E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9999995067389148	WITHOUT_CLASSIFICATION	4.932610852441262E-7	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9961856893753479	WITHOUT_CLASSIFICATION	0.00381431062465201	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994900199662	WITHOUT_CLASSIFICATION	5.099800337490976E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994900199662	WITHOUT_CLASSIFICATION	5.099800337490976E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994900199662	WITHOUT_CLASSIFICATION	5.099800337490976E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994900199662	WITHOUT_CLASSIFICATION	5.099800337490976E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999994900199662	WITHOUT_CLASSIFICATION	5.099800337490976E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.999999945995299	WITHOUT_CLASSIFICATION	5.400470109155185E-8	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999993742538414	WITHOUT_CLASSIFICATION	6.257461584913313E-7	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999997753810729	WITHOUT_CLASSIFICATION	2.2461892708656071E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999950853629487	WITHOUT_CLASSIFICATION	4.914637051240095E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9997935669256486	WITHOUT_CLASSIFICATION	2.0643307435149583E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999986138231286	WITHOUT_CLASSIFICATION	1.386176871415211E-6	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.850708691347761	WITHOUT_CLASSIFICATION	0.14929130865223914	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999385266849107	WITHOUT_CLASSIFICATION	6.147331508935542E-5	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999991813516875	WITHOUT_CLASSIFICATION	8.186483124309285E-7	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999994288309233	WITHOUT_CLASSIFICATION	5.711690767082906E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999932261138226	WITHOUT_CLASSIFICATION	6.773886177435307E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.999961155068025	WITHOUT_CLASSIFICATION	3.8844931975074326E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999998733539963	WITHOUT_CLASSIFICATION	1.2664600364555572E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999783638538	WITHOUT_CLASSIFICATION	2.1636146216726313E-8	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.999994583980951	WITHOUT_CLASSIFICATION	5.416019049111709E-6	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999513241774679	WITHOUT_CLASSIFICATION	4.867582253207086E-5	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999553390096	WITHOUT_CLASSIFICATION	4.466099032817014E-8	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999999065585	WITHOUT_CLASSIFICATION	9.344149402314412E-11	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999976110183524	WITHOUT_CLASSIFICATION	2.388981647680342E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999996522650174	WITHOUT_CLASSIFICATION	3.477349825830209E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999072787826067	WITHOUT_CLASSIFICATION	9.272121739330755E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999958447863508	WITHOUT_CLASSIFICATION	4.155213649166194E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999894880575	WITHOUT_CLASSIFICATION	1.0511942499578821E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999788479276	WITHOUT_CLASSIFICATION	2.11520724684276E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999788479276	WITHOUT_CLASSIFICATION	2.11520724684276E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999788479276	WITHOUT_CLASSIFICATION	2.11520724684276E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999788479276	WITHOUT_CLASSIFICATION	2.11520724684276E-8	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999836168790195	WITHOUT_CLASSIFICATION	1.6383120980457882E-5	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.999688299176328	WITHOUT_CLASSIFICATION	3.117008236720141E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.999998905566395	WITHOUT_CLASSIFICATION	1.094433604883999E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.999998905566395	WITHOUT_CLASSIFICATION	1.094433604883999E-6	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999961614543857	WITHOUT_CLASSIFICATION	3.8385456142212165E-6	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.99999733295563	WITHOUT_CLASSIFICATION	2.66704437002624E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999966044363808	WITHOUT_CLASSIFICATION	3.395563619241875E-6	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999855047963	WITHOUT_CLASSIFICATION	1.4495203709882566E-8	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999835768273679	WITHOUT_CLASSIFICATION	1.64231726321053E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999982181439498	WITHOUT_CLASSIFICATION	1.781856050069511E-6	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.999983635485664	WITHOUT_CLASSIFICATION	1.636451433597229E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.999995734876767	WITHOUT_CLASSIFICATION	4.265123232999237E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.999995734876767	WITHOUT_CLASSIFICATION	4.265123232999237E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.999995734876767	WITHOUT_CLASSIFICATION	4.265123232999237E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.999995734876767	WITHOUT_CLASSIFICATION	4.265123232999237E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.999722624102293	WITHOUT_CLASSIFICATION	2.7737589770695283E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999996449051632	WITHOUT_CLASSIFICATION	3.550948366786901E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999996449051632	WITHOUT_CLASSIFICATION	3.550948366786901E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999996449051632	WITHOUT_CLASSIFICATION	3.550948366786901E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999997692328809	WITHOUT_CLASSIFICATION	2.3076711908752285E-7	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999995921493052	WITHOUT_CLASSIFICATION	4.0785069473851116E-7	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999987854566716	WITHOUT_CLASSIFICATION	1.2145433282523294E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970832055736037	WITHOUT_CLASSIFICATION	0.002916794426396358	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970832055736037	WITHOUT_CLASSIFICATION	0.002916794426396358	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.999978799048519	WITHOUT_CLASSIFICATION	2.120095148093738E-5	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9997623635072336	WITHOUT_CLASSIFICATION	2.37636492766333E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.999858225075431	WITHOUT_CLASSIFICATION	1.4177492456901128E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.999858225075431	WITHOUT_CLASSIFICATION	1.4177492456901128E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9973509825127782	WITHOUT_CLASSIFICATION	0.002649017487221804	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9973509825127782	WITHOUT_CLASSIFICATION	0.002649017487221804	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999998100659407	WITHOUT_CLASSIFICATION	1.8993405918416186E-7	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999997692102868	WITHOUT_CLASSIFICATION	2.3078971316958524E-7	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999999480948591	WITHOUT_CLASSIFICATION	5.190514079859294E-8	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9423309856491019	WITHOUT_CLASSIFICATION	0.05766901435089811	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.99998637598791	WITHOUT_CLASSIFICATION	1.3624012089965687E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999997927228258	WITHOUT_CLASSIFICATION	2.0727717424935285E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999998590752022	WITHOUT_CLASSIFICATION	1.4092479781954935E-7	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999600402737673	WITHOUT_CLASSIFICATION	3.995972623276023E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999999289551217	WITHOUT_CLASSIFICATION	7.104487834256697E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999973299966	WITHOUT_CLASSIFICATION	2.6700034691706365E-9	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999973299966	WITHOUT_CLASSIFICATION	2.6700034691706365E-9	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999996714964758	WITHOUT_CLASSIFICATION	3.28503524095842E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999996714964758	WITHOUT_CLASSIFICATION	3.28503524095842E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999725232065501	WITHOUT_CLASSIFICATION	2.7476793449903947E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.999997511219024	WITHOUT_CLASSIFICATION	2.488780975937608E-6	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999292271995397	WITHOUT_CLASSIFICATION	7.077280046026236E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977997294996	WITHOUT_CLASSIFICATION	2.200270500380726E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977997294996	WITHOUT_CLASSIFICATION	2.200270500380726E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999977997294996	WITHOUT_CLASSIFICATION	2.200270500380726E-6	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999837663706257	WITHOUT_CLASSIFICATION	1.6233629374309493E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999857488587808	WITHOUT_CLASSIFICATION	1.4251141219103807E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999778783427009	WITHOUT_CLASSIFICATION	2.2121657299150198E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999842155739567	WITHOUT_CLASSIFICATION	1.57844260433278E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.999978149089493	WITHOUT_CLASSIFICATION	2.1850910507073714E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999763412251869	WITHOUT_CLASSIFICATION	2.365877481313731E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999841169446781	WITHOUT_CLASSIFICATION	1.588305532186198E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999964998518615	WITHOUT_CLASSIFICATION	3.5001481384792797E-6	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9999593975899121	WITHOUT_CLASSIFICATION	4.060241008791371E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999995430875449	WITHOUT_CLASSIFICATION	4.5691245507417906E-7	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.999999924889706	WITHOUT_CLASSIFICATION	7.511029393543372E-8	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999938598854877	WITHOUT_CLASSIFICATION	6.140114512234596E-6	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999970800764914	WITHOUT_CLASSIFICATION	2.9199235086474927E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970832055736037	WITHOUT_CLASSIFICATION	0.002916794426396358	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9998856173619666	WITHOUT_CLASSIFICATION	1.1438263803347236E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999436286517173	WITHOUT_CLASSIFICATION	5.637134828274269E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999933156394444	WITHOUT_CLASSIFICATION	6.684360555674726E-6	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998837981711401	WITHOUT_CLASSIFICATION	1.1620182885980423E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998837981711401	WITHOUT_CLASSIFICATION	1.1620182885980423E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998837981711401	WITHOUT_CLASSIFICATION	1.1620182885980423E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998837981711401	WITHOUT_CLASSIFICATION	1.1620182885980423E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998837981711401	WITHOUT_CLASSIFICATION	1.1620182885980423E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998896628141062	WITHOUT_CLASSIFICATION	1.1033718589386166E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998837981711401	WITHOUT_CLASSIFICATION	1.1620182885980423E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998837981711401	WITHOUT_CLASSIFICATION	1.1620182885980423E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998837981711401	WITHOUT_CLASSIFICATION	1.1620182885980423E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999981080162287	WITHOUT_CLASSIFICATION	1.8919837712238185E-6	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999437492732077	WITHOUT_CLASSIFICATION	5.625072679238152E-5	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9883660426158379	DEFECT	0.01163395738416211	WITHOUT_CLASSIFICATION
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9997824966147072	WITHOUT_CLASSIFICATION	2.1750338529285653E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999844243205629	WITHOUT_CLASSIFICATION	1.5575679437168906E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999990888392282	WITHOUT_CLASSIFICATION	9.111607716838309E-7	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999999943937012	WITHOUT_CLASSIFICATION	5.606298818677475E-9	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999465680311204	WITHOUT_CLASSIFICATION	5.343196887958597E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999832469391131	WITHOUT_CLASSIFICATION	1.675306088683493E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999832469391131	WITHOUT_CLASSIFICATION	1.675306088683493E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999399473395061	WITHOUT_CLASSIFICATION	6.005266049393491E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999780855353271	WITHOUT_CLASSIFICATION	2.1914464672994704E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999811707109141	WITHOUT_CLASSIFICATION	1.882928908585988E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999776062941715	WITHOUT_CLASSIFICATION	2.2393705828570586E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999978481406402	WITHOUT_CLASSIFICATION	2.151859359792816E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999815837789734	WITHOUT_CLASSIFICATION	1.841622102667316E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.999987280695359	WITHOUT_CLASSIFICATION	1.2719304640942218E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999823123307203	WITHOUT_CLASSIFICATION	1.7687669279676122E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999859150081485	WITHOUT_CLASSIFICATION	1.4084991851431925E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999862552011918	WITHOUT_CLASSIFICATION	1.3744798808328343E-5	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999833089729949	WITHOUT_CLASSIFICATION	1.6691027005041967E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.999984849379114	WITHOUT_CLASSIFICATION	1.5150620886038501E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999858326116838	WITHOUT_CLASSIFICATION	1.4167388316096333E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999816444235061	WITHOUT_CLASSIFICATION	1.8355576493921983E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999873116102461	WITHOUT_CLASSIFICATION	1.2688389753830058E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999883973748019	WITHOUT_CLASSIFICATION	1.1602625197994454E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999852624163095	WITHOUT_CLASSIFICATION	1.4737583690499484E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999903857552057	WITHOUT_CLASSIFICATION	9.614244794281218E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.999981954995627	WITHOUT_CLASSIFICATION	1.804500437295832E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999570221860415	WITHOUT_CLASSIFICATION	4.2977813958559474E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999827457983871	WITHOUT_CLASSIFICATION	1.725420161290093E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999661631687535	WITHOUT_CLASSIFICATION	3.383683124638434E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999879098290576	WITHOUT_CLASSIFICATION	1.2090170942420439E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999941767436396	WITHOUT_CLASSIFICATION	5.823256360470763E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.999981274992046	WITHOUT_CLASSIFICATION	1.872500795390923E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999864331844609	WITHOUT_CLASSIFICATION	1.3566815539178466E-5	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999861876756221	WITHOUT_CLASSIFICATION	1.381232437796917E-5	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999805462510163	WITHOUT_CLASSIFICATION	1.9453748983695335E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999838991322364	WITHOUT_CLASSIFICATION	1.6100867763521326E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999882830079474	WITHOUT_CLASSIFICATION	1.1716992052537616E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999879805217827	WITHOUT_CLASSIFICATION	1.2019478217236945E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999905428307199	WITHOUT_CLASSIFICATION	9.457169280210134E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999843717236836	WITHOUT_CLASSIFICATION	1.5628276316398985E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999878703239288	WITHOUT_CLASSIFICATION	1.212967607119287E-5	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999830228575342	WITHOUT_CLASSIFICATION	1.697714246591779E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999889041554054	WITHOUT_CLASSIFICATION	1.1095844594612704E-5	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999828304004296	WITHOUT_CLASSIFICATION	1.7169599570380904E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999795302948037	WITHOUT_CLASSIFICATION	2.0469705196247863E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999818493844977	WITHOUT_CLASSIFICATION	1.8150615502268762E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999655785575199	WITHOUT_CLASSIFICATION	3.442144248009951E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999865861947468	WITHOUT_CLASSIFICATION	1.3413805253219851E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999805831024138	WITHOUT_CLASSIFICATION	1.9416897586234625E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999667276364356	WITHOUT_CLASSIFICATION	3.327236356444549E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999839840571674	WITHOUT_CLASSIFICATION	1.6015942832624587E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999858185495423	WITHOUT_CLASSIFICATION	1.4181450457669878E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999867125877075	WITHOUT_CLASSIFICATION	1.3287412292569504E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.999977269018982	WITHOUT_CLASSIFICATION	2.2730981017939004E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999827003189252	WITHOUT_CLASSIFICATION	1.729968107479345E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999720876148676	WITHOUT_CLASSIFICATION	2.791238513253566E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999817659547089	WITHOUT_CLASSIFICATION	1.8234045291112595E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999701946613242	WITHOUT_CLASSIFICATION	2.980533867585639E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999628355052131	WITHOUT_CLASSIFICATION	3.71644947867712E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.999968707970072	WITHOUT_CLASSIFICATION	3.129202992800641E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999751327457573	WITHOUT_CLASSIFICATION	2.4867254242676287E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999751327457573	WITHOUT_CLASSIFICATION	2.4867254242676287E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999786376478433	WITHOUT_CLASSIFICATION	2.1362352156666373E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999779766847853	WITHOUT_CLASSIFICATION	2.2023315214705333E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.999975454651036	WITHOUT_CLASSIFICATION	2.45453489640105E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999631455528846	WITHOUT_CLASSIFICATION	3.68544471153588E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999885160270584	WITHOUT_CLASSIFICATION	1.148397294165811E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999506736286643	WITHOUT_CLASSIFICATION	4.932637133570163E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999770056717958	WITHOUT_CLASSIFICATION	2.299432820419877E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999491857911409	WITHOUT_CLASSIFICATION	5.0814208859047216E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999515276667021	WITHOUT_CLASSIFICATION	4.8472333297819126E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999735209477587	WITHOUT_CLASSIFICATION	2.64790522413559E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999981402590092	WITHOUT_CLASSIFICATION	1.8597409908168112E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999981402590092	WITHOUT_CLASSIFICATION	1.8597409908168112E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999974917805593	WITHOUT_CLASSIFICATION	2.5082194407097147E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9996805731804141	WITHOUT_CLASSIFICATION	3.194268195858293E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9997196814014503	WITHOUT_CLASSIFICATION	2.8031859854967694E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999996166485	WITHOUT_CLASSIFICATION	3.8335152376419676E-10	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999941350991	WITHOUT_CLASSIFICATION	5.864900933399657E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999941350991	WITHOUT_CLASSIFICATION	5.864900933399657E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999941350991	WITHOUT_CLASSIFICATION	5.864900933399657E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999941350991	WITHOUT_CLASSIFICATION	5.864900933399657E-9	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6385061776859993	WITHOUT_CLASSIFICATION	0.36149382231400057	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9334188413896697	WITHOUT_CLASSIFICATION	0.06658115861033019	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999889196365421	WITHOUT_CLASSIFICATION	1.108036345776682E-5	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999873178961453	WITHOUT_CLASSIFICATION	1.268210385463047E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999869025868667	WITHOUT_CLASSIFICATION	1.3097413133263422E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999851222135491	WITHOUT_CLASSIFICATION	1.4877786451063008E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999857948007226	WITHOUT_CLASSIFICATION	1.4205199277556923E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999743034609753	WITHOUT_CLASSIFICATION	2.569653902482163E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.999954836149619	WITHOUT_CLASSIFICATION	4.5163850380999065E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999818522194703	WITHOUT_CLASSIFICATION	1.81477805297334E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999799756479774	WITHOUT_CLASSIFICATION	2.0024352022678785E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999613709804736	WITHOUT_CLASSIFICATION	3.862901952644818E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999755887701439	WITHOUT_CLASSIFICATION	2.4411229856090728E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.999980865759001	WITHOUT_CLASSIFICATION	1.913424099897026E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999780534089191	WITHOUT_CLASSIFICATION	2.1946591080854173E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.999976578972696	WITHOUT_CLASSIFICATION	2.3421027303952896E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999878163734734	WITHOUT_CLASSIFICATION	1.2183626526507204E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999896202811535	WITHOUT_CLASSIFICATION	1.0379718846489953E-5	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999812130716396	WITHOUT_CLASSIFICATION	1.8786928360481235E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999839651301075	WITHOUT_CLASSIFICATION	1.603486989251773E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999758221298847	WITHOUT_CLASSIFICATION	2.417787011538428E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999706916934924	WITHOUT_CLASSIFICATION	2.9308306507619556E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999603195864077	WITHOUT_CLASSIFICATION	3.9680413592261594E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.999976659832491	WITHOUT_CLASSIFICATION	2.3340167509012412E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999748947460095	WITHOUT_CLASSIFICATION	2.510525399043763E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999872610059021	WITHOUT_CLASSIFICATION	1.2738994097912872E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999773978966128	WITHOUT_CLASSIFICATION	2.2602103387274878E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999898149558104	WITHOUT_CLASSIFICATION	1.0185044189567016E-5	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999915691476033	WITHOUT_CLASSIFICATION	8.430852396666669E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999885947588361	WITHOUT_CLASSIFICATION	1.1405241163845418E-5	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999902920754576	WITHOUT_CLASSIFICATION	9.707924542372287E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999809342323405	WITHOUT_CLASSIFICATION	1.90657676594363E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.999985034310687	WITHOUT_CLASSIFICATION	1.4965689312960854E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999773238005877	WITHOUT_CLASSIFICATION	2.2676199412252164E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999798046038032	WITHOUT_CLASSIFICATION	2.019539619675112E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999883271021696	WITHOUT_CLASSIFICATION	1.1672897830476018E-5	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999868691075846	WITHOUT_CLASSIFICATION	1.3130892415364518E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999882393777924	WITHOUT_CLASSIFICATION	1.1760622207583271E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999703148027889	WITHOUT_CLASSIFICATION	2.9685197211189136E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999741241659232	WITHOUT_CLASSIFICATION	2.587583407677851E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999791667218406	WITHOUT_CLASSIFICATION	2.0833278159383224E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999828486921641	WITHOUT_CLASSIFICATION	1.7151307835810715E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999838662923749	WITHOUT_CLASSIFICATION	1.613370762510115E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999821904479498	WITHOUT_CLASSIFICATION	1.780955205018745E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999843595422705	WITHOUT_CLASSIFICATION	1.5640457729540265E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999881259638698	WITHOUT_CLASSIFICATION	1.1874036130181668E-5	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999839124553185	WITHOUT_CLASSIFICATION	1.6087544681490717E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999840444885293	WITHOUT_CLASSIFICATION	1.595551147074483E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999590542049698	WITHOUT_CLASSIFICATION	4.094579503014003E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999422394732517	WITHOUT_CLASSIFICATION	5.7760526748375545E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999725732623435	WITHOUT_CLASSIFICATION	2.7426737656543183E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999703800386356	WITHOUT_CLASSIFICATION	2.9619961364341733E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999813901258752	WITHOUT_CLASSIFICATION	1.860987412490811E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999862778640022	WITHOUT_CLASSIFICATION	1.3722135997892832E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999774765801487	WITHOUT_CLASSIFICATION	2.2523419851315428E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999601060756529	WITHOUT_CLASSIFICATION	3.989392434716876E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999742406319563	WITHOUT_CLASSIFICATION	2.575936804377134E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999743251461023	WITHOUT_CLASSIFICATION	2.5674853897692536E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999750661579798	WITHOUT_CLASSIFICATION	2.4933842020121627E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999997115046865	WITHOUT_CLASSIFICATION	2.8849531360574525E-7	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999994198166724	WITHOUT_CLASSIFICATION	5.801833276066321E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999870770186448	WITHOUT_CLASSIFICATION	1.2922981355329669E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999870770186448	WITHOUT_CLASSIFICATION	1.2922981355329669E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999870770186448	WITHOUT_CLASSIFICATION	1.2922981355329669E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999870770186448	WITHOUT_CLASSIFICATION	1.2922981355329669E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999870770186448	WITHOUT_CLASSIFICATION	1.2922981355329669E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999870770186448	WITHOUT_CLASSIFICATION	1.2922981355329669E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999870770186448	WITHOUT_CLASSIFICATION	1.2922981355329669E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9996727281044708	WITHOUT_CLASSIFICATION	3.2727189552913974E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9996727281044708	WITHOUT_CLASSIFICATION	3.2727189552913974E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9996727281044708	WITHOUT_CLASSIFICATION	3.2727189552913974E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9996727281044708	WITHOUT_CLASSIFICATION	3.2727189552913974E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996804869449123	WITHOUT_CLASSIFICATION	3.1951305508768176E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996804869449123	WITHOUT_CLASSIFICATION	3.1951305508768176E-4	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9999724505512932	WITHOUT_CLASSIFICATION	2.7549448706762796E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.999999602359394	WITHOUT_CLASSIFICATION	3.976406060798488E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.999999602359394	WITHOUT_CLASSIFICATION	3.976406060798488E-7	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.999999817330092	WITHOUT_CLASSIFICATION	1.8266990792046675E-7	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999996427811352	WITHOUT_CLASSIFICATION	3.572188648829518E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996177827583	WITHOUT_CLASSIFICATION	3.822172418353744E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996177827583	WITHOUT_CLASSIFICATION	3.822172418353744E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996177827583	WITHOUT_CLASSIFICATION	3.822172418353744E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996177827583	WITHOUT_CLASSIFICATION	3.822172418353744E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996177827583	WITHOUT_CLASSIFICATION	3.822172418353744E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996177827583	WITHOUT_CLASSIFICATION	3.822172418353744E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999996177827583	WITHOUT_CLASSIFICATION	3.822172418353744E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999556872502	WITHOUT_CLASSIFICATION	4.4312749798335924E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529061618	WITHOUT_CLASSIFICATION	2.470938381825284E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999875856711733	WITHOUT_CLASSIFICATION	1.2414328826758648E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999875856711733	WITHOUT_CLASSIFICATION	1.2414328826758648E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.999999850499489	WITHOUT_CLASSIFICATION	1.495005109646316E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999993328451067	WITHOUT_CLASSIFICATION	6.671548933869069E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999993328451067	WITHOUT_CLASSIFICATION	6.671548933869069E-7	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999999850673448	WITHOUT_CLASSIFICATION	1.4932655214649873E-8	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9944618258485983	WITHOUT_CLASSIFICATION	0.0055381741514016316	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.999998592400441	WITHOUT_CLASSIFICATION	1.4075995590265791E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9991273427423164	WITHOUT_CLASSIFICATION	8.726572576834624E-4	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999998056774602	WITHOUT_CLASSIFICATION	1.9432253979300297E-7	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999982744126953	WITHOUT_CLASSIFICATION	1.7255873047198733E-6	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.999989145250551	WITHOUT_CLASSIFICATION	1.0854749448981103E-5	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999986602996102	WITHOUT_CLASSIFICATION	1.339700389908824E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999969371853	WITHOUT_CLASSIFICATION	3.0628146186634622E-9	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9997302012830761	WITHOUT_CLASSIFICATION	2.6979871692396656E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999945514640644	WITHOUT_CLASSIFICATION	5.448535935680216E-6	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999724126425351	WITHOUT_CLASSIFICATION	2.7587357464814712E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999997028809272	WITHOUT_CLASSIFICATION	2.9711907269028026E-7	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999425458995744	WITHOUT_CLASSIFICATION	5.745410042560622E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999977877735774	WITHOUT_CLASSIFICATION	2.2122264224959603E-6	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999984868995213	WITHOUT_CLASSIFICATION	1.5131004786188209E-6	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.999999991572009	WITHOUT_CLASSIFICATION	8.427990957218495E-9	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.999963511464538	WITHOUT_CLASSIFICATION	3.6488535462012654E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999977639295676	WITHOUT_CLASSIFICATION	2.2360704324811647E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999977639295676	WITHOUT_CLASSIFICATION	2.2360704324811647E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999424889604319	WITHOUT_CLASSIFICATION	5.751103956797817E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999711516957	WITHOUT_CLASSIFICATION	2.8848304376388592E-8	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999836536582616	WITHOUT_CLASSIFICATION	1.6346341738391843E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999831725725881	WITHOUT_CLASSIFICATION	1.6827427411972307E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999199832372525	WITHOUT_CLASSIFICATION	8.001676274751642E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999199832372525	WITHOUT_CLASSIFICATION	8.001676274751642E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999199832372525	WITHOUT_CLASSIFICATION	8.001676274751642E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.999998400631181	WITHOUT_CLASSIFICATION	1.5993688190185443E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9996788788237442	WITHOUT_CLASSIFICATION	3.211211762557607E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999987884328367	WITHOUT_CLASSIFICATION	1.211567163266782E-6	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999942082910066	WITHOUT_CLASSIFICATION	5.791708993455277E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999982658628018	WITHOUT_CLASSIFICATION	1.7341371981286362E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999999246126495	WITHOUT_CLASSIFICATION	7.538735042508871E-8	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999080840039448	WITHOUT_CLASSIFICATION	9.191599605518805E-5	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999933049259238	WITHOUT_CLASSIFICATION	6.695074076196581E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999997274883881	WITHOUT_CLASSIFICATION	2.7251161195760285E-7	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.999999965273645	WITHOUT_CLASSIFICATION	3.4726355038620236E-8	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999989067069085	WITHOUT_CLASSIFICATION	1.0932930914717656E-6	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999924199447151	WITHOUT_CLASSIFICATION	7.580055284936737E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.8577526240429302	WITHOUT_CLASSIFICATION	0.14224737595706985	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999333759442248	WITHOUT_CLASSIFICATION	6.662405577513668E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999998189905	WITHOUT_CLASSIFICATION	1.8100959120017702E-10	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999998196863753	WITHOUT_CLASSIFICATION	1.803136246365956E-7	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999943585025194	WITHOUT_CLASSIFICATION	5.641497480638404E-6	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999706965996545	WITHOUT_CLASSIFICATION	2.930340034535956E-5	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999897126974477	WITHOUT_CLASSIFICATION	1.0287302552199912E-5	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.5745661798453443	WITHOUT_CLASSIFICATION	0.42543382015465575	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9146620825548464	DEFECT	0.08533791744515364	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.997655136922199	WITHOUT_CLASSIFICATION	0.0023448630778010113	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9778432558012365	DEFECT	0.02215674419876349	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9977486405890835	DEFECT	0.002251359410916488	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.7770455201868578	WITHOUT_CLASSIFICATION	0.22295447981314223	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9120066201942678	WITHOUT_CLASSIFICATION	0.08799337980573213	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9759500818066834	WITHOUT_CLASSIFICATION	0.02404991819331662	DEFECT
// FIXME: not correct exception	DEFECT	0.9860597501098207	DEFECT	0.013940249890179158	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9971607137014397	WITHOUT_CLASSIFICATION	0.0028392862985602667	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9996191530773781	WITHOUT_CLASSIFICATION	3.808469226218954E-4	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9965946262679849	WITHOUT_CLASSIFICATION	0.003405373732015047	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9995527891913742	WITHOUT_CLASSIFICATION	4.4721080862570586E-4	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.6396977927618833	WITHOUT_CLASSIFICATION	0.3603022072381167	DEFECT
// TODO: sys fail	DEFECT	0.9173105472828832	WITHOUT_CLASSIFICATION	0.08268945271711683	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9881625185802989	WITHOUT_CLASSIFICATION	0.01183748141970113	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9881625185802989	WITHOUT_CLASSIFICATION	0.01183748141970113	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9985084081241749	WITHOUT_CLASSIFICATION	0.0014915918758250746	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9898365030157218	WITHOUT_CLASSIFICATION	0.010163496984278179	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.5229234969177019	WITHOUT_CLASSIFICATION	0.4770765030822981	DEFECT
// ENEBO: Very wrong	DEFECT	0.9996855600355506	WITHOUT_CLASSIFICATION	3.144399644493158E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9996855600355506	WITHOUT_CLASSIFICATION	3.144399644493158E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.6772590622232189	DEFECT	0.32274093777678126	WITHOUT_CLASSIFICATION
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9722781161359454	DEFECT	0.02772188386405455	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9469271376872008	WITHOUT_CLASSIFICATION	0.05307286231279908	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8935362398315608	WITHOUT_CLASSIFICATION	0.10646376016843924	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.8927204306980756	WITHOUT_CLASSIFICATION	0.1072795693019244	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.6604435167780788	WITHOUT_CLASSIFICATION	0.33955648322192117	DEFECT
// TODO: proper sign	DEFECT	0.9993528582325707	WITHOUT_CLASSIFICATION	6.471417674293705E-4	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.998261709221086	DEFECT	0.0017382907789140099	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.6516635207228126	DEFECT	0.34833647927718736	WITHOUT_CLASSIFICATION
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9980231021242045	DEFECT	0.0019768978757955147	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.7684728914775542	DEFECT	0.23152710852244593	WITHOUT_CLASSIFICATION
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.814433909536061	DEFECT	0.1855660904639391	WITHOUT_CLASSIFICATION
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.8917553234422987	WITHOUT_CLASSIFICATION	0.10824467655770127	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9201502322211146	WITHOUT_CLASSIFICATION	0.0798497677788854	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.6645603613849101	DEFECT	0.3354396386150899	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9498387211131668	WITHOUT_CLASSIFICATION	0.05016127888683327	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.7753975036637086	WITHOUT_CLASSIFICATION	0.2246024963362913	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9976861862679984	DEFECT	0.002313813732001517	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9973667428669803	WITHOUT_CLASSIFICATION	0.002633257133019644	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9999833405098123	WITHOUT_CLASSIFICATION	1.6659490187670237E-5	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.8533242702194472	WITHOUT_CLASSIFICATION	0.14667572978055282	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.8533242702194472	WITHOUT_CLASSIFICATION	0.14667572978055282	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.8979992728584479	WITHOUT_CLASSIFICATION	0.10200072714155198	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9999075932233333	WITHOUT_CLASSIFICATION	9.240677666673912E-5	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9994670455395507	DEFECT	5.329544604492665E-4	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9653038835734788	WITHOUT_CLASSIFICATION	0.03469611642652121	DEFECT
// FIXME: This is wrong	DEFECT	0.846137053755497	DEFECT	0.153862946244503	WITHOUT_CLASSIFICATION
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.7483571578254163	DEFECT	0.25164284217458366	WITHOUT_CLASSIFICATION
// XXX Wrong, but will have to do for now	DEFECT	0.999875833483116	WITHOUT_CLASSIFICATION	1.2416651688401483E-4	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9067666725060127	DEFECT	0.09323332749398724	WITHOUT_CLASSIFICATION
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9946461819910625	WITHOUT_CLASSIFICATION	0.0053538180089375	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9997638736616873	WITHOUT_CLASSIFICATION	2.3612633831269502E-4	DEFECT
// FIXME: Broken but behaving	DEFECT	0.99899663242864	DEFECT	0.001003367571360012	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8167512641610187	WITHOUT_CLASSIFICATION	0.1832487358389813	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8167512641610187	WITHOUT_CLASSIFICATION	0.1832487358389813	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9997934459405311	DEFECT	2.0655405946894476E-4	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9686355448403603	WITHOUT_CLASSIFICATION	0.03136445515963964	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9700436469672816	DEFECT	0.02995635303271827	WITHOUT_CLASSIFICATION
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9990736105281016	WITHOUT_CLASSIFICATION	9.263894718984421E-4	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.6906100582260739	DEFECT	0.3093899417739262	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9950288910798386	DEFECT	0.004971108920161385	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9969507893128193	WITHOUT_CLASSIFICATION	0.0030492106871806497	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9994353126726221	DEFECT	5.646873273778664E-4	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.8979992728584479	WITHOUT_CLASSIFICATION	0.10200072714155198	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9997014681129843	WITHOUT_CLASSIFICATION	2.985318870156632E-4	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.8596464702090907	DEFECT	0.14035352979090926	WITHOUT_CLASSIFICATION
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9990318614245164	WITHOUT_CLASSIFICATION	9.681385754837104E-4	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8935362398315608	WITHOUT_CLASSIFICATION	0.10646376016843924	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.7656120479504313	WITHOUT_CLASSIFICATION	0.2343879520495688	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9497948968537456	DEFECT	0.05020510314625429	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9498387211131668	WITHOUT_CLASSIFICATION	0.05016127888683327	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9992681414197863	WITHOUT_CLASSIFICATION	7.318585802137892E-4	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// FIXME: Broken but behaving	DEFECT	0.99899663242864	DEFECT	0.001003367571360012	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.8842146848030746	DEFECT	0.11578531519692525	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// TODO: don't require pop	DEFECT	0.8780127980016972	WITHOUT_CLASSIFICATION	0.1219872019983028	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9067666725060127	DEFECT	0.09323332749398724	WITHOUT_CLASSIFICATION
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.5271143477312219	WITHOUT_CLASSIFICATION	0.4728856522687781	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8167512641610187	WITHOUT_CLASSIFICATION	0.1832487358389813	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8167512641610187	WITHOUT_CLASSIFICATION	0.1832487358389813	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9686355448403603	WITHOUT_CLASSIFICATION	0.03136445515963964	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9686355448403603	WITHOUT_CLASSIFICATION	0.03136445515963964	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9686355448403603	WITHOUT_CLASSIFICATION	0.03136445515963964	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9686355448403603	WITHOUT_CLASSIFICATION	0.03136445515963964	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9686355448403603	WITHOUT_CLASSIFICATION	0.03136445515963964	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9686355448403603	WITHOUT_CLASSIFICATION	0.03136445515963964	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9886989409625229	WITHOUT_CLASSIFICATION	0.011301059037477051	DEFECT
