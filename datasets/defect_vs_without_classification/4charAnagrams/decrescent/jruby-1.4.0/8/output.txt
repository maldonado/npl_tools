// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.999999996639195	WITHOUT_CLASSIFICATION	3.3608049261054774E-9	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999951974008157	WITHOUT_CLASSIFICATION	4.802599184286674E-6	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998964052659571	WITHOUT_CLASSIFICATION	1.0359473404290481E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998964052659571	WITHOUT_CLASSIFICATION	1.0359473404290481E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999846953013661	WITHOUT_CLASSIFICATION	1.5304698633924713E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999846953013661	WITHOUT_CLASSIFICATION	1.5304698633924713E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999553498871538	WITHOUT_CLASSIFICATION	4.46501128462303E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999998920198996	WITHOUT_CLASSIFICATION	1.0798010035461722E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999943039038882	WITHOUT_CLASSIFICATION	5.696096111790671E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999928882186065	WITHOUT_CLASSIFICATION	7.111781393386751E-6	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998785404036802	WITHOUT_CLASSIFICATION	1.2145959631983793E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998785404036802	WITHOUT_CLASSIFICATION	1.2145959631983793E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999970705117128	WITHOUT_CLASSIFICATION	2.9294882871476303E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998212608036133	WITHOUT_CLASSIFICATION	1.7873919638655898E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998212608036133	WITHOUT_CLASSIFICATION	1.7873919638655898E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999724243602023	WITHOUT_CLASSIFICATION	2.757563979768776E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999785989549138	WITHOUT_CLASSIFICATION	2.140104508614955E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999462231780487	WITHOUT_CLASSIFICATION	5.37768219514368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999462231780487	WITHOUT_CLASSIFICATION	5.37768219514368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999462231780487	WITHOUT_CLASSIFICATION	5.37768219514368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999462231780487	WITHOUT_CLASSIFICATION	5.37768219514368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999462231780487	WITHOUT_CLASSIFICATION	5.37768219514368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999462231780487	WITHOUT_CLASSIFICATION	5.37768219514368E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999462231780487	WITHOUT_CLASSIFICATION	5.37768219514368E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999994838310567	WITHOUT_CLASSIFICATION	5.161689432996516E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999994838310567	WITHOUT_CLASSIFICATION	5.161689432996516E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999994838310567	WITHOUT_CLASSIFICATION	5.161689432996516E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999994838310567	WITHOUT_CLASSIFICATION	5.161689432996516E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999994838310567	WITHOUT_CLASSIFICATION	5.161689432996516E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999994838310567	WITHOUT_CLASSIFICATION	5.161689432996516E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999994838310567	WITHOUT_CLASSIFICATION	5.161689432996516E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999758232033288	WITHOUT_CLASSIFICATION	2.4176796671128878E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999758232033288	WITHOUT_CLASSIFICATION	2.4176796671128878E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999758232033288	WITHOUT_CLASSIFICATION	2.4176796671128878E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999758232033288	WITHOUT_CLASSIFICATION	2.4176796671128878E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999758232033288	WITHOUT_CLASSIFICATION	2.4176796671128878E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999758232033288	WITHOUT_CLASSIFICATION	2.4176796671128878E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999605575314516	WITHOUT_CLASSIFICATION	3.944246854831613E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999605575314516	WITHOUT_CLASSIFICATION	3.944246854831613E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999605575314516	WITHOUT_CLASSIFICATION	3.944246854831613E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999605575314516	WITHOUT_CLASSIFICATION	3.944246854831613E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999605575314516	WITHOUT_CLASSIFICATION	3.944246854831613E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999605575314516	WITHOUT_CLASSIFICATION	3.944246854831613E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999419544599917	WITHOUT_CLASSIFICATION	5.804554000830897E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999419544599917	WITHOUT_CLASSIFICATION	5.804554000830897E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999419544599917	WITHOUT_CLASSIFICATION	5.804554000830897E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999419544599917	WITHOUT_CLASSIFICATION	5.804554000830897E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999419544599917	WITHOUT_CLASSIFICATION	5.804554000830897E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999419544599917	WITHOUT_CLASSIFICATION	5.804554000830897E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999419544599917	WITHOUT_CLASSIFICATION	5.804554000830897E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999570621102614	WITHOUT_CLASSIFICATION	4.293788973867874E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999570621102614	WITHOUT_CLASSIFICATION	4.293788973867874E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999570621102614	WITHOUT_CLASSIFICATION	4.293788973867874E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999570621102614	WITHOUT_CLASSIFICATION	4.293788973867874E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999971555914631	WITHOUT_CLASSIFICATION	2.844408536901647E-6	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999971555914631	WITHOUT_CLASSIFICATION	2.844408536901647E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999995755856046	WITHOUT_CLASSIFICATION	4.2441439531085176E-7	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999988748578135	WITHOUT_CLASSIFICATION	1.1251421865627595E-6	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999988775846904	WITHOUT_CLASSIFICATION	1.1224153096349914E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999999694816435	WITHOUT_CLASSIFICATION	3.051835647685183E-8	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999997981303069	WITHOUT_CLASSIFICATION	2.018696930235683E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999995341921241	WITHOUT_CLASSIFICATION	4.658078759616014E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999995341921241	WITHOUT_CLASSIFICATION	4.658078759616014E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999995341921241	WITHOUT_CLASSIFICATION	4.658078759616014E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999995341921241	WITHOUT_CLASSIFICATION	4.658078759616014E-7	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.99997541292516	WITHOUT_CLASSIFICATION	2.45870748399387E-5	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999926091713468	WITHOUT_CLASSIFICATION	7.3908286531552655E-6	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999983647113097	WITHOUT_CLASSIFICATION	1.635288690428238E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999993325951073	WITHOUT_CLASSIFICATION	6.674048927276284E-7	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999998017421013	WITHOUT_CLASSIFICATION	1.9825789867577639E-7	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999961843963482	WITHOUT_CLASSIFICATION	3.81560365178946E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999969719775921	WITHOUT_CLASSIFICATION	3.0280224077920403E-6	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999999391797156	WITHOUT_CLASSIFICATION	6.082028439418727E-8	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999998053104248	WITHOUT_CLASSIFICATION	1.9468957521234991E-7	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9999541712970683	WITHOUT_CLASSIFICATION	4.5828702931671064E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999983976545438	WITHOUT_CLASSIFICATION	1.602345456233937E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999996977961311	WITHOUT_CLASSIFICATION	3.0220386884389823E-7	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999920687862944	WITHOUT_CLASSIFICATION	7.93121370557286E-6	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999999710784376	WITHOUT_CLASSIFICATION	2.8921562347817088E-8	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999990262016448	WITHOUT_CLASSIFICATION	9.737983551680521E-7	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999982149847894	WITHOUT_CLASSIFICATION	1.7850152107008554E-6	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999917289637456	WITHOUT_CLASSIFICATION	8.271036254526947E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999995341921241	WITHOUT_CLASSIFICATION	4.658078759616014E-7	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999976587340486	WITHOUT_CLASSIFICATION	2.341265951488834E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999997246489813	WITHOUT_CLASSIFICATION	2.7535101867046557E-7	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999988628323524	WITHOUT_CLASSIFICATION	1.137167647653674E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999976806825464	WITHOUT_CLASSIFICATION	2.319317453641984E-6	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9998374743164211	WITHOUT_CLASSIFICATION	1.625256835788543E-4	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999961716243984	WITHOUT_CLASSIFICATION	3.828375601667347E-6	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999999924046671	WITHOUT_CLASSIFICATION	7.595332884707827E-9	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999999813167005	WITHOUT_CLASSIFICATION	1.8683299464229164E-8	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999999870198996	WITHOUT_CLASSIFICATION	1.2980100462828255E-8	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9990716426249537	WITHOUT_CLASSIFICATION	9.283573750462547E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9996843384662237	WITHOUT_CLASSIFICATION	3.156615337763242E-4	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999990975328978	WITHOUT_CLASSIFICATION	9.024671021211653E-7	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999990383623554	WITHOUT_CLASSIFICATION	9.616376446809882E-7	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999998837968632	WITHOUT_CLASSIFICATION	1.1620313680871074E-7	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999965720676944	WITHOUT_CLASSIFICATION	3.427932305573129E-6	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999966913655375	WITHOUT_CLASSIFICATION	3.308634462544782E-6	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999983619593265	WITHOUT_CLASSIFICATION	1.6380406736392999E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999996556931751	WITHOUT_CLASSIFICATION	3.4430682497708317E-7	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.999999342918841	WITHOUT_CLASSIFICATION	6.570811590182636E-7	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999998051545083	WITHOUT_CLASSIFICATION	1.94845491667424E-7	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9295838289492137	WITHOUT_CLASSIFICATION	0.07041617105078643	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999987502725297	WITHOUT_CLASSIFICATION	1.2497274702925067E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999969413651231	WITHOUT_CLASSIFICATION	3.058634876913193E-6	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999980256301487	WITHOUT_CLASSIFICATION	1.9743698511904546E-6	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999963362952188	WITHOUT_CLASSIFICATION	3.6637047811270995E-6	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999767512918124	WITHOUT_CLASSIFICATION	2.3248708187611792E-5	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999977145779644	WITHOUT_CLASSIFICATION	2.2854220356764356E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999605629787124	WITHOUT_CLASSIFICATION	3.9437021287711233E-5	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999999539275867	WITHOUT_CLASSIFICATION	4.607241328751423E-8	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999993447207562	WITHOUT_CLASSIFICATION	6.552792436646128E-7	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999978748366432	WITHOUT_CLASSIFICATION	2.1251633568014296E-6	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999992942586526	WITHOUT_CLASSIFICATION	7.057413473950019E-7	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999968506782141	WITHOUT_CLASSIFICATION	3.1493217858201293E-6	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999980045062721	WITHOUT_CLASSIFICATION	1.9954937278605702E-6	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999674720730835	WITHOUT_CLASSIFICATION	3.25279269165461E-5	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999999637470381	WITHOUT_CLASSIFICATION	3.6252961806893496E-8	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999992211407056	WITHOUT_CLASSIFICATION	7.788592944672355E-7	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999998744553117	WITHOUT_CLASSIFICATION	1.2554468823731792E-7	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999999721364257	WITHOUT_CLASSIFICATION	2.7863574387962547E-8	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999993189242303	WITHOUT_CLASSIFICATION	6.810757697262435E-7	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.999998498160965	WITHOUT_CLASSIFICATION	1.5018390350383272E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999989272386881	WITHOUT_CLASSIFICATION	1.0727613118413139E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998766632098243	WITHOUT_CLASSIFICATION	1.2333679017576763E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999965906869521	WITHOUT_CLASSIFICATION	3.4093130477751047E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999965906869521	WITHOUT_CLASSIFICATION	3.4093130477751047E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999999913867248	WITHOUT_CLASSIFICATION	8.613275161355329E-9	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999999539879022	WITHOUT_CLASSIFICATION	4.601209786433752E-8	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999968690512738	WITHOUT_CLASSIFICATION	3.1309487260836804E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999436456334291	WITHOUT_CLASSIFICATION	5.635436657097949E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999987183075757	WITHOUT_CLASSIFICATION	1.2816924243214378E-6	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9998625510543496	WITHOUT_CLASSIFICATION	1.374489456504616E-4	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999931866367782	WITHOUT_CLASSIFICATION	6.813363221777486E-6	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999949261522032	WITHOUT_CLASSIFICATION	5.073847796726564E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999989272386881	WITHOUT_CLASSIFICATION	1.0727613118413139E-6	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999998402568543	WITHOUT_CLASSIFICATION	1.5974314562824653E-7	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999963715133678	WITHOUT_CLASSIFICATION	3.6284866320046933E-6	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999999851857546	WITHOUT_CLASSIFICATION	1.4814245406702474E-8	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999999984224008	WITHOUT_CLASSIFICATION	1.577599208463109E-9	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999999988626983	WITHOUT_CLASSIFICATION	1.1373016231543014E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999960556126	WITHOUT_CLASSIFICATION	3.944387350784153E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999960556126	WITHOUT_CLASSIFICATION	3.944387350784153E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999960556126	WITHOUT_CLASSIFICATION	3.944387350784153E-9	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999997637126851	WITHOUT_CLASSIFICATION	2.3628731496383887E-7	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999988723917	WITHOUT_CLASSIFICATION	1.1276083632002651E-9	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999999306696181	WITHOUT_CLASSIFICATION	6.933038186868495E-8	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9876065339557218	WITHOUT_CLASSIFICATION	0.012393466044278078	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9998921262859359	WITHOUT_CLASSIFICATION	1.0787371406400866E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999999777811113	WITHOUT_CLASSIFICATION	2.2218888762472668E-8	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9997422829310498	WITHOUT_CLASSIFICATION	2.577170689502156E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999998509941198	WITHOUT_CLASSIFICATION	1.4900588024964247E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999996385070145	WITHOUT_CLASSIFICATION	3.614929854854427E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999996385070145	WITHOUT_CLASSIFICATION	3.614929854854427E-7	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999997996312389	WITHOUT_CLASSIFICATION	2.0036876108903483E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999905710321	WITHOUT_CLASSIFICATION	9.428967966763101E-9	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999960803309542	WITHOUT_CLASSIFICATION	3.919669045767756E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999960803309542	WITHOUT_CLASSIFICATION	3.919669045767756E-6	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999995100431661	WITHOUT_CLASSIFICATION	4.899568338040674E-7	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999999685737191	WITHOUT_CLASSIFICATION	3.14262807962279E-8	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.999994537308758	WITHOUT_CLASSIFICATION	5.462691242004308E-6	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999999795474358	WITHOUT_CLASSIFICATION	2.0452564156059843E-8	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999981291011009	WITHOUT_CLASSIFICATION	1.870898899066094E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999991358764182	WITHOUT_CLASSIFICATION	8.641235818772023E-7	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999990292965105	WITHOUT_CLASSIFICATION	9.7070348944552E-7	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999940989923881	WITHOUT_CLASSIFICATION	5.9010076118475595E-6	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999991924721088	WITHOUT_CLASSIFICATION	8.07527891245721E-7	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999996511446433	WITHOUT_CLASSIFICATION	3.4885535668996763E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999989272386881	WITHOUT_CLASSIFICATION	1.0727613118413139E-6	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999984351949841	WITHOUT_CLASSIFICATION	1.564805015879097E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999963885721	WITHOUT_CLASSIFICATION	3.6114280405974864E-9	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999989233996003	WITHOUT_CLASSIFICATION	1.0766003997618052E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9219977141438268	WITHOUT_CLASSIFICATION	0.07800228585617328	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999891719635347	WITHOUT_CLASSIFICATION	1.0828036465389787E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999873315257927	WITHOUT_CLASSIFICATION	1.266847420732586E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999847604563277	WITHOUT_CLASSIFICATION	1.523954367246491E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999539555292475	WITHOUT_CLASSIFICATION	4.6044470752477996E-5	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999996422661094	WITHOUT_CLASSIFICATION	3.577338905426995E-7	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999794515879615	WITHOUT_CLASSIFICATION	2.054841203858183E-5	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999999682248473	WITHOUT_CLASSIFICATION	3.17751527658607E-8	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999996837792551	WITHOUT_CLASSIFICATION	3.1622074497929106E-7	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999996719357055	WITHOUT_CLASSIFICATION	3.280642946199186E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999998496130937	WITHOUT_CLASSIFICATION	1.5038690620916424E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.999999190662582	WITHOUT_CLASSIFICATION	8.093374180193891E-7	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999812261969416	WITHOUT_CLASSIFICATION	1.8773803058378813E-5	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999999896629987	WITHOUT_CLASSIFICATION	1.0337001224734858E-8	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999999489977349	WITHOUT_CLASSIFICATION	5.1002265075135526E-8	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999998482202245	WITHOUT_CLASSIFICATION	1.5177977546748135E-7	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999989276368	WITHOUT_CLASSIFICATION	1.072363095777278E-9	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999933021152105	WITHOUT_CLASSIFICATION	6.6978847895103785E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999996660941342	WITHOUT_CLASSIFICATION	3.339058658738675E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999998789720874	WITHOUT_CLASSIFICATION	1.2102791253562233E-7	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999996392428101	WITHOUT_CLASSIFICATION	3.607571898672315E-7	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999962486291297	WITHOUT_CLASSIFICATION	3.751370870225631E-6	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999946682784527	WITHOUT_CLASSIFICATION	5.3317215473157345E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999957786990368	WITHOUT_CLASSIFICATION	4.221300963261092E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999994014531419	WITHOUT_CLASSIFICATION	5.985468580912462E-7	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999993707421571	WITHOUT_CLASSIFICATION	6.292578429643015E-7	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999997861043977	WITHOUT_CLASSIFICATION	2.1389560243378692E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999948076453828	WITHOUT_CLASSIFICATION	5.1923546171230905E-6	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999998467992932	WITHOUT_CLASSIFICATION	1.5320070682572275E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999990266081764	WITHOUT_CLASSIFICATION	9.73391823592337E-7	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999966256340989	WITHOUT_CLASSIFICATION	3.3743659011003473E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999994336486384	WITHOUT_CLASSIFICATION	5.663513616227164E-7	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999974870816847	WITHOUT_CLASSIFICATION	2.512918315250804E-6	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999997499588407	WITHOUT_CLASSIFICATION	2.5004115940651785E-7	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999946073912299	WITHOUT_CLASSIFICATION	5.392608770076493E-6	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.99999999576397	WITHOUT_CLASSIFICATION	4.236030006074383E-9	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999959534447677	WITHOUT_CLASSIFICATION	4.0465552324176115E-6	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.999999869384952	WITHOUT_CLASSIFICATION	1.3061504808504242E-7	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999999865142668	WITHOUT_CLASSIFICATION	1.3485733157016615E-8	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999999976857805	WITHOUT_CLASSIFICATION	2.31421943629371E-9	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999999155512458	WITHOUT_CLASSIFICATION	8.444875431395688E-8	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.999996358226439	WITHOUT_CLASSIFICATION	3.6417735610833744E-6	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999996132323065	WITHOUT_CLASSIFICATION	3.86767693553891E-7	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.999999347293958	WITHOUT_CLASSIFICATION	6.527060419523621E-7	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.999999602984231	WITHOUT_CLASSIFICATION	3.9701576900954913E-7	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999967655169414	WITHOUT_CLASSIFICATION	3.2344830587061035E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999996525256735	WITHOUT_CLASSIFICATION	3.474743265202132E-7	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999972530308945	WITHOUT_CLASSIFICATION	2.7469691056380777E-6	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999945475088832	WITHOUT_CLASSIFICATION	5.452491116756155E-6	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999989024860411	WITHOUT_CLASSIFICATION	1.0975139589452325E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999998286959536	WITHOUT_CLASSIFICATION	1.7130404633048705E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999992871039988	WITHOUT_CLASSIFICATION	7.128960013240367E-7	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999929711705293	WITHOUT_CLASSIFICATION	7.028829470631953E-6	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9999995668412243	WITHOUT_CLASSIFICATION	4.33158775740854E-7	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999982116574789	WITHOUT_CLASSIFICATION	1.7883425209730858E-6	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.999999960502154	WITHOUT_CLASSIFICATION	3.949784591524391E-8	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999999844442546	WITHOUT_CLASSIFICATION	1.555574540182629E-8	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999984730451437	WITHOUT_CLASSIFICATION	1.5269548563985134E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999984730451437	WITHOUT_CLASSIFICATION	1.5269548563985134E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999991222979931	WITHOUT_CLASSIFICATION	8.777020067281113E-7	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999991222979931	WITHOUT_CLASSIFICATION	8.777020067281113E-7	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.999998441710039	WITHOUT_CLASSIFICATION	1.5582899609734653E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.999998441710039	WITHOUT_CLASSIFICATION	1.5582899609734653E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999971916780077	WITHOUT_CLASSIFICATION	2.808321992256629E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999971916780077	WITHOUT_CLASSIFICATION	2.808321992256629E-6	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999997352605278	WITHOUT_CLASSIFICATION	2.6473947218752787E-7	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999997604997908	WITHOUT_CLASSIFICATION	2.3950020917385686E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999988229144262	WITHOUT_CLASSIFICATION	1.1770855738584997E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999935430833058	WITHOUT_CLASSIFICATION	6.4569166941157764E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999742015636117	WITHOUT_CLASSIFICATION	2.579843638832591E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9998923484689959	WITHOUT_CLASSIFICATION	1.0765153100410689E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999992044320497	WITHOUT_CLASSIFICATION	7.95567950268397E-7	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999998806757581	WITHOUT_CLASSIFICATION	1.193242419932789E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.999999955120642	WITHOUT_CLASSIFICATION	4.487935797348075E-8	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999999630191544	WITHOUT_CLASSIFICATION	3.6980845589219404E-8	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999999877839508	WITHOUT_CLASSIFICATION	1.2216049086827907E-8	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999998719775951	WITHOUT_CLASSIFICATION	1.2802240485468246E-7	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999998744487907	WITHOUT_CLASSIFICATION	1.255512092969666E-7	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.999999998538164	WITHOUT_CLASSIFICATION	1.4618358889722342E-9	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999998507748739	WITHOUT_CLASSIFICATION	1.4922512611551202E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999993409054219	WITHOUT_CLASSIFICATION	6.590945781985962E-7	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999999206415913	WITHOUT_CLASSIFICATION	7.935840881883437E-8	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999995154600925	WITHOUT_CLASSIFICATION	4.845399074909625E-7	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999964217718362	WITHOUT_CLASSIFICATION	3.578228163735941E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9987776576742666	WITHOUT_CLASSIFICATION	0.001222342325733398	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999998480661454	WITHOUT_CLASSIFICATION	1.519338546494035E-7	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999991369273703	WITHOUT_CLASSIFICATION	8.630726298266331E-7	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.999999630667661	WITHOUT_CLASSIFICATION	3.693323389787121E-7	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999935506131248	WITHOUT_CLASSIFICATION	6.449386875165903E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.999996690588604	WITHOUT_CLASSIFICATION	3.3094113960491786E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999959256903	WITHOUT_CLASSIFICATION	4.074309663832891E-9	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999985770040752	WITHOUT_CLASSIFICATION	1.4229959247791702E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996820237413	WITHOUT_CLASSIFICATION	3.1797625869444104E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996820237413	WITHOUT_CLASSIFICATION	3.1797625869444104E-7	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999999595319046	WITHOUT_CLASSIFICATION	4.046809537771246E-8	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999997443265406	WITHOUT_CLASSIFICATION	2.556734593725956E-7	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999996840637726	WITHOUT_CLASSIFICATION	3.159362273885641E-7	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999951500840054	WITHOUT_CLASSIFICATION	4.84991599455294E-6	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999990413268487	WITHOUT_CLASSIFICATION	9.58673151229053E-7	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999996426697353	WITHOUT_CLASSIFICATION	3.5733026472954957E-7	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999969014371294	WITHOUT_CLASSIFICATION	3.0985628706495147E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999969014371294	WITHOUT_CLASSIFICATION	3.0985628706495147E-6	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999998951562606	WITHOUT_CLASSIFICATION	1.0484373928314494E-7	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9981911951675064	WITHOUT_CLASSIFICATION	0.0018088048324935303	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999996500359175	WITHOUT_CLASSIFICATION	3.4996408258180107E-7	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999996500359175	WITHOUT_CLASSIFICATION	3.4996408258180107E-7	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.99999816164964	WITHOUT_CLASSIFICATION	1.8383503601495265E-6	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9996469860926256	WITHOUT_CLASSIFICATION	3.530139073743785E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9996469860926256	WITHOUT_CLASSIFICATION	3.530139073743785E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999996533097786	WITHOUT_CLASSIFICATION	3.4669022148033507E-7	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999996533097786	WITHOUT_CLASSIFICATION	3.4669022148033507E-7	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999955610488369	WITHOUT_CLASSIFICATION	4.438951163099569E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999955610488369	WITHOUT_CLASSIFICATION	4.438951163099569E-6	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.999998519549045	WITHOUT_CLASSIFICATION	1.4804509550071345E-6	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.999999426979969	WITHOUT_CLASSIFICATION	5.730200310799366E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999996979460993	WITHOUT_CLASSIFICATION	3.0205390072331626E-7	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.999999469500138	WITHOUT_CLASSIFICATION	5.304998620868016E-7	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.999999990509163	WITHOUT_CLASSIFICATION	9.490837106439981E-9	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999998053028223	WITHOUT_CLASSIFICATION	1.946971777776242E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999988408224235	WITHOUT_CLASSIFICATION	1.1591775764522506E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999978398581968	WITHOUT_CLASSIFICATION	2.160141803235763E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999988408224235	WITHOUT_CLASSIFICATION	1.1591775764522506E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999992507712773	WITHOUT_CLASSIFICATION	7.492287226432809E-7	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999998780240229	WITHOUT_CLASSIFICATION	1.2197597707047063E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999999442229743	WITHOUT_CLASSIFICATION	5.5777025695416626E-8	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999923737177082	WITHOUT_CLASSIFICATION	7.626282291786319E-6	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999999670217184	WITHOUT_CLASSIFICATION	3.297828157289868E-8	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.999977675595182	WITHOUT_CLASSIFICATION	2.2324404817998166E-5	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999991591019257	WITHOUT_CLASSIFICATION	8.408980743017509E-7	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999997497880624	WITHOUT_CLASSIFICATION	2.50211937602759E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999994344642078	WITHOUT_CLASSIFICATION	5.65535792275473E-7	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.999999771148553	WITHOUT_CLASSIFICATION	2.2885144705197767E-7	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999998212987805	WITHOUT_CLASSIFICATION	1.787012194479006E-7	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999999755144993	WITHOUT_CLASSIFICATION	2.4485500742486395E-8	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999955180723803	WITHOUT_CLASSIFICATION	4.481927619624203E-6	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999998427821489	WITHOUT_CLASSIFICATION	1.572178510207301E-7	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999991587530691	WITHOUT_CLASSIFICATION	8.412469309298309E-7	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.999999978157989	WITHOUT_CLASSIFICATION	2.184201096831326E-8	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999979313877078	WITHOUT_CLASSIFICATION	2.0686122922195277E-6	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999998354015498	WITHOUT_CLASSIFICATION	1.6459845020750782E-7	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999997357675222	WITHOUT_CLASSIFICATION	2.6423247778929655E-7	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999996199915769	WITHOUT_CLASSIFICATION	3.800084230206474E-7	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999965112966431	WITHOUT_CLASSIFICATION	3.4887033568321667E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999905390051	WITHOUT_CLASSIFICATION	9.460994892445255E-9	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999997194005835	WITHOUT_CLASSIFICATION	2.805994164226713E-7	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.999992903227528	WITHOUT_CLASSIFICATION	7.096772471951906E-6	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999997870892894	WITHOUT_CLASSIFICATION	2.1291071066652795E-7	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999999868048872	WITHOUT_CLASSIFICATION	1.3195112733274549E-8	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999999992423989	WITHOUT_CLASSIFICATION	7.576011209749789E-10	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999999966064966	WITHOUT_CLASSIFICATION	3.3935034018800684E-9	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.999999862566291	WITHOUT_CLASSIFICATION	1.374337089921181E-7	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999999449378982	WITHOUT_CLASSIFICATION	5.506210182979114E-8	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.999999920717092	WITHOUT_CLASSIFICATION	7.928290805455068E-8	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999999974187308	WITHOUT_CLASSIFICATION	2.5812691260743007E-9	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999999646358709	WITHOUT_CLASSIFICATION	3.5364129112673325E-8	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999991403807552	WITHOUT_CLASSIFICATION	8.59619244788837E-7	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999984745543995	WITHOUT_CLASSIFICATION	1.5254456005093693E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999992511640828	WITHOUT_CLASSIFICATION	7.488359172030783E-7	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999999096015009	WITHOUT_CLASSIFICATION	9.039849917155019E-8	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999996694521955	WITHOUT_CLASSIFICATION	3.305478044927398E-7	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999999136113913	WITHOUT_CLASSIFICATION	8.638860863679985E-8	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999991874582149	WITHOUT_CLASSIFICATION	8.125417850172798E-7	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999999639341375	WITHOUT_CLASSIFICATION	3.606586252611699E-8	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999992752371297	WITHOUT_CLASSIFICATION	7.247628702264349E-7	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999999639094371	WITHOUT_CLASSIFICATION	3.60905628581888E-8	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999999564848207	WITHOUT_CLASSIFICATION	4.3515179286610165E-8	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.999999981500256	WITHOUT_CLASSIFICATION	1.849974405958992E-8	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999999879686212	WITHOUT_CLASSIFICATION	1.203137873814823E-8	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999999847584529	WITHOUT_CLASSIFICATION	1.5241547088929803E-8	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999998971982397	WITHOUT_CLASSIFICATION	1.0280176032671986E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999351728182	WITHOUT_CLASSIFICATION	6.482718182576471E-8	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999991640472753	WITHOUT_CLASSIFICATION	8.359527246594187E-7	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999994026330553	WITHOUT_CLASSIFICATION	5.973669446448586E-7	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999999663302752	WITHOUT_CLASSIFICATION	3.3669724820655555E-8	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.999770307902221	WITHOUT_CLASSIFICATION	2.2969209777899373E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999999366860711	WITHOUT_CLASSIFICATION	6.331392884718959E-8	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999923468275	WITHOUT_CLASSIFICATION	7.653172489063681E-9	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999923468275	WITHOUT_CLASSIFICATION	7.653172489063681E-9	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999991828363164	WITHOUT_CLASSIFICATION	8.171636835844313E-7	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999927817420585	WITHOUT_CLASSIFICATION	7.218257941489246E-6	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999983899185877	WITHOUT_CLASSIFICATION	1.6100814123448552E-6	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999983869699252	WITHOUT_CLASSIFICATION	1.613030074857129E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.999985078963816	WITHOUT_CLASSIFICATION	1.4921036183977184E-5	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999972682855773	WITHOUT_CLASSIFICATION	2.731714422677514E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999986025200084	WITHOUT_CLASSIFICATION	1.39747999165884E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999998989512846	WITHOUT_CLASSIFICATION	1.0104871543823497E-7	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.999999695152838	WITHOUT_CLASSIFICATION	3.0484716193951656E-7	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999996091217045	WITHOUT_CLASSIFICATION	3.908782955639081E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999966273201689	WITHOUT_CLASSIFICATION	3.3726798309929393E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999966273201689	WITHOUT_CLASSIFICATION	3.3726798309929393E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999993337898543	WITHOUT_CLASSIFICATION	6.662101456959882E-7	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999880950770758	WITHOUT_CLASSIFICATION	1.1904922924272318E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999787510726518	WITHOUT_CLASSIFICATION	2.124892734828409E-5	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999991984616122	WITHOUT_CLASSIFICATION	8.015383878718693E-7	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.999999563857414	WITHOUT_CLASSIFICATION	4.361425860917417E-7	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999999705068752	WITHOUT_CLASSIFICATION	2.949312480905242E-8	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999997384863292	WITHOUT_CLASSIFICATION	2.61513670727265E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999997698086861	WITHOUT_CLASSIFICATION	2.3019131388588134E-7	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.999999902742605	WITHOUT_CLASSIFICATION	9.725739504918245E-8	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999996931618573	WITHOUT_CLASSIFICATION	3.068381426225844E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.999999639413608	WITHOUT_CLASSIFICATION	3.6058639190815983E-7	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999999458001976	WITHOUT_CLASSIFICATION	5.419980232533926E-8	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999942451828342	WITHOUT_CLASSIFICATION	5.754817165790434E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999942451828342	WITHOUT_CLASSIFICATION	5.754817165790434E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999819373312723	WITHOUT_CLASSIFICATION	1.8062668727698614E-5	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999922342155438	WITHOUT_CLASSIFICATION	7.765784456162198E-6	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999883834905108	WITHOUT_CLASSIFICATION	1.161650948912783E-5	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999998329779608	WITHOUT_CLASSIFICATION	1.670220393012779E-7	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999997117985465	WITHOUT_CLASSIFICATION	2.8820145350711744E-7	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999997756104972	WITHOUT_CLASSIFICATION	2.2438950283389952E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999829722038523	WITHOUT_CLASSIFICATION	1.7027796147570685E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999996374981	WITHOUT_CLASSIFICATION	3.6250189996282524E-7	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9999725835753546	WITHOUT_CLASSIFICATION	2.741642464549476E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999999495270006	WITHOUT_CLASSIFICATION	5.04729994547229E-8	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999787510726518	WITHOUT_CLASSIFICATION	2.124892734828409E-5	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999951345095838	WITHOUT_CLASSIFICATION	4.865490416234441E-6	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999901288631127	WITHOUT_CLASSIFICATION	9.871136887284305E-6	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999999775915464	WITHOUT_CLASSIFICATION	2.2408453557606756E-8	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999999882301359	WITHOUT_CLASSIFICATION	1.1769864107482233E-8	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999999942496948	WITHOUT_CLASSIFICATION	5.7503052766362165E-9	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999924659973041	WITHOUT_CLASSIFICATION	7.534002695959858E-6	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999999384328635	WITHOUT_CLASSIFICATION	6.156713647385608E-8	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999990589804201	WITHOUT_CLASSIFICATION	9.410195798623809E-7	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999997382661421	WITHOUT_CLASSIFICATION	2.617338578855031E-7	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.999999063198392	WITHOUT_CLASSIFICATION	9.368016079133123E-7	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999987610925293	WITHOUT_CLASSIFICATION	1.2389074708150222E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999906294348198	WITHOUT_CLASSIFICATION	9.370565180294111E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999994562721557	WITHOUT_CLASSIFICATION	5.43727844264342E-7	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9998927639489706	WITHOUT_CLASSIFICATION	1.072360510293612E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999998922869568	WITHOUT_CLASSIFICATION	1.0771304320755285E-7	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.999999930166006	WITHOUT_CLASSIFICATION	6.983399399925729E-8	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999986173934319	WITHOUT_CLASSIFICATION	1.3826065682186383E-6	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999990711145094	WITHOUT_CLASSIFICATION	9.288854906815238E-7	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999947278474429	WITHOUT_CLASSIFICATION	5.2721525570307395E-6	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999989535628644	WITHOUT_CLASSIFICATION	1.046437135600007E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9999414505264905	WITHOUT_CLASSIFICATION	5.8549473509486725E-5	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999995672781483	WITHOUT_CLASSIFICATION	4.3272185171973376E-7	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999774676714134	WITHOUT_CLASSIFICATION	2.253232858655884E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9997364540948303	WITHOUT_CLASSIFICATION	2.635459051697679E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.999994773991852	WITHOUT_CLASSIFICATION	5.2260081480354195E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999999999286374	WITHOUT_CLASSIFICATION	7.136257098327445E-11	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999881891672878	WITHOUT_CLASSIFICATION	1.1810832712081323E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999994558246492	WITHOUT_CLASSIFICATION	5.441753507696518E-7	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999997029010227	WITHOUT_CLASSIFICATION	2.9709897735285447E-7	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999814466696293	WITHOUT_CLASSIFICATION	1.8553330370770122E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.99999762398728	WITHOUT_CLASSIFICATION	2.3760127200663817E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.99999762398728	WITHOUT_CLASSIFICATION	2.3760127200663817E-6	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999937477937727	WITHOUT_CLASSIFICATION	6.2522062272447E-6	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999944979360766	WITHOUT_CLASSIFICATION	5.502063923391129E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999999424645953	WITHOUT_CLASSIFICATION	5.7535404795444136E-8	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999926606271045	WITHOUT_CLASSIFICATION	7.3393728954916146E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999986313705607	WITHOUT_CLASSIFICATION	1.3686294393688243E-6	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999997661075094	WITHOUT_CLASSIFICATION	2.338924905410295E-7	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999989272386881	WITHOUT_CLASSIFICATION	1.0727613118413139E-6	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999995326920147	WITHOUT_CLASSIFICATION	4.6730798525919686E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999951334254343	WITHOUT_CLASSIFICATION	4.866574565699761E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.999999004439738	WITHOUT_CLASSIFICATION	9.955602619938784E-7	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999996443770036	WITHOUT_CLASSIFICATION	3.556229964546782E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.999999962694168	WITHOUT_CLASSIFICATION	3.7305831917004406E-8	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999900840016013	WITHOUT_CLASSIFICATION	9.915998398752463E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999959534447677	WITHOUT_CLASSIFICATION	4.0465552324176115E-6	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999988962182202	WITHOUT_CLASSIFICATION	1.1037817797746768E-6	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999981100879468	WITHOUT_CLASSIFICATION	1.8899120531307079E-6	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999618045840811	WITHOUT_CLASSIFICATION	3.8195415918896725E-5	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999999819383824	WITHOUT_CLASSIFICATION	1.8061617678536012E-8	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.999999925788855	WITHOUT_CLASSIFICATION	7.421114494321621E-8	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999914444848447	WITHOUT_CLASSIFICATION	8.555515155332436E-6	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999693562804	WITHOUT_CLASSIFICATION	3.0643719501059044E-8	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999693562804	WITHOUT_CLASSIFICATION	3.0643719501059044E-8	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.999999828636673	WITHOUT_CLASSIFICATION	1.713633269477072E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999999972666372	WITHOUT_CLASSIFICATION	2.7333626845145538E-9	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999959958370545	WITHOUT_CLASSIFICATION	4.004162945524679E-6	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999999111590585	WITHOUT_CLASSIFICATION	8.884094155132041E-8	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999999790452475	WITHOUT_CLASSIFICATION	2.095475241625717E-8	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999999545354414	WITHOUT_CLASSIFICATION	4.546455843095228E-8	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999995623707103	WITHOUT_CLASSIFICATION	4.37629289694901E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999982596778	WITHOUT_CLASSIFICATION	1.7403222258485323E-9	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999998091563025	WITHOUT_CLASSIFICATION	1.908436975932083E-7	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999999999942153	WITHOUT_CLASSIFICATION	5.784604066232725E-12	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999998985694247	WITHOUT_CLASSIFICATION	1.0143057523478874E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999058226103865	WITHOUT_CLASSIFICATION	9.417738961349055E-5	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.999999998287822	WITHOUT_CLASSIFICATION	1.7121779695565464E-9	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999986825643	WITHOUT_CLASSIFICATION	1.3174357368757024E-9	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.999999963128571	WITHOUT_CLASSIFICATION	3.6871429040384864E-8	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999765001599904	WITHOUT_CLASSIFICATION	2.3499840009553835E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999986150112569	WITHOUT_CLASSIFICATION	1.3849887430734179E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999997687751567	WITHOUT_CLASSIFICATION	2.312248432314564E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999843352435711	WITHOUT_CLASSIFICATION	1.566475642895081E-5	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999995560330688	WITHOUT_CLASSIFICATION	4.439669312714747E-7	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9999916504988681	WITHOUT_CLASSIFICATION	8.34950113195762E-6	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999975072720297	WITHOUT_CLASSIFICATION	2.492727970157067E-6	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999999407207443	WITHOUT_CLASSIFICATION	5.927925585987211E-8	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9099195361489539	WITHOUT_CLASSIFICATION	0.09008046385104608	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999943325823664	WITHOUT_CLASSIFICATION	5.6674176335893546E-6	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999976432036976	WITHOUT_CLASSIFICATION	2.35679630238697E-6	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999984356509158	WITHOUT_CLASSIFICATION	1.5643490841693134E-6	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999992986357052	WITHOUT_CLASSIFICATION	7.013642947549365E-7	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999980871268311	WITHOUT_CLASSIFICATION	1.9128731688422243E-6	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999992060289298	WITHOUT_CLASSIFICATION	7.939710701902465E-7	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999995342414858	WITHOUT_CLASSIFICATION	4.6575851416521755E-7	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999993626135388	WITHOUT_CLASSIFICATION	6.373864611339652E-7	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999998255689516	WITHOUT_CLASSIFICATION	1.7443104844565204E-7	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999967560558675	WITHOUT_CLASSIFICATION	3.2439441326010033E-6	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9999063449998085	WITHOUT_CLASSIFICATION	9.365500019157317E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9998704970481265	WITHOUT_CLASSIFICATION	1.29502951873552E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9996016872160846	WITHOUT_CLASSIFICATION	3.983127839154578E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999998647000268	WITHOUT_CLASSIFICATION	1.3529997315863856E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999975064801692	WITHOUT_CLASSIFICATION	2.4935198308227685E-6	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999994378672602	WITHOUT_CLASSIFICATION	5.621327398338865E-7	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999938000789869	WITHOUT_CLASSIFICATION	6.199921013091134E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999929919166226	WITHOUT_CLASSIFICATION	7.008083377440066E-6	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999989115899585	WITHOUT_CLASSIFICATION	1.0884100415560406E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999868170742615	WITHOUT_CLASSIFICATION	1.3182925738545437E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999867950587078	WITHOUT_CLASSIFICATION	1.3204941292113163E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999868170742615	WITHOUT_CLASSIFICATION	1.3182925738545437E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9874696991530301	WITHOUT_CLASSIFICATION	0.012530300846970046	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9999453301679868	WITHOUT_CLASSIFICATION	5.4669832013034553E-5	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999994258123522	WITHOUT_CLASSIFICATION	5.741876477759664E-7	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9546815016437011	WITHOUT_CLASSIFICATION	0.045318498356298885	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999879219055148	WITHOUT_CLASSIFICATION	1.2078094485311575E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999530615907	WITHOUT_CLASSIFICATION	4.693840933094502E-8	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999996253545065	WITHOUT_CLASSIFICATION	3.746454935295971E-7	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9998881008779177	WITHOUT_CLASSIFICATION	1.1189912208231704E-4	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999999335715526	WITHOUT_CLASSIFICATION	6.642844735207685E-8	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9809270884506073	WITHOUT_CLASSIFICATION	0.019072911549392713	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9993395548423709	WITHOUT_CLASSIFICATION	6.604451576291763E-4	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999999816679099	WITHOUT_CLASSIFICATION	1.833209002807696E-8	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999998569361814	WITHOUT_CLASSIFICATION	1.430638184897274E-7	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999979578428986	WITHOUT_CLASSIFICATION	2.042157101423867E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999979769056284	WITHOUT_CLASSIFICATION	2.0230943715766276E-6	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9996158052636599	WITHOUT_CLASSIFICATION	3.841947363402116E-4	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999919296753468	WITHOUT_CLASSIFICATION	8.070324653221204E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999891652144974	WITHOUT_CLASSIFICATION	1.0834785502542273E-5	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.999999344987166	WITHOUT_CLASSIFICATION	6.550128340268917E-7	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999984719082463	WITHOUT_CLASSIFICATION	1.5280917536841052E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999743171588112	WITHOUT_CLASSIFICATION	2.568284118875862E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999996854724754	WITHOUT_CLASSIFICATION	3.145275245890586E-7	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999871975348539	WITHOUT_CLASSIFICATION	1.2802465146047681E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999999005286391	WITHOUT_CLASSIFICATION	9.947136093447461E-8	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.999999783653952	WITHOUT_CLASSIFICATION	2.1634604803914964E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999877394758611	WITHOUT_CLASSIFICATION	1.226052413900709E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999905947919472	WITHOUT_CLASSIFICATION	9.40520805281556E-6	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999987595665544	WITHOUT_CLASSIFICATION	1.240433445621574E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999983976545438	WITHOUT_CLASSIFICATION	1.602345456233937E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999999538565089	WITHOUT_CLASSIFICATION	4.614349110128075E-8	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999923254562855	WITHOUT_CLASSIFICATION	7.674543714542395E-6	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.99998058745428	WITHOUT_CLASSIFICATION	1.9412545720121158E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999912262643099	WITHOUT_CLASSIFICATION	8.77373569007418E-6	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999998141082674	WITHOUT_CLASSIFICATION	1.8589173248585001E-7	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999999812788389	WITHOUT_CLASSIFICATION	1.8721161049454374E-8	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999998865800575	WITHOUT_CLASSIFICATION	1.1341994260710026E-7	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.999999547484428	WITHOUT_CLASSIFICATION	4.5251557196556944E-7	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999989617896	WITHOUT_CLASSIFICATION	1.0382103857608703E-9	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999998868798801	WITHOUT_CLASSIFICATION	1.1312011994502824E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999981396137546	WITHOUT_CLASSIFICATION	1.8603862453685358E-6	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999439513657464	WITHOUT_CLASSIFICATION	5.604863425351271E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999999642342774	WITHOUT_CLASSIFICATION	3.576572262226325E-8	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999999945583624	WITHOUT_CLASSIFICATION	5.441637506040351E-9	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999965283499546	WITHOUT_CLASSIFICATION	3.471650045463962E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999965283499546	WITHOUT_CLASSIFICATION	3.471650045463962E-6	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999996116639402	WITHOUT_CLASSIFICATION	3.883360597330506E-7	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999982623018147	WITHOUT_CLASSIFICATION	1.7376981853029521E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9980849309511607	WITHOUT_CLASSIFICATION	0.0019150690488392765	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999997337707972	WITHOUT_CLASSIFICATION	2.662292027647671E-7	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.999998988241783	WITHOUT_CLASSIFICATION	1.011758216999149E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.999999512113526	WITHOUT_CLASSIFICATION	4.878864738928516E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999991515699114	WITHOUT_CLASSIFICATION	8.484300886259182E-7	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999994865896158	WITHOUT_CLASSIFICATION	5.134103842630196E-7	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999972084459	WITHOUT_CLASSIFICATION	2.7915542158051394E-9	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999999959439279	WITHOUT_CLASSIFICATION	4.056072155721059E-9	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999999936510389	WITHOUT_CLASSIFICATION	6.34896119881859E-9	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999936714176353	WITHOUT_CLASSIFICATION	6.328582364708315E-6	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9996891677106806	WITHOUT_CLASSIFICATION	3.1083228931942127E-4	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999999681622416	WITHOUT_CLASSIFICATION	3.183775844168126E-8	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999999944459248	WITHOUT_CLASSIFICATION	5.5540751973722635E-9	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999999523383536	WITHOUT_CLASSIFICATION	4.7661646288926426E-8	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999999367285016	WITHOUT_CLASSIFICATION	6.327149845854077E-8	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999961408225027	WITHOUT_CLASSIFICATION	3.859177497339742E-6	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999996747427257	WITHOUT_CLASSIFICATION	3.25257274351452E-7	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999996077024199	WITHOUT_CLASSIFICATION	3.9229758012350635E-7	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.7506296709821393	WITHOUT_CLASSIFICATION	0.24937032901786066	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.7386684576615075	WITHOUT_CLASSIFICATION	0.26133154233849265	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999999829563044	WITHOUT_CLASSIFICATION	1.704369555749115E-8	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999999998362007	WITHOUT_CLASSIFICATION	1.6379940810239892E-10	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9997318396364164	WITHOUT_CLASSIFICATION	2.681603635836126E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999991849886	WITHOUT_CLASSIFICATION	8.150113805416893E-10	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999979988764448	WITHOUT_CLASSIFICATION	2.001123555109082E-6	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9998683115054681	WITHOUT_CLASSIFICATION	1.3168849453194827E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.999999074681292	WITHOUT_CLASSIFICATION	9.253187079364056E-7	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999955434194461	WITHOUT_CLASSIFICATION	4.456580554029183E-6	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999999540723147	WITHOUT_CLASSIFICATION	4.592768525238457E-8	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999985270626968	WITHOUT_CLASSIFICATION	1.4729373032783173E-6	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999999889615048	WITHOUT_CLASSIFICATION	1.1038495173756363E-8	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999996422035045	WITHOUT_CLASSIFICATION	3.5779649551986576E-7	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.999999960331871	WITHOUT_CLASSIFICATION	3.966812898410128E-8	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999999838679331	WITHOUT_CLASSIFICATION	1.6132066969685905E-8	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999980604448369	WITHOUT_CLASSIFICATION	1.939555163102909E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999925685290355	WITHOUT_CLASSIFICATION	7.4314709644789675E-6	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.999368459550541	WITHOUT_CLASSIFICATION	6.315404494590293E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999895745032353	WITHOUT_CLASSIFICATION	1.0425496764636489E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999983392126871	WITHOUT_CLASSIFICATION	1.6607873128891474E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9989849397551938	WITHOUT_CLASSIFICATION	0.001015060244806228	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999976693209488	WITHOUT_CLASSIFICATION	2.3306790512354704E-6	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.999999903401483	WITHOUT_CLASSIFICATION	9.659851699397867E-8	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999707589283744	WITHOUT_CLASSIFICATION	2.924107162569391E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999997046373017	WITHOUT_CLASSIFICATION	2.9536269828030995E-7	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999987281292212	WITHOUT_CLASSIFICATION	1.2718707788371817E-6	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999979999547709	WITHOUT_CLASSIFICATION	2.0000452290172477E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999887837782487	WITHOUT_CLASSIFICATION	1.121622175127512E-5	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999991233866465	WITHOUT_CLASSIFICATION	8.766133535685885E-7	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.999997622840284	WITHOUT_CLASSIFICATION	2.377159715889452E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999995284291916	WITHOUT_CLASSIFICATION	4.715708082883618E-7	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.999999983838694	WITHOUT_CLASSIFICATION	1.6161306032133922E-8	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.999999900251771	WITHOUT_CLASSIFICATION	9.974822906459128E-8	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999983747294399	WITHOUT_CLASSIFICATION	1.6252705601707981E-6	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999998109916032	WITHOUT_CLASSIFICATION	1.8900839685716913E-7	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.99999993213164	WITHOUT_CLASSIFICATION	6.786836000644647E-8	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999936604668521	WITHOUT_CLASSIFICATION	6.339533147862131E-6	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999980212089946	WITHOUT_CLASSIFICATION	1.9787910053822633E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999990547664111	WITHOUT_CLASSIFICATION	9.45233588897401E-6	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999999578135438	WITHOUT_CLASSIFICATION	4.218645626687674E-8	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.999999885329581	WITHOUT_CLASSIFICATION	1.1467041902873643E-7	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999999811499175	WITHOUT_CLASSIFICATION	1.8850082446324946E-8	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999996131635899	WITHOUT_CLASSIFICATION	3.8683641012458313E-7	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999999364085883	WITHOUT_CLASSIFICATION	6.359141169247203E-8	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999984075860582	WITHOUT_CLASSIFICATION	1.5924139417979017E-6	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999990584434	WITHOUT_CLASSIFICATION	9.415566000005997E-6	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999999941784627	WITHOUT_CLASSIFICATION	5.8215372679212035E-9	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999908371044669	WITHOUT_CLASSIFICATION	9.162895533121503E-6	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999982393482058	WITHOUT_CLASSIFICATION	1.7606517941640972E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999889790133785	WITHOUT_CLASSIFICATION	1.1020986621581024E-5	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999925752695991	WITHOUT_CLASSIFICATION	7.424730400948915E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999999084508309	WITHOUT_CLASSIFICATION	9.154916919763407E-8	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999875216812247	WITHOUT_CLASSIFICATION	1.2478318775311896E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9998187000249613	WITHOUT_CLASSIFICATION	1.812999750385743E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9998448818269361	WITHOUT_CLASSIFICATION	1.5511817306388165E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9997816360847848	WITHOUT_CLASSIFICATION	2.1836391521519544E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9998180134692037	WITHOUT_CLASSIFICATION	1.8198653079620932E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9997924749934782	WITHOUT_CLASSIFICATION	2.0752500652180666E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9996640529002594	WITHOUT_CLASSIFICATION	3.3594709974051626E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9997183993328973	WITHOUT_CLASSIFICATION	2.8160066710272426E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9998050819446374	WITHOUT_CLASSIFICATION	1.9491805536262205E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9998330657208175	WITHOUT_CLASSIFICATION	1.6693427918241727E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9997294210195927	WITHOUT_CLASSIFICATION	2.705789804073147E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9998206683720142	WITHOUT_CLASSIFICATION	1.7933162798579026E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9996440897216737	WITHOUT_CLASSIFICATION	3.5591027832624446E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9997362203484023	WITHOUT_CLASSIFICATION	2.6377965159774756E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9996192768300357	WITHOUT_CLASSIFICATION	3.80723169964338E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9997076261340458	WITHOUT_CLASSIFICATION	2.9237386595420473E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9995470750637521	WITHOUT_CLASSIFICATION	4.529249362479689E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9996788589755771	WITHOUT_CLASSIFICATION	3.2114102442291713E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9992985452724445	WITHOUT_CLASSIFICATION	7.014547275554298E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9997327364613953	WITHOUT_CLASSIFICATION	2.672635386047977E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999999786159721	WITHOUT_CLASSIFICATION	2.1384027827792068E-8	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999999942703722	WITHOUT_CLASSIFICATION	5.7296278415622874E-9	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999958452030464	WITHOUT_CLASSIFICATION	4.154796953598442E-6	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999998242422913	WITHOUT_CLASSIFICATION	1.757577087450202E-7	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9999009939665859	WITHOUT_CLASSIFICATION	9.900603341414849E-5	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999982929950987	WITHOUT_CLASSIFICATION	1.7070049012963948E-6	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999991829507514	WITHOUT_CLASSIFICATION	8.17049248523832E-7	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9987060805420546	WITHOUT_CLASSIFICATION	0.0012939194579454198	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999998868256587	WITHOUT_CLASSIFICATION	1.1317434130041863E-7	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999998929387908	WITHOUT_CLASSIFICATION	1.0706120913248271E-7	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.8388135641761439	WITHOUT_CLASSIFICATION	0.16118643582385606	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999997608140196	WITHOUT_CLASSIFICATION	2.3918598034010113E-7	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999988375471808	WITHOUT_CLASSIFICATION	1.1624528193061935E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999995721339304	WITHOUT_CLASSIFICATION	4.278660695695454E-7	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999995721339304	WITHOUT_CLASSIFICATION	4.278660695695454E-7	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999915864113464	WITHOUT_CLASSIFICATION	8.4135886535498E-6	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999961730616655	WITHOUT_CLASSIFICATION	3.826938334389786E-6	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999999907932946	WITHOUT_CLASSIFICATION	9.206705444660518E-9	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999980299350077	WITHOUT_CLASSIFICATION	1.9700649922176185E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999970199091628	WITHOUT_CLASSIFICATION	2.980090837324706E-6	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999964558280687	WITHOUT_CLASSIFICATION	3.544171931325912E-6	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999997106427078	WITHOUT_CLASSIFICATION	2.893572922971731E-7	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999999440580092	WITHOUT_CLASSIFICATION	5.59419909002586E-8	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999998563659308	WITHOUT_CLASSIFICATION	1.4363406916062065E-7	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999998994507703	WITHOUT_CLASSIFICATION	1.0054922966763304E-7	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999898879679052	WITHOUT_CLASSIFICATION	1.011203209489721E-5	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999999046935882	WITHOUT_CLASSIFICATION	9.530641176618666E-8	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999948864994759	WITHOUT_CLASSIFICATION	5.113500524094509E-6	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9999440549457173	WITHOUT_CLASSIFICATION	5.5945054282824553E-5	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999999334028706	WITHOUT_CLASSIFICATION	6.659712937509001E-8	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999991900302643	WITHOUT_CLASSIFICATION	8.099697357727949E-7	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999961716243984	WITHOUT_CLASSIFICATION	3.828375601667347E-6	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999999457084158	WITHOUT_CLASSIFICATION	5.429158417400179E-8	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9994626198062748	WITHOUT_CLASSIFICATION	5.37380193725214E-4	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999985050134013	WITHOUT_CLASSIFICATION	1.4949865987242676E-6	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999999412304494	WITHOUT_CLASSIFICATION	5.8769550482216524E-8	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999999449644809	WITHOUT_CLASSIFICATION	5.503551920433776E-8	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999993066033148	WITHOUT_CLASSIFICATION	6.933966852075716E-7	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999998073500133	WITHOUT_CLASSIFICATION	1.9264998668511233E-7	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.999986716251805	WITHOUT_CLASSIFICATION	1.3283748195061844E-5	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999995817680554	WITHOUT_CLASSIFICATION	4.1823194462006313E-7	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999999612606777	WITHOUT_CLASSIFICATION	3.8739322365017775E-8	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999999959575865	WITHOUT_CLASSIFICATION	4.04241350078011E-9	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999998751500536	WITHOUT_CLASSIFICATION	1.2484994646809174E-7	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999960887027347	WITHOUT_CLASSIFICATION	3.91129726530611E-6	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999997622167165	WITHOUT_CLASSIFICATION	2.3778328360138484E-7	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999773042014213	WITHOUT_CLASSIFICATION	2.2695798578677834E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999966735928436	WITHOUT_CLASSIFICATION	3.3264071564816057E-6	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999993732573513	WITHOUT_CLASSIFICATION	6.267426486541984E-7	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999914322253955	WITHOUT_CLASSIFICATION	8.567774604394178E-6	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999975938304562	WITHOUT_CLASSIFICATION	2.406169543900343E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999997183553598	WITHOUT_CLASSIFICATION	2.8164464019419884E-7	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999998594131846	WITHOUT_CLASSIFICATION	1.40586815374892E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999424527474917	WITHOUT_CLASSIFICATION	5.754725250828631E-5	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999999865962778	WITHOUT_CLASSIFICATION	1.3403722111984495E-8	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999967804177979	WITHOUT_CLASSIFICATION	3.219582202042925E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999970952113556	WITHOUT_CLASSIFICATION	2.904788644436557E-6	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999997298661113	WITHOUT_CLASSIFICATION	2.7013388873496204E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999995861587143	WITHOUT_CLASSIFICATION	4.138412856787888E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999995861587143	WITHOUT_CLASSIFICATION	4.138412856787888E-7	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.999973081130939	WITHOUT_CLASSIFICATION	2.6918869060973463E-5	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999973062974991	WITHOUT_CLASSIFICATION	2.6937025009976505E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999993791333511	WITHOUT_CLASSIFICATION	6.20866648769956E-7	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999998745252785	WITHOUT_CLASSIFICATION	1.2547472142481844E-7	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999972248039897	WITHOUT_CLASSIFICATION	2.775196010258299E-6	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999986370070421	WITHOUT_CLASSIFICATION	1.3629929580194E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999998243014	WITHOUT_CLASSIFICATION	1.7569854322994788E-10	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999354689132375	WITHOUT_CLASSIFICATION	6.453108676251953E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999881965248938	WITHOUT_CLASSIFICATION	1.1803475106093155E-5	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.999994988975622	WITHOUT_CLASSIFICATION	5.011024378057863E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999935863991122	WITHOUT_CLASSIFICATION	6.413600887806003E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999999273094096	WITHOUT_CLASSIFICATION	7.269059045760179E-8	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9999933315447503	WITHOUT_CLASSIFICATION	6.668455249645997E-6	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999990118046594	WITHOUT_CLASSIFICATION	9.881953405785548E-7	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9957549337266783	WITHOUT_CLASSIFICATION	0.004245066273321732	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999919400997316	WITHOUT_CLASSIFICATION	8.059900268442583E-6	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.999994303305538	WITHOUT_CLASSIFICATION	5.6966944620816485E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999995203973391	WITHOUT_CLASSIFICATION	4.796026608687516E-7	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.999994348278527	WITHOUT_CLASSIFICATION	5.651721473055064E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999946073912299	WITHOUT_CLASSIFICATION	5.392608770076493E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999941611969039	WITHOUT_CLASSIFICATION	5.838803096119542E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999941611969039	WITHOUT_CLASSIFICATION	5.838803096119542E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999804278012	WITHOUT_CLASSIFICATION	1.95721987221075E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999804278012	WITHOUT_CLASSIFICATION	1.95721987221075E-8	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999997600271797	WITHOUT_CLASSIFICATION	2.399728202691778E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999994157045439	WITHOUT_CLASSIFICATION	5.842954561106417E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999204867032734	WITHOUT_CLASSIFICATION	7.951329672670985E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999999607263182	WITHOUT_CLASSIFICATION	3.927368172336766E-8	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999996979460993	WITHOUT_CLASSIFICATION	3.0205390072331626E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999998818820969	WITHOUT_CLASSIFICATION	1.1811790313530678E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9872882876425592	WITHOUT_CLASSIFICATION	0.01271171235744077	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999995419930472	WITHOUT_CLASSIFICATION	4.5800695282135987E-7	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999999986313751	WITHOUT_CLASSIFICATION	1.3686249943332291E-9	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999763735436069	WITHOUT_CLASSIFICATION	2.3626456393108856E-5	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999996772546786	WITHOUT_CLASSIFICATION	3.22745321407966E-7	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999995173297482	WITHOUT_CLASSIFICATION	4.826702517709421E-7	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999998904640041	WITHOUT_CLASSIFICATION	1.0953599590378935E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9996861630915069	WITHOUT_CLASSIFICATION	3.138369084930686E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999999220343588	WITHOUT_CLASSIFICATION	7.796564120129065E-8	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999999646509498	WITHOUT_CLASSIFICATION	3.5349050212130975E-8	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999999664132032	WITHOUT_CLASSIFICATION	3.358679673983062E-8	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999999020111189	WITHOUT_CLASSIFICATION	9.798888104592931E-8	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.999995709838781	WITHOUT_CLASSIFICATION	4.290161218963963E-6	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999759544891164	WITHOUT_CLASSIFICATION	2.4045510883620264E-5	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999991947339252	WITHOUT_CLASSIFICATION	8.052660748296864E-7	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999999906549135	WITHOUT_CLASSIFICATION	9.345086393396799E-9	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999955360144089	WITHOUT_CLASSIFICATION	4.463985590999425E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999905947919472	WITHOUT_CLASSIFICATION	9.40520805281556E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.999999512113526	WITHOUT_CLASSIFICATION	4.878864738928516E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999998934074141	WITHOUT_CLASSIFICATION	1.0659258591187967E-7	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999896936180951	WITHOUT_CLASSIFICATION	1.0306381904968866E-5	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999995938345697	WITHOUT_CLASSIFICATION	4.0616543026441503E-7	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9996169913226998	WITHOUT_CLASSIFICATION	3.830086773002774E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999992915014815	WITHOUT_CLASSIFICATION	7.084985185393095E-7	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999992915014815	WITHOUT_CLASSIFICATION	7.084985185393095E-7	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999982553380063	WITHOUT_CLASSIFICATION	1.7446619935522599E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999979265798237	WITHOUT_CLASSIFICATION	2.0734201762902056E-6	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.999999919745623	WITHOUT_CLASSIFICATION	8.025437694530231E-8	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.99999979748833	WITHOUT_CLASSIFICATION	2.0251167012880552E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999904230433744	WITHOUT_CLASSIFICATION	9.576956625595426E-6	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999998927988843	WITHOUT_CLASSIFICATION	1.0720111567280588E-7	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999999528013657	WITHOUT_CLASSIFICATION	4.719863431823992E-8	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999999912655394	WITHOUT_CLASSIFICATION	8.734460568018595E-9	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999999978427632	WITHOUT_CLASSIFICATION	2.1572367946913774E-9	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999977163382786	WITHOUT_CLASSIFICATION	2.2836617214106045E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999999338232348	WITHOUT_CLASSIFICATION	6.617676522535029E-8	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999999883232846	WITHOUT_CLASSIFICATION	1.1676715348051155E-8	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.999999975085602	WITHOUT_CLASSIFICATION	2.4914398007826715E-8	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999959366916488	WITHOUT_CLASSIFICATION	4.0633083512767486E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999999178401165	WITHOUT_CLASSIFICATION	8.215988341328262E-8	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999988229144262	WITHOUT_CLASSIFICATION	1.1770855738584997E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.999917842886875	WITHOUT_CLASSIFICATION	8.215711312499225E-5	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999998775634243	WITHOUT_CLASSIFICATION	1.2243657567900598E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999993519557536	WITHOUT_CLASSIFICATION	6.480442462595368E-7	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9997989254601539	WITHOUT_CLASSIFICATION	2.01074539845999E-4	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999999325914253	WITHOUT_CLASSIFICATION	6.740857462780737E-8	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.999998347805733	WITHOUT_CLASSIFICATION	1.6521942669453675E-6	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999934103523075	WITHOUT_CLASSIFICATION	6.589647692540582E-6	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999995741090482	WITHOUT_CLASSIFICATION	4.258909518124818E-7	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999868451895578	WITHOUT_CLASSIFICATION	1.3154810442185426E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999980386788482	WITHOUT_CLASSIFICATION	1.9613211518682303E-6	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999995703361382	WITHOUT_CLASSIFICATION	4.296638617888956E-7	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.999930271564313	WITHOUT_CLASSIFICATION	6.972843568689736E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999999010258135	WITHOUT_CLASSIFICATION	9.897418642389802E-8	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.999989198917862	WITHOUT_CLASSIFICATION	1.0801082137986976E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999771151361067	WITHOUT_CLASSIFICATION	2.288486389341462E-5	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999993985367968	WITHOUT_CLASSIFICATION	6.014632032833932E-7	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999999610867251	WITHOUT_CLASSIFICATION	3.891327492534339E-8	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999938566486583	WITHOUT_CLASSIFICATION	6.143351341778844E-6	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999709849712375	WITHOUT_CLASSIFICATION	2.9015028762596796E-5	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999874901682723	WITHOUT_CLASSIFICATION	1.25098317276872E-5	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999965755450063	WITHOUT_CLASSIFICATION	3.424454993778621E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9994717747784021	WITHOUT_CLASSIFICATION	5.282252215978149E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999999170315137	WITHOUT_CLASSIFICATION	8.296848620427594E-8	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999992223202547	WITHOUT_CLASSIFICATION	7.776797451828859E-7	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999999757382368	WITHOUT_CLASSIFICATION	2.426176313006036E-8	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999974783393	WITHOUT_CLASSIFICATION	2.5216606905784624E-9	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999996523711623	WITHOUT_CLASSIFICATION	3.4762883778704725E-7	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999992950134046	WITHOUT_CLASSIFICATION	7.049865953821428E-7	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.999975813480791	WITHOUT_CLASSIFICATION	2.4186519208949965E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999997736993662	WITHOUT_CLASSIFICATION	2.263006338522266E-7	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999997803265678	WITHOUT_CLASSIFICATION	2.1967343226460917E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999997514727	WITHOUT_CLASSIFICATION	2.485272992723526E-10	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999999179528438	WITHOUT_CLASSIFICATION	8.204715607179804E-8	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999998290596589	WITHOUT_CLASSIFICATION	1.7094034106393006E-7	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.999973587371141	WITHOUT_CLASSIFICATION	2.6412628859041684E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999605944645241	WITHOUT_CLASSIFICATION	3.940553547583761E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999727210890436	WITHOUT_CLASSIFICATION	2.7278910956359843E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999721936532217	WITHOUT_CLASSIFICATION	2.780634677835004E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999946543588252	WITHOUT_CLASSIFICATION	5.345641174824487E-6	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999988688910567	WITHOUT_CLASSIFICATION	1.1311089433627228E-6	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999987711097043	WITHOUT_CLASSIFICATION	1.2288902957053576E-6	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999987208009021	WITHOUT_CLASSIFICATION	1.2791990979208925E-6	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999995357979936	WITHOUT_CLASSIFICATION	4.642020063772741E-7	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999986573845887	WITHOUT_CLASSIFICATION	1.3426154113359108E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999833564978373	WITHOUT_CLASSIFICATION	1.664350216267174E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.999973587371141	WITHOUT_CLASSIFICATION	2.6412628859041684E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999727210890436	WITHOUT_CLASSIFICATION	2.7278910956359843E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999605944645241	WITHOUT_CLASSIFICATION	3.940553547583761E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9999267788230773	WITHOUT_CLASSIFICATION	7.322117692268926E-5	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999943831431138	WITHOUT_CLASSIFICATION	5.616856886130683E-6	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.999998574140257	WITHOUT_CLASSIFICATION	1.4258597430334702E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999999524591779	WITHOUT_CLASSIFICATION	4.754082218122965E-8	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999995935196397	WITHOUT_CLASSIFICATION	4.0648036031072224E-7	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999999764427462	WITHOUT_CLASSIFICATION	2.3557253869819763E-8	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999995917412619	WITHOUT_CLASSIFICATION	4.0825873812163277E-7	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999999808667721	WITHOUT_CLASSIFICATION	1.9133227848204436E-8	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999989691378846	WITHOUT_CLASSIFICATION	1.0308621154633809E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999999558211851	WITHOUT_CLASSIFICATION	4.417881494953298E-8	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999999050444898	WITHOUT_CLASSIFICATION	9.495551024315862E-8	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9986704562945382	WITHOUT_CLASSIFICATION	0.0013295437054617405	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999997392031225	WITHOUT_CLASSIFICATION	2.6079687756034264E-7	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999999117083985	WITHOUT_CLASSIFICATION	8.829160144225396E-8	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999653047399472	WITHOUT_CLASSIFICATION	3.4695260052840636E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999997305638935	WITHOUT_CLASSIFICATION	2.694361066107856E-7	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999949644012135	WITHOUT_CLASSIFICATION	5.035598786600411E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999979112570404	WITHOUT_CLASSIFICATION	2.0887429596041053E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999979112570404	WITHOUT_CLASSIFICATION	2.0887429596041053E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.999999823410413	WITHOUT_CLASSIFICATION	1.7658958706756587E-7	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999999963449135	WITHOUT_CLASSIFICATION	3.655086414223979E-9	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999999745216386	WITHOUT_CLASSIFICATION	2.5478361330153727E-8	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999903336017222	WITHOUT_CLASSIFICATION	9.666398277874079E-6	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999998179325124	WITHOUT_CLASSIFICATION	1.82067487601849E-7	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999999991008159	WITHOUT_CLASSIFICATION	8.99184109628624E-10	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999999879568274	WITHOUT_CLASSIFICATION	1.2043172501183941E-8	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999998436095805	WITHOUT_CLASSIFICATION	1.5639041949661716E-7	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999999668120793	WITHOUT_CLASSIFICATION	3.318792069703175E-8	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999999610149933	WITHOUT_CLASSIFICATION	3.8985006550213064E-8	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999996772048867	WITHOUT_CLASSIFICATION	3.227951133983055E-7	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.999998658010067	WITHOUT_CLASSIFICATION	1.3419899329480807E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999979312088751	WITHOUT_CLASSIFICATION	2.068791124836058E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999918617602326	WITHOUT_CLASSIFICATION	8.138239767336894E-6	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999930868181247	WITHOUT_CLASSIFICATION	6.913181875290512E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999617308438	WITHOUT_CLASSIFICATION	3.8269156312206405E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999997255907057	WITHOUT_CLASSIFICATION	2.744092942886488E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901297836911	WITHOUT_CLASSIFICATION	9.870216308976279E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901297836911	WITHOUT_CLASSIFICATION	9.870216308976279E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999972224682196	WITHOUT_CLASSIFICATION	2.7775317803122724E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999973926398921	WITHOUT_CLASSIFICATION	2.6073601079768654E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999836444853227	WITHOUT_CLASSIFICATION	1.6355514677235504E-5	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999996218531169	WITHOUT_CLASSIFICATION	3.7814688305001915E-7	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999997561002988	WITHOUT_CLASSIFICATION	2.438997012377422E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901297836911	WITHOUT_CLASSIFICATION	9.870216308976279E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901297836911	WITHOUT_CLASSIFICATION	9.870216308976279E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999998995887	WITHOUT_CLASSIFICATION	1.004113203394656E-10	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999998995887	WITHOUT_CLASSIFICATION	1.004113203394656E-10	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999976827426186	WITHOUT_CLASSIFICATION	2.3172573813922717E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999994094124691	WITHOUT_CLASSIFICATION	5.905875308053249E-7	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999902918684184	WITHOUT_CLASSIFICATION	9.708131581563117E-6	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9996688770906171	WITHOUT_CLASSIFICATION	3.3112290938291326E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999735068876883	WITHOUT_CLASSIFICATION	2.6493112311749038E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999735068876883	WITHOUT_CLASSIFICATION	2.6493112311749038E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999999735161216	WITHOUT_CLASSIFICATION	2.648387843615619E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999689372825491	WITHOUT_CLASSIFICATION	3.106271745081468E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997677814304	WITHOUT_CLASSIFICATION	2.3221856957974108E-7	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999998630957195	WITHOUT_CLASSIFICATION	1.369042803566452E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999998965113	WITHOUT_CLASSIFICATION	1.034887430568607E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999564045655	WITHOUT_CLASSIFICATION	4.359543450668611E-8	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.999910699280402	WITHOUT_CLASSIFICATION	8.930071959808586E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999995455507023	WITHOUT_CLASSIFICATION	4.5444929774292104E-7	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999922838016331	WITHOUT_CLASSIFICATION	7.716198366972513E-6	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999999998895542	WITHOUT_CLASSIFICATION	1.104458147715096E-10	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9997883456275849	WITHOUT_CLASSIFICATION	2.1165437241503016E-4	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999999562963929	WITHOUT_CLASSIFICATION	4.37036070429188E-8	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999979102618527	WITHOUT_CLASSIFICATION	2.089738147325335E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999999810774424	WITHOUT_CLASSIFICATION	1.8922557634693422E-8	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999617308438	WITHOUT_CLASSIFICATION	3.8269156312206405E-8	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901297836911	WITHOUT_CLASSIFICATION	9.870216308976279E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999998995887	WITHOUT_CLASSIFICATION	1.004113203394656E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999564045655	WITHOUT_CLASSIFICATION	4.359543450668611E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999894853490077	WITHOUT_CLASSIFICATION	1.051465099239706E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999894853490077	WITHOUT_CLASSIFICATION	1.051465099239706E-5	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999984775997881	WITHOUT_CLASSIFICATION	1.5224002119100154E-6	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999998422299	WITHOUT_CLASSIFICATION	1.5777001302140693E-10	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999999968543187	WITHOUT_CLASSIFICATION	3.1456811387410364E-9	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999999546206707	WITHOUT_CLASSIFICATION	4.537932931373032E-8	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999992726003561	WITHOUT_CLASSIFICATION	7.273996439742352E-7	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999998923426112	WITHOUT_CLASSIFICATION	1.076573887565268E-7	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9999610729392575	WITHOUT_CLASSIFICATION	3.892706074253863E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999887325900193	WITHOUT_CLASSIFICATION	1.1267409980722634E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.99999999056403	WITHOUT_CLASSIFICATION	9.435969871790447E-9	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999909920227	WITHOUT_CLASSIFICATION	9.007977277087467E-9	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999998654545998	WITHOUT_CLASSIFICATION	1.3454540003120124E-7	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999939064337	WITHOUT_CLASSIFICATION	6.093566339850257E-9	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999975891116114	WITHOUT_CLASSIFICATION	2.4108883886887817E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999997255907057	WITHOUT_CLASSIFICATION	2.744092942886488E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999998995887	WITHOUT_CLASSIFICATION	1.004113203394656E-10	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999689372825491	WITHOUT_CLASSIFICATION	3.106271745081468E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997677814304	WITHOUT_CLASSIFICATION	2.3221856957974108E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997677814304	WITHOUT_CLASSIFICATION	2.3221856957974108E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999998965113	WITHOUT_CLASSIFICATION	1.034887430568607E-10	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999564045655	WITHOUT_CLASSIFICATION	4.359543450668611E-8	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999564045655	WITHOUT_CLASSIFICATION	4.359543450668611E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999894853490077	WITHOUT_CLASSIFICATION	1.051465099239706E-5	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999998980922657	WITHOUT_CLASSIFICATION	1.0190773425957054E-7	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999906951509028	WITHOUT_CLASSIFICATION	9.304849097195648E-6	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999997887836987	WITHOUT_CLASSIFICATION	2.1121630125347083E-7	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999908509319	WITHOUT_CLASSIFICATION	9.149068088221813E-9	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999977028802421	WITHOUT_CLASSIFICATION	2.2971197578701476E-6	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9998378197431008	WITHOUT_CLASSIFICATION	1.6218025689924926E-4	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999998984018179	WITHOUT_CLASSIFICATION	1.015981821233858E-7	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999999501293105	WITHOUT_CLASSIFICATION	4.9870689519067925E-8	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.999999995839911	WITHOUT_CLASSIFICATION	4.160089003696956E-9	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999689372825491	WITHOUT_CLASSIFICATION	3.106271745081468E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997677814304	WITHOUT_CLASSIFICATION	2.3221856957974108E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997677814304	WITHOUT_CLASSIFICATION	2.3221856957974108E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999998965113	WITHOUT_CLASSIFICATION	1.034887430568607E-10	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999887325900193	WITHOUT_CLASSIFICATION	1.1267409980722634E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999909920227	WITHOUT_CLASSIFICATION	9.007977277087467E-9	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999946298949146	WITHOUT_CLASSIFICATION	5.370105085428465E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999999198545446	WITHOUT_CLASSIFICATION	8.014545539643376E-8	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999989818767289	WITHOUT_CLASSIFICATION	1.0181232711512226E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999989818767289	WITHOUT_CLASSIFICATION	1.0181232711512226E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999979374522686	WITHOUT_CLASSIFICATION	2.0625477314560897E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999986775207533	WITHOUT_CLASSIFICATION	1.32247924661404E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.999999762411264	WITHOUT_CLASSIFICATION	2.3758873609037277E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999994554680137	WITHOUT_CLASSIFICATION	5.44531986238524E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999906694341	WITHOUT_CLASSIFICATION	9.330566010367619E-9	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999906694341	WITHOUT_CLASSIFICATION	9.330566010367619E-9	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999995687444185	WITHOUT_CLASSIFICATION	4.312555814598373E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999995687444185	WITHOUT_CLASSIFICATION	4.312555814598373E-7	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999424822293	WITHOUT_CLASSIFICATION	5.751777077173784E-8	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999424822293	WITHOUT_CLASSIFICATION	5.751777077173784E-8	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999996852038773	WITHOUT_CLASSIFICATION	3.1479612279851157E-7	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999888339859746	WITHOUT_CLASSIFICATION	1.1166014025330684E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999991748918394	WITHOUT_CLASSIFICATION	8.251081605013153E-7	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999990444072274	WITHOUT_CLASSIFICATION	9.555927726174115E-7	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999997525012035	WITHOUT_CLASSIFICATION	2.4749879640310757E-7	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999998285322641	WITHOUT_CLASSIFICATION	1.714677359485107E-7	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999998263230516	WITHOUT_CLASSIFICATION	1.7367694829172037E-7	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999999750985417	WITHOUT_CLASSIFICATION	2.490145831366577E-8	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999999259063355	WITHOUT_CLASSIFICATION	7.40936645598205E-8	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999995735229487	WITHOUT_CLASSIFICATION	4.264770513475507E-7	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999998742729377	WITHOUT_CLASSIFICATION	1.2572706240249927E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999991392481342	WITHOUT_CLASSIFICATION	8.607518657312697E-7	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999571633332592	WITHOUT_CLASSIFICATION	4.28366667408761E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999907631772863	WITHOUT_CLASSIFICATION	9.236822713630025E-6	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999907631772863	WITHOUT_CLASSIFICATION	9.236822713630025E-6	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.999998656859055	WITHOUT_CLASSIFICATION	1.3431409449954539E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999998818820969	WITHOUT_CLASSIFICATION	1.1811790313530678E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9998608203048938	WITHOUT_CLASSIFICATION	1.3917969510633788E-4	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999999740014428	WITHOUT_CLASSIFICATION	2.5998557163094428E-8	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999999820416922	WITHOUT_CLASSIFICATION	1.7958307795862138E-8	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999999650829087	WITHOUT_CLASSIFICATION	3.4917091290178804E-8	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999999538036973	WITHOUT_CLASSIFICATION	4.6196302680516715E-8	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999975614057249	WITHOUT_CLASSIFICATION	2.438594275033473E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999997783581791	WITHOUT_CLASSIFICATION	2.2164182084984804E-7	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999972123102785	WITHOUT_CLASSIFICATION	2.787689721513504E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999998888125974	WITHOUT_CLASSIFICATION	1.1118740264334282E-7	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9998172942450236	WITHOUT_CLASSIFICATION	1.827057549764074E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999998822767775	WITHOUT_CLASSIFICATION	1.1772322248531941E-7	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999999145795995	WITHOUT_CLASSIFICATION	8.542040055112006E-8	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999975634208419	WITHOUT_CLASSIFICATION	2.436579157994055E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999990467684909	WITHOUT_CLASSIFICATION	9.532315091181279E-7	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999882365992875	WITHOUT_CLASSIFICATION	1.176340071258489E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999999932284382	WITHOUT_CLASSIFICATION	6.771561738806227E-9	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999999193316543	WITHOUT_CLASSIFICATION	8.066834574218976E-8	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999999193316543	WITHOUT_CLASSIFICATION	8.066834574218976E-8	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999992552469154	WITHOUT_CLASSIFICATION	7.447530845873663E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999992753151736	WITHOUT_CLASSIFICATION	7.246848263047834E-7	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999737419956324	WITHOUT_CLASSIFICATION	2.6258004367581754E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999737419956324	WITHOUT_CLASSIFICATION	2.6258004367581754E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999985011567064	WITHOUT_CLASSIFICATION	1.4988432935203272E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.999998892827892	WITHOUT_CLASSIFICATION	1.1071721079411945E-6	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999974110815915	WITHOUT_CLASSIFICATION	2.5889184084710276E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999945820123257	WITHOUT_CLASSIFICATION	5.41798767432318E-6	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999996617502	WITHOUT_CLASSIFICATION	3.382497999015621E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.999999672330644	WITHOUT_CLASSIFICATION	3.276693559272901E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.999999672330644	WITHOUT_CLASSIFICATION	3.276693559272901E-7	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999995357814215	WITHOUT_CLASSIFICATION	4.642185784944463E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.999999803134203	WITHOUT_CLASSIFICATION	1.9686579698671872E-7	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999998513853965	WITHOUT_CLASSIFICATION	1.4861460352811467E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999995551617252	WITHOUT_CLASSIFICATION	4.448382747801325E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999992753151736	WITHOUT_CLASSIFICATION	7.246848263047834E-7	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999986616009052	WITHOUT_CLASSIFICATION	1.338399094780363E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.999998093913572	WITHOUT_CLASSIFICATION	1.906086427971228E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.999998093913572	WITHOUT_CLASSIFICATION	1.906086427971228E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994620762058	WITHOUT_CLASSIFICATION	5.3792379412935E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999969783192	WITHOUT_CLASSIFICATION	3.021680873705101E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999969783192	WITHOUT_CLASSIFICATION	3.021680873705101E-9	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999981844702848	WITHOUT_CLASSIFICATION	1.815529715302576E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999981844702848	WITHOUT_CLASSIFICATION	1.815529715302576E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999981844702848	WITHOUT_CLASSIFICATION	1.815529715302576E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999969783192	WITHOUT_CLASSIFICATION	3.021680873705101E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999969783192	WITHOUT_CLASSIFICATION	3.021680873705101E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994620762058	WITHOUT_CLASSIFICATION	5.3792379412935E-7	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999998559677821	WITHOUT_CLASSIFICATION	1.4403221785452585E-7	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999967027404204	WITHOUT_CLASSIFICATION	3.297259579670244E-6	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.999983120299669	WITHOUT_CLASSIFICATION	1.6879700331009143E-5	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999993034961231	WITHOUT_CLASSIFICATION	6.965038770100354E-7	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999993308944036	WITHOUT_CLASSIFICATION	6.691055964109961E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999998928963726	WITHOUT_CLASSIFICATION	1.0710362734447619E-7	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999999938303668	WITHOUT_CLASSIFICATION	6.169633305389353E-9	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999959276685471	WITHOUT_CLASSIFICATION	4.0723314529676065E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999998888125974	WITHOUT_CLASSIFICATION	1.1118740264334282E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999969783192	WITHOUT_CLASSIFICATION	3.021680873705101E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999969783192	WITHOUT_CLASSIFICATION	3.021680873705101E-9	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999999265020795	WITHOUT_CLASSIFICATION	7.349792051844523E-8	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.999998221741771	WITHOUT_CLASSIFICATION	1.7782582291035207E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999998488977232	WITHOUT_CLASSIFICATION	1.5110227686923066E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9997973856954054	WITHOUT_CLASSIFICATION	2.0261430459461371E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999999593744385	WITHOUT_CLASSIFICATION	4.062556151724565E-8	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999996251150836	WITHOUT_CLASSIFICATION	3.7488491651926325E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999999810923343	WITHOUT_CLASSIFICATION	1.8907665692957613E-8	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999996328013383	WITHOUT_CLASSIFICATION	3.671986617690476E-7	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999999567450872	WITHOUT_CLASSIFICATION	4.325491276065383E-8	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999663113897124	WITHOUT_CLASSIFICATION	3.368861028767426E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999935450676576	WITHOUT_CLASSIFICATION	6.4549323424866946E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999999859613131	WITHOUT_CLASSIFICATION	1.4038686903996127E-7	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999989173156254	WITHOUT_CLASSIFICATION	1.0826843746443654E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999776592725	WITHOUT_CLASSIFICATION	2.234072749200242E-8	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999999998623954	WITHOUT_CLASSIFICATION	1.3760457059335207E-10	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999998846193009	WITHOUT_CLASSIFICATION	1.1538069909852063E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999998846193009	WITHOUT_CLASSIFICATION	1.1538069909852063E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999998846193009	WITHOUT_CLASSIFICATION	1.1538069909852063E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999999120307606	WITHOUT_CLASSIFICATION	8.796923952711815E-8	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999995987551477	WITHOUT_CLASSIFICATION	4.0124485227345335E-7	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999999501015236	WITHOUT_CLASSIFICATION	4.9898476340528157E-8	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.999880974546457	WITHOUT_CLASSIFICATION	1.1902545354307082E-4	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.99999999269479	WITHOUT_CLASSIFICATION	7.305210050140351E-9	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999999905974846	WITHOUT_CLASSIFICATION	9.402515334027194E-9	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999999969827	WITHOUT_CLASSIFICATION	3.0171454197367254E-12	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999999789023934	WITHOUT_CLASSIFICATION	2.1097606568413402E-8	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999999928570944	WITHOUT_CLASSIFICATION	7.14290555804212E-9	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.999999207126847	WITHOUT_CLASSIFICATION	7.928731529145915E-7	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999881951071663	WITHOUT_CLASSIFICATION	1.1804892833695457E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9999623901764931	WITHOUT_CLASSIFICATION	3.760982350693274E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999995357814215	WITHOUT_CLASSIFICATION	4.642185784944463E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999969783192	WITHOUT_CLASSIFICATION	3.021680873705101E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999969783192	WITHOUT_CLASSIFICATION	3.021680873705101E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994620762058	WITHOUT_CLASSIFICATION	5.3792379412935E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999998928963726	WITHOUT_CLASSIFICATION	1.0710362734447619E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.999998221741771	WITHOUT_CLASSIFICATION	1.7782582291035207E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9997973856954054	WITHOUT_CLASSIFICATION	2.0261430459461371E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999996251150836	WITHOUT_CLASSIFICATION	3.7488491651926325E-7	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999998488977232	WITHOUT_CLASSIFICATION	1.5110227686923066E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999999810923343	WITHOUT_CLASSIFICATION	1.8907665692957613E-8	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999663113897124	WITHOUT_CLASSIFICATION	3.368861028767426E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999999567450872	WITHOUT_CLASSIFICATION	4.325491276065383E-8	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999999859613131	WITHOUT_CLASSIFICATION	1.4038686903996127E-7	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999992492625162	WITHOUT_CLASSIFICATION	7.507374837318119E-7	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999941950960801	WITHOUT_CLASSIFICATION	5.80490391988459E-6	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999972020438668	WITHOUT_CLASSIFICATION	2.7979561332664505E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999999222899906	WITHOUT_CLASSIFICATION	7.771000936442876E-8	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.999999511587497	WITHOUT_CLASSIFICATION	4.884125030407081E-7	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999990998297819	WITHOUT_CLASSIFICATION	9.00170218139251E-7	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999952557858796	WITHOUT_CLASSIFICATION	4.744214120447916E-6	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9998613589876125	WITHOUT_CLASSIFICATION	1.386410123875475E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999727635056778	WITHOUT_CLASSIFICATION	2.7236494322226654E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999995019812367	WITHOUT_CLASSIFICATION	4.980187633457631E-7	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999998851463413	WITHOUT_CLASSIFICATION	1.1485365864447496E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999928954006	WITHOUT_CLASSIFICATION	7.104599283627758E-9	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999724508842	WITHOUT_CLASSIFICATION	2.754911567121225E-8	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999995407486026	WITHOUT_CLASSIFICATION	4.5925139741224016E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999938972223327	WITHOUT_CLASSIFICATION	6.10277766731186E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999457630843	WITHOUT_CLASSIFICATION	5.423691580276269E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999997385452253	WITHOUT_CLASSIFICATION	2.6145477476285884E-7	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.999998571280716	WITHOUT_CLASSIFICATION	1.4287192839375597E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999990887776081	WITHOUT_CLASSIFICATION	9.1122239175327E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999987770144648	WITHOUT_CLASSIFICATION	1.2229855352442607E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999440049765	WITHOUT_CLASSIFICATION	5.599502349495713E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999990057401467	WITHOUT_CLASSIFICATION	9.942598533073244E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999990057401467	WITHOUT_CLASSIFICATION	9.942598533073244E-7	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999787577934891	WITHOUT_CLASSIFICATION	2.1242206510828834E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999949296985	WITHOUT_CLASSIFICATION	5.0703015239025065E-9	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999147909900405	WITHOUT_CLASSIFICATION	8.520900995949402E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999147909900405	WITHOUT_CLASSIFICATION	8.520900995949402E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999147909900405	WITHOUT_CLASSIFICATION	8.520900995949402E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999943330435705	WITHOUT_CLASSIFICATION	5.6669564294947116E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999943330435705	WITHOUT_CLASSIFICATION	5.6669564294947116E-5	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9999047366513181	WITHOUT_CLASSIFICATION	9.526334868195843E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999725506518249	WITHOUT_CLASSIFICATION	2.744934817518165E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999949296985	WITHOUT_CLASSIFICATION	5.0703015239025065E-9	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999994620720549	WITHOUT_CLASSIFICATION	5.379279451520238E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999147909900405	WITHOUT_CLASSIFICATION	8.520900995949402E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999147909900405	WITHOUT_CLASSIFICATION	8.520900995949402E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999943330435705	WITHOUT_CLASSIFICATION	5.6669564294947116E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999725506518249	WITHOUT_CLASSIFICATION	2.744934817518165E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999993041471525	WITHOUT_CLASSIFICATION	6.958528475073644E-7	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999993041471525	WITHOUT_CLASSIFICATION	6.958528475073644E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999996914935647	WITHOUT_CLASSIFICATION	3.085064352722025E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999996914935647	WITHOUT_CLASSIFICATION	3.085064352722025E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999990585692671	WITHOUT_CLASSIFICATION	9.414307329167907E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999990585692671	WITHOUT_CLASSIFICATION	9.414307329167907E-7	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999972492065012	WITHOUT_CLASSIFICATION	2.750793498663672E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999987226080089	WITHOUT_CLASSIFICATION	1.277391991122999E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999987226080089	WITHOUT_CLASSIFICATION	1.277391991122999E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.999999456194844	WITHOUT_CLASSIFICATION	5.438051559449034E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.999999456194844	WITHOUT_CLASSIFICATION	5.438051559449034E-7	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999999571200215	WITHOUT_CLASSIFICATION	4.287997836925354E-8	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999996469746002	WITHOUT_CLASSIFICATION	3.530253997836709E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999996469746002	WITHOUT_CLASSIFICATION	3.530253997836709E-7	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999991892048169	WITHOUT_CLASSIFICATION	8.107951831287203E-7	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999909774771655	WITHOUT_CLASSIFICATION	9.022522834451793E-6	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999990761545167	WITHOUT_CLASSIFICATION	9.238454833740144E-7	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999991892048169	WITHOUT_CLASSIFICATION	8.107951831287203E-7	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999961295850478	WITHOUT_CLASSIFICATION	3.870414952283208E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994978088048	WITHOUT_CLASSIFICATION	5.021911951415427E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994978088048	WITHOUT_CLASSIFICATION	5.021911951415427E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994978088048	WITHOUT_CLASSIFICATION	5.021911951415427E-7	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999998202382718	WITHOUT_CLASSIFICATION	1.7976172808753097E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999998098741145	WITHOUT_CLASSIFICATION	1.9012588548898203E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999988698489068	WITHOUT_CLASSIFICATION	1.1301510931146382E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999988698489068	WITHOUT_CLASSIFICATION	1.1301510931146382E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999945724164	WITHOUT_CLASSIFICATION	5.427583655464171E-9	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999942618711	WITHOUT_CLASSIFICATION	5.738128857169135E-9	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999933918922	WITHOUT_CLASSIFICATION	6.6081078419870575E-9	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999999746779553	WITHOUT_CLASSIFICATION	2.532204466194597E-8	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999998627889989	WITHOUT_CLASSIFICATION	1.3721100119303415E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999993218185653	WITHOUT_CLASSIFICATION	6.781814346717087E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999993218185653	WITHOUT_CLASSIFICATION	6.781814346717087E-7	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999994984268795	WITHOUT_CLASSIFICATION	5.015731204219429E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999350127265951	WITHOUT_CLASSIFICATION	6.498727340493241E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999350127265951	WITHOUT_CLASSIFICATION	6.498727340493241E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994978088048	WITHOUT_CLASSIFICATION	5.021911951415427E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999998098741145	WITHOUT_CLASSIFICATION	1.9012588548898203E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999988698489068	WITHOUT_CLASSIFICATION	1.1301510931146382E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999945724164	WITHOUT_CLASSIFICATION	5.427583655464171E-9	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999942618711	WITHOUT_CLASSIFICATION	5.738128857169135E-9	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999933918922	WITHOUT_CLASSIFICATION	6.6081078419870575E-9	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999999746779553	WITHOUT_CLASSIFICATION	2.532204466194597E-8	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999350127265951	WITHOUT_CLASSIFICATION	6.498727340493241E-5	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999992148138931	WITHOUT_CLASSIFICATION	7.851861068400427E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999989958429453	WITHOUT_CLASSIFICATION	1.0041570546842333E-6	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999987375712545	WITHOUT_CLASSIFICATION	1.2624287456278705E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999999473177538	WITHOUT_CLASSIFICATION	5.2682246128242205E-8	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999988042269071	WITHOUT_CLASSIFICATION	1.1957730928524847E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999993353144072	WITHOUT_CLASSIFICATION	6.646855927467819E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999996689378787	WITHOUT_CLASSIFICATION	3.3106212127875703E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999996689378787	WITHOUT_CLASSIFICATION	3.3106212127875703E-7	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999953005389242	WITHOUT_CLASSIFICATION	4.699461075888058E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999958092500493	WITHOUT_CLASSIFICATION	4.190749950704327E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999846295930213	WITHOUT_CLASSIFICATION	1.5370406978704484E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.999999103915555	WITHOUT_CLASSIFICATION	8.960844449693195E-7	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999886535609975	WITHOUT_CLASSIFICATION	1.1346439002442586E-5	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999886535609975	WITHOUT_CLASSIFICATION	1.1346439002442586E-5	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999997407150317	WITHOUT_CLASSIFICATION	2.592849681825783E-7	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999996827444572	WITHOUT_CLASSIFICATION	3.1725554283515294E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999999612998057	WITHOUT_CLASSIFICATION	3.870019431215818E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999999612998057	WITHOUT_CLASSIFICATION	3.870019431215818E-7	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999983094145025	WITHOUT_CLASSIFICATION	1.6905854975111145E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999972885656269	WITHOUT_CLASSIFICATION	2.7114343731264015E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999998627889989	WITHOUT_CLASSIFICATION	1.3721100119303415E-7	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999995987252085	WITHOUT_CLASSIFICATION	4.0127479153810077E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999999558740698	WITHOUT_CLASSIFICATION	4.412593019159449E-8	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999996511556599	WITHOUT_CLASSIFICATION	3.488443400853247E-7	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999998308323039	WITHOUT_CLASSIFICATION	1.6916769605530445E-7	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999969503065855	WITHOUT_CLASSIFICATION	3.0496934145726674E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999993494886904	WITHOUT_CLASSIFICATION	6.505113094979063E-7	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999987466576188	WITHOUT_CLASSIFICATION	1.2533423812107766E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999999996168811	WITHOUT_CLASSIFICATION	3.83118878237381E-10	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999812418119	WITHOUT_CLASSIFICATION	1.875818807328516E-8	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999812418119	WITHOUT_CLASSIFICATION	1.875818807328516E-8	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998923236544	WITHOUT_CLASSIFICATION	1.0767634564438496E-7	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998923236544	WITHOUT_CLASSIFICATION	1.0767634564438496E-7	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999999769594324	WITHOUT_CLASSIFICATION	2.304056766157395E-8	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999619605489718	WITHOUT_CLASSIFICATION	3.8039451028237524E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999619605489718	WITHOUT_CLASSIFICATION	3.8039451028237524E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999619605489718	WITHOUT_CLASSIFICATION	3.8039451028237524E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998992490351	WITHOUT_CLASSIFICATION	1.0075096489615738E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999998647352499	WITHOUT_CLASSIFICATION	1.35264750160326E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999998647352499	WITHOUT_CLASSIFICATION	1.35264750160326E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999997740802017	WITHOUT_CLASSIFICATION	2.2591979827222547E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9998904491420363	WITHOUT_CLASSIFICATION	1.0955085796367694E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999998496925135	WITHOUT_CLASSIFICATION	1.5030748643247299E-7	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999999926310051	WITHOUT_CLASSIFICATION	7.3689947364927085E-9	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999607782719558	WITHOUT_CLASSIFICATION	3.922172804411634E-5	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999991427699652	WITHOUT_CLASSIFICATION	8.572300348425457E-7	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999813359080398	WITHOUT_CLASSIFICATION	1.8664091960185624E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999724508842	WITHOUT_CLASSIFICATION	2.754911567121225E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999724508842	WITHOUT_CLASSIFICATION	2.754911567121225E-8	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998992490351	WITHOUT_CLASSIFICATION	1.0075096489615738E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999997740802017	WITHOUT_CLASSIFICATION	2.2591979827222547E-7	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999999377516503	WITHOUT_CLASSIFICATION	6.224834964151982E-8	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9998904491420363	WITHOUT_CLASSIFICATION	1.0955085796367694E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999998496925135	WITHOUT_CLASSIFICATION	1.5030748643247299E-7	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999999148154048	WITHOUT_CLASSIFICATION	8.518459517627947E-8	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999999006050189	WITHOUT_CLASSIFICATION	9.939498122350244E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999864685712	WITHOUT_CLASSIFICATION	1.3531428682986799E-8	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.999987452887897	WITHOUT_CLASSIFICATION	1.2547112102894622E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999960671920125	WITHOUT_CLASSIFICATION	3.932807987450744E-6	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999998329826362	WITHOUT_CLASSIFICATION	1.6701736375698052E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999984563976008	WITHOUT_CLASSIFICATION	1.5436023992772841E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999999148154048	WITHOUT_CLASSIFICATION	8.518459517627947E-8	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.99999737584512	WITHOUT_CLASSIFICATION	2.624154879847928E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.99999737584512	WITHOUT_CLASSIFICATION	2.624154879847928E-6	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999976358482244	WITHOUT_CLASSIFICATION	2.364151775580703E-6	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999960642285838	WITHOUT_CLASSIFICATION	3.935771416189928E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999770928323117	WITHOUT_CLASSIFICATION	2.290716768820654E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999985185786411	WITHOUT_CLASSIFICATION	1.4814213589551939E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999997348486186	WITHOUT_CLASSIFICATION	2.6515138149366784E-7	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999999992567696	WITHOUT_CLASSIFICATION	7.432303948499772E-10	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999998158300619	WITHOUT_CLASSIFICATION	1.8416993814464512E-7	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999993397371566	WITHOUT_CLASSIFICATION	6.602628433506245E-7	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999998601794158	WITHOUT_CLASSIFICATION	1.3982058426457007E-7	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999996976720282	WITHOUT_CLASSIFICATION	3.0232797177515016E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999996894358584	WITHOUT_CLASSIFICATION	3.1056414167083033E-7	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999985185786411	WITHOUT_CLASSIFICATION	1.4814213589551939E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999997348486186	WITHOUT_CLASSIFICATION	2.6515138149366784E-7	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999962267551195	WITHOUT_CLASSIFICATION	3.773244880508464E-6	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999999154227585	WITHOUT_CLASSIFICATION	8.457724149212186E-8	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999994313607654	WITHOUT_CLASSIFICATION	5.686392346178285E-7	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.999997972260395	WITHOUT_CLASSIFICATION	2.0277396049655813E-6	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999998573275669	WITHOUT_CLASSIFICATION	1.4267243319967315E-7	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.999978540195921	WITHOUT_CLASSIFICATION	2.1459804078984343E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999770052924302	WITHOUT_CLASSIFICATION	2.29947075697455E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999998122156476	WITHOUT_CLASSIFICATION	1.8778435239249552E-7	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999988154174899	WITHOUT_CLASSIFICATION	1.1845825100617272E-6	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999997622128971	WITHOUT_CLASSIFICATION	2.3778710284217022E-7	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999925173174457	WITHOUT_CLASSIFICATION	7.482682554308733E-6	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999996254356895	WITHOUT_CLASSIFICATION	3.7456431048403936E-7	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999991118701504	WITHOUT_CLASSIFICATION	8.881298496351745E-7	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999996649198918	WITHOUT_CLASSIFICATION	3.350801081813815E-7	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999536187154685	WITHOUT_CLASSIFICATION	4.6381284531561285E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999990815965327	WITHOUT_CLASSIFICATION	9.184034672505517E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.999980837330194	WITHOUT_CLASSIFICATION	1.9162669806026314E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999880495786	WITHOUT_CLASSIFICATION	1.1950421544179567E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999838447341	WITHOUT_CLASSIFICATION	1.6155265950746397E-8	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999995748668011	WITHOUT_CLASSIFICATION	4.251331988732821E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.999980837330194	WITHOUT_CLASSIFICATION	1.9162669806026314E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999880495786	WITHOUT_CLASSIFICATION	1.1950421544179567E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999838447341	WITHOUT_CLASSIFICATION	1.6155265950746397E-8	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999944666147269	WITHOUT_CLASSIFICATION	5.533385273087149E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999979152000165	WITHOUT_CLASSIFICATION	2.084799983562057E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999963467830294	WITHOUT_CLASSIFICATION	3.6532169705958466E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.999976494264935	WITHOUT_CLASSIFICATION	2.350573506506967E-5	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9996456123327562	WITHOUT_CLASSIFICATION	3.5438766724384645E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999946294052038	WITHOUT_CLASSIFICATION	5.370594796160875E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999159501639232	WITHOUT_CLASSIFICATION	8.404983607682066E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999999985774863	WITHOUT_CLASSIFICATION	1.4225135852058774E-9	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999997537583848	WITHOUT_CLASSIFICATION	2.4624161525562385E-7	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999997865014392	WITHOUT_CLASSIFICATION	2.134985608220102E-7	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9654606915136708	WITHOUT_CLASSIFICATION	0.03453930848632927	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999999841098481	WITHOUT_CLASSIFICATION	1.5890151823628345E-8	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999997581505929	WITHOUT_CLASSIFICATION	2.418494070416485E-7	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.999999970969894	WITHOUT_CLASSIFICATION	2.9030106061730623E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999997856501706	WITHOUT_CLASSIFICATION	2.1434982942723513E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999999255958687	WITHOUT_CLASSIFICATION	7.440413128282517E-8	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.999997558177501	WITHOUT_CLASSIFICATION	2.441822498939721E-6	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999918514770382	WITHOUT_CLASSIFICATION	8.148522961915892E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999871180875	WITHOUT_CLASSIFICATION	1.2881912568322224E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999910721108	WITHOUT_CLASSIFICATION	8.927889299154196E-9	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999992510399747	WITHOUT_CLASSIFICATION	7.489600252615539E-7	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999994425485556	WITHOUT_CLASSIFICATION	5.574514444955433E-7	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999994425485556	WITHOUT_CLASSIFICATION	5.574514444955433E-7	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999994666809549	WITHOUT_CLASSIFICATION	5.333190450965135E-7	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999994666809549	WITHOUT_CLASSIFICATION	5.333190450965135E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999956949706	WITHOUT_CLASSIFICATION	4.3050295446521655E-9	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999956949706	WITHOUT_CLASSIFICATION	4.3050295446521655E-9	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999975035957	WITHOUT_CLASSIFICATION	2.496404399156419E-9	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999989922851	WITHOUT_CLASSIFICATION	1.0077149148093662E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.999999918383087	WITHOUT_CLASSIFICATION	8.161691305416828E-8	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999981063805	WITHOUT_CLASSIFICATION	1.8936194030198347E-9	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999987781126	WITHOUT_CLASSIFICATION	1.2218873528793876E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.999999998753714	WITHOUT_CLASSIFICATION	1.2462860514307723E-9	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999999888887801	WITHOUT_CLASSIFICATION	1.1111219989087845E-8	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999999530636576	WITHOUT_CLASSIFICATION	4.6936342490010685E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999724508842	WITHOUT_CLASSIFICATION	2.754911567121225E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999975035957	WITHOUT_CLASSIFICATION	2.496404399156419E-9	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999989922851	WITHOUT_CLASSIFICATION	1.0077149148093662E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.999999918383087	WITHOUT_CLASSIFICATION	8.161691305416828E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999999987781126	WITHOUT_CLASSIFICATION	1.2218873528793876E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.999999998753714	WITHOUT_CLASSIFICATION	1.2462860514307723E-9	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999985331563762	WITHOUT_CLASSIFICATION	1.4668436237411465E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.999999801535099	WITHOUT_CLASSIFICATION	1.9846490088429602E-7	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999242903188826	WITHOUT_CLASSIFICATION	7.570968111729969E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999242903188826	WITHOUT_CLASSIFICATION	7.570968111729969E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999996729912536	WITHOUT_CLASSIFICATION	3.270087463902632E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999965205665713	WITHOUT_CLASSIFICATION	3.479433428721937E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999954992595835	WITHOUT_CLASSIFICATION	4.500740416455174E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999997687374952	WITHOUT_CLASSIFICATION	2.3126250485410903E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999997687374952	WITHOUT_CLASSIFICATION	2.3126250485410903E-7	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999945849742095	WITHOUT_CLASSIFICATION	5.415025790582202E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999998207760562	WITHOUT_CLASSIFICATION	1.7922394387279513E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999998024605532	WITHOUT_CLASSIFICATION	1.9753944681363156E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999997967998393	WITHOUT_CLASSIFICATION	2.0320016077339655E-7	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999925812957282	WITHOUT_CLASSIFICATION	7.418704271758293E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999995407486026	WITHOUT_CLASSIFICATION	4.5925139741224016E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999938972223327	WITHOUT_CLASSIFICATION	6.10277766731186E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999457630843	WITHOUT_CLASSIFICATION	5.423691580276269E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999997385452253	WITHOUT_CLASSIFICATION	2.6145477476285884E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999987770144648	WITHOUT_CLASSIFICATION	1.2229855352442607E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999440049765	WITHOUT_CLASSIFICATION	5.599502349495713E-8	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999945849742095	WITHOUT_CLASSIFICATION	5.415025790582202E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999998207760562	WITHOUT_CLASSIFICATION	1.7922394387279513E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999997967998393	WITHOUT_CLASSIFICATION	2.0320016077339655E-7	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.999999899326132	WITHOUT_CLASSIFICATION	1.0067386807315493E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999954992595835	WITHOUT_CLASSIFICATION	4.500740416455174E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999954992595835	WITHOUT_CLASSIFICATION	4.500740416455174E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999996894358584	WITHOUT_CLASSIFICATION	3.1056414167083033E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999996894358584	WITHOUT_CLASSIFICATION	3.1056414167083033E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999738814342588	WITHOUT_CLASSIFICATION	2.611856574121119E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999738814342588	WITHOUT_CLASSIFICATION	2.611856574121119E-5	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999999417712411	WITHOUT_CLASSIFICATION	5.8228758973153923E-8	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999999783680249	WITHOUT_CLASSIFICATION	2.1631975150118276E-8	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999954425398095	WITHOUT_CLASSIFICATION	4.557460190387124E-6	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999980423675658	WITHOUT_CLASSIFICATION	1.9576324342059178E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999999181126656	WITHOUT_CLASSIFICATION	8.188733439432899E-8	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999998640677885	WITHOUT_CLASSIFICATION	1.3593221146771256E-7	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999515233517633	WITHOUT_CLASSIFICATION	4.847664823672724E-5	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999989110624	WITHOUT_CLASSIFICATION	1.0889377108559891E-9	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999997950318609	WITHOUT_CLASSIFICATION	2.049681391591762E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999999913405541	WITHOUT_CLASSIFICATION	8.659445962288735E-9	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999999670532108	WITHOUT_CLASSIFICATION	3.294678930002139E-8	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999967301544624	WITHOUT_CLASSIFICATION	3.26984553761452E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999999757530192	WITHOUT_CLASSIFICATION	2.424698081380203E-8	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999999124243693	WITHOUT_CLASSIFICATION	8.757563073822505E-8	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999999736835802	WITHOUT_CLASSIFICATION	2.6316419922255733E-8	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999959214429931	WITHOUT_CLASSIFICATION	4.078557006868286E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999992334433943	WITHOUT_CLASSIFICATION	7.665566057624867E-7	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999999257488718	WITHOUT_CLASSIFICATION	7.42511282492326E-8	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999999886016	WITHOUT_CLASSIFICATION	1.1398400047403718E-8	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999938972223327	WITHOUT_CLASSIFICATION	6.10277766731186E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999997385452253	WITHOUT_CLASSIFICATION	2.6145477476285884E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999990057401467	WITHOUT_CLASSIFICATION	9.942598533073244E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999988698489068	WITHOUT_CLASSIFICATION	1.1301510931146382E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999988698489068	WITHOUT_CLASSIFICATION	1.1301510931146382E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.999999899326132	WITHOUT_CLASSIFICATION	1.0067386807315493E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999954992595835	WITHOUT_CLASSIFICATION	4.500740416455174E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999996894358584	WITHOUT_CLASSIFICATION	3.1056414167083033E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999738814342588	WITHOUT_CLASSIFICATION	2.611856574121119E-5	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.999998596631238	WITHOUT_CLASSIFICATION	1.4033687619248355E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.999869259500934	WITHOUT_CLASSIFICATION	1.307404990659814E-4	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999999978330344	WITHOUT_CLASSIFICATION	2.1669655657216994E-9	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9983089613588513	WITHOUT_CLASSIFICATION	0.0016910386411487042	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999938224078	WITHOUT_CLASSIFICATION	6.177592210195651E-8	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999938224078	WITHOUT_CLASSIFICATION	6.177592210195651E-8	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999999293232401	WITHOUT_CLASSIFICATION	7.067675983123262E-8	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999999863174361	WITHOUT_CLASSIFICATION	1.3682563899422675E-8	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999694587949	WITHOUT_CLASSIFICATION	3.0541205093229665E-8	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.999999943630191	WITHOUT_CLASSIFICATION	5.636980911826388E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999328237631	WITHOUT_CLASSIFICATION	6.7176236867195E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999328237631	WITHOUT_CLASSIFICATION	6.7176236867195E-8	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999999984705257	WITHOUT_CLASSIFICATION	1.5294743660329083E-9	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999999978866255	WITHOUT_CLASSIFICATION	2.113374456684893E-9	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999999840279716	WITHOUT_CLASSIFICATION	1.5972028348425012E-8	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.999997659097987	WITHOUT_CLASSIFICATION	2.3409020130353805E-6	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.999999855927895	WITHOUT_CLASSIFICATION	1.4407210509304874E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999999452840485	WITHOUT_CLASSIFICATION	5.4715951621761087E-8	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999812978575986	WITHOUT_CLASSIFICATION	1.8702142401419366E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999999900466275	WITHOUT_CLASSIFICATION	9.953372455813025E-9	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.998725667430673	WITHOUT_CLASSIFICATION	0.0012743325693270343	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9996521561965087	WITHOUT_CLASSIFICATION	3.478438034912259E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9996439342905483	WITHOUT_CLASSIFICATION	3.5606570945162237E-4	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999992194428663	WITHOUT_CLASSIFICATION	7.805571337825068E-7	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.999999999934756	WITHOUT_CLASSIFICATION	6.524409929109082E-11	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999998319244401	WITHOUT_CLASSIFICATION	1.6807555993163324E-7	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.999999920642633	WITHOUT_CLASSIFICATION	7.935736698830833E-8	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999999171841961	WITHOUT_CLASSIFICATION	8.281580381025045E-8	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999995086093197	WITHOUT_CLASSIFICATION	4.913906802004009E-7	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.999982939393098	WITHOUT_CLASSIFICATION	1.706060690198142E-5	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999998138965895	WITHOUT_CLASSIFICATION	1.8610341045673508E-7	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999999552504372	WITHOUT_CLASSIFICATION	4.474956285396586E-8	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.999999485977239	WITHOUT_CLASSIFICATION	5.140227610208778E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999993968842795	WITHOUT_CLASSIFICATION	6.031157204614522E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999993968842795	WITHOUT_CLASSIFICATION	6.031157204614522E-7	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999917297087706	WITHOUT_CLASSIFICATION	8.270291229304666E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9995947185658564	WITHOUT_CLASSIFICATION	4.052814341436018E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999975614057249	WITHOUT_CLASSIFICATION	2.438594275033473E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999975614057249	WITHOUT_CLASSIFICATION	2.438594275033473E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9710919630400819	DEFECT	0.028908036959918015	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999625535071688	WITHOUT_CLASSIFICATION	3.744649283113469E-5	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999937500052781	WITHOUT_CLASSIFICATION	6.24999472186674E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999989296818221	WITHOUT_CLASSIFICATION	1.0703181779377857E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999989296818221	WITHOUT_CLASSIFICATION	1.0703181779377857E-6	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.999981965150683	WITHOUT_CLASSIFICATION	1.803484931697164E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999996963310127	WITHOUT_CLASSIFICATION	3.036689872823868E-7	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999996491726282	WITHOUT_CLASSIFICATION	3.5082737183822446E-7	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999990339717656	WITHOUT_CLASSIFICATION	9.660282344670881E-7	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999999557089332	WITHOUT_CLASSIFICATION	4.429106683450929E-8	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999998672016919	WITHOUT_CLASSIFICATION	1.327983081542421E-7	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999994977947315	WITHOUT_CLASSIFICATION	5.022052685752447E-7	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999978462324868	WITHOUT_CLASSIFICATION	2.1537675131714956E-6	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999997571488449	WITHOUT_CLASSIFICATION	2.428511550626576E-7	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9998220473449532	WITHOUT_CLASSIFICATION	1.7795265504688102E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999988967721387	WITHOUT_CLASSIFICATION	1.103227861272409E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.999999927560921	WITHOUT_CLASSIFICATION	7.243907901507565E-8	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999999504604288	WITHOUT_CLASSIFICATION	4.953957125189806E-8	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9997113194325021	WITHOUT_CLASSIFICATION	2.8868056749787625E-4	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999951790454501	WITHOUT_CLASSIFICATION	4.8209545499058715E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9970550965211954	WITHOUT_CLASSIFICATION	0.0029449034788045616	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999999298563743	WITHOUT_CLASSIFICATION	7.01436257456052E-8	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.999989926103702	WITHOUT_CLASSIFICATION	1.0073896297998747E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999117727527169	WITHOUT_CLASSIFICATION	8.822724728318584E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999972018767866	WITHOUT_CLASSIFICATION	2.7981232133713077E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999968432678329	WITHOUT_CLASSIFICATION	3.15673216711652E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999996174451965	WITHOUT_CLASSIFICATION	3.8255480347868526E-7	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.999990247718579	WITHOUT_CLASSIFICATION	9.752281420921166E-6	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999172055843816	WITHOUT_CLASSIFICATION	8.279441561845586E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.999999885168846	WITHOUT_CLASSIFICATION	1.1483115403223264E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9962085176845772	WITHOUT_CLASSIFICATION	0.0037914823154227683	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9981396064677014	WITHOUT_CLASSIFICATION	0.0018603935322985805	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999999347792016	WITHOUT_CLASSIFICATION	6.522079836007493E-8	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999940103293818	WITHOUT_CLASSIFICATION	5.989670618135101E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999996270298379	WITHOUT_CLASSIFICATION	3.729701621264232E-7	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999995845236	WITHOUT_CLASSIFICATION	4.154764488662861E-10	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9997113194325021	WITHOUT_CLASSIFICATION	2.8868056749787625E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999999347792016	WITHOUT_CLASSIFICATION	6.522079836007493E-8	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999940103293818	WITHOUT_CLASSIFICATION	5.989670618135101E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999995845236	WITHOUT_CLASSIFICATION	4.154764488662861E-10	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999999718268389	WITHOUT_CLASSIFICATION	2.81731611230322E-8	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.999985190343596	WITHOUT_CLASSIFICATION	1.4809656403851317E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.999964353003332	WITHOUT_CLASSIFICATION	3.5646996667969025E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999999374367611	WITHOUT_CLASSIFICATION	6.256323885669557E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999901070359	WITHOUT_CLASSIFICATION	9.892964048223452E-9	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999991841736822	WITHOUT_CLASSIFICATION	8.15826317912516E-7	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999997945642906	WITHOUT_CLASSIFICATION	2.0543570941994897E-7	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999999443863093	WITHOUT_CLASSIFICATION	5.5613690691743424E-8	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999999506179452	WITHOUT_CLASSIFICATION	4.9382054739148686E-8	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9996465254515968	WITHOUT_CLASSIFICATION	3.534745484031108E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.999995856040782	WITHOUT_CLASSIFICATION	4.143959218044193E-6	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.999995856040782	WITHOUT_CLASSIFICATION	4.143959218044193E-6	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999965785702876	WITHOUT_CLASSIFICATION	3.4214297124803843E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999981937949123	WITHOUT_CLASSIFICATION	1.8062050877145213E-6	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999987218038712	WITHOUT_CLASSIFICATION	1.2781961287860229E-6	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999999418401387	WITHOUT_CLASSIFICATION	5.815986112259826E-8	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999982286364903	WITHOUT_CLASSIFICATION	1.771363509676464E-6	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999947300647174	WITHOUT_CLASSIFICATION	5.269935282567897E-6	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999982650655623	WITHOUT_CLASSIFICATION	1.7349344376254785E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9996734601402716	WITHOUT_CLASSIFICATION	3.2653985972832747E-4	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999999976423101	WITHOUT_CLASSIFICATION	2.3576899598842693E-9	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999767735546	WITHOUT_CLASSIFICATION	2.322644545863167E-8	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999998745878931	WITHOUT_CLASSIFICATION	1.2541210680372645E-7	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999996440820806	WITHOUT_CLASSIFICATION	3.559179192733305E-7	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999999979975991	WITHOUT_CLASSIFICATION	2.002400858435037E-9	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.999999661814647	WITHOUT_CLASSIFICATION	3.3818535303526676E-7	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999999847691761	WITHOUT_CLASSIFICATION	1.5230823996818262E-8	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999999194378488	WITHOUT_CLASSIFICATION	8.056215118785274E-8	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999999966783812	WITHOUT_CLASSIFICATION	3.321618802095646E-9	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999999691518453	WITHOUT_CLASSIFICATION	3.084815466741627E-8	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999999214721736	WITHOUT_CLASSIFICATION	7.852782638551452E-8	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999997767336781	WITHOUT_CLASSIFICATION	2.2326632183726299E-7	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.999999244683199	WITHOUT_CLASSIFICATION	7.55316800982213E-7	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999988256279242	WITHOUT_CLASSIFICATION	1.1743720758357051E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.999999997994466	WITHOUT_CLASSIFICATION	2.0055339853022725E-9	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999998413072727	WITHOUT_CLASSIFICATION	1.5869272724043638E-7	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999999386176401	WITHOUT_CLASSIFICATION	6.138235995468459E-8	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.999999709084193	WITHOUT_CLASSIFICATION	2.909158069484697E-7	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9957463803986283	WITHOUT_CLASSIFICATION	0.004253619601371705	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9998548581376071	WITHOUT_CLASSIFICATION	1.4514186239299317E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999985741053345	WITHOUT_CLASSIFICATION	1.425894665384371E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.999999790596976	WITHOUT_CLASSIFICATION	2.0940302405774803E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999988764091996	WITHOUT_CLASSIFICATION	1.1235908003508097E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999999645276786	WITHOUT_CLASSIFICATION	3.547232145806126E-8	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999999774106868	WITHOUT_CLASSIFICATION	2.2589313126454384E-8	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999996183182605	WITHOUT_CLASSIFICATION	3.816817395257088E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999999689836392	WITHOUT_CLASSIFICATION	3.1016360808825065E-8	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999825295825262	WITHOUT_CLASSIFICATION	1.7470417473822625E-5	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999999944158972	WITHOUT_CLASSIFICATION	5.584102880315614E-9	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999990815987867	WITHOUT_CLASSIFICATION	9.184012131846318E-7	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.999999868844423	WITHOUT_CLASSIFICATION	1.311555770082563E-7	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999998375233982	WITHOUT_CLASSIFICATION	1.6247660184107088E-7	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999139268306172	WITHOUT_CLASSIFICATION	8.60731693828417E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.999977871840248	WITHOUT_CLASSIFICATION	2.2128159751978087E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.999996994822586	WITHOUT_CLASSIFICATION	3.0051774140446785E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.999995828944075	WITHOUT_CLASSIFICATION	4.1710559250171785E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999690870105061	WITHOUT_CLASSIFICATION	3.091298949388427E-5	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.999994388105964	WITHOUT_CLASSIFICATION	5.61189403600989E-6	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.999996582202728	WITHOUT_CLASSIFICATION	3.4177972719316465E-6	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999942976812456	WITHOUT_CLASSIFICATION	5.702318754322487E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999946098571711	WITHOUT_CLASSIFICATION	5.39014282887735E-6	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999997065806152	WITHOUT_CLASSIFICATION	2.9341938479697026E-7	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999969642449731	WITHOUT_CLASSIFICATION	3.0357550270326614E-6	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999991515099	WITHOUT_CLASSIFICATION	8.484900261974335E-10	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999960745598657	WITHOUT_CLASSIFICATION	3.925440134294928E-6	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999961941331309	WITHOUT_CLASSIFICATION	3.805866869001369E-6	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999976652841408	WITHOUT_CLASSIFICATION	2.3347158591893766E-6	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999984303557946	WITHOUT_CLASSIFICATION	1.5696442053380275E-6	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999998998039884	WITHOUT_CLASSIFICATION	1.0019601168359922E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999997558637701	WITHOUT_CLASSIFICATION	2.4413622987306216E-7	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9996077898995669	WITHOUT_CLASSIFICATION	3.9221010043319484E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999626358254826	WITHOUT_CLASSIFICATION	3.7364174517366145E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999626358254826	WITHOUT_CLASSIFICATION	3.7364174517366145E-5	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999972598007982	WITHOUT_CLASSIFICATION	2.740199201723469E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999988491157359	WITHOUT_CLASSIFICATION	1.1508842640954915E-6	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999942718828575	WITHOUT_CLASSIFICATION	5.728117142499907E-6	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.999994070349318	WITHOUT_CLASSIFICATION	5.9296506820323946E-6	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999980323906158	WITHOUT_CLASSIFICATION	1.9676093843042387E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9999522737189285	WITHOUT_CLASSIFICATION	4.772628107154894E-5	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9998857749230718	WITHOUT_CLASSIFICATION	1.1422507692812232E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999999387362576	WITHOUT_CLASSIFICATION	6.126374248731267E-8	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999999962858018	WITHOUT_CLASSIFICATION	3.714198134564407E-9	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999999999791213	WITHOUT_CLASSIFICATION	2.0878788175532025E-11	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999993019354954	WITHOUT_CLASSIFICATION	6.98064504593064E-7	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999996892771964	WITHOUT_CLASSIFICATION	3.107228036249932E-7	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999999336369372	WITHOUT_CLASSIFICATION	6.636306282801068E-8	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999999651718997	WITHOUT_CLASSIFICATION	3.4828100300539987E-8	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999995527643042	WITHOUT_CLASSIFICATION	4.472356957911985E-7	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999872887151143	WITHOUT_CLASSIFICATION	1.2711284885627762E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999997615448081	WITHOUT_CLASSIFICATION	2.384551918846752E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999929970735226	WITHOUT_CLASSIFICATION	7.002926477379169E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9988752598073598	WITHOUT_CLASSIFICATION	0.0011247401926402219	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999999685991776	WITHOUT_CLASSIFICATION	3.140082233638877E-8	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999905954083291	WITHOUT_CLASSIFICATION	9.404591670908684E-6	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999998390491939	WITHOUT_CLASSIFICATION	1.6095080612952564E-7	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999993987692426	WITHOUT_CLASSIFICATION	6.0123075735909E-7	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999998713495135	WITHOUT_CLASSIFICATION	1.2865048647564338E-7	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999991383086747	WITHOUT_CLASSIFICATION	8.616913252448954E-7	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999987998519015	WITHOUT_CLASSIFICATION	1.200148098359864E-6	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999999946915878	WITHOUT_CLASSIFICATION	5.308412095372116E-9	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999999830129791	WITHOUT_CLASSIFICATION	1.698702088913877E-8	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.999999799143925	WITHOUT_CLASSIFICATION	2.008560749018846E-7	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9998731656731769	WITHOUT_CLASSIFICATION	1.2683432682315454E-4	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.999991904899586	WITHOUT_CLASSIFICATION	8.095100414027988E-6	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999982518734747	WITHOUT_CLASSIFICATION	1.7481265253122104E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999522285886	WITHOUT_CLASSIFICATION	4.777141132837418E-8	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999999250833347	WITHOUT_CLASSIFICATION	7.491666537020509E-8	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999522285886	WITHOUT_CLASSIFICATION	4.777141132837418E-8	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999990781566501	WITHOUT_CLASSIFICATION	9.218433498564243E-7	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999195629559328	WITHOUT_CLASSIFICATION	8.043704406727991E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999195629559328	WITHOUT_CLASSIFICATION	8.043704406727991E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999195629559328	WITHOUT_CLASSIFICATION	8.043704406727991E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999895499111	WITHOUT_CLASSIFICATION	1.045008903527099E-8	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999895499111	WITHOUT_CLASSIFICATION	1.045008903527099E-8	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999999907345775	WITHOUT_CLASSIFICATION	9.265422606277753E-9	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999181941411561	WITHOUT_CLASSIFICATION	8.180585884390595E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999999946459637	WITHOUT_CLASSIFICATION	5.354036325370174E-9	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999999700936048	WITHOUT_CLASSIFICATION	2.990639526560315E-8	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999992197828935	WITHOUT_CLASSIFICATION	7.802171065095274E-7	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999999239296704	WITHOUT_CLASSIFICATION	7.60703296274671E-8	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999994963174034	WITHOUT_CLASSIFICATION	5.036825965383913E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999999655080377	WITHOUT_CLASSIFICATION	3.449196238768509E-8	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999999997752915	WITHOUT_CLASSIFICATION	2.2470846969789128E-10	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999997768843145	WITHOUT_CLASSIFICATION	2.2311568539428285E-7	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999998802217592	WITHOUT_CLASSIFICATION	1.1977824078088698E-7	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.999813753925818	WITHOUT_CLASSIFICATION	1.8624607418201217E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999988971349543	WITHOUT_CLASSIFICATION	1.1028650457125696E-6	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999999639452004	WITHOUT_CLASSIFICATION	3.6054799696501196E-8	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999999477265336	WITHOUT_CLASSIFICATION	5.227346638006498E-8	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999999357197428	WITHOUT_CLASSIFICATION	6.428025716779988E-8	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999974446557252	WITHOUT_CLASSIFICATION	2.5553442748129524E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999994039649325	WITHOUT_CLASSIFICATION	5.960350675278527E-7	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999994039649325	WITHOUT_CLASSIFICATION	5.960350675278527E-7	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999995022182451	WITHOUT_CLASSIFICATION	4.977817549389102E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.999999985973642	WITHOUT_CLASSIFICATION	1.4026358087245688E-8	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.999999985973642	WITHOUT_CLASSIFICATION	1.4026358087245688E-8	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999805374588916	WITHOUT_CLASSIFICATION	1.946254110833567E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999999514260965	WITHOUT_CLASSIFICATION	4.85739033971505E-8	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999999489849106	WITHOUT_CLASSIFICATION	5.101508943641838E-8	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999996908140816	WITHOUT_CLASSIFICATION	3.091859183712733E-7	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999999152168894	WITHOUT_CLASSIFICATION	8.478311069936039E-8	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.99999984138271	WITHOUT_CLASSIFICATION	1.586172898840906E-7	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.999999692311474	WITHOUT_CLASSIFICATION	3.076885260903015E-7	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999949142277403	WITHOUT_CLASSIFICATION	5.0857722596590974E-6	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999999353701561	WITHOUT_CLASSIFICATION	6.462984393513613E-8	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999991265880174	WITHOUT_CLASSIFICATION	8.734119826928115E-7	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999997954842966	WITHOUT_CLASSIFICATION	2.045157034584435E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999997728652588	WITHOUT_CLASSIFICATION	2.2713474120507345E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999998934074141	WITHOUT_CLASSIFICATION	1.0659258591187967E-7	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999998104202816	WITHOUT_CLASSIFICATION	1.8957971837894887E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999999655080377	WITHOUT_CLASSIFICATION	3.449196238768509E-8	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9999905469877899	WITHOUT_CLASSIFICATION	9.453012210125847E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999996337280749	WITHOUT_CLASSIFICATION	3.662719250621208E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999723485725	WITHOUT_CLASSIFICATION	2.7651427520330557E-8	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999723485725	WITHOUT_CLASSIFICATION	2.7651427520330557E-8	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999835317913276	WITHOUT_CLASSIFICATION	1.6468208672413522E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999874177203264	WITHOUT_CLASSIFICATION	1.2582279673687716E-5	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999999122009506	WITHOUT_CLASSIFICATION	8.779904934559569E-8	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999966219794235	WITHOUT_CLASSIFICATION	3.3780205764317215E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999999240112879	WITHOUT_CLASSIFICATION	7.598871207530502E-8	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999999965786317	WITHOUT_CLASSIFICATION	3.4213683945575797E-9	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999618410776352	WITHOUT_CLASSIFICATION	3.815892236486646E-5	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9985876946474866	WITHOUT_CLASSIFICATION	0.0014123053525133664	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999988333713613	WITHOUT_CLASSIFICATION	1.1666286387379051E-6	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999983044020724	WITHOUT_CLASSIFICATION	1.695597927571483E-6	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999976870743075	WITHOUT_CLASSIFICATION	2.312925692610675E-6	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999995000748537	WITHOUT_CLASSIFICATION	4.999251462653624E-7	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.5227801674389351	WITHOUT_CLASSIFICATION	0.477219832561065	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999996631718048	WITHOUT_CLASSIFICATION	3.3682819514844575E-7	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999999713297623	WITHOUT_CLASSIFICATION	2.8670237632574122E-8	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999959017686039	WITHOUT_CLASSIFICATION	4.098231396092813E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999993775554386	WITHOUT_CLASSIFICATION	6.224445614406215E-7	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999999949733154	WITHOUT_CLASSIFICATION	5.026684598120689E-9	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999999533252705	WITHOUT_CLASSIFICATION	4.6674729510560705E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999963310571083	WITHOUT_CLASSIFICATION	3.6689428917966133E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999996178746963	WITHOUT_CLASSIFICATION	3.821253037376952E-7	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.99999851267449	WITHOUT_CLASSIFICATION	1.4873255099654037E-6	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999997954403441	WITHOUT_CLASSIFICATION	2.045596558792441E-7	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999984488405	WITHOUT_CLASSIFICATION	1.5511594782232899E-9	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999997292313085	WITHOUT_CLASSIFICATION	2.7076869142819543E-7	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999994871072226	WITHOUT_CLASSIFICATION	5.128927773250771E-7	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9995243161181375	WITHOUT_CLASSIFICATION	4.756838818624728E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9944797630451562	WITHOUT_CLASSIFICATION	0.005520236954843896	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999999895743746	WITHOUT_CLASSIFICATION	1.0425625381890866E-8	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9994638498891506	WITHOUT_CLASSIFICATION	5.36150110849521E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999824272066842	WITHOUT_CLASSIFICATION	1.7572793315776925E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999999941479295	WITHOUT_CLASSIFICATION	5.852070508248661E-9	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.999975823200964	WITHOUT_CLASSIFICATION	2.4176799035928653E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9973225182472448	WITHOUT_CLASSIFICATION	0.0026774817527552472	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999985205588	WITHOUT_CLASSIFICATION	1.4794411693295272E-9	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999990882473777	WITHOUT_CLASSIFICATION	9.117526221624136E-7	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9944797630451562	WITHOUT_CLASSIFICATION	0.005520236954843896	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999998661566373	WITHOUT_CLASSIFICATION	1.3384336275082518E-7	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999985205588	WITHOUT_CLASSIFICATION	1.4794411693295272E-9	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999992829553576	WITHOUT_CLASSIFICATION	7.170446425070843E-7	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999999826348518	WITHOUT_CLASSIFICATION	1.736514811903657E-8	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999999690577567	WITHOUT_CLASSIFICATION	3.0942243332697497E-8	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.999999756069035	WITHOUT_CLASSIFICATION	2.439309650206764E-7	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999997964041641	WITHOUT_CLASSIFICATION	2.0359583578187822E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999898933041672	WITHOUT_CLASSIFICATION	1.0106695832646959E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999898933041672	WITHOUT_CLASSIFICATION	1.0106695832646959E-5	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999999875463577	WITHOUT_CLASSIFICATION	1.2453642202387919E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999575656836	WITHOUT_CLASSIFICATION	4.243431636993427E-8	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999998411432189	WITHOUT_CLASSIFICATION	1.5885678120302478E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999998411432189	WITHOUT_CLASSIFICATION	1.5885678120302478E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999985248925838	WITHOUT_CLASSIFICATION	1.475107416272102E-6	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9996704292828137	WITHOUT_CLASSIFICATION	3.29570717186311E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999787424447131	WITHOUT_CLASSIFICATION	2.1257555286839767E-5	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999787424447131	WITHOUT_CLASSIFICATION	2.1257555286839767E-5	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999953400555742	WITHOUT_CLASSIFICATION	4.659944425829572E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999969820939412	WITHOUT_CLASSIFICATION	3.017906058938508E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999994726317291	WITHOUT_CLASSIFICATION	5.273682709650158E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999997861230455	WITHOUT_CLASSIFICATION	2.1387695445641666E-7	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999883733638674	WITHOUT_CLASSIFICATION	1.1626636132622366E-5	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999977621652425	WITHOUT_CLASSIFICATION	2.2378347575496115E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999986980986838	WITHOUT_CLASSIFICATION	1.3019013162830234E-6	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999980691001625	WITHOUT_CLASSIFICATION	1.930899837390905E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999760528734234	WITHOUT_CLASSIFICATION	2.3947126576685727E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999998274375855	WITHOUT_CLASSIFICATION	1.725624144513671E-7	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999996498258734	WITHOUT_CLASSIFICATION	3.5017412661728506E-7	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999758975990831	WITHOUT_CLASSIFICATION	2.410240091686361E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999908354233866	WITHOUT_CLASSIFICATION	9.16457661329229E-6	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999995491155302	WITHOUT_CLASSIFICATION	4.5088446981189155E-7	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999988774617833	WITHOUT_CLASSIFICATION	1.1225382166959216E-6	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999997658428529	WITHOUT_CLASSIFICATION	2.3415714711302842E-7	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999056674653851	WITHOUT_CLASSIFICATION	9.433253461486795E-5	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999960194951519	WITHOUT_CLASSIFICATION	3.980504848092964E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999987461254042	WITHOUT_CLASSIFICATION	1.253874595824678E-6	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999660023119082	WITHOUT_CLASSIFICATION	3.399768809183166E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999999383829113	WITHOUT_CLASSIFICATION	6.161708863963766E-8	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999998852344208	WITHOUT_CLASSIFICATION	1.147655791468092E-7	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.999994710881686	WITHOUT_CLASSIFICATION	5.2891183140003744E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999973567111132	WITHOUT_CLASSIFICATION	2.643288886767999E-6	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999940339775923	WITHOUT_CLASSIFICATION	5.966022407637159E-6	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999970675580355	WITHOUT_CLASSIFICATION	2.932441964558005E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999943090316069	WITHOUT_CLASSIFICATION	5.690968393033839E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999956669011254	WITHOUT_CLASSIFICATION	4.33309887462168E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999990547664111	WITHOUT_CLASSIFICATION	9.45233588897401E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999990547664111	WITHOUT_CLASSIFICATION	9.45233588897401E-6	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999962912003545	WITHOUT_CLASSIFICATION	3.708799645638691E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999998883573947	WITHOUT_CLASSIFICATION	1.1164260520580136E-7	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999971908824332	WITHOUT_CLASSIFICATION	2.809117566805155E-6	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998944548678302	WITHOUT_CLASSIFICATION	1.055451321697529E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999848455255229	WITHOUT_CLASSIFICATION	1.515447447721654E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999757883758157	WITHOUT_CLASSIFICATION	2.4211624184320454E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999992728349919	WITHOUT_CLASSIFICATION	7.271650080716638E-7	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999999019392457	WITHOUT_CLASSIFICATION	9.806075429640428E-8	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999993038479892	WITHOUT_CLASSIFICATION	6.961520107555252E-7	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999954915856	WITHOUT_CLASSIFICATION	4.508414392104879E-9	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999997051534231	WITHOUT_CLASSIFICATION	2.94846576935759E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.999999985696342	WITHOUT_CLASSIFICATION	1.4303658136470174E-8	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.999998961967979	WITHOUT_CLASSIFICATION	1.038032021002723E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999972591846985	WITHOUT_CLASSIFICATION	2.7408153016049433E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999997786164988	WITHOUT_CLASSIFICATION	2.2138350113977254E-7	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999962789018575	WITHOUT_CLASSIFICATION	3.7210981424744482E-6	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999927488536122	WITHOUT_CLASSIFICATION	7.251146387851798E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999939487568844	WITHOUT_CLASSIFICATION	6.051243115582739E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999984576785306	WITHOUT_CLASSIFICATION	1.5423214695084204E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999970647584924	WITHOUT_CLASSIFICATION	2.935241507720297E-6	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999998716395913	WITHOUT_CLASSIFICATION	1.2836040871466593E-7	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999860238020114	WITHOUT_CLASSIFICATION	1.397619798855257E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999999908286187	WITHOUT_CLASSIFICATION	9.17138134168938E-9	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999999457272677	WITHOUT_CLASSIFICATION	5.4272732318320063E-8	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999998346337989	WITHOUT_CLASSIFICATION	1.653662010399115E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999997120455123	WITHOUT_CLASSIFICATION	2.879544876992333E-7	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999732785752001	WITHOUT_CLASSIFICATION	2.672142479985573E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999995446066997	WITHOUT_CLASSIFICATION	4.5539330020430134E-7	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999977091177826	WITHOUT_CLASSIFICATION	2.290882217327137E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999999569700326	WITHOUT_CLASSIFICATION	4.302996723480303E-8	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999978701700927	WITHOUT_CLASSIFICATION	2.129829907331088E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999989946338289	WITHOUT_CLASSIFICATION	1.0053661711224159E-6	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999999879676101	WITHOUT_CLASSIFICATION	1.2032389858333478E-8	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999991667655586	WITHOUT_CLASSIFICATION	8.332344413758265E-7	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999999875974052	WITHOUT_CLASSIFICATION	1.2402594781840739E-8	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.999999048718744	WITHOUT_CLASSIFICATION	9.5128125596344E-7	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999998466802302	WITHOUT_CLASSIFICATION	1.5331976969037482E-7	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.999998618020789	WITHOUT_CLASSIFICATION	1.3819792109833047E-6	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999999986883914	WITHOUT_CLASSIFICATION	1.3116085950458434E-9	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999998898370912	WITHOUT_CLASSIFICATION	1.1016290884227135E-7	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9999590110513181	WITHOUT_CLASSIFICATION	4.0988948681864566E-5	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999999512712764	WITHOUT_CLASSIFICATION	4.872872355997134E-8	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9998122816772905	WITHOUT_CLASSIFICATION	1.8771832270945456E-4	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9998122816772905	WITHOUT_CLASSIFICATION	1.8771832270945456E-4	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999997974805366	WITHOUT_CLASSIFICATION	2.025194633653652E-7	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999768728462132	WITHOUT_CLASSIFICATION	2.3127153786859916E-5	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999980370603654	WITHOUT_CLASSIFICATION	1.9629396345946377E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999995680858135	WITHOUT_CLASSIFICATION	4.3191418661703174E-7	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999871180875	WITHOUT_CLASSIFICATION	1.2881912568322224E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999910721108	WITHOUT_CLASSIFICATION	8.927889299154196E-9	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999997721090407	WITHOUT_CLASSIFICATION	2.278909593541231E-7	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999996301765475	WITHOUT_CLASSIFICATION	3.698234524400465E-7	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9948644747793267	WITHOUT_CLASSIFICATION	0.0051355252206732515	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999857886785923	WITHOUT_CLASSIFICATION	1.4211321407752692E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999998849640124	WITHOUT_CLASSIFICATION	1.1503598767691745E-7	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999999559005355	WITHOUT_CLASSIFICATION	4.409946459814952E-8	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999999023510179	WITHOUT_CLASSIFICATION	9.764898207330175E-8	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999999042521874	WITHOUT_CLASSIFICATION	9.574781247137103E-8	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999911378185	WITHOUT_CLASSIFICATION	8.862181520465145E-9	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999998973157506	WITHOUT_CLASSIFICATION	1.0268424941017926E-7	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999429406773	WITHOUT_CLASSIFICATION	5.705932263588572E-8	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.999998913871996	WITHOUT_CLASSIFICATION	1.0861280040551806E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999997637468315	WITHOUT_CLASSIFICATION	2.362531684107745E-7	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.999996273224319	WITHOUT_CLASSIFICATION	3.726775681069536E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999997344647719	WITHOUT_CLASSIFICATION	2.655352280355347E-7	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999973514489426	WITHOUT_CLASSIFICATION	2.64855105741877E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999999739441792	WITHOUT_CLASSIFICATION	2.6055820784145367E-8	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999999909048436	WITHOUT_CLASSIFICATION	9.095156329786959E-9	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999819004828	WITHOUT_CLASSIFICATION	1.8099517192201693E-8	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999413693739	WITHOUT_CLASSIFICATION	5.8630626137566545E-8	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999998676834078	WITHOUT_CLASSIFICATION	1.3231659217221382E-7	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.999999988838048	WITHOUT_CLASSIFICATION	1.1161951922815715E-8	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999999163226441	WITHOUT_CLASSIFICATION	8.367735593799E-8	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999999560643694	WITHOUT_CLASSIFICATION	4.393563067483214E-8	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999998273422687	WITHOUT_CLASSIFICATION	1.7265773136177377E-7	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999998930174243	WITHOUT_CLASSIFICATION	1.069825757335653E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999992658633139	WITHOUT_CLASSIFICATION	7.341366861741114E-7	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999987086385711	WITHOUT_CLASSIFICATION	1.2913614289366898E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.999998618020789	WITHOUT_CLASSIFICATION	1.3819792109833047E-6	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999997803037622	WITHOUT_CLASSIFICATION	2.1969623777590134E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999948570277	WITHOUT_CLASSIFICATION	5.142972261896547E-9	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999948570277	WITHOUT_CLASSIFICATION	5.142972261896547E-9	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999991277854052	WITHOUT_CLASSIFICATION	8.722145947031256E-7	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999998055130619	WITHOUT_CLASSIFICATION	1.9448693822859378E-7	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999944021001242	WITHOUT_CLASSIFICATION	5.597899875668271E-6	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999999270474175	WITHOUT_CLASSIFICATION	7.295258250988284E-8	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999991614145847	WITHOUT_CLASSIFICATION	8.385854154447235E-7	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999997078253008	WITHOUT_CLASSIFICATION	2.92174699268332E-7	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999998077867933	WITHOUT_CLASSIFICATION	1.9221320657224194E-7	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999978821474408	WITHOUT_CLASSIFICATION	2.117852559137991E-6	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999966492289476	WITHOUT_CLASSIFICATION	3.350771052319526E-6	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999977050352111	WITHOUT_CLASSIFICATION	2.294964788926277E-6	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999757121220892	WITHOUT_CLASSIFICATION	2.4287877910641783E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999905328892104	WITHOUT_CLASSIFICATION	9.467110789772895E-6	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999969584010996	WITHOUT_CLASSIFICATION	3.0415989003912094E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999995043355697	WITHOUT_CLASSIFICATION	4.956644302643125E-7	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999999975915849	WITHOUT_CLASSIFICATION	2.408415095875938E-9	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999953217016923	WITHOUT_CLASSIFICATION	4.6782983078171315E-6	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999851412942303	WITHOUT_CLASSIFICATION	1.485870576965458E-5	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999858985502278	WITHOUT_CLASSIFICATION	1.4101449772163779E-5	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999958687226137	WITHOUT_CLASSIFICATION	4.13127738627368E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999971704606735	WITHOUT_CLASSIFICATION	2.829539326463416E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999687282483783	WITHOUT_CLASSIFICATION	3.1271751621610084E-5	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999936984221711	WITHOUT_CLASSIFICATION	6.301577828867143E-6	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999939810993	WITHOUT_CLASSIFICATION	6.0189007163163954E-9	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999996549901006	WITHOUT_CLASSIFICATION	3.450098993693229E-7	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999957564316428	WITHOUT_CLASSIFICATION	4.243568357146507E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999969009643559	WITHOUT_CLASSIFICATION	3.099035644085703E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999953442536	WITHOUT_CLASSIFICATION	4.6557463965813406E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999947762388	WITHOUT_CLASSIFICATION	5.223761259707521E-9	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999998951125836	WITHOUT_CLASSIFICATION	1.04887416363299E-7	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999933487849	WITHOUT_CLASSIFICATION	6.651215101182435E-9	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999999330425303	WITHOUT_CLASSIFICATION	6.695746972267969E-8	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999995818059386	WITHOUT_CLASSIFICATION	4.1819406134604973E-7	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999997943205787	WITHOUT_CLASSIFICATION	2.0567942127950548E-7	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.999999276792367	WITHOUT_CLASSIFICATION	7.232076329052394E-7	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999989717277923	WITHOUT_CLASSIFICATION	1.0282722077768728E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999979957348853	WITHOUT_CLASSIFICATION	2.004265114719404E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999997047154175	WITHOUT_CLASSIFICATION	2.952845824752295E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999969009643559	WITHOUT_CLASSIFICATION	3.099035644085703E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999953442536	WITHOUT_CLASSIFICATION	4.6557463965813406E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999947762388	WITHOUT_CLASSIFICATION	5.223761259707521E-9	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999933487849	WITHOUT_CLASSIFICATION	6.651215101182435E-9	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998272008085112	WITHOUT_CLASSIFICATION	1.727991914889384E-4	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999858701462	WITHOUT_CLASSIFICATION	1.412985379592406E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999969317529023	WITHOUT_CLASSIFICATION	3.0682470977277366E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999999172386672	WITHOUT_CLASSIFICATION	8.276133280726715E-7	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999919585865602	WITHOUT_CLASSIFICATION	8.041413439788611E-6	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.999997306219261	WITHOUT_CLASSIFICATION	2.6937807391038E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999998289444404	WITHOUT_CLASSIFICATION	1.7105555957199418E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999963915250124	WITHOUT_CLASSIFICATION	3.6084749875523665E-6	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999999176644743	WITHOUT_CLASSIFICATION	8.233552573262431E-8	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999998024687995	WITHOUT_CLASSIFICATION	1.975312005174261E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999997446002359	WITHOUT_CLASSIFICATION	2.5539976420920397E-7	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999999816595763	WITHOUT_CLASSIFICATION	1.834042378522599E-8	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999972970873655	WITHOUT_CLASSIFICATION	2.702912634460276E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999999401057414	WITHOUT_CLASSIFICATION	5.989425855302458E-8	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999997601181759	WITHOUT_CLASSIFICATION	2.398818239927384E-7	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999994594103819	WITHOUT_CLASSIFICATION	5.405896180770454E-7	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999999612485438	WITHOUT_CLASSIFICATION	3.87514561034673E-8	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999998235282817	WITHOUT_CLASSIFICATION	1.7647171823335165E-7	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999991508416383	WITHOUT_CLASSIFICATION	8.491583617589173E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999997047154175	WITHOUT_CLASSIFICATION	2.952845824752295E-7	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999858701462	WITHOUT_CLASSIFICATION	1.412985379592406E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999969317529023	WITHOUT_CLASSIFICATION	3.0682470977277366E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999919585865602	WITHOUT_CLASSIFICATION	8.041413439788611E-6	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.999997306219261	WITHOUT_CLASSIFICATION	2.6937807391038E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999998289444404	WITHOUT_CLASSIFICATION	1.7105555957199418E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999963915250124	WITHOUT_CLASSIFICATION	3.6084749875523665E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999996102174533	WITHOUT_CLASSIFICATION	3.897825465897273E-7	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999956194404822	WITHOUT_CLASSIFICATION	4.3805595178095175E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999999330595979	WITHOUT_CLASSIFICATION	6.694040211014506E-8	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999787282796	WITHOUT_CLASSIFICATION	2.127172036193374E-8	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999963572986031	WITHOUT_CLASSIFICATION	3.6427013969036663E-6	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999963572986031	WITHOUT_CLASSIFICATION	3.6427013969036663E-6	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999991224569605	WITHOUT_CLASSIFICATION	8.775430395412048E-7	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999999973788528	WITHOUT_CLASSIFICATION	2.621147145194118E-9	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999993815622912	WITHOUT_CLASSIFICATION	6.184377087321136E-7	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999991294312098	WITHOUT_CLASSIFICATION	8.705687902841198E-7	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999999962421929	WITHOUT_CLASSIFICATION	3.75780704112168E-9	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.999998580556421	WITHOUT_CLASSIFICATION	1.4194435790155173E-6	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999999665767833	WITHOUT_CLASSIFICATION	3.342321668721018E-8	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.999999902086192	WITHOUT_CLASSIFICATION	9.791380796468585E-8	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999997833944497	WITHOUT_CLASSIFICATION	2.1660555032427419E-7	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.999999899438247	WITHOUT_CLASSIFICATION	1.0056175308739584E-7	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999999632545936	WITHOUT_CLASSIFICATION	3.674540632229957E-8	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.999999835620472	WITHOUT_CLASSIFICATION	1.6437952800506544E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.999987273108086	WITHOUT_CLASSIFICATION	1.2726891913984634E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.999999548471806	WITHOUT_CLASSIFICATION	4.5152819390272137E-7	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.999999990563503	WITHOUT_CLASSIFICATION	9.43649699262169E-9	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999997920009489	WITHOUT_CLASSIFICATION	2.0799905112798486E-7	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999924480537	WITHOUT_CLASSIFICATION	7.55194637081771E-9	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.999999979232046	WITHOUT_CLASSIFICATION	2.0767954042592922E-8	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999987530589053	WITHOUT_CLASSIFICATION	1.2469410947026694E-6	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999999712229727	WITHOUT_CLASSIFICATION	2.877702740614265E-8	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9999526657259312	WITHOUT_CLASSIFICATION	4.733427406872165E-5	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999999743202057	WITHOUT_CLASSIFICATION	2.567979431062739E-8	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999999911658304	WITHOUT_CLASSIFICATION	8.834169539828395E-9	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970360272672831	WITHOUT_CLASSIFICATION	0.0029639727327168616	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999314694573	WITHOUT_CLASSIFICATION	6.853054263905862E-8	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.999993180892374	WITHOUT_CLASSIFICATION	6.819107626046885E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999995657813989	WITHOUT_CLASSIFICATION	4.3421860109934515E-7	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999610642647966	WITHOUT_CLASSIFICATION	3.893573520349593E-5	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999947611839545	WITHOUT_CLASSIFICATION	5.238816045490793E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999314694573	WITHOUT_CLASSIFICATION	6.853054263905862E-8	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.999993180892374	WITHOUT_CLASSIFICATION	6.819107626046885E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.999999548471806	WITHOUT_CLASSIFICATION	4.5152819390272137E-7	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999999426667319	WITHOUT_CLASSIFICATION	5.733326812904129E-8	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999998069706163	WITHOUT_CLASSIFICATION	1.930293837680236E-7	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999262374904598	WITHOUT_CLASSIFICATION	7.376250954017389E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999963567342178	WITHOUT_CLASSIFICATION	3.6432657822521593E-6	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999999984842466	WITHOUT_CLASSIFICATION	1.5157533074675067E-9	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.999996974862206	WITHOUT_CLASSIFICATION	3.0251377941173426E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999986030076429	WITHOUT_CLASSIFICATION	1.3969923571057098E-6	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999999287180982	WITHOUT_CLASSIFICATION	7.128190187144828E-8	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9992818216112088	WITHOUT_CLASSIFICATION	7.181783887912093E-4	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.999987590267726	WITHOUT_CLASSIFICATION	1.2409732273939857E-5	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9988352493508176	WITHOUT_CLASSIFICATION	0.0011647506491824487	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999992181497385	WITHOUT_CLASSIFICATION	7.818502615086741E-7	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999999106906645	WITHOUT_CLASSIFICATION	8.930933551326008E-8	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999999867556159	WITHOUT_CLASSIFICATION	1.3244384098027339E-8	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999944291371979	WITHOUT_CLASSIFICATION	5.57086280197274E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999838461977785	WITHOUT_CLASSIFICATION	1.6153802221590883E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.999847483441073	WITHOUT_CLASSIFICATION	1.525165589269585E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999930028796091	WITHOUT_CLASSIFICATION	6.997120390892449E-6	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999913660468	WITHOUT_CLASSIFICATION	8.633953151210169E-9	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999994995586373	WITHOUT_CLASSIFICATION	5.004413625763328E-7	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999993050912	WITHOUT_CLASSIFICATION	6.949089111742832E-10	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999996458940945	WITHOUT_CLASSIFICATION	3.5410590545727964E-7	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999995955388087	WITHOUT_CLASSIFICATION	4.0446119125857464E-7	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999999937268499	WITHOUT_CLASSIFICATION	6.273150132108191E-9	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999999982610529	WITHOUT_CLASSIFICATION	1.7389471808833467E-9	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.999998577999754	WITHOUT_CLASSIFICATION	1.4220002460074104E-6	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999996250921073	WITHOUT_CLASSIFICATION	3.7490789275353665E-7	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999979024703816	WITHOUT_CLASSIFICATION	2.097529618352674E-6	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999936656447649	WITHOUT_CLASSIFICATION	6.334355235119702E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9995624323539661	WITHOUT_CLASSIFICATION	4.3756764603388685E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999996314895808	WITHOUT_CLASSIFICATION	3.685104190718196E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998867625955	WITHOUT_CLASSIFICATION	1.1323740445394033E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998867625955	WITHOUT_CLASSIFICATION	1.1323740445394033E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.999987273108086	WITHOUT_CLASSIFICATION	1.2726891913984634E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999998768423308	WITHOUT_CLASSIFICATION	1.231576692242248E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999703960459	WITHOUT_CLASSIFICATION	2.9603954149241266E-8	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999990335052363	WITHOUT_CLASSIFICATION	9.664947636494834E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999995810237007	WITHOUT_CLASSIFICATION	4.18976299276278E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999995810237007	WITHOUT_CLASSIFICATION	4.18976299276278E-7	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999999656563054	WITHOUT_CLASSIFICATION	3.4343694485526176E-8	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999999992657449	WITHOUT_CLASSIFICATION	7.342550666538575E-10	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999999860090989	WITHOUT_CLASSIFICATION	1.3990901023684473E-8	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999998636324269	WITHOUT_CLASSIFICATION	1.3636757315669446E-7	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999933999794599	WITHOUT_CLASSIFICATION	6.600020540105538E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999999932961857	WITHOUT_CLASSIFICATION	6.703814202255965E-9	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999990320070732	WITHOUT_CLASSIFICATION	9.679929269081903E-7	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999999799335505	WITHOUT_CLASSIFICATION	2.0066449447842578E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999378051118404	WITHOUT_CLASSIFICATION	6.219488815960646E-5	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999996125463264	WITHOUT_CLASSIFICATION	3.874536736151931E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999996999742586	WITHOUT_CLASSIFICATION	3.0002574129702574E-7	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999998864177534	WITHOUT_CLASSIFICATION	1.1358224662760277E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999988402866021	WITHOUT_CLASSIFICATION	1.1597133979667154E-6	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999977614328898	WITHOUT_CLASSIFICATION	2.2385671102452156E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999984682222975	WITHOUT_CLASSIFICATION	1.5317777024451642E-6	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999993920034607	WITHOUT_CLASSIFICATION	6.079965393792795E-7	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999873939084	WITHOUT_CLASSIFICATION	1.2606091510196707E-8	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999873939084	WITHOUT_CLASSIFICATION	1.2606091510196707E-8	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.999996583042415	WITHOUT_CLASSIFICATION	3.4169575849471822E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.999996583042415	WITHOUT_CLASSIFICATION	3.4169575849471822E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999988636143	WITHOUT_CLASSIFICATION	1.136385579199655E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999543836643777	WITHOUT_CLASSIFICATION	4.5616335622206945E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9988070124573903	WITHOUT_CLASSIFICATION	0.0011929875426097238	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999999976150736	WITHOUT_CLASSIFICATION	2.3849263846462156E-9	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999968102177533	WITHOUT_CLASSIFICATION	3.189782246631228E-6	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999988834484728	WITHOUT_CLASSIFICATION	1.1165515272499845E-6	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999998735975478	WITHOUT_CLASSIFICATION	1.2640245210305256E-7	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999998864177534	WITHOUT_CLASSIFICATION	1.1358224662760277E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999988402866021	WITHOUT_CLASSIFICATION	1.1597133979667154E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999984682222975	WITHOUT_CLASSIFICATION	1.5317777024451642E-6	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999957572889284	WITHOUT_CLASSIFICATION	4.242711071549517E-6	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999965981917033	WITHOUT_CLASSIFICATION	3.4018082967066133E-6	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9712152827312761	WITHOUT_CLASSIFICATION	0.02878471726872395	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.999941548601888	WITHOUT_CLASSIFICATION	5.845139811186275E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999962997314084	WITHOUT_CLASSIFICATION	3.7002685915052607E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999644869175415	WITHOUT_CLASSIFICATION	3.5513082458502886E-5	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.99999916489092	WITHOUT_CLASSIFICATION	8.351090800462208E-7	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999996242315891	WITHOUT_CLASSIFICATION	3.757684109486509E-7	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999998605659236	WITHOUT_CLASSIFICATION	1.3943407632478559E-7	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999999868260524	WITHOUT_CLASSIFICATION	1.3173947609617718E-8	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999872861285476	WITHOUT_CLASSIFICATION	1.2713871452353183E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.999422575406729	WITHOUT_CLASSIFICATION	5.774245932710649E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999962448412102	WITHOUT_CLASSIFICATION	3.755158789755288E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9996317220823473	WITHOUT_CLASSIFICATION	3.682779176527174E-4	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999953366713135	WITHOUT_CLASSIFICATION	4.663328686461925E-6	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999999307918338	WITHOUT_CLASSIFICATION	6.92081661535627E-8	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999807477951742	WITHOUT_CLASSIFICATION	1.9252204825805183E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999992866438197	WITHOUT_CLASSIFICATION	7.133561804018559E-7	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.999999929551172	WITHOUT_CLASSIFICATION	7.044882795522667E-8	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999973177043887	WITHOUT_CLASSIFICATION	2.682295611327274E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999999667875578	WITHOUT_CLASSIFICATION	3.321244223714237E-8	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999942451189552	WITHOUT_CLASSIFICATION	5.754881044759055E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999937258459293	WITHOUT_CLASSIFICATION	6.2741540707129456E-6	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999997474423166	WITHOUT_CLASSIFICATION	2.525576835271502E-7	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.999999917360534	WITHOUT_CLASSIFICATION	8.263946600028033E-8	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.999998452533329	WITHOUT_CLASSIFICATION	1.547466671103486E-6	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999856841243342	WITHOUT_CLASSIFICATION	1.4315875665808137E-5	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999812345752674	WITHOUT_CLASSIFICATION	1.8765424732524048E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999999376028569	WITHOUT_CLASSIFICATION	6.239714316075467E-8	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999467260899633	WITHOUT_CLASSIFICATION	5.327391003685452E-5	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999975930350706	WITHOUT_CLASSIFICATION	2.406964929362046E-6	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999681401019045	WITHOUT_CLASSIFICATION	3.1859898095406794E-5	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999933994117901	WITHOUT_CLASSIFICATION	6.60058820989937E-6	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999982832781785	WITHOUT_CLASSIFICATION	1.7167218214618556E-6	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.999206257477309	WITHOUT_CLASSIFICATION	7.937425226911828E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999999874663787	WITHOUT_CLASSIFICATION	1.2533621309230164E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999994104037927	WITHOUT_CLASSIFICATION	5.895962073880724E-7	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999893123017112	WITHOUT_CLASSIFICATION	1.0687698288849164E-5	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999921415905494	WITHOUT_CLASSIFICATION	7.858409450590112E-6	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999916229461097	WITHOUT_CLASSIFICATION	8.377053890365546E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999452702329743	WITHOUT_CLASSIFICATION	5.472976702576195E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999703960459	WITHOUT_CLASSIFICATION	2.9603954149241266E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999994104037927	WITHOUT_CLASSIFICATION	5.895962073880724E-7	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999742183223164	WITHOUT_CLASSIFICATION	2.5781677683566594E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9998958424127741	WITHOUT_CLASSIFICATION	1.0415758722596559E-4	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999753823963906	WITHOUT_CLASSIFICATION	2.461760360944638E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9996410979721092	WITHOUT_CLASSIFICATION	3.5890202789078335E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9996410979721092	WITHOUT_CLASSIFICATION	3.5890202789078335E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999999981169008	WITHOUT_CLASSIFICATION	1.8830992368195552E-9	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999999842740237	WITHOUT_CLASSIFICATION	1.5725976296039402E-8	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999987297868513	WITHOUT_CLASSIFICATION	1.2702131486176649E-6	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999995879568	WITHOUT_CLASSIFICATION	4.120431459030078E-10	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999802650381677	WITHOUT_CLASSIFICATION	1.9734961832356333E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999993895212592	WITHOUT_CLASSIFICATION	6.10478740786131E-7	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999999282261336	WITHOUT_CLASSIFICATION	7.177386641404672E-8	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999973995338537	WITHOUT_CLASSIFICATION	2.600466146256479E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999999159329132	WITHOUT_CLASSIFICATION	8.406708680087471E-8	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999999159329132	WITHOUT_CLASSIFICATION	8.406708680087471E-8	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999999536501781	WITHOUT_CLASSIFICATION	4.634982180994348E-8	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999992923973415	WITHOUT_CLASSIFICATION	7.07602658435224E-7	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999999861199628	WITHOUT_CLASSIFICATION	1.3880037273098177E-8	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999999133223365	WITHOUT_CLASSIFICATION	8.6677663517415E-8	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999995437142586	WITHOUT_CLASSIFICATION	4.5628574144240793E-7	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999990207703974	WITHOUT_CLASSIFICATION	9.79229602644383E-7	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9997694309953525	WITHOUT_CLASSIFICATION	2.3056900464744868E-4	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999998230900012	WITHOUT_CLASSIFICATION	1.7690999882122836E-7	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999998662007122	WITHOUT_CLASSIFICATION	1.337992878395601E-7	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999619919378953	WITHOUT_CLASSIFICATION	3.800806210476916E-5	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999991990321757	WITHOUT_CLASSIFICATION	8.009678242435167E-7	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999986600739883	WITHOUT_CLASSIFICATION	1.3399260116729625E-6	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.999999547121933	WITHOUT_CLASSIFICATION	4.5287806710870015E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999991299575631	WITHOUT_CLASSIFICATION	8.700424368296106E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999991299575631	WITHOUT_CLASSIFICATION	8.700424368296106E-7	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999986775207533	WITHOUT_CLASSIFICATION	1.32247924661404E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999963915250124	WITHOUT_CLASSIFICATION	3.6084749875523665E-6	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999974279883009	WITHOUT_CLASSIFICATION	2.5720116990451603E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.999999778600697	WITHOUT_CLASSIFICATION	2.2139930289781863E-7	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999998927937864	WITHOUT_CLASSIFICATION	1.072062136317879E-7	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999941925579667	WITHOUT_CLASSIFICATION	5.807442033276658E-6	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999999140968328	WITHOUT_CLASSIFICATION	8.590316720761944E-8	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999712041750622	WITHOUT_CLASSIFICATION	2.879582493778443E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999996149165274	WITHOUT_CLASSIFICATION	3.8508347265520444E-7	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999994189745763	WITHOUT_CLASSIFICATION	5.810254236555618E-7	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999999284447652	WITHOUT_CLASSIFICATION	7.155523479693087E-8	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999995714452558	WITHOUT_CLASSIFICATION	4.2855474419898706E-7	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999909103647117	WITHOUT_CLASSIFICATION	9.089635288279547E-6	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.999999514994765	WITHOUT_CLASSIFICATION	4.850052350318193E-7	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.999999278463942	WITHOUT_CLASSIFICATION	7.215360579207266E-7	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999999557033088	WITHOUT_CLASSIFICATION	4.429669114022988E-8	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999996944028084	WITHOUT_CLASSIFICATION	3.05597191486565E-7	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999994877897675	WITHOUT_CLASSIFICATION	5.122102324728442E-7	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999998498711133	WITHOUT_CLASSIFICATION	1.5012888669419558E-7	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.999986672676278	WITHOUT_CLASSIFICATION	1.3327323721995663E-5	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999625309149565	WITHOUT_CLASSIFICATION	3.746908504356163E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999992597361419	WITHOUT_CLASSIFICATION	7.40263858118323E-7	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999990701141294	WITHOUT_CLASSIFICATION	9.298858705449982E-7	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9997511825558633	WITHOUT_CLASSIFICATION	2.488174441367684E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.5043963656487415	DEFECT	0.49560363435125854	WITHOUT_CLASSIFICATION
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9999524514914298	WITHOUT_CLASSIFICATION	4.754850857018054E-5	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999999675594362	WITHOUT_CLASSIFICATION	3.2440563763680626E-8	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999999850618733	WITHOUT_CLASSIFICATION	1.493812668032266E-8	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999999965112101	WITHOUT_CLASSIFICATION	3.4887899430267507E-9	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999689842612365	WITHOUT_CLASSIFICATION	3.101573876361819E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999999630434628	WITHOUT_CLASSIFICATION	3.695653725040784E-8	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999996317380874	WITHOUT_CLASSIFICATION	3.6826191270382825E-7	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999997959369136	WITHOUT_CLASSIFICATION	2.0406308652261474E-7	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999985091392	WITHOUT_CLASSIFICATION	1.4908607783079836E-9	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.999999362555134	WITHOUT_CLASSIFICATION	6.374448659464184E-7	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999999942668869	WITHOUT_CLASSIFICATION	5.7331131065959585E-9	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999999352901866	WITHOUT_CLASSIFICATION	6.470981346030878E-8	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999385143732018	WITHOUT_CLASSIFICATION	6.148562679825521E-5	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999962413050618	WITHOUT_CLASSIFICATION	3.7586949380596105E-6	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.99998839613976	WITHOUT_CLASSIFICATION	1.1603860240038022E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999999585479087	WITHOUT_CLASSIFICATION	4.145209129021517E-8	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9998836459056782	WITHOUT_CLASSIFICATION	1.1635409432176807E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999999140062975	WITHOUT_CLASSIFICATION	8.599370246680294E-8	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999945338796239	WITHOUT_CLASSIFICATION	5.4661203761389476E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.999987492635665	WITHOUT_CLASSIFICATION	1.2507364334964798E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999204867032734	WITHOUT_CLASSIFICATION	7.951329672670985E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999999607263182	WITHOUT_CLASSIFICATION	3.927368172336766E-8	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.99999999056403	WITHOUT_CLASSIFICATION	9.435969871790447E-9	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999908509319	WITHOUT_CLASSIFICATION	9.149068088221813E-9	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999314694573	WITHOUT_CLASSIFICATION	6.853054263905862E-8	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999314694573	WITHOUT_CLASSIFICATION	6.853054263905862E-8	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999999879467264	WITHOUT_CLASSIFICATION	1.205327351212087E-8	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999992257459889	WITHOUT_CLASSIFICATION	7.742540112139061E-7	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.999999914903966	WITHOUT_CLASSIFICATION	8.50960339143315E-8	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.6985590544643047	WITHOUT_CLASSIFICATION	0.3014409455356954	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999923040879	WITHOUT_CLASSIFICATION	7.69591212013852E-9	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999998663600004	WITHOUT_CLASSIFICATION	1.3363999962697275E-7	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.999996709730221	WITHOUT_CLASSIFICATION	3.290269778871736E-6	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999996390332642	WITHOUT_CLASSIFICATION	3.6096673575238416E-7	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9998740222366367	WITHOUT_CLASSIFICATION	1.2597776336325264E-4	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999999633304163	WITHOUT_CLASSIFICATION	3.6669583625074925E-8	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999988522013491	WITHOUT_CLASSIFICATION	1.1477986508930785E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999988522013491	WITHOUT_CLASSIFICATION	1.1477986508930785E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999988522013491	WITHOUT_CLASSIFICATION	1.1477986508930785E-6	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999994300994502	WITHOUT_CLASSIFICATION	5.699005496926116E-7	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999993467673447	WITHOUT_CLASSIFICATION	6.532326552209732E-7	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999985723094653	WITHOUT_CLASSIFICATION	1.4276905345817036E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999993085681853	WITHOUT_CLASSIFICATION	6.914318147494605E-7	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999993085681853	WITHOUT_CLASSIFICATION	6.914318147494605E-7	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999966726832406	WITHOUT_CLASSIFICATION	3.3273167594459245E-6	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999941880365396	WITHOUT_CLASSIFICATION	5.811963460423759E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999999079442663	WITHOUT_CLASSIFICATION	9.205573378903116E-8	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999997095129252	WITHOUT_CLASSIFICATION	2.904870748803815E-7	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999984222430008	WITHOUT_CLASSIFICATION	1.5777569991552397E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999982630968751	WITHOUT_CLASSIFICATION	1.7369031248425072E-6	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999998041345417	WITHOUT_CLASSIFICATION	1.95865458358387E-7	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999939484243714	WITHOUT_CLASSIFICATION	6.051575628661884E-6	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9978353755638877	WITHOUT_CLASSIFICATION	0.0021646244361123376	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999994477466504	WITHOUT_CLASSIFICATION	5.522533496610175E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999994477466504	WITHOUT_CLASSIFICATION	5.522533496610175E-7	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999998195323189	WITHOUT_CLASSIFICATION	1.8046768118806371E-7	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999747995631991	WITHOUT_CLASSIFICATION	2.520043680083862E-5	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999989798975631	WITHOUT_CLASSIFICATION	1.0201024369152218E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.99998283121272	WITHOUT_CLASSIFICATION	1.7168787279974566E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999958072225631	WITHOUT_CLASSIFICATION	4.192777436883282E-6	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999999911958676	WITHOUT_CLASSIFICATION	8.804132428289757E-9	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999987548803753	WITHOUT_CLASSIFICATION	1.2451196246674365E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999954572039965	WITHOUT_CLASSIFICATION	4.542796003438631E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.999997756862999	WITHOUT_CLASSIFICATION	2.2431370009908097E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999970245888048	WITHOUT_CLASSIFICATION	2.9754111952656537E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999997976875137	WITHOUT_CLASSIFICATION	2.0231248635282647E-7	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999963993755171	WITHOUT_CLASSIFICATION	3.6006244829448737E-6	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999983351202106	WITHOUT_CLASSIFICATION	1.6648797893735299E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.999999582590346	WITHOUT_CLASSIFICATION	4.1740965405126216E-7	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.999987481181802	WITHOUT_CLASSIFICATION	1.2518818197928732E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999990489029811	WITHOUT_CLASSIFICATION	9.510970189863706E-7	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999726751680464	WITHOUT_CLASSIFICATION	2.7324831953603042E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999746857129204	WITHOUT_CLASSIFICATION	2.5314287079690134E-5	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999972919275699	WITHOUT_CLASSIFICATION	2.7080724302188434E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.999993531148047	WITHOUT_CLASSIFICATION	6.468851952919662E-6	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9961681669058892	WITHOUT_CLASSIFICATION	0.0038318330941107246	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999998624694937	WITHOUT_CLASSIFICATION	1.3753050626054556E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999995327302137	WITHOUT_CLASSIFICATION	4.6726978628407864E-7	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999991495104611	WITHOUT_CLASSIFICATION	8.504895388057725E-7	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999964075936778	WITHOUT_CLASSIFICATION	3.59240632230516E-6	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.999998036194341	WITHOUT_CLASSIFICATION	1.9638056589836955E-6	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999998021168557	WITHOUT_CLASSIFICATION	1.978831443300195E-7	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999995566168582	WITHOUT_CLASSIFICATION	4.4338314180912325E-7	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9999335125835384	WITHOUT_CLASSIFICATION	6.648741646161212E-5	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999957596105452	WITHOUT_CLASSIFICATION	4.24038945488138E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.999981737719187	WITHOUT_CLASSIFICATION	1.8262280812990607E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999989831924078	WITHOUT_CLASSIFICATION	1.0168075921849365E-6	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999980106875496	WITHOUT_CLASSIFICATION	1.989312450510227E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.999981737719187	WITHOUT_CLASSIFICATION	1.8262280812990607E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.999994959660051	WITHOUT_CLASSIFICATION	5.04033994903931E-6	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999992806115396	WITHOUT_CLASSIFICATION	7.193884604400411E-7	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999990979476973	WITHOUT_CLASSIFICATION	9.020523026859824E-7	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999998149752066	WITHOUT_CLASSIFICATION	1.8502479331298574E-7	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999974600023169	WITHOUT_CLASSIFICATION	2.5399976830901667E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9998944069574527	WITHOUT_CLASSIFICATION	1.055930425473946E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999996753374141	WITHOUT_CLASSIFICATION	3.2466258602087127E-7	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999593640573449	WITHOUT_CLASSIFICATION	4.063594265522522E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999017822669048	WITHOUT_CLASSIFICATION	9.821773309518914E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999719751895104	WITHOUT_CLASSIFICATION	2.8024810489614382E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999088342419802	WITHOUT_CLASSIFICATION	9.116575801984173E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.999827054070278	WITHOUT_CLASSIFICATION	1.7294592972207684E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999580882843108	WITHOUT_CLASSIFICATION	4.1911715689210606E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9997931114624	WITHOUT_CLASSIFICATION	2.0688853759985563E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999985133634445	WITHOUT_CLASSIFICATION	1.4866365554814061E-6	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999949367623862	WITHOUT_CLASSIFICATION	5.06323761378809E-6	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999983832649045	WITHOUT_CLASSIFICATION	1.6167350955057001E-6	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999753177553196	WITHOUT_CLASSIFICATION	2.4682244680522427E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.999999758261104	WITHOUT_CLASSIFICATION	2.4173889594673985E-7	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.99993744171168	WITHOUT_CLASSIFICATION	6.25582883200293E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999771516748637	WITHOUT_CLASSIFICATION	2.284832513627439E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999754424489713	WITHOUT_CLASSIFICATION	2.455755102871467E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999580956030503	WITHOUT_CLASSIFICATION	4.190439694977436E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.999979889388305	WITHOUT_CLASSIFICATION	2.011061169497421E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999820795750489	WITHOUT_CLASSIFICATION	1.792042495108022E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999997562183539	WITHOUT_CLASSIFICATION	2.4378164611451935E-7	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999705362235207	WITHOUT_CLASSIFICATION	2.946377647927811E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999999305323248	WITHOUT_CLASSIFICATION	6.946767523991886E-8	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999999188711689	WITHOUT_CLASSIFICATION	8.112883109780852E-8	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999997646659152	WITHOUT_CLASSIFICATION	2.3533408472131067E-7	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.999999084246438	WITHOUT_CLASSIFICATION	9.157535620123469E-7	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9995561602551434	WITHOUT_CLASSIFICATION	4.438397448566356E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9775093269250251	WITHOUT_CLASSIFICATION	0.022490673074974925	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999226959584474	WITHOUT_CLASSIFICATION	7.730404155257334E-5	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999980750467987	WITHOUT_CLASSIFICATION	1.9249532012448892E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999996534943776	WITHOUT_CLASSIFICATION	3.4650562238906357E-7	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999985914823528	WITHOUT_CLASSIFICATION	1.4085176471992439E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999794298973018	WITHOUT_CLASSIFICATION	2.0570102698156956E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.999999995769766	WITHOUT_CLASSIFICATION	4.23023406682971E-9	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999995599756466	WITHOUT_CLASSIFICATION	4.4002435350924823E-7	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.999998144087934	WITHOUT_CLASSIFICATION	1.85591206609899E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999992890153817	WITHOUT_CLASSIFICATION	7.109846182432183E-7	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999997472062965	WITHOUT_CLASSIFICATION	2.527937035806771E-7	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999987588123889	WITHOUT_CLASSIFICATION	1.2411876111381285E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999999047920481	WITHOUT_CLASSIFICATION	9.520795182059266E-8	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999996786469499	WITHOUT_CLASSIFICATION	3.2135305012690327E-7	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999991054847194	WITHOUT_CLASSIFICATION	8.945152806368656E-7	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999996257583149	WITHOUT_CLASSIFICATION	3.742416850876202E-7	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999994111089714	WITHOUT_CLASSIFICATION	5.888910287460095E-7	DEFECT
// space	WITHOUT_CLASSIFICATION	0.999999860272094	WITHOUT_CLASSIFICATION	1.3972790604827648E-7	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999981866469223	WITHOUT_CLASSIFICATION	1.813353077797844E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999997916694291	WITHOUT_CLASSIFICATION	2.0833057080807572E-7	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999978033165432	WITHOUT_CLASSIFICATION	2.1966834568176953E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999994111089714	WITHOUT_CLASSIFICATION	5.888910287460095E-7	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.6105052556015931	WITHOUT_CLASSIFICATION	0.389494744398407	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.6105052556015931	WITHOUT_CLASSIFICATION	0.389494744398407	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999999911955639	WITHOUT_CLASSIFICATION	8.804436041560915E-9	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999992779572338	WITHOUT_CLASSIFICATION	7.220427662330767E-7	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999997907972906	WITHOUT_CLASSIFICATION	2.092027093595858E-7	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999999836244661	WITHOUT_CLASSIFICATION	1.637553385482495E-8	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999994096305981	WITHOUT_CLASSIFICATION	5.903694019094238E-7	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999994894451942	WITHOUT_CLASSIFICATION	5.105548058029339E-7	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999918514538163	WITHOUT_CLASSIFICATION	8.148546183647134E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.5494399589966006	DEFECT	0.4505600410033996	WITHOUT_CLASSIFICATION
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999997356355027	WITHOUT_CLASSIFICATION	2.6436449735957896E-7	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9999647185703177	WITHOUT_CLASSIFICATION	3.528142968242601E-5	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999932078857	WITHOUT_CLASSIFICATION	6.7921143412933944E-9	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999985770491226	WITHOUT_CLASSIFICATION	1.4229508772561203E-6	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999777542944687	WITHOUT_CLASSIFICATION	2.2245705531370863E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999998632307378	WITHOUT_CLASSIFICATION	1.3676926220758456E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.999995754082865	WITHOUT_CLASSIFICATION	4.245917134986727E-6	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999976087614052	WITHOUT_CLASSIFICATION	2.391238594885314E-6	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999998871954684	WITHOUT_CLASSIFICATION	1.1280453159122756E-7	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999860837825202	WITHOUT_CLASSIFICATION	1.391621747978299E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999860837825202	WITHOUT_CLASSIFICATION	1.391621747978299E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999860837825202	WITHOUT_CLASSIFICATION	1.391621747978299E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999860837825202	WITHOUT_CLASSIFICATION	1.391621747978299E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999860837825202	WITHOUT_CLASSIFICATION	1.391621747978299E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.999995640912134	WITHOUT_CLASSIFICATION	4.359087865953571E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984605214468	WITHOUT_CLASSIFICATION	1.5394785532206498E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999205219179645	WITHOUT_CLASSIFICATION	7.947808203550817E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999955908626456	WITHOUT_CLASSIFICATION	4.409137354387107E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9995584740389764	WITHOUT_CLASSIFICATION	4.4152596102365666E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999740637188	WITHOUT_CLASSIFICATION	2.593628126586505E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999996928652234	WITHOUT_CLASSIFICATION	3.071347767079522E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999994772097839	WITHOUT_CLASSIFICATION	5.227902161976507E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999989667482175	WITHOUT_CLASSIFICATION	1.033251782484492E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999975021087135	WITHOUT_CLASSIFICATION	2.49789128642236E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999958869775313	WITHOUT_CLASSIFICATION	4.113022468675986E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999946860587103	WITHOUT_CLASSIFICATION	5.3139412896013445E-6	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999982046775173	WITHOUT_CLASSIFICATION	1.7953224826217571E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999969207454011	WITHOUT_CLASSIFICATION	3.0792545987534254E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999960564905681	WITHOUT_CLASSIFICATION	3.943509431861187E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999959496343893	WITHOUT_CLASSIFICATION	4.050365610712475E-6	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999977775863353	WITHOUT_CLASSIFICATION	2.222413664628848E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999971697341594	WITHOUT_CLASSIFICATION	2.8302658405475416E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999964080078025	WITHOUT_CLASSIFICATION	3.5919921974613497E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999966503365345	WITHOUT_CLASSIFICATION	3.3496634656026773E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999954439673112	WITHOUT_CLASSIFICATION	4.5560326888808584E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999957868791758	WITHOUT_CLASSIFICATION	4.213120824221072E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999928882186065	WITHOUT_CLASSIFICATION	7.111781393386751E-6	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999964817664007	WITHOUT_CLASSIFICATION	3.5182335993646537E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999960063496716	WITHOUT_CLASSIFICATION	3.993650328462799E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.999995635425174	WITHOUT_CLASSIFICATION	4.3645748259974645E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999975966863142	WITHOUT_CLASSIFICATION	2.4033136857581063E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999966256363518	WITHOUT_CLASSIFICATION	3.3743636482369715E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999939996245713	WITHOUT_CLASSIFICATION	6.0003754287132115E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999946120018282	WITHOUT_CLASSIFICATION	5.387998171861341E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999934725865264	WITHOUT_CLASSIFICATION	6.527413473540344E-6	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.999996361147611	WITHOUT_CLASSIFICATION	3.638852389042638E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999954116902056	WITHOUT_CLASSIFICATION	4.588309794448518E-6	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999954647477897	WITHOUT_CLASSIFICATION	4.535252210388785E-6	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999914619535495	WITHOUT_CLASSIFICATION	8.538046450537119E-6	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999932157265136	WITHOUT_CLASSIFICATION	6.784273486487923E-6	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.999995735249853	WITHOUT_CLASSIFICATION	4.2647501470497995E-6	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999949680896876	WITHOUT_CLASSIFICATION	5.031910312414709E-6	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.999996131726835	WITHOUT_CLASSIFICATION	3.868273165021026E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999949534948032	WITHOUT_CLASSIFICATION	5.046505196897017E-6	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999969176854069	WITHOUT_CLASSIFICATION	3.082314593092209E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999959929634917	WITHOUT_CLASSIFICATION	4.0070365081912E-6	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999940313146686	WITHOUT_CLASSIFICATION	5.968685331369059E-6	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999962338955019	WITHOUT_CLASSIFICATION	3.766104498292559E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999927792183247	WITHOUT_CLASSIFICATION	7.2207816752720095E-6	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999877917557332	WITHOUT_CLASSIFICATION	1.220824426689111E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999910352255734	WITHOUT_CLASSIFICATION	8.964774426596512E-6	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999971464521944	WITHOUT_CLASSIFICATION	2.853547805594841E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999942535731072	WITHOUT_CLASSIFICATION	5.74642689275291E-6	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999889864961837	WITHOUT_CLASSIFICATION	1.1013503816349838E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999205219179645	WITHOUT_CLASSIFICATION	7.947808203550817E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999927591988962	WITHOUT_CLASSIFICATION	7.2408011037630484E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999936271339703	WITHOUT_CLASSIFICATION	6.3728660296686765E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999912546667301	WITHOUT_CLASSIFICATION	8.745333269829148E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999913566705833	WITHOUT_CLASSIFICATION	8.643329416766168E-6	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999924790849597	WITHOUT_CLASSIFICATION	7.520915040332211E-6	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999929813198253	WITHOUT_CLASSIFICATION	7.018680174758369E-6	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999893051263999	WITHOUT_CLASSIFICATION	1.0694873600102082E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999918476532859	WITHOUT_CLASSIFICATION	8.15234671410806E-6	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999896979337208	WITHOUT_CLASSIFICATION	1.0302066279123917E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999898986783062	WITHOUT_CLASSIFICATION	1.0101321693738393E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999933225328076	WITHOUT_CLASSIFICATION	6.6774671923489035E-6	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999936005694474	WITHOUT_CLASSIFICATION	6.399430552563122E-6	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.999990623282546	WITHOUT_CLASSIFICATION	9.376717454038116E-6	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999911852807298	WITHOUT_CLASSIFICATION	8.814719270237528E-6	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999933274407082	WITHOUT_CLASSIFICATION	6.6725592918564936E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999967333779556	WITHOUT_CLASSIFICATION	3.2666220444697803E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.999993483323894	WITHOUT_CLASSIFICATION	6.516676105851278E-6	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999952340602195	WITHOUT_CLASSIFICATION	4.765939780591072E-6	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.999993337386166	WITHOUT_CLASSIFICATION	6.662613833911901E-6	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999951063650027	WITHOUT_CLASSIFICATION	4.893634997339495E-6	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999923359207614	WITHOUT_CLASSIFICATION	7.66407923865689E-6	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999941874350765	WITHOUT_CLASSIFICATION	5.812564923446816E-6	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999920180190892	WITHOUT_CLASSIFICATION	7.981980910685037E-6	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999949445339448	WITHOUT_CLASSIFICATION	5.055466055278294E-6	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999941855082	WITHOUT_CLASSIFICATION	5.8144918000827025E-6	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999944510584898	WITHOUT_CLASSIFICATION	5.548941510172613E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.999989549736196	WITHOUT_CLASSIFICATION	1.0450263803870233E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999937819067655	WITHOUT_CLASSIFICATION	6.218093234541742E-6	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999973257110523	WITHOUT_CLASSIFICATION	2.6742889477683095E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.999996887420163	WITHOUT_CLASSIFICATION	3.1125798370507513E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999942524971762	WITHOUT_CLASSIFICATION	5.747502823799882E-6	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999930649774483	WITHOUT_CLASSIFICATION	6.935022551661656E-6	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999942270097717	WITHOUT_CLASSIFICATION	5.772990228293015E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999948817012893	WITHOUT_CLASSIFICATION	5.1182987108166265E-6	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.999993931405679	WITHOUT_CLASSIFICATION	6.0685943209281604E-6	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999969533102023	WITHOUT_CLASSIFICATION	3.0466897976383843E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999954855662552	WITHOUT_CLASSIFICATION	4.514433744809152E-6	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999927428412179	WITHOUT_CLASSIFICATION	7.257158782204104E-6	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999930002965524	WITHOUT_CLASSIFICATION	6.999703447704113E-6	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999963070797204	WITHOUT_CLASSIFICATION	3.6929202796218046E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999949398840866	WITHOUT_CLASSIFICATION	5.060115913388684E-6	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999951985683321	WITHOUT_CLASSIFICATION	4.801431667986986E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999939682575744	WITHOUT_CLASSIFICATION	6.0317424256972295E-6	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999930193635898	WITHOUT_CLASSIFICATION	6.9806364102103E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999957706711341	WITHOUT_CLASSIFICATION	4.229328865867684E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999972797384219	WITHOUT_CLASSIFICATION	2.720261578060537E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999969107668552	WITHOUT_CLASSIFICATION	3.0892331449282676E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999950972167002	WITHOUT_CLASSIFICATION	4.902783299768839E-6	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.999995712104745	WITHOUT_CLASSIFICATION	4.287895254965865E-6	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999939908092933	WITHOUT_CLASSIFICATION	6.009190706625797E-6	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999957585416668	WITHOUT_CLASSIFICATION	4.241458333287493E-6	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999951650524989	WITHOUT_CLASSIFICATION	4.834947501114312E-6	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999962301488574	WITHOUT_CLASSIFICATION	3.7698511424939893E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999981128629222	WITHOUT_CLASSIFICATION	1.8871370778541193E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999971907579863	WITHOUT_CLASSIFICATION	2.8092420137462775E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999957299029357	WITHOUT_CLASSIFICATION	4.270097064285918E-6	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999977028211096	WITHOUT_CLASSIFICATION	2.297178890428842E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999968047924449	WITHOUT_CLASSIFICATION	3.1952075551726646E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999963825229636	WITHOUT_CLASSIFICATION	3.617477036378337E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.999996372556813	WITHOUT_CLASSIFICATION	3.6274431870705793E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999951606317112	WITHOUT_CLASSIFICATION	4.839368288830598E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999969301982911	WITHOUT_CLASSIFICATION	3.069801708833626E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999933340088948	WITHOUT_CLASSIFICATION	6.665991105201557E-6	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999957619714278	WITHOUT_CLASSIFICATION	4.238028572102249E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999971604306949	WITHOUT_CLASSIFICATION	2.8395693051099117E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999967334028439	WITHOUT_CLASSIFICATION	3.2665971561696108E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999978408990712	WITHOUT_CLASSIFICATION	2.1591009288571565E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999963149458024	WITHOUT_CLASSIFICATION	3.6850541975417376E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999961014451892	WITHOUT_CLASSIFICATION	3.898554810678065E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999967027122255	WITHOUT_CLASSIFICATION	3.2972877743862293E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999943971266717	WITHOUT_CLASSIFICATION	5.602873328338607E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999960118199602	WITHOUT_CLASSIFICATION	3.988180039761597E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999965135844926	WITHOUT_CLASSIFICATION	3.4864155075085584E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999903506633139	WITHOUT_CLASSIFICATION	9.649336686225824E-6	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999946046773799	WITHOUT_CLASSIFICATION	5.39532262008675E-6	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999939847726476	WITHOUT_CLASSIFICATION	6.015227352564548E-6	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999940073870687	WITHOUT_CLASSIFICATION	5.992612931370839E-6	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999930145969009	WITHOUT_CLASSIFICATION	6.985403099141765E-6	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999928040491615	WITHOUT_CLASSIFICATION	7.195950838494959E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999920523145689	WITHOUT_CLASSIFICATION	7.947685430987064E-6	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999930922696432	WITHOUT_CLASSIFICATION	6.907730356945079E-6	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999950574351347	WITHOUT_CLASSIFICATION	4.942564865226496E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999947110970663	WITHOUT_CLASSIFICATION	5.288902933687076E-6	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999951621593541	WITHOUT_CLASSIFICATION	4.8378406458748415E-6	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.999991298169423	WITHOUT_CLASSIFICATION	8.701830576971575E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.999994783251288	WITHOUT_CLASSIFICATION	5.216748711985889E-6	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999937931191353	WITHOUT_CLASSIFICATION	6.206880864776113E-6	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.999994000010772	WITHOUT_CLASSIFICATION	5.999989228046684E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999990051031006	WITHOUT_CLASSIFICATION	9.948968994010108E-6	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999950758811129	WITHOUT_CLASSIFICATION	4.924118887022613E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999964878238655	WITHOUT_CLASSIFICATION	3.5121761344835237E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.999995514446694	WITHOUT_CLASSIFICATION	4.485553305973919E-6	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999952246014197	WITHOUT_CLASSIFICATION	4.775398580372778E-6	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999941527680225	WITHOUT_CLASSIFICATION	5.847231977483748E-6	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999970604655918	WITHOUT_CLASSIFICATION	2.939534408141148E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999951930599212	WITHOUT_CLASSIFICATION	4.806940078817756E-6	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999958646381053	WITHOUT_CLASSIFICATION	4.135361894701256E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999971972452942	WITHOUT_CLASSIFICATION	2.8027547057976255E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999962535890654	WITHOUT_CLASSIFICATION	3.746410934594642E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999945906871376	WITHOUT_CLASSIFICATION	5.4093128624205005E-6	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999952601384289	WITHOUT_CLASSIFICATION	4.739861571152347E-6	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999943876376997	WITHOUT_CLASSIFICATION	5.612362300407742E-6	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999969023400993	WITHOUT_CLASSIFICATION	3.0976599006566168E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999966732230937	WITHOUT_CLASSIFICATION	3.3267769062947077E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.999996201057021	WITHOUT_CLASSIFICATION	3.798942978910383E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999982251898364	WITHOUT_CLASSIFICATION	1.7748101635892358E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999966418740798	WITHOUT_CLASSIFICATION	3.358125920226422E-6	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999968540836314	WITHOUT_CLASSIFICATION	3.1459163687006744E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999967907682417	WITHOUT_CLASSIFICATION	3.2092317583102524E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.999995973891416	WITHOUT_CLASSIFICATION	4.0261085839898865E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999969056673529	WITHOUT_CLASSIFICATION	3.0943326471857307E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.999995317863525	WITHOUT_CLASSIFICATION	4.682136475050262E-6	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999982116524854	WITHOUT_CLASSIFICATION	1.788347514644302E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.999996811696855	WITHOUT_CLASSIFICATION	3.188303145113713E-6	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999982130436945	WITHOUT_CLASSIFICATION	1.7869563055024756E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999982276414526	WITHOUT_CLASSIFICATION	1.7723585473779965E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999974562999672	WITHOUT_CLASSIFICATION	2.5437000327736337E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999965859989649	WITHOUT_CLASSIFICATION	3.414001035027057E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999974377923218	WITHOUT_CLASSIFICATION	2.5622076782328175E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999982007155104	WITHOUT_CLASSIFICATION	1.7992844895576194E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999974977091524	WITHOUT_CLASSIFICATION	2.5022908476922263E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999961226668705	WITHOUT_CLASSIFICATION	3.877333129522076E-6	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999973134580049	WITHOUT_CLASSIFICATION	2.6865419950050877E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999975906427896	WITHOUT_CLASSIFICATION	2.409357210418769E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999972416205447	WITHOUT_CLASSIFICATION	2.7583794552719868E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999962749156197	WITHOUT_CLASSIFICATION	3.7250843801726526E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999968677822066	WITHOUT_CLASSIFICATION	3.132217793382374E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999970742304578	WITHOUT_CLASSIFICATION	2.9257695422515877E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999921146888906	WITHOUT_CLASSIFICATION	7.885311109288291E-6	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999970482735552	WITHOUT_CLASSIFICATION	2.9517264448279538E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999980582694027	WITHOUT_CLASSIFICATION	1.9417305972785175E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999979938344278	WITHOUT_CLASSIFICATION	2.0061655721762565E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999952874334933	WITHOUT_CLASSIFICATION	4.712566506644085E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999929248181324	WITHOUT_CLASSIFICATION	7.075181867517121E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999946090606023	WITHOUT_CLASSIFICATION	5.390939397648931E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999974841625243	WITHOUT_CLASSIFICATION	2.5158374756206026E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999952082866871	WITHOUT_CLASSIFICATION	4.791713312995376E-6	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999954821956673	WITHOUT_CLASSIFICATION	4.517804332774525E-6	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999948163555893	WITHOUT_CLASSIFICATION	5.183644410703608E-6	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999940329892232	WITHOUT_CLASSIFICATION	5.9670107768407775E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999947534596171	WITHOUT_CLASSIFICATION	5.246540382900461E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999938349883797	WITHOUT_CLASSIFICATION	6.1650116202639E-6	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999927872489475	WITHOUT_CLASSIFICATION	7.212751052613313E-6	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999931559798785	WITHOUT_CLASSIFICATION	6.844020121519885E-6	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999965227392955	WITHOUT_CLASSIFICATION	3.4772607046258353E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999951135017145	WITHOUT_CLASSIFICATION	4.886498285535662E-6	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999959310384503	WITHOUT_CLASSIFICATION	4.0689615496937E-6	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999943773129145	WITHOUT_CLASSIFICATION	5.622687085520792E-6	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.999995084718522	WITHOUT_CLASSIFICATION	4.915281477920236E-6	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999949608826092	WITHOUT_CLASSIFICATION	5.039117390783035E-6	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999948855951568	WITHOUT_CLASSIFICATION	5.114404843112443E-6	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999966274053013	WITHOUT_CLASSIFICATION	3.3725946987186013E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999948457214266	WITHOUT_CLASSIFICATION	5.154278573364891E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999956040395157	WITHOUT_CLASSIFICATION	4.39596048433732E-6	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999962211276914	WITHOUT_CLASSIFICATION	3.778872308607765E-6	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999952033472337	WITHOUT_CLASSIFICATION	4.796652766359825E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999966737145013	WITHOUT_CLASSIFICATION	3.3262854986771126E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999925533428782	WITHOUT_CLASSIFICATION	7.446657121761553E-6	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.999995452698141	WITHOUT_CLASSIFICATION	4.547301858900159E-6	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999958461489799	WITHOUT_CLASSIFICATION	4.153851020116498E-6	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999975467781655	WITHOUT_CLASSIFICATION	2.453221834452078E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999969284191637	WITHOUT_CLASSIFICATION	3.0715808362931703E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999946453658005	WITHOUT_CLASSIFICATION	5.3546341994222E-6	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999938713006095	WITHOUT_CLASSIFICATION	6.1286993905804115E-6	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999962371939363	WITHOUT_CLASSIFICATION	3.7628060637193244E-6	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.999996253204515	WITHOUT_CLASSIFICATION	3.746795484825781E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999963718204388	WITHOUT_CLASSIFICATION	3.6281795611954915E-6	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999950203799716	WITHOUT_CLASSIFICATION	4.979620028504775E-6	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999930564634686	WITHOUT_CLASSIFICATION	6.9435365314133895E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999926644068933	WITHOUT_CLASSIFICATION	7.335593106736145E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999929911576897	WITHOUT_CLASSIFICATION	7.00884231035322E-6	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999921523364923	WITHOUT_CLASSIFICATION	7.847663507726795E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999960231278213	WITHOUT_CLASSIFICATION	3.976872178691588E-6	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999958924976325	WITHOUT_CLASSIFICATION	4.107502367431109E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999968704406511	WITHOUT_CLASSIFICATION	3.129559348895019E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999942262136068	WITHOUT_CLASSIFICATION	5.7737863931591115E-6	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.999996774606809	WITHOUT_CLASSIFICATION	3.2253931908581313E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999943858272268	WITHOUT_CLASSIFICATION	5.614172773181417E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999915023341284	WITHOUT_CLASSIFICATION	8.497665871599885E-6	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999974383221435	WITHOUT_CLASSIFICATION	2.5616778565087925E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999948785970029	WITHOUT_CLASSIFICATION	5.121402997100259E-6	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999951335924044	WITHOUT_CLASSIFICATION	4.866407595573086E-6	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999949056395387	WITHOUT_CLASSIFICATION	5.094360461294757E-6	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999959831085563	WITHOUT_CLASSIFICATION	4.0168914437438084E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999947328895005	WITHOUT_CLASSIFICATION	5.267110499459823E-6	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999943061598636	WITHOUT_CLASSIFICATION	5.693840136331449E-6	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999936897112905	WITHOUT_CLASSIFICATION	6.310288709394606E-6	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999944046265739	WITHOUT_CLASSIFICATION	5.595373426087694E-6	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999953543438143	WITHOUT_CLASSIFICATION	4.645656185652626E-6	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999935669955856	WITHOUT_CLASSIFICATION	6.433004414361013E-6	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999944162007213	WITHOUT_CLASSIFICATION	5.583799278639538E-6	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999951569076774	WITHOUT_CLASSIFICATION	4.843092322556216E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.999994335420487	WITHOUT_CLASSIFICATION	5.664579513043109E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999950597971088	WITHOUT_CLASSIFICATION	4.940202891187157E-6	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999953811943979	WITHOUT_CLASSIFICATION	4.618805602137749E-6	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.999993520664859	WITHOUT_CLASSIFICATION	6.479335140988932E-6	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999940402836811	WITHOUT_CLASSIFICATION	5.9597163188778E-6	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999949593412888	WITHOUT_CLASSIFICATION	5.040658711216194E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999950620914196	WITHOUT_CLASSIFICATION	4.937908580344025E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999945716592551	WITHOUT_CLASSIFICATION	5.428340744927135E-6	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999967688191621	WITHOUT_CLASSIFICATION	3.231180837859039E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999963337182352	WITHOUT_CLASSIFICATION	3.6662817648714024E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999960889224856	WITHOUT_CLASSIFICATION	3.911077514377506E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999951807642673	WITHOUT_CLASSIFICATION	4.81923573268508E-6	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.999994767796797	WITHOUT_CLASSIFICATION	5.232203203033349E-6	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999950307105071	WITHOUT_CLASSIFICATION	4.969289492912793E-6	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999965619296457	WITHOUT_CLASSIFICATION	3.4380703543032763E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999931155711744	WITHOUT_CLASSIFICATION	6.884428825554987E-6	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999962259579399	WITHOUT_CLASSIFICATION	3.7740420599694817E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.999996440116928	WITHOUT_CLASSIFICATION	3.5598830720415982E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.999994795258685	WITHOUT_CLASSIFICATION	5.204741315110174E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999848821610536	WITHOUT_CLASSIFICATION	1.5117838946381738E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999889865603289	WITHOUT_CLASSIFICATION	1.1013439671102975E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999973595203988	WITHOUT_CLASSIFICATION	2.640479601195514E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999932292247229	WITHOUT_CLASSIFICATION	6.7707752770959905E-6	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.999990328541718	WITHOUT_CLASSIFICATION	9.671458282031821E-6	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999893086346892	WITHOUT_CLASSIFICATION	1.0691365310940846E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999921799951775	WITHOUT_CLASSIFICATION	7.820004822474354E-6	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.999985493431498	WITHOUT_CLASSIFICATION	1.450656850197465E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999916992801455	WITHOUT_CLASSIFICATION	8.300719854417174E-6	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999895734315914	WITHOUT_CLASSIFICATION	1.042656840856452E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999879325271599	WITHOUT_CLASSIFICATION	1.2067472840092962E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999942744548815	WITHOUT_CLASSIFICATION	5.725545118487241E-6	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999962742838565	WITHOUT_CLASSIFICATION	3.7257161434170057E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999970188060505	WITHOUT_CLASSIFICATION	2.9811939494769442E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999976392470656	WITHOUT_CLASSIFICATION	2.3607529344181375E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999966565053658	WITHOUT_CLASSIFICATION	3.3434946341407117E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999983607395846	WITHOUT_CLASSIFICATION	1.6392604154369439E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9997721524514658	WITHOUT_CLASSIFICATION	2.2784754853423622E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.999977261550643	WITHOUT_CLASSIFICATION	2.2738449356926385E-5	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999773320736852	WITHOUT_CLASSIFICATION	2.2667926314737336E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9997648955237086	WITHOUT_CLASSIFICATION	2.3510447629136472E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9997190748107575	WITHOUT_CLASSIFICATION	2.809251892425053E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999574305846599	WITHOUT_CLASSIFICATION	4.256941534011836E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999331151550263	WITHOUT_CLASSIFICATION	6.688484497381494E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999995170254263	WITHOUT_CLASSIFICATION	4.829745736145321E-7	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9998976599455972	WITHOUT_CLASSIFICATION	1.0234005440286015E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999504774193542	WITHOUT_CLASSIFICATION	4.952258064587694E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.999991295866922	WITHOUT_CLASSIFICATION	8.704133077954811E-6	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999933026217194	WITHOUT_CLASSIFICATION	6.697378280597478E-6	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.999342828870447	WITHOUT_CLASSIFICATION	6.571711295530908E-4	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999962685136228	WITHOUT_CLASSIFICATION	3.731486377178282E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9990863766865443	WITHOUT_CLASSIFICATION	9.136233134557125E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998667548842982	WITHOUT_CLASSIFICATION	1.332451157018185E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9995926888652195	WITHOUT_CLASSIFICATION	4.073111347805499E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999994281224884	WITHOUT_CLASSIFICATION	5.718775116192728E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999924813345	WITHOUT_CLASSIFICATION	7.518665538749114E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998817314658517	WITHOUT_CLASSIFICATION	1.1826853414837256E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999987185950913	WITHOUT_CLASSIFICATION	1.281404908738547E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999999428044954	WITHOUT_CLASSIFICATION	5.7195504492062514E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999957950151	WITHOUT_CLASSIFICATION	4.204984972467632E-9	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999957950151	WITHOUT_CLASSIFICATION	4.204984972467632E-9	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999967086658939	WITHOUT_CLASSIFICATION	3.291334106162795E-6	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9999862369377113	WITHOUT_CLASSIFICATION	1.3763062288763201E-5	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999341162691677	WITHOUT_CLASSIFICATION	6.588373083230469E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999871113759033	WITHOUT_CLASSIFICATION	1.288862409668712E-5	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999595342765268	WITHOUT_CLASSIFICATION	4.046572347312307E-5	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999989261846304	WITHOUT_CLASSIFICATION	1.0738153696687236E-6	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.999858964146386	WITHOUT_CLASSIFICATION	1.410358536140969E-4	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999786322502453	WITHOUT_CLASSIFICATION	2.1367749754664952E-5	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.996005039107325	WITHOUT_CLASSIFICATION	0.003994960892675075	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999997947293896	WITHOUT_CLASSIFICATION	2.0527061037651705E-7	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.99999961467056	WITHOUT_CLASSIFICATION	3.8532944007100826E-7	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9994789415440642	WITHOUT_CLASSIFICATION	5.210584559356583E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9981087984538363	WITHOUT_CLASSIFICATION	0.0018912015461637658	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999984801886327	WITHOUT_CLASSIFICATION	1.519811367349927E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999997844091163	WITHOUT_CLASSIFICATION	2.1559088374565294E-7	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999979726464094	WITHOUT_CLASSIFICATION	2.0273535905753834E-6	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.999999973272359	WITHOUT_CLASSIFICATION	2.672764097419472E-8	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9997919864755836	WITHOUT_CLASSIFICATION	2.0801352441621895E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9997334911592186	WITHOUT_CLASSIFICATION	2.665088407814053E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999410400181648	WITHOUT_CLASSIFICATION	5.895998183525809E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999999818499917	WITHOUT_CLASSIFICATION	1.8150008306446346E-8	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999985914105542	WITHOUT_CLASSIFICATION	1.408589445787494E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.8116586268639542	WITHOUT_CLASSIFICATION	0.1883413731360458	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999998429256116	WITHOUT_CLASSIFICATION	1.5707438846008328E-7	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.8116586268639542	WITHOUT_CLASSIFICATION	0.1883413731360458	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.999998813027126	WITHOUT_CLASSIFICATION	1.1869728739083573E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999996890701686	WITHOUT_CLASSIFICATION	3.109298314465175E-7	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.6690460139453649	DEFECT	0.33095398605463505	WITHOUT_CLASSIFICATION
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999950263044368	WITHOUT_CLASSIFICATION	4.973695563199471E-6	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9998181247497566	WITHOUT_CLASSIFICATION	1.8187525024347507E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999978599835444	WITHOUT_CLASSIFICATION	2.140016455690508E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999978599835444	WITHOUT_CLASSIFICATION	2.140016455690508E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999978599835444	WITHOUT_CLASSIFICATION	2.140016455690508E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999992225183025	WITHOUT_CLASSIFICATION	7.774816975843444E-7	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999967590913735	WITHOUT_CLASSIFICATION	3.2409086263803097E-6	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999999757242327	WITHOUT_CLASSIFICATION	2.4275767272916626E-8	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999737944012188	WITHOUT_CLASSIFICATION	2.6205598781186144E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999737944012188	WITHOUT_CLASSIFICATION	2.6205598781186144E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999737944012188	WITHOUT_CLASSIFICATION	2.6205598781186144E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999737944012188	WITHOUT_CLASSIFICATION	2.6205598781186144E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999737944012188	WITHOUT_CLASSIFICATION	2.6205598781186144E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999737944012188	WITHOUT_CLASSIFICATION	2.6205598781186144E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998964052659571	WITHOUT_CLASSIFICATION	1.0359473404290481E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998964052659571	WITHOUT_CLASSIFICATION	1.0359473404290481E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998964052659571	WITHOUT_CLASSIFICATION	1.0359473404290481E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998964052659571	WITHOUT_CLASSIFICATION	1.0359473404290481E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998964052659571	WITHOUT_CLASSIFICATION	1.0359473404290481E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999846953013661	WITHOUT_CLASSIFICATION	1.5304698633924713E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999846953013661	WITHOUT_CLASSIFICATION	1.5304698633924713E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999846953013661	WITHOUT_CLASSIFICATION	1.5304698633924713E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999846953013661	WITHOUT_CLASSIFICATION	1.5304698633924713E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999846953013661	WITHOUT_CLASSIFICATION	1.5304698633924713E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999553498871538	WITHOUT_CLASSIFICATION	4.46501128462303E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999553498871538	WITHOUT_CLASSIFICATION	4.46501128462303E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999553498871538	WITHOUT_CLASSIFICATION	4.46501128462303E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999553498871538	WITHOUT_CLASSIFICATION	4.46501128462303E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999553498871538	WITHOUT_CLASSIFICATION	4.46501128462303E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999553498871538	WITHOUT_CLASSIFICATION	4.46501128462303E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998785404036802	WITHOUT_CLASSIFICATION	1.2145959631983793E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998785404036802	WITHOUT_CLASSIFICATION	1.2145959631983793E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998785404036802	WITHOUT_CLASSIFICATION	1.2145959631983793E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998785404036802	WITHOUT_CLASSIFICATION	1.2145959631983793E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998785404036802	WITHOUT_CLASSIFICATION	1.2145959631983793E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998212608036133	WITHOUT_CLASSIFICATION	1.7873919638655898E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998212608036133	WITHOUT_CLASSIFICATION	1.7873919638655898E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998212608036133	WITHOUT_CLASSIFICATION	1.7873919638655898E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998212608036133	WITHOUT_CLASSIFICATION	1.7873919638655898E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998212608036133	WITHOUT_CLASSIFICATION	1.7873919638655898E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999205219179645	WITHOUT_CLASSIFICATION	7.947808203550817E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999205219179645	WITHOUT_CLASSIFICATION	7.947808203550817E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999205219179645	WITHOUT_CLASSIFICATION	7.947808203550817E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999205219179645	WITHOUT_CLASSIFICATION	7.947808203550817E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999205219179645	WITHOUT_CLASSIFICATION	7.947808203550817E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999955908626456	WITHOUT_CLASSIFICATION	4.409137354387107E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999999740637188	WITHOUT_CLASSIFICATION	2.593628126586505E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999996928652234	WITHOUT_CLASSIFICATION	3.071347767079522E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999994772097839	WITHOUT_CLASSIFICATION	5.227902161976507E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999989667482175	WITHOUT_CLASSIFICATION	1.033251782484492E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999969820939412	WITHOUT_CLASSIFICATION	3.017906058938508E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999966503365345	WITHOUT_CLASSIFICATION	3.3496634656026773E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999960063496716	WITHOUT_CLASSIFICATION	3.993650328462799E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999939996245713	WITHOUT_CLASSIFICATION	6.0003754287132115E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999946120018282	WITHOUT_CLASSIFICATION	5.387998171861341E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999936976774296	WITHOUT_CLASSIFICATION	6.302322570448752E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999934725865264	WITHOUT_CLASSIFICATION	6.527413473540344E-6	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999972175757242	WITHOUT_CLASSIFICATION	2.7824242757272298E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999960865759608	WITHOUT_CLASSIFICATION	3.9134240391944205E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999955697919285	WITHOUT_CLASSIFICATION	4.430208071428E-6	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999954067791571	WITHOUT_CLASSIFICATION	4.593220842861861E-6	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999956887493872	WITHOUT_CLASSIFICATION	4.311250612835124E-6	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999977287206682	WITHOUT_CLASSIFICATION	2.2712793317876875E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999967645247579	WITHOUT_CLASSIFICATION	3.2354752421477572E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.999996478014522	WITHOUT_CLASSIFICATION	3.521985478184081E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999945314621773	WITHOUT_CLASSIFICATION	5.468537822706321E-6	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999940796041513	WITHOUT_CLASSIFICATION	5.920395848676219E-6	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999966673280178	WITHOUT_CLASSIFICATION	3.332671982263511E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999945870535994	WITHOUT_CLASSIFICATION	5.412946400632293E-6	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999964787403902	WITHOUT_CLASSIFICATION	3.521259609753545E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.999995784020852	WITHOUT_CLASSIFICATION	4.215979148037573E-6	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999974229948647	WITHOUT_CLASSIFICATION	2.577005135369296E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999946495431251	WITHOUT_CLASSIFICATION	5.3504568749252775E-6	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999951680427429	WITHOUT_CLASSIFICATION	4.831957257014812E-6	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999945687012526	WITHOUT_CLASSIFICATION	5.431298747376133E-6	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999945218126228	WITHOUT_CLASSIFICATION	5.478187377227807E-6	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999952344539749	WITHOUT_CLASSIFICATION	4.765546025083806E-6	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.999993974968308	WITHOUT_CLASSIFICATION	6.0250316920084255E-6	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999966800988598	WITHOUT_CLASSIFICATION	3.319901140360218E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999949188265365	WITHOUT_CLASSIFICATION	5.081173463483775E-6	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999932122484524	WITHOUT_CLASSIFICATION	6.787751547581948E-6	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999954342350688	WITHOUT_CLASSIFICATION	4.565764931223172E-6	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999943116931648	WITHOUT_CLASSIFICATION	5.688306835205982E-6	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999964095092811	WITHOUT_CLASSIFICATION	3.5904907189119353E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999975258042045	WITHOUT_CLASSIFICATION	2.4741957954482474E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999968953900203	WITHOUT_CLASSIFICATION	3.1046099796703395E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999958751892642	WITHOUT_CLASSIFICATION	4.12481073570636E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999946126181796	WITHOUT_CLASSIFICATION	5.387381820391799E-6	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999834516634212	WITHOUT_CLASSIFICATION	1.6548336578777237E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999880726954036	WITHOUT_CLASSIFICATION	1.1927304596371249E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999863950347236	WITHOUT_CLASSIFICATION	1.3604965276394994E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999935741362654	WITHOUT_CLASSIFICATION	6.425863734522336E-6	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999938233587586	WITHOUT_CLASSIFICATION	6.176641241376995E-6	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999892861768619	WITHOUT_CLASSIFICATION	1.0713823138040975E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999936271339703	WITHOUT_CLASSIFICATION	6.3728660296686765E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999912546667301	WITHOUT_CLASSIFICATION	8.745333269829148E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999913566705833	WITHOUT_CLASSIFICATION	8.643329416766168E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999918476532859	WITHOUT_CLASSIFICATION	8.15234671410806E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999967333779556	WITHOUT_CLASSIFICATION	3.2666220444697803E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.999989549736196	WITHOUT_CLASSIFICATION	1.0450263803870233E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999950218573668	WITHOUT_CLASSIFICATION	4.978142633299263E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999937819067655	WITHOUT_CLASSIFICATION	6.218093234541742E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999939682575744	WITHOUT_CLASSIFICATION	6.0317424256972295E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999957706711341	WITHOUT_CLASSIFICATION	4.229328865867684E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999951099827036	WITHOUT_CLASSIFICATION	4.89001729642694E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999972797384219	WITHOUT_CLASSIFICATION	2.720261578060537E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999969107668552	WITHOUT_CLASSIFICATION	3.0892331449282676E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999928593518772	WITHOUT_CLASSIFICATION	7.140648122751349E-6	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999916048506073	WITHOUT_CLASSIFICATION	8.395149392716719E-6	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.999990560646574	WITHOUT_CLASSIFICATION	9.439353425969784E-6	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999946187603337	WITHOUT_CLASSIFICATION	5.3812396663255215E-6	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999932099433151	WITHOUT_CLASSIFICATION	6.790056684876586E-6	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999948241644943	WITHOUT_CLASSIFICATION	5.1758355057062595E-6	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999914774950442	WITHOUT_CLASSIFICATION	8.522504955663887E-6	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999906543371366	WITHOUT_CLASSIFICATION	9.345662863260571E-6	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.999993038890987	WITHOUT_CLASSIFICATION	6.961109013003444E-6	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999933711119084	WITHOUT_CLASSIFICATION	6.628888091516403E-6	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999895000338276	WITHOUT_CLASSIFICATION	1.0499966172493884E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.999992266053041	WITHOUT_CLASSIFICATION	7.733946958899462E-6	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999932394741842	WITHOUT_CLASSIFICATION	6.76052581578995E-6	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999898153171484	WITHOUT_CLASSIFICATION	1.0184682851670295E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999913311157262	WITHOUT_CLASSIFICATION	8.668884273768495E-6	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999954771795879	WITHOUT_CLASSIFICATION	4.5228204120996865E-6	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999937092167406	WITHOUT_CLASSIFICATION	6.29078325953286E-6	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999928582262886	WITHOUT_CLASSIFICATION	7.141773711487052E-6	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999944551635179	WITHOUT_CLASSIFICATION	5.544836482009526E-6	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999901346212821	WITHOUT_CLASSIFICATION	9.86537871785047E-6	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999956005436541	WITHOUT_CLASSIFICATION	4.399456345855367E-6	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999949976513108	WITHOUT_CLASSIFICATION	5.002348689248564E-6	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999949494770897	WITHOUT_CLASSIFICATION	5.050522910334595E-6	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999929372683884	WITHOUT_CLASSIFICATION	7.062731611549599E-6	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999954597354909	WITHOUT_CLASSIFICATION	4.540264509067887E-6	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999929379679771	WITHOUT_CLASSIFICATION	7.062032022918101E-6	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999946641379307	WITHOUT_CLASSIFICATION	5.33586206930043E-6	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999951314751835	WITHOUT_CLASSIFICATION	4.868524816492673E-6	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999951925004567	WITHOUT_CLASSIFICATION	4.80749954327555E-6	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999964584632017	WITHOUT_CLASSIFICATION	3.5415367981879593E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999921272825419	WITHOUT_CLASSIFICATION	7.872717458033759E-6	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999959808757433	WITHOUT_CLASSIFICATION	4.019124256738631E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999976036418157	WITHOUT_CLASSIFICATION	2.396358184285437E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999960363686097	WITHOUT_CLASSIFICATION	3.963631390247134E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999984329273965	WITHOUT_CLASSIFICATION	1.5670726035431347E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999965589821652	WITHOUT_CLASSIFICATION	3.441017834852046E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999951606317112	WITHOUT_CLASSIFICATION	4.839368288830598E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999946507600133	WITHOUT_CLASSIFICATION	5.34923998663872E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999969301982911	WITHOUT_CLASSIFICATION	3.069801708833626E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999943971266717	WITHOUT_CLASSIFICATION	5.602873328338607E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999965135844926	WITHOUT_CLASSIFICATION	3.4864155075085584E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999920523145689	WITHOUT_CLASSIFICATION	7.947685430987064E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999947110970663	WITHOUT_CLASSIFICATION	5.288902933687076E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.999994783251288	WITHOUT_CLASSIFICATION	5.216748711985889E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999964878238655	WITHOUT_CLASSIFICATION	3.5121761344835237E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999951930599212	WITHOUT_CLASSIFICATION	4.806940078817756E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.999996779328905	WITHOUT_CLASSIFICATION	3.2206710950577022E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999959041660978	WITHOUT_CLASSIFICATION	4.095833902174484E-6	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999951297238262	WITHOUT_CLASSIFICATION	4.870276173837379E-6	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999959493757481	WITHOUT_CLASSIFICATION	4.050624251869781E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999958243587176	WITHOUT_CLASSIFICATION	4.175641282409254E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.999996986522923	WITHOUT_CLASSIFICATION	3.0134770770392814E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.999994705461108	WITHOUT_CLASSIFICATION	5.294538891979422E-6	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999967385698688	WITHOUT_CLASSIFICATION	3.261430131055909E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999955291610217	WITHOUT_CLASSIFICATION	4.4708389783003996E-6	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999965932114936	WITHOUT_CLASSIFICATION	3.4067885063929028E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999957599345018	WITHOUT_CLASSIFICATION	4.240065498235907E-6	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.999993228774644	WITHOUT_CLASSIFICATION	6.771225356068006E-6	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999970010045353	WITHOUT_CLASSIFICATION	2.9989954648320045E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999970648370423	WITHOUT_CLASSIFICATION	2.93516295767882E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.999997158741167	WITHOUT_CLASSIFICATION	2.841258832949673E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999921887692518	WITHOUT_CLASSIFICATION	7.811230748266281E-6	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999939160122556	WITHOUT_CLASSIFICATION	6.08398774434608E-6	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.999994947862649	WITHOUT_CLASSIFICATION	5.05213735102366E-6	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999957413289251	WITHOUT_CLASSIFICATION	4.258671074930456E-6	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.999994897800201	WITHOUT_CLASSIFICATION	5.102199799038375E-6	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999948653899813	WITHOUT_CLASSIFICATION	5.134610018801759E-6	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999958326728259	WITHOUT_CLASSIFICATION	4.167327174150183E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999940391035547	WITHOUT_CLASSIFICATION	5.960896445310781E-6	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999955789332607	WITHOUT_CLASSIFICATION	4.421066739260188E-6	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999932107627115	WITHOUT_CLASSIFICATION	6.789237288515064E-6	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999909154617633	WITHOUT_CLASSIFICATION	9.084538236790246E-6	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999948007139139	WITHOUT_CLASSIFICATION	5.199286086175901E-6	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999945449318552	WITHOUT_CLASSIFICATION	5.4550681448074445E-6	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.999995023763299	WITHOUT_CLASSIFICATION	4.97623670102307E-6	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999970584016439	WITHOUT_CLASSIFICATION	2.9415983560787346E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999956546764562	WITHOUT_CLASSIFICATION	4.3453235438163E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.999993584859555	WITHOUT_CLASSIFICATION	6.415140445014514E-6	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999968738244508	WITHOUT_CLASSIFICATION	3.1261755491940637E-6	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999957184069873	WITHOUT_CLASSIFICATION	4.28159301274711E-6	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.999995479173387	WITHOUT_CLASSIFICATION	4.520826612882602E-6	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999950568393637	WITHOUT_CLASSIFICATION	4.9431606362333825E-6	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999975562829078	WITHOUT_CLASSIFICATION	2.443717092196655E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999959051242933	WITHOUT_CLASSIFICATION	4.094875706773367E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999944830730816	WITHOUT_CLASSIFICATION	5.516926918475935E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999969105069719	WITHOUT_CLASSIFICATION	3.0894930280315638E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999982276414526	WITHOUT_CLASSIFICATION	1.7723585473779965E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999975671684923	WITHOUT_CLASSIFICATION	2.4328315077639304E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999982007155104	WITHOUT_CLASSIFICATION	1.7992844895576194E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999975906427896	WITHOUT_CLASSIFICATION	2.409357210418769E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999968677822066	WITHOUT_CLASSIFICATION	3.132217793382374E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999929248181324	WITHOUT_CLASSIFICATION	7.075181867517121E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999946090606023	WITHOUT_CLASSIFICATION	5.390939397648931E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999947534596171	WITHOUT_CLASSIFICATION	5.246540382900461E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999938349883797	WITHOUT_CLASSIFICATION	6.1650116202639E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.99999455301701	WITHOUT_CLASSIFICATION	5.446982990022369E-6	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999977564439497	WITHOUT_CLASSIFICATION	2.24355605027818E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999968994481617	WITHOUT_CLASSIFICATION	3.1005518382935105E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999969654422521	WITHOUT_CLASSIFICATION	3.03455774792369E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999974024348612	WITHOUT_CLASSIFICATION	2.597565138727731E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999915366434566	WITHOUT_CLASSIFICATION	8.463356543382268E-6	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999975667745963	WITHOUT_CLASSIFICATION	2.433225403693068E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999975829514727	WITHOUT_CLASSIFICATION	2.4170485272527846E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999983598832101	WITHOUT_CLASSIFICATION	1.6401167899729366E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999971860078635	WITHOUT_CLASSIFICATION	2.8139921364819346E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999966969960836	WITHOUT_CLASSIFICATION	3.3030039163161637E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999980534176824	WITHOUT_CLASSIFICATION	1.94658231760519E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999972832333386	WITHOUT_CLASSIFICATION	2.716766661416751E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999968248646002	WITHOUT_CLASSIFICATION	3.1751353997917595E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.99999659088343	WITHOUT_CLASSIFICATION	3.409116570077338E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.99999616441206	WITHOUT_CLASSIFICATION	3.835587940101191E-6	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999956324420419	WITHOUT_CLASSIFICATION	4.367557958081447E-6	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999958795936997	WITHOUT_CLASSIFICATION	4.120406300266342E-6	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999974633681433	WITHOUT_CLASSIFICATION	2.5366318567360483E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999975347926686	WITHOUT_CLASSIFICATION	2.4652073314204783E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.999996646992987	WITHOUT_CLASSIFICATION	3.353007013083504E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.999994970468889	WITHOUT_CLASSIFICATION	5.029531111043157E-6	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999937293909625	WITHOUT_CLASSIFICATION	6.270609037429057E-6	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999960193533658	WITHOUT_CLASSIFICATION	3.98064663411189E-6	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.999994816907067	WITHOUT_CLASSIFICATION	5.18309293295819E-6	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999953470524566	WITHOUT_CLASSIFICATION	4.652947543368581E-6	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999916501925198	WITHOUT_CLASSIFICATION	8.349807480240219E-6	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999929805103435	WITHOUT_CLASSIFICATION	7.019489656473294E-6	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999937342293018	WITHOUT_CLASSIFICATION	6.265770698190061E-6	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999954636865503	WITHOUT_CLASSIFICATION	4.536313449698823E-6	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999937639153743	WITHOUT_CLASSIFICATION	6.236084625676171E-6	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999947151831095	WITHOUT_CLASSIFICATION	5.2848168906294775E-6	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999940763894359	WITHOUT_CLASSIFICATION	5.923610564025962E-6	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999959962719436	WITHOUT_CLASSIFICATION	4.0037280564197705E-6	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.999995492992457	WITHOUT_CLASSIFICATION	4.5070075429967696E-6	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999955417273315	WITHOUT_CLASSIFICATION	4.4582726684124895E-6	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.999992831869084	WITHOUT_CLASSIFICATION	7.168130915932253E-6	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999960053332421	WITHOUT_CLASSIFICATION	3.994666757971598E-6	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999939948509957	WITHOUT_CLASSIFICATION	6.0051490042466465E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999966737145013	WITHOUT_CLASSIFICATION	3.3262854986771126E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999969284191637	WITHOUT_CLASSIFICATION	3.0715808362931703E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999946453658005	WITHOUT_CLASSIFICATION	5.3546341994222E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999963969634265	WITHOUT_CLASSIFICATION	3.603036573410929E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999929911576897	WITHOUT_CLASSIFICATION	7.00884231035322E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999960231278213	WITHOUT_CLASSIFICATION	3.976872178691588E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999943858272268	WITHOUT_CLASSIFICATION	5.614172773181417E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999915023341284	WITHOUT_CLASSIFICATION	8.497665871599885E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.999994335420487	WITHOUT_CLASSIFICATION	5.664579513043109E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999950597971088	WITHOUT_CLASSIFICATION	4.940202891187157E-6	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.999995996247735	WITHOUT_CLASSIFICATION	4.003752264927042E-6	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999978573432272	WITHOUT_CLASSIFICATION	2.14265677268638E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999952934039597	WITHOUT_CLASSIFICATION	4.706596040404081E-6	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999956090852479	WITHOUT_CLASSIFICATION	4.390914752141141E-6	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.99999469204603	WITHOUT_CLASSIFICATION	5.307953969938467E-6	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999955833841442	WITHOUT_CLASSIFICATION	4.416615855780173E-6	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999966737103532	WITHOUT_CLASSIFICATION	3.3262896468299565E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999945419416523	WITHOUT_CLASSIFICATION	5.458058347744384E-6	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999940909495263	WITHOUT_CLASSIFICATION	5.909050473716484E-6	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.999994597426544	WITHOUT_CLASSIFICATION	5.402573456115462E-6	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999941117083523	WITHOUT_CLASSIFICATION	5.8882916476470145E-6	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999961287507095	WITHOUT_CLASSIFICATION	3.871249290473608E-6	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999951814666241	WITHOUT_CLASSIFICATION	4.818533375826666E-6	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999958734390118	WITHOUT_CLASSIFICATION	4.126560988262413E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999962506383262	WITHOUT_CLASSIFICATION	3.749361673808178E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999970472490802	WITHOUT_CLASSIFICATION	2.9527509196733987E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999958418288777	WITHOUT_CLASSIFICATION	4.1581711222727644E-6	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999960229534695	WITHOUT_CLASSIFICATION	3.9770465304398475E-6	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999943083141142	WITHOUT_CLASSIFICATION	5.691685885842716E-6	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999939691413369	WITHOUT_CLASSIFICATION	6.030858663114213E-6	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999951643507721	WITHOUT_CLASSIFICATION	4.835649227880618E-6	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999944569156175	WITHOUT_CLASSIFICATION	5.543084382470095E-6	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999968941745286	WITHOUT_CLASSIFICATION	3.105825471424696E-6	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999958550351471	WITHOUT_CLASSIFICATION	4.144964852813581E-6	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999950930887479	WITHOUT_CLASSIFICATION	4.906911252158913E-6	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999940843918897	WITHOUT_CLASSIFICATION	5.9156081103131715E-6	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999934611292276	WITHOUT_CLASSIFICATION	6.5388707724150475E-6	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999946211341831	WITHOUT_CLASSIFICATION	5.378865816881117E-6	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999956087162941	WITHOUT_CLASSIFICATION	4.391283705881937E-6	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999960356268459	WITHOUT_CLASSIFICATION	3.964373154150782E-6	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999921175250335	WITHOUT_CLASSIFICATION	7.882474966527732E-6	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999943472109022	WITHOUT_CLASSIFICATION	5.652789097883792E-6	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999948413344076	WITHOUT_CLASSIFICATION	5.158665592373486E-6	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999933423336435	WITHOUT_CLASSIFICATION	6.657666356625242E-6	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999960372022774	WITHOUT_CLASSIFICATION	3.962797722601154E-6	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.999992168588078	WITHOUT_CLASSIFICATION	7.831411921901272E-6	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999946891089051	WITHOUT_CLASSIFICATION	5.310891094819757E-6	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999925420358912	WITHOUT_CLASSIFICATION	7.457964108890757E-6	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999949420547691	WITHOUT_CLASSIFICATION	5.0579452309277275E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.999993823719861	WITHOUT_CLASSIFICATION	6.176280138883287E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999950620914196	WITHOUT_CLASSIFICATION	4.937908580344025E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999945716592551	WITHOUT_CLASSIFICATION	5.428340744927135E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999848821610536	WITHOUT_CLASSIFICATION	1.5117838946381738E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999939977425446	WITHOUT_CLASSIFICATION	6.002257455474794E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999973595203988	WITHOUT_CLASSIFICATION	2.640479601195514E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.999990328541718	WITHOUT_CLASSIFICATION	9.671458282031821E-6	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999921799951775	WITHOUT_CLASSIFICATION	7.820004822474354E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999976392470656	WITHOUT_CLASSIFICATION	2.3607529344181375E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999966565053658	WITHOUT_CLASSIFICATION	3.3434946341407117E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999956012124299	WITHOUT_CLASSIFICATION	4.398787570024133E-6	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999976932428426	WITHOUT_CLASSIFICATION	2.306757157448777E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999954511868272	WITHOUT_CLASSIFICATION	4.548813172730896E-6	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999898030320463	WITHOUT_CLASSIFICATION	1.0196967953610792E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999963683667006	WITHOUT_CLASSIFICATION	3.631633299337301E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999952844092374	WITHOUT_CLASSIFICATION	4.7155907626321495E-6	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999956051198895	WITHOUT_CLASSIFICATION	4.394880110481115E-6	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999956238071698	WITHOUT_CLASSIFICATION	4.376192830188089E-6	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999935339941429	WITHOUT_CLASSIFICATION	6.4660058571338125E-6	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999966775642564	WITHOUT_CLASSIFICATION	3.322435743508403E-6	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999954476181628	WITHOUT_CLASSIFICATION	4.552381837089247E-6	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999966728206966	WITHOUT_CLASSIFICATION	3.327179303457416E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999864356574029	WITHOUT_CLASSIFICATION	1.356434259719533E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999968459569621	WITHOUT_CLASSIFICATION	3.15404303784124E-6	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999936378381475	WITHOUT_CLASSIFICATION	6.362161852478734E-6	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999904689820899	WITHOUT_CLASSIFICATION	9.531017910118518E-6	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999941023675187	WITHOUT_CLASSIFICATION	5.8976324812936965E-6	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999928593083832	WITHOUT_CLASSIFICATION	7.140691616728432E-6	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999947328729044	WITHOUT_CLASSIFICATION	5.26712709550148E-6	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999919557523596	WITHOUT_CLASSIFICATION	8.044247640410617E-6	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999810677388574	WITHOUT_CLASSIFICATION	1.893226114252686E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999867168370117	WITHOUT_CLASSIFICATION	1.3283162988375681E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999933932215439	WITHOUT_CLASSIFICATION	6.606778456136235E-6	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999938181498235	WITHOUT_CLASSIFICATION	6.181850176549305E-6	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999934325921158	WITHOUT_CLASSIFICATION	6.567407884171535E-6	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999926883289917	WITHOUT_CLASSIFICATION	7.3116710083629795E-6	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999915461337686	WITHOUT_CLASSIFICATION	8.453866231384692E-6	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999952972019388	WITHOUT_CLASSIFICATION	4.702798061168515E-6	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.999993683682053	WITHOUT_CLASSIFICATION	6.316317946985729E-6	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999926238934236	WITHOUT_CLASSIFICATION	7.376106576427463E-6	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999967796186818	WITHOUT_CLASSIFICATION	3.2203813181030084E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999943515076531	WITHOUT_CLASSIFICATION	5.6484923468406795E-6	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999960131332882	WITHOUT_CLASSIFICATION	3.986866711766689E-6	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999954552678779	WITHOUT_CLASSIFICATION	4.544732122145206E-6	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.999995817158178	WITHOUT_CLASSIFICATION	4.18284182208334E-6	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999924862026531	WITHOUT_CLASSIFICATION	7.51379734684854E-6	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999966264263213	WITHOUT_CLASSIFICATION	3.373573678756128E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.999997420916313	WITHOUT_CLASSIFICATION	2.5790836868980463E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.999996656269657	WITHOUT_CLASSIFICATION	3.3437303430397922E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999574305846599	WITHOUT_CLASSIFICATION	4.256941534011836E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999331151550263	WITHOUT_CLASSIFICATION	6.688484497381494E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999933026217194	WITHOUT_CLASSIFICATION	6.697378280597478E-6	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999962685136228	WITHOUT_CLASSIFICATION	3.731486377178282E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9990863766865443	WITHOUT_CLASSIFICATION	9.136233134557125E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998667548842982	WITHOUT_CLASSIFICATION	1.332451157018185E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9995926888652195	WITHOUT_CLASSIFICATION	4.073111347805499E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999845810099551	WITHOUT_CLASSIFICATION	1.5418990044881547E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.999995481895922	WITHOUT_CLASSIFICATION	4.518104077983652E-6	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.999996044597915	WITHOUT_CLASSIFICATION	3.9554020849567735E-6	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.999994747660769	WITHOUT_CLASSIFICATION	5.2523392310433674E-6	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.999997120671147	WITHOUT_CLASSIFICATION	2.879328853076756E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999970304378875	WITHOUT_CLASSIFICATION	2.969562112667064E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999974132693135	WITHOUT_CLASSIFICATION	2.5867306865181143E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999931832480943	WITHOUT_CLASSIFICATION	6.81675190574658E-6	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999918456656508	WITHOUT_CLASSIFICATION	8.15433434908612E-6	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999973620143321	WITHOUT_CLASSIFICATION	2.6379856678366934E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.99999695026272	WITHOUT_CLASSIFICATION	3.0497372801183076E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999916281571642	WITHOUT_CLASSIFICATION	8.371842835670586E-6	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999957970273329	WITHOUT_CLASSIFICATION	4.202972667144442E-6	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999919430894391	WITHOUT_CLASSIFICATION	8.056910560968826E-6	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999954407937517	WITHOUT_CLASSIFICATION	4.5592062483816715E-6	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999953678624731	WITHOUT_CLASSIFICATION	4.632137526856862E-6	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999936529513536	WITHOUT_CLASSIFICATION	6.347048646503226E-6	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999955472711757	WITHOUT_CLASSIFICATION	4.452728824296004E-6	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999913726663425	WITHOUT_CLASSIFICATION	8.627333657431154E-6	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999948927865668	WITHOUT_CLASSIFICATION	5.107213433135476E-6	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999928687921855	WITHOUT_CLASSIFICATION	7.131207814488306E-6	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.999984469899791	WITHOUT_CLASSIFICATION	1.553010020900388E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999753665354022	WITHOUT_CLASSIFICATION	2.463346459781358E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999970810564304	WITHOUT_CLASSIFICATION	2.9189435696195636E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999994385730016	WITHOUT_CLASSIFICATION	5.614269985099183E-7	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.99999715484017	WITHOUT_CLASSIFICATION	2.845159829992079E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9994777636371831	WITHOUT_CLASSIFICATION	5.22236362816855E-4	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999996529555301	WITHOUT_CLASSIFICATION	3.4704446989638805E-7	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999996380788027	WITHOUT_CLASSIFICATION	3.619211973848946E-7	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.999986863980351	WITHOUT_CLASSIFICATION	1.3136019649041584E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999924813345	WITHOUT_CLASSIFICATION	7.518665538749114E-9	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998817314658517	WITHOUT_CLASSIFICATION	1.1826853414837256E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999957950151	WITHOUT_CLASSIFICATION	4.204984972467632E-9	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999957950151	WITHOUT_CLASSIFICATION	4.204984972467632E-9	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9965298180496778	WITHOUT_CLASSIFICATION	0.0034701819503223544	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999843868242074	WITHOUT_CLASSIFICATION	1.5613175792559784E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999975034759643	WITHOUT_CLASSIFICATION	2.4965240357235836E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999985183010507	WITHOUT_CLASSIFICATION	1.481698949299143E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999990191729806	WITHOUT_CLASSIFICATION	9.80827019354338E-7	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999998794906778	WITHOUT_CLASSIFICATION	1.205093221905878E-7	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999997039755603	WITHOUT_CLASSIFICATION	2.960244397788824E-7	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999989603560788	WITHOUT_CLASSIFICATION	1.039643921259012E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999999837992098	WITHOUT_CLASSIFICATION	1.6200790218091472E-8	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999999818615602	WITHOUT_CLASSIFICATION	1.8138439805758227E-8	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999994675353876	WITHOUT_CLASSIFICATION	5.324646125317111E-7	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999999512957046	WITHOUT_CLASSIFICATION	4.8704295355284736E-8	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999999907991037	WITHOUT_CLASSIFICATION	9.200896284299851E-9	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999999849682608	WITHOUT_CLASSIFICATION	1.5031739221833907E-8	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.999999392820106	WITHOUT_CLASSIFICATION	6.071798940029947E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.999999392820106	WITHOUT_CLASSIFICATION	6.071798940029947E-7	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999991371609744	WITHOUT_CLASSIFICATION	8.628390254544185E-7	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.999999851404643	WITHOUT_CLASSIFICATION	1.4859535702406687E-7	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999999972468764	WITHOUT_CLASSIFICATION	2.7531236307332856E-9	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999997741402502	WITHOUT_CLASSIFICATION	2.2585974992395265E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999894292951516	WITHOUT_CLASSIFICATION	1.0570704848482586E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999806460749	WITHOUT_CLASSIFICATION	1.9353925125600813E-8	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999996304590144	WITHOUT_CLASSIFICATION	3.695409855964663E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999806460749	WITHOUT_CLASSIFICATION	1.9353925125600813E-8	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999966271451662	WITHOUT_CLASSIFICATION	3.372854833636024E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999478423508268	WITHOUT_CLASSIFICATION	5.215764917318106E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9852239284917375	WITHOUT_CLASSIFICATION	0.01477607150826254	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9965491512243106	WITHOUT_CLASSIFICATION	0.003450848775689353	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999834481146651	WITHOUT_CLASSIFICATION	1.655188533484252E-5	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999991275282963	WITHOUT_CLASSIFICATION	8.724717037566921E-7	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999999961756774	WITHOUT_CLASSIFICATION	3.8243226534850016E-9	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999960755775823	WITHOUT_CLASSIFICATION	3.924422417705202E-6	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999987830100115	WITHOUT_CLASSIFICATION	1.216989988454447E-6	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9823707328827019	WITHOUT_CLASSIFICATION	0.01762926711729809	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999997622289987	WITHOUT_CLASSIFICATION	2.3777100146454788E-7	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999980676562776	WITHOUT_CLASSIFICATION	1.932343722355418E-6	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999837860813351	WITHOUT_CLASSIFICATION	1.62139186648959E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999015149522252	WITHOUT_CLASSIFICATION	9.848504777478596E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999937784565	WITHOUT_CLASSIFICATION	6.2215435240026815E-9	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999999937784565	WITHOUT_CLASSIFICATION	6.2215435240026815E-9	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999993272534188	WITHOUT_CLASSIFICATION	6.727465812140956E-7	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999999821737683	WITHOUT_CLASSIFICATION	1.7826231739094187E-8	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999999550430088	WITHOUT_CLASSIFICATION	4.495699131276641E-8	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9996986307803898	WITHOUT_CLASSIFICATION	3.013692196102815E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999995947793495	WITHOUT_CLASSIFICATION	4.052206504621244E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999806460749	WITHOUT_CLASSIFICATION	1.9353925125600813E-8	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999993398731466	WITHOUT_CLASSIFICATION	6.601268534735747E-7	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999999498288785	WITHOUT_CLASSIFICATION	5.017112148382566E-8	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999991968835416	WITHOUT_CLASSIFICATION	8.031164583484113E-7	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999993650351908	WITHOUT_CLASSIFICATION	6.349648092285995E-7	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.999999996125568	WITHOUT_CLASSIFICATION	3.8744319639921886E-9	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999999965175921	WITHOUT_CLASSIFICATION	3.4824077950784386E-9	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999997337723022	WITHOUT_CLASSIFICATION	2.662276977576452E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.999998667177849	WITHOUT_CLASSIFICATION	1.3328221510044742E-6	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999999999441105	WITHOUT_CLASSIFICATION	5.58894283539689E-11	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999999653877133	WITHOUT_CLASSIFICATION	3.4612286654780864E-8	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999999985308538	WITHOUT_CLASSIFICATION	1.4691462716735034E-9	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.999999997439654	WITHOUT_CLASSIFICATION	2.5603461343342338E-9	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9998983093016147	WITHOUT_CLASSIFICATION	1.0169069838527725E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999597920941	WITHOUT_CLASSIFICATION	4.020790585237983E-8	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9999761441846767	WITHOUT_CLASSIFICATION	2.38558153233339E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999994842886633	WITHOUT_CLASSIFICATION	5.157113366747425E-7	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999988763008419	WITHOUT_CLASSIFICATION	1.1236991581188271E-6	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9999846935559048	WITHOUT_CLASSIFICATION	1.5306444095170044E-5	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.999999606055736	WITHOUT_CLASSIFICATION	3.9394426404594153E-7	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999998632961882	WITHOUT_CLASSIFICATION	1.3670381171479465E-7	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999999918786181	WITHOUT_CLASSIFICATION	8.121381851089093E-9	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9996899410745218	WITHOUT_CLASSIFICATION	3.1005892547815347E-4	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999999981492218	WITHOUT_CLASSIFICATION	1.8507782609908488E-9	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999999693791707	WITHOUT_CLASSIFICATION	3.0620829311088674E-8	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999991525673317	WITHOUT_CLASSIFICATION	8.474326683881958E-7	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999999946012985	WITHOUT_CLASSIFICATION	5.39870151234278E-9	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.999999942692433	WITHOUT_CLASSIFICATION	5.7307567098799766E-8	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999973848556644	WITHOUT_CLASSIFICATION	2.615144335625525E-6	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9999872364728221	WITHOUT_CLASSIFICATION	1.2763527177860452E-5	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999999134642276	WITHOUT_CLASSIFICATION	8.65357724018824E-8	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999788095291771	WITHOUT_CLASSIFICATION	2.1190470822927268E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999998840060437	WITHOUT_CLASSIFICATION	1.159939563122305E-7	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999999965764217	WITHOUT_CLASSIFICATION	3.423578339878783E-9	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9996584806457738	WITHOUT_CLASSIFICATION	3.4151935422621323E-4	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999987598954475	WITHOUT_CLASSIFICATION	1.2401045524949853E-6	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999997876486681	WITHOUT_CLASSIFICATION	2.1235133181490533E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999867729760621	WITHOUT_CLASSIFICATION	1.3227023937872225E-5	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.999999964395972	WITHOUT_CLASSIFICATION	3.56040279259378E-8	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999999611810276	WITHOUT_CLASSIFICATION	3.8818972455979127E-8	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999999977142858	WITHOUT_CLASSIFICATION	2.285714195015801E-9	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999845810099551	WITHOUT_CLASSIFICATION	1.5418990044881547E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999998166316787	WITHOUT_CLASSIFICATION	1.8336832133949759E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999994157045439	WITHOUT_CLASSIFICATION	5.842954561106417E-7	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999204867032734	WITHOUT_CLASSIFICATION	7.951329672670985E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999999607263182	WITHOUT_CLASSIFICATION	3.927368172336766E-8	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999478423508268	WITHOUT_CLASSIFICATION	5.215764917318106E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999971429283778	WITHOUT_CLASSIFICATION	2.8570716221674426E-6	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999998846008064	WITHOUT_CLASSIFICATION	1.1539919360424047E-7	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999939147099131	WITHOUT_CLASSIFICATION	6.0852900869465845E-6	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999775932277	WITHOUT_CLASSIFICATION	2.2406772331892076E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999775932277	WITHOUT_CLASSIFICATION	2.2406772331892076E-8	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999932477495038	WITHOUT_CLASSIFICATION	6.75225049617744E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999932477495038	WITHOUT_CLASSIFICATION	6.75225049617744E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999932477495038	WITHOUT_CLASSIFICATION	6.75225049617744E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999983399531911	WITHOUT_CLASSIFICATION	1.6600468088563683E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999983399531911	WITHOUT_CLASSIFICATION	1.6600468088563683E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.999991596330057	WITHOUT_CLASSIFICATION	8.403669943100769E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.999991596330057	WITHOUT_CLASSIFICATION	8.403669943100769E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999994030070277	WITHOUT_CLASSIFICATION	5.969929722463887E-7	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999922871326631	WITHOUT_CLASSIFICATION	7.71286733696235E-6	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999997102278159	WITHOUT_CLASSIFICATION	2.897721840801193E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999997102278159	WITHOUT_CLASSIFICATION	2.897721840801193E-7	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999997485427389	WITHOUT_CLASSIFICATION	2.514572611596979E-7	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999996857022172	WITHOUT_CLASSIFICATION	3.1429778277705786E-7	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.999984788400817	WITHOUT_CLASSIFICATION	1.5211599182984491E-5	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999999896563273	WITHOUT_CLASSIFICATION	1.0343672648825204E-8	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999945789857246	WITHOUT_CLASSIFICATION	5.421014275340214E-6	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999998588080666	WITHOUT_CLASSIFICATION	1.4119193329515308E-7	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999999771939595	WITHOUT_CLASSIFICATION	2.280604054502861E-8	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.999990026209906	WITHOUT_CLASSIFICATION	9.973790094056441E-6	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999969338722395	WITHOUT_CLASSIFICATION	3.0661277605271595E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999926733437983	WITHOUT_CLASSIFICATION	7.3266562016676105E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999998394956128	WITHOUT_CLASSIFICATION	1.605043871642165E-7	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.999999346701477	WITHOUT_CLASSIFICATION	6.532985229145725E-7	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999898882102641	WITHOUT_CLASSIFICATION	1.0111789735810032E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999966615028356	WITHOUT_CLASSIFICATION	3.338497164394279E-6	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999991390261422	WITHOUT_CLASSIFICATION	8.609738577781787E-7	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.999973298623482	WITHOUT_CLASSIFICATION	2.670137651804849E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999946257868435	WITHOUT_CLASSIFICATION	5.374213156553913E-6	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999897658092818	WITHOUT_CLASSIFICATION	1.0234190718257395E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999831489642834	WITHOUT_CLASSIFICATION	1.6851035716630918E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999596299292478	WITHOUT_CLASSIFICATION	4.0370070752297374E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.999999149706716	WITHOUT_CLASSIFICATION	8.502932840065605E-7	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999966924692887	WITHOUT_CLASSIFICATION	3.3075307113435843E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.999997871775217	WITHOUT_CLASSIFICATION	2.1282247830300184E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999997295817664	WITHOUT_CLASSIFICATION	2.704182335971322E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999991745878267	WITHOUT_CLASSIFICATION	8.254121731786527E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999981204678874	WITHOUT_CLASSIFICATION	1.879532112634637E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999859475280259	WITHOUT_CLASSIFICATION	1.405247197400524E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999906742587522	WITHOUT_CLASSIFICATION	9.325741247777603E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999973943852267	WITHOUT_CLASSIFICATION	2.6056147732686223E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999992046741905	WITHOUT_CLASSIFICATION	7.953258094240529E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999981889769683	WITHOUT_CLASSIFICATION	1.8110230316800566E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993333982188	WITHOUT_CLASSIFICATION	6.666017811931423E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997965298277	WITHOUT_CLASSIFICATION	2.0347017234184227E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998210933452	WITHOUT_CLASSIFICATION	1.789066549329671E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997965298277	WITHOUT_CLASSIFICATION	2.0347017234184227E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997965298277	WITHOUT_CLASSIFICATION	2.0347017234184227E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997965298277	WITHOUT_CLASSIFICATION	2.0347017234184227E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997965298277	WITHOUT_CLASSIFICATION	2.0347017234184227E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997965298277	WITHOUT_CLASSIFICATION	2.0347017234184227E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997965298277	WITHOUT_CLASSIFICATION	2.0347017234184227E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998210933452	WITHOUT_CLASSIFICATION	1.789066549329671E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998210933452	WITHOUT_CLASSIFICATION	1.789066549329671E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998210933452	WITHOUT_CLASSIFICATION	1.789066549329671E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998210933452	WITHOUT_CLASSIFICATION	1.789066549329671E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998210933452	WITHOUT_CLASSIFICATION	1.789066549329671E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998210933452	WITHOUT_CLASSIFICATION	1.789066549329671E-7	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9987436257465048	WITHOUT_CLASSIFICATION	0.0012563742534952298	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9997767378158936	WITHOUT_CLASSIFICATION	2.232621841064185E-4	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999978888155813	WITHOUT_CLASSIFICATION	2.1111844186723453E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9997260136270396	WITHOUT_CLASSIFICATION	2.7398637296046735E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999832652634644	WITHOUT_CLASSIFICATION	1.6734736535617387E-5	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999908459299456	WITHOUT_CLASSIFICATION	9.154070054541589E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999999901022807	WITHOUT_CLASSIFICATION	9.897719393966257E-9	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999998924081736	WITHOUT_CLASSIFICATION	1.0759182648929645E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999988920472194	WITHOUT_CLASSIFICATION	1.1079527807179591E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999995546236964	WITHOUT_CLASSIFICATION	4.45376303548142E-7	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.999994557018351	WITHOUT_CLASSIFICATION	5.442981649002938E-6	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999997903795721	WITHOUT_CLASSIFICATION	2.096204278148989E-7	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999997235849432	WITHOUT_CLASSIFICATION	2.7641505682082696E-7	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999999859477818	WITHOUT_CLASSIFICATION	1.4052218093315692E-8	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999998560412334	WITHOUT_CLASSIFICATION	1.4395876659756522E-7	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999996119979446	WITHOUT_CLASSIFICATION	3.880020554351334E-7	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999923353342466	WITHOUT_CLASSIFICATION	7.664665753457923E-6	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999946907908402	WITHOUT_CLASSIFICATION	5.309209159801841E-6	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999943100608131	WITHOUT_CLASSIFICATION	5.689939186938346E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999763595679525	WITHOUT_CLASSIFICATION	2.364043204751381E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999999675334079	WITHOUT_CLASSIFICATION	3.2466592065070935E-8	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999997327522323	WITHOUT_CLASSIFICATION	2.6724776768756503E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999996304590144	WITHOUT_CLASSIFICATION	3.695409855964663E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9992401932207303	WITHOUT_CLASSIFICATION	7.598067792696137E-4	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9999170414320748	WITHOUT_CLASSIFICATION	8.295856792515158E-5	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.999999892716266	WITHOUT_CLASSIFICATION	1.0728373403691508E-7	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.999998983926768	WITHOUT_CLASSIFICATION	1.0160732320225637E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999975168484898	WITHOUT_CLASSIFICATION	2.4831515101917287E-6	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999960242858859	WITHOUT_CLASSIFICATION	3.975714114181051E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999834385088571	WITHOUT_CLASSIFICATION	1.656149114288795E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999968119312828	WITHOUT_CLASSIFICATION	3.18806871715465E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999995469306203	WITHOUT_CLASSIFICATION	4.5306937979029084E-7	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999749833602869	WITHOUT_CLASSIFICATION	2.501663971311244E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999998084036511	WITHOUT_CLASSIFICATION	1.9159634893171158E-7	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999995861156881	WITHOUT_CLASSIFICATION	4.138843119803692E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999998227204842	WITHOUT_CLASSIFICATION	1.772795159422196E-7	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999999108870713	WITHOUT_CLASSIFICATION	8.911292862948496E-8	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999726909693236	WITHOUT_CLASSIFICATION	2.7309030676396403E-5	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999990259901783	WITHOUT_CLASSIFICATION	9.740098216544728E-7	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.999999614005246	WITHOUT_CLASSIFICATION	3.859947540451369E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999985815200757	WITHOUT_CLASSIFICATION	1.4184799243885822E-6	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999999951114026	WITHOUT_CLASSIFICATION	4.888597343674541E-9	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999999916321168	WITHOUT_CLASSIFICATION	8.367883137682123E-9	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999998038681082	WITHOUT_CLASSIFICATION	1.9613189181299196E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999998038681082	WITHOUT_CLASSIFICATION	1.9613189181299196E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999999686915291	WITHOUT_CLASSIFICATION	3.1308470858866304E-8	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999999686915291	WITHOUT_CLASSIFICATION	3.1308470858866304E-8	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999043481953	WITHOUT_CLASSIFICATION	9.565180465869506E-8	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999043481953	WITHOUT_CLASSIFICATION	9.565180465869506E-8	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999921563286577	WITHOUT_CLASSIFICATION	7.84367134231061E-6	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999999298194175	WITHOUT_CLASSIFICATION	7.018058253751918E-8	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999999837788088	WITHOUT_CLASSIFICATION	1.6221191223407377E-8	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999999098149112	WITHOUT_CLASSIFICATION	9.018508881128524E-8	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999966336405186	WITHOUT_CLASSIFICATION	3.3663594813402078E-6	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999958726285949	WITHOUT_CLASSIFICATION	4.127371405153954E-6	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.999999973569603	WITHOUT_CLASSIFICATION	2.6430397076879298E-8	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999687567905292	WITHOUT_CLASSIFICATION	3.1243209470823044E-5	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999999365685961	WITHOUT_CLASSIFICATION	6.343140390852943E-8	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999980496208393	WITHOUT_CLASSIFICATION	1.9503791607389886E-6	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.999984744728317	WITHOUT_CLASSIFICATION	1.5255271682906065E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999984834256209	WITHOUT_CLASSIFICATION	1.5165743789757163E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999980421974212	WITHOUT_CLASSIFICATION	1.957802578759447E-6	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9997606745310854	WITHOUT_CLASSIFICATION	2.3932546891461986E-4	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.999996261512131	WITHOUT_CLASSIFICATION	3.7384878689852165E-6	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.999999795461337	WITHOUT_CLASSIFICATION	2.0453866298865992E-7	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999989809332783	WITHOUT_CLASSIFICATION	1.0190667217041078E-6	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999840783031925	WITHOUT_CLASSIFICATION	1.5921696807568194E-5	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999997954012375	WITHOUT_CLASSIFICATION	2.045987626128532E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999995515587992	WITHOUT_CLASSIFICATION	4.4844120075685996E-7	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999995733870597	WITHOUT_CLASSIFICATION	4.2661294039911875E-7	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999451957490779	WITHOUT_CLASSIFICATION	5.480425092221128E-5	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999992455399503	WITHOUT_CLASSIFICATION	7.544600496019381E-7	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999990832549175	WITHOUT_CLASSIFICATION	9.167450824653104E-7	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999998704493697	WITHOUT_CLASSIFICATION	1.295506303660162E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999957020145158	WITHOUT_CLASSIFICATION	4.2979854841759555E-6	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999991998363865	WITHOUT_CLASSIFICATION	8.001636134384654E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997675073339	WITHOUT_CLASSIFICATION	2.3249266612847668E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997675073339	WITHOUT_CLASSIFICATION	2.3249266612847668E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997675073339	WITHOUT_CLASSIFICATION	2.3249266612847668E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987922575	WITHOUT_CLASSIFICATION	1.2077424343709815E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987922575	WITHOUT_CLASSIFICATION	1.2077424343709815E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999597920941	WITHOUT_CLASSIFICATION	4.020790585237983E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999597920941	WITHOUT_CLASSIFICATION	4.020790585237983E-8	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999999997463991	WITHOUT_CLASSIFICATION	2.536008534642899E-10	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9409733414698194	WITHOUT_CLASSIFICATION	0.059026658530180645	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.999999965622133	WITHOUT_CLASSIFICATION	3.4377867077102146E-8	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999998065142963	WITHOUT_CLASSIFICATION	1.9348570380562005E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997675073339	WITHOUT_CLASSIFICATION	2.3249266612847668E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997675073339	WITHOUT_CLASSIFICATION	2.3249266612847668E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999997675073339	WITHOUT_CLASSIFICATION	2.3249266612847668E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987922575	WITHOUT_CLASSIFICATION	1.2077424343709815E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987922575	WITHOUT_CLASSIFICATION	1.2077424343709815E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987922575	WITHOUT_CLASSIFICATION	1.2077424343709815E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999597920941	WITHOUT_CLASSIFICATION	4.020790585237983E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999999597920941	WITHOUT_CLASSIFICATION	4.020790585237983E-8	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999999215536082	WITHOUT_CLASSIFICATION	7.844639184656598E-8	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999999777311852	WITHOUT_CLASSIFICATION	2.226881475438339E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999869467269	WITHOUT_CLASSIFICATION	1.3053273027671586E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999869467269	WITHOUT_CLASSIFICATION	1.3053273027671586E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999869467269	WITHOUT_CLASSIFICATION	1.3053273027671586E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999869467269	WITHOUT_CLASSIFICATION	1.3053273027671586E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999869467269	WITHOUT_CLASSIFICATION	1.3053273027671586E-8	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.99999964620633	WITHOUT_CLASSIFICATION	3.537936700890746E-7	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999994973640289	WITHOUT_CLASSIFICATION	5.026359710330242E-7	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9990594237615024	WITHOUT_CLASSIFICATION	9.405762384975481E-4	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999996656391096	WITHOUT_CLASSIFICATION	3.3436089045066593E-7	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999994230513527	WITHOUT_CLASSIFICATION	5.769486472005821E-7	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999992657879713	WITHOUT_CLASSIFICATION	7.34212028798843E-7	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999945819967239	WITHOUT_CLASSIFICATION	5.4180032760873935E-6	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999996407363925	WITHOUT_CLASSIFICATION	3.592636075450543E-7	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999999548139004	WITHOUT_CLASSIFICATION	4.518609972394172E-8	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999991198705754	WITHOUT_CLASSIFICATION	8.801294244995385E-7	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999630952390532	WITHOUT_CLASSIFICATION	3.69047609467026E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999995924904962	WITHOUT_CLASSIFICATION	4.075095038114129E-7	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9998691763322591	WITHOUT_CLASSIFICATION	1.3082366774090247E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.999999261165151	WITHOUT_CLASSIFICATION	7.388348489473496E-7	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999933729103754	WITHOUT_CLASSIFICATION	6.627089624530654E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999995643782448	WITHOUT_CLASSIFICATION	4.356217553281798E-7	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999995643782448	WITHOUT_CLASSIFICATION	4.356217553281798E-7	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999995643782448	WITHOUT_CLASSIFICATION	4.356217553281798E-7	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999935159745001	WITHOUT_CLASSIFICATION	6.4840254997747755E-6	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999935169020537	WITHOUT_CLASSIFICATION	6.483097946205068E-6	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999996144873297	WITHOUT_CLASSIFICATION	3.855126703262079E-7	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999998057232041	WITHOUT_CLASSIFICATION	1.9427679587530202E-7	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999994761161188	WITHOUT_CLASSIFICATION	5.238838811093586E-7	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999936169816611	WITHOUT_CLASSIFICATION	6.383018338925562E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999984608359777	WITHOUT_CLASSIFICATION	1.5391640223666272E-6	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999999095149352	WITHOUT_CLASSIFICATION	9.04850647754459E-8	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999996379588509	WITHOUT_CLASSIFICATION	3.6204114905714785E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999942572849857	WITHOUT_CLASSIFICATION	5.742715014274175E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999978035327146	WITHOUT_CLASSIFICATION	2.196467285289783E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999998992668535	WITHOUT_CLASSIFICATION	1.0073314645591482E-7	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999993005934669	WITHOUT_CLASSIFICATION	6.994065331600773E-7	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999979045653	WITHOUT_CLASSIFICATION	2.0954346735870443E-9	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999999971458806	WITHOUT_CLASSIFICATION	2.85411944099815E-9	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999969372129669	WITHOUT_CLASSIFICATION	3.062787033077616E-6	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999993947727532	WITHOUT_CLASSIFICATION	6.052272468078438E-7	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999999806944765	WITHOUT_CLASSIFICATION	1.930552349703572E-8	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999998980852097	WITHOUT_CLASSIFICATION	1.019147903107447E-7	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999866467102378	WITHOUT_CLASSIFICATION	1.3353289762152165E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.999223912192316	WITHOUT_CLASSIFICATION	7.760878076840339E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999984182766486	WITHOUT_CLASSIFICATION	1.5817233513949354E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9993882748733854	WITHOUT_CLASSIFICATION	6.117251266144494E-4	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999993566043428	WITHOUT_CLASSIFICATION	6.433956571917641E-7	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999984550011809	WITHOUT_CLASSIFICATION	1.5449988191297177E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999983908309326	WITHOUT_CLASSIFICATION	1.609169067537955E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999990460461787	WITHOUT_CLASSIFICATION	9.53953821232761E-7	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999983605529206	WITHOUT_CLASSIFICATION	1.639447079451945E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999885147102776	WITHOUT_CLASSIFICATION	1.1485289722403765E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999828541047158	WITHOUT_CLASSIFICATION	1.7145895284228198E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.999961451505493	WITHOUT_CLASSIFICATION	3.854849450691417E-5	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999804353670219	WITHOUT_CLASSIFICATION	1.9564632978180017E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9999698050018802	WITHOUT_CLASSIFICATION	3.0194998119851184E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999522051231049	WITHOUT_CLASSIFICATION	4.779487689503244E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9999487829651664	WITHOUT_CLASSIFICATION	5.121703483366161E-5	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.999974614596965	WITHOUT_CLASSIFICATION	2.5385403034987866E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999991863277796	WITHOUT_CLASSIFICATION	8.136722204629092E-7	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999986190484969	WITHOUT_CLASSIFICATION	1.3809515031371174E-6	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999933464732	WITHOUT_CLASSIFICATION	6.653526828638927E-9	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9992112094181174	WITHOUT_CLASSIFICATION	7.887905818825724E-4	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999491265365934	WITHOUT_CLASSIFICATION	5.0873463406721917E-5	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9996821482283639	WITHOUT_CLASSIFICATION	3.1785177163617663E-4	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999794882180352	WITHOUT_CLASSIFICATION	2.051178196493582E-5	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999940933467285	WITHOUT_CLASSIFICATION	5.906653271579083E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999996303071589	WITHOUT_CLASSIFICATION	3.696928411279119E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999936495815157	WITHOUT_CLASSIFICATION	6.350418484356679E-6	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999926097332044	WITHOUT_CLASSIFICATION	7.390266795605818E-6	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999926097332044	WITHOUT_CLASSIFICATION	7.390266795605818E-6	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999988723030392	WITHOUT_CLASSIFICATION	1.1276969608241982E-6	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999991447177445	WITHOUT_CLASSIFICATION	8.552822554639463E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999920868493883	WITHOUT_CLASSIFICATION	7.913150611708188E-6	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999946339735422	WITHOUT_CLASSIFICATION	5.3660264578007906E-6	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999995853015579	WITHOUT_CLASSIFICATION	4.1469844209789767E-7	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999999156519128	WITHOUT_CLASSIFICATION	8.43480871207656E-8	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999999745854334	WITHOUT_CLASSIFICATION	2.5414566593328756E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999839825131	WITHOUT_CLASSIFICATION	1.6017486977990077E-8	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999999262879001	WITHOUT_CLASSIFICATION	7.371209988662992E-8	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999992705656864	WITHOUT_CLASSIFICATION	7.294343136037153E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999839394322	WITHOUT_CLASSIFICATION	1.6060567744843446E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999839394322	WITHOUT_CLASSIFICATION	1.6060567744843446E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999839394322	WITHOUT_CLASSIFICATION	1.6060567744843446E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999839394322	WITHOUT_CLASSIFICATION	1.6060567744843446E-8	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999989262540377	WITHOUT_CLASSIFICATION	1.0737459622805715E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999998547857463	WITHOUT_CLASSIFICATION	1.4521425373063745E-7	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999999453283904	WITHOUT_CLASSIFICATION	5.46716095613749E-8	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999996166101619	WITHOUT_CLASSIFICATION	3.8338983806858684E-7	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9999775423178049	WITHOUT_CLASSIFICATION	2.2457682195191632E-5	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9999832208037028	WITHOUT_CLASSIFICATION	1.677919629712436E-5	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999869631863203	WITHOUT_CLASSIFICATION	1.3036813679660329E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999965872254054	WITHOUT_CLASSIFICATION	3.412774594734552E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999965872254054	WITHOUT_CLASSIFICATION	3.412774594734552E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999889297054111	WITHOUT_CLASSIFICATION	1.1070294588953773E-5	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999997743705615	WITHOUT_CLASSIFICATION	2.256294384402109E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999882040872	WITHOUT_CLASSIFICATION	1.1795912763995361E-8	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9998772982014834	WITHOUT_CLASSIFICATION	1.2270179851665977E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9998772982014834	WITHOUT_CLASSIFICATION	1.2270179851665977E-4	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.999949271911548	WITHOUT_CLASSIFICATION	5.0728088451995836E-5	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998364059886	WITHOUT_CLASSIFICATION	1.6359401142934344E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998364059886	WITHOUT_CLASSIFICATION	1.6359401142934344E-7	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9993880651838898	WITHOUT_CLASSIFICATION	6.119348161101922E-4	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999999879758049	WITHOUT_CLASSIFICATION	1.2024195175066594E-8	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999978695267941	WITHOUT_CLASSIFICATION	2.1304732058907655E-6	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9982695066294721	WITHOUT_CLASSIFICATION	0.0017304933705278712	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999964440893095	WITHOUT_CLASSIFICATION	3.555910690515588E-6	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999999921315178	WITHOUT_CLASSIFICATION	7.868482218034853E-9	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.999934679149063	WITHOUT_CLASSIFICATION	6.532085093692023E-5	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999991527898445	WITHOUT_CLASSIFICATION	8.472101553762551E-7	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999999870607997	WITHOUT_CLASSIFICATION	1.293920037282426E-8	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999986261219544	WITHOUT_CLASSIFICATION	1.3738780455508994E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.999998182783399	WITHOUT_CLASSIFICATION	1.8172166009377616E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999997637367555	WITHOUT_CLASSIFICATION	2.36263244387724E-7	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999877609932608	WITHOUT_CLASSIFICATION	1.2239006739086325E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999945363750715	WITHOUT_CLASSIFICATION	5.463624928424258E-6	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.999999885881253	WITHOUT_CLASSIFICATION	1.1411874699268136E-7	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999833887701098	WITHOUT_CLASSIFICATION	1.66112298901697E-5	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999992651320487	WITHOUT_CLASSIFICATION	7.348679512837954E-7	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.999999843322681	WITHOUT_CLASSIFICATION	1.566773189519262E-7	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999999776285733	WITHOUT_CLASSIFICATION	2.2371426779402252E-8	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9993382245934621	WITHOUT_CLASSIFICATION	6.617754065378869E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9996825230274105	WITHOUT_CLASSIFICATION	3.1747697258951123E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999945876194082	WITHOUT_CLASSIFICATION	5.4123805918800304E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999960207974935	WITHOUT_CLASSIFICATION	3.979202506437801E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9999734087503644	WITHOUT_CLASSIFICATION	2.6591249635568622E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.999629677400715	WITHOUT_CLASSIFICATION	3.7032259928501324E-4	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9999142502732803	WITHOUT_CLASSIFICATION	8.574972671959971E-5	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999998013175377	WITHOUT_CLASSIFICATION	1.986824622802501E-7	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999926115506628	WITHOUT_CLASSIFICATION	7.388449337317774E-6	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999991315837378	WITHOUT_CLASSIFICATION	8.68416262311808E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999987130768475	WITHOUT_CLASSIFICATION	1.2869231525083094E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.999985087179207	WITHOUT_CLASSIFICATION	1.491282079300425E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.999998804104945	WITHOUT_CLASSIFICATION	1.1958950549621965E-6	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9959048550612963	DEFECT	0.0040951449387037495	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999850134184715	WITHOUT_CLASSIFICATION	1.498658152842709E-5	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999999875672245	WITHOUT_CLASSIFICATION	1.2432775425963354E-8	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999914791554132	WITHOUT_CLASSIFICATION	8.520844586834724E-6	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999982668638459	WITHOUT_CLASSIFICATION	1.7331361541488729E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999999875296475	WITHOUT_CLASSIFICATION	1.2470352545792272E-8	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999999827307112	WITHOUT_CLASSIFICATION	1.726928881163535E-8	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999914791554132	WITHOUT_CLASSIFICATION	8.520844586834724E-6	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999982668638459	WITHOUT_CLASSIFICATION	1.7331361541488729E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999950429303155	WITHOUT_CLASSIFICATION	4.957069684480754E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999982169379116	WITHOUT_CLASSIFICATION	1.7830620884546285E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999982169379116	WITHOUT_CLASSIFICATION	1.7830620884546285E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999994510967344	WITHOUT_CLASSIFICATION	5.489032655141372E-7	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9998828036450782	WITHOUT_CLASSIFICATION	1.1719635492181596E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999970724337873	WITHOUT_CLASSIFICATION	2.927566212680224E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999987923082924	WITHOUT_CLASSIFICATION	1.2076917075609698E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999635853967075	WITHOUT_CLASSIFICATION	3.641460329249734E-5	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9910785348500472	WITHOUT_CLASSIFICATION	0.008921465149952875	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999993877961605	WITHOUT_CLASSIFICATION	6.122038395073899E-7	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999998792218121	WITHOUT_CLASSIFICATION	1.207781879626931E-7	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999999115830316	WITHOUT_CLASSIFICATION	8.841696840644101E-7	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.999995510852594	WITHOUT_CLASSIFICATION	4.489147405975655E-6	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999981972539838	WITHOUT_CLASSIFICATION	1.8027460163067813E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999998200972519	WITHOUT_CLASSIFICATION	1.7990274807578997E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999939606393897	WITHOUT_CLASSIFICATION	6.039360610224043E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999998893271272	WITHOUT_CLASSIFICATION	1.1067287283166535E-7	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999998893271272	WITHOUT_CLASSIFICATION	1.1067287283166535E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999940244775742	WITHOUT_CLASSIFICATION	5.975522425741643E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999940244775742	WITHOUT_CLASSIFICATION	5.975522425741643E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.999999879637248	WITHOUT_CLASSIFICATION	1.203627520824218E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.999999699657491	WITHOUT_CLASSIFICATION	3.003425089817767E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999992428263703	WITHOUT_CLASSIFICATION	7.571736297032184E-7	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999976286815047	WITHOUT_CLASSIFICATION	2.371318495362668E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999995327755059	WITHOUT_CLASSIFICATION	4.6722449407537854E-7	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999999237254263	WITHOUT_CLASSIFICATION	7.627457361478758E-8	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999970724337873	WITHOUT_CLASSIFICATION	2.927566212680224E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999987923082924	WITHOUT_CLASSIFICATION	1.2076917075609698E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999999115830316	WITHOUT_CLASSIFICATION	8.841696840644101E-7	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.999995510852594	WITHOUT_CLASSIFICATION	4.489147405975655E-6	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999996191337225	WITHOUT_CLASSIFICATION	3.808662775192849E-7	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999993503132886	WITHOUT_CLASSIFICATION	6.496867114322784E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999960593156444	WITHOUT_CLASSIFICATION	3.940684355647086E-6	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999997749163557	WITHOUT_CLASSIFICATION	2.2508364439446283E-7	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.999999961655351	WITHOUT_CLASSIFICATION	3.8344649003247796E-8	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999979828989916	WITHOUT_CLASSIFICATION	2.017101008435633E-6	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9999180085713795	WITHOUT_CLASSIFICATION	8.199142862049284E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999986752877518	WITHOUT_CLASSIFICATION	1.3247122481550618E-6	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999970178620391	WITHOUT_CLASSIFICATION	2.9821379609765005E-6	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999992705591084	WITHOUT_CLASSIFICATION	7.294408915492017E-7	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999993572866949	WITHOUT_CLASSIFICATION	6.427133050208522E-7	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.999999945564102	WITHOUT_CLASSIFICATION	5.4435897974109775E-8	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.999999838635289	WITHOUT_CLASSIFICATION	1.6136471094555455E-7	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999568981554816	WITHOUT_CLASSIFICATION	4.310184451838976E-5	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999933989554013	WITHOUT_CLASSIFICATION	6.601044598710499E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9996892638854318	WITHOUT_CLASSIFICATION	3.1073611456825586E-4	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999993674518645	WITHOUT_CLASSIFICATION	6.325481355121399E-7	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999997228210447	WITHOUT_CLASSIFICATION	2.77178955358895E-7	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999999502867324	WITHOUT_CLASSIFICATION	4.97132675283566E-8	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999590172771	WITHOUT_CLASSIFICATION	4.0982722916760476E-8	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999518253023	WITHOUT_CLASSIFICATION	4.817469758862746E-8	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999518253023	WITHOUT_CLASSIFICATION	4.817469758862746E-8	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999949556803716	WITHOUT_CLASSIFICATION	5.044319628441449E-6	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999986084784775	WITHOUT_CLASSIFICATION	1.3915215225549274E-6	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9989623646567691	WITHOUT_CLASSIFICATION	0.0010376353432308113	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999999459763417	WITHOUT_CLASSIFICATION	5.402365836662999E-8	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999999459763417	WITHOUT_CLASSIFICATION	5.402365836662999E-8	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999960593156444	WITHOUT_CLASSIFICATION	3.940684355647086E-6	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999996023758292	WITHOUT_CLASSIFICATION	3.9762417075240885E-7	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999999639283604	WITHOUT_CLASSIFICATION	3.607163952392389E-8	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999999728426294	WITHOUT_CLASSIFICATION	2.715737048683364E-8	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999999494051784	WITHOUT_CLASSIFICATION	5.05948216491481E-8	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999999859575363	WITHOUT_CLASSIFICATION	1.4042463826061837E-8	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999956512211278	WITHOUT_CLASSIFICATION	4.348778872280073E-6	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.999999969882506	WITHOUT_CLASSIFICATION	3.0117494049104455E-8	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999999710819956	WITHOUT_CLASSIFICATION	2.8918004460112442E-8	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999996540460462	WITHOUT_CLASSIFICATION	3.4595395382756775E-7	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999998295902551	WITHOUT_CLASSIFICATION	1.7040974491754455E-7	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999916327217836	WITHOUT_CLASSIFICATION	8.367278216305711E-6	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999994742444094	WITHOUT_CLASSIFICATION	5.257555906666183E-7	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.999999881808778	WITHOUT_CLASSIFICATION	1.181912220418155E-7	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999964245796988	WITHOUT_CLASSIFICATION	3.5754203012119505E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999995262066221	WITHOUT_CLASSIFICATION	4.737933778621795E-7	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999986665248403	WITHOUT_CLASSIFICATION	1.3334751597716288E-6	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999998210193737	WITHOUT_CLASSIFICATION	1.7898062627488548E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999937685736088	WITHOUT_CLASSIFICATION	6.231426391262912E-6	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999999822691183	WITHOUT_CLASSIFICATION	1.773088165240628E-8	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999999615079	WITHOUT_CLASSIFICATION	3.849204153481784E-11	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999996549004599	WITHOUT_CLASSIFICATION	3.4509954004187234E-7	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999958117914549	WITHOUT_CLASSIFICATION	4.1882085450884615E-6	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999996903856532	WITHOUT_CLASSIFICATION	3.0961434679176947E-7	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999993424138	WITHOUT_CLASSIFICATION	6.575861785201113E-10	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.999999835191653	WITHOUT_CLASSIFICATION	1.6480834695733145E-7	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999996914608686	WITHOUT_CLASSIFICATION	3.08539131332315E-7	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.999999934268185	WITHOUT_CLASSIFICATION	6.573181498545921E-8	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999999995509372	WITHOUT_CLASSIFICATION	4.4906278634454134E-10	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999998547568276	WITHOUT_CLASSIFICATION	1.4524317238406423E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999968745734	WITHOUT_CLASSIFICATION	3.12542645062069E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999968745734	WITHOUT_CLASSIFICATION	3.12542645062069E-9	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999999091905181	WITHOUT_CLASSIFICATION	9.080948185562068E-8	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999923342454	WITHOUT_CLASSIFICATION	7.665754563165293E-9	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999923342454	WITHOUT_CLASSIFICATION	7.665754563165293E-9	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999986372012327	WITHOUT_CLASSIFICATION	1.3627987672738646E-6	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999986372012327	WITHOUT_CLASSIFICATION	1.3627987672738646E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999248820745	WITHOUT_CLASSIFICATION	7.511792545707173E-8	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999999846035197	WITHOUT_CLASSIFICATION	1.539648029787211E-8	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999997657111889	WITHOUT_CLASSIFICATION	2.3428881106100029E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.999999898376977	WITHOUT_CLASSIFICATION	1.0162302302704098E-7	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999999766458973	WITHOUT_CLASSIFICATION	2.3354102696713807E-8	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999988698489068	WITHOUT_CLASSIFICATION	1.1301510931146382E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999988698489068	WITHOUT_CLASSIFICATION	1.1301510931146382E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999993424138	WITHOUT_CLASSIFICATION	6.575861785201113E-10	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999993424138	WITHOUT_CLASSIFICATION	6.575861785201113E-10	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999993424138	WITHOUT_CLASSIFICATION	6.575861785201113E-10	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.999999835191653	WITHOUT_CLASSIFICATION	1.6480834695733145E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999968745734	WITHOUT_CLASSIFICATION	3.12542645062069E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999968745734	WITHOUT_CLASSIFICATION	3.12542645062069E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999968745734	WITHOUT_CLASSIFICATION	3.12542645062069E-9	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999248820745	WITHOUT_CLASSIFICATION	7.511792545707173E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999248820745	WITHOUT_CLASSIFICATION	7.511792545707173E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999248820745	WITHOUT_CLASSIFICATION	7.511792545707173E-8	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.999999898376977	WITHOUT_CLASSIFICATION	1.0162302302704098E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.999999898376977	WITHOUT_CLASSIFICATION	1.0162302302704098E-7	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999994643314538	WITHOUT_CLASSIFICATION	5.35668546208454E-7	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.999999977614886	WITHOUT_CLASSIFICATION	2.2385114023890225E-8	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999909911514	WITHOUT_CLASSIFICATION	9.008848481683018E-9	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.7649393114862559	WITHOUT_CLASSIFICATION	0.2350606885137441	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999998866066822	WITHOUT_CLASSIFICATION	1.1339331786925933E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999998212749355	WITHOUT_CLASSIFICATION	1.7872506442418193E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999998212749355	WITHOUT_CLASSIFICATION	1.7872506442418193E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999998118450005	WITHOUT_CLASSIFICATION	1.8815499960436894E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999956512211278	WITHOUT_CLASSIFICATION	4.348778872280073E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999956512211278	WITHOUT_CLASSIFICATION	4.348778872280073E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999956512211278	WITHOUT_CLASSIFICATION	4.348778872280073E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999956512211278	WITHOUT_CLASSIFICATION	4.348778872280073E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999956512211278	WITHOUT_CLASSIFICATION	4.348778872280073E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999180005436	WITHOUT_CLASSIFICATION	8.199945641604223E-8	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999180005436	WITHOUT_CLASSIFICATION	8.199945641604223E-8	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999180005436	WITHOUT_CLASSIFICATION	8.199945641604223E-8	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.999999996370239	WITHOUT_CLASSIFICATION	3.6297611638883766E-9	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999999933509265	WITHOUT_CLASSIFICATION	6.649073578262482E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.999999835191653	WITHOUT_CLASSIFICATION	1.6480834695733145E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999248820745	WITHOUT_CLASSIFICATION	7.511792545707173E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999248820745	WITHOUT_CLASSIFICATION	7.511792545707173E-8	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999956512211278	WITHOUT_CLASSIFICATION	4.348778872280073E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999956512211278	WITHOUT_CLASSIFICATION	4.348778872280073E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999180005436	WITHOUT_CLASSIFICATION	8.199945641604223E-8	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999998118450005	WITHOUT_CLASSIFICATION	1.8815499960436894E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999929828422924	WITHOUT_CLASSIFICATION	7.017157707579439E-6	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999999083221274	WITHOUT_CLASSIFICATION	9.167787257948375E-8	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999899325797925	WITHOUT_CLASSIFICATION	1.0067420207558633E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999997739286001	WITHOUT_CLASSIFICATION	2.2607139995504103E-7	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999998712696374	WITHOUT_CLASSIFICATION	1.2873036268195354E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999999571543409	WITHOUT_CLASSIFICATION	4.284565913705317E-8	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999743154246642	WITHOUT_CLASSIFICATION	2.5684575335752943E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999990836673406	WITHOUT_CLASSIFICATION	9.163326595272189E-7	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999999552998005	WITHOUT_CLASSIFICATION	4.4700199579180566E-8	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999999991564151	WITHOUT_CLASSIFICATION	8.43584973285712E-10	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999999294765234	WITHOUT_CLASSIFICATION	7.052347657984795E-8	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999999829865118	WITHOUT_CLASSIFICATION	1.7013488104124597E-8	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999995647431495	WITHOUT_CLASSIFICATION	4.3525685043009586E-7	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999990886760609	WITHOUT_CLASSIFICATION	9.113239391657002E-7	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999999263818429	WITHOUT_CLASSIFICATION	7.361815710748968E-8	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999973575324185	WITHOUT_CLASSIFICATION	2.642467581413386E-6	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999999871203035	WITHOUT_CLASSIFICATION	1.2879696454291292E-8	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9996529195959937	WITHOUT_CLASSIFICATION	3.47080404006382E-4	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999704055226875	WITHOUT_CLASSIFICATION	2.9594477312555093E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999999371455929	WITHOUT_CLASSIFICATION	6.285440711150213E-8	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9998988583044224	WITHOUT_CLASSIFICATION	1.0114169557764373E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999992341161	WITHOUT_CLASSIFICATION	7.658839589413057E-10	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999999262602	WITHOUT_CLASSIFICATION	7.373988526753014E-11	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999999130234819	WITHOUT_CLASSIFICATION	8.69765181923344E-8	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999904465541185	WITHOUT_CLASSIFICATION	9.55344588157452E-6	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999973618660496	WITHOUT_CLASSIFICATION	2.6381339504174326E-6	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999987102155173	WITHOUT_CLASSIFICATION	1.2897844826347654E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999995021570516	WITHOUT_CLASSIFICATION	4.978429484265066E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999997102156958	WITHOUT_CLASSIFICATION	2.897843041465051E-7	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999982399643393	WITHOUT_CLASSIFICATION	1.7600356605961728E-6	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.999999979022014	WITHOUT_CLASSIFICATION	2.097798603033815E-8	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999999190550094	WITHOUT_CLASSIFICATION	8.094499058499418E-8	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999948851339243	WITHOUT_CLASSIFICATION	5.114866075663918E-6	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999983669441485	WITHOUT_CLASSIFICATION	1.633055851468419E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999929828422924	WITHOUT_CLASSIFICATION	7.017157707579439E-6	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999999787058361	WITHOUT_CLASSIFICATION	2.129416397071131E-8	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999999762434844	WITHOUT_CLASSIFICATION	2.375651567881846E-8	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9999323086287919	WITHOUT_CLASSIFICATION	6.7691371208079E-5	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999997478863765	WITHOUT_CLASSIFICATION	2.521136234620624E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999997478863765	WITHOUT_CLASSIFICATION	2.521136234620624E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999994887111173	WITHOUT_CLASSIFICATION	5.112888826272949E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999994887111173	WITHOUT_CLASSIFICATION	5.112888826272949E-7	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999996410678068	WITHOUT_CLASSIFICATION	3.5893219321488407E-7	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9992684341556904	WITHOUT_CLASSIFICATION	7.315658443096762E-4	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999999299541542	WITHOUT_CLASSIFICATION	7.004584581548958E-8	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999999779179134	WITHOUT_CLASSIFICATION	2.2082086628173834E-8	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999998880991245	WITHOUT_CLASSIFICATION	1.1190087539784613E-7	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999991644658585	WITHOUT_CLASSIFICATION	8.355341415500343E-7	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.999970448227485	WITHOUT_CLASSIFICATION	2.9551772514996216E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999990157478608	WITHOUT_CLASSIFICATION	9.84252139272999E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.999999261164129	WITHOUT_CLASSIFICATION	7.388358709757557E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999982566666897	WITHOUT_CLASSIFICATION	1.7433333103525682E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999991538487015	WITHOUT_CLASSIFICATION	8.461512985558599E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999997559445005	WITHOUT_CLASSIFICATION	2.4405549942872944E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999997559445005	WITHOUT_CLASSIFICATION	2.4405549942872944E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999981824006373	WITHOUT_CLASSIFICATION	1.817599362724829E-6	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999996390917569	WITHOUT_CLASSIFICATION	3.6090824308240085E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999998376670542	WITHOUT_CLASSIFICATION	1.6233294583660877E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999998376670542	WITHOUT_CLASSIFICATION	1.6233294583660877E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999990317284594	WITHOUT_CLASSIFICATION	9.682715406187089E-7	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.999975098996231	WITHOUT_CLASSIFICATION	2.49010037689466E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999854762942875	WITHOUT_CLASSIFICATION	1.4523705712606001E-5	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999992489863837	WITHOUT_CLASSIFICATION	7.510136162512548E-7	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999999820270543	WITHOUT_CLASSIFICATION	1.7972945729534006E-8	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999999016095427	WITHOUT_CLASSIFICATION	9.839045727696639E-8	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999994445695232	WITHOUT_CLASSIFICATION	5.554304767965461E-7	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999999798428566	WITHOUT_CLASSIFICATION	2.0157143393989023E-8	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9997470945596904	WITHOUT_CLASSIFICATION	2.5290544030960615E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999999412567928	WITHOUT_CLASSIFICATION	5.874320729046858E-8	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999998868856168	WITHOUT_CLASSIFICATION	1.1311438323478504E-7	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999990148592569	WITHOUT_CLASSIFICATION	9.851407430871082E-7	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999999645415014	WITHOUT_CLASSIFICATION	3.545849856547495E-8	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999990961137409	WITHOUT_CLASSIFICATION	9.03886258995222E-7	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999998394421086	WITHOUT_CLASSIFICATION	1.6055789151337735E-7	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.99998437974921	WITHOUT_CLASSIFICATION	1.5620250790056236E-5	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999946679577062	WITHOUT_CLASSIFICATION	5.332042293775743E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999997273488758	WITHOUT_CLASSIFICATION	2.7265112424413506E-7	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999994648730166	WITHOUT_CLASSIFICATION	5.351269833956834E-7	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999991371685096	WITHOUT_CLASSIFICATION	8.62831490446109E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9573526805428397	WITHOUT_CLASSIFICATION	0.04264731945716022	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999987366260837	WITHOUT_CLASSIFICATION	1.2633739163004096E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999981613844011	WITHOUT_CLASSIFICATION	1.838615598834737E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999997428523997	WITHOUT_CLASSIFICATION	2.571476002770017E-7	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999962859226369	WITHOUT_CLASSIFICATION	3.714077363149219E-6	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999890866848445	WITHOUT_CLASSIFICATION	1.09133151554333E-5	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999935856837231	WITHOUT_CLASSIFICATION	6.4143162768601026E-6	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999995232967764	WITHOUT_CLASSIFICATION	4.767032234944497E-7	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999942748111003	WITHOUT_CLASSIFICATION	5.725188899839363E-6	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999999716594228	WITHOUT_CLASSIFICATION	2.8340577178196343E-8	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999988751707075	WITHOUT_CLASSIFICATION	1.1248292924931824E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.999999962422363	WITHOUT_CLASSIFICATION	3.7577637010452004E-8	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.999996983120904	WITHOUT_CLASSIFICATION	3.0168790958700747E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999965949179067	WITHOUT_CLASSIFICATION	3.4050820932735734E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999965949179067	WITHOUT_CLASSIFICATION	3.4050820932735734E-6	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999977566489741	WITHOUT_CLASSIFICATION	2.2433510259730927E-6	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999998601634016	WITHOUT_CLASSIFICATION	1.3983659839973598E-7	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999999765692711	WITHOUT_CLASSIFICATION	2.3430728918250967E-8	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.999990363575014	WITHOUT_CLASSIFICATION	9.636424985956714E-6	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999374370849067	WITHOUT_CLASSIFICATION	6.256291509325542E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999999890511398	WITHOUT_CLASSIFICATION	1.0948860216475737E-8	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9996764343957536	WITHOUT_CLASSIFICATION	3.2356560424647924E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9953375622953543	WITHOUT_CLASSIFICATION	0.004662437704645736	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9999708906397764	WITHOUT_CLASSIFICATION	2.9109360223606012E-5	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999834914176596	WITHOUT_CLASSIFICATION	1.6508582340372892E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999995557921761	WITHOUT_CLASSIFICATION	4.4420782385355766E-7	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9986236683818372	WITHOUT_CLASSIFICATION	0.001376331618162696	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999998737056154	WITHOUT_CLASSIFICATION	1.262943846053095E-7	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9998416976726425	WITHOUT_CLASSIFICATION	1.5830232735743123E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999999928960451	WITHOUT_CLASSIFICATION	7.103954817345236E-9	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999998790480107	WITHOUT_CLASSIFICATION	1.2095198926372738E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.999999842152507	WITHOUT_CLASSIFICATION	1.578474929876868E-7	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999961062358426	WITHOUT_CLASSIFICATION	3.893764157442681E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999997796031922	WITHOUT_CLASSIFICATION	2.2039680792436592E-7	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999880497861295	WITHOUT_CLASSIFICATION	1.1950213870534005E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999996939349635	WITHOUT_CLASSIFICATION	3.060650365581726E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999959256903	WITHOUT_CLASSIFICATION	4.074309663832891E-9	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999966323712997	WITHOUT_CLASSIFICATION	3.3676287004135783E-6	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999955433642913	WITHOUT_CLASSIFICATION	4.456635708690297E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999965479656343	WITHOUT_CLASSIFICATION	3.4520343656453525E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999982540292119	WITHOUT_CLASSIFICATION	1.745970787965047E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999999902026919	WITHOUT_CLASSIFICATION	9.797307946839066E-9	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999998725724474	WITHOUT_CLASSIFICATION	1.2742755262405326E-7	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.998976818309303	WITHOUT_CLASSIFICATION	0.0010231816906970598	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9997524564374557	WITHOUT_CLASSIFICATION	2.475435625443036E-4	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999988979688103	WITHOUT_CLASSIFICATION	1.1020311897254168E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999999998807577	WITHOUT_CLASSIFICATION	1.1924225303445806E-10	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999989373441448	WITHOUT_CLASSIFICATION	1.0626558552640245E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999994020742549	WITHOUT_CLASSIFICATION	5.979257451739412E-7	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.999998557558988	WITHOUT_CLASSIFICATION	1.4424410120153184E-6	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999999102672277	WITHOUT_CLASSIFICATION	8.97327723337068E-8	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.999995171147525	WITHOUT_CLASSIFICATION	4.828852474910079E-6	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999992911848237	WITHOUT_CLASSIFICATION	7.088151763415086E-7	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999996495457931	WITHOUT_CLASSIFICATION	3.5045420679629353E-7	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.999999982420668	WITHOUT_CLASSIFICATION	1.757933207480251E-8	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999998189465853	WITHOUT_CLASSIFICATION	1.810534146615847E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999992673210045	WITHOUT_CLASSIFICATION	7.326789955351391E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999992673210045	WITHOUT_CLASSIFICATION	7.326789955351391E-7	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999984320479433	WITHOUT_CLASSIFICATION	1.567952056709751E-6	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.999999986911454	WITHOUT_CLASSIFICATION	1.3088546108178305E-8	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999997330577474	WITHOUT_CLASSIFICATION	2.669422526213664E-7	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999996545698348	WITHOUT_CLASSIFICATION	3.454301652591431E-7	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999999023026281	WITHOUT_CLASSIFICATION	9.769737185395697E-8	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.999999972186946	WITHOUT_CLASSIFICATION	2.781305395609365E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999990057401467	WITHOUT_CLASSIFICATION	9.942598533073244E-7	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9703762662880635	WITHOUT_CLASSIFICATION	0.02962373371193645	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999992816148581	WITHOUT_CLASSIFICATION	7.183851418184992E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999850937055	WITHOUT_CLASSIFICATION	1.4906294533446222E-8	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999995551617252	WITHOUT_CLASSIFICATION	4.448382747801325E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999994620720549	WITHOUT_CLASSIFICATION	5.379279451520238E-7	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9997608687748923	WITHOUT_CLASSIFICATION	2.3913122510773333E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999999637622297	WITHOUT_CLASSIFICATION	3.623777037772417E-8	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999999377917224	WITHOUT_CLASSIFICATION	6.22082776779196E-8	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9996349398091171	WITHOUT_CLASSIFICATION	3.650601908828777E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9998958424127741	WITHOUT_CLASSIFICATION	1.0415758722596559E-4	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999998089146426	WITHOUT_CLASSIFICATION	1.9108535756101487E-7	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999998961658	WITHOUT_CLASSIFICATION	1.0383406933261236E-10	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.971148611354938	WITHOUT_CLASSIFICATION	0.028851388645062002	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999999344435214	WITHOUT_CLASSIFICATION	6.555647850382959E-8	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999881809231017	WITHOUT_CLASSIFICATION	1.1819076898331468E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999999213909	WITHOUT_CLASSIFICATION	7.860917596147439E-11	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999992181741884	WITHOUT_CLASSIFICATION	7.818258116608438E-7	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999378051118404	WITHOUT_CLASSIFICATION	6.219488815960646E-5	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999995203261933	WITHOUT_CLASSIFICATION	4.796738067327908E-7	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999999728868103	WITHOUT_CLASSIFICATION	2.7113189704616183E-8	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999996222545507	WITHOUT_CLASSIFICATION	3.7774544915602777E-7	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999541378217017	WITHOUT_CLASSIFICATION	4.586217829835683E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999992482650321	WITHOUT_CLASSIFICATION	7.517349679031415E-7	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999271183079143	WITHOUT_CLASSIFICATION	7.288169208582174E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999987127779169	WITHOUT_CLASSIFICATION	1.287222083098724E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999992482650321	WITHOUT_CLASSIFICATION	7.517349679031415E-7	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999982702755588	WITHOUT_CLASSIFICATION	1.7297244412436081E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.999629677400715	WITHOUT_CLASSIFICATION	3.7032259928501324E-4	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9975419131790859	WITHOUT_CLASSIFICATION	0.0024580868209141053	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.5058712967127832	DEFECT	0.4941287032872168	WITHOUT_CLASSIFICATION
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999999140311941	WITHOUT_CLASSIFICATION	8.596880579858446E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999869467269	WITHOUT_CLASSIFICATION	1.3053273027671586E-8	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999999672683546	WITHOUT_CLASSIFICATION	3.273164548265171E-8	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999972437604047	WITHOUT_CLASSIFICATION	2.756239595265955E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9998828036450782	WITHOUT_CLASSIFICATION	1.1719635492181596E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999991371685096	WITHOUT_CLASSIFICATION	8.62831490446109E-7	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999909911514	WITHOUT_CLASSIFICATION	9.008848481683018E-9	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999894853490077	WITHOUT_CLASSIFICATION	1.051465099239706E-5	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999999715079835	WITHOUT_CLASSIFICATION	2.8492016468221675E-8	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999999523792035	WITHOUT_CLASSIFICATION	4.7620796523503215E-8	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999836773547333	WITHOUT_CLASSIFICATION	1.6322645266767577E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999999052796236	WITHOUT_CLASSIFICATION	9.472037645191567E-8	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999968217616966	WITHOUT_CLASSIFICATION	3.1782383034012442E-6	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999999945726247	WITHOUT_CLASSIFICATION	5.427375272283367E-9	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9975401623591222	WITHOUT_CLASSIFICATION	0.0024598376408777435	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999992500418342	WITHOUT_CLASSIFICATION	7.499581656935706E-7	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999992254834076	WITHOUT_CLASSIFICATION	7.745165924501452E-7	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999996748989409	WITHOUT_CLASSIFICATION	3.2510105908785976E-7	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999999808214298	WITHOUT_CLASSIFICATION	1.917857018665724E-8	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999984564564326	WITHOUT_CLASSIFICATION	1.5435435673321247E-6	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999998669225902	WITHOUT_CLASSIFICATION	1.3307740981247347E-7	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999936976774296	WITHOUT_CLASSIFICATION	6.302322570448752E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999959929634917	WITHOUT_CLASSIFICATION	4.0070365081912E-6	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999853945349826	WITHOUT_CLASSIFICATION	1.4605465017437988E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999982596778	WITHOUT_CLASSIFICATION	1.7403222258485323E-9	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999936604668521	WITHOUT_CLASSIFICATION	6.339533147862131E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999936604668521	WITHOUT_CLASSIFICATION	6.339533147862131E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999999193316543	WITHOUT_CLASSIFICATION	8.066834574218976E-8	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999999780935763	WITHOUT_CLASSIFICATION	2.1906423696663146E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999575656836	WITHOUT_CLASSIFICATION	4.243431636993427E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970360272672831	WITHOUT_CLASSIFICATION	0.0029639727327168616	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970360272672831	WITHOUT_CLASSIFICATION	0.0029639727327168616	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970360272672831	WITHOUT_CLASSIFICATION	0.0029639727327168616	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970360272672831	WITHOUT_CLASSIFICATION	0.0029639727327168616	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999994570088444	WITHOUT_CLASSIFICATION	5.429911555705339E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999776592725	WITHOUT_CLASSIFICATION	2.234072749200242E-8	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999995413603268	WITHOUT_CLASSIFICATION	4.586396731369556E-7	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9994670038956898	WITHOUT_CLASSIFICATION	5.329961043102515E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999314694573	WITHOUT_CLASSIFICATION	6.853054263905862E-8	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9997132446251367	WITHOUT_CLASSIFICATION	2.8675537486335816E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999990266081764	WITHOUT_CLASSIFICATION	9.73391823592337E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999990266081764	WITHOUT_CLASSIFICATION	9.73391823592337E-7	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9993760517827351	WITHOUT_CLASSIFICATION	6.239482172647814E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9997717397642772	WITHOUT_CLASSIFICATION	2.2826023572264487E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999976095841656	WITHOUT_CLASSIFICATION	2.390415834297732E-6	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9989672019436018	WITHOUT_CLASSIFICATION	0.0010327980563982285	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999989173156254	WITHOUT_CLASSIFICATION	1.0826843746443654E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999999587933048	WITHOUT_CLASSIFICATION	4.1206695177404425E-8	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999998052565177	WITHOUT_CLASSIFICATION	1.9474348246308065E-7	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999981791856775	WITHOUT_CLASSIFICATION	1.8208143224894653E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999860837825202	WITHOUT_CLASSIFICATION	1.391621747978299E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999860837825202	WITHOUT_CLASSIFICATION	1.391621747978299E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999987127779169	WITHOUT_CLASSIFICATION	1.287222083098724E-6	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999955943711634	WITHOUT_CLASSIFICATION	4.405628836696662E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999929416210712	WITHOUT_CLASSIFICATION	7.058378928828625E-6	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999987344312633	WITHOUT_CLASSIFICATION	1.2655687366356352E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999999685633747	WITHOUT_CLASSIFICATION	3.143662526714535E-8	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9996847041252123	WITHOUT_CLASSIFICATION	3.1529587478770294E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999999566963136	WITHOUT_CLASSIFICATION	4.330368636848202E-8	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999987957078706	WITHOUT_CLASSIFICATION	1.2042921293411035E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999992510399747	WITHOUT_CLASSIFICATION	7.489600252615539E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999992510399747	WITHOUT_CLASSIFICATION	7.489600252615539E-7	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.999999256699148	WITHOUT_CLASSIFICATION	7.43300851995018E-7	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999999327226339	WITHOUT_CLASSIFICATION	6.727736614014142E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999959353891558	WITHOUT_CLASSIFICATION	4.06461084416458E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999994425485556	WITHOUT_CLASSIFICATION	5.574514444955433E-7	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999996961477837	WITHOUT_CLASSIFICATION	3.0385221627145707E-7	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.999781588192675	WITHOUT_CLASSIFICATION	2.184118073250109E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999930868181247	WITHOUT_CLASSIFICATION	6.913181875290512E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999928954006	WITHOUT_CLASSIFICATION	7.104599283627758E-9	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999928954006	WITHOUT_CLASSIFICATION	7.104599283627758E-9	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999928954006	WITHOUT_CLASSIFICATION	7.104599283627758E-9	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999928954006	WITHOUT_CLASSIFICATION	7.104599283627758E-9	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999989296818221	WITHOUT_CLASSIFICATION	1.0703181779377857E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9999906610689683	WITHOUT_CLASSIFICATION	9.338931031757462E-6	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999056674653851	WITHOUT_CLASSIFICATION	9.433253461486795E-5	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999993926637255	WITHOUT_CLASSIFICATION	6.073362744529994E-7	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999926771115749	WITHOUT_CLASSIFICATION	7.322888425175146E-6	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9997072629632399	WITHOUT_CLASSIFICATION	2.927370367600823E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999617308438	WITHOUT_CLASSIFICATION	3.8269156312206405E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999724508842	WITHOUT_CLASSIFICATION	2.754911567121225E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999724508842	WITHOUT_CLASSIFICATION	2.754911567121225E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999724508842	WITHOUT_CLASSIFICATION	2.754911567121225E-8	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999965205665713	WITHOUT_CLASSIFICATION	3.479433428721937E-6	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9996233878018611	WITHOUT_CLASSIFICATION	3.7661219813891523E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999522285886	WITHOUT_CLASSIFICATION	4.777141132837418E-8	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999522285886	WITHOUT_CLASSIFICATION	4.777141132837418E-8	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999973567111132	WITHOUT_CLASSIFICATION	2.643288886767999E-6	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999999998110817	WITHOUT_CLASSIFICATION	1.8891831043237058E-9	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999999321807882	WITHOUT_CLASSIFICATION	6.781921183633414E-8	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9998707347218964	WITHOUT_CLASSIFICATION	1.2926527810363592E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999999909025423	WITHOUT_CLASSIFICATION	9.097457654689111E-9	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999997255907057	WITHOUT_CLASSIFICATION	2.744092942886488E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999995407486026	WITHOUT_CLASSIFICATION	4.5925139741224016E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999995407486026	WITHOUT_CLASSIFICATION	4.5925139741224016E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999997687374952	WITHOUT_CLASSIFICATION	2.3126250485410903E-7	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9927315813566665	WITHOUT_CLASSIFICATION	0.007268418643333567	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999999263900851	WITHOUT_CLASSIFICATION	7.360991489679419E-8	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999992648325513	WITHOUT_CLASSIFICATION	7.351674487025796E-7	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999957854783985	WITHOUT_CLASSIFICATION	4.2145216014664856E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999999678025092	WITHOUT_CLASSIFICATION	3.219749086287997E-8	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999996721728374	WITHOUT_CLASSIFICATION	3.278271627128967E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999758232033288	WITHOUT_CLASSIFICATION	2.4176796671128878E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9995584740389764	WITHOUT_CLASSIFICATION	4.4152596102365666E-4	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999998770308124	WITHOUT_CLASSIFICATION	1.2296918768688206E-7	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.999999912181998	WITHOUT_CLASSIFICATION	8.781800203826389E-8	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999938972223327	WITHOUT_CLASSIFICATION	6.10277766731186E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999738814342588	WITHOUT_CLASSIFICATION	2.611856574121119E-5	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999950536357778	WITHOUT_CLASSIFICATION	4.946364222278345E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999954915856	WITHOUT_CLASSIFICATION	4.508414392104879E-9	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.999999977993595	WITHOUT_CLASSIFICATION	2.200640501428313E-8	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999904973183187	WITHOUT_CLASSIFICATION	9.502681681311474E-6	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999999938742126	WITHOUT_CLASSIFICATION	6.125787442936982E-9	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999990887776081	WITHOUT_CLASSIFICATION	9.1122239175327E-7	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999985540705822	WITHOUT_CLASSIFICATION	1.4459294177816916E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999996270298379	WITHOUT_CLASSIFICATION	3.729701621264232E-7	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998272008085112	WITHOUT_CLASSIFICATION	1.727991914889384E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998867625955	WITHOUT_CLASSIFICATION	1.1323740445394033E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998867625955	WITHOUT_CLASSIFICATION	1.1323740445394033E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998867625955	WITHOUT_CLASSIFICATION	1.1323740445394033E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998867625955	WITHOUT_CLASSIFICATION	1.1323740445394033E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998867625955	WITHOUT_CLASSIFICATION	1.1323740445394033E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998867625955	WITHOUT_CLASSIFICATION	1.1323740445394033E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998867625955	WITHOUT_CLASSIFICATION	1.1323740445394033E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999998867625955	WITHOUT_CLASSIFICATION	1.1323740445394033E-7	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9988070124573903	WITHOUT_CLASSIFICATION	0.0011929875426097238	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.999918533379187	WITHOUT_CLASSIFICATION	8.146662081310264E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999898507628427	WITHOUT_CLASSIFICATION	1.0149237157253112E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9874696991530301	WITHOUT_CLASSIFICATION	0.012530300846970046	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999990057401467	WITHOUT_CLASSIFICATION	9.942598533073244E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999990057401467	WITHOUT_CLASSIFICATION	9.942598533073244E-7	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999999866708041	WITHOUT_CLASSIFICATION	1.3329195793384981E-8	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999992780804587	WITHOUT_CLASSIFICATION	7.219195412633847E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999945469311	WITHOUT_CLASSIFICATION	5.453068820670712E-9	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999829318397968	WITHOUT_CLASSIFICATION	1.7068160203162043E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999979957348853	WITHOUT_CLASSIFICATION	2.004265114719404E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999992654583713	WITHOUT_CLASSIFICATION	7.345416287589082E-7	DEFECT
// read	WITHOUT_CLASSIFICATION	0.999999473860078	WITHOUT_CLASSIFICATION	5.261399218772366E-7	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9987776576742666	WITHOUT_CLASSIFICATION	0.001222342325733398	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999998929387908	WITHOUT_CLASSIFICATION	1.0706120913248271E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901297836911	WITHOUT_CLASSIFICATION	9.870216308976279E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901297836911	WITHOUT_CLASSIFICATION	9.870216308976279E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901297836911	WITHOUT_CLASSIFICATION	9.870216308976279E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.999999938224078	WITHOUT_CLASSIFICATION	6.177592210195651E-8	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999997728652588	WITHOUT_CLASSIFICATION	2.2713474120507345E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.999996690588604	WITHOUT_CLASSIFICATION	3.3094113960491786E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999530615907	WITHOUT_CLASSIFICATION	4.693840933094502E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999410868080283	WITHOUT_CLASSIFICATION	5.8913191971852263E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999694587949	WITHOUT_CLASSIFICATION	3.0541205093229665E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999901070359	WITHOUT_CLASSIFICATION	9.892964048223452E-9	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999974613302434	WITHOUT_CLASSIFICATION	2.5386697566189807E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999997120455123	WITHOUT_CLASSIFICATION	2.879544876992333E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999997120455123	WITHOUT_CLASSIFICATION	2.879544876992333E-7	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999999172386672	WITHOUT_CLASSIFICATION	8.276133280726715E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999703960459	WITHOUT_CLASSIFICATION	2.9603954149241266E-8	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999972741463323	WITHOUT_CLASSIFICATION	2.7258536676190483E-6	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9992778913093843	WITHOUT_CLASSIFICATION	7.221086906156996E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996820237413	WITHOUT_CLASSIFICATION	3.1797625869444104E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996820237413	WITHOUT_CLASSIFICATION	3.1797625869444104E-7	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.999999890874296	WITHOUT_CLASSIFICATION	1.0912570410420848E-7	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999995622325795	WITHOUT_CLASSIFICATION	4.37767420564596E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999689372825491	WITHOUT_CLASSIFICATION	3.106271745081468E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999748947175333	WITHOUT_CLASSIFICATION	2.51052824667366E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999328237631	WITHOUT_CLASSIFICATION	6.7176236867195E-8	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999996337280749	WITHOUT_CLASSIFICATION	3.662719250621208E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999996337280749	WITHOUT_CLASSIFICATION	3.662719250621208E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999997529772806	WITHOUT_CLASSIFICATION	2.4702271934988005E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999997529772806	WITHOUT_CLASSIFICATION	2.4702271934988005E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999996102174533	WITHOUT_CLASSIFICATION	3.897825465897273E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999995810237007	WITHOUT_CLASSIFICATION	4.18976299276278E-7	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999969721086123	WITHOUT_CLASSIFICATION	3.0278913877190188E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999955610488369	WITHOUT_CLASSIFICATION	4.438951163099569E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999871975348539	WITHOUT_CLASSIFICATION	1.2802465146047681E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999977248453907	WITHOUT_CLASSIFICATION	2.2751546093463664E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999998965113	WITHOUT_CLASSIFICATION	1.034887430568607E-10	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999988698489068	WITHOUT_CLASSIFICATION	1.1301510931146382E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999999765348929	WITHOUT_CLASSIFICATION	2.3465107031591268E-8	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999951299250655	WITHOUT_CLASSIFICATION	4.870074934594082E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.5227801674389351	WITHOUT_CLASSIFICATION	0.477219832561065	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999995446066997	WITHOUT_CLASSIFICATION	4.5539330020430134E-7	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999997503627096	WITHOUT_CLASSIFICATION	2.4963729040888E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999990320070732	WITHOUT_CLASSIFICATION	9.679929269081903E-7	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999986296729445	WITHOUT_CLASSIFICATION	1.370327055479455E-6	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999998850569697	WITHOUT_CLASSIFICATION	1.1494303031397099E-7	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999998339476642	WITHOUT_CLASSIFICATION	1.660523358259012E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999994344642078	WITHOUT_CLASSIFICATION	5.65535792275473E-7	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999888006862477	WITHOUT_CLASSIFICATION	1.119931375219069E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999998574162017	WITHOUT_CLASSIFICATION	1.4258379834464305E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999894853490077	WITHOUT_CLASSIFICATION	1.051465099239706E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999350127265951	WITHOUT_CLASSIFICATION	6.498727340493241E-5	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999998986126417	WITHOUT_CLASSIFICATION	1.0138735822986097E-7	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999994931931848	WITHOUT_CLASSIFICATION	5.068068152371783E-7	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999999809150544	WITHOUT_CLASSIFICATION	1.9084945696865187E-8	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999988632429768	WITHOUT_CLASSIFICATION	1.1367570231408255E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999921415905494	WITHOUT_CLASSIFICATION	7.858409450590112E-6	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999999981513329	WITHOUT_CLASSIFICATION	1.8486670913310619E-9	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999994997921636	WITHOUT_CLASSIFICATION	5.002078364879108E-7	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999505349012946	WITHOUT_CLASSIFICATION	4.9465098705279906E-5	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999999598217402	WITHOUT_CLASSIFICATION	4.01782598888306E-8	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999995806366372	WITHOUT_CLASSIFICATION	4.1936336282981757E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999989958429453	WITHOUT_CLASSIFICATION	1.0041570546842333E-6	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999998479904502	WITHOUT_CLASSIFICATION	1.5200954975064473E-7	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999905390051	WITHOUT_CLASSIFICATION	9.460994892445255E-9	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999966418539621	WITHOUT_CLASSIFICATION	3.358146037949231E-6	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999954571095	WITHOUT_CLASSIFICATION	4.542890483458533E-9	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999999762238706	WITHOUT_CLASSIFICATION	2.3776129334674346E-8	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999993353144072	WITHOUT_CLASSIFICATION	6.646855927467819E-7	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9996734601402716	WITHOUT_CLASSIFICATION	3.2653985972832747E-4	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999555241500433	WITHOUT_CLASSIFICATION	4.4475849956751354E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999978701700927	WITHOUT_CLASSIFICATION	2.129829907331088E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999999995792688	WITHOUT_CLASSIFICATION	4.2073121690551434E-10	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999996649342189	WITHOUT_CLASSIFICATION	3.35065781145185E-7	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.998686012835748	WITHOUT_CLASSIFICATION	0.0013139871642520728	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999908509319	WITHOUT_CLASSIFICATION	9.149068088221813E-9	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999999885360227	WITHOUT_CLASSIFICATION	1.1463977224976633E-8	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999999347050946	WITHOUT_CLASSIFICATION	6.529490538343758E-8	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999990789375671	WITHOUT_CLASSIFICATION	9.210624329975359E-7	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999923254562855	WITHOUT_CLASSIFICATION	7.674543714542395E-6	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999987843240177	WITHOUT_CLASSIFICATION	1.2156759823030643E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999994554680137	WITHOUT_CLASSIFICATION	5.44531986238524E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999994554680137	WITHOUT_CLASSIFICATION	5.44531986238524E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999999558740698	WITHOUT_CLASSIFICATION	4.412593019159449E-8	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999999558740698	WITHOUT_CLASSIFICATION	4.412593019159449E-8	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.999977871840248	WITHOUT_CLASSIFICATION	2.2128159751978087E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.999977871840248	WITHOUT_CLASSIFICATION	2.2128159751978087E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999993189242303	WITHOUT_CLASSIFICATION	6.810757697262435E-7	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999993189242303	WITHOUT_CLASSIFICATION	6.810757697262435E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999804278012	WITHOUT_CLASSIFICATION	1.95721987221075E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999804278012	WITHOUT_CLASSIFICATION	1.95721987221075E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999804278012	WITHOUT_CLASSIFICATION	1.95721987221075E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999804278012	WITHOUT_CLASSIFICATION	1.95721987221075E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999804278012	WITHOUT_CLASSIFICATION	1.95721987221075E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999804278012	WITHOUT_CLASSIFICATION	1.95721987221075E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999804278012	WITHOUT_CLASSIFICATION	1.95721987221075E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999804278012	WITHOUT_CLASSIFICATION	1.95721987221075E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999804278012	WITHOUT_CLASSIFICATION	1.95721987221075E-8	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999996511556599	WITHOUT_CLASSIFICATION	3.488443400853247E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999996511556599	WITHOUT_CLASSIFICATION	3.488443400853247E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999996511556599	WITHOUT_CLASSIFICATION	3.488443400853247E-7	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999996125463264	WITHOUT_CLASSIFICATION	3.874536736151931E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999989272386881	WITHOUT_CLASSIFICATION	1.0727613118413139E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999989272386881	WITHOUT_CLASSIFICATION	1.0727613118413139E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999989272386881	WITHOUT_CLASSIFICATION	1.0727613118413139E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999351728182	WITHOUT_CLASSIFICATION	6.482718182576471E-8	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999351728182	WITHOUT_CLASSIFICATION	6.482718182576471E-8	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999999351728182	WITHOUT_CLASSIFICATION	6.482718182576471E-8	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.99998058745428	WITHOUT_CLASSIFICATION	1.9412545720121158E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999998367964932	WITHOUT_CLASSIFICATION	1.632035069366015E-7	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999605575314516	WITHOUT_CLASSIFICATION	3.944246854831613E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999570621102614	WITHOUT_CLASSIFICATION	4.293788973867874E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999570621102614	WITHOUT_CLASSIFICATION	4.293788973867874E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999570621102614	WITHOUT_CLASSIFICATION	4.293788973867874E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999975285343569	WITHOUT_CLASSIFICATION	2.4714656431244236E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999899393476858	WITHOUT_CLASSIFICATION	1.0060652314179091E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999899393476858	WITHOUT_CLASSIFICATION	1.0060652314179091E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998766632098243	WITHOUT_CLASSIFICATION	1.2333679017576763E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999936217036	WITHOUT_CLASSIFICATION	6.378296514102261E-9	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999936217036	WITHOUT_CLASSIFICATION	6.378296514102261E-9	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9203982004306479	WITHOUT_CLASSIFICATION	0.07960179956935205	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999998166316787	WITHOUT_CLASSIFICATION	1.8336832133949759E-7	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999996757631102	WITHOUT_CLASSIFICATION	3.2423688982309414E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998992490351	WITHOUT_CLASSIFICATION	1.0075096489615738E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998992490351	WITHOUT_CLASSIFICATION	1.0075096489615738E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999987183075757	WITHOUT_CLASSIFICATION	1.2816924243214378E-6	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999990404807796	WITHOUT_CLASSIFICATION	9.595192203541423E-7	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999998869151319	WITHOUT_CLASSIFICATION	1.130848681224386E-7	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.999999843150261	WITHOUT_CLASSIFICATION	1.5684973900119883E-7	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9993467906090311	WITHOUT_CLASSIFICATION	6.532093909689748E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998992490351	WITHOUT_CLASSIFICATION	1.0075096489615738E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998992490351	WITHOUT_CLASSIFICATION	1.0075096489615738E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998992490351	WITHOUT_CLASSIFICATION	1.0075096489615738E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998992490351	WITHOUT_CLASSIFICATION	1.0075096489615738E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999998992490351	WITHOUT_CLASSIFICATION	1.0075096489615738E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999999533252705	WITHOUT_CLASSIFICATION	4.6674729510560705E-8	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999998466802302	WITHOUT_CLASSIFICATION	1.5331976969037482E-7	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999998934510594	WITHOUT_CLASSIFICATION	1.0654894050764547E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999996999742586	WITHOUT_CLASSIFICATION	3.0002574129702574E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999928720247708	WITHOUT_CLASSIFICATION	7.127975229252028E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993655207224	WITHOUT_CLASSIFICATION	6.344792775414488E-7	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9519293328206807	WITHOUT_CLASSIFICATION	0.04807066717931932	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9996169913226998	WITHOUT_CLASSIFICATION	3.830086773002774E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999999377516503	WITHOUT_CLASSIFICATION	6.224834964151982E-8	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999999552504372	WITHOUT_CLASSIFICATION	4.474956285396586E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999963310571083	WITHOUT_CLASSIFICATION	3.6689428917966133E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999881809231017	WITHOUT_CLASSIFICATION	1.1819076898331468E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999996501299234	WITHOUT_CLASSIFICATION	3.4987007654276834E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999905710321	WITHOUT_CLASSIFICATION	9.428967966763101E-9	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999757470149514	WITHOUT_CLASSIFICATION	2.4252985048539954E-5	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999584707342745	WITHOUT_CLASSIFICATION	4.15292657256653E-5	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999941963658	WITHOUT_CLASSIFICATION	5.803634226556797E-9	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999999702764	WITHOUT_CLASSIFICATION	2.9723599577807816E-11	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.999997240495647	WITHOUT_CLASSIFICATION	2.7595043530945268E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999997384863292	WITHOUT_CLASSIFICATION	2.61513670727265E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999994715817532	WITHOUT_CLASSIFICATION	5.2841824677609E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999977163382786	WITHOUT_CLASSIFICATION	2.2836617214106045E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999850937055	WITHOUT_CLASSIFICATION	1.4906294533446222E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999864685712	WITHOUT_CLASSIFICATION	1.3531428682986799E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999864685712	WITHOUT_CLASSIFICATION	1.3531428682986799E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999864685712	WITHOUT_CLASSIFICATION	1.3531428682986799E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999864685712	WITHOUT_CLASSIFICATION	1.3531428682986799E-8	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999923212163636	WITHOUT_CLASSIFICATION	7.67878363632301E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9999141334290755	WITHOUT_CLASSIFICATION	8.586657092451973E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999998254950803	WITHOUT_CLASSIFICATION	1.745049197247342E-7	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999998254950803	WITHOUT_CLASSIFICATION	1.745049197247342E-7	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999990815965327	WITHOUT_CLASSIFICATION	9.184034672505517E-7	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999970417632986	WITHOUT_CLASSIFICATION	2.9582367013245436E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999998661566373	WITHOUT_CLASSIFICATION	1.3384336275082518E-7	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999971888694	WITHOUT_CLASSIFICATION	2.8111304884398752E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999543836643777	WITHOUT_CLASSIFICATION	4.5616335622206945E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999995857377759	WITHOUT_CLASSIFICATION	4.142622241690053E-7	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999942464505882	WITHOUT_CLASSIFICATION	5.753549411716472E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999988264879254	WITHOUT_CLASSIFICATION	1.1735120746363577E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999988264879254	WITHOUT_CLASSIFICATION	1.1735120746363577E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999988264879254	WITHOUT_CLASSIFICATION	1.1735120746363577E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999988264879254	WITHOUT_CLASSIFICATION	1.1735120746363577E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9983552748239996	WITHOUT_CLASSIFICATION	0.0016447251760003626	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999979988764448	WITHOUT_CLASSIFICATION	2.001123555109082E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999979988764448	WITHOUT_CLASSIFICATION	2.001123555109082E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999979988764448	WITHOUT_CLASSIFICATION	2.001123555109082E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999999538036973	WITHOUT_CLASSIFICATION	4.6196302680516715E-8	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999988427277701	WITHOUT_CLASSIFICATION	1.15727222995871E-6	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999996204549365	WITHOUT_CLASSIFICATION	3.7954506350112594E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970360272672831	WITHOUT_CLASSIFICATION	0.0029639727327168616	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970360272672831	WITHOUT_CLASSIFICATION	0.0029639727327168616	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.999999549877326	WITHOUT_CLASSIFICATION	4.501226740513129E-7	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9994921180877535	WITHOUT_CLASSIFICATION	5.07881912246461E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999224854548507	WITHOUT_CLASSIFICATION	7.751454514922123E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999224854548507	WITHOUT_CLASSIFICATION	7.751454514922123E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.999917842886875	WITHOUT_CLASSIFICATION	8.215711312499225E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.999917842886875	WITHOUT_CLASSIFICATION	8.215711312499225E-5	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999999899223538	WITHOUT_CLASSIFICATION	1.007764615049721E-8	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999999953753433	WITHOUT_CLASSIFICATION	4.62465662885434E-9	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999999972652338	WITHOUT_CLASSIFICATION	2.7347662414992353E-9	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9955718085173164	WITHOUT_CLASSIFICATION	0.004428191482683592	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999980173355898	WITHOUT_CLASSIFICATION	1.982664410221365E-6	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999999738377805	WITHOUT_CLASSIFICATION	2.6162219555468464E-8	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999963885721	WITHOUT_CLASSIFICATION	3.6114280405974864E-9	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999821309176677	WITHOUT_CLASSIFICATION	1.7869082332255903E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999999124401103	WITHOUT_CLASSIFICATION	8.755988970042338E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999997514727	WITHOUT_CLASSIFICATION	2.485272992723526E-10	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999997514727	WITHOUT_CLASSIFICATION	2.485272992723526E-10	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999998496130937	WITHOUT_CLASSIFICATION	1.5038690620916424E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999998496130937	WITHOUT_CLASSIFICATION	1.5038690620916424E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.999978920334422	WITHOUT_CLASSIFICATION	2.1079665577924026E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999997046373017	WITHOUT_CLASSIFICATION	2.9536269828030995E-7	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999721936532217	WITHOUT_CLASSIFICATION	2.780634677835004E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984605214468	WITHOUT_CLASSIFICATION	1.5394785532206498E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984605214468	WITHOUT_CLASSIFICATION	1.5394785532206498E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984605214468	WITHOUT_CLASSIFICATION	1.5394785532206498E-6	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999962103188186	WITHOUT_CLASSIFICATION	3.7896811814880576E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999952298615177	WITHOUT_CLASSIFICATION	4.770138482320294E-6	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999942950812551	WITHOUT_CLASSIFICATION	5.704918744804459E-6	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999958657329785	WITHOUT_CLASSIFICATION	4.134267021486941E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999932578606548	WITHOUT_CLASSIFICATION	6.742139345160372E-6	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999927591988962	WITHOUT_CLASSIFICATION	7.2408011037630484E-6	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999960072425031	WITHOUT_CLASSIFICATION	3.99275749682826E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999993651678377	WITHOUT_CLASSIFICATION	6.348321621624472E-7	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9999911047077702	WITHOUT_CLASSIFICATION	8.89529222976509E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999979152000165	WITHOUT_CLASSIFICATION	2.084799983562057E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9999995172471863	WITHOUT_CLASSIFICATION	4.827528137013353E-7	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.999999928156787	WITHOUT_CLASSIFICATION	7.184321311881434E-8	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999989262003167	WITHOUT_CLASSIFICATION	1.073799683351477E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970360272672831	WITHOUT_CLASSIFICATION	0.0029639727327168616	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999866598856711	WITHOUT_CLASSIFICATION	1.3340114328907467E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999914444848447	WITHOUT_CLASSIFICATION	8.555515155332436E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999936604668521	WITHOUT_CLASSIFICATION	6.339533147862131E-6	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998859277913329	WITHOUT_CLASSIFICATION	1.1407220866704426E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998859277913329	WITHOUT_CLASSIFICATION	1.1407220866704426E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998859277913329	WITHOUT_CLASSIFICATION	1.1407220866704426E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998859277913329	WITHOUT_CLASSIFICATION	1.1407220866704426E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998859277913329	WITHOUT_CLASSIFICATION	1.1407220866704426E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999737944012188	WITHOUT_CLASSIFICATION	2.6205598781186144E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998859277913329	WITHOUT_CLASSIFICATION	1.1407220866704426E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998859277913329	WITHOUT_CLASSIFICATION	1.1407220866704426E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998859277913329	WITHOUT_CLASSIFICATION	1.1407220866704426E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999996833432168	WITHOUT_CLASSIFICATION	3.166567832366902E-7	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999923930686693	WITHOUT_CLASSIFICATION	7.606931330778242E-6	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.5831737103592303	DEFECT	0.4168262896407698	WITHOUT_CLASSIFICATION
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9998841758183092	WITHOUT_CLASSIFICATION	1.158241816908368E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999878332320384	WITHOUT_CLASSIFICATION	1.2166767961563086E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999997916694291	WITHOUT_CLASSIFICATION	2.0833057080807572E-7	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999999996954972	WITHOUT_CLASSIFICATION	3.0450277582631925E-10	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999863688715577	WITHOUT_CLASSIFICATION	1.3631128442444137E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999951293902206	WITHOUT_CLASSIFICATION	4.870609779385171E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999951293902206	WITHOUT_CLASSIFICATION	4.870609779385171E-6	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.999982574242273	WITHOUT_CLASSIFICATION	1.7425757726948257E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999926396931814	WITHOUT_CLASSIFICATION	7.3603068185838924E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999950218573668	WITHOUT_CLASSIFICATION	4.978142633299263E-6	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999933011888475	WITHOUT_CLASSIFICATION	6.698811152416801E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999948817012893	WITHOUT_CLASSIFICATION	5.1182987108166265E-6	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999937773367303	WITHOUT_CLASSIFICATION	6.2226632696455045E-6	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999961442561888	WITHOUT_CLASSIFICATION	3.85574381114882E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999951099827036	WITHOUT_CLASSIFICATION	4.89001729642694E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999950972167002	WITHOUT_CLASSIFICATION	4.902783299768839E-6	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999965968376621	WITHOUT_CLASSIFICATION	3.4031623379889914E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999968359387269	WITHOUT_CLASSIFICATION	3.1640612730018393E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999960084293218	WITHOUT_CLASSIFICATION	3.9915706781918265E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.999996372556813	WITHOUT_CLASSIFICATION	3.6274431870705793E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999946507600133	WITHOUT_CLASSIFICATION	5.34923998663872E-6	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999961161501931	WITHOUT_CLASSIFICATION	3.883849806763952E-6	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999968169718685	WITHOUT_CLASSIFICATION	3.1830281315396798E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999960118199602	WITHOUT_CLASSIFICATION	3.988180039761597E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999975005374244	WITHOUT_CLASSIFICATION	2.499462575567006E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999954757260698	WITHOUT_CLASSIFICATION	4.524273930191456E-6	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999897854612299	WITHOUT_CLASSIFICATION	1.0214538770075519E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999947910957149	WITHOUT_CLASSIFICATION	5.208904285107477E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999990051031006	WITHOUT_CLASSIFICATION	9.948968994010108E-6	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999963976276873	WITHOUT_CLASSIFICATION	3.6023723127865183E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999985531670545	WITHOUT_CLASSIFICATION	1.4468329455104176E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.999995497507564	WITHOUT_CLASSIFICATION	4.502492435918893E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.999996779328905	WITHOUT_CLASSIFICATION	3.2206710950577022E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999963776490782	WITHOUT_CLASSIFICATION	3.6223509218455964E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.999995421801726	WITHOUT_CLASSIFICATION	4.578198274113163E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.999995317863525	WITHOUT_CLASSIFICATION	4.682136475050262E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999969105069719	WITHOUT_CLASSIFICATION	3.0894930280315638E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999975671684923	WITHOUT_CLASSIFICATION	2.4328315077639304E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999974977091524	WITHOUT_CLASSIFICATION	2.5022908476922263E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999956587513968	WITHOUT_CLASSIFICATION	4.341248603136895E-6	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999967944245287	WITHOUT_CLASSIFICATION	3.205575471329721E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999953570684971	WITHOUT_CLASSIFICATION	4.642931502942363E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999974841625243	WITHOUT_CLASSIFICATION	2.5158374756206026E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.999996166216156	WITHOUT_CLASSIFICATION	3.833783844125498E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.99999455301701	WITHOUT_CLASSIFICATION	5.446982990022369E-6	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999956498288075	WITHOUT_CLASSIFICATION	4.350171192527603E-6	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999921008624627	WITHOUT_CLASSIFICATION	7.899137537240421E-6	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999965205707486	WITHOUT_CLASSIFICATION	3.4794292513377103E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999956040395157	WITHOUT_CLASSIFICATION	4.39596048433732E-6	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999912319451043	WITHOUT_CLASSIFICATION	8.768054895734275E-6	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999956466287787	WITHOUT_CLASSIFICATION	4.35337122134841E-6	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.999996620640003	WITHOUT_CLASSIFICATION	3.3793599970351703E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999963969634265	WITHOUT_CLASSIFICATION	3.603036573410929E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999926644068933	WITHOUT_CLASSIFICATION	7.335593106736145E-6	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999945139466405	WITHOUT_CLASSIFICATION	5.486053359498435E-6	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999936758957434	WITHOUT_CLASSIFICATION	6.3241042566273485E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999948785970029	WITHOUT_CLASSIFICATION	5.121402997100259E-6	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.999992059044169	WITHOUT_CLASSIFICATION	7.940955830989902E-6	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.999990943059121	WITHOUT_CLASSIFICATION	9.056940879004262E-6	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999936703284211	WITHOUT_CLASSIFICATION	6.329671578849872E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999921189329574	WITHOUT_CLASSIFICATION	7.881067042684426E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999921189329574	WITHOUT_CLASSIFICATION	7.881067042684426E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.999993823719861	WITHOUT_CLASSIFICATION	6.176280138883287E-6	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999948862899561	WITHOUT_CLASSIFICATION	5.113710043948676E-6	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999935637996565	WITHOUT_CLASSIFICATION	6.436200343444629E-6	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999918590975854	WITHOUT_CLASSIFICATION	8.140902414712185E-6	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999971567231497	WITHOUT_CLASSIFICATION	2.8432768503385993E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999889865603289	WITHOUT_CLASSIFICATION	1.1013439671102975E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999939977425446	WITHOUT_CLASSIFICATION	6.002257455474794E-6	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999868715523483	WITHOUT_CLASSIFICATION	1.312844765178614E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999895734315914	WITHOUT_CLASSIFICATION	1.042656840856452E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999942877670112	WITHOUT_CLASSIFICATION	5.712232988838554E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999994866607255	WITHOUT_CLASSIFICATION	5.133392744991544E-7	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999994866607255	WITHOUT_CLASSIFICATION	5.133392744991544E-7	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999983607395846	WITHOUT_CLASSIFICATION	1.6392604154369439E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9997648955237086	WITHOUT_CLASSIFICATION	2.3510447629136472E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9997190748107575	WITHOUT_CLASSIFICATION	2.809251892425053E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999998886344	WITHOUT_CLASSIFICATION	1.1136558472912624E-10	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999924813345	WITHOUT_CLASSIFICATION	7.518665538749114E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999924813345	WITHOUT_CLASSIFICATION	7.518665538749114E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999924813345	WITHOUT_CLASSIFICATION	7.518665538749114E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999924813345	WITHOUT_CLASSIFICATION	7.518665538749114E-9	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.8116586268639542	WITHOUT_CLASSIFICATION	0.1883413731360458	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9960745048788382	WITHOUT_CLASSIFICATION	0.003925495121161799	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999972426559226	WITHOUT_CLASSIFICATION	2.7573440774851508E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999964799121444	WITHOUT_CLASSIFICATION	3.520087855700401E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999968120806298	WITHOUT_CLASSIFICATION	3.187919370072941E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999956924722011	WITHOUT_CLASSIFICATION	4.307527798948505E-6	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999961386126017	WITHOUT_CLASSIFICATION	3.861387398365031E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999927134045866	WITHOUT_CLASSIFICATION	7.286595413447946E-6	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999879930530624	WITHOUT_CLASSIFICATION	1.2006946937592417E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999952481345303	WITHOUT_CLASSIFICATION	4.751865469653915E-6	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999940612320387	WITHOUT_CLASSIFICATION	5.93876796134092E-6	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.999991636278716	WITHOUT_CLASSIFICATION	8.363721284056624E-6	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999934480375559	WITHOUT_CLASSIFICATION	6.55196244407302E-6	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.999994499879443	WITHOUT_CLASSIFICATION	5.500120556944034E-6	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999934299073427	WITHOUT_CLASSIFICATION	6.570092657329334E-6	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999925455751897	WITHOUT_CLASSIFICATION	7.4544248102705476E-6	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999962009792014	WITHOUT_CLASSIFICATION	3.799020798672313E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999973131529805	WITHOUT_CLASSIFICATION	2.6868470195769326E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999952997309166	WITHOUT_CLASSIFICATION	4.700269083392795E-6	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999951578160602	WITHOUT_CLASSIFICATION	4.842183939751543E-6	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999943709151246	WITHOUT_CLASSIFICATION	5.6290848754825304E-6	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999906560520831	WITHOUT_CLASSIFICATION	9.343947916917643E-6	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.999988048909796	WITHOUT_CLASSIFICATION	1.1951090203914159E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999937622034214	WITHOUT_CLASSIFICATION	6.237796578599599E-6	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.999993417822492	WITHOUT_CLASSIFICATION	6.582177507978609E-6	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999962353769897	WITHOUT_CLASSIFICATION	3.764623010289006E-6	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999949105536229	WITHOUT_CLASSIFICATION	5.089446377120503E-6	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999975780768311	WITHOUT_CLASSIFICATION	2.4219231688528235E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999979350640513	WITHOUT_CLASSIFICATION	2.0649359486450684E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999971594124405	WITHOUT_CLASSIFICATION	2.840587559436319E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999976299921105	WITHOUT_CLASSIFICATION	2.370007889463595E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999962384135304	WITHOUT_CLASSIFICATION	3.7615864696494973E-6	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.999995883928084	WITHOUT_CLASSIFICATION	4.1160719159662996E-6	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.999993947761211	WITHOUT_CLASSIFICATION	6.052238789102493E-6	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999952680131311	WITHOUT_CLASSIFICATION	4.731986868886709E-6	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999969844170137	WITHOUT_CLASSIFICATION	3.0155829862698074E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999963250145052	WITHOUT_CLASSIFICATION	3.674985494713832E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999967679210536	WITHOUT_CLASSIFICATION	3.232078946394042E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999942381335345	WITHOUT_CLASSIFICATION	5.761866465491734E-6	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999936636733788	WITHOUT_CLASSIFICATION	6.336326621126615E-6	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999944310000419	WITHOUT_CLASSIFICATION	5.56899995813457E-6	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999950957325555	WITHOUT_CLASSIFICATION	4.904267444486672E-6	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.999995094929615	WITHOUT_CLASSIFICATION	4.9050703849581365E-6	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999951138633952	WITHOUT_CLASSIFICATION	4.886136604853161E-6	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999959182745898	WITHOUT_CLASSIFICATION	4.081725410203279E-6	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999970315544782	WITHOUT_CLASSIFICATION	2.9684455217402777E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999949818656602	WITHOUT_CLASSIFICATION	5.018134339912547E-6	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999956840464255	WITHOUT_CLASSIFICATION	4.315953574568776E-6	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999906971144296	WITHOUT_CLASSIFICATION	9.302885570478937E-6	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999844283012554	WITHOUT_CLASSIFICATION	1.55716987446334E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999930520980282	WITHOUT_CLASSIFICATION	6.947901971687774E-6	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999915698524743	WITHOUT_CLASSIFICATION	8.43014752566686E-6	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999964893126551	WITHOUT_CLASSIFICATION	3.5106873450492082E-6	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999968034656702	WITHOUT_CLASSIFICATION	3.196534329823482E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999950564029885	WITHOUT_CLASSIFICATION	4.943597011592317E-6	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999893190746703	WITHOUT_CLASSIFICATION	1.0680925329671679E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999943497010421	WITHOUT_CLASSIFICATION	5.650298957859286E-6	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999940929700395	WITHOUT_CLASSIFICATION	5.907029960558142E-6	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999928965688292	WITHOUT_CLASSIFICATION	7.103431170728725E-6	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999999887894129	WITHOUT_CLASSIFICATION	1.1210587154681169E-8	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.999999851404643	WITHOUT_CLASSIFICATION	1.4859535702406687E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999894292951516	WITHOUT_CLASSIFICATION	1.0570704848482586E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999894292951516	WITHOUT_CLASSIFICATION	1.0570704848482586E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999894292951516	WITHOUT_CLASSIFICATION	1.0570704848482586E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999894292951516	WITHOUT_CLASSIFICATION	1.0570704848482586E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999894292951516	WITHOUT_CLASSIFICATION	1.0570704848482586E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999894292951516	WITHOUT_CLASSIFICATION	1.0570704848482586E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999894292951516	WITHOUT_CLASSIFICATION	1.0570704848482586E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999478423508268	WITHOUT_CLASSIFICATION	5.215764917318106E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999478423508268	WITHOUT_CLASSIFICATION	5.215764917318106E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999478423508268	WITHOUT_CLASSIFICATION	5.215764917318106E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999478423508268	WITHOUT_CLASSIFICATION	5.215764917318106E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999015149522252	WITHOUT_CLASSIFICATION	9.848504777478596E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999015149522252	WITHOUT_CLASSIFICATION	9.848504777478596E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.999999915091765	WITHOUT_CLASSIFICATION	8.490823493964976E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999775932277	WITHOUT_CLASSIFICATION	2.2406772331892076E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999775932277	WITHOUT_CLASSIFICATION	2.2406772331892076E-8	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999998488670582	WITHOUT_CLASSIFICATION	1.511329417396792E-7	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999998957639361	WITHOUT_CLASSIFICATION	1.0423606381513458E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993333982188	WITHOUT_CLASSIFICATION	6.666017811931423E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993333982188	WITHOUT_CLASSIFICATION	6.666017811931423E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993333982188	WITHOUT_CLASSIFICATION	6.666017811931423E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993333982188	WITHOUT_CLASSIFICATION	6.666017811931423E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993333982188	WITHOUT_CLASSIFICATION	6.666017811931423E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993333982188	WITHOUT_CLASSIFICATION	6.666017811931423E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993333982188	WITHOUT_CLASSIFICATION	6.666017811931423E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997965298277	WITHOUT_CLASSIFICATION	2.0347017234184227E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999998210933452	WITHOUT_CLASSIFICATION	1.789066549329671E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999975168484898	WITHOUT_CLASSIFICATION	2.4831515101917287E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999975168484898	WITHOUT_CLASSIFICATION	2.4831515101917287E-6	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999996675055284	WITHOUT_CLASSIFICATION	3.324944716078037E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999985815200757	WITHOUT_CLASSIFICATION	1.4184799243885822E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999985815200757	WITHOUT_CLASSIFICATION	1.4184799243885822E-6	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999999967401735	WITHOUT_CLASSIFICATION	3.259826533164126E-9	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9214503578750366	DEFECT	0.07854964212496343	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999979151849998	WITHOUT_CLASSIFICATION	2.084815000112564E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9998371677737348	WITHOUT_CLASSIFICATION	1.6283222626532426E-4	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999995969551102	WITHOUT_CLASSIFICATION	4.0304488989317034E-7	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.999999599716913	WITHOUT_CLASSIFICATION	4.0028308693403774E-7	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999991664372796	WITHOUT_CLASSIFICATION	8.335627203456494E-7	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999998489245224	WITHOUT_CLASSIFICATION	1.510754776188418E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999999882040872	WITHOUT_CLASSIFICATION	1.1795912763995361E-8	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999812456555598	WITHOUT_CLASSIFICATION	1.875434444016628E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999946339735422	WITHOUT_CLASSIFICATION	5.3660264578007906E-6	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999999368917789	WITHOUT_CLASSIFICATION	6.310822107321879E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999839825131	WITHOUT_CLASSIFICATION	1.6017486977990077E-8	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999947838968646	WITHOUT_CLASSIFICATION	5.216103135429206E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999994510967344	WITHOUT_CLASSIFICATION	5.489032655141372E-7	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.999996210065376	WITHOUT_CLASSIFICATION	3.7899346239926017E-6	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.999999996451754	WITHOUT_CLASSIFICATION	3.5482459857320758E-9	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999635853967075	WITHOUT_CLASSIFICATION	3.641460329249734E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999999115830316	WITHOUT_CLASSIFICATION	8.841696840644101E-7	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999999115830316	WITHOUT_CLASSIFICATION	8.841696840644101E-7	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999997300595679	WITHOUT_CLASSIFICATION	2.699404320906562E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999968745734	WITHOUT_CLASSIFICATION	3.12542645062069E-9	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999988908885653	WITHOUT_CLASSIFICATION	1.109111434723648E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999956512211278	WITHOUT_CLASSIFICATION	4.348778872280073E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999743154246642	WITHOUT_CLASSIFICATION	2.5684575335752943E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999743154246642	WITHOUT_CLASSIFICATION	2.5684575335752943E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999743154246642	WITHOUT_CLASSIFICATION	2.5684575335752943E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999999294765234	WITHOUT_CLASSIFICATION	7.052347657984795E-8	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9998988583044224	WITHOUT_CLASSIFICATION	1.0114169557764373E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999998655755866	WITHOUT_CLASSIFICATION	1.3442441332028603E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999920079360898	WITHOUT_CLASSIFICATION	7.992063910223196E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999955739276162	WITHOUT_CLASSIFICATION	4.426072383820809E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.999999972260468	WITHOUT_CLASSIFICATION	2.7739531997952366E-8	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999268169909001	WITHOUT_CLASSIFICATION	7.318300909979867E-5	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999982566666897	WITHOUT_CLASSIFICATION	1.7433333103525682E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.999999261164129	WITHOUT_CLASSIFICATION	7.388358709757557E-7	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999998597917975	WITHOUT_CLASSIFICATION	1.4020820246505883E-7	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999997772431486	WITHOUT_CLASSIFICATION	2.2275685148261457E-7	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999992535688389	WITHOUT_CLASSIFICATION	7.464311611489094E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9573526805428397	WITHOUT_CLASSIFICATION	0.04264731945716022	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999152970482174	WITHOUT_CLASSIFICATION	8.470295178272234E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999999249839	WITHOUT_CLASSIFICATION	7.501602055918413E-11	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999997772666391	WITHOUT_CLASSIFICATION	2.227333608199966E-7	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999991401429219	WITHOUT_CLASSIFICATION	8.598570781119627E-7	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999988979688103	WITHOUT_CLASSIFICATION	1.1020311897254168E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999986383857457	WITHOUT_CLASSIFICATION	1.3616142543513497E-6	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.536850910885465	DEFECT	0.4631490891145351	WITHOUT_CLASSIFICATION
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9960558522716598	DEFECT	0.003944147728340273	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9836014907361781	WITHOUT_CLASSIFICATION	0.016398509263821894	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.6957197405963328	DEFECT	0.3042802594036672	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9998773528864023	DEFECT	1.226471135976458E-4	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.8917325827967842	WITHOUT_CLASSIFICATION	0.10826741720321574	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.739825415959008	WITHOUT_CLASSIFICATION	0.260174584040992	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.8749545647452386	WITHOUT_CLASSIFICATION	0.1250454352547614	DEFECT
// FIXME: not correct exception	DEFECT	0.9992812595090501	DEFECT	7.187404909497904E-4	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9988962813532648	WITHOUT_CLASSIFICATION	0.0011037186467352115	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9999819040711307	WITHOUT_CLASSIFICATION	1.809592886923979E-5	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.904514123858103	WITHOUT_CLASSIFICATION	0.09548587614189696	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9979597043973781	WITHOUT_CLASSIFICATION	0.002040295602621851	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.7188570467626806	DEFECT	0.28114295323731947	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.7902755260558478	WITHOUT_CLASSIFICATION	0.2097244739441521	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9373815795690099	WITHOUT_CLASSIFICATION	0.06261842043099013	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9373815795690099	WITHOUT_CLASSIFICATION	0.06261842043099013	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9980724633699433	WITHOUT_CLASSIFICATION	0.0019275366300566502	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9876969248705258	WITHOUT_CLASSIFICATION	0.012303075129474096	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.7248058047585263	WITHOUT_CLASSIFICATION	0.27519419524147365	DEFECT
// ENEBO: Very wrong	DEFECT	0.9999230401928112	WITHOUT_CLASSIFICATION	7.695980718882814E-5	DEFECT
// ENEBO: Very wrong	DEFECT	0.9999230401928112	WITHOUT_CLASSIFICATION	7.695980718882814E-5	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9835171608668729	DEFECT	0.016482839133127123	WITHOUT_CLASSIFICATION
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9952444197716612	DEFECT	0.004755580228338801	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.8617074152753226	WITHOUT_CLASSIFICATION	0.13829258472467745	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7597553532703583	WITHOUT_CLASSIFICATION	0.24024464672964171	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.5961102113779263	DEFECT	0.4038897886220736	WITHOUT_CLASSIFICATION
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.7432263656435106	DEFECT	0.25677363435648937	WITHOUT_CLASSIFICATION
// TODO: proper sign	DEFECT	0.9989619032699544	WITHOUT_CLASSIFICATION	0.001038096730045669	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9971955215342017	DEFECT	0.0028044784657983235	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.6850151898537593	DEFECT	0.31498481014624063	WITHOUT_CLASSIFICATION
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9933768527077114	DEFECT	0.006623147292288644	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.7803705100951752	DEFECT	0.21962948990482478	WITHOUT_CLASSIFICATION
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9727280057006537	DEFECT	0.027271994299346347	WITHOUT_CLASSIFICATION
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.6117932428348262	WITHOUT_CLASSIFICATION	0.38820675716517394	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.8582633087274117	DEFECT	0.14173669127258817	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.565486862011275	WITHOUT_CLASSIFICATION	0.43451313798872493	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9796353920850922	WITHOUT_CLASSIFICATION	0.020364607914907844	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.5367704486842717	DEFECT	0.4632295513157283	WITHOUT_CLASSIFICATION
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9985807852842296	DEFECT	0.0014192147157705056	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9825347677701057	WITHOUT_CLASSIFICATION	0.017465232229894236	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9999808921447209	WITHOUT_CLASSIFICATION	1.910785527915639E-5	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.753500056293047	WITHOUT_CLASSIFICATION	0.24649994370695316	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.753500056293047	WITHOUT_CLASSIFICATION	0.24649994370695316	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.6249422971369566	WITHOUT_CLASSIFICATION	0.3750577028630433	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9981353810790974	WITHOUT_CLASSIFICATION	0.001864618920902531	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9999830066227378	DEFECT	1.699337726228987E-5	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9930115489880135	WITHOUT_CLASSIFICATION	0.006988451011986458	DEFECT
// FIXME: This is wrong	DEFECT	0.895791196429747	DEFECT	0.10420880357025304	WITHOUT_CLASSIFICATION
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.7119084339778389	DEFECT	0.2880915660221611	WITHOUT_CLASSIFICATION
// XXX Wrong, but will have to do for now	DEFECT	0.9999685734164566	WITHOUT_CLASSIFICATION	3.142658354339583E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.6539465579134612	DEFECT	0.3460534420865388	WITHOUT_CLASSIFICATION
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9794574165700554	WITHOUT_CLASSIFICATION	0.020542583429944663	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9998970248044607	WITHOUT_CLASSIFICATION	1.0297519553932862E-4	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9995292784348629	DEFECT	4.707215651370889E-4	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9533258197555705	WITHOUT_CLASSIFICATION	0.04667418024442941	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9533258197555705	WITHOUT_CLASSIFICATION	0.04667418024442941	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9998215797964279	DEFECT	1.7842020357209962E-4	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8646316000666399	DEFECT	0.1353683999333602	WITHOUT_CLASSIFICATION
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9992509498327142	DEFECT	7.490501672858657E-4	WITHOUT_CLASSIFICATION
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9998855015817661	WITHOUT_CLASSIFICATION	1.1449841823380441E-4	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9838522263444719	DEFECT	0.016147773655528115	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9985477065667134	DEFECT	0.0014522934332866302	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9997505084172669	WITHOUT_CLASSIFICATION	2.4949158273303675E-4	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.997525738338316	DEFECT	0.0024742616616840476	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.6249422971369566	WITHOUT_CLASSIFICATION	0.3750577028630433	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9998941316451033	WITHOUT_CLASSIFICATION	1.0586835489678626E-4	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9606770651258152	DEFECT	0.03932293487418473	WITHOUT_CLASSIFICATION
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9938543095616192	WITHOUT_CLASSIFICATION	0.006145690438380797	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7597553532703583	WITHOUT_CLASSIFICATION	0.24024464672964171	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9265776028504515	WITHOUT_CLASSIFICATION	0.07342239714954847	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9669538140173575	DEFECT	0.03304618598264253	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9796353920850922	WITHOUT_CLASSIFICATION	0.020364607914907844	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.997140397604661	WITHOUT_CLASSIFICATION	0.002859602395339047	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9995292784348629	DEFECT	4.707215651370889E-4	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.9940151101160254	DEFECT	0.005984889883974644	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// TODO: don't require pop	DEFECT	0.7558327564412022	WITHOUT_CLASSIFICATION	0.24416724355879796	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.6539465579134612	DEFECT	0.3460534420865388	WITHOUT_CLASSIFICATION
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9858305319692572	WITHOUT_CLASSIFICATION	0.014169468030742738	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9533258197555705	WITHOUT_CLASSIFICATION	0.04667418024442941	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9533258197555705	WITHOUT_CLASSIFICATION	0.04667418024442941	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8646316000666399	DEFECT	0.1353683999333602	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8646316000666399	DEFECT	0.1353683999333602	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8646316000666399	DEFECT	0.1353683999333602	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8646316000666399	DEFECT	0.1353683999333602	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8646316000666399	DEFECT	0.1353683999333602	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8646316000666399	DEFECT	0.1353683999333602	WITHOUT_CLASSIFICATION
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9977801257611264	WITHOUT_CLASSIFICATION	0.0022198742388735474	DEFECT
